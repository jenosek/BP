
thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f624  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800f8d0  0800f8d0  000108d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f938  0800f938  00010938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800f93c  0800f93c  0001093c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000104  24000000  0800f940  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f6c  24000104  0800fa44  00011104  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24002070  0800fa44  00012070  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00011104  2**0
                  CONTENTS, READONLY
  9 .debug_info   000216c4  00000000  00000000  00011132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000496e  00000000  00000000  000327f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a20  00000000  00000000  00037168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000013d9  00000000  00000000  00038b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036013  00000000  00000000  00039f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000251ed  00000000  00000000  0006ff74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014d585  00000000  00000000  00095161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e26e6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006e14  00000000  00000000  001e272c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000054  00000000  00000000  001e9540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000104 	.word	0x24000104
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800f8b8 	.word	0x0800f8b8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000108 	.word	0x24000108
 80002e8:	0800f8b8 	.word	0x0800f8b8

080002ec <I2C_write>:
#include "comms.h"


// I2C
void I2C_write(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af04      	add	r7, sp, #16
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	72fb      	strb	r3, [r7, #11]
 80002fa:	4613      	mov	r3, r2
 80002fc:	72bb      	strb	r3, [r7, #10]
	*status = HAL_I2C_Mem_Write(&hi2c2, dev_adress, reg_adress, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	b299      	uxth	r1, r3
 8000302:	7abb      	ldrb	r3, [r7, #10]
 8000304:	b29a      	uxth	r2, r3
 8000306:	2364      	movs	r3, #100	@ 0x64
 8000308:	9302      	str	r3, [sp, #8]
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2301      	movs	r3, #1
 8000314:	4805      	ldr	r0, [pc, #20]	@ (800032c <I2C_write+0x40>)
 8000316:	f005 f897 	bl	8005448 <HAL_I2C_Mem_Write>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	240002b4 	.word	0x240002b4

08000330 <I2C_read>:

void I2C_read(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af02      	add	r7, sp, #8
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	460b      	mov	r3, r1
 800033c:	72fb      	strb	r3, [r7, #11]
 800033e:	4613      	mov	r3, r2
 8000340:	72bb      	strb	r3, [r7, #10]
	dev_adress += 1;
 8000342:	7afb      	ldrb	r3, [r7, #11]
 8000344:	3301      	adds	r3, #1
 8000346:	72fb      	strb	r3, [r7, #11]
	*status = HAL_I2C_Master_Transmit(&hi2c2, dev_adress, &reg_adress, 1, 500);
 8000348:	7afb      	ldrb	r3, [r7, #11]
 800034a:	b299      	uxth	r1, r3
 800034c:	f107 020a 	add.w	r2, r7, #10
 8000350:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2301      	movs	r3, #1
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <I2C_read+0x60>)
 800035a:	f004 fe67 	bl	800502c <HAL_I2C_Master_Transmit>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	701a      	strb	r2, [r3, #0]
	*status |= HAL_I2C_Master_Receive(&hi2c2, dev_adress, data, 1, 100);
 8000366:	7afb      	ldrb	r3, [r7, #11]
 8000368:	b299      	uxth	r1, r3
 800036a:	2364      	movs	r3, #100	@ 0x64
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2301      	movs	r3, #1
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4807      	ldr	r0, [pc, #28]	@ (8000390 <I2C_read+0x60>)
 8000374:	f004 ff72 	bl	800525c <HAL_I2C_Master_Receive>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b2da      	uxtb	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	701a      	strb	r2, [r3, #0]
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	240002b4 	.word	0x240002b4

08000394 <HAL_SPI_TxCpltCallback>:

// SPI

// DMA callbacks, when SPI finishes
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 800039c:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <HAL_SPI_TxCpltCallback+0x1c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	24000120 	.word	0x24000120

080003b4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	24000120 	.word	0x24000120

080003d4 <SPI_check_CTS>:

void SPI_check_CTS(HAL_StatusTypeDef* status) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	uint8_t attempt = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]
	// Wait until Clear To Send (CTS) signal appears
	while (!(HAL_GPIO_ReadPin(CTS_PIN_GROUP, CTS_PIN_NUM)) && (attempt < 10)) {
 80003e0:	e005      	b.n	80003ee <SPI_check_CTS+0x1a>
		attempt++;
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	3301      	adds	r3, #1
 80003e6:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(100);
 80003e8:	2064      	movs	r0, #100	@ 0x64
 80003ea:	f001 fa1b 	bl	8001824 <HAL_Delay>
	while (!(HAL_GPIO_ReadPin(CTS_PIN_GROUP, CTS_PIN_NUM)) && (attempt < 10)) {
 80003ee:	2101      	movs	r1, #1
 80003f0:	4811      	ldr	r0, [pc, #68]	@ (8000438 <SPI_check_CTS+0x64>)
 80003f2:	f004 fd4d 	bl	8004e90 <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d102      	bne.n	8000402 <SPI_check_CTS+0x2e>
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	2b09      	cmp	r3, #9
 8000400:	d9ef      	bls.n	80003e2 <SPI_check_CTS+0xe>
	}

	if (attempt == 10) {
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	2b0a      	cmp	r3, #10
 8000406:	d103      	bne.n	8000410 <SPI_check_CTS+0x3c>
		*status = 0x3; // Timeout
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2203      	movs	r2, #3
 800040c:	701a      	strb	r2, [r3, #0]
 800040e:	e010      	b.n	8000432 <SPI_check_CTS+0x5e>
		return;
	}

	// Clear CTS once found, so it can function properly - use GET_INT_STATUS command with three zero bytes
	uint8_t data[] = {0x20, 0, 0, 0};
 8000410:	2320      	movs	r3, #32
 8000412:	60bb      	str	r3, [r7, #8]
	*status |= HAL_SPI_Transmit(&hspi4, data, 4, 50);
 8000414:	f107 0108 	add.w	r1, r7, #8
 8000418:	2332      	movs	r3, #50	@ 0x32
 800041a:	2204      	movs	r2, #4
 800041c:	4807      	ldr	r0, [pc, #28]	@ (800043c <SPI_check_CTS+0x68>)
 800041e:	f00a fce3 	bl	800ade8 <HAL_SPI_Transmit>
 8000422:	4603      	mov	r3, r0
 8000424:	461a      	mov	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	4313      	orrs	r3, r2
 800042c:	b2da      	uxtb	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	701a      	strb	r2, [r3, #0]

	// SI is now ready to receive data
	// NOTE: response should be read, however, I have not found any description on interrupt mapping in received structure
}
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	58020000 	.word	0x58020000
 800043c:	24000308 	.word	0x24000308

08000440 <SPI_write>:

void SPI_write(HAL_StatusTypeDef* status, uint8_t* data) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
	// Transmit data array
	SPI_check_CTS(status);
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff ffc2 	bl	80003d4 <SPI_check_CTS>
	*status |= HAL_SPI_Transmit(&hspi4, data, sizeof(data)/8, 50);
 8000450:	2332      	movs	r3, #50	@ 0x32
 8000452:	2200      	movs	r2, #0
 8000454:	6839      	ldr	r1, [r7, #0]
 8000456:	4807      	ldr	r0, [pc, #28]	@ (8000474 <SPI_write+0x34>)
 8000458:	f00a fcc6 	bl	800ade8 <HAL_SPI_Transmit>
 800045c:	4603      	mov	r3, r0
 800045e:	461a      	mov	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4313      	orrs	r3, r2
 8000466:	b2da      	uxtb	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	701a      	strb	r2, [r3, #0]
	return;
 800046c:	bf00      	nop
}
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	24000308 	.word	0x24000308

08000478 <PowerReset>:
	}
	strcpy(IDs[1], temp);
	return;
}

void PowerReset(HAL_StatusTypeDef* status) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers to default state
	I2C_read(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000480:	f107 030f 	add.w	r3, r7, #15
 8000484:	220c      	movs	r2, #12
 8000486:	2144      	movs	r1, #68	@ 0x44
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f7ff ff51 	bl	8000330 <I2C_read>
	reg_val++;
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	3301      	adds	r3, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000496:	f107 030f 	add.w	r3, r7, #15
 800049a:	220c      	movs	r2, #12
 800049c:	2144      	movs	r1, #68	@ 0x44
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ff24 	bl	80002ec <I2C_write>
}
 80004a4:	bf00      	nop
 80004a6:	3710      	adds	r7, #16
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <PowerInit>:


void PowerInit(HAL_StatusTypeDef* status) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers
	PowerReset(status);
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f7ff ffdf 	bl	8000478 <PowerReset>

	// Set device as SINK (Disable SRC/SNK toggle and poll CC lines only)
	// CONTROL2:(MODE, TOGGLE)
	I2C_read(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 80004ba:	f107 030f 	add.w	r3, r7, #15
 80004be:	2208      	movs	r2, #8
 80004c0:	2144      	movs	r1, #68	@ 0x44
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f7ff ff34 	bl	8000330 <I2C_read>
	reg_val |= ((1<<2) | 1);
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	f043 0305 	orr.w	r3, r3, #5
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	73fb      	strb	r3, [r7, #15]
	reg_val &= ~(1<<1);
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	f023 0302 	bic.w	r3, r3, #2
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 80004dc:	f107 030f 	add.w	r3, r7, #15
 80004e0:	2208      	movs	r2, #8
 80004e2:	2144      	movs	r1, #68	@ 0x44
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ff01 	bl	80002ec <I2C_write>


	// Initially, set current to USB default  (recommended by doc.)
	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80004ea:	f107 030f 	add.w	r3, r7, #15
 80004ee:	2206      	movs	r2, #6
 80004f0:	2144      	movs	r1, #68	@ 0x44
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff ff1c 	bl	8000330 <I2C_read>
	reg_val &= ~(1<<3);
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	f023 0308 	bic.w	r3, r3, #8
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	73fb      	strb	r3, [r7, #15]
	reg_val |= (1 << 2);
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	b2db      	uxtb	r3, r3
 800050a:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 800050c:	f107 030f 	add.w	r3, r7, #15
 8000510:	2206      	movs	r2, #6
 8000512:	2144      	movs	r1, #68	@ 0x44
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff fee9 	bl	80002ec <I2C_write>

	// Disable current source(s) at CC lines
	I2C_read(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 800051a:	f107 030f 	add.w	r3, r7, #15
 800051e:	2202      	movs	r2, #2
 8000520:	2144      	movs	r1, #68	@ 0x44
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff ff04 	bl	8000330 <I2C_read>
	reg_val &= ~((1 << 5) | (1 << 4));
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800052e:	b2db      	uxtb	r3, r3
 8000530:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 8000532:	f107 030f 	add.w	r3, r7, #15
 8000536:	2202      	movs	r2, #2
 8000538:	2144      	movs	r1, #68	@ 0x44
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff fed6 	bl	80002ec <I2C_write>

	// Mask interrupt for current level request
	reg_val = 0xFE;
 8000540:	23fe      	movs	r3, #254	@ 0xfe
 8000542:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASK, &reg_val);
 8000544:	f107 030f 	add.w	r3, r7, #15
 8000548:	220a      	movs	r2, #10
 800054a:	2144      	movs	r1, #68	@ 0x44
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff fecd 	bl	80002ec <I2C_write>

	// Mask interrupt for toggle status
	reg_val = 0xBF;
 8000552:	23bf      	movs	r3, #191	@ 0xbf
 8000554:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKA, &reg_val);
 8000556:	f107 030f 	add.w	r3, r7, #15
 800055a:	220e      	movs	r2, #14
 800055c:	2144      	movs	r1, #68	@ 0x44
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff fec4 	bl	80002ec <I2C_write>

	// Mask interrupt for GoodCRC acknowledge (BMC is not used)
	reg_val = 0x01;
 8000564:	2301      	movs	r3, #1
 8000566:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKB, &reg_val);
 8000568:	f107 030f 	add.w	r3, r7, #15
 800056c:	220f      	movs	r2, #15
 800056e:	2144      	movs	r1, #68	@ 0x44
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff febb 	bl	80002ec <I2C_write>
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <PowerIncreaseCurrent>:

void PowerIncreaseCurrent(HAL_StatusTypeDef* status) {
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 8000586:	f107 030f 	add.w	r3, r7, #15
 800058a:	2206      	movs	r2, #6
 800058c:	2144      	movs	r1, #68	@ 0x44
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff fece 	bl	8000330 <I2C_read>
	reg_val |= ((1<<3) | (1<<2));
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	f043 030c 	orr.w	r3, r3, #12
 800059a:	b2db      	uxtb	r3, r3
 800059c:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 800059e:	f107 030f 	add.w	r3, r7, #15
 80005a2:	2206      	movs	r2, #6
 80005a4:	2144      	movs	r1, #68	@ 0x44
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff fea0 	bl	80002ec <I2C_write>

	return;
 80005ac:	bf00      	nop
}
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005b8:	f000 fb6c 	bl	8000c94 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f001 f8a0 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f81c 	bl	80005fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005c4:	f000 f898 	bl	80006f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 fa90 	bl	8000aec <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 fa5e 	bl	8000a8c <MX_DMA_Init>
  MX_DCMI_Init();
 80005d0:	f000 f992 	bl	80008f8 <MX_DCMI_Init>
  MX_I2C2_Init();
 80005d4:	f000 f9c4 	bl	8000960 <MX_I2C2_Init>
  MX_ADC1_Init();
 80005d8:	f000 f8ae 	bl	8000738 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005dc:	f000 f926 	bl	800082c <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 80005e0:	f00e fbf4 	bl	800edcc <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 80005e4:	f000 f9fc 	bl	80009e0 <MX_SPI4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setup(&status, &error_index);
 80005e8:	4902      	ldr	r1, [pc, #8]	@ (80005f4 <main+0x40>)
 80005ea:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <main+0x44>)
 80005ec:	f000 fb84 	bl	8000cf8 <setup>
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <main+0x3c>
 80005f4:	24000481 	.word	0x24000481
 80005f8:	24000480 	.word	0x24000480

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09c      	sub	sp, #112	@ 0x70
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000606:	224c      	movs	r2, #76	@ 0x4c
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f00f f928 	bl	800f860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2220      	movs	r2, #32
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f00f f922 	bl	800f860 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800061c:	4b34      	ldr	r3, [pc, #208]	@ (80006f0 <SystemClock_Config+0xf4>)
 800061e:	f04f 32ff 	mov.w	r2, #4294967295
 8000622:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000626:	2002      	movs	r0, #2
 8000628:	f006 fe54 	bl	80072d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <SystemClock_Config+0xf8>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a2f      	ldr	r2, [pc, #188]	@ (80006f4 <SystemClock_Config+0xf8>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <SystemClock_Config+0xf8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000648:	bf00      	nop
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <SystemClock_Config+0xf8>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000656:	d1f8      	bne.n	800064a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000658:	2303      	movs	r3, #3
 800065a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800065c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000660:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000662:	2301      	movs	r3, #1
 8000664:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000666:	2340      	movs	r3, #64	@ 0x40
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	2302      	movs	r3, #2
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000676:	2346      	movs	r3, #70	@ 0x46
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800067e:	2303      	movs	r3, #3
 8000680:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000686:	230c      	movs	r3, #12
 8000688:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800068a:	2300      	movs	r3, #0
 800068c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fe66 	bl	8007368 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006a2:	f000 fb23 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	233f      	movs	r3, #63	@ 0x3f
 80006a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006b6:	2340      	movs	r3, #64	@ 0x40
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ba:	2340      	movs	r3, #64	@ 0x40
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006c4:	2340      	movs	r3, #64	@ 0x40
 80006c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2106      	movs	r1, #6
 80006cc:	4618      	mov	r0, r3
 80006ce:	f007 fa7d 	bl	8007bcc <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80006d8:	f000 fb08 	bl	8000cec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80006dc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006e0:	2100      	movs	r1, #0
 80006e2:	2000      	movs	r0, #0
 80006e4:	f007 fc28 	bl	8007f38 <HAL_RCC_MCOConfig>
}
 80006e8:	bf00      	nop
 80006ea:	3770      	adds	r7, #112	@ 0x70
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	58024400 	.word	0x58024400
 80006f4:	58024800 	.word	0x58024800

080006f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0b0      	sub	sp, #192	@ 0xc0
 80006fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	22c0      	movs	r2, #192	@ 0xc0
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f00f f8ab 	bl	800f860 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800070a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800070e:	f04f 0300 	mov.w	r3, #0
 8000712:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 8000716:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800071a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4618      	mov	r0, r3
 8000720:	f007 fe34 	bl	800838c <HAL_RCCEx_PeriphCLKConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <PeriphCommonClock_Config+0x36>
  {
    Error_Handler();
 800072a:	f000 fadf 	bl	8000cec <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	37c0      	adds	r7, #192	@ 0xc0
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
 8000758:	615a      	str	r2, [r3, #20]
 800075a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800075c:	4b30      	ldr	r3, [pc, #192]	@ (8000820 <MX_ADC1_Init+0xe8>)
 800075e:	4a31      	ldr	r2, [pc, #196]	@ (8000824 <MX_ADC1_Init+0xec>)
 8000760:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000762:	4b2f      	ldr	r3, [pc, #188]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000764:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800076a:	4b2d      	ldr	r3, [pc, #180]	@ (8000820 <MX_ADC1_Init+0xe8>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000770:	4b2b      	ldr	r3, [pc, #172]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000776:	4b2a      	ldr	r3, [pc, #168]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000778:	2204      	movs	r2, #4
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800077c:	4b28      	ldr	r3, [pc, #160]	@ (8000820 <MX_ADC1_Init+0xe8>)
 800077e:	2200      	movs	r2, #0
 8000780:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000782:	4b27      	ldr	r3, [pc, #156]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000784:	2200      	movs	r2, #0
 8000786:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000788:	4b25      	ldr	r3, [pc, #148]	@ (8000820 <MX_ADC1_Init+0xe8>)
 800078a:	2201      	movs	r2, #1
 800078c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000790:	2200      	movs	r2, #0
 8000792:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079a:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <MX_ADC1_Init+0xe8>)
 800079c:	2200      	movs	r2, #0
 800079e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ba:	4819      	ldr	r0, [pc, #100]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007bc:	f001 fa14 	bl	8001be8 <HAL_ADC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007c6:	f000 fa91 	bl	8000cec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4812      	ldr	r0, [pc, #72]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007d6:	f001 fed3 	bl	8002580 <HAL_ADCEx_MultiModeConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e0:	f000 fa84 	bl	8000cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e8:	2306      	movs	r3, #6
 80007ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f6:	2304      	movs	r3, #4
 80007f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000808:	f001 fb48 	bl	8001e9c <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000812:	f000 fa6b 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	@ 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	24000124 	.word	0x24000124
 8000824:	40022000 	.word	0x40022000
 8000828:	25b00200 	.word	0x25b00200

0800082c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
 8000840:	615a      	str	r2, [r3, #20]
 8000842:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000844:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <MX_ADC2_Init+0xc0>)
 8000846:	4a2a      	ldr	r2, [pc, #168]	@ (80008f0 <MX_ADC2_Init+0xc4>)
 8000848:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800084a:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <MX_ADC2_Init+0xc0>)
 800084c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000850:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000852:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <MX_ADC2_Init+0xc0>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000858:	4b24      	ldr	r3, [pc, #144]	@ (80008ec <MX_ADC2_Init+0xc0>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800085e:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <MX_ADC2_Init+0xc0>)
 8000860:	2204      	movs	r2, #4
 8000862:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <MX_ADC2_Init+0xc0>)
 8000866:	2200      	movs	r2, #0
 8000868:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800086a:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <MX_ADC2_Init+0xc0>)
 800086c:	2200      	movs	r2, #0
 800086e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_ADC2_Init+0xc0>)
 8000872:	2201      	movs	r2, #1
 8000874:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <MX_ADC2_Init+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_ADC2_Init+0xc0>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_ADC2_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_ADC2_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_ADC2_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_ADC2_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_ADC2_Init+0xc0>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008a2:	4812      	ldr	r0, [pc, #72]	@ (80008ec <MX_ADC2_Init+0xc0>)
 80008a4:	f001 f9a0 	bl	8001be8 <HAL_ADC_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80008ae:	f000 fa1d 	bl	8000cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <MX_ADC2_Init+0xc8>)
 80008b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b6:	2306      	movs	r3, #6
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008be:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008c4:	2304      	movs	r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_ADC2_Init+0xc0>)
 80008d6:	f001 fae1 	bl	8001e9c <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80008e0:	f000 fa04 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	24000188 	.word	0x24000188
 80008f0:	40022100 	.word	0x40022100
 80008f4:	21800100 	.word	0x21800100

080008f8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_DCMI_Init+0x60>)
 80008fe:	4a17      	ldr	r2, [pc, #92]	@ (800095c <MX_DCMI_Init+0x64>)
 8000900:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_DCMI_Init+0x60>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <MX_DCMI_Init+0x60>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_DCMI_Init+0x60>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000914:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <MX_DCMI_Init+0x60>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_DCMI_Init+0x60>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000920:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <MX_DCMI_Init+0x60>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <MX_DCMI_Init+0x60>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <MX_DCMI_Init+0x60>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_DCMI_Init+0x60>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <MX_DCMI_Init+0x60>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_DCMI_Init+0x60>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <MX_DCMI_Init+0x60>)
 8000946:	f002 f83f 	bl	80029c8 <HAL_DCMI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000950:	f000 f9cc 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	240001ec 	.word	0x240001ec
 800095c:	48020000 	.word	0x48020000

08000960 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_I2C2_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	@ (80009d8 <MX_I2C2_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_I2C2_Init+0x74>)
 800096c:	4a1b      	ldr	r2, [pc, #108]	@ (80009dc <MX_I2C2_Init+0x7c>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_I2C2_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_I2C2_Init+0x74>)
 8000978:	2201      	movs	r2, #1
 800097a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_I2C2_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_I2C2_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_I2C2_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_I2C2_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_I2C2_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800099a:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <MX_I2C2_Init+0x74>)
 800099c:	f004 faaa 	bl	8004ef4 <HAL_I2C_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009a6:	f000 f9a1 	bl	8000cec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <MX_I2C2_Init+0x74>)
 80009ae:	f005 f959 	bl	8005c64 <HAL_I2CEx_ConfigAnalogFilter>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009b8:	f000 f998 	bl	8000cec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_I2C2_Init+0x74>)
 80009c0:	f005 f99b 	bl	8005cfa <HAL_I2CEx_ConfigDigitalFilter>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 f98f 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	240002b4 	.word	0x240002b4
 80009d8:	40005800 	.word	0x40005800
 80009dc:	20b0ccff 	.word	0x20b0ccff

080009e0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80009e4:	4b27      	ldr	r3, [pc, #156]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 80009e6:	4a28      	ldr	r2, [pc, #160]	@ (8000a88 <MX_SPI4_Init+0xa8>)
 80009e8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009ea:	4b26      	ldr	r3, [pc, #152]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 80009ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009f0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80009f2:	4b24      	ldr	r3, [pc, #144]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	4b22      	ldr	r3, [pc, #136]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 80009fa:	2207      	movs	r2, #7
 80009fc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a0c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000a10:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a36:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_SPI4_Init+0xa4>)
 8000a70:	f00a f896 	bl	800aba0 <HAL_SPI_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000a7a:	f000 f937 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	24000308 	.word	0x24000308
 8000a88:	40013400 	.word	0x40013400

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <MX_DMA_Init+0x5c>)
 8000a94:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000a98:	4a13      	ldr	r2, [pc, #76]	@ (8000ae8 <MX_DMA_Init+0x5c>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_DMA_Init+0x5c>)
 8000aa4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	200b      	movs	r0, #11
 8000ab6:	f001 feda 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aba:	200b      	movs	r0, #11
 8000abc:	f001 fef1 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	200c      	movs	r0, #12
 8000ac6:	f001 fed2 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000aca:	200c      	movs	r0, #12
 8000acc:	f001 fee9 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	200d      	movs	r0, #13
 8000ad6:	f001 feca 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ada:	200d      	movs	r0, #13
 8000adc:	f001 fee1 	bl	80028a2 <HAL_NVIC_EnableIRQ>

}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	58024400 	.word	0x58024400

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	@ 0x30
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b02:	4b5f      	ldr	r3, [pc, #380]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b08:	4a5d      	ldr	r2, [pc, #372]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b12:	4b5b      	ldr	r3, [pc, #364]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b57      	ldr	r3, [pc, #348]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b26:	4a56      	ldr	r2, [pc, #344]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b30:	4b53      	ldr	r3, [pc, #332]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b50      	ldr	r3, [pc, #320]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b44:	4a4e      	ldr	r2, [pc, #312]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b48      	ldr	r3, [pc, #288]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b62:	4a47      	ldr	r2, [pc, #284]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b6c:	4b44      	ldr	r3, [pc, #272]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	4b41      	ldr	r3, [pc, #260]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b80:	4a3f      	ldr	r2, [pc, #252]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b90:	f003 0310 	and.w	r3, r3, #16
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b98:	4b39      	ldr	r3, [pc, #228]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000b9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b9e:	4a38      	ldr	r2, [pc, #224]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ba8:	4b35      	ldr	r3, [pc, #212]	@ (8000c80 <MX_GPIO_Init+0x194>)
 8000baa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_3V3_GPIO_Port, DCMI_3V3_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bbc:	4831      	ldr	r0, [pc, #196]	@ (8000c84 <MX_GPIO_Init+0x198>)
 8000bbe:	f004 f97f 	bl	8004ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DCMI_RST_Pin|DCMI_PWDN_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000bc8:	482f      	ldr	r0, [pc, #188]	@ (8000c88 <MX_GPIO_Init+0x19c>)
 8000bca:	f004 f979 	bl	8004ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_N_Pin */
  GPIO_InitStruct.Pin = INT_N_Pin;
 8000bce:	2380      	movs	r3, #128	@ 0x80
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	482a      	ldr	r0, [pc, #168]	@ (8000c8c <MX_GPIO_Init+0x1a0>)
 8000be2:	f003 ffa5 	bl	8004b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT__Pin */
  GPIO_InitStruct.Pin = FLT__Pin;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(FLT__GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4825      	ldr	r0, [pc, #148]	@ (8000c90 <MX_GPIO_Init+0x1a4>)
 8000bfa:	f003 ff99 	bl	8004b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : COMMAND_DONE_Pin nIRQ_Pin */
  GPIO_InitStruct.Pin = COMMAND_DONE_Pin|nIRQ_Pin;
 8000bfe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	481c      	ldr	r0, [pc, #112]	@ (8000c84 <MX_GPIO_Init+0x198>)
 8000c14:	f003 ff8c 	bl	8004b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_3V3_Pin */
  GPIO_InitStruct.Pin = DCMI_3V3_Pin;
 8000c18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DCMI_3V3_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4814      	ldr	r0, [pc, #80]	@ (8000c84 <MX_GPIO_Init+0x198>)
 8000c32:	f003 ff7d 	bl	8004b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_RST_Pin DCMI_PWDN_Pin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin|DCMI_PWDN_Pin;
 8000c36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480e      	ldr	r0, [pc, #56]	@ (8000c88 <MX_GPIO_Init+0x19c>)
 8000c50:	f003 ff6e 	bl	8004b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_MCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_MCLK_Pin;
 8000c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DCMI_MCLK_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <MX_GPIO_Init+0x1a0>)
 8000c72:	f003 ff5d 	bl	8004b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	3730      	adds	r7, #48	@ 0x30
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	58024400 	.word	0x58024400
 8000c84:	58021000 	.word	0x58021000
 8000c88:	58020c00 	.word	0x58020c00
 8000c8c:	58020000 	.word	0x58020000
 8000c90:	58020400 	.word	0x58020400

08000c94 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ca6:	f001 fe17 	bl	80028d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000caa:	2301      	movs	r3, #1
 8000cac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cb6:	231f      	movs	r3, #31
 8000cb8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cba:	2387      	movs	r3, #135	@ 0x87
 8000cbc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fe35 	bl	8002948 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cde:	2004      	movs	r0, #4
 8000ce0:	f001 fe12 	bl	8002908 <HAL_MPU_Enable>

}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <setup>:



}

void setup(HAL_StatusTypeDef* status, fault_flag* error_index) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]


	// USB-C
	PowerInit(status);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fbd2 	bl	80004ac <PowerInit>

	/// Check for errors, if non are found -> increase supply current
	if (*status == 0) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d107      	bne.n	8000d20 <setup+0x28>
		PowerIncreaseCurrent(status);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff fc34 	bl	800057e <PowerIncreaseCurrent>
		*error_index = POWER_INIT;
		return;
	}

	/// Check for error
	if (*status != 0) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d008      	beq.n	8000d30 <setup+0x38>
 8000d1e:	e003      	b.n	8000d28 <setup+0x30>
		*error_index = POWER_INIT;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
		return;
 8000d26:	e02c      	b.n	8000d82 <setup+0x8a>
		*error_index = POWER_INC;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	701a      	strb	r2, [r3, #0]
		return;
 8000d2e:	e028      	b.n	8000d82 <setup+0x8a>
	}


	// Transceiver
	/// Pull down NSEL pin to begin SPI communication with transceiver
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d36:	4814      	ldr	r0, [pc, #80]	@ (8000d88 <setup+0x90>)
 8000d38:	f004 f8c2 	bl	8004ec0 <HAL_GPIO_WritePin>

	/// Wait for CTS pin to go high
	SPI_check_CTS(status);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fb49 	bl	80003d4 <SPI_check_CTS>
	if (*status != 0) {
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <setup+0x5a>
		*error_index = RADIO_CTS;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	701a      	strb	r2, [r3, #0]
		return;
 8000d50:	e017      	b.n	8000d82 <setup+0x8a>
	}

	/// Issue POWER_UP command
	uint8_t data[] = {RF_POWER_UP};
 8000d52:	4a0e      	ldr	r2, [pc, #56]	@ (8000d8c <setup+0x94>)
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d5c:	6018      	str	r0, [r3, #0]
 8000d5e:	3304      	adds	r3, #4
 8000d60:	8019      	strh	r1, [r3, #0]
 8000d62:	3302      	adds	r3, #2
 8000d64:	0c0a      	lsrs	r2, r1, #16
 8000d66:	701a      	strb	r2, [r3, #0]
	SPI_write(status, data);
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fb66 	bl	8000440 <SPI_write>
	if (*status != 0) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <setup+0x8a>
		*error_index = RADIO_PWUP;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	701a      	strb	r2, [r3, #0]
	}



}
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	58021000 	.word	0x58021000
 8000d8c:	0800f8d0 	.word	0x0800f8d0

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <HAL_MspInit+0x30>)
 8000d98:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d9c:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_MspInit+0x30>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_MspInit+0x30>)
 8000da8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	58024400 	.word	0x58024400

08000dc4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0be      	sub	sp, #248	@ 0xf8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	22c0      	movs	r2, #192	@ 0xc0
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f00e fd3b 	bl	800f860 <memset>
  if(hadc->Instance==ADC1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a6f      	ldr	r2, [pc, #444]	@ (8000fac <HAL_ADC_MspInit+0x1e8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	f040 8087 	bne.w	8000f04 <HAL_ADC_MspInit+0x140>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000df6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000e02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f007 fabc 	bl	800838c <HAL_RCCEx_PeriphCLKConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8000e1a:	f7ff ff67 	bl	8000cec <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e1e:	4b64      	ldr	r3, [pc, #400]	@ (8000fb0 <HAL_ADC_MspInit+0x1ec>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a62      	ldr	r2, [pc, #392]	@ (8000fb0 <HAL_ADC_MspInit+0x1ec>)
 8000e26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e28:	4b61      	ldr	r3, [pc, #388]	@ (8000fb0 <HAL_ADC_MspInit+0x1ec>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10e      	bne.n	8000e4e <HAL_ADC_MspInit+0x8a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e30:	4b60      	ldr	r3, [pc, #384]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e32:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e36:	4a5f      	ldr	r2, [pc, #380]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000e40:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e42:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	61fb      	str	r3, [r7, #28]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b59      	ldr	r3, [pc, #356]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e54:	4a57      	ldr	r2, [pc, #348]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e5e:	4b55      	ldr	r3, [pc, #340]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4b51      	ldr	r3, [pc, #324]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e72:	4a50      	ldr	r2, [pc, #320]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e90:	4a48      	ldr	r2, [pc, #288]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e9a:	4b46      	ldr	r3, [pc, #280]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000e9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INN16
    PC4     ------> ADC1_INP4
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = NTC_2__Pin|NTC_2_A1_Pin;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	483d      	ldr	r0, [pc, #244]	@ (8000fb8 <HAL_ADC_MspInit+0x1f4>)
 8000ec2:	f003 fe35 	bl	8004b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CC1_Pin;
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC1_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4837      	ldr	r0, [pc, #220]	@ (8000fbc <HAL_ADC_MspInit+0x1f8>)
 8000ee0:	f003 fe26 	bl	8004b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VBUS_Pin;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eea:	2303      	movs	r3, #3
 8000eec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ADC_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4830      	ldr	r0, [pc, #192]	@ (8000fc0 <HAL_ADC_MspInit+0x1fc>)
 8000efe:	f003 fe17 	bl	8004b30 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f02:	e04e      	b.n	8000fa2 <HAL_ADC_MspInit+0x1de>
  else if(hadc->Instance==ADC2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc4 <HAL_ADC_MspInit+0x200>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d149      	bne.n	8000fa2 <HAL_ADC_MspInit+0x1de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f0e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000f1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	4618      	mov	r0, r3
 8000f28:	f007 fa30 	bl	800838c <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_ADC_MspInit+0x172>
      Error_Handler();
 8000f32:	f7ff fedb 	bl	8000cec <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <HAL_ADC_MspInit+0x1ec>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb0 <HAL_ADC_MspInit+0x1ec>)
 8000f3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <HAL_ADC_MspInit+0x1ec>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10e      	bne.n	8000f66 <HAL_ADC_MspInit+0x1a2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f48:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000f4a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f4e:	4a19      	ldr	r2, [pc, #100]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000f58:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000f5a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f6c:	4a11      	ldr	r2, [pc, #68]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <HAL_ADC_MspInit+0x1f0>)
 8000f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CC2_Pin;
 8000f84:	2320      	movs	r3, #32
 8000f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC2_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4807      	ldr	r0, [pc, #28]	@ (8000fbc <HAL_ADC_MspInit+0x1f8>)
 8000f9e:	f003 fdc7 	bl	8004b30 <HAL_GPIO_Init>
}
 8000fa2:	bf00      	nop
 8000fa4:	37f8      	adds	r7, #248	@ 0xf8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40022000 	.word	0x40022000
 8000fb0:	24000484 	.word	0x24000484
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	58020000 	.word	0x58020000
 8000fbc:	58020800 	.word	0x58020800
 8000fc0:	58020400 	.word	0x58020400
 8000fc4:	40022100 	.word	0x40022100

08000fc8 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	@ 0x30
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a6a      	ldr	r2, [pc, #424]	@ (8001190 <HAL_DCMI_MspInit+0x1c8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	f040 80ce 	bne.w	8001188 <HAL_DCMI_MspInit+0x1c0>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000fec:	4b69      	ldr	r3, [pc, #420]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 8000fee:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8000ff2:	4a68      	ldr	r2, [pc, #416]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
 8000ffc:	4b65      	ldr	r3, [pc, #404]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 8000ffe:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b62      	ldr	r3, [pc, #392]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 800100c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001010:	4a60      	ldr	r2, [pc, #384]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800101a:	4b5e      	ldr	r3, [pc, #376]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 800101c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001028:	4b5a      	ldr	r3, [pc, #360]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 800102a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800102e:	4a59      	ldr	r2, [pc, #356]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001038:	4b56      	ldr	r3, [pc, #344]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 800103a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001046:	4b53      	ldr	r3, [pc, #332]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 8001048:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800104c:	4a51      	ldr	r2, [pc, #324]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 800104e:	f043 0308 	orr.w	r3, r3, #8
 8001052:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001056:	4b4f      	ldr	r3, [pc, #316]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 8001058:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001064:	4b4b      	ldr	r3, [pc, #300]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 8001066:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800106a:	4a4a      	ldr	r2, [pc, #296]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001074:	4b47      	ldr	r3, [pc, #284]	@ (8001194 <HAL_DCMI_MspInit+0x1cc>)
 8001076:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001082:	2350      	movs	r3, #80	@ 0x50
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001092:	230d      	movs	r3, #13
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	483e      	ldr	r0, [pc, #248]	@ (8001198 <HAL_DCMI_MspInit+0x1d0>)
 800109e:	f003 fd47 	bl	8004b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80010a2:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 80010a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010b4:	230d      	movs	r3, #13
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4837      	ldr	r0, [pc, #220]	@ (800119c <HAL_DCMI_MspInit+0x1d4>)
 80010c0:	f003 fd36 	bl	8004b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010c4:	2308      	movs	r3, #8
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010d4:	230d      	movs	r3, #13
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4830      	ldr	r0, [pc, #192]	@ (80011a0 <HAL_DCMI_MspInit+0x1d8>)
 80010e0:	f003 fd26 	bl	8004b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010e4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010f6:	230d      	movs	r3, #13
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4828      	ldr	r0, [pc, #160]	@ (80011a4 <HAL_DCMI_MspInit+0x1dc>)
 8001102:	f003 fd15 	bl	8004b30 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001106:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001108:	4a28      	ldr	r2, [pc, #160]	@ (80011ac <HAL_DCMI_MspInit+0x1e4>)
 800110a:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 800110e:	224b      	movs	r2, #75	@ 0x4b
 8001110:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001112:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001118:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800111e:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001120:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001124:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001126:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001128:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800112c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001130:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001134:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001138:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800113c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001146:	2204      	movs	r2, #4
 8001148:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 800114c:	2203      	movs	r2, #3
 800114e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001152:	2200      	movs	r2, #0
 8001154:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001158:	2200      	movs	r2, #0
 800115a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800115c:	4812      	ldr	r0, [pc, #72]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 800115e:	f001 fd75 	bl	8002c4c <HAL_DMA_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_DCMI_MspInit+0x1a4>
    {
      Error_Handler();
 8001168:	f7ff fdc0 	bl	8000cec <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001170:	649a      	str	r2, [r3, #72]	@ 0x48
 8001172:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <HAL_DCMI_MspInit+0x1e0>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	204e      	movs	r0, #78	@ 0x4e
 800117e:	f001 fb76 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8001182:	204e      	movs	r0, #78	@ 0x4e
 8001184:	f001 fb8d 	bl	80028a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001188:	bf00      	nop
 800118a:	3730      	adds	r7, #48	@ 0x30
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48020000 	.word	0x48020000
 8001194:	58024400 	.word	0x58024400
 8001198:	58020000 	.word	0x58020000
 800119c:	58020800 	.word	0x58020800
 80011a0:	58020c00 	.word	0x58020c00
 80011a4:	58020400 	.word	0x58020400
 80011a8:	2400023c 	.word	0x2400023c
 80011ac:	40020010 	.word	0x40020010

080011b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0ba      	sub	sp, #232	@ 0xe8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	22c0      	movs	r2, #192	@ 0xc0
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00e fb45 	bl	800f860 <memset>
  if(hi2c->Instance==I2C2)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a27      	ldr	r2, [pc, #156]	@ (8001278 <HAL_I2C_MspInit+0xc8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d146      	bne.n	800126e <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011e0:	f04f 0208 	mov.w	r2, #8
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4618      	mov	r0, r3
 80011f8:	f007 f8c8 	bl	800838c <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001202:	f7ff fd73 	bl	8000cec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <HAL_I2C_MspInit+0xcc>)
 8001208:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800120c:	4a1b      	ldr	r2, [pc, #108]	@ (800127c <HAL_I2C_MspInit+0xcc>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_I2C_MspInit+0xcc>)
 8001218:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001224:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001228:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122c:	2312      	movs	r3, #18
 800122e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800123e:	2304      	movs	r3, #4
 8001240:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <HAL_I2C_MspInit+0xd0>)
 800124c:	f003 fc70 	bl	8004b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <HAL_I2C_MspInit+0xcc>)
 8001252:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001256:	4a09      	ldr	r2, [pc, #36]	@ (800127c <HAL_I2C_MspInit+0xcc>)
 8001258:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800125c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_I2C_MspInit+0xcc>)
 8001262:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800126e:	bf00      	nop
 8001270:	37e8      	adds	r7, #232	@ 0xe8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40005800 	.word	0x40005800
 800127c:	58024400 	.word	0x58024400
 8001280:	58020400 	.word	0x58020400

08001284 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ba      	sub	sp, #232	@ 0xe8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	22c0      	movs	r2, #192	@ 0xc0
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00e fadb 	bl	800f860 <memset>
  if(hspi->Instance==SPI4)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a63      	ldr	r2, [pc, #396]	@ (800143c <HAL_SPI_MspInit+0x1b8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	f040 80be 	bne.w	8001432 <HAL_SPI_MspInit+0x1ae>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80012b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 f85e 	bl	800838c <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80012d6:	f7ff fd09 	bl	8000cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80012da:	4b59      	ldr	r3, [pc, #356]	@ (8001440 <HAL_SPI_MspInit+0x1bc>)
 80012dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80012e0:	4a57      	ldr	r2, [pc, #348]	@ (8001440 <HAL_SPI_MspInit+0x1bc>)
 80012e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012e6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80012ea:	4b55      	ldr	r3, [pc, #340]	@ (8001440 <HAL_SPI_MspInit+0x1bc>)
 80012ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80012f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f8:	4b51      	ldr	r3, [pc, #324]	@ (8001440 <HAL_SPI_MspInit+0x1bc>)
 80012fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012fe:	4a50      	ldr	r2, [pc, #320]	@ (8001440 <HAL_SPI_MspInit+0x1bc>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001308:	4b4d      	ldr	r3, [pc, #308]	@ (8001440 <HAL_SPI_MspInit+0x1bc>)
 800130a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_nSEL_Pin;
 8001316:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800131a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001324:	2301      	movs	r3, #1
 8001326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001330:	2305      	movs	r3, #5
 8001332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(SPI4_nSEL_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800133a:	4619      	mov	r1, r3
 800133c:	4841      	ldr	r0, [pc, #260]	@ (8001444 <HAL_SPI_MspInit+0x1c0>)
 800133e:	f003 fbf7 	bl	8004b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001342:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800135c:	2305      	movs	r3, #5
 800135e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001362:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001366:	4619      	mov	r1, r3
 8001368:	4836      	ldr	r0, [pc, #216]	@ (8001444 <HAL_SPI_MspInit+0x1c0>)
 800136a:	f003 fbe1 	bl	8004b30 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream1;
 800136e:	4b36      	ldr	r3, [pc, #216]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 8001370:	4a36      	ldr	r2, [pc, #216]	@ (800144c <HAL_SPI_MspInit+0x1c8>)
 8001372:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001374:	4b34      	ldr	r3, [pc, #208]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 8001376:	2254      	movs	r2, #84	@ 0x54
 8001378:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137a:	4b33      	ldr	r3, [pc, #204]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 800137c:	2240      	movs	r2, #64	@ 0x40
 800137e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001380:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001386:	4b30      	ldr	r3, [pc, #192]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 8001388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138e:	4b2e      	ldr	r3, [pc, #184]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001394:	4b2c      	ldr	r3, [pc, #176]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800139a:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013a0:	4b29      	ldr	r3, [pc, #164]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a6:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80013ac:	4826      	ldr	r0, [pc, #152]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 80013ae:	f001 fc4d 	bl	8002c4c <HAL_DMA_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_SPI_MspInit+0x138>
    {
      Error_Handler();
 80013b8:	f7ff fc98 	bl	8000cec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a22      	ldr	r2, [pc, #136]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 80013c0:	679a      	str	r2, [r3, #120]	@ 0x78
 80013c2:	4a21      	ldr	r2, [pc, #132]	@ (8001448 <HAL_SPI_MspInit+0x1c4>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream2;
 80013c8:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 80013ca:	4a22      	ldr	r2, [pc, #136]	@ (8001454 <HAL_SPI_MspInit+0x1d0>)
 80013cc:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 80013d0:	2253      	movs	r2, #83	@ 0x53
 80013d2:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 80013e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e6:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ee:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80013f4:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001406:	4812      	ldr	r0, [pc, #72]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 8001408:	f001 fc20 	bl	8002c4c <HAL_DMA_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_SPI_MspInit+0x192>
    {
      Error_Handler();
 8001412:	f7ff fc6b 	bl	8000cec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a0d      	ldr	r2, [pc, #52]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 800141a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800141c:	4a0c      	ldr	r2, [pc, #48]	@ (8001450 <HAL_SPI_MspInit+0x1cc>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2054      	movs	r0, #84	@ 0x54
 8001428:	f001 fa21 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800142c:	2054      	movs	r0, #84	@ 0x54
 800142e:	f001 fa38 	bl	80028a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001432:	bf00      	nop
 8001434:	37e8      	adds	r7, #232	@ 0xe8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40013400 	.word	0x40013400
 8001440:	58024400 	.word	0x58024400
 8001444:	58021000 	.word	0x58021000
 8001448:	24000390 	.word	0x24000390
 800144c:	40020028 	.word	0x40020028
 8001450:	24000408 	.word	0x24000408
 8001454:	40020040 	.word	0x40020040

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <NMI_Handler+0x4>

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <UsageFault_Handler+0x4>

08001480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ae:	f000 f999 	bl	80017e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <DMA1_Stream0_IRQHandler+0x10>)
 80014be:	f002 f999 	bl	80037f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2400023c 	.word	0x2400023c

080014cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <DMA1_Stream1_IRQHandler+0x10>)
 80014d2:	f002 f98f 	bl	80037f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	24000390 	.word	0x24000390

080014e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA1_Stream2_IRQHandler+0x10>)
 80014e6:	f002 f985 	bl	80037f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	24000408 	.word	0x24000408

080014f4 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 80014fa:	f004 fd8b 	bl	8006014 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2400196c 	.word	0x2400196c

08001508 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 800150e:	f004 fd81 	bl	8006014 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2400196c 	.word	0x2400196c

0800151c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <OTG_HS_IRQHandler+0x10>)
 8001522:	f004 fd77 	bl	8006014 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2400196c 	.word	0x2400196c

08001530 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DCMI_PSSI_IRQHandler+0x10>)
 8001536:	f001 fac1 	bl	8002abc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	240001ec 	.word	0x240001ec

08001544 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <SPI4_IRQHandler+0x10>)
 800154a:	f009 fe3b 	bl	800b1c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	24000308 	.word	0x24000308

08001558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800155c:	4b3e      	ldr	r3, [pc, #248]	@ (8001658 <SystemInit+0x100>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001562:	4a3d      	ldr	r2, [pc, #244]	@ (8001658 <SystemInit+0x100>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800156c:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <SystemInit+0x104>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	2b02      	cmp	r3, #2
 8001576:	d807      	bhi.n	8001588 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001578:	4b38      	ldr	r3, [pc, #224]	@ (800165c <SystemInit+0x104>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 030f 	bic.w	r3, r3, #15
 8001580:	4a36      	ldr	r2, [pc, #216]	@ (800165c <SystemInit+0x104>)
 8001582:	f043 0303 	orr.w	r3, r3, #3
 8001586:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001588:	4b35      	ldr	r3, [pc, #212]	@ (8001660 <SystemInit+0x108>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a34      	ldr	r2, [pc, #208]	@ (8001660 <SystemInit+0x108>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001594:	4b32      	ldr	r3, [pc, #200]	@ (8001660 <SystemInit+0x108>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <SystemInit+0x108>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4930      	ldr	r1, [pc, #192]	@ (8001660 <SystemInit+0x108>)
 80015a0:	4b30      	ldr	r3, [pc, #192]	@ (8001664 <SystemInit+0x10c>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015a6:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <SystemInit+0x104>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d007      	beq.n	80015c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015b2:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <SystemInit+0x104>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 030f 	bic.w	r3, r3, #15
 80015ba:	4a28      	ldr	r2, [pc, #160]	@ (800165c <SystemInit+0x104>)
 80015bc:	f043 0303 	orr.w	r3, r3, #3
 80015c0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <SystemInit+0x108>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80015c8:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <SystemInit+0x108>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80015ce:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <SystemInit+0x108>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015d4:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <SystemInit+0x108>)
 80015d6:	4a24      	ldr	r2, [pc, #144]	@ (8001668 <SystemInit+0x110>)
 80015d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <SystemInit+0x108>)
 80015dc:	4a23      	ldr	r2, [pc, #140]	@ (800166c <SystemInit+0x114>)
 80015de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <SystemInit+0x108>)
 80015e2:	4a23      	ldr	r2, [pc, #140]	@ (8001670 <SystemInit+0x118>)
 80015e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <SystemInit+0x108>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <SystemInit+0x108>)
 80015ee:	4a20      	ldr	r2, [pc, #128]	@ (8001670 <SystemInit+0x118>)
 80015f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <SystemInit+0x108>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <SystemInit+0x108>)
 80015fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001670 <SystemInit+0x118>)
 80015fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <SystemInit+0x108>)
 8001600:	2200      	movs	r2, #0
 8001602:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001604:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <SystemInit+0x108>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a15      	ldr	r2, [pc, #84]	@ (8001660 <SystemInit+0x108>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800160e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <SystemInit+0x108>)
 8001612:	2200      	movs	r2, #0
 8001614:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <SystemInit+0x108>)
 8001618:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800161c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d113      	bne.n	800164c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <SystemInit+0x108>)
 8001626:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800162a:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <SystemInit+0x108>)
 800162c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001630:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <SystemInit+0x11c>)
 8001636:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800163a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <SystemInit+0x108>)
 800163e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001642:	4a07      	ldr	r2, [pc, #28]	@ (8001660 <SystemInit+0x108>)
 8001644:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001648:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	52002000 	.word	0x52002000
 8001660:	58024400 	.word	0x58024400
 8001664:	eaf6ed7f 	.word	0xeaf6ed7f
 8001668:	02020200 	.word	0x02020200
 800166c:	01ff0000 	.word	0x01ff0000
 8001670:	01010280 	.word	0x01010280
 8001674:	52004000 	.word	0x52004000

08001678 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <ExitRun0Mode+0x2c>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <ExitRun0Mode+0x2c>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001688:	bf00      	nop
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <ExitRun0Mode+0x2c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f9      	beq.n	800168a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	58024800 	.word	0x58024800

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016a8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80016e4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80016ac:	f7ff ffe4 	bl	8001678 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b0:	f7ff ff52 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	@ (80016ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	@ (80016f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f00e f8c9 	bl	800f870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016de:	f7fe ff69 	bl	80005b4 <main>
  bx  lr
 80016e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80016e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016ec:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 80016f0:	0800f940 	.word	0x0800f940
  ldr r2, =_sbss
 80016f4:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 80016f8:	24002070 	.word	0x24002070

080016fc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC_IRQHandler>
	...

08001700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001706:	2003      	movs	r0, #3
 8001708:	f001 f8a6 	bl	8002858 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800170c:	f006 fc7e 	bl	800800c <HAL_RCC_GetSysClockFreq>
 8001710:	4602      	mov	r2, r0
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <HAL_Init+0x68>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	4913      	ldr	r1, [pc, #76]	@ (800176c <HAL_Init+0x6c>)
 800171e:	5ccb      	ldrb	r3, [r1, r3]
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
 8001728:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_Init+0x68>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	4a0e      	ldr	r2, [pc, #56]	@ (800176c <HAL_Init+0x6c>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	4a0b      	ldr	r2, [pc, #44]	@ (8001770 <HAL_Init+0x70>)
 8001742:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001744:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <HAL_Init+0x74>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174a:	200f      	movs	r0, #15
 800174c:	f000 f814 	bl	8001778 <HAL_InitTick>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e002      	b.n	8001760 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800175a:	f7ff fb19 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	58024400 	.word	0x58024400
 800176c:	0800f920 	.word	0x0800f920
 8001770:	24000004 	.word	0x24000004
 8001774:	24000000 	.word	0x24000000

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_InitTick+0x60>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e021      	b.n	80017d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <HAL_InitTick+0x64>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_InitTick+0x60>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 f88b 	bl	80028be <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00e      	b.n	80017d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d80a      	bhi.n	80017ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f001 f855 	bl	800286e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <HAL_InitTick+0x68>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2400000c 	.word	0x2400000c
 80017dc:	24000000 	.word	0x24000000
 80017e0:	24000008 	.word	0x24000008

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2400000c 	.word	0x2400000c
 8001808:	24000488 	.word	0x24000488

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	24000488 	.word	0x24000488

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff ffee 	bl	800180c <HAL_GetTick>
 8001830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d005      	beq.n	800184a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_Delay+0x44>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184a:	bf00      	nop
 800184c:	f7ff ffde 	bl	800180c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	429a      	cmp	r2, r3
 800185a:	d8f7      	bhi.n	800184c <HAL_Delay+0x28>
  {
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2400000c 	.word	0x2400000c

0800186c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d107      	bne.n	80018f8 <LL_ADC_SetChannelPreselection+0x24>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	0e9b      	lsrs	r3, r3, #26
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	2201      	movs	r2, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	e015      	b.n	8001924 <LL_ADC_SetChannelPreselection+0x50>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800190e:	2320      	movs	r3, #32
 8001910:	e003      	b.n	800191a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	2201      	movs	r2, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	69d2      	ldr	r2, [r2, #28]
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800192e:	bf00      	nop
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800193a:	b480      	push	{r7}
 800193c:	b087      	sub	sp, #28
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3360      	adds	r3, #96	@ 0x60
 800194c:	461a      	mov	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	430b      	orrs	r3, r1
 8001968:	431a      	orrs	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800196e:	bf00      	nop
 8001970:	371c      	adds	r7, #28
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	431a      	orrs	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	611a      	str	r2, [r3, #16]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3360      	adds	r3, #96	@ 0x60
 80019bc:	461a      	mov	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	601a      	str	r2, [r3, #0]
  }
}
 80019d6:	bf00      	nop
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b087      	sub	sp, #28
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3330      	adds	r3, #48	@ 0x30
 80019f2:	461a      	mov	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	4413      	add	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	211f      	movs	r1, #31
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	401a      	ands	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0e9b      	lsrs	r3, r3, #26
 8001a1a:	f003 011f 	and.w	r1, r3, #31
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b087      	sub	sp, #28
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3314      	adds	r3, #20
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	0e5b      	lsrs	r3, r3, #25
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	0d1b      	lsrs	r3, r3, #20
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	2107      	movs	r1, #7
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	0d1b      	lsrs	r3, r3, #20
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a84:	bf00      	nop
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0318 	and.w	r3, r3, #24
 8001ab2:	4908      	ldr	r1, [pc, #32]	@ (8001ad4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	400b      	ands	r3, r1
 8001aba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	000fffff 	.word	0x000fffff

08001ad8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6093      	str	r3, [r2, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	5fffffc0 	.word	0x5fffffc0

08001afc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b10:	d101      	bne.n	8001b16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	6fffffc0 	.word	0x6fffffc0

08001b4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b60:	d101      	bne.n	8001b66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <LL_ADC_IsEnabled+0x18>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <LL_ADC_IsEnabled+0x1a>
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d101      	bne.n	8001bb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d101      	bne.n	8001bd8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e138      	b.n	8001e74 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff f8d7 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff67 	bl	8001afc <LL_ADC_IsDeepPowerDownEnabled>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d004      	beq.n	8001c3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff4d 	bl	8001ad8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff82 	bl	8001b4c <LL_ADC_IsInternalRegulatorEnabled>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d114      	bne.n	8001c78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff66 	bl	8001b24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c58:	4b88      	ldr	r3, [pc, #544]	@ (8001e7c <HAL_ADC_Init+0x294>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	4a88      	ldr	r2, [pc, #544]	@ (8001e80 <HAL_ADC_Init+0x298>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	3301      	adds	r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c6a:	e002      	b.n	8001c72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff65 	bl	8001b4c <LL_ADC_IsInternalRegulatorEnabled>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8c:	f043 0210 	orr.w	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff76 	bl	8001b9a <LL_ADC_REG_IsConversionOngoing>
 8001cae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f040 80d2 	bne.w	8001e62 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f040 80ce 	bne.w	8001e62 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cce:	f043 0202 	orr.w	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff4a 	bl	8001b74 <LL_ADC_IsEnabled>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d110      	bne.n	8001d08 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ce6:	4867      	ldr	r0, [pc, #412]	@ (8001e84 <HAL_ADC_Init+0x29c>)
 8001ce8:	f7ff ff44 	bl	8001b74 <LL_ADC_IsEnabled>
 8001cec:	4604      	mov	r4, r0
 8001cee:	4866      	ldr	r0, [pc, #408]	@ (8001e88 <HAL_ADC_Init+0x2a0>)
 8001cf0:	f7ff ff40 	bl	8001b74 <LL_ADC_IsEnabled>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4323      	orrs	r3, r4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4619      	mov	r1, r3
 8001d02:	4862      	ldr	r0, [pc, #392]	@ (8001e8c <HAL_ADC_Init+0x2a4>)
 8001d04:	f7ff fdb2 	bl	800186c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7d5b      	ldrb	r3, [r3, #21]
 8001d0c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d12:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001d18:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7f1b      	ldrb	r3, [r3, #28]
 8001d1e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7f1b      	ldrb	r3, [r3, #28]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d106      	bne.n	8001d3a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	045b      	lsls	r3, r3, #17
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d46:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e90 <HAL_ADC_Init+0x2a8>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	69b9      	ldr	r1, [r7, #24]
 8001d66:	430b      	orrs	r3, r1
 8001d68:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff13 	bl	8001b9a <LL_ADC_REG_IsConversionOngoing>
 8001d74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff20 	bl	8001bc0 <LL_ADC_INJ_IsConversionOngoing>
 8001d80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d14a      	bne.n	8001e1e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d147      	bne.n	8001e1e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7d1b      	ldrb	r3, [r3, #20]
 8001d92:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	4b3c      	ldr	r3, [pc, #240]	@ (8001e94 <HAL_ADC_Init+0x2ac>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d11b      	bne.n	8001df2 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	4b34      	ldr	r3, [pc, #208]	@ (8001e98 <HAL_ADC_Init+0x2b0>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dce:	3a01      	subs	r2, #1
 8001dd0:	0411      	lsls	r1, r2, #16
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001de2:	430a      	orrs	r2, r1
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	e007      	b.n	8001e02 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fabd 	bl	8002398 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10c      	bne.n	8001e40 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	f023 010f 	bic.w	r1, r3, #15
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e3e:	e007      	b.n	8001e50 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 020f 	bic.w	r2, r2, #15
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e54:	f023 0303 	bic.w	r3, r3, #3
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e60:	e007      	b.n	8001e72 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3724      	adds	r7, #36	@ 0x24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	24000000 	.word	0x24000000
 8001e80:	053e2d63 	.word	0x053e2d63
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40022100 	.word	0x40022100
 8001e8c:	40022300 	.word	0x40022300
 8001e90:	fff0c003 	.word	0xfff0c003
 8001e94:	ffffbffc 	.word	0xffffbffc
 8001e98:	fc00f81e 	.word	0xfc00f81e

08001e9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b08d      	sub	sp, #52	@ 0x34
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a5b      	ldr	r2, [pc, #364]	@ (8002024 <HAL_ADC_ConfigChannel+0x188>)
 8001eb6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x2a>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e263      	b.n	800238e <HAL_ADC_ConfigChannel+0x4f2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fe61 	bl	8001b9a <LL_ADC_REG_IsConversionOngoing>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 8248 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x4d4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db2c      	blt.n	8001f42 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d108      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x6a>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0e9b      	lsrs	r3, r3, #26
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2201      	movs	r2, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	e016      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x98>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	613b      	str	r3, [r7, #16]
  return result;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	e003      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2201      	movs	r2, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	69d1      	ldr	r1, [r2, #28]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f7ff fd47 	bl	80019e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fe1e 	bl	8001b9a <LL_ADC_REG_IsConversionOngoing>
 8001f5e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe2b 	bl	8001bc0 <LL_ADC_INJ_IsConversionOngoing>
 8001f6a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 80a2 	bne.w	80020b8 <HAL_ADC_ConfigChannel+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 809e 	bne.w	80020b8 <HAL_ADC_ConfigChannel+0x21c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f7ff fd56 	bl	8001a3a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x118>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	e00a      	b.n	8001fca <HAL_ADC_ConfigChannel+0x12e>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d029      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6919      	ldr	r1, [r3, #16]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	f7ff fcaa 	bl	800193a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	7e5b      	ldrb	r3, [r3, #25]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x160>
 8001ff6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ffa:	e000      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x162>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	461a      	mov	r2, r3
 8002000:	f7ff fcd4 	bl	80019ac <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6919      	ldr	r1, [r3, #16]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	7e1b      	ldrb	r3, [r3, #24]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d102      	bne.n	800201a <HAL_ADC_ConfigChannel+0x17e>
 8002014:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002018:	e000      	b.n	800201c <HAL_ADC_ConfigChannel+0x180>
 800201a:	2300      	movs	r3, #0
 800201c:	461a      	mov	r2, r3
 800201e:	f7ff fcac 	bl	800197a <LL_ADC_SetDataRightShift>
 8002022:	e049      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x21c>
 8002024:	47ff0000 	.word	0x47ff0000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	069b      	lsls	r3, r3, #26
 8002038:	429a      	cmp	r2, r3
 800203a:	d107      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1b0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800204a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	429a      	cmp	r2, r3
 800205e:	d107      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1d4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800206e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1f8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002092:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x21c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020b6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fd59 	bl	8001b74 <LL_ADC_IsEnabled>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 815c 	bne.w	8002382 <HAL_ADC_ConfigChannel+0x4e6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6819      	ldr	r1, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f7ff fcda 	bl	8001a90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a89      	ldr	r2, [pc, #548]	@ (8002308 <HAL_ADC_ConfigChannel+0x46c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	f040 809a 	bne.w	800221c <HAL_ADC_ConfigChannel+0x380>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4986      	ldr	r1, [pc, #536]	@ (800230c <HAL_ADC_ConfigChannel+0x470>)
 80020f2:	428b      	cmp	r3, r1
 80020f4:	d147      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x2ea>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4985      	ldr	r1, [pc, #532]	@ (8002310 <HAL_ADC_ConfigChannel+0x474>)
 80020fc:	428b      	cmp	r3, r1
 80020fe:	d040      	beq.n	8002182 <HAL_ADC_ConfigChannel+0x2e6>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4983      	ldr	r1, [pc, #524]	@ (8002314 <HAL_ADC_ConfigChannel+0x478>)
 8002106:	428b      	cmp	r3, r1
 8002108:	d039      	beq.n	800217e <HAL_ADC_ConfigChannel+0x2e2>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4982      	ldr	r1, [pc, #520]	@ (8002318 <HAL_ADC_ConfigChannel+0x47c>)
 8002110:	428b      	cmp	r3, r1
 8002112:	d032      	beq.n	800217a <HAL_ADC_ConfigChannel+0x2de>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4980      	ldr	r1, [pc, #512]	@ (800231c <HAL_ADC_ConfigChannel+0x480>)
 800211a:	428b      	cmp	r3, r1
 800211c:	d02b      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x2da>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	497f      	ldr	r1, [pc, #508]	@ (8002320 <HAL_ADC_ConfigChannel+0x484>)
 8002124:	428b      	cmp	r3, r1
 8002126:	d024      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x2d6>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	497d      	ldr	r1, [pc, #500]	@ (8002324 <HAL_ADC_ConfigChannel+0x488>)
 800212e:	428b      	cmp	r3, r1
 8002130:	d01d      	beq.n	800216e <HAL_ADC_ConfigChannel+0x2d2>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	497c      	ldr	r1, [pc, #496]	@ (8002328 <HAL_ADC_ConfigChannel+0x48c>)
 8002138:	428b      	cmp	r3, r1
 800213a:	d016      	beq.n	800216a <HAL_ADC_ConfigChannel+0x2ce>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	497a      	ldr	r1, [pc, #488]	@ (800232c <HAL_ADC_ConfigChannel+0x490>)
 8002142:	428b      	cmp	r3, r1
 8002144:	d00f      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x2ca>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4979      	ldr	r1, [pc, #484]	@ (8002330 <HAL_ADC_ConfigChannel+0x494>)
 800214c:	428b      	cmp	r3, r1
 800214e:	d008      	beq.n	8002162 <HAL_ADC_ConfigChannel+0x2c6>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4977      	ldr	r1, [pc, #476]	@ (8002334 <HAL_ADC_ConfigChannel+0x498>)
 8002156:	428b      	cmp	r3, r1
 8002158:	d101      	bne.n	800215e <HAL_ADC_ConfigChannel+0x2c2>
 800215a:	4b77      	ldr	r3, [pc, #476]	@ (8002338 <HAL_ADC_ConfigChannel+0x49c>)
 800215c:	e05a      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 800215e:	2300      	movs	r3, #0
 8002160:	e058      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 8002162:	4b76      	ldr	r3, [pc, #472]	@ (800233c <HAL_ADC_ConfigChannel+0x4a0>)
 8002164:	e056      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 8002166:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <HAL_ADC_ConfigChannel+0x4a4>)
 8002168:	e054      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 800216a:	4b70      	ldr	r3, [pc, #448]	@ (800232c <HAL_ADC_ConfigChannel+0x490>)
 800216c:	e052      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 800216e:	4b6e      	ldr	r3, [pc, #440]	@ (8002328 <HAL_ADC_ConfigChannel+0x48c>)
 8002170:	e050      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 8002172:	4b74      	ldr	r3, [pc, #464]	@ (8002344 <HAL_ADC_ConfigChannel+0x4a8>)
 8002174:	e04e      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 8002176:	4b74      	ldr	r3, [pc, #464]	@ (8002348 <HAL_ADC_ConfigChannel+0x4ac>)
 8002178:	e04c      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 800217a:	4b74      	ldr	r3, [pc, #464]	@ (800234c <HAL_ADC_ConfigChannel+0x4b0>)
 800217c:	e04a      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 800217e:	4b74      	ldr	r3, [pc, #464]	@ (8002350 <HAL_ADC_ConfigChannel+0x4b4>)
 8002180:	e048      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 8002182:	2301      	movs	r3, #1
 8002184:	e046      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4972      	ldr	r1, [pc, #456]	@ (8002354 <HAL_ADC_ConfigChannel+0x4b8>)
 800218c:	428b      	cmp	r3, r1
 800218e:	d140      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x376>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	495e      	ldr	r1, [pc, #376]	@ (8002310 <HAL_ADC_ConfigChannel+0x474>)
 8002196:	428b      	cmp	r3, r1
 8002198:	d039      	beq.n	800220e <HAL_ADC_ConfigChannel+0x372>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	495d      	ldr	r1, [pc, #372]	@ (8002314 <HAL_ADC_ConfigChannel+0x478>)
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d032      	beq.n	800220a <HAL_ADC_ConfigChannel+0x36e>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	495b      	ldr	r1, [pc, #364]	@ (8002318 <HAL_ADC_ConfigChannel+0x47c>)
 80021aa:	428b      	cmp	r3, r1
 80021ac:	d02b      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x36a>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	495a      	ldr	r1, [pc, #360]	@ (800231c <HAL_ADC_ConfigChannel+0x480>)
 80021b4:	428b      	cmp	r3, r1
 80021b6:	d024      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x366>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4958      	ldr	r1, [pc, #352]	@ (8002320 <HAL_ADC_ConfigChannel+0x484>)
 80021be:	428b      	cmp	r3, r1
 80021c0:	d01d      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x362>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4957      	ldr	r1, [pc, #348]	@ (8002324 <HAL_ADC_ConfigChannel+0x488>)
 80021c8:	428b      	cmp	r3, r1
 80021ca:	d016      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x35e>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4955      	ldr	r1, [pc, #340]	@ (8002328 <HAL_ADC_ConfigChannel+0x48c>)
 80021d2:	428b      	cmp	r3, r1
 80021d4:	d00f      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x35a>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4954      	ldr	r1, [pc, #336]	@ (800232c <HAL_ADC_ConfigChannel+0x490>)
 80021dc:	428b      	cmp	r3, r1
 80021de:	d008      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x356>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4953      	ldr	r1, [pc, #332]	@ (8002334 <HAL_ADC_ConfigChannel+0x498>)
 80021e6:	428b      	cmp	r3, r1
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x352>
 80021ea:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <HAL_ADC_ConfigChannel+0x49c>)
 80021ec:	e012      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 80021ee:	2300      	movs	r3, #0
 80021f0:	e010      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 80021f2:	4b53      	ldr	r3, [pc, #332]	@ (8002340 <HAL_ADC_ConfigChannel+0x4a4>)
 80021f4:	e00e      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 80021f6:	4b4d      	ldr	r3, [pc, #308]	@ (800232c <HAL_ADC_ConfigChannel+0x490>)
 80021f8:	e00c      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 80021fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002328 <HAL_ADC_ConfigChannel+0x48c>)
 80021fc:	e00a      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 80021fe:	4b51      	ldr	r3, [pc, #324]	@ (8002344 <HAL_ADC_ConfigChannel+0x4a8>)
 8002200:	e008      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 8002202:	4b51      	ldr	r3, [pc, #324]	@ (8002348 <HAL_ADC_ConfigChannel+0x4ac>)
 8002204:	e006      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 8002206:	4b51      	ldr	r3, [pc, #324]	@ (800234c <HAL_ADC_ConfigChannel+0x4b0>)
 8002208:	e004      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 800220a:	4b51      	ldr	r3, [pc, #324]	@ (8002350 <HAL_ADC_ConfigChannel+0x4b4>)
 800220c:	e002      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 8002212:	2300      	movs	r3, #0
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f7ff fb5c 	bl	80018d4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f280 80ae 	bge.w	8002382 <HAL_ADC_ConfigChannel+0x4e6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002226:	484c      	ldr	r0, [pc, #304]	@ (8002358 <HAL_ADC_ConfigChannel+0x4bc>)
 8002228:	f7ff fb46 	bl	80018b8 <LL_ADC_GetCommonPathInternalCh>
 800222c:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800222e:	4837      	ldr	r0, [pc, #220]	@ (800230c <HAL_ADC_ConfigChannel+0x470>)
 8002230:	f7ff fca0 	bl	8001b74 <LL_ADC_IsEnabled>
 8002234:	4604      	mov	r4, r0
 8002236:	4847      	ldr	r0, [pc, #284]	@ (8002354 <HAL_ADC_ConfigChannel+0x4b8>)
 8002238:	f7ff fc9c 	bl	8001b74 <LL_ADC_IsEnabled>
 800223c:	4603      	mov	r3, r0
 800223e:	4323      	orrs	r3, r4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d156      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x456>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a44      	ldr	r2, [pc, #272]	@ (800235c <HAL_ADC_ConfigChannel+0x4c0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d123      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x3fa>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d11e      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x3fa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a3d      	ldr	r2, [pc, #244]	@ (8002354 <HAL_ADC_ConfigChannel+0x4b8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	f040 808f 	bne.w	8002382 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800226a:	4619      	mov	r1, r3
 800226c:	483a      	ldr	r0, [pc, #232]	@ (8002358 <HAL_ADC_ConfigChannel+0x4bc>)
 800226e:	f7ff fb10 	bl	8001892 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002272:	4b3b      	ldr	r3, [pc, #236]	@ (8002360 <HAL_ADC_ConfigChannel+0x4c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	099b      	lsrs	r3, r3, #6
 8002278:	4a3a      	ldr	r2, [pc, #232]	@ (8002364 <HAL_ADC_ConfigChannel+0x4c8>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	3301      	adds	r3, #1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002286:	e002      	b.n	800228e <HAL_ADC_ConfigChannel+0x3f2>
              {
                wait_loop_index--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3b01      	subs	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f9      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002294:	e075      	b.n	8002382 <HAL_ADC_ConfigChannel+0x4e6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a33      	ldr	r2, [pc, #204]	@ (8002368 <HAL_ADC_ConfigChannel+0x4cc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d111      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x428>
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x428>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a29      	ldr	r2, [pc, #164]	@ (8002354 <HAL_ADC_ConfigChannel+0x4b8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d166      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ba:	4619      	mov	r1, r3
 80022bc:	4826      	ldr	r0, [pc, #152]	@ (8002358 <HAL_ADC_ConfigChannel+0x4bc>)
 80022be:	f7ff fae8 	bl	8001892 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c2:	e05e      	b.n	8002382 <HAL_ADC_ConfigChannel+0x4e6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a28      	ldr	r2, [pc, #160]	@ (800236c <HAL_ADC_ConfigChannel+0x4d0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d159      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x4e6>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d154      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <HAL_ADC_ConfigChannel+0x4b8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d14f      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022e8:	4619      	mov	r1, r3
 80022ea:	481b      	ldr	r0, [pc, #108]	@ (8002358 <HAL_ADC_ConfigChannel+0x4bc>)
 80022ec:	f7ff fad1 	bl	8001892 <LL_ADC_SetCommonPathInternalCh>
 80022f0:	e047      	b.n	8002382 <HAL_ADC_ConfigChannel+0x4e6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f6:	f043 0220 	orr.w	r2, r3, #32
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002304:	e03d      	b.n	8002382 <HAL_ADC_ConfigChannel+0x4e6>
 8002306:	bf00      	nop
 8002308:	47ff0000 	.word	0x47ff0000
 800230c:	40022000 	.word	0x40022000
 8002310:	04300002 	.word	0x04300002
 8002314:	08600004 	.word	0x08600004
 8002318:	0c900008 	.word	0x0c900008
 800231c:	10c00010 	.word	0x10c00010
 8002320:	14f00020 	.word	0x14f00020
 8002324:	2a000400 	.word	0x2a000400
 8002328:	2e300800 	.word	0x2e300800
 800232c:	32601000 	.word	0x32601000
 8002330:	43210000 	.word	0x43210000
 8002334:	4b840000 	.word	0x4b840000
 8002338:	4fb80000 	.word	0x4fb80000
 800233c:	47520000 	.word	0x47520000
 8002340:	36902000 	.word	0x36902000
 8002344:	25b00200 	.word	0x25b00200
 8002348:	21800100 	.word	0x21800100
 800234c:	1d500080 	.word	0x1d500080
 8002350:	19200040 	.word	0x19200040
 8002354:	40022100 	.word	0x40022100
 8002358:	40022300 	.word	0x40022300
 800235c:	cb840000 	.word	0xcb840000
 8002360:	24000000 	.word	0x24000000
 8002364:	053e2d63 	.word	0x053e2d63
 8002368:	bac04000 	.word	0xbac04000
 800236c:	cfb80000 	.word	0xcfb80000
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800238a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800238e:	4618      	mov	r0, r3
 8002390:	3734      	adds	r7, #52	@ 0x34
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	bf00      	nop

08002398 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80023a0:	4b60      	ldr	r3, [pc, #384]	@ (8002524 <ADC_ConfigureBoostMode+0x18c>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01c      	beq.n	80023e6 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80023ac:	f005 ffa8 	bl	8008300 <HAL_RCC_GetHCLKFreq>
 80023b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80023ba:	d010      	beq.n	80023de <ADC_ConfigureBoostMode+0x46>
 80023bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80023c0:	d873      	bhi.n	80024aa <ADC_ConfigureBoostMode+0x112>
 80023c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c6:	d002      	beq.n	80023ce <ADC_ConfigureBoostMode+0x36>
 80023c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023cc:	d16d      	bne.n	80024aa <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	0c1b      	lsrs	r3, r3, #16
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	60fb      	str	r3, [r7, #12]
        break;
 80023dc:	e068      	b.n	80024b0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	60fb      	str	r3, [r7, #12]
        break;
 80023e4:	e064      	b.n	80024b0 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80023e6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80023ea:	f04f 0100 	mov.w	r1, #0
 80023ee:	f007 f98b 	bl	8009708 <HAL_RCCEx_GetPeriphCLKFreq>
 80023f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80023fc:	d051      	beq.n	80024a2 <ADC_ConfigureBoostMode+0x10a>
 80023fe:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002402:	d854      	bhi.n	80024ae <ADC_ConfigureBoostMode+0x116>
 8002404:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002408:	d047      	beq.n	800249a <ADC_ConfigureBoostMode+0x102>
 800240a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800240e:	d84e      	bhi.n	80024ae <ADC_ConfigureBoostMode+0x116>
 8002410:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002414:	d03d      	beq.n	8002492 <ADC_ConfigureBoostMode+0xfa>
 8002416:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800241a:	d848      	bhi.n	80024ae <ADC_ConfigureBoostMode+0x116>
 800241c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002420:	d033      	beq.n	800248a <ADC_ConfigureBoostMode+0xf2>
 8002422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002426:	d842      	bhi.n	80024ae <ADC_ConfigureBoostMode+0x116>
 8002428:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800242c:	d029      	beq.n	8002482 <ADC_ConfigureBoostMode+0xea>
 800242e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002432:	d83c      	bhi.n	80024ae <ADC_ConfigureBoostMode+0x116>
 8002434:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002438:	d01a      	beq.n	8002470 <ADC_ConfigureBoostMode+0xd8>
 800243a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800243e:	d836      	bhi.n	80024ae <ADC_ConfigureBoostMode+0x116>
 8002440:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002444:	d014      	beq.n	8002470 <ADC_ConfigureBoostMode+0xd8>
 8002446:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800244a:	d830      	bhi.n	80024ae <ADC_ConfigureBoostMode+0x116>
 800244c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002450:	d00e      	beq.n	8002470 <ADC_ConfigureBoostMode+0xd8>
 8002452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002456:	d82a      	bhi.n	80024ae <ADC_ConfigureBoostMode+0x116>
 8002458:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800245c:	d008      	beq.n	8002470 <ADC_ConfigureBoostMode+0xd8>
 800245e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002462:	d824      	bhi.n	80024ae <ADC_ConfigureBoostMode+0x116>
 8002464:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002468:	d002      	beq.n	8002470 <ADC_ConfigureBoostMode+0xd8>
 800246a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800246e:	d11e      	bne.n	80024ae <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	0c9b      	lsrs	r3, r3, #18
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	60fb      	str	r3, [r7, #12]
        break;
 8002480:	e016      	b.n	80024b0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	60fb      	str	r3, [r7, #12]
        break;
 8002488:	e012      	b.n	80024b0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	095b      	lsrs	r3, r3, #5
 800248e:	60fb      	str	r3, [r7, #12]
        break;
 8002490:	e00e      	b.n	80024b0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	60fb      	str	r3, [r7, #12]
        break;
 8002498:	e00a      	b.n	80024b0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	09db      	lsrs	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]
        break;
 80024a0:	e006      	b.n	80024b0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	60fb      	str	r3, [r7, #12]
        break;
 80024a8:	e002      	b.n	80024b0 <ADC_ConfigureBoostMode+0x118>
        break;
 80024aa:	bf00      	nop
 80024ac:	e000      	b.n	80024b0 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80024ae:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	085b      	lsrs	r3, r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002528 <ADC_ConfigureBoostMode+0x190>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d808      	bhi.n	80024d0 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80024cc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80024ce:	e025      	b.n	800251c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a16      	ldr	r2, [pc, #88]	@ (800252c <ADC_ConfigureBoostMode+0x194>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d80a      	bhi.n	80024ee <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024ea:	609a      	str	r2, [r3, #8]
}
 80024ec:	e016      	b.n	800251c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002530 <ADC_ConfigureBoostMode+0x198>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d80a      	bhi.n	800250c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002508:	609a      	str	r2, [r3, #8]
}
 800250a:	e007      	b.n	800251c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800251a:	609a      	str	r2, [r3, #8]
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40022300 	.word	0x40022300
 8002528:	005f5e10 	.word	0x005f5e10
 800252c:	00bebc20 	.word	0x00bebc20
 8002530:	017d7840 	.word	0x017d7840

08002534 <LL_ADC_IsEnabled>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <LL_ADC_IsEnabled+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_ADC_IsEnabled+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_REG_IsConversionOngoing>:
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b04      	cmp	r3, #4
 800256c:	d101      	bne.n	8002572 <LL_ADC_REG_IsConversionOngoing+0x18>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b09f      	sub	sp, #124	@ 0x7c
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800259a:	2302      	movs	r3, #2
 800259c:	e080      	b.n	80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a3d      	ldr	r2, [pc, #244]	@ (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d102      	bne.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025b8:	4b3c      	ldr	r3, [pc, #240]	@ (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	e001      	b.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e05f      	b.n	80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ffb9 	bl	800255a <LL_ADC_REG_IsConversionOngoing>
 80025e8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ffb3 	bl	800255a <LL_ADC_REG_IsConversionOngoing>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d141      	bne.n	800267e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d13e      	bne.n	800267e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002600:	4b2b      	ldr	r3, [pc, #172]	@ (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002602:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800260c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	431a      	orrs	r2, r3
 800261a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800261c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800261e:	4822      	ldr	r0, [pc, #136]	@ (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002620:	f7ff ff88 	bl	8002534 <LL_ADC_IsEnabled>
 8002624:	4604      	mov	r4, r0
 8002626:	4821      	ldr	r0, [pc, #132]	@ (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002628:	f7ff ff84 	bl	8002534 <LL_ADC_IsEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	4323      	orrs	r3, r4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d12e      	bne.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800263a:	4013      	ands	r3, r2
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	6811      	ldr	r1, [r2, #0]
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	6892      	ldr	r2, [r2, #8]
 8002644:	430a      	orrs	r2, r1
 8002646:	431a      	orrs	r2, r3
 8002648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800264a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800264c:	e021      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800264e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002658:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800265a:	4813      	ldr	r0, [pc, #76]	@ (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800265c:	f7ff ff6a 	bl	8002534 <LL_ADC_IsEnabled>
 8002660:	4604      	mov	r4, r0
 8002662:	4812      	ldr	r0, [pc, #72]	@ (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002664:	f7ff ff66 	bl	8002534 <LL_ADC_IsEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	4323      	orrs	r3, r4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d110      	bne.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002676:	4013      	ands	r3, r2
 8002678:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800267a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800267c:	e009      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002690:	e000      	b.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002692:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800269c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	377c      	adds	r7, #124	@ 0x7c
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	40022000 	.word	0x40022000
 80026ac:	40022100 	.word	0x40022100
 80026b0:	40022300 	.word	0x40022300
 80026b4:	fffff0e0 	.word	0xfffff0e0

080026b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <__NVIC_SetPriorityGrouping+0x40>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e6:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <__NVIC_SetPriorityGrouping+0x40>)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	60d3      	str	r3, [r2, #12]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	05fa0000 	.word	0x05fa0000

08002700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0307 	and.w	r3, r3, #7
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272a:	2b00      	cmp	r3, #0
 800272c:	db0b      	blt.n	8002746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	4907      	ldr	r1, [pc, #28]	@ (8002754 <__NVIC_EnableIRQ+0x38>)
 8002736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2001      	movs	r0, #1
 800273e:	fa00 f202 	lsl.w	r2, r0, r2
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002768:	2b00      	cmp	r3, #0
 800276a:	db0a      	blt.n	8002782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	490c      	ldr	r1, [pc, #48]	@ (80027a4 <__NVIC_SetPriority+0x4c>)
 8002772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	440b      	add	r3, r1
 800277c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002780:	e00a      	b.n	8002798 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4908      	ldr	r1, [pc, #32]	@ (80027a8 <__NVIC_SetPriority+0x50>)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3b04      	subs	r3, #4
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	440b      	add	r3, r1
 8002796:	761a      	strb	r2, [r3, #24]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000e100 	.word	0xe000e100
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	@ 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f1c3 0307 	rsb	r3, r3, #7
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf28      	it	cs
 80027ca:	2304      	movcs	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d902      	bls.n	80027dc <NVIC_EncodePriority+0x30>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3b03      	subs	r3, #3
 80027da:	e000      	b.n	80027de <NVIC_EncodePriority+0x32>
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	401a      	ands	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	43d9      	mvns	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	4313      	orrs	r3, r2
         );
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	@ 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002824:	d301      	bcc.n	800282a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002826:	2301      	movs	r3, #1
 8002828:	e00f      	b.n	800284a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282a:	4a0a      	ldr	r2, [pc, #40]	@ (8002854 <SysTick_Config+0x40>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002832:	210f      	movs	r1, #15
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f7ff ff8e 	bl	8002758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <SysTick_Config+0x40>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002842:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <SysTick_Config+0x40>)
 8002844:	2207      	movs	r2, #7
 8002846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	e000e010 	.word	0xe000e010

08002858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff29 	bl	80026b8 <__NVIC_SetPriorityGrouping>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800287c:	f7ff ff40 	bl	8002700 <__NVIC_GetPriorityGrouping>
 8002880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f7ff ff90 	bl	80027ac <NVIC_EncodePriority>
 800288c:	4602      	mov	r2, r0
 800288e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff5f 	bl	8002758 <__NVIC_SetPriority>
}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff33 	bl	800271c <__NVIC_EnableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffa4 	bl	8002814 <SysTick_Config>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80028dc:	f3bf 8f5f 	dmb	sy
}
 80028e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028e2:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <HAL_MPU_Disable+0x28>)
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	4a06      	ldr	r2, [pc, #24]	@ (8002900 <HAL_MPU_Disable+0x28>)
 80028e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80028ee:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <HAL_MPU_Disable+0x2c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000ed00 	.word	0xe000ed00
 8002904:	e000ed90 	.word	0xe000ed90

08002908 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002910:	4a0b      	ldr	r2, [pc, #44]	@ (8002940 <HAL_MPU_Enable+0x38>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800291a:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <HAL_MPU_Enable+0x3c>)
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	4a09      	ldr	r2, [pc, #36]	@ (8002944 <HAL_MPU_Enable+0x3c>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002924:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002926:	f3bf 8f4f 	dsb	sy
}
 800292a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800292c:	f3bf 8f6f 	isb	sy
}
 8002930:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed90 	.word	0xe000ed90
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	785a      	ldrb	r2, [r3, #1]
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_MPU_ConfigRegion+0x7c>)
 8002956:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002958:	4b1a      	ldr	r3, [pc, #104]	@ (80029c4 <HAL_MPU_ConfigRegion+0x7c>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	4a19      	ldr	r2, [pc, #100]	@ (80029c4 <HAL_MPU_ConfigRegion+0x7c>)
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002964:	4a17      	ldr	r2, [pc, #92]	@ (80029c4 <HAL_MPU_ConfigRegion+0x7c>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7b1b      	ldrb	r3, [r3, #12]
 8002970:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7adb      	ldrb	r3, [r3, #11]
 8002976:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002978:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7a9b      	ldrb	r3, [r3, #10]
 800297e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002980:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7b5b      	ldrb	r3, [r3, #13]
 8002986:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002988:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7b9b      	ldrb	r3, [r3, #14]
 800298e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002990:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7bdb      	ldrb	r3, [r3, #15]
 8002996:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002998:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7a5b      	ldrb	r3, [r3, #9]
 800299e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7a1b      	ldrb	r3, [r3, #8]
 80029a6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029a8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029b0:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029b2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029b4:	6113      	str	r3, [r2, #16]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000ed90 	.word	0xe000ed90

080029c8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e069      	b.n	8002aae <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe faee 	bl	8000fc8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6819      	ldr	r1, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab8 <HAL_DCMI_Init+0xf0>)
 8002a0e:	400b      	ands	r3, r1
 8002a10:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002a26:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002a32:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002a3e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002a4a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002a56:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d112      	bne.n	8002a8e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7f1b      	ldrb	r3, [r3, #28]
 8002a6c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7f5b      	ldrb	r3, [r3, #29]
 8002a72:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002a74:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7f9b      	ldrb	r3, [r3, #30]
 8002a7a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002a7c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7fdb      	ldrb	r3, [r3, #31]
 8002a84:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002a8a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002a8c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 021e 	orr.w	r2, r2, #30
 8002a9c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	ffe0f007 	.word	0xffe0f007

08002abc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2204      	movs	r2, #4
 8002adc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae2:	f043 0202 	orr.w	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2204      	movs	r2, #4
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af6:	4a31      	ldr	r2, [pc, #196]	@ (8002bbc <HAL_DCMI_IRQHandler+0x100>)
 8002af8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fc32 	bl	8003368 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2202      	movs	r2, #2
 8002b14:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2204      	movs	r2, #4
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b2e:	4a23      	ldr	r2, [pc, #140]	@ (8002bbc <HAL_DCMI_IRQHandler+0x100>)
 8002b30:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fc16 	bl	8003368 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f840 	bl	8002bd4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2208      	movs	r2, #8
 8002b64:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f83e 	bl	8002be8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01d      	beq.n	8002bb2 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d107      	bne.n	8002b94 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 021e 	bic.w	r2, r2, #30
 8002b92:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f825 	bl	8002bfc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	08002c11 	.word	0x08002c11

08002bc0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d009      	beq.n	8002c3c <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff ffbf 	bl	8002bc0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c54:	f7fe fdda 	bl	800180c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e37d      	b.n	8003360 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a66      	ldr	r2, [pc, #408]	@ (8002e04 <HAL_DMA_Init+0x1b8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d04a      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a65      	ldr	r2, [pc, #404]	@ (8002e08 <HAL_DMA_Init+0x1bc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d045      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a63      	ldr	r2, [pc, #396]	@ (8002e0c <HAL_DMA_Init+0x1c0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d040      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a62      	ldr	r2, [pc, #392]	@ (8002e10 <HAL_DMA_Init+0x1c4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d03b      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a60      	ldr	r2, [pc, #384]	@ (8002e14 <HAL_DMA_Init+0x1c8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d036      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002e18 <HAL_DMA_Init+0x1cc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d031      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a5d      	ldr	r2, [pc, #372]	@ (8002e1c <HAL_DMA_Init+0x1d0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d02c      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a5c      	ldr	r2, [pc, #368]	@ (8002e20 <HAL_DMA_Init+0x1d4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d027      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8002e24 <HAL_DMA_Init+0x1d8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d022      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a59      	ldr	r2, [pc, #356]	@ (8002e28 <HAL_DMA_Init+0x1dc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d01d      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a57      	ldr	r2, [pc, #348]	@ (8002e2c <HAL_DMA_Init+0x1e0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d018      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a56      	ldr	r2, [pc, #344]	@ (8002e30 <HAL_DMA_Init+0x1e4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a54      	ldr	r2, [pc, #336]	@ (8002e34 <HAL_DMA_Init+0x1e8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00e      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a53      	ldr	r2, [pc, #332]	@ (8002e38 <HAL_DMA_Init+0x1ec>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a51      	ldr	r2, [pc, #324]	@ (8002e3c <HAL_DMA_Init+0x1f0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <HAL_DMA_Init+0xb8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a50      	ldr	r2, [pc, #320]	@ (8002e40 <HAL_DMA_Init+0x1f4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_DMA_Init+0xbc>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_DMA_Init+0xbe>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 813c 	beq.w	8002f88 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a37      	ldr	r2, [pc, #220]	@ (8002e04 <HAL_DMA_Init+0x1b8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d04a      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a36      	ldr	r2, [pc, #216]	@ (8002e08 <HAL_DMA_Init+0x1bc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d045      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a34      	ldr	r2, [pc, #208]	@ (8002e0c <HAL_DMA_Init+0x1c0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d040      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a33      	ldr	r2, [pc, #204]	@ (8002e10 <HAL_DMA_Init+0x1c4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d03b      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a31      	ldr	r2, [pc, #196]	@ (8002e14 <HAL_DMA_Init+0x1c8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d036      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a30      	ldr	r2, [pc, #192]	@ (8002e18 <HAL_DMA_Init+0x1cc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d031      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2e      	ldr	r2, [pc, #184]	@ (8002e1c <HAL_DMA_Init+0x1d0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d02c      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e20 <HAL_DMA_Init+0x1d4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d027      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2b      	ldr	r2, [pc, #172]	@ (8002e24 <HAL_DMA_Init+0x1d8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d022      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e28 <HAL_DMA_Init+0x1dc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d01d      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a28      	ldr	r2, [pc, #160]	@ (8002e2c <HAL_DMA_Init+0x1e0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d018      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a27      	ldr	r2, [pc, #156]	@ (8002e30 <HAL_DMA_Init+0x1e4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d013      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a25      	ldr	r2, [pc, #148]	@ (8002e34 <HAL_DMA_Init+0x1e8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00e      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a24      	ldr	r2, [pc, #144]	@ (8002e38 <HAL_DMA_Init+0x1ec>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d009      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a22      	ldr	r2, [pc, #136]	@ (8002e3c <HAL_DMA_Init+0x1f0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d004      	beq.n	8002dc0 <HAL_DMA_Init+0x174>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a21      	ldr	r2, [pc, #132]	@ (8002e40 <HAL_DMA_Init+0x1f4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d108      	bne.n	8002dd2 <HAL_DMA_Init+0x186>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e007      	b.n	8002de2 <HAL_DMA_Init+0x196>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002de2:	e02f      	b.n	8002e44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de4:	f7fe fd12 	bl	800180c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b05      	cmp	r3, #5
 8002df0:	d928      	bls.n	8002e44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e2ad      	b.n	8003360 <HAL_DMA_Init+0x714>
 8002e04:	40020010 	.word	0x40020010
 8002e08:	40020028 	.word	0x40020028
 8002e0c:	40020040 	.word	0x40020040
 8002e10:	40020058 	.word	0x40020058
 8002e14:	40020070 	.word	0x40020070
 8002e18:	40020088 	.word	0x40020088
 8002e1c:	400200a0 	.word	0x400200a0
 8002e20:	400200b8 	.word	0x400200b8
 8002e24:	40020410 	.word	0x40020410
 8002e28:	40020428 	.word	0x40020428
 8002e2c:	40020440 	.word	0x40020440
 8002e30:	40020458 	.word	0x40020458
 8002e34:	40020470 	.word	0x40020470
 8002e38:	40020488 	.word	0x40020488
 8002e3c:	400204a0 	.word	0x400204a0
 8002e40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1c8      	bne.n	8002de4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4b73      	ldr	r3, [pc, #460]	@ (800302c <HAL_DMA_Init+0x3e0>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d107      	bne.n	8002ea8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b28      	cmp	r3, #40	@ 0x28
 8002eae:	d903      	bls.n	8002eb8 <HAL_DMA_Init+0x26c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002eb6:	d91f      	bls.n	8002ef8 <HAL_DMA_Init+0x2ac>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ebe:	d903      	bls.n	8002ec8 <HAL_DMA_Init+0x27c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b42      	cmp	r3, #66	@ 0x42
 8002ec6:	d917      	bls.n	8002ef8 <HAL_DMA_Init+0x2ac>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b46      	cmp	r3, #70	@ 0x46
 8002ece:	d903      	bls.n	8002ed8 <HAL_DMA_Init+0x28c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b48      	cmp	r3, #72	@ 0x48
 8002ed6:	d90f      	bls.n	8002ef8 <HAL_DMA_Init+0x2ac>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b4e      	cmp	r3, #78	@ 0x4e
 8002ede:	d903      	bls.n	8002ee8 <HAL_DMA_Init+0x29c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b52      	cmp	r3, #82	@ 0x52
 8002ee6:	d907      	bls.n	8002ef8 <HAL_DMA_Init+0x2ac>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b73      	cmp	r3, #115	@ 0x73
 8002eee:	d905      	bls.n	8002efc <HAL_DMA_Init+0x2b0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b77      	cmp	r3, #119	@ 0x77
 8002ef6:	d801      	bhi.n	8002efc <HAL_DMA_Init+0x2b0>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_DMA_Init+0x2b2>
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f08:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 0307 	bic.w	r3, r3, #7
 8002f20:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d117      	bne.n	8002f64 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f001 fc68 	bl	800481c <DMA_CheckFifoParam>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2240      	movs	r2, #64	@ 0x40
 8002f56:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e1fd      	b.n	8003360 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f001 fba3 	bl	80046b8 <DMA_CalcBaseAndBitshift>
 8002f72:	4603      	mov	r3, r0
 8002f74:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	223f      	movs	r2, #63	@ 0x3f
 8002f80:	409a      	lsls	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	e0fd      	b.n	8003184 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a28      	ldr	r2, [pc, #160]	@ (8003030 <HAL_DMA_Init+0x3e4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d04a      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <HAL_DMA_Init+0x3e8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d045      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a25      	ldr	r2, [pc, #148]	@ (8003038 <HAL_DMA_Init+0x3ec>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d040      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a24      	ldr	r2, [pc, #144]	@ (800303c <HAL_DMA_Init+0x3f0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d03b      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a22      	ldr	r2, [pc, #136]	@ (8003040 <HAL_DMA_Init+0x3f4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d036      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a21      	ldr	r2, [pc, #132]	@ (8003044 <HAL_DMA_Init+0x3f8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d031      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003048 <HAL_DMA_Init+0x3fc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d02c      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800304c <HAL_DMA_Init+0x400>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d027      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8003050 <HAL_DMA_Init+0x404>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d022      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8003054 <HAL_DMA_Init+0x408>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d01d      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	@ (8003058 <HAL_DMA_Init+0x40c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d018      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a18      	ldr	r2, [pc, #96]	@ (800305c <HAL_DMA_Init+0x410>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a16      	ldr	r2, [pc, #88]	@ (8003060 <HAL_DMA_Init+0x414>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00e      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a15      	ldr	r2, [pc, #84]	@ (8003064 <HAL_DMA_Init+0x418>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d009      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a13      	ldr	r2, [pc, #76]	@ (8003068 <HAL_DMA_Init+0x41c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_DMA_Init+0x3dc>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a12      	ldr	r2, [pc, #72]	@ (800306c <HAL_DMA_Init+0x420>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d123      	bne.n	8003070 <HAL_DMA_Init+0x424>
 8003028:	2301      	movs	r3, #1
 800302a:	e022      	b.n	8003072 <HAL_DMA_Init+0x426>
 800302c:	fe10803f 	.word	0xfe10803f
 8003030:	48022c08 	.word	0x48022c08
 8003034:	48022c1c 	.word	0x48022c1c
 8003038:	48022c30 	.word	0x48022c30
 800303c:	48022c44 	.word	0x48022c44
 8003040:	48022c58 	.word	0x48022c58
 8003044:	48022c6c 	.word	0x48022c6c
 8003048:	48022c80 	.word	0x48022c80
 800304c:	48022c94 	.word	0x48022c94
 8003050:	58025408 	.word	0x58025408
 8003054:	5802541c 	.word	0x5802541c
 8003058:	58025430 	.word	0x58025430
 800305c:	58025444 	.word	0x58025444
 8003060:	58025458 	.word	0x58025458
 8003064:	5802546c 	.word	0x5802546c
 8003068:	58025480 	.word	0x58025480
 800306c:	58025494 	.word	0x58025494
 8003070:	2300      	movs	r3, #0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d07d      	beq.n	8003172 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7f      	ldr	r2, [pc, #508]	@ (8003278 <HAL_DMA_Init+0x62c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d021      	beq.n	80030c4 <HAL_DMA_Init+0x478>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a7d      	ldr	r2, [pc, #500]	@ (800327c <HAL_DMA_Init+0x630>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01c      	beq.n	80030c4 <HAL_DMA_Init+0x478>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7c      	ldr	r2, [pc, #496]	@ (8003280 <HAL_DMA_Init+0x634>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d017      	beq.n	80030c4 <HAL_DMA_Init+0x478>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7a      	ldr	r2, [pc, #488]	@ (8003284 <HAL_DMA_Init+0x638>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d012      	beq.n	80030c4 <HAL_DMA_Init+0x478>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a79      	ldr	r2, [pc, #484]	@ (8003288 <HAL_DMA_Init+0x63c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00d      	beq.n	80030c4 <HAL_DMA_Init+0x478>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a77      	ldr	r2, [pc, #476]	@ (800328c <HAL_DMA_Init+0x640>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d008      	beq.n	80030c4 <HAL_DMA_Init+0x478>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a76      	ldr	r2, [pc, #472]	@ (8003290 <HAL_DMA_Init+0x644>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d003      	beq.n	80030c4 <HAL_DMA_Init+0x478>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a74      	ldr	r2, [pc, #464]	@ (8003294 <HAL_DMA_Init+0x648>)
 80030c2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4b6e      	ldr	r3, [pc, #440]	@ (8003298 <HAL_DMA_Init+0x64c>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b40      	cmp	r3, #64	@ 0x40
 80030ea:	d008      	beq.n	80030fe <HAL_DMA_Init+0x4b2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d102      	bne.n	80030fa <HAL_DMA_Init+0x4ae>
 80030f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030f8:	e002      	b.n	8003100 <HAL_DMA_Init+0x4b4>
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_DMA_Init+0x4b4>
 80030fe:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68d2      	ldr	r2, [r2, #12]
 8003104:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003106:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800310e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003116:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800311e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003126:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800312e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	4b55      	ldr	r3, [pc, #340]	@ (800329c <HAL_DMA_Init+0x650>)
 8003146:	4413      	add	r3, r2
 8003148:	4a55      	ldr	r2, [pc, #340]	@ (80032a0 <HAL_DMA_Init+0x654>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	009a      	lsls	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f001 faae 	bl	80046b8 <DMA_CalcBaseAndBitshift>
 800315c:	4603      	mov	r3, r0
 800315e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2201      	movs	r2, #1
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	e008      	b.n	8003184 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2240      	movs	r2, #64	@ 0x40
 8003176:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2203      	movs	r2, #3
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0ed      	b.n	8003360 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a46      	ldr	r2, [pc, #280]	@ (80032a4 <HAL_DMA_Init+0x658>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d072      	beq.n	8003274 <HAL_DMA_Init+0x628>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a45      	ldr	r2, [pc, #276]	@ (80032a8 <HAL_DMA_Init+0x65c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d06d      	beq.n	8003274 <HAL_DMA_Init+0x628>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a43      	ldr	r2, [pc, #268]	@ (80032ac <HAL_DMA_Init+0x660>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d068      	beq.n	8003274 <HAL_DMA_Init+0x628>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a42      	ldr	r2, [pc, #264]	@ (80032b0 <HAL_DMA_Init+0x664>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d063      	beq.n	8003274 <HAL_DMA_Init+0x628>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a40      	ldr	r2, [pc, #256]	@ (80032b4 <HAL_DMA_Init+0x668>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d05e      	beq.n	8003274 <HAL_DMA_Init+0x628>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a3f      	ldr	r2, [pc, #252]	@ (80032b8 <HAL_DMA_Init+0x66c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d059      	beq.n	8003274 <HAL_DMA_Init+0x628>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a3d      	ldr	r2, [pc, #244]	@ (80032bc <HAL_DMA_Init+0x670>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d054      	beq.n	8003274 <HAL_DMA_Init+0x628>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3c      	ldr	r2, [pc, #240]	@ (80032c0 <HAL_DMA_Init+0x674>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d04f      	beq.n	8003274 <HAL_DMA_Init+0x628>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3a      	ldr	r2, [pc, #232]	@ (80032c4 <HAL_DMA_Init+0x678>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d04a      	beq.n	8003274 <HAL_DMA_Init+0x628>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a39      	ldr	r2, [pc, #228]	@ (80032c8 <HAL_DMA_Init+0x67c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d045      	beq.n	8003274 <HAL_DMA_Init+0x628>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a37      	ldr	r2, [pc, #220]	@ (80032cc <HAL_DMA_Init+0x680>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d040      	beq.n	8003274 <HAL_DMA_Init+0x628>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a36      	ldr	r2, [pc, #216]	@ (80032d0 <HAL_DMA_Init+0x684>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d03b      	beq.n	8003274 <HAL_DMA_Init+0x628>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a34      	ldr	r2, [pc, #208]	@ (80032d4 <HAL_DMA_Init+0x688>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d036      	beq.n	8003274 <HAL_DMA_Init+0x628>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a33      	ldr	r2, [pc, #204]	@ (80032d8 <HAL_DMA_Init+0x68c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d031      	beq.n	8003274 <HAL_DMA_Init+0x628>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a31      	ldr	r2, [pc, #196]	@ (80032dc <HAL_DMA_Init+0x690>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d02c      	beq.n	8003274 <HAL_DMA_Init+0x628>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a30      	ldr	r2, [pc, #192]	@ (80032e0 <HAL_DMA_Init+0x694>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d027      	beq.n	8003274 <HAL_DMA_Init+0x628>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a13      	ldr	r2, [pc, #76]	@ (8003278 <HAL_DMA_Init+0x62c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d022      	beq.n	8003274 <HAL_DMA_Init+0x628>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a12      	ldr	r2, [pc, #72]	@ (800327c <HAL_DMA_Init+0x630>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d01d      	beq.n	8003274 <HAL_DMA_Init+0x628>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a10      	ldr	r2, [pc, #64]	@ (8003280 <HAL_DMA_Init+0x634>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d018      	beq.n	8003274 <HAL_DMA_Init+0x628>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a0f      	ldr	r2, [pc, #60]	@ (8003284 <HAL_DMA_Init+0x638>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d013      	beq.n	8003274 <HAL_DMA_Init+0x628>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0d      	ldr	r2, [pc, #52]	@ (8003288 <HAL_DMA_Init+0x63c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00e      	beq.n	8003274 <HAL_DMA_Init+0x628>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a0c      	ldr	r2, [pc, #48]	@ (800328c <HAL_DMA_Init+0x640>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d009      	beq.n	8003274 <HAL_DMA_Init+0x628>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <HAL_DMA_Init+0x644>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d004      	beq.n	8003274 <HAL_DMA_Init+0x628>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_DMA_Init+0x648>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d137      	bne.n	80032e4 <HAL_DMA_Init+0x698>
 8003274:	2301      	movs	r3, #1
 8003276:	e036      	b.n	80032e6 <HAL_DMA_Init+0x69a>
 8003278:	58025408 	.word	0x58025408
 800327c:	5802541c 	.word	0x5802541c
 8003280:	58025430 	.word	0x58025430
 8003284:	58025444 	.word	0x58025444
 8003288:	58025458 	.word	0x58025458
 800328c:	5802546c 	.word	0x5802546c
 8003290:	58025480 	.word	0x58025480
 8003294:	58025494 	.word	0x58025494
 8003298:	fffe000f 	.word	0xfffe000f
 800329c:	a7fdabf8 	.word	0xa7fdabf8
 80032a0:	cccccccd 	.word	0xcccccccd
 80032a4:	40020010 	.word	0x40020010
 80032a8:	40020028 	.word	0x40020028
 80032ac:	40020040 	.word	0x40020040
 80032b0:	40020058 	.word	0x40020058
 80032b4:	40020070 	.word	0x40020070
 80032b8:	40020088 	.word	0x40020088
 80032bc:	400200a0 	.word	0x400200a0
 80032c0:	400200b8 	.word	0x400200b8
 80032c4:	40020410 	.word	0x40020410
 80032c8:	40020428 	.word	0x40020428
 80032cc:	40020440 	.word	0x40020440
 80032d0:	40020458 	.word	0x40020458
 80032d4:	40020470 	.word	0x40020470
 80032d8:	40020488 	.word	0x40020488
 80032dc:	400204a0 	.word	0x400204a0
 80032e0:	400204b8 	.word	0x400204b8
 80032e4:	2300      	movs	r3, #0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d032      	beq.n	8003350 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f001 fb12 	bl	8004914 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b80      	cmp	r3, #128	@ 0x80
 80032f6:	d102      	bne.n	80032fe <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003312:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_DMA_Init+0x6f2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d80c      	bhi.n	800333e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f001 fb8f 	bl	8004a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	e008      	b.n	8003350 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e237      	b.n	80037ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d004      	beq.n	8003390 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2280      	movs	r2, #128	@ 0x80
 800338a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e22c      	b.n	80037ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5c      	ldr	r2, [pc, #368]	@ (8003508 <HAL_DMA_Abort_IT+0x1a0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d04a      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5b      	ldr	r2, [pc, #364]	@ (800350c <HAL_DMA_Abort_IT+0x1a4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d045      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a59      	ldr	r2, [pc, #356]	@ (8003510 <HAL_DMA_Abort_IT+0x1a8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d040      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a58      	ldr	r2, [pc, #352]	@ (8003514 <HAL_DMA_Abort_IT+0x1ac>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d03b      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a56      	ldr	r2, [pc, #344]	@ (8003518 <HAL_DMA_Abort_IT+0x1b0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d036      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a55      	ldr	r2, [pc, #340]	@ (800351c <HAL_DMA_Abort_IT+0x1b4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d031      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a53      	ldr	r2, [pc, #332]	@ (8003520 <HAL_DMA_Abort_IT+0x1b8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d02c      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a52      	ldr	r2, [pc, #328]	@ (8003524 <HAL_DMA_Abort_IT+0x1bc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d027      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a50      	ldr	r2, [pc, #320]	@ (8003528 <HAL_DMA_Abort_IT+0x1c0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d022      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4f      	ldr	r2, [pc, #316]	@ (800352c <HAL_DMA_Abort_IT+0x1c4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d01d      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003530 <HAL_DMA_Abort_IT+0x1c8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d018      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a4c      	ldr	r2, [pc, #304]	@ (8003534 <HAL_DMA_Abort_IT+0x1cc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d013      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a4a      	ldr	r2, [pc, #296]	@ (8003538 <HAL_DMA_Abort_IT+0x1d0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00e      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a49      	ldr	r2, [pc, #292]	@ (800353c <HAL_DMA_Abort_IT+0x1d4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d009      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a47      	ldr	r2, [pc, #284]	@ (8003540 <HAL_DMA_Abort_IT+0x1d8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_DMA_Abort_IT+0xc8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a46      	ldr	r2, [pc, #280]	@ (8003544 <HAL_DMA_Abort_IT+0x1dc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d101      	bne.n	8003434 <HAL_DMA_Abort_IT+0xcc>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_DMA_Abort_IT+0xce>
 8003434:	2300      	movs	r3, #0
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8086 	beq.w	8003548 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2204      	movs	r2, #4
 8003440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a2f      	ldr	r2, [pc, #188]	@ (8003508 <HAL_DMA_Abort_IT+0x1a0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d04a      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2e      	ldr	r2, [pc, #184]	@ (800350c <HAL_DMA_Abort_IT+0x1a4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d045      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2c      	ldr	r2, [pc, #176]	@ (8003510 <HAL_DMA_Abort_IT+0x1a8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d040      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2b      	ldr	r2, [pc, #172]	@ (8003514 <HAL_DMA_Abort_IT+0x1ac>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d03b      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a29      	ldr	r2, [pc, #164]	@ (8003518 <HAL_DMA_Abort_IT+0x1b0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d036      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a28      	ldr	r2, [pc, #160]	@ (800351c <HAL_DMA_Abort_IT+0x1b4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d031      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a26      	ldr	r2, [pc, #152]	@ (8003520 <HAL_DMA_Abort_IT+0x1b8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02c      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a25      	ldr	r2, [pc, #148]	@ (8003524 <HAL_DMA_Abort_IT+0x1bc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d027      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a23      	ldr	r2, [pc, #140]	@ (8003528 <HAL_DMA_Abort_IT+0x1c0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d022      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a22      	ldr	r2, [pc, #136]	@ (800352c <HAL_DMA_Abort_IT+0x1c4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01d      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a20      	ldr	r2, [pc, #128]	@ (8003530 <HAL_DMA_Abort_IT+0x1c8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d018      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003534 <HAL_DMA_Abort_IT+0x1cc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003538 <HAL_DMA_Abort_IT+0x1d0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00e      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1c      	ldr	r2, [pc, #112]	@ (800353c <HAL_DMA_Abort_IT+0x1d4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d009      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003540 <HAL_DMA_Abort_IT+0x1d8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x17c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <HAL_DMA_Abort_IT+0x1dc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <HAL_DMA_Abort_IT+0x18e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e178      	b.n	80037e8 <HAL_DMA_Abort_IT+0x480>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e16f      	b.n	80037e8 <HAL_DMA_Abort_IT+0x480>
 8003508:	40020010 	.word	0x40020010
 800350c:	40020028 	.word	0x40020028
 8003510:	40020040 	.word	0x40020040
 8003514:	40020058 	.word	0x40020058
 8003518:	40020070 	.word	0x40020070
 800351c:	40020088 	.word	0x40020088
 8003520:	400200a0 	.word	0x400200a0
 8003524:	400200b8 	.word	0x400200b8
 8003528:	40020410 	.word	0x40020410
 800352c:	40020428 	.word	0x40020428
 8003530:	40020440 	.word	0x40020440
 8003534:	40020458 	.word	0x40020458
 8003538:	40020470 	.word	0x40020470
 800353c:	40020488 	.word	0x40020488
 8003540:	400204a0 	.word	0x400204a0
 8003544:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 020e 	bic.w	r2, r2, #14
 8003556:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6c      	ldr	r2, [pc, #432]	@ (8003710 <HAL_DMA_Abort_IT+0x3a8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d04a      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6b      	ldr	r2, [pc, #428]	@ (8003714 <HAL_DMA_Abort_IT+0x3ac>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d045      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a69      	ldr	r2, [pc, #420]	@ (8003718 <HAL_DMA_Abort_IT+0x3b0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d040      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a68      	ldr	r2, [pc, #416]	@ (800371c <HAL_DMA_Abort_IT+0x3b4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d03b      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a66      	ldr	r2, [pc, #408]	@ (8003720 <HAL_DMA_Abort_IT+0x3b8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d036      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a65      	ldr	r2, [pc, #404]	@ (8003724 <HAL_DMA_Abort_IT+0x3bc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d031      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a63      	ldr	r2, [pc, #396]	@ (8003728 <HAL_DMA_Abort_IT+0x3c0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02c      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a62      	ldr	r2, [pc, #392]	@ (800372c <HAL_DMA_Abort_IT+0x3c4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d027      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a60      	ldr	r2, [pc, #384]	@ (8003730 <HAL_DMA_Abort_IT+0x3c8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d022      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a5f      	ldr	r2, [pc, #380]	@ (8003734 <HAL_DMA_Abort_IT+0x3cc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d01d      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003738 <HAL_DMA_Abort_IT+0x3d0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d018      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5c      	ldr	r2, [pc, #368]	@ (800373c <HAL_DMA_Abort_IT+0x3d4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d013      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003740 <HAL_DMA_Abort_IT+0x3d8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00e      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a59      	ldr	r2, [pc, #356]	@ (8003744 <HAL_DMA_Abort_IT+0x3dc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a57      	ldr	r2, [pc, #348]	@ (8003748 <HAL_DMA_Abort_IT+0x3e0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x290>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a56      	ldr	r2, [pc, #344]	@ (800374c <HAL_DMA_Abort_IT+0x3e4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d108      	bne.n	800360a <HAL_DMA_Abort_IT+0x2a2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e007      	b.n	800361a <HAL_DMA_Abort_IT+0x2b2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a3c      	ldr	r2, [pc, #240]	@ (8003710 <HAL_DMA_Abort_IT+0x3a8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d072      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3a      	ldr	r2, [pc, #232]	@ (8003714 <HAL_DMA_Abort_IT+0x3ac>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d06d      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a39      	ldr	r2, [pc, #228]	@ (8003718 <HAL_DMA_Abort_IT+0x3b0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d068      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a37      	ldr	r2, [pc, #220]	@ (800371c <HAL_DMA_Abort_IT+0x3b4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d063      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a36      	ldr	r2, [pc, #216]	@ (8003720 <HAL_DMA_Abort_IT+0x3b8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d05e      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a34      	ldr	r2, [pc, #208]	@ (8003724 <HAL_DMA_Abort_IT+0x3bc>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d059      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a33      	ldr	r2, [pc, #204]	@ (8003728 <HAL_DMA_Abort_IT+0x3c0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d054      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a31      	ldr	r2, [pc, #196]	@ (800372c <HAL_DMA_Abort_IT+0x3c4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d04f      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a30      	ldr	r2, [pc, #192]	@ (8003730 <HAL_DMA_Abort_IT+0x3c8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04a      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a2e      	ldr	r2, [pc, #184]	@ (8003734 <HAL_DMA_Abort_IT+0x3cc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d045      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2d      	ldr	r2, [pc, #180]	@ (8003738 <HAL_DMA_Abort_IT+0x3d0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d040      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2b      	ldr	r2, [pc, #172]	@ (800373c <HAL_DMA_Abort_IT+0x3d4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d03b      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2a      	ldr	r2, [pc, #168]	@ (8003740 <HAL_DMA_Abort_IT+0x3d8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d036      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <HAL_DMA_Abort_IT+0x3dc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d031      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a27      	ldr	r2, [pc, #156]	@ (8003748 <HAL_DMA_Abort_IT+0x3e0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02c      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a25      	ldr	r2, [pc, #148]	@ (800374c <HAL_DMA_Abort_IT+0x3e4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d027      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a24      	ldr	r2, [pc, #144]	@ (8003750 <HAL_DMA_Abort_IT+0x3e8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a22      	ldr	r2, [pc, #136]	@ (8003754 <HAL_DMA_Abort_IT+0x3ec>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01d      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a21      	ldr	r2, [pc, #132]	@ (8003758 <HAL_DMA_Abort_IT+0x3f0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1f      	ldr	r2, [pc, #124]	@ (800375c <HAL_DMA_Abort_IT+0x3f4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003760 <HAL_DMA_Abort_IT+0x3f8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003764 <HAL_DMA_Abort_IT+0x3fc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003768 <HAL_DMA_Abort_IT+0x400>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_DMA_Abort_IT+0x3a2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a19      	ldr	r2, [pc, #100]	@ (800376c <HAL_DMA_Abort_IT+0x404>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d132      	bne.n	8003770 <HAL_DMA_Abort_IT+0x408>
 800370a:	2301      	movs	r3, #1
 800370c:	e031      	b.n	8003772 <HAL_DMA_Abort_IT+0x40a>
 800370e:	bf00      	nop
 8003710:	40020010 	.word	0x40020010
 8003714:	40020028 	.word	0x40020028
 8003718:	40020040 	.word	0x40020040
 800371c:	40020058 	.word	0x40020058
 8003720:	40020070 	.word	0x40020070
 8003724:	40020088 	.word	0x40020088
 8003728:	400200a0 	.word	0x400200a0
 800372c:	400200b8 	.word	0x400200b8
 8003730:	40020410 	.word	0x40020410
 8003734:	40020428 	.word	0x40020428
 8003738:	40020440 	.word	0x40020440
 800373c:	40020458 	.word	0x40020458
 8003740:	40020470 	.word	0x40020470
 8003744:	40020488 	.word	0x40020488
 8003748:	400204a0 	.word	0x400204a0
 800374c:	400204b8 	.word	0x400204b8
 8003750:	58025408 	.word	0x58025408
 8003754:	5802541c 	.word	0x5802541c
 8003758:	58025430 	.word	0x58025430
 800375c:	58025444 	.word	0x58025444
 8003760:	58025458 	.word	0x58025458
 8003764:	5802546c 	.word	0x5802546c
 8003768:	58025480 	.word	0x58025480
 800376c:	58025494 	.word	0x58025494
 8003770:	2300      	movs	r3, #0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d028      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003784:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	2201      	movs	r2, #1
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00c      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop

080037f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	@ 0x28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003800:	4b67      	ldr	r3, [pc, #412]	@ (80039a0 <HAL_DMA_IRQHandler+0x1ac>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a67      	ldr	r2, [pc, #412]	@ (80039a4 <HAL_DMA_IRQHandler+0x1b0>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	0a9b      	lsrs	r3, r3, #10
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003812:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003818:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a5f      	ldr	r2, [pc, #380]	@ (80039a8 <HAL_DMA_IRQHandler+0x1b4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d04a      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a5d      	ldr	r2, [pc, #372]	@ (80039ac <HAL_DMA_IRQHandler+0x1b8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d045      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a5c      	ldr	r2, [pc, #368]	@ (80039b0 <HAL_DMA_IRQHandler+0x1bc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d040      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a5a      	ldr	r2, [pc, #360]	@ (80039b4 <HAL_DMA_IRQHandler+0x1c0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d03b      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a59      	ldr	r2, [pc, #356]	@ (80039b8 <HAL_DMA_IRQHandler+0x1c4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d036      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a57      	ldr	r2, [pc, #348]	@ (80039bc <HAL_DMA_IRQHandler+0x1c8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d031      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a56      	ldr	r2, [pc, #344]	@ (80039c0 <HAL_DMA_IRQHandler+0x1cc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d02c      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a54      	ldr	r2, [pc, #336]	@ (80039c4 <HAL_DMA_IRQHandler+0x1d0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d027      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a53      	ldr	r2, [pc, #332]	@ (80039c8 <HAL_DMA_IRQHandler+0x1d4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d022      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a51      	ldr	r2, [pc, #324]	@ (80039cc <HAL_DMA_IRQHandler+0x1d8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01d      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a50      	ldr	r2, [pc, #320]	@ (80039d0 <HAL_DMA_IRQHandler+0x1dc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d018      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a4e      	ldr	r2, [pc, #312]	@ (80039d4 <HAL_DMA_IRQHandler+0x1e0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a4d      	ldr	r2, [pc, #308]	@ (80039d8 <HAL_DMA_IRQHandler+0x1e4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a4b      	ldr	r2, [pc, #300]	@ (80039dc <HAL_DMA_IRQHandler+0x1e8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d009      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a4a      	ldr	r2, [pc, #296]	@ (80039e0 <HAL_DMA_IRQHandler+0x1ec>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xd2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a48      	ldr	r2, [pc, #288]	@ (80039e4 <HAL_DMA_IRQHandler+0x1f0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <HAL_DMA_IRQHandler+0xd6>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_DMA_IRQHandler+0xd8>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 842b 	beq.w	8004128 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2208      	movs	r2, #8
 80038dc:	409a      	lsls	r2, r3
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80a2 	beq.w	8003a2c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2e      	ldr	r2, [pc, #184]	@ (80039a8 <HAL_DMA_IRQHandler+0x1b4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d04a      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2d      	ldr	r2, [pc, #180]	@ (80039ac <HAL_DMA_IRQHandler+0x1b8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d045      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2b      	ldr	r2, [pc, #172]	@ (80039b0 <HAL_DMA_IRQHandler+0x1bc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d040      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a2a      	ldr	r2, [pc, #168]	@ (80039b4 <HAL_DMA_IRQHandler+0x1c0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d03b      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a28      	ldr	r2, [pc, #160]	@ (80039b8 <HAL_DMA_IRQHandler+0x1c4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d036      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a27      	ldr	r2, [pc, #156]	@ (80039bc <HAL_DMA_IRQHandler+0x1c8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d031      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a25      	ldr	r2, [pc, #148]	@ (80039c0 <HAL_DMA_IRQHandler+0x1cc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d02c      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a24      	ldr	r2, [pc, #144]	@ (80039c4 <HAL_DMA_IRQHandler+0x1d0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d027      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a22      	ldr	r2, [pc, #136]	@ (80039c8 <HAL_DMA_IRQHandler+0x1d4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d022      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a21      	ldr	r2, [pc, #132]	@ (80039cc <HAL_DMA_IRQHandler+0x1d8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d01d      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1f      	ldr	r2, [pc, #124]	@ (80039d0 <HAL_DMA_IRQHandler+0x1dc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d018      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1e      	ldr	r2, [pc, #120]	@ (80039d4 <HAL_DMA_IRQHandler+0x1e0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1c      	ldr	r2, [pc, #112]	@ (80039d8 <HAL_DMA_IRQHandler+0x1e4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00e      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1b      	ldr	r2, [pc, #108]	@ (80039dc <HAL_DMA_IRQHandler+0x1e8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a19      	ldr	r2, [pc, #100]	@ (80039e0 <HAL_DMA_IRQHandler+0x1ec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_DMA_IRQHandler+0x194>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a18      	ldr	r2, [pc, #96]	@ (80039e4 <HAL_DMA_IRQHandler+0x1f0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d12f      	bne.n	80039e8 <HAL_DMA_IRQHandler+0x1f4>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf14      	ite	ne
 8003996:	2301      	movne	r3, #1
 8003998:	2300      	moveq	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	e02e      	b.n	80039fc <HAL_DMA_IRQHandler+0x208>
 800399e:	bf00      	nop
 80039a0:	24000000 	.word	0x24000000
 80039a4:	1b4e81b5 	.word	0x1b4e81b5
 80039a8:	40020010 	.word	0x40020010
 80039ac:	40020028 	.word	0x40020028
 80039b0:	40020040 	.word	0x40020040
 80039b4:	40020058 	.word	0x40020058
 80039b8:	40020070 	.word	0x40020070
 80039bc:	40020088 	.word	0x40020088
 80039c0:	400200a0 	.word	0x400200a0
 80039c4:	400200b8 	.word	0x400200b8
 80039c8:	40020410 	.word	0x40020410
 80039cc:	40020428 	.word	0x40020428
 80039d0:	40020440 	.word	0x40020440
 80039d4:	40020458 	.word	0x40020458
 80039d8:	40020470 	.word	0x40020470
 80039dc:	40020488 	.word	0x40020488
 80039e0:	400204a0 	.word	0x400204a0
 80039e4:	400204b8 	.word	0x400204b8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf14      	ite	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	2300      	moveq	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0204 	bic.w	r2, r2, #4
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2208      	movs	r2, #8
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a24:	f043 0201 	orr.w	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d06e      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a69      	ldr	r2, [pc, #420]	@ (8003bec <HAL_DMA_IRQHandler+0x3f8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d04a      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a67      	ldr	r2, [pc, #412]	@ (8003bf0 <HAL_DMA_IRQHandler+0x3fc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d045      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a66      	ldr	r2, [pc, #408]	@ (8003bf4 <HAL_DMA_IRQHandler+0x400>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d040      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a64      	ldr	r2, [pc, #400]	@ (8003bf8 <HAL_DMA_IRQHandler+0x404>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d03b      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a63      	ldr	r2, [pc, #396]	@ (8003bfc <HAL_DMA_IRQHandler+0x408>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d036      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a61      	ldr	r2, [pc, #388]	@ (8003c00 <HAL_DMA_IRQHandler+0x40c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d031      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a60      	ldr	r2, [pc, #384]	@ (8003c04 <HAL_DMA_IRQHandler+0x410>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d02c      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c08 <HAL_DMA_IRQHandler+0x414>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d027      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a5d      	ldr	r2, [pc, #372]	@ (8003c0c <HAL_DMA_IRQHandler+0x418>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5b      	ldr	r2, [pc, #364]	@ (8003c10 <HAL_DMA_IRQHandler+0x41c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01d      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a5a      	ldr	r2, [pc, #360]	@ (8003c14 <HAL_DMA_IRQHandler+0x420>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a58      	ldr	r2, [pc, #352]	@ (8003c18 <HAL_DMA_IRQHandler+0x424>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a57      	ldr	r2, [pc, #348]	@ (8003c1c <HAL_DMA_IRQHandler+0x428>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a55      	ldr	r2, [pc, #340]	@ (8003c20 <HAL_DMA_IRQHandler+0x42c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a54      	ldr	r2, [pc, #336]	@ (8003c24 <HAL_DMA_IRQHandler+0x430>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x2ee>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a52      	ldr	r2, [pc, #328]	@ (8003c28 <HAL_DMA_IRQHandler+0x434>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10a      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x304>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e003      	b.n	8003b00 <HAL_DMA_IRQHandler+0x30c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2300      	movs	r3, #0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00d      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b18:	f043 0202 	orr.w	r2, r3, #2
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	2204      	movs	r2, #4
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 808f 	beq.w	8003c54 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bec <HAL_DMA_IRQHandler+0x3f8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d04a      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf0 <HAL_DMA_IRQHandler+0x3fc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d045      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a29      	ldr	r2, [pc, #164]	@ (8003bf4 <HAL_DMA_IRQHandler+0x400>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d040      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <HAL_DMA_IRQHandler+0x404>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d03b      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a26      	ldr	r2, [pc, #152]	@ (8003bfc <HAL_DMA_IRQHandler+0x408>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d036      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a24      	ldr	r2, [pc, #144]	@ (8003c00 <HAL_DMA_IRQHandler+0x40c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d031      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a23      	ldr	r2, [pc, #140]	@ (8003c04 <HAL_DMA_IRQHandler+0x410>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d02c      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a21      	ldr	r2, [pc, #132]	@ (8003c08 <HAL_DMA_IRQHandler+0x414>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d027      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a20      	ldr	r2, [pc, #128]	@ (8003c0c <HAL_DMA_IRQHandler+0x418>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d022      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1e      	ldr	r2, [pc, #120]	@ (8003c10 <HAL_DMA_IRQHandler+0x41c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d01d      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c14 <HAL_DMA_IRQHandler+0x420>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d018      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c18 <HAL_DMA_IRQHandler+0x424>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c1c <HAL_DMA_IRQHandler+0x428>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a18      	ldr	r2, [pc, #96]	@ (8003c20 <HAL_DMA_IRQHandler+0x42c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a17      	ldr	r2, [pc, #92]	@ (8003c24 <HAL_DMA_IRQHandler+0x430>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x3e2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a15      	ldr	r2, [pc, #84]	@ (8003c28 <HAL_DMA_IRQHandler+0x434>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d12a      	bne.n	8003c2c <HAL_DMA_IRQHandler+0x438>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e023      	b.n	8003c34 <HAL_DMA_IRQHandler+0x440>
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2300      	movs	r3, #0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	2204      	movs	r2, #4
 8003c42:	409a      	lsls	r2, r3
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	f043 0204 	orr.w	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80a6 	beq.w	8003db6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a85      	ldr	r2, [pc, #532]	@ (8003e84 <HAL_DMA_IRQHandler+0x690>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d04a      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a83      	ldr	r2, [pc, #524]	@ (8003e88 <HAL_DMA_IRQHandler+0x694>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d045      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a82      	ldr	r2, [pc, #520]	@ (8003e8c <HAL_DMA_IRQHandler+0x698>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d040      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a80      	ldr	r2, [pc, #512]	@ (8003e90 <HAL_DMA_IRQHandler+0x69c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d03b      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7f      	ldr	r2, [pc, #508]	@ (8003e94 <HAL_DMA_IRQHandler+0x6a0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d036      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7d      	ldr	r2, [pc, #500]	@ (8003e98 <HAL_DMA_IRQHandler+0x6a4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d031      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7c      	ldr	r2, [pc, #496]	@ (8003e9c <HAL_DMA_IRQHandler+0x6a8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d02c      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a7a      	ldr	r2, [pc, #488]	@ (8003ea0 <HAL_DMA_IRQHandler+0x6ac>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d027      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a79      	ldr	r2, [pc, #484]	@ (8003ea4 <HAL_DMA_IRQHandler+0x6b0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a77      	ldr	r2, [pc, #476]	@ (8003ea8 <HAL_DMA_IRQHandler+0x6b4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01d      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a76      	ldr	r2, [pc, #472]	@ (8003eac <HAL_DMA_IRQHandler+0x6b8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d018      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a74      	ldr	r2, [pc, #464]	@ (8003eb0 <HAL_DMA_IRQHandler+0x6bc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a73      	ldr	r2, [pc, #460]	@ (8003eb4 <HAL_DMA_IRQHandler+0x6c0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a71      	ldr	r2, [pc, #452]	@ (8003eb8 <HAL_DMA_IRQHandler+0x6c4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a70      	ldr	r2, [pc, #448]	@ (8003ebc <HAL_DMA_IRQHandler+0x6c8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x516>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a6e      	ldr	r2, [pc, #440]	@ (8003ec0 <HAL_DMA_IRQHandler+0x6cc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10a      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x52c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e009      	b.n	8003d34 <HAL_DMA_IRQHandler+0x540>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bf14      	ite	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	2300      	moveq	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d03e      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	2210      	movs	r2, #16
 8003d42:	409a      	lsls	r2, r3
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d018      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d108      	bne.n	8003d76 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d024      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
 8003d74:	e01f      	b.n	8003db6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01b      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
 8003d86:	e016      	b.n	8003db6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d107      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0208 	bic.w	r2, r2, #8
 8003da4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8110 	beq.w	8003fec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e84 <HAL_DMA_IRQHandler+0x690>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d04a      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2b      	ldr	r2, [pc, #172]	@ (8003e88 <HAL_DMA_IRQHandler+0x694>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d045      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a29      	ldr	r2, [pc, #164]	@ (8003e8c <HAL_DMA_IRQHandler+0x698>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d040      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a28      	ldr	r2, [pc, #160]	@ (8003e90 <HAL_DMA_IRQHandler+0x69c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d03b      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a26      	ldr	r2, [pc, #152]	@ (8003e94 <HAL_DMA_IRQHandler+0x6a0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d036      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a25      	ldr	r2, [pc, #148]	@ (8003e98 <HAL_DMA_IRQHandler+0x6a4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d031      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a23      	ldr	r2, [pc, #140]	@ (8003e9c <HAL_DMA_IRQHandler+0x6a8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d02c      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a22      	ldr	r2, [pc, #136]	@ (8003ea0 <HAL_DMA_IRQHandler+0x6ac>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d027      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a20      	ldr	r2, [pc, #128]	@ (8003ea4 <HAL_DMA_IRQHandler+0x6b0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d022      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea8 <HAL_DMA_IRQHandler+0x6b4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d01d      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1d      	ldr	r2, [pc, #116]	@ (8003eac <HAL_DMA_IRQHandler+0x6b8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d018      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb0 <HAL_DMA_IRQHandler+0x6bc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb4 <HAL_DMA_IRQHandler+0x6c0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00e      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a19      	ldr	r2, [pc, #100]	@ (8003eb8 <HAL_DMA_IRQHandler+0x6c4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d009      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a17      	ldr	r2, [pc, #92]	@ (8003ebc <HAL_DMA_IRQHandler+0x6c8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x678>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a16      	ldr	r2, [pc, #88]	@ (8003ec0 <HAL_DMA_IRQHandler+0x6cc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d12b      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0x6d0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bf14      	ite	ne
 8003e7a:	2301      	movne	r3, #1
 8003e7c:	2300      	moveq	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	e02a      	b.n	8003ed8 <HAL_DMA_IRQHandler+0x6e4>
 8003e82:	bf00      	nop
 8003e84:	40020010 	.word	0x40020010
 8003e88:	40020028 	.word	0x40020028
 8003e8c:	40020040 	.word	0x40020040
 8003e90:	40020058 	.word	0x40020058
 8003e94:	40020070 	.word	0x40020070
 8003e98:	40020088 	.word	0x40020088
 8003e9c:	400200a0 	.word	0x400200a0
 8003ea0:	400200b8 	.word	0x400200b8
 8003ea4:	40020410 	.word	0x40020410
 8003ea8:	40020428 	.word	0x40020428
 8003eac:	40020440 	.word	0x40020440
 8003eb0:	40020458 	.word	0x40020458
 8003eb4:	40020470 	.word	0x40020470
 8003eb8:	40020488 	.word	0x40020488
 8003ebc:	400204a0 	.word	0x400204a0
 8003ec0:	400204b8 	.word	0x400204b8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8087 	beq.w	8003fec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d139      	bne.n	8003f6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0216 	bic.w	r2, r2, #22
 8003f08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <HAL_DMA_IRQHandler+0x736>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0208 	bic.w	r2, r2, #8
 8003f38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	223f      	movs	r2, #63	@ 0x3f
 8003f44:	409a      	lsls	r2, r3
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8382 	beq.w	8004668 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
          }
          return;
 8003f6c:	e37c      	b.n	8004668 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d018      	beq.n	8003fae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d108      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d02c      	beq.n	8003fec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
 8003f9a:	e027      	b.n	8003fec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d023      	beq.n	8003fec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
 8003fac:	e01e      	b.n	8003fec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10f      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0210 	bic.w	r2, r2, #16
 8003fca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 833e 	beq.w	8004672 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8088 	beq.w	8004114 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2204      	movs	r2, #4
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a89      	ldr	r2, [pc, #548]	@ (8004238 <HAL_DMA_IRQHandler+0xa44>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d04a      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a88      	ldr	r2, [pc, #544]	@ (800423c <HAL_DMA_IRQHandler+0xa48>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d045      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a86      	ldr	r2, [pc, #536]	@ (8004240 <HAL_DMA_IRQHandler+0xa4c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d040      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a85      	ldr	r2, [pc, #532]	@ (8004244 <HAL_DMA_IRQHandler+0xa50>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d03b      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a83      	ldr	r2, [pc, #524]	@ (8004248 <HAL_DMA_IRQHandler+0xa54>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d036      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a82      	ldr	r2, [pc, #520]	@ (800424c <HAL_DMA_IRQHandler+0xa58>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d031      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a80      	ldr	r2, [pc, #512]	@ (8004250 <HAL_DMA_IRQHandler+0xa5c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02c      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a7f      	ldr	r2, [pc, #508]	@ (8004254 <HAL_DMA_IRQHandler+0xa60>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d027      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a7d      	ldr	r2, [pc, #500]	@ (8004258 <HAL_DMA_IRQHandler+0xa64>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d022      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a7c      	ldr	r2, [pc, #496]	@ (800425c <HAL_DMA_IRQHandler+0xa68>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d01d      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a7a      	ldr	r2, [pc, #488]	@ (8004260 <HAL_DMA_IRQHandler+0xa6c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d018      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a79      	ldr	r2, [pc, #484]	@ (8004264 <HAL_DMA_IRQHandler+0xa70>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d013      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a77      	ldr	r2, [pc, #476]	@ (8004268 <HAL_DMA_IRQHandler+0xa74>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a76      	ldr	r2, [pc, #472]	@ (800426c <HAL_DMA_IRQHandler+0xa78>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d009      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a74      	ldr	r2, [pc, #464]	@ (8004270 <HAL_DMA_IRQHandler+0xa7c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_DMA_IRQHandler+0x8b8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a73      	ldr	r2, [pc, #460]	@ (8004274 <HAL_DMA_IRQHandler+0xa80>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d108      	bne.n	80040be <HAL_DMA_IRQHandler+0x8ca>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e007      	b.n	80040ce <HAL_DMA_IRQHandler+0x8da>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3301      	adds	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d307      	bcc.n	80040ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f2      	bne.n	80040ce <HAL_DMA_IRQHandler+0x8da>
 80040e8:	e000      	b.n	80040ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80040ea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2203      	movs	r2, #3
 80040fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004102:	e003      	b.n	800410c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 82aa 	beq.w	8004672 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
 8004126:	e2a4      	b.n	8004672 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a52      	ldr	r2, [pc, #328]	@ (8004278 <HAL_DMA_IRQHandler+0xa84>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d04a      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a51      	ldr	r2, [pc, #324]	@ (800427c <HAL_DMA_IRQHandler+0xa88>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d045      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a4f      	ldr	r2, [pc, #316]	@ (8004280 <HAL_DMA_IRQHandler+0xa8c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d040      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a4e      	ldr	r2, [pc, #312]	@ (8004284 <HAL_DMA_IRQHandler+0xa90>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d03b      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a4c      	ldr	r2, [pc, #304]	@ (8004288 <HAL_DMA_IRQHandler+0xa94>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d036      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a4b      	ldr	r2, [pc, #300]	@ (800428c <HAL_DMA_IRQHandler+0xa98>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d031      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a49      	ldr	r2, [pc, #292]	@ (8004290 <HAL_DMA_IRQHandler+0xa9c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d02c      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a48      	ldr	r2, [pc, #288]	@ (8004294 <HAL_DMA_IRQHandler+0xaa0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d027      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a46      	ldr	r2, [pc, #280]	@ (8004298 <HAL_DMA_IRQHandler+0xaa4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d022      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a45      	ldr	r2, [pc, #276]	@ (800429c <HAL_DMA_IRQHandler+0xaa8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d01d      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a43      	ldr	r2, [pc, #268]	@ (80042a0 <HAL_DMA_IRQHandler+0xaac>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a42      	ldr	r2, [pc, #264]	@ (80042a4 <HAL_DMA_IRQHandler+0xab0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a40      	ldr	r2, [pc, #256]	@ (80042a8 <HAL_DMA_IRQHandler+0xab4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3f      	ldr	r2, [pc, #252]	@ (80042ac <HAL_DMA_IRQHandler+0xab8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d009      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a3d      	ldr	r2, [pc, #244]	@ (80042b0 <HAL_DMA_IRQHandler+0xabc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x9d4>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a3c      	ldr	r2, [pc, #240]	@ (80042b4 <HAL_DMA_IRQHandler+0xac0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <HAL_DMA_IRQHandler+0x9d8>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_DMA_IRQHandler+0x9da>
 80041cc:	2300      	movs	r3, #0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 824f 	beq.w	8004672 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2204      	movs	r2, #4
 80041e6:	409a      	lsls	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80dd 	beq.w	80043ac <HAL_DMA_IRQHandler+0xbb8>
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80d7 	beq.w	80043ac <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	2204      	movs	r2, #4
 8004208:	409a      	lsls	r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d059      	beq.n	80042cc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d14a      	bne.n	80042b8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 8220 	beq.w	800466c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004234:	e21a      	b.n	800466c <HAL_DMA_IRQHandler+0xe78>
 8004236:	bf00      	nop
 8004238:	40020010 	.word	0x40020010
 800423c:	40020028 	.word	0x40020028
 8004240:	40020040 	.word	0x40020040
 8004244:	40020058 	.word	0x40020058
 8004248:	40020070 	.word	0x40020070
 800424c:	40020088 	.word	0x40020088
 8004250:	400200a0 	.word	0x400200a0
 8004254:	400200b8 	.word	0x400200b8
 8004258:	40020410 	.word	0x40020410
 800425c:	40020428 	.word	0x40020428
 8004260:	40020440 	.word	0x40020440
 8004264:	40020458 	.word	0x40020458
 8004268:	40020470 	.word	0x40020470
 800426c:	40020488 	.word	0x40020488
 8004270:	400204a0 	.word	0x400204a0
 8004274:	400204b8 	.word	0x400204b8
 8004278:	48022c08 	.word	0x48022c08
 800427c:	48022c1c 	.word	0x48022c1c
 8004280:	48022c30 	.word	0x48022c30
 8004284:	48022c44 	.word	0x48022c44
 8004288:	48022c58 	.word	0x48022c58
 800428c:	48022c6c 	.word	0x48022c6c
 8004290:	48022c80 	.word	0x48022c80
 8004294:	48022c94 	.word	0x48022c94
 8004298:	58025408 	.word	0x58025408
 800429c:	5802541c 	.word	0x5802541c
 80042a0:	58025430 	.word	0x58025430
 80042a4:	58025444 	.word	0x58025444
 80042a8:	58025458 	.word	0x58025458
 80042ac:	5802546c 	.word	0x5802546c
 80042b0:	58025480 	.word	0x58025480
 80042b4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 81d5 	beq.w	800466c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ca:	e1cf      	b.n	800466c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d160      	bne.n	8004398 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7f      	ldr	r2, [pc, #508]	@ (80044d8 <HAL_DMA_IRQHandler+0xce4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d04a      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7d      	ldr	r2, [pc, #500]	@ (80044dc <HAL_DMA_IRQHandler+0xce8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d045      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7c      	ldr	r2, [pc, #496]	@ (80044e0 <HAL_DMA_IRQHandler+0xcec>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d040      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7a      	ldr	r2, [pc, #488]	@ (80044e4 <HAL_DMA_IRQHandler+0xcf0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d03b      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a79      	ldr	r2, [pc, #484]	@ (80044e8 <HAL_DMA_IRQHandler+0xcf4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d036      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a77      	ldr	r2, [pc, #476]	@ (80044ec <HAL_DMA_IRQHandler+0xcf8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d031      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a76      	ldr	r2, [pc, #472]	@ (80044f0 <HAL_DMA_IRQHandler+0xcfc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d02c      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a74      	ldr	r2, [pc, #464]	@ (80044f4 <HAL_DMA_IRQHandler+0xd00>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d027      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a73      	ldr	r2, [pc, #460]	@ (80044f8 <HAL_DMA_IRQHandler+0xd04>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d022      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a71      	ldr	r2, [pc, #452]	@ (80044fc <HAL_DMA_IRQHandler+0xd08>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01d      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a70      	ldr	r2, [pc, #448]	@ (8004500 <HAL_DMA_IRQHandler+0xd0c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d018      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a6e      	ldr	r2, [pc, #440]	@ (8004504 <HAL_DMA_IRQHandler+0xd10>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6d      	ldr	r2, [pc, #436]	@ (8004508 <HAL_DMA_IRQHandler+0xd14>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00e      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6b      	ldr	r2, [pc, #428]	@ (800450c <HAL_DMA_IRQHandler+0xd18>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d009      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6a      	ldr	r2, [pc, #424]	@ (8004510 <HAL_DMA_IRQHandler+0xd1c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <HAL_DMA_IRQHandler+0xb82>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a68      	ldr	r2, [pc, #416]	@ (8004514 <HAL_DMA_IRQHandler+0xd20>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d108      	bne.n	8004388 <HAL_DMA_IRQHandler+0xb94>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0208 	bic.w	r2, r2, #8
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e007      	b.n	8004398 <HAL_DMA_IRQHandler+0xba4>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0204 	bic.w	r2, r2, #4
 8004396:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8165 	beq.w	800466c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043aa:	e15f      	b.n	800466c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2202      	movs	r2, #2
 80043b6:	409a      	lsls	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80c5 	beq.w	800454c <HAL_DMA_IRQHandler+0xd58>
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80bf 	beq.w	800454c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2202      	movs	r2, #2
 80043d8:	409a      	lsls	r2, r3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d018      	beq.n	800441a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 813a 	beq.w	8004670 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004404:	e134      	b.n	8004670 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8130 	beq.w	8004670 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004418:	e12a      	b.n	8004670 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 8089 	bne.w	8004538 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2b      	ldr	r2, [pc, #172]	@ (80044d8 <HAL_DMA_IRQHandler+0xce4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d04a      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a29      	ldr	r2, [pc, #164]	@ (80044dc <HAL_DMA_IRQHandler+0xce8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d045      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a28      	ldr	r2, [pc, #160]	@ (80044e0 <HAL_DMA_IRQHandler+0xcec>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d040      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a26      	ldr	r2, [pc, #152]	@ (80044e4 <HAL_DMA_IRQHandler+0xcf0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d03b      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a25      	ldr	r2, [pc, #148]	@ (80044e8 <HAL_DMA_IRQHandler+0xcf4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d036      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a23      	ldr	r2, [pc, #140]	@ (80044ec <HAL_DMA_IRQHandler+0xcf8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d031      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a22      	ldr	r2, [pc, #136]	@ (80044f0 <HAL_DMA_IRQHandler+0xcfc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d02c      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a20      	ldr	r2, [pc, #128]	@ (80044f4 <HAL_DMA_IRQHandler+0xd00>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d027      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_DMA_IRQHandler+0xd04>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d022      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1d      	ldr	r2, [pc, #116]	@ (80044fc <HAL_DMA_IRQHandler+0xd08>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01d      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <HAL_DMA_IRQHandler+0xd0c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d018      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1a      	ldr	r2, [pc, #104]	@ (8004504 <HAL_DMA_IRQHandler+0xd10>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a19      	ldr	r2, [pc, #100]	@ (8004508 <HAL_DMA_IRQHandler+0xd14>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a17      	ldr	r2, [pc, #92]	@ (800450c <HAL_DMA_IRQHandler+0xd18>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a16      	ldr	r2, [pc, #88]	@ (8004510 <HAL_DMA_IRQHandler+0xd1c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xcd2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a14      	ldr	r2, [pc, #80]	@ (8004514 <HAL_DMA_IRQHandler+0xd20>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d128      	bne.n	8004518 <HAL_DMA_IRQHandler+0xd24>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0214 	bic.w	r2, r2, #20
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e027      	b.n	8004528 <HAL_DMA_IRQHandler+0xd34>
 80044d8:	40020010 	.word	0x40020010
 80044dc:	40020028 	.word	0x40020028
 80044e0:	40020040 	.word	0x40020040
 80044e4:	40020058 	.word	0x40020058
 80044e8:	40020070 	.word	0x40020070
 80044ec:	40020088 	.word	0x40020088
 80044f0:	400200a0 	.word	0x400200a0
 80044f4:	400200b8 	.word	0x400200b8
 80044f8:	40020410 	.word	0x40020410
 80044fc:	40020428 	.word	0x40020428
 8004500:	40020440 	.word	0x40020440
 8004504:	40020458 	.word	0x40020458
 8004508:	40020470 	.word	0x40020470
 800450c:	40020488 	.word	0x40020488
 8004510:	400204a0 	.word	0x400204a0
 8004514:	400204b8 	.word	0x400204b8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 020a 	bic.w	r2, r2, #10
 8004526:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8097 	beq.w	8004670 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800454a:	e091      	b.n	8004670 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2208      	movs	r2, #8
 8004556:	409a      	lsls	r2, r3
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8088 	beq.w	8004672 <HAL_DMA_IRQHandler+0xe7e>
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8082 	beq.w	8004672 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a41      	ldr	r2, [pc, #260]	@ (8004678 <HAL_DMA_IRQHandler+0xe84>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d04a      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a3f      	ldr	r2, [pc, #252]	@ (800467c <HAL_DMA_IRQHandler+0xe88>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d045      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a3e      	ldr	r2, [pc, #248]	@ (8004680 <HAL_DMA_IRQHandler+0xe8c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d040      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a3c      	ldr	r2, [pc, #240]	@ (8004684 <HAL_DMA_IRQHandler+0xe90>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d03b      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a3b      	ldr	r2, [pc, #236]	@ (8004688 <HAL_DMA_IRQHandler+0xe94>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d036      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a39      	ldr	r2, [pc, #228]	@ (800468c <HAL_DMA_IRQHandler+0xe98>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d031      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a38      	ldr	r2, [pc, #224]	@ (8004690 <HAL_DMA_IRQHandler+0xe9c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d02c      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a36      	ldr	r2, [pc, #216]	@ (8004694 <HAL_DMA_IRQHandler+0xea0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d027      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a35      	ldr	r2, [pc, #212]	@ (8004698 <HAL_DMA_IRQHandler+0xea4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d022      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a33      	ldr	r2, [pc, #204]	@ (800469c <HAL_DMA_IRQHandler+0xea8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01d      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a32      	ldr	r2, [pc, #200]	@ (80046a0 <HAL_DMA_IRQHandler+0xeac>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d018      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a30      	ldr	r2, [pc, #192]	@ (80046a4 <HAL_DMA_IRQHandler+0xeb0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2f      	ldr	r2, [pc, #188]	@ (80046a8 <HAL_DMA_IRQHandler+0xeb4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2d      	ldr	r2, [pc, #180]	@ (80046ac <HAL_DMA_IRQHandler+0xeb8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2c      	ldr	r2, [pc, #176]	@ (80046b0 <HAL_DMA_IRQHandler+0xebc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_DMA_IRQHandler+0xe1a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a2a      	ldr	r2, [pc, #168]	@ (80046b4 <HAL_DMA_IRQHandler+0xec0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d108      	bne.n	8004620 <HAL_DMA_IRQHandler+0xe2c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 021c 	bic.w	r2, r2, #28
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e007      	b.n	8004630 <HAL_DMA_IRQHandler+0xe3c>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 020e 	bic.w	r2, r2, #14
 800462e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	2201      	movs	r2, #1
 800463a:	409a      	lsls	r2, r3
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
 8004666:	e004      	b.n	8004672 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004668:	bf00      	nop
 800466a:	e002      	b.n	8004672 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800466c:	bf00      	nop
 800466e:	e000      	b.n	8004672 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004670:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004672:	3728      	adds	r7, #40	@ 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40020010 	.word	0x40020010
 800467c:	40020028 	.word	0x40020028
 8004680:	40020040 	.word	0x40020040
 8004684:	40020058 	.word	0x40020058
 8004688:	40020070 	.word	0x40020070
 800468c:	40020088 	.word	0x40020088
 8004690:	400200a0 	.word	0x400200a0
 8004694:	400200b8 	.word	0x400200b8
 8004698:	40020410 	.word	0x40020410
 800469c:	40020428 	.word	0x40020428
 80046a0:	40020440 	.word	0x40020440
 80046a4:	40020458 	.word	0x40020458
 80046a8:	40020470 	.word	0x40020470
 80046ac:	40020488 	.word	0x40020488
 80046b0:	400204a0 	.word	0x400204a0
 80046b4:	400204b8 	.word	0x400204b8

080046b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a42      	ldr	r2, [pc, #264]	@ (80047d0 <DMA_CalcBaseAndBitshift+0x118>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d04a      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a41      	ldr	r2, [pc, #260]	@ (80047d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d045      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3f      	ldr	r2, [pc, #252]	@ (80047d8 <DMA_CalcBaseAndBitshift+0x120>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d040      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3e      	ldr	r2, [pc, #248]	@ (80047dc <DMA_CalcBaseAndBitshift+0x124>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d03b      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3c      	ldr	r2, [pc, #240]	@ (80047e0 <DMA_CalcBaseAndBitshift+0x128>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d036      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a3b      	ldr	r2, [pc, #236]	@ (80047e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d031      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a39      	ldr	r2, [pc, #228]	@ (80047e8 <DMA_CalcBaseAndBitshift+0x130>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d02c      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a38      	ldr	r2, [pc, #224]	@ (80047ec <DMA_CalcBaseAndBitshift+0x134>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d027      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a36      	ldr	r2, [pc, #216]	@ (80047f0 <DMA_CalcBaseAndBitshift+0x138>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d022      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a35      	ldr	r2, [pc, #212]	@ (80047f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d01d      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a33      	ldr	r2, [pc, #204]	@ (80047f8 <DMA_CalcBaseAndBitshift+0x140>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d018      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a32      	ldr	r2, [pc, #200]	@ (80047fc <DMA_CalcBaseAndBitshift+0x144>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d013      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a30      	ldr	r2, [pc, #192]	@ (8004800 <DMA_CalcBaseAndBitshift+0x148>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00e      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2f      	ldr	r2, [pc, #188]	@ (8004804 <DMA_CalcBaseAndBitshift+0x14c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d009      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2d      	ldr	r2, [pc, #180]	@ (8004808 <DMA_CalcBaseAndBitshift+0x150>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <DMA_CalcBaseAndBitshift+0xa8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2c      	ldr	r2, [pc, #176]	@ (800480c <DMA_CalcBaseAndBitshift+0x154>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d101      	bne.n	8004764 <DMA_CalcBaseAndBitshift+0xac>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <DMA_CalcBaseAndBitshift+0xae>
 8004764:	2300      	movs	r3, #0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d024      	beq.n	80047b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	3b10      	subs	r3, #16
 8004772:	4a27      	ldr	r2, [pc, #156]	@ (8004810 <DMA_CalcBaseAndBitshift+0x158>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	4a24      	ldr	r2, [pc, #144]	@ (8004814 <DMA_CalcBaseAndBitshift+0x15c>)
 8004784:	5cd3      	ldrb	r3, [r2, r3]
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b03      	cmp	r3, #3
 8004790:	d908      	bls.n	80047a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	4b1f      	ldr	r3, [pc, #124]	@ (8004818 <DMA_CalcBaseAndBitshift+0x160>)
 800479a:	4013      	ands	r3, r2
 800479c:	1d1a      	adds	r2, r3, #4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80047a2:	e00d      	b.n	80047c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004818 <DMA_CalcBaseAndBitshift+0x160>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80047b2:	e005      	b.n	80047c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40020010 	.word	0x40020010
 80047d4:	40020028 	.word	0x40020028
 80047d8:	40020040 	.word	0x40020040
 80047dc:	40020058 	.word	0x40020058
 80047e0:	40020070 	.word	0x40020070
 80047e4:	40020088 	.word	0x40020088
 80047e8:	400200a0 	.word	0x400200a0
 80047ec:	400200b8 	.word	0x400200b8
 80047f0:	40020410 	.word	0x40020410
 80047f4:	40020428 	.word	0x40020428
 80047f8:	40020440 	.word	0x40020440
 80047fc:	40020458 	.word	0x40020458
 8004800:	40020470 	.word	0x40020470
 8004804:	40020488 	.word	0x40020488
 8004808:	400204a0 	.word	0x400204a0
 800480c:	400204b8 	.word	0x400204b8
 8004810:	aaaaaaab 	.word	0xaaaaaaab
 8004814:	0800f930 	.word	0x0800f930
 8004818:	fffffc00 	.word	0xfffffc00

0800481c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d120      	bne.n	8004872 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	2b03      	cmp	r3, #3
 8004836:	d858      	bhi.n	80048ea <DMA_CheckFifoParam+0xce>
 8004838:	a201      	add	r2, pc, #4	@ (adr r2, 8004840 <DMA_CheckFifoParam+0x24>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004851 	.word	0x08004851
 8004844:	08004863 	.word	0x08004863
 8004848:	08004851 	.word	0x08004851
 800484c:	080048eb 	.word	0x080048eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004854:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d048      	beq.n	80048ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004860:	e045      	b.n	80048ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800486a:	d142      	bne.n	80048f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004870:	e03f      	b.n	80048f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800487a:	d123      	bne.n	80048c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	2b03      	cmp	r3, #3
 8004882:	d838      	bhi.n	80048f6 <DMA_CheckFifoParam+0xda>
 8004884:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <DMA_CheckFifoParam+0x70>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048a3 	.word	0x080048a3
 8004894:	0800489d 	.word	0x0800489d
 8004898:	080048b5 	.word	0x080048b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
        break;
 80048a0:	e030      	b.n	8004904 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d025      	beq.n	80048fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048b2:	e022      	b.n	80048fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048bc:	d11f      	bne.n	80048fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048c2:	e01c      	b.n	80048fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d902      	bls.n	80048d2 <DMA_CheckFifoParam+0xb6>
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d003      	beq.n	80048d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80048d0:	e018      	b.n	8004904 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
        break;
 80048d6:	e015      	b.n	8004904 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00e      	beq.n	8004902 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
    break;
 80048e8:	e00b      	b.n	8004902 <DMA_CheckFifoParam+0xe6>
        break;
 80048ea:	bf00      	nop
 80048ec:	e00a      	b.n	8004904 <DMA_CheckFifoParam+0xe8>
        break;
 80048ee:	bf00      	nop
 80048f0:	e008      	b.n	8004904 <DMA_CheckFifoParam+0xe8>
        break;
 80048f2:	bf00      	nop
 80048f4:	e006      	b.n	8004904 <DMA_CheckFifoParam+0xe8>
        break;
 80048f6:	bf00      	nop
 80048f8:	e004      	b.n	8004904 <DMA_CheckFifoParam+0xe8>
        break;
 80048fa:	bf00      	nop
 80048fc:	e002      	b.n	8004904 <DMA_CheckFifoParam+0xe8>
        break;
 80048fe:	bf00      	nop
 8004900:	e000      	b.n	8004904 <DMA_CheckFifoParam+0xe8>
    break;
 8004902:	bf00      	nop
    }
  }

  return status;
 8004904:	7bfb      	ldrb	r3, [r7, #15]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop

08004914 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a38      	ldr	r2, [pc, #224]	@ (8004a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a36      	ldr	r2, [pc, #216]	@ (8004a0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01d      	beq.n	8004972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a35      	ldr	r2, [pc, #212]	@ (8004a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a33      	ldr	r2, [pc, #204]	@ (8004a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a32      	ldr	r2, [pc, #200]	@ (8004a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a30      	ldr	r2, [pc, #192]	@ (8004a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2f      	ldr	r2, [pc, #188]	@ (8004a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004976:	2300      	movs	r3, #0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01a      	beq.n	80049b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	3b08      	subs	r3, #8
 8004984:	4a28      	ldr	r2, [pc, #160]	@ (8004a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4b26      	ldr	r3, [pc, #152]	@ (8004a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	461a      	mov	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a24      	ldr	r2, [pc, #144]	@ (8004a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80049a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2201      	movs	r2, #1
 80049aa:	409a      	lsls	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80049b0:	e024      	b.n	80049fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	3b10      	subs	r3, #16
 80049ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80049bc:	fba2 2303 	umull	r2, r3, r2, r3
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d806      	bhi.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4a1b      	ldr	r2, [pc, #108]	@ (8004a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d902      	bls.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3308      	adds	r3, #8
 80049d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4b18      	ldr	r3, [pc, #96]	@ (8004a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	461a      	mov	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a16      	ldr	r2, [pc, #88]	@ (8004a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80049ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2201      	movs	r2, #1
 80049f6:	409a      	lsls	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	58025408 	.word	0x58025408
 8004a0c:	5802541c 	.word	0x5802541c
 8004a10:	58025430 	.word	0x58025430
 8004a14:	58025444 	.word	0x58025444
 8004a18:	58025458 	.word	0x58025458
 8004a1c:	5802546c 	.word	0x5802546c
 8004a20:	58025480 	.word	0x58025480
 8004a24:	58025494 	.word	0x58025494
 8004a28:	cccccccd 	.word	0xcccccccd
 8004a2c:	16009600 	.word	0x16009600
 8004a30:	58025880 	.word	0x58025880
 8004a34:	aaaaaaab 	.word	0xaaaaaaab
 8004a38:	400204b8 	.word	0x400204b8
 8004a3c:	4002040f 	.word	0x4002040f
 8004a40:	10008200 	.word	0x10008200
 8004a44:	40020880 	.word	0x40020880

08004a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d04a      	beq.n	8004af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d847      	bhi.n	8004af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a25      	ldr	r2, [pc, #148]	@ (8004b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d022      	beq.n	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a24      	ldr	r2, [pc, #144]	@ (8004b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d01d      	beq.n	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a22      	ldr	r2, [pc, #136]	@ (8004b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d018      	beq.n	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a21      	ldr	r2, [pc, #132]	@ (8004b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1f      	ldr	r2, [pc, #124]	@ (8004b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00e      	beq.n	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1b      	ldr	r2, [pc, #108]	@ (8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4b17      	ldr	r3, [pc, #92]	@ (8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a15      	ldr	r2, [pc, #84]	@ (8004b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ad0:	671a      	str	r2, [r3, #112]	@ 0x70
 8004ad2:	e009      	b.n	8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	461a      	mov	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a11      	ldr	r2, [pc, #68]	@ (8004b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ae6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	2201      	movs	r2, #1
 8004aee:	409a      	lsls	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	58025408 	.word	0x58025408
 8004b04:	5802541c 	.word	0x5802541c
 8004b08:	58025430 	.word	0x58025430
 8004b0c:	58025444 	.word	0x58025444
 8004b10:	58025458 	.word	0x58025458
 8004b14:	5802546c 	.word	0x5802546c
 8004b18:	58025480 	.word	0x58025480
 8004b1c:	58025494 	.word	0x58025494
 8004b20:	1600963f 	.word	0x1600963f
 8004b24:	58025940 	.word	0x58025940
 8004b28:	1000823f 	.word	0x1000823f
 8004b2c:	40020940 	.word	0x40020940

08004b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b089      	sub	sp, #36	@ 0x24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b3e:	4b89      	ldr	r3, [pc, #548]	@ (8004d64 <HAL_GPIO_Init+0x234>)
 8004b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b42:	e194      	b.n	8004e6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	4013      	ands	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8186 	beq.w	8004e68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d005      	beq.n	8004b74 <HAL_GPIO_Init+0x44>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d130      	bne.n	8004bd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	2203      	movs	r2, #3
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004baa:	2201      	movs	r2, #1
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	f003 0201 	and.w	r2, r3, #1
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d017      	beq.n	8004c12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	2203      	movs	r2, #3
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d123      	bne.n	8004c66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	08da      	lsrs	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3208      	adds	r2, #8
 8004c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	220f      	movs	r2, #15
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	08da      	lsrs	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3208      	adds	r2, #8
 8004c60:	69b9      	ldr	r1, [r7, #24]
 8004c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	2203      	movs	r2, #3
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 0203 	and.w	r2, r3, #3
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80e0 	beq.w	8004e68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <HAL_GPIO_Init+0x238>)
 8004caa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004cae:	4a2e      	ldr	r2, [pc, #184]	@ (8004d68 <HAL_GPIO_Init+0x238>)
 8004cb0:	f043 0302 	orr.w	r3, r3, #2
 8004cb4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d68 <HAL_GPIO_Init+0x238>)
 8004cba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cc6:	4a29      	ldr	r2, [pc, #164]	@ (8004d6c <HAL_GPIO_Init+0x23c>)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	089b      	lsrs	r3, r3, #2
 8004ccc:	3302      	adds	r3, #2
 8004cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	220f      	movs	r2, #15
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a20      	ldr	r2, [pc, #128]	@ (8004d70 <HAL_GPIO_Init+0x240>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d052      	beq.n	8004d98 <HAL_GPIO_Init+0x268>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d74 <HAL_GPIO_Init+0x244>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d031      	beq.n	8004d5e <HAL_GPIO_Init+0x22e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <HAL_GPIO_Init+0x248>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d02b      	beq.n	8004d5a <HAL_GPIO_Init+0x22a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1d      	ldr	r2, [pc, #116]	@ (8004d7c <HAL_GPIO_Init+0x24c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d025      	beq.n	8004d56 <HAL_GPIO_Init+0x226>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004d80 <HAL_GPIO_Init+0x250>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d01f      	beq.n	8004d52 <HAL_GPIO_Init+0x222>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a1b      	ldr	r2, [pc, #108]	@ (8004d84 <HAL_GPIO_Init+0x254>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d019      	beq.n	8004d4e <HAL_GPIO_Init+0x21e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8004d88 <HAL_GPIO_Init+0x258>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <HAL_GPIO_Init+0x21a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a19      	ldr	r2, [pc, #100]	@ (8004d8c <HAL_GPIO_Init+0x25c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00d      	beq.n	8004d46 <HAL_GPIO_Init+0x216>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a18      	ldr	r2, [pc, #96]	@ (8004d90 <HAL_GPIO_Init+0x260>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <HAL_GPIO_Init+0x212>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a17      	ldr	r2, [pc, #92]	@ (8004d94 <HAL_GPIO_Init+0x264>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <HAL_GPIO_Init+0x20e>
 8004d3a:	2309      	movs	r3, #9
 8004d3c:	e02d      	b.n	8004d9a <HAL_GPIO_Init+0x26a>
 8004d3e:	230a      	movs	r3, #10
 8004d40:	e02b      	b.n	8004d9a <HAL_GPIO_Init+0x26a>
 8004d42:	2308      	movs	r3, #8
 8004d44:	e029      	b.n	8004d9a <HAL_GPIO_Init+0x26a>
 8004d46:	2307      	movs	r3, #7
 8004d48:	e027      	b.n	8004d9a <HAL_GPIO_Init+0x26a>
 8004d4a:	2306      	movs	r3, #6
 8004d4c:	e025      	b.n	8004d9a <HAL_GPIO_Init+0x26a>
 8004d4e:	2305      	movs	r3, #5
 8004d50:	e023      	b.n	8004d9a <HAL_GPIO_Init+0x26a>
 8004d52:	2304      	movs	r3, #4
 8004d54:	e021      	b.n	8004d9a <HAL_GPIO_Init+0x26a>
 8004d56:	2303      	movs	r3, #3
 8004d58:	e01f      	b.n	8004d9a <HAL_GPIO_Init+0x26a>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e01d      	b.n	8004d9a <HAL_GPIO_Init+0x26a>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e01b      	b.n	8004d9a <HAL_GPIO_Init+0x26a>
 8004d62:	bf00      	nop
 8004d64:	58000080 	.word	0x58000080
 8004d68:	58024400 	.word	0x58024400
 8004d6c:	58000400 	.word	0x58000400
 8004d70:	58020000 	.word	0x58020000
 8004d74:	58020400 	.word	0x58020400
 8004d78:	58020800 	.word	0x58020800
 8004d7c:	58020c00 	.word	0x58020c00
 8004d80:	58021000 	.word	0x58021000
 8004d84:	58021400 	.word	0x58021400
 8004d88:	58021800 	.word	0x58021800
 8004d8c:	58021c00 	.word	0x58021c00
 8004d90:	58022000 	.word	0x58022000
 8004d94:	58022400 	.word	0x58022400
 8004d98:	2300      	movs	r3, #0
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	f002 0203 	and.w	r2, r2, #3
 8004da0:	0092      	lsls	r2, r2, #2
 8004da2:	4093      	lsls	r3, r2
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004daa:	4938      	ldr	r1, [pc, #224]	@ (8004e8c <HAL_GPIO_Init+0x35c>)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	3302      	adds	r3, #2
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004dde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4013      	ands	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	43db      	mvns	r3, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f47f ae63 	bne.w	8004b44 <HAL_GPIO_Init+0x14>
  }
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	3724      	adds	r7, #36	@ 0x24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	58000400 	.word	0x58000400

08004e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	887b      	ldrh	r3, [r7, #2]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	e001      	b.n	8004eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	807b      	strh	r3, [r7, #2]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ed0:	787b      	ldrb	r3, [r7, #1]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004edc:	e003      	b.n	8004ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ede:	887b      	ldrh	r3, [r7, #2]
 8004ee0:	041a      	lsls	r2, r3, #16
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	619a      	str	r2, [r3, #24]
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e08b      	b.n	800501e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc f948 	bl	80011b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2224      	movs	r2, #36	@ 0x24
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d107      	bne.n	8004f6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f6a:	609a      	str	r2, [r3, #8]
 8004f6c:	e006      	b.n	8004f7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004f7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d108      	bne.n	8004f96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f92:	605a      	str	r2, [r3, #4]
 8004f94:	e007      	b.n	8004fa6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6859      	ldr	r1, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005028 <HAL_I2C_Init+0x134>)
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69d9      	ldr	r1, [r3, #28]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1a      	ldr	r2, [r3, #32]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	02008000 	.word	0x02008000

0800502c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	461a      	mov	r2, r3
 8005038:	460b      	mov	r3, r1
 800503a:	817b      	strh	r3, [r7, #10]
 800503c:	4613      	mov	r3, r2
 800503e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b20      	cmp	r3, #32
 800504a:	f040 80fd 	bne.w	8005248 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_I2C_Master_Transmit+0x30>
 8005058:	2302      	movs	r3, #2
 800505a:	e0f6      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005064:	f7fc fbd2 	bl	800180c <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	2319      	movs	r3, #25
 8005070:	2201      	movs	r2, #1
 8005072:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fb72 	bl	8005760 <I2C_WaitOnFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0e1      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2221      	movs	r2, #33	@ 0x21
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2210      	movs	r2, #16
 8005092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	893a      	ldrh	r2, [r7, #8]
 80050a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2bff      	cmp	r3, #255	@ 0xff
 80050b6:	d906      	bls.n	80050c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	22ff      	movs	r2, #255	@ 0xff
 80050bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80050be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e007      	b.n	80050d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80050d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d024      	beq.n	8005128 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	781a      	ldrb	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005112:	b2db      	uxtb	r3, r3
 8005114:	3301      	adds	r3, #1
 8005116:	b2da      	uxtb	r2, r3
 8005118:	8979      	ldrh	r1, [r7, #10]
 800511a:	4b4e      	ldr	r3, [pc, #312]	@ (8005254 <HAL_I2C_Master_Transmit+0x228>)
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fd6d 	bl	8005c00 <I2C_TransferConfig>
 8005126:	e066      	b.n	80051f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512c:	b2da      	uxtb	r2, r3
 800512e:	8979      	ldrh	r1, [r7, #10]
 8005130:	4b48      	ldr	r3, [pc, #288]	@ (8005254 <HAL_I2C_Master_Transmit+0x228>)
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 fd62 	bl	8005c00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800513c:	e05b      	b.n	80051f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	6a39      	ldr	r1, [r7, #32]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fb65 	bl	8005812 <I2C_WaitOnTXISFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e07b      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	781a      	ldrb	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d034      	beq.n	80051f6 <HAL_I2C_Master_Transmit+0x1ca>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d130      	bne.n	80051f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	@ 0x80
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fade 	bl	8005760 <I2C_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e04d      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2bff      	cmp	r3, #255	@ 0xff
 80051b6:	d90e      	bls.n	80051d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	22ff      	movs	r2, #255	@ 0xff
 80051bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	8979      	ldrh	r1, [r7, #10]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fd16 	bl	8005c00 <I2C_TransferConfig>
 80051d4:	e00f      	b.n	80051f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	8979      	ldrh	r1, [r7, #10]
 80051e8:	2300      	movs	r3, #0
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fd05 	bl	8005c00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d19e      	bne.n	800513e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	6a39      	ldr	r1, [r7, #32]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fb4b 	bl	80058a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e01a      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2220      	movs	r2, #32
 800521a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4b0c      	ldr	r3, [pc, #48]	@ (8005258 <HAL_I2C_Master_Transmit+0x22c>)
 8005228:	400b      	ands	r3, r1
 800522a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	80002000 	.word	0x80002000
 8005258:	fe00e800 	.word	0xfe00e800

0800525c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	461a      	mov	r2, r3
 8005268:	460b      	mov	r3, r1
 800526a:	817b      	strh	r3, [r7, #10]
 800526c:	4613      	mov	r3, r2
 800526e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b20      	cmp	r3, #32
 800527a:	f040 80db 	bne.w	8005434 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_I2C_Master_Receive+0x30>
 8005288:	2302      	movs	r3, #2
 800528a:	e0d4      	b.n	8005436 <HAL_I2C_Master_Receive+0x1da>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005294:	f7fc faba 	bl	800180c <HAL_GetTick>
 8005298:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2319      	movs	r3, #25
 80052a0:	2201      	movs	r2, #1
 80052a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fa5a 	bl	8005760 <I2C_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0bf      	b.n	8005436 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2222      	movs	r2, #34	@ 0x22
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2210      	movs	r2, #16
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	893a      	ldrh	r2, [r7, #8]
 80052d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2bff      	cmp	r3, #255	@ 0xff
 80052e6:	d90e      	bls.n	8005306 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	22ff      	movs	r2, #255	@ 0xff
 80052ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	8979      	ldrh	r1, [r7, #10]
 80052f6:	4b52      	ldr	r3, [pc, #328]	@ (8005440 <HAL_I2C_Master_Receive+0x1e4>)
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fc7e 	bl	8005c00 <I2C_TransferConfig>
 8005304:	e06d      	b.n	80053e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	b2da      	uxtb	r2, r3
 8005316:	8979      	ldrh	r1, [r7, #10]
 8005318:	4b49      	ldr	r3, [pc, #292]	@ (8005440 <HAL_I2C_Master_Receive+0x1e4>)
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fc6d 	bl	8005c00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005326:	e05c      	b.n	80053e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	6a39      	ldr	r1, [r7, #32]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fafb 	bl	8005928 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e07c      	b.n	8005436 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d034      	beq.n	80053e2 <HAL_I2C_Master_Receive+0x186>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d130      	bne.n	80053e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	2200      	movs	r2, #0
 8005388:	2180      	movs	r1, #128	@ 0x80
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f9e8 	bl	8005760 <I2C_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e04d      	b.n	8005436 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2bff      	cmp	r3, #255	@ 0xff
 80053a2:	d90e      	bls.n	80053c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	22ff      	movs	r2, #255	@ 0xff
 80053a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	8979      	ldrh	r1, [r7, #10]
 80053b2:	2300      	movs	r3, #0
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fc20 	bl	8005c00 <I2C_TransferConfig>
 80053c0:	e00f      	b.n	80053e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	8979      	ldrh	r1, [r7, #10]
 80053d4:	2300      	movs	r3, #0
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fc0f 	bl	8005c00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d19d      	bne.n	8005328 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	6a39      	ldr	r1, [r7, #32]
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fa55 	bl	80058a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e01a      	b.n	8005436 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2220      	movs	r2, #32
 8005406:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <HAL_I2C_Master_Receive+0x1e8>)
 8005414:	400b      	ands	r3, r1
 8005416:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	e000      	b.n	8005436 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	80002400 	.word	0x80002400
 8005444:	fe00e800 	.word	0xfe00e800

08005448 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	4608      	mov	r0, r1
 8005452:	4611      	mov	r1, r2
 8005454:	461a      	mov	r2, r3
 8005456:	4603      	mov	r3, r0
 8005458:	817b      	strh	r3, [r7, #10]
 800545a:	460b      	mov	r3, r1
 800545c:	813b      	strh	r3, [r7, #8]
 800545e:	4613      	mov	r3, r2
 8005460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b20      	cmp	r3, #32
 800546c:	f040 80f9 	bne.w	8005662 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_I2C_Mem_Write+0x34>
 8005476:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005478:	2b00      	cmp	r3, #0
 800547a:	d105      	bne.n	8005488 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005482:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0ed      	b.n	8005664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_I2C_Mem_Write+0x4e>
 8005492:	2302      	movs	r3, #2
 8005494:	e0e6      	b.n	8005664 <HAL_I2C_Mem_Write+0x21c>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800549e:	f7fc f9b5 	bl	800180c <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	2319      	movs	r3, #25
 80054aa:	2201      	movs	r2, #1
 80054ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f955 	bl	8005760 <I2C_WaitOnFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0d1      	b.n	8005664 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2221      	movs	r2, #33	@ 0x21
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2240      	movs	r2, #64	@ 0x40
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a3a      	ldr	r2, [r7, #32]
 80054da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054e8:	88f8      	ldrh	r0, [r7, #6]
 80054ea:	893a      	ldrh	r2, [r7, #8]
 80054ec:	8979      	ldrh	r1, [r7, #10]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	9301      	str	r3, [sp, #4]
 80054f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	4603      	mov	r3, r0
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f8b9 	bl	8005670 <I2C_RequestMemoryWrite>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0a9      	b.n	8005664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	2bff      	cmp	r3, #255	@ 0xff
 8005518:	d90e      	bls.n	8005538 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	22ff      	movs	r2, #255	@ 0xff
 800551e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005524:	b2da      	uxtb	r2, r3
 8005526:	8979      	ldrh	r1, [r7, #10]
 8005528:	2300      	movs	r3, #0
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fb65 	bl	8005c00 <I2C_TransferConfig>
 8005536:	e00f      	b.n	8005558 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005546:	b2da      	uxtb	r2, r3
 8005548:	8979      	ldrh	r1, [r7, #10]
 800554a:	2300      	movs	r3, #0
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fb54 	bl	8005c00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f958 	bl	8005812 <I2C_WaitOnTXISFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e07b      	b.n	8005664 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d034      	beq.n	8005610 <HAL_I2C_Mem_Write+0x1c8>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d130      	bne.n	8005610 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b4:	2200      	movs	r2, #0
 80055b6:	2180      	movs	r1, #128	@ 0x80
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f8d1 	bl	8005760 <I2C_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e04d      	b.n	8005664 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2bff      	cmp	r3, #255	@ 0xff
 80055d0:	d90e      	bls.n	80055f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	22ff      	movs	r2, #255	@ 0xff
 80055d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	8979      	ldrh	r1, [r7, #10]
 80055e0:	2300      	movs	r3, #0
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fb09 	bl	8005c00 <I2C_TransferConfig>
 80055ee:	e00f      	b.n	8005610 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	8979      	ldrh	r1, [r7, #10]
 8005602:	2300      	movs	r3, #0
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 faf8 	bl	8005c00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d19e      	bne.n	8005558 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f93e 	bl	80058a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e01a      	b.n	8005664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2220      	movs	r2, #32
 8005634:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4b0a      	ldr	r3, [pc, #40]	@ (800566c <HAL_I2C_Mem_Write+0x224>)
 8005642:	400b      	ands	r3, r1
 8005644:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	e000      	b.n	8005664 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005662:	2302      	movs	r3, #2
  }
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	fe00e800 	.word	0xfe00e800

08005670 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	4608      	mov	r0, r1
 800567a:	4611      	mov	r1, r2
 800567c:	461a      	mov	r2, r3
 800567e:	4603      	mov	r3, r0
 8005680:	817b      	strh	r3, [r7, #10]
 8005682:	460b      	mov	r3, r1
 8005684:	813b      	strh	r3, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	8979      	ldrh	r1, [r7, #10]
 8005690:	4b20      	ldr	r3, [pc, #128]	@ (8005714 <I2C_RequestMemoryWrite+0xa4>)
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fab1 	bl	8005c00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	69b9      	ldr	r1, [r7, #24]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f8b5 	bl	8005812 <I2C_WaitOnTXISFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e02c      	b.n	800570c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d105      	bne.n	80056c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056b8:	893b      	ldrh	r3, [r7, #8]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80056c2:	e015      	b.n	80056f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056c4:	893b      	ldrh	r3, [r7, #8]
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	69b9      	ldr	r1, [r7, #24]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f89b 	bl	8005812 <I2C_WaitOnTXISFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e012      	b.n	800570c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056e6:	893b      	ldrh	r3, [r7, #8]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	2200      	movs	r2, #0
 80056f8:	2180      	movs	r1, #128	@ 0x80
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f830 	bl	8005760 <I2C_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	80002000 	.word	0x80002000

08005718 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d103      	bne.n	8005736 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2200      	movs	r2, #0
 8005734:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d007      	beq.n	8005754 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	619a      	str	r2, [r3, #24]
  }
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005770:	e03b      	b.n	80057ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f962 	bl	8005a40 <I2C_IsErrorOccurred>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e041      	b.n	800580a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d02d      	beq.n	80057ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578e:	f7fc f83d 	bl	800180c <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d302      	bcc.n	80057a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d122      	bne.n	80057ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	bf0c      	ite	eq
 80057b4:	2301      	moveq	r3, #1
 80057b6:	2300      	movne	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d113      	bne.n	80057ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e00f      	b.n	800580a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4013      	ands	r3, r2
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	bf0c      	ite	eq
 80057fa:	2301      	moveq	r3, #1
 80057fc:	2300      	movne	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	429a      	cmp	r2, r3
 8005806:	d0b4      	beq.n	8005772 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800581e:	e033      	b.n	8005888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f90b 	bl	8005a40 <I2C_IsErrorOccurred>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e031      	b.n	8005898 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583a:	d025      	beq.n	8005888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583c:	f7fb ffe6 	bl	800180c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	d302      	bcc.n	8005852 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d11a      	bne.n	8005888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b02      	cmp	r3, #2
 800585e:	d013      	beq.n	8005888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e007      	b.n	8005898 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b02      	cmp	r3, #2
 8005894:	d1c4      	bne.n	8005820 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058ac:	e02f      	b.n	800590e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f8c4 	bl	8005a40 <I2C_IsErrorOccurred>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e02d      	b.n	800591e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c2:	f7fb ffa3 	bl	800180c <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11a      	bne.n	800590e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d013      	beq.n	800590e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ea:	f043 0220 	orr.w	r2, r3, #32
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e007      	b.n	800591e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b20      	cmp	r3, #32
 800591a:	d1c8      	bne.n	80058ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005938:	e071      	b.n	8005a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 f87e 	bl	8005a40 <I2C_IsErrorOccurred>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b20      	cmp	r3, #32
 800595a:	d13b      	bne.n	80059d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d138      	bne.n	80059d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b04      	cmp	r3, #4
 800596e:	d105      	bne.n	800597c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b10      	cmp	r3, #16
 8005988:	d121      	bne.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2210      	movs	r2, #16
 8005990:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2204      	movs	r2, #4
 8005996:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2220      	movs	r2, #32
 800599e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b24      	ldr	r3, [pc, #144]	@ (8005a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80059ac:	400b      	ands	r3, r1
 80059ae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	75fb      	strb	r3, [r7, #23]
 80059cc:	e002      	b.n	80059d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80059d4:	f7fb ff1a 	bl	800180c <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d302      	bcc.n	80059ea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d119      	bne.n	8005a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d116      	bne.n	8005a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d00f      	beq.n	8005a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	f043 0220 	orr.w	r2, r3, #32
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d002      	beq.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d083      	beq.n	800593a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	fe00e800 	.word	0xfe00e800

08005a40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	@ 0x28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d068      	beq.n	8005b3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2210      	movs	r2, #16
 8005a72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a74:	e049      	b.n	8005b0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7c:	d045      	beq.n	8005b0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a7e:	f7fb fec5 	bl	800180c <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d302      	bcc.n	8005a94 <I2C_IsErrorOccurred+0x54>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d13a      	bne.n	8005b0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005aa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab6:	d121      	bne.n	8005afc <I2C_IsErrorOccurred+0xbc>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005abe:	d01d      	beq.n	8005afc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ac0:	7cfb      	ldrb	r3, [r7, #19]
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d01a      	beq.n	8005afc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ad4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ad6:	f7fb fe99 	bl	800180c <HAL_GetTick>
 8005ada:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005adc:	e00e      	b.n	8005afc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ade:	f7fb fe95 	bl	800180c <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b19      	cmp	r3, #25
 8005aea:	d907      	bls.n	8005afc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	f043 0320 	orr.w	r3, r3, #32
 8005af2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005afa:	e006      	b.n	8005b0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d1e9      	bne.n	8005ade <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d003      	beq.n	8005b20 <I2C_IsErrorOccurred+0xe0>
 8005b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0aa      	beq.n	8005a76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	f043 0304 	orr.w	r3, r3, #4
 8005b36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00b      	beq.n	8005b68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00b      	beq.n	8005b8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f043 0308 	orr.w	r3, r3, #8
 8005b78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	f043 0302 	orr.w	r3, r3, #2
 8005b9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01c      	beq.n	8005bee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f7ff fdaf 	bl	8005718 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6859      	ldr	r1, [r3, #4]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <I2C_IsErrorOccurred+0x1bc>)
 8005bc6:	400b      	ands	r3, r1
 8005bc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005bee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3728      	adds	r7, #40	@ 0x28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	fe00e800 	.word	0xfe00e800

08005c00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	607b      	str	r3, [r7, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	817b      	strh	r3, [r7, #10]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c12:	897b      	ldrh	r3, [r7, #10]
 8005c14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c18:	7a7b      	ldrb	r3, [r7, #9]
 8005c1a:	041b      	lsls	r3, r3, #16
 8005c1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c20:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c2e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	0d5b      	lsrs	r3, r3, #21
 8005c3a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c3e:	4b08      	ldr	r3, [pc, #32]	@ (8005c60 <I2C_TransferConfig+0x60>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	43db      	mvns	r3, r3
 8005c44:	ea02 0103 	and.w	r1, r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	03ff63ff 	.word	0x03ff63ff

08005c64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d138      	bne.n	8005cec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e032      	b.n	8005cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2224      	movs	r2, #36	@ 0x24
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6819      	ldr	r1, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e000      	b.n	8005cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005cec:	2302      	movs	r3, #2
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d139      	bne.n	8005d84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e033      	b.n	8005d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2224      	movs	r2, #36	@ 0x24
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0201 	bic.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d84:	2302      	movs	r3, #2
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b086      	sub	sp, #24
 8005d96:	af02      	add	r7, sp, #8
 8005d98:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0fe      	b.n	8005fa2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d106      	bne.n	8005dbe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f009 f9e9 	bl	800f190 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f005 fe0f 	bl	800b9ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	7c1a      	ldrb	r2, [r3, #16]
 8005dd8:	f88d 2000 	strb.w	r2, [sp]
 8005ddc:	3304      	adds	r3, #4
 8005dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005de0:	f005 fce0 	bl	800b7a4 <USB_CoreInit>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2202      	movs	r2, #2
 8005dee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e0d5      	b.n	8005fa2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f005 fe07 	bl	800ba10 <USB_SetCurrentMode>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0c6      	b.n	8005fa2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	73fb      	strb	r3, [r7, #15]
 8005e18:	e04a      	b.n	8005eb0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e1a:	7bfa      	ldrb	r2, [r7, #15]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	3315      	adds	r3, #21
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e2e:	7bfa      	ldrb	r2, [r7, #15]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	7bfa      	ldrb	r2, [r7, #15]
 8005e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e42:	7bfa      	ldrb	r2, [r7, #15]
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	b298      	uxth	r0, r3
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	332e      	adds	r3, #46	@ 0x2e
 8005e56:	4602      	mov	r2, r0
 8005e58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	3318      	adds	r3, #24
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e6e:	7bfa      	ldrb	r2, [r7, #15]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	331c      	adds	r3, #28
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e82:	7bfa      	ldrb	r2, [r7, #15]
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	3320      	adds	r3, #32
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e96:	7bfa      	ldrb	r2, [r7, #15]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3324      	adds	r3, #36	@ 0x24
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	3301      	adds	r3, #1
 8005eae:	73fb      	strb	r3, [r7, #15]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	791b      	ldrb	r3, [r3, #4]
 8005eb4:	7bfa      	ldrb	r2, [r7, #15]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d3af      	bcc.n	8005e1a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	e044      	b.n	8005f4a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ed6:	7bfa      	ldrb	r2, [r7, #15]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005ee8:	7bfa      	ldrb	r2, [r7, #15]
 8005eea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005eec:	7bfa      	ldrb	r2, [r7, #15]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005efe:	2200      	movs	r2, #0
 8005f00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f02:	7bfa      	ldrb	r2, [r7, #15]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f18:	7bfa      	ldrb	r2, [r7, #15]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f2e:	7bfa      	ldrb	r2, [r7, #15]
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	4613      	mov	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	3301      	adds	r3, #1
 8005f48:	73fb      	strb	r3, [r7, #15]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	791b      	ldrb	r3, [r3, #4]
 8005f4e:	7bfa      	ldrb	r2, [r7, #15]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d3b5      	bcc.n	8005ec0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	7c1a      	ldrb	r2, [r3, #16]
 8005f5c:	f88d 2000 	strb.w	r2, [sp]
 8005f60:	3304      	adds	r3, #4
 8005f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f64:	f005 fda0 	bl	800baa8 <USB_DevInit>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e013      	b.n	8005fa2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	7b1b      	ldrb	r3, [r3, #12]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d102      	bne.n	8005f96 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 f96f 	bl	8007274 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f006 fde3 	bl	800cb66 <USB_DevDisconnect>

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_PCD_Start+0x1c>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e022      	b.n	800600c <HAL_PCD_Start+0x62>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d105      	bne.n	8005fee <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f005 fcea 	bl	800b9cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f006 fd91 	bl	800cb24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b08d      	sub	sp, #52	@ 0x34
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f006 fe4f 	bl	800ccce <USB_GetMode>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 84b9 	bne.w	80069aa <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f006 fdb3 	bl	800cba8 <USB_ReadInterrupts>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 84af 	beq.w	80069a8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	0a1b      	lsrs	r3, r3, #8
 8006054:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f006 fda0 	bl	800cba8 <USB_ReadInterrupts>
 8006068:	4603      	mov	r3, r0
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b02      	cmp	r3, #2
 8006070:	d107      	bne.n	8006082 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f002 0202 	and.w	r2, r2, #2
 8006080:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f006 fd8e 	bl	800cba8 <USB_ReadInterrupts>
 800608c:	4603      	mov	r3, r0
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2b10      	cmp	r3, #16
 8006094:	d161      	bne.n	800615a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0210 	bic.w	r2, r2, #16
 80060a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	f003 020f 	and.w	r2, r3, #15
 80060b2:	4613      	mov	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	4413      	add	r3, r2
 80060c2:	3304      	adds	r3, #4
 80060c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80060cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060d0:	d124      	bne.n	800611c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80060d8:	4013      	ands	r3, r2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d035      	beq.n	800614a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	6a38      	ldr	r0, [r7, #32]
 80060f2:	f006 fbc5 	bl	800c880 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006102:	441a      	add	r2, r3
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	695a      	ldr	r2, [r3, #20]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	091b      	lsrs	r3, r3, #4
 8006110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006114:	441a      	add	r2, r3
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	615a      	str	r2, [r3, #20]
 800611a:	e016      	b.n	800614a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006122:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006126:	d110      	bne.n	800614a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800612e:	2208      	movs	r2, #8
 8006130:	4619      	mov	r1, r3
 8006132:	6a38      	ldr	r0, [r7, #32]
 8006134:	f006 fba4 	bl	800c880 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	695a      	ldr	r2, [r3, #20]
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	091b      	lsrs	r3, r3, #4
 8006140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006144:	441a      	add	r2, r3
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0210 	orr.w	r2, r2, #16
 8006158:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f006 fd22 	bl	800cba8 <USB_ReadInterrupts>
 8006164:	4603      	mov	r3, r0
 8006166:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800616a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800616e:	f040 80a7 	bne.w	80062c0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f006 fd27 	bl	800cbce <USB_ReadDevAllOutEpInterrupt>
 8006180:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006182:	e099      	b.n	80062b8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 808e 	beq.w	80062ac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	4611      	mov	r1, r2
 800619a:	4618      	mov	r0, r3
 800619c:	f006 fd4b 	bl	800cc36 <USB_ReadDevOutEPInterrupt>
 80061a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00c      	beq.n	80061c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b8:	461a      	mov	r2, r3
 80061ba:	2301      	movs	r3, #1
 80061bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80061be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fed1 	bl	8006f68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00c      	beq.n	80061ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061dc:	461a      	mov	r2, r3
 80061de:	2308      	movs	r3, #8
 80061e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80061e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 ffa7 	bl	8007138 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006200:	461a      	mov	r2, r3
 8006202:	2310      	movs	r3, #16
 8006204:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d030      	beq.n	8006272 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006218:	2b80      	cmp	r3, #128	@ 0x80
 800621a:	d109      	bne.n	8006230 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800622a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800622e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006232:	4613      	mov	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	4413      	add	r3, r2
 8006242:	3304      	adds	r3, #4
 8006244:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	78db      	ldrb	r3, [r3, #3]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d108      	bne.n	8006260 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	b2db      	uxtb	r3, r3
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f009 f8ec 	bl	800f438 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626c:	461a      	mov	r2, r3
 800626e:	2302      	movs	r3, #2
 8006270:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006288:	461a      	mov	r2, r3
 800628a:	2320      	movs	r3, #32
 800628c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a4:	461a      	mov	r2, r3
 80062a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80062aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	3301      	adds	r3, #1
 80062b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80062b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80062b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f47f af62 	bne.w	8006184 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f006 fc6f 	bl	800cba8 <USB_ReadInterrupts>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062d4:	f040 80db 	bne.w	800648e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4618      	mov	r0, r3
 80062de:	f006 fc90 	bl	800cc02 <USB_ReadDevAllInEpInterrupt>
 80062e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80062e8:	e0cd      	b.n	8006486 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80c2 	beq.w	800647a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	4611      	mov	r1, r2
 8006300:	4618      	mov	r0, r3
 8006302:	f006 fcb6 	bl	800cc72 <USB_ReadDevInEPInterrupt>
 8006306:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d057      	beq.n	80063c2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	f003 030f 	and.w	r3, r3, #15
 8006318:	2201      	movs	r2, #1
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	43db      	mvns	r3, r3
 800632c:	69f9      	ldr	r1, [r7, #28]
 800632e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006332:	4013      	ands	r3, r2
 8006334:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006342:	461a      	mov	r2, r3
 8006344:	2301      	movs	r3, #1
 8006346:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	799b      	ldrb	r3, [r3, #6]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d132      	bne.n	80063b6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	3320      	adds	r3, #32
 8006360:	6819      	ldr	r1, [r3, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006366:	4613      	mov	r3, r2
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4403      	add	r3, r0
 8006370:	331c      	adds	r3, #28
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4419      	add	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637a:	4613      	mov	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4403      	add	r3, r0
 8006384:	3320      	adds	r3, #32
 8006386:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	2b00      	cmp	r3, #0
 800638c:	d113      	bne.n	80063b6 <HAL_PCD_IRQHandler+0x3a2>
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006392:	4613      	mov	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	3324      	adds	r3, #36	@ 0x24
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80063ae:	461a      	mov	r2, r3
 80063b0:	2101      	movs	r1, #1
 80063b2:	f006 fcbf 	bl	800cd34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f008 ffb6 	bl	800f32e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f003 0308 	and.w	r3, r3, #8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d8:	461a      	mov	r2, r3
 80063da:	2308      	movs	r3, #8
 80063dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d008      	beq.n	80063fa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f4:	461a      	mov	r2, r3
 80063f6:	2310      	movs	r3, #16
 80063f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006410:	461a      	mov	r2, r3
 8006412:	2340      	movs	r3, #64	@ 0x40
 8006414:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d023      	beq.n	8006468 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006422:	6a38      	ldr	r0, [r7, #32]
 8006424:	f005 fc9e 	bl	800bd64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	3310      	adds	r3, #16
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	4413      	add	r3, r2
 8006438:	3304      	adds	r3, #4
 800643a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	78db      	ldrb	r3, [r3, #3]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d108      	bne.n	8006456 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2200      	movs	r2, #0
 8006448:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f009 f803 	bl	800f45c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006462:	461a      	mov	r2, r3
 8006464:	2302      	movs	r3, #2
 8006466:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006472:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fcea 	bl	8006e4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	3301      	adds	r3, #1
 800647e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	2b00      	cmp	r3, #0
 800648a:	f47f af2e 	bne.w	80062ea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f006 fb88 	bl	800cba8 <USB_ReadInterrupts>
 8006498:	4603      	mov	r3, r0
 800649a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800649e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064a2:	d122      	bne.n	80064ea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d108      	bne.n	80064d4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80064ca:	2100      	movs	r1, #0
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fef5 	bl	80072bc <HAL_PCDEx_LPM_Callback>
 80064d2:	e002      	b.n	80064da <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f008 ffa1 	bl	800f41c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80064e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f006 fb5a 	bl	800cba8 <USB_ReadInterrupts>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064fe:	d112      	bne.n	8006526 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b01      	cmp	r3, #1
 800650e:	d102      	bne.n	8006516 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f008 ff5d 	bl	800f3d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695a      	ldr	r2, [r3, #20]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006524:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f006 fb3c 	bl	800cba8 <USB_ReadInterrupts>
 8006530:	4603      	mov	r3, r0
 8006532:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006536:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800653a:	d121      	bne.n	8006580 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695a      	ldr	r2, [r3, #20]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800654a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006552:	2b00      	cmp	r3, #0
 8006554:	d111      	bne.n	800657a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006564:	089b      	lsrs	r3, r3, #2
 8006566:	f003 020f 	and.w	r2, r3, #15
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006570:	2101      	movs	r1, #1
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fea2 	bl	80072bc <HAL_PCDEx_LPM_Callback>
 8006578:	e002      	b.n	8006580 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f008 ff28 	bl	800f3d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f006 fb0f 	bl	800cba8 <USB_ReadInterrupts>
 800658a:	4603      	mov	r3, r0
 800658c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006594:	f040 80b7 	bne.w	8006706 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065a6:	f023 0301 	bic.w	r3, r3, #1
 80065aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2110      	movs	r1, #16
 80065b2:	4618      	mov	r0, r3
 80065b4:	f005 fbd6 	bl	800bd64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065b8:	2300      	movs	r3, #0
 80065ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065bc:	e046      	b.n	800664c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80065be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ca:	461a      	mov	r2, r3
 80065cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80065f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fe:	461a      	mov	r2, r3
 8006600:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006604:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006620:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006624:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006636:	0151      	lsls	r1, r2, #5
 8006638:	69fa      	ldr	r2, [r7, #28]
 800663a:	440a      	add	r2, r1
 800663c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006640:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006644:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	3301      	adds	r3, #1
 800664a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	791b      	ldrb	r3, [r3, #4]
 8006650:	461a      	mov	r2, r3
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	4293      	cmp	r3, r2
 8006656:	d3b2      	bcc.n	80065be <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006666:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800666a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7bdb      	ldrb	r3, [r3, #15]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d016      	beq.n	80066a2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800667a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006684:	f043 030b 	orr.w	r3, r3, #11
 8006688:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800669a:	f043 030b 	orr.w	r3, r3, #11
 800669e:	6453      	str	r3, [r2, #68]	@ 0x44
 80066a0:	e015      	b.n	80066ce <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a8:	695a      	ldr	r2, [r3, #20]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b0:	4619      	mov	r1, r3
 80066b2:	f242 032b 	movw	r3, #8235	@ 0x202b
 80066b6:	4313      	orrs	r3, r2
 80066b8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066c8:	f043 030b 	orr.w	r3, r3, #11
 80066cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066dc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80066e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80066f0:	461a      	mov	r2, r3
 80066f2:	f006 fb1f 	bl	800cd34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695a      	ldr	r2, [r3, #20]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006704:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f006 fa4c 	bl	800cba8 <USB_ReadInterrupts>
 8006710:	4603      	mov	r3, r0
 8006712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800671a:	d123      	bne.n	8006764 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4618      	mov	r0, r3
 8006722:	f006 fae3 	bl	800ccec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f005 fb93 	bl	800be56 <USB_GetDevSpeed>
 8006730:	4603      	mov	r3, r0
 8006732:	461a      	mov	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681c      	ldr	r4, [r3, #0]
 800673c:	f001 fde0 	bl	8008300 <HAL_RCC_GetHCLKFreq>
 8006740:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006746:	461a      	mov	r2, r3
 8006748:	4620      	mov	r0, r4
 800674a:	f005 f89d 	bl	800b888 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f008 fe15 	bl	800f37e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006762:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f006 fa1d 	bl	800cba8 <USB_ReadInterrupts>
 800676e:	4603      	mov	r3, r0
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b08      	cmp	r3, #8
 8006776:	d10a      	bne.n	800678e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f008 fdf2 	bl	800f362 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695a      	ldr	r2, [r3, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f002 0208 	and.w	r2, r2, #8
 800678c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f006 fa08 	bl	800cba8 <USB_ReadInterrupts>
 8006798:	4603      	mov	r3, r0
 800679a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679e:	2b80      	cmp	r3, #128	@ 0x80
 80067a0:	d123      	bne.n	80067ea <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067ae:	2301      	movs	r3, #1
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b2:	e014      	b.n	80067de <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b8:	4613      	mov	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d105      	bne.n	80067d8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80067cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fb0a 	bl	8006dec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	3301      	adds	r3, #1
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	791b      	ldrb	r3, [r3, #4]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d3e4      	bcc.n	80067b4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f006 f9da 	bl	800cba8 <USB_ReadInterrupts>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067fe:	d13c      	bne.n	800687a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006800:	2301      	movs	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24
 8006804:	e02b      	b.n	800685e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681a:	4613      	mov	r3, r2
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	3318      	adds	r3, #24
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d115      	bne.n	8006858 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800682c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800682e:	2b00      	cmp	r3, #0
 8006830:	da12      	bge.n	8006858 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006836:	4613      	mov	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	3317      	adds	r3, #23
 8006842:	2201      	movs	r2, #1
 8006844:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	b2db      	uxtb	r3, r3
 800684a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800684e:	b2db      	uxtb	r3, r3
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 faca 	bl	8006dec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	3301      	adds	r3, #1
 800685c:	627b      	str	r3, [r7, #36]	@ 0x24
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	791b      	ldrb	r3, [r3, #4]
 8006862:	461a      	mov	r2, r3
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	4293      	cmp	r3, r2
 8006868:	d3cd      	bcc.n	8006806 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695a      	ldr	r2, [r3, #20]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f006 f992 	bl	800cba8 <USB_ReadInterrupts>
 8006884:	4603      	mov	r3, r0
 8006886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800688a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800688e:	d156      	bne.n	800693e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006890:	2301      	movs	r3, #1
 8006892:	627b      	str	r3, [r7, #36]	@ 0x24
 8006894:	e045      	b.n	8006922 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068aa:	4613      	mov	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d12e      	bne.n	800691c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80068be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	da2b      	bge.n	800691c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	0c1a      	lsrs	r2, r3, #16
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80068ce:	4053      	eors	r3, r2
 80068d0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d121      	bne.n	800691c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068dc:	4613      	mov	r3, r2
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10a      	bne.n	800691c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006914:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006918:	6053      	str	r3, [r2, #4]
            break;
 800691a:	e008      	b.n	800692e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	3301      	adds	r3, #1
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	791b      	ldrb	r3, [r3, #4]
 8006926:	461a      	mov	r2, r3
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	4293      	cmp	r3, r2
 800692c:	d3b3      	bcc.n	8006896 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695a      	ldr	r2, [r3, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800693c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f006 f930 	bl	800cba8 <USB_ReadInterrupts>
 8006948:	4603      	mov	r3, r0
 800694a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800694e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006952:	d10a      	bne.n	800696a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f008 fd93 	bl	800f480 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695a      	ldr	r2, [r3, #20]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f006 f91a 	bl	800cba8 <USB_ReadInterrupts>
 8006974:	4603      	mov	r3, r0
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b04      	cmp	r3, #4
 800697c:	d115      	bne.n	80069aa <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f008 fd83 	bl	800f49c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6859      	ldr	r1, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
 80069a6:	e000      	b.n	80069aa <HAL_PCD_IRQHandler+0x996>
      return;
 80069a8:	bf00      	nop
    }
  }
}
 80069aa:	3734      	adds	r7, #52	@ 0x34
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd90      	pop	{r4, r7, pc}

080069b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_PCD_SetAddress+0x1a>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e012      	b.n	80069f0 <HAL_PCD_SetAddress+0x40>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	78fa      	ldrb	r2, [r7, #3]
 80069d6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f006 f879 	bl	800cad8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	4608      	mov	r0, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	461a      	mov	r2, r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	70fb      	strb	r3, [r7, #3]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	803b      	strh	r3, [r7, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da0f      	bge.n	8006a3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	f003 020f 	and.w	r2, r3, #15
 8006a24:	4613      	mov	r3, r2
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	3310      	adds	r3, #16
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4413      	add	r3, r2
 8006a32:	3304      	adds	r3, #4
 8006a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	705a      	strb	r2, [r3, #1]
 8006a3c:	e00f      	b.n	8006a5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	f003 020f 	and.w	r2, r3, #15
 8006a44:	4613      	mov	r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	4413      	add	r3, r2
 8006a54:	3304      	adds	r3, #4
 8006a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006a6a:	883b      	ldrh	r3, [r7, #0]
 8006a6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	78ba      	ldrb	r2, [r7, #2]
 8006a78:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a8c:	78bb      	ldrb	r3, [r7, #2]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d102      	bne.n	8006a98 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_PCD_EP_Open+0xae>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e00e      	b.n	8006ac4 <HAL_PCD_EP_Open+0xcc>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68f9      	ldr	r1, [r7, #12]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f005 f9f3 	bl	800bea0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	da0f      	bge.n	8006b00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	3310      	adds	r3, #16
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	3304      	adds	r3, #4
 8006af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	705a      	strb	r2, [r3, #1]
 8006afe:	e00f      	b.n	8006b20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	f003 020f 	and.w	r2, r3, #15
 8006b06:	4613      	mov	r3, r2
 8006b08:	00db      	lsls	r3, r3, #3
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	4413      	add	r3, r2
 8006b16:	3304      	adds	r3, #4
 8006b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_PCD_EP_Close+0x6e>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e00e      	b.n	8006b58 <HAL_PCD_EP_Close+0x8c>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68f9      	ldr	r1, [r7, #12]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f005 fa31 	bl	800bfb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	607a      	str	r2, [r7, #4]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b70:	7afb      	ldrb	r3, [r7, #11]
 8006b72:	f003 020f 	and.w	r2, r3, #15
 8006b76:	4613      	mov	r3, r2
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	3304      	adds	r3, #4
 8006b88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	799b      	ldrb	r3, [r3, #6]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d102      	bne.n	8006bbc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	799b      	ldrb	r3, [r3, #6]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6979      	ldr	r1, [r7, #20]
 8006bc8:	f005 face 	bl	800c168 <USB_EPStartXfer>

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	f003 020f 	and.w	r2, r3, #15
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006bf8:	681b      	ldr	r3, [r3, #0]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b086      	sub	sp, #24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
 8006c12:	460b      	mov	r3, r1
 8006c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	f003 020f 	and.w	r2, r3, #15
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	3310      	adds	r3, #16
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2201      	movs	r2, #1
 8006c44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	799b      	ldrb	r3, [r3, #6]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d102      	bne.n	8006c60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	799b      	ldrb	r3, [r3, #6]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6979      	ldr	r1, [r7, #20]
 8006c6c:	f005 fa7c 	bl	800c168 <USB_EPStartXfer>

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	7912      	ldrb	r2, [r2, #4]
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d901      	bls.n	8006c98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e04f      	b.n	8006d38 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	da0f      	bge.n	8006cc0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	f003 020f 	and.w	r2, r3, #15
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	3310      	adds	r3, #16
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	705a      	strb	r2, [r3, #1]
 8006cbe:	e00d      	b.n	8006cdc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cc0:	78fa      	ldrb	r2, [r7, #3]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_PCD_EP_SetStall+0x82>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e01d      	b.n	8006d38 <HAL_PCD_EP_SetStall+0xbe>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68f9      	ldr	r1, [r7, #12]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f005 fe10 	bl	800c930 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d109      	bne.n	8006d2e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	7999      	ldrb	r1, [r3, #6]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f006 f803 	bl	800cd34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	7912      	ldrb	r2, [r2, #4]
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d901      	bls.n	8006d5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e042      	b.n	8006de4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	da0f      	bge.n	8006d86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d66:	78fb      	ldrb	r3, [r7, #3]
 8006d68:	f003 020f 	and.w	r2, r3, #15
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	3310      	adds	r3, #16
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	705a      	strb	r2, [r3, #1]
 8006d84:	e00f      	b.n	8006da6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	f003 020f 	and.w	r2, r3, #15
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dac:	78fb      	ldrb	r3, [r7, #3]
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_PCD_EP_ClrStall+0x86>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e00e      	b.n	8006de4 <HAL_PCD_EP_ClrStall+0xa4>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68f9      	ldr	r1, [r7, #12]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f005 fe19 	bl	800ca0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da0c      	bge.n	8006e1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	f003 020f 	and.w	r2, r3, #15
 8006e06:	4613      	mov	r3, r2
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	3310      	adds	r3, #16
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	4413      	add	r3, r2
 8006e14:	3304      	adds	r3, #4
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e00c      	b.n	8006e34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	f003 020f 	and.w	r2, r3, #15
 8006e20:	4613      	mov	r3, r2
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	4413      	add	r3, r2
 8006e30:	3304      	adds	r3, #4
 8006e32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68f9      	ldr	r1, [r7, #12]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f005 fc38 	bl	800c6b0 <USB_EPStopXfer>
 8006e40:	4603      	mov	r3, r0
 8006e42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006e44:	7afb      	ldrb	r3, [r7, #11]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b08a      	sub	sp, #40	@ 0x28
 8006e52:	af02      	add	r7, sp, #8
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	4613      	mov	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	3310      	adds	r3, #16
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	3304      	adds	r3, #4
 8006e74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d901      	bls.n	8006e86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e06b      	b.n	8006f5e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	69fa      	ldr	r2, [r7, #28]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d902      	bls.n	8006ea2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	3303      	adds	r3, #3
 8006ea6:	089b      	lsrs	r3, r3, #2
 8006ea8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006eaa:	e02a      	b.n	8006f02 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d902      	bls.n	8006ec8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	3303      	adds	r3, #3
 8006ecc:	089b      	lsrs	r3, r3, #2
 8006ece:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	68d9      	ldr	r1, [r3, #12]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	6978      	ldr	r0, [r7, #20]
 8006ee6:	f005 fc8d 	bl	800c804 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	695a      	ldr	r2, [r3, #20]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	441a      	add	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d809      	bhi.n	8006f2c <PCD_WriteEmptyTxFifo+0xde>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	695a      	ldr	r2, [r3, #20]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d203      	bcs.n	8006f2c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1bf      	bne.n	8006eac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d811      	bhi.n	8006f5c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	2201      	movs	r2, #1
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	43db      	mvns	r3, r3
 8006f52:	6939      	ldr	r1, [r7, #16]
 8006f54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f58:	4013      	ands	r3, r2
 8006f5a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	333c      	adds	r3, #60	@ 0x3c
 8006f80:	3304      	adds	r3, #4
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	799b      	ldrb	r3, [r3, #6]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d17b      	bne.n	8007096 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d015      	beq.n	8006fd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	4a61      	ldr	r2, [pc, #388]	@ (8007130 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	f240 80b9 	bls.w	8007124 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 80b3 	beq.w	8007124 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fd0:	6093      	str	r3, [r2, #8]
 8006fd2:	e0a7      	b.n	8007124 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d009      	beq.n	8006ff2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fea:	461a      	mov	r2, r3
 8006fec:	2320      	movs	r3, #32
 8006fee:	6093      	str	r3, [r2, #8]
 8006ff0:	e098      	b.n	8007124 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 8093 	bne.w	8007124 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4a4b      	ldr	r2, [pc, #300]	@ (8007130 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d90f      	bls.n	8007026 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701c:	461a      	mov	r2, r3
 800701e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007022:	6093      	str	r3, [r2, #8]
 8007024:	e07e      	b.n	8007124 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	4613      	mov	r3, r2
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	4413      	add	r3, r2
 8007038:	3304      	adds	r3, #4
 800703a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a1a      	ldr	r2, [r3, #32]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	0159      	lsls	r1, r3, #5
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	440b      	add	r3, r1
 8007048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007052:	1ad2      	subs	r2, r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d114      	bne.n	8007088 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007070:	461a      	mov	r2, r3
 8007072:	2101      	movs	r1, #1
 8007074:	f005 fe5e 	bl	800cd34 <USB_EP0_OutStart>
 8007078:	e006      	b.n	8007088 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	441a      	add	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f008 f932 	bl	800f2f8 <HAL_PCD_DataOutStageCallback>
 8007094:	e046      	b.n	8007124 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	4a26      	ldr	r2, [pc, #152]	@ (8007134 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d124      	bne.n	80070e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b4:	461a      	mov	r2, r3
 80070b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ba:	6093      	str	r3, [r2, #8]
 80070bc:	e032      	b.n	8007124 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070d4:	461a      	mov	r2, r3
 80070d6:	2320      	movs	r3, #32
 80070d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f008 f909 	bl	800f2f8 <HAL_PCD_DataOutStageCallback>
 80070e6:	e01d      	b.n	8007124 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d114      	bne.n	8007118 <PCD_EP_OutXfrComplete_int+0x1b0>
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	4613      	mov	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d108      	bne.n	8007118 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007110:	461a      	mov	r2, r3
 8007112:	2100      	movs	r1, #0
 8007114:	f005 fe0e 	bl	800cd34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f008 f8ea 	bl	800f2f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3720      	adds	r7, #32
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	4f54300a 	.word	0x4f54300a
 8007134:	4f54310a 	.word	0x4f54310a

08007138 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	333c      	adds	r3, #60	@ 0x3c
 8007150:	3304      	adds	r3, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4a15      	ldr	r2, [pc, #84]	@ (80071c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d90e      	bls.n	800718c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007174:	2b00      	cmp	r3, #0
 8007176:	d009      	beq.n	800718c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007184:	461a      	mov	r2, r3
 8007186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800718a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f008 f8a1 	bl	800f2d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4a0a      	ldr	r2, [pc, #40]	@ (80071c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d90c      	bls.n	80071b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	799b      	ldrb	r3, [r3, #6]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d108      	bne.n	80071b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071ac:	461a      	mov	r2, r3
 80071ae:	2101      	movs	r1, #1
 80071b0:	f005 fdc0 	bl	800cd34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	4f54300a 	.word	0x4f54300a

080071c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	70fb      	strb	r3, [r7, #3]
 80071d0:	4613      	mov	r3, r2
 80071d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d107      	bne.n	80071f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80071e2:	883b      	ldrh	r3, [r7, #0]
 80071e4:	0419      	lsls	r1, r3, #16
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80071f0:	e028      	b.n	8007244 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	4413      	add	r3, r2
 80071fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
 8007204:	e00d      	b.n	8007222 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	3340      	adds	r3, #64	@ 0x40
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	4413      	add	r3, r2
 800721a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	3301      	adds	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
 8007222:	7bfa      	ldrb	r2, [r7, #15]
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	3b01      	subs	r3, #1
 8007228:	429a      	cmp	r2, r3
 800722a:	d3ec      	bcc.n	8007206 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800722c:	883b      	ldrh	r3, [r7, #0]
 800722e:	0418      	lsls	r0, r3, #16
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	3b01      	subs	r3, #1
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	4302      	orrs	r2, r0
 800723c:	3340      	adds	r3, #64	@ 0x40
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	887a      	ldrh	r2, [r7, #2]
 8007264:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072a2:	4b05      	ldr	r3, [pc, #20]	@ (80072b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	10000003 	.word	0x10000003

080072bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80072dc:	4b19      	ldr	r3, [pc, #100]	@ (8007344 <HAL_PWREx_ConfigSupply+0x70>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d00a      	beq.n	80072fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80072e8:	4b16      	ldr	r3, [pc, #88]	@ (8007344 <HAL_PWREx_ConfigSupply+0x70>)
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d001      	beq.n	80072fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e01f      	b.n	800733a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e01d      	b.n	800733a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80072fe:	4b11      	ldr	r3, [pc, #68]	@ (8007344 <HAL_PWREx_ConfigSupply+0x70>)
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f023 0207 	bic.w	r2, r3, #7
 8007306:	490f      	ldr	r1, [pc, #60]	@ (8007344 <HAL_PWREx_ConfigSupply+0x70>)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4313      	orrs	r3, r2
 800730c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800730e:	f7fa fa7d 	bl	800180c <HAL_GetTick>
 8007312:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007314:	e009      	b.n	800732a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007316:	f7fa fa79 	bl	800180c <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007324:	d901      	bls.n	800732a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e007      	b.n	800733a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800732a:	4b06      	ldr	r3, [pc, #24]	@ (8007344 <HAL_PWREx_ConfigSupply+0x70>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007336:	d1ee      	bne.n	8007316 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	58024800 	.word	0x58024800

08007348 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800734c:	4b05      	ldr	r3, [pc, #20]	@ (8007364 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	4a04      	ldr	r2, [pc, #16]	@ (8007364 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007356:	60d3      	str	r3, [r2, #12]
}
 8007358:	bf00      	nop
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	58024800 	.word	0x58024800

08007368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08c      	sub	sp, #48	@ 0x30
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d102      	bne.n	800737c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f000 bc1f 	b.w	8007bba <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 80b3 	beq.w	80074f0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800738a:	4b95      	ldr	r3, [pc, #596]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007394:	4b92      	ldr	r3, [pc, #584]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007398:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800739a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739c:	2b10      	cmp	r3, #16
 800739e:	d007      	beq.n	80073b0 <HAL_RCC_OscConfig+0x48>
 80073a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a2:	2b18      	cmp	r3, #24
 80073a4:	d112      	bne.n	80073cc <HAL_RCC_OscConfig+0x64>
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d10d      	bne.n	80073cc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b0:	4b8b      	ldr	r3, [pc, #556]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8098 	beq.w	80074ee <HAL_RCC_OscConfig+0x186>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f040 8093 	bne.w	80074ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e3f6      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073d4:	d106      	bne.n	80073e4 <HAL_RCC_OscConfig+0x7c>
 80073d6:	4b82      	ldr	r3, [pc, #520]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a81      	ldr	r2, [pc, #516]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80073dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	e058      	b.n	8007496 <HAL_RCC_OscConfig+0x12e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d112      	bne.n	8007412 <HAL_RCC_OscConfig+0xaa>
 80073ec:	4b7c      	ldr	r3, [pc, #496]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a7b      	ldr	r2, [pc, #492]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80073f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	4b79      	ldr	r3, [pc, #484]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a78      	ldr	r2, [pc, #480]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80073fe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	4b76      	ldr	r3, [pc, #472]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a75      	ldr	r2, [pc, #468]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800740a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	e041      	b.n	8007496 <HAL_RCC_OscConfig+0x12e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800741a:	d112      	bne.n	8007442 <HAL_RCC_OscConfig+0xda>
 800741c:	4b70      	ldr	r3, [pc, #448]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a6f      	ldr	r2, [pc, #444]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007422:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	4b6d      	ldr	r3, [pc, #436]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a6c      	ldr	r2, [pc, #432]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800742e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	4b6a      	ldr	r3, [pc, #424]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a69      	ldr	r2, [pc, #420]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800743a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	e029      	b.n	8007496 <HAL_RCC_OscConfig+0x12e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800744a:	d112      	bne.n	8007472 <HAL_RCC_OscConfig+0x10a>
 800744c:	4b64      	ldr	r3, [pc, #400]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a63      	ldr	r2, [pc, #396]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007452:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	4b61      	ldr	r3, [pc, #388]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a60      	ldr	r2, [pc, #384]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800745e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	4b5e      	ldr	r3, [pc, #376]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a5d      	ldr	r2, [pc, #372]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800746a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	e011      	b.n	8007496 <HAL_RCC_OscConfig+0x12e>
 8007472:	4b5b      	ldr	r3, [pc, #364]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a5a      	ldr	r2, [pc, #360]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	4b58      	ldr	r3, [pc, #352]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a57      	ldr	r2, [pc, #348]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007484:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	4b55      	ldr	r3, [pc, #340]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a54      	ldr	r2, [pc, #336]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007490:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007494:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d013      	beq.n	80074c6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749e:	f7fa f9b5 	bl	800180c <HAL_GetTick>
 80074a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074a4:	e008      	b.n	80074b8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074a6:	f7fa f9b1 	bl	800180c <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b64      	cmp	r3, #100	@ 0x64
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e380      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074b8:	4b49      	ldr	r3, [pc, #292]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0f0      	beq.n	80074a6 <HAL_RCC_OscConfig+0x13e>
 80074c4:	e014      	b.n	80074f0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c6:	f7fa f9a1 	bl	800180c <HAL_GetTick>
 80074ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074ce:	f7fa f99d 	bl	800180c <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b64      	cmp	r3, #100	@ 0x64
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e36c      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074e0:	4b3f      	ldr	r3, [pc, #252]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f0      	bne.n	80074ce <HAL_RCC_OscConfig+0x166>
 80074ec:	e000      	b.n	80074f0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 808c 	beq.w	8007616 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074fe:	4b38      	ldr	r3, [pc, #224]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007506:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007508:	4b35      	ldr	r3, [pc, #212]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <HAL_RCC_OscConfig+0x1bc>
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	2b18      	cmp	r3, #24
 8007518:	d137      	bne.n	800758a <HAL_RCC_OscConfig+0x222>
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d132      	bne.n	800758a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007524:	4b2e      	ldr	r3, [pc, #184]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_RCC_OscConfig+0x1d4>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e33e      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800753c:	4b28      	ldr	r3, [pc, #160]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f023 0219 	bic.w	r2, r3, #25
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4925      	ldr	r1, [pc, #148]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800754a:	4313      	orrs	r3, r2
 800754c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800754e:	f7fa f95d 	bl	800180c <HAL_GetTick>
 8007552:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007554:	e008      	b.n	8007568 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007556:	f7fa f959 	bl	800180c <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d901      	bls.n	8007568 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e328      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007568:	4b1d      	ldr	r3, [pc, #116]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0f0      	beq.n	8007556 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007574:	4b1a      	ldr	r3, [pc, #104]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	061b      	lsls	r3, r3, #24
 8007582:	4917      	ldr	r1, [pc, #92]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007584:	4313      	orrs	r3, r2
 8007586:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007588:	e045      	b.n	8007616 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d028      	beq.n	80075e4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007592:	4b13      	ldr	r3, [pc, #76]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f023 0219 	bic.w	r2, r3, #25
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	4910      	ldr	r1, [pc, #64]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a4:	f7fa f932 	bl	800180c <HAL_GetTick>
 80075a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075ac:	f7fa f92e 	bl	800180c <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e2fd      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075be:	4b08      	ldr	r3, [pc, #32]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0304 	and.w	r3, r3, #4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0f0      	beq.n	80075ac <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ca:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	061b      	lsls	r3, r3, #24
 80075d8:	4901      	ldr	r1, [pc, #4]	@ (80075e0 <HAL_RCC_OscConfig+0x278>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	604b      	str	r3, [r1, #4]
 80075de:	e01a      	b.n	8007616 <HAL_RCC_OscConfig+0x2ae>
 80075e0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075e4:	4b97      	ldr	r3, [pc, #604]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a96      	ldr	r2, [pc, #600]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80075ea:	f023 0301 	bic.w	r3, r3, #1
 80075ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f0:	f7fa f90c 	bl	800180c <HAL_GetTick>
 80075f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075f8:	f7fa f908 	bl	800180c <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e2d7      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800760a:	4b8e      	ldr	r3, [pc, #568]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1f0      	bne.n	80075f8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	2b00      	cmp	r3, #0
 8007620:	d06a      	beq.n	80076f8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007622:	4b88      	ldr	r3, [pc, #544]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800762a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800762c:	4b85      	ldr	r3, [pc, #532]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 800762e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007630:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	2b08      	cmp	r3, #8
 8007636:	d007      	beq.n	8007648 <HAL_RCC_OscConfig+0x2e0>
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	2b18      	cmp	r3, #24
 800763c:	d11b      	bne.n	8007676 <HAL_RCC_OscConfig+0x30e>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f003 0303 	and.w	r3, r3, #3
 8007644:	2b01      	cmp	r3, #1
 8007646:	d116      	bne.n	8007676 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007648:	4b7e      	ldr	r3, [pc, #504]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_RCC_OscConfig+0x2f8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	2b80      	cmp	r3, #128	@ 0x80
 800765a:	d001      	beq.n	8007660 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e2ac      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007660:	4b78      	ldr	r3, [pc, #480]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	4975      	ldr	r1, [pc, #468]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007670:	4313      	orrs	r3, r2
 8007672:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007674:	e040      	b.n	80076f8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d023      	beq.n	80076c6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800767e:	4b71      	ldr	r3, [pc, #452]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a70      	ldr	r2, [pc, #448]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768a:	f7fa f8bf 	bl	800180c <HAL_GetTick>
 800768e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007690:	e008      	b.n	80076a4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007692:	f7fa f8bb 	bl	800180c <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e28a      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076a4:	4b67      	ldr	r3, [pc, #412]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0f0      	beq.n	8007692 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076b0:	4b64      	ldr	r3, [pc, #400]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	061b      	lsls	r3, r3, #24
 80076be:	4961      	ldr	r1, [pc, #388]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60cb      	str	r3, [r1, #12]
 80076c4:	e018      	b.n	80076f8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80076c6:	4b5f      	ldr	r3, [pc, #380]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a5e      	ldr	r2, [pc, #376]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80076cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d2:	f7fa f89b 	bl	800180c <HAL_GetTick>
 80076d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80076da:	f7fa f897 	bl	800180c <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e266      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80076ec:	4b55      	ldr	r3, [pc, #340]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f0      	bne.n	80076da <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d036      	beq.n	8007772 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d019      	beq.n	8007740 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800770c:	4b4d      	ldr	r3, [pc, #308]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 800770e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007710:	4a4c      	ldr	r2, [pc, #304]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007712:	f043 0301 	orr.w	r3, r3, #1
 8007716:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007718:	f7fa f878 	bl	800180c <HAL_GetTick>
 800771c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007720:	f7fa f874 	bl	800180c <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e243      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007732:	4b44      	ldr	r3, [pc, #272]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0f0      	beq.n	8007720 <HAL_RCC_OscConfig+0x3b8>
 800773e:	e018      	b.n	8007772 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007740:	4b40      	ldr	r3, [pc, #256]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007744:	4a3f      	ldr	r2, [pc, #252]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007746:	f023 0301 	bic.w	r3, r3, #1
 800774a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774c:	f7fa f85e 	bl	800180c <HAL_GetTick>
 8007750:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007752:	e008      	b.n	8007766 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007754:	f7fa f85a 	bl	800180c <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b02      	cmp	r3, #2
 8007760:	d901      	bls.n	8007766 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e229      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007766:	4b37      	ldr	r3, [pc, #220]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1f0      	bne.n	8007754 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b00      	cmp	r3, #0
 800777c:	d036      	beq.n	80077ec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d019      	beq.n	80077ba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007786:	4b2f      	ldr	r3, [pc, #188]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a2e      	ldr	r2, [pc, #184]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 800778c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007790:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007792:	f7fa f83b 	bl	800180c <HAL_GetTick>
 8007796:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007798:	e008      	b.n	80077ac <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800779a:	f7fa f837 	bl	800180c <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e206      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80077ac:	4b25      	ldr	r3, [pc, #148]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0f0      	beq.n	800779a <HAL_RCC_OscConfig+0x432>
 80077b8:	e018      	b.n	80077ec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077ba:	4b22      	ldr	r3, [pc, #136]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a21      	ldr	r2, [pc, #132]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80077c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80077c6:	f7fa f821 	bl	800180c <HAL_GetTick>
 80077ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80077cc:	e008      	b.n	80077e0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077ce:	f7fa f81d 	bl	800180c <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d901      	bls.n	80077e0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e1ec      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80077e0:	4b18      	ldr	r3, [pc, #96]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1f0      	bne.n	80077ce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0304 	and.w	r3, r3, #4
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80af 	beq.w	8007958 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077fa:	4b13      	ldr	r3, [pc, #76]	@ (8007848 <HAL_RCC_OscConfig+0x4e0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a12      	ldr	r2, [pc, #72]	@ (8007848 <HAL_RCC_OscConfig+0x4e0>)
 8007800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007804:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007806:	f7fa f801 	bl	800180c <HAL_GetTick>
 800780a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800780c:	e008      	b.n	8007820 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800780e:	f7f9 fffd 	bl	800180c <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b64      	cmp	r3, #100	@ 0x64
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e1cc      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007820:	4b09      	ldr	r3, [pc, #36]	@ (8007848 <HAL_RCC_OscConfig+0x4e0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0f0      	beq.n	800780e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d10b      	bne.n	800784c <HAL_RCC_OscConfig+0x4e4>
 8007834:	4b03      	ldr	r3, [pc, #12]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 8007836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007838:	4a02      	ldr	r2, [pc, #8]	@ (8007844 <HAL_RCC_OscConfig+0x4dc>)
 800783a:	f043 0301 	orr.w	r3, r3, #1
 800783e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007840:	e05b      	b.n	80078fa <HAL_RCC_OscConfig+0x592>
 8007842:	bf00      	nop
 8007844:	58024400 	.word	0x58024400
 8007848:	58024800 	.word	0x58024800
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d112      	bne.n	800787a <HAL_RCC_OscConfig+0x512>
 8007854:	4b9d      	ldr	r3, [pc, #628]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007858:	4a9c      	ldr	r2, [pc, #624]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 800785a:	f023 0301 	bic.w	r3, r3, #1
 800785e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007860:	4b9a      	ldr	r3, [pc, #616]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007864:	4a99      	ldr	r2, [pc, #612]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800786a:	6713      	str	r3, [r2, #112]	@ 0x70
 800786c:	4b97      	ldr	r3, [pc, #604]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 800786e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007870:	4a96      	ldr	r2, [pc, #600]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007872:	f023 0304 	bic.w	r3, r3, #4
 8007876:	6713      	str	r3, [r2, #112]	@ 0x70
 8007878:	e03f      	b.n	80078fa <HAL_RCC_OscConfig+0x592>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	2b05      	cmp	r3, #5
 8007880:	d112      	bne.n	80078a8 <HAL_RCC_OscConfig+0x540>
 8007882:	4b92      	ldr	r3, [pc, #584]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007886:	4a91      	ldr	r2, [pc, #580]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007888:	f043 0304 	orr.w	r3, r3, #4
 800788c:	6713      	str	r3, [r2, #112]	@ 0x70
 800788e:	4b8f      	ldr	r3, [pc, #572]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007892:	4a8e      	ldr	r2, [pc, #568]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007894:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007898:	6713      	str	r3, [r2, #112]	@ 0x70
 800789a:	4b8c      	ldr	r3, [pc, #560]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 800789c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800789e:	4a8b      	ldr	r2, [pc, #556]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078a0:	f043 0301 	orr.w	r3, r3, #1
 80078a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80078a6:	e028      	b.n	80078fa <HAL_RCC_OscConfig+0x592>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	2b85      	cmp	r3, #133	@ 0x85
 80078ae:	d112      	bne.n	80078d6 <HAL_RCC_OscConfig+0x56e>
 80078b0:	4b86      	ldr	r3, [pc, #536]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b4:	4a85      	ldr	r2, [pc, #532]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078b6:	f043 0304 	orr.w	r3, r3, #4
 80078ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80078bc:	4b83      	ldr	r3, [pc, #524]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c0:	4a82      	ldr	r2, [pc, #520]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80078c8:	4b80      	ldr	r3, [pc, #512]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078cc:	4a7f      	ldr	r2, [pc, #508]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078ce:	f043 0301 	orr.w	r3, r3, #1
 80078d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80078d4:	e011      	b.n	80078fa <HAL_RCC_OscConfig+0x592>
 80078d6:	4b7d      	ldr	r3, [pc, #500]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078da:	4a7c      	ldr	r2, [pc, #496]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078dc:	f023 0301 	bic.w	r3, r3, #1
 80078e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80078e2:	4b7a      	ldr	r3, [pc, #488]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e6:	4a79      	ldr	r2, [pc, #484]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078e8:	f023 0304 	bic.w	r3, r3, #4
 80078ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80078ee:	4b77      	ldr	r3, [pc, #476]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f2:	4a76      	ldr	r2, [pc, #472]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80078f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d015      	beq.n	800792e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007902:	f7f9 ff83 	bl	800180c <HAL_GetTick>
 8007906:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007908:	e00a      	b.n	8007920 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800790a:	f7f9 ff7f 	bl	800180c <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007918:	4293      	cmp	r3, r2
 800791a:	d901      	bls.n	8007920 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e14c      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007920:	4b6a      	ldr	r3, [pc, #424]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0ee      	beq.n	800790a <HAL_RCC_OscConfig+0x5a2>
 800792c:	e014      	b.n	8007958 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800792e:	f7f9 ff6d 	bl	800180c <HAL_GetTick>
 8007932:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007934:	e00a      	b.n	800794c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007936:	f7f9 ff69 	bl	800180c <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007944:	4293      	cmp	r3, r2
 8007946:	d901      	bls.n	800794c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e136      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800794c:	4b5f      	ldr	r3, [pc, #380]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1ee      	bne.n	8007936 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 812b 	beq.w	8007bb8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007962:	4b5a      	ldr	r3, [pc, #360]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800796a:	2b18      	cmp	r3, #24
 800796c:	f000 80bb 	beq.w	8007ae6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007974:	2b02      	cmp	r3, #2
 8007976:	f040 8095 	bne.w	8007aa4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800797a:	4b54      	ldr	r3, [pc, #336]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a53      	ldr	r2, [pc, #332]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007980:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007986:	f7f9 ff41 	bl	800180c <HAL_GetTick>
 800798a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800798c:	e008      	b.n	80079a0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800798e:	f7f9 ff3d 	bl	800180c <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d901      	bls.n	80079a0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e10c      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079a0:	4b4a      	ldr	r3, [pc, #296]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1f0      	bne.n	800798e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079ac:	4b47      	ldr	r3, [pc, #284]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80079ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079b0:	4b47      	ldr	r3, [pc, #284]	@ (8007ad0 <HAL_RCC_OscConfig+0x768>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80079bc:	0112      	lsls	r2, r2, #4
 80079be:	430a      	orrs	r2, r1
 80079c0:	4942      	ldr	r1, [pc, #264]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ca:	3b01      	subs	r3, #1
 80079cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d4:	3b01      	subs	r3, #1
 80079d6:	025b      	lsls	r3, r3, #9
 80079d8:	b29b      	uxth	r3, r3
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e0:	3b01      	subs	r3, #1
 80079e2:	041b      	lsls	r3, r3, #16
 80079e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ee:	3b01      	subs	r3, #1
 80079f0:	061b      	lsls	r3, r3, #24
 80079f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079f6:	4935      	ldr	r1, [pc, #212]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80079fc:	4b33      	ldr	r3, [pc, #204]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a00:	4a32      	ldr	r2, [pc, #200]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a02:	f023 0301 	bic.w	r3, r3, #1
 8007a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a08:	4b30      	ldr	r3, [pc, #192]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a0c:	4b31      	ldr	r3, [pc, #196]	@ (8007ad4 <HAL_RCC_OscConfig+0x76c>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007a14:	00d2      	lsls	r2, r2, #3
 8007a16:	492d      	ldr	r1, [pc, #180]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a20:	f023 020c 	bic.w	r2, r3, #12
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a28:	4928      	ldr	r1, [pc, #160]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007a2e:	4b27      	ldr	r3, [pc, #156]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a32:	f023 0202 	bic.w	r2, r3, #2
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a3a:	4924      	ldr	r1, [pc, #144]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a40:	4b22      	ldr	r3, [pc, #136]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a44:	4a21      	ldr	r2, [pc, #132]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a50:	4a1e      	ldr	r2, [pc, #120]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007a58:	4b1c      	ldr	r3, [pc, #112]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007a64:	4b19      	ldr	r3, [pc, #100]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a68:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a70:	4b16      	ldr	r3, [pc, #88]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a15      	ldr	r2, [pc, #84]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7c:	f7f9 fec6 	bl	800180c <HAL_GetTick>
 8007a80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a82:	e008      	b.n	8007a96 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a84:	f7f9 fec2 	bl	800180c <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e091      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a96:	4b0d      	ldr	r3, [pc, #52]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0f0      	beq.n	8007a84 <HAL_RCC_OscConfig+0x71c>
 8007aa2:	e089      	b.n	8007bb8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aa4:	4b09      	ldr	r3, [pc, #36]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a08      	ldr	r2, [pc, #32]	@ (8007acc <HAL_RCC_OscConfig+0x764>)
 8007aaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab0:	f7f9 feac 	bl	800180c <HAL_GetTick>
 8007ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ab6:	e00f      	b.n	8007ad8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ab8:	f7f9 fea8 	bl	800180c <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d908      	bls.n	8007ad8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e077      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
 8007aca:	bf00      	nop
 8007acc:	58024400 	.word	0x58024400
 8007ad0:	fffffc0c 	.word	0xfffffc0c
 8007ad4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8007bc4 <HAL_RCC_OscConfig+0x85c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e9      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x750>
 8007ae4:	e068      	b.n	8007bb8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007ae6:	4b37      	ldr	r3, [pc, #220]	@ (8007bc4 <HAL_RCC_OscConfig+0x85c>)
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007aec:	4b35      	ldr	r3, [pc, #212]	@ (8007bc4 <HAL_RCC_OscConfig+0x85c>)
 8007aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d031      	beq.n	8007b5e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f003 0203 	and.w	r2, r3, #3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d12a      	bne.n	8007b5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	091b      	lsrs	r3, r3, #4
 8007b0c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d122      	bne.n	8007b5e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b22:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d11a      	bne.n	8007b5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	0a5b      	lsrs	r3, r3, #9
 8007b2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b34:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d111      	bne.n	8007b5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	0c1b      	lsrs	r3, r3, #16
 8007b3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d108      	bne.n	8007b5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	0e1b      	lsrs	r3, r3, #24
 8007b50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d001      	beq.n	8007b62 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e02b      	b.n	8007bba <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007b62:	4b18      	ldr	r3, [pc, #96]	@ (8007bc4 <HAL_RCC_OscConfig+0x85c>)
 8007b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b66:	08db      	lsrs	r3, r3, #3
 8007b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b6c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d01f      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007b78:	4b12      	ldr	r3, [pc, #72]	@ (8007bc4 <HAL_RCC_OscConfig+0x85c>)
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	4a11      	ldr	r2, [pc, #68]	@ (8007bc4 <HAL_RCC_OscConfig+0x85c>)
 8007b7e:	f023 0301 	bic.w	r3, r3, #1
 8007b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b84:	f7f9 fe42 	bl	800180c <HAL_GetTick>
 8007b88:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007b8a:	bf00      	nop
 8007b8c:	f7f9 fe3e 	bl	800180c <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d0f9      	beq.n	8007b8c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b98:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc4 <HAL_RCC_OscConfig+0x85c>)
 8007b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc8 <HAL_RCC_OscConfig+0x860>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007ba4:	00d2      	lsls	r2, r2, #3
 8007ba6:	4907      	ldr	r1, [pc, #28]	@ (8007bc4 <HAL_RCC_OscConfig+0x85c>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007bac:	4b05      	ldr	r3, [pc, #20]	@ (8007bc4 <HAL_RCC_OscConfig+0x85c>)
 8007bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb0:	4a04      	ldr	r2, [pc, #16]	@ (8007bc4 <HAL_RCC_OscConfig+0x85c>)
 8007bb2:	f043 0301 	orr.w	r3, r3, #1
 8007bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3730      	adds	r7, #48	@ 0x30
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	58024400 	.word	0x58024400
 8007bc8:	ffff0007 	.word	0xffff0007

08007bcc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e19c      	b.n	8007f1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007be0:	4b8a      	ldr	r3, [pc, #552]	@ (8007e0c <HAL_RCC_ClockConfig+0x240>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 030f 	and.w	r3, r3, #15
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d910      	bls.n	8007c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bee:	4b87      	ldr	r3, [pc, #540]	@ (8007e0c <HAL_RCC_ClockConfig+0x240>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f023 020f 	bic.w	r2, r3, #15
 8007bf6:	4985      	ldr	r1, [pc, #532]	@ (8007e0c <HAL_RCC_ClockConfig+0x240>)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfe:	4b83      	ldr	r3, [pc, #524]	@ (8007e0c <HAL_RCC_ClockConfig+0x240>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d001      	beq.n	8007c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e184      	b.n	8007f1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d010      	beq.n	8007c3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	4b7b      	ldr	r3, [pc, #492]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d908      	bls.n	8007c3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c2c:	4b78      	ldr	r3, [pc, #480]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	4975      	ldr	r1, [pc, #468]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0308 	and.w	r3, r3, #8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d010      	beq.n	8007c6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	695a      	ldr	r2, [r3, #20]
 8007c4e:	4b70      	ldr	r3, [pc, #448]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d908      	bls.n	8007c6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	496a      	ldr	r1, [pc, #424]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d010      	beq.n	8007c9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	699a      	ldr	r2, [r3, #24]
 8007c7c:	4b64      	ldr	r3, [pc, #400]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d908      	bls.n	8007c9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c88:	4b61      	ldr	r3, [pc, #388]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	495e      	ldr	r1, [pc, #376]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d010      	beq.n	8007cc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	69da      	ldr	r2, [r3, #28]
 8007caa:	4b59      	ldr	r3, [pc, #356]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d908      	bls.n	8007cc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007cb6:	4b56      	ldr	r3, [pc, #344]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	4953      	ldr	r1, [pc, #332]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d010      	beq.n	8007cf6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68da      	ldr	r2, [r3, #12]
 8007cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	f003 030f 	and.w	r3, r3, #15
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d908      	bls.n	8007cf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	f023 020f 	bic.w	r2, r3, #15
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	4947      	ldr	r1, [pc, #284]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d055      	beq.n	8007dae <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d02:	4b43      	ldr	r3, [pc, #268]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	4940      	ldr	r1, [pc, #256]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d107      	bne.n	8007d2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d121      	bne.n	8007d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e0f6      	b.n	8007f1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d107      	bne.n	8007d44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d34:	4b36      	ldr	r3, [pc, #216]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d115      	bne.n	8007d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0ea      	b.n	8007f1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d107      	bne.n	8007d5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d4c:	4b30      	ldr	r3, [pc, #192]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d109      	bne.n	8007d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e0de      	b.n	8007f1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e0d6      	b.n	8007f1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d6c:	4b28      	ldr	r3, [pc, #160]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	f023 0207 	bic.w	r2, r3, #7
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4925      	ldr	r1, [pc, #148]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7e:	f7f9 fd45 	bl	800180c <HAL_GetTick>
 8007d82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d84:	e00a      	b.n	8007d9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d86:	f7f9 fd41 	bl	800180c <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d901      	bls.n	8007d9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e0be      	b.n	8007f1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d1eb      	bne.n	8007d86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d010      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	4b14      	ldr	r3, [pc, #80]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	f003 030f 	and.w	r3, r3, #15
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d208      	bcs.n	8007ddc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dca:	4b11      	ldr	r3, [pc, #68]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	f023 020f 	bic.w	r2, r3, #15
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	490e      	ldr	r1, [pc, #56]	@ (8007e10 <HAL_RCC_ClockConfig+0x244>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8007e0c <HAL_RCC_ClockConfig+0x240>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 030f 	and.w	r3, r3, #15
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d214      	bcs.n	8007e14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dea:	4b08      	ldr	r3, [pc, #32]	@ (8007e0c <HAL_RCC_ClockConfig+0x240>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f023 020f 	bic.w	r2, r3, #15
 8007df2:	4906      	ldr	r1, [pc, #24]	@ (8007e0c <HAL_RCC_ClockConfig+0x240>)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dfa:	4b04      	ldr	r3, [pc, #16]	@ (8007e0c <HAL_RCC_ClockConfig+0x240>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d005      	beq.n	8007e14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e086      	b.n	8007f1a <HAL_RCC_ClockConfig+0x34e>
 8007e0c:	52002000 	.word	0x52002000
 8007e10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d010      	beq.n	8007e42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	4b3f      	ldr	r3, [pc, #252]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d208      	bcs.n	8007e42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e30:	4b3c      	ldr	r3, [pc, #240]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	4939      	ldr	r1, [pc, #228]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0308 	and.w	r3, r3, #8
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d010      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	695a      	ldr	r2, [r3, #20]
 8007e52:	4b34      	ldr	r3, [pc, #208]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d208      	bcs.n	8007e70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e5e:	4b31      	ldr	r3, [pc, #196]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	492e      	ldr	r1, [pc, #184]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d010      	beq.n	8007e9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699a      	ldr	r2, [r3, #24]
 8007e80:	4b28      	ldr	r3, [pc, #160]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d208      	bcs.n	8007e9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e8c:	4b25      	ldr	r3, [pc, #148]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	4922      	ldr	r1, [pc, #136]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d010      	beq.n	8007ecc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69da      	ldr	r2, [r3, #28]
 8007eae:	4b1d      	ldr	r3, [pc, #116]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d208      	bcs.n	8007ecc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007eba:	4b1a      	ldr	r3, [pc, #104]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	4917      	ldr	r1, [pc, #92]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007ecc:	f000 f89e 	bl	800800c <HAL_RCC_GetSysClockFreq>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	4b14      	ldr	r3, [pc, #80]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	0a1b      	lsrs	r3, r3, #8
 8007ed8:	f003 030f 	and.w	r3, r3, #15
 8007edc:	4912      	ldr	r1, [pc, #72]	@ (8007f28 <HAL_RCC_ClockConfig+0x35c>)
 8007ede:	5ccb      	ldrb	r3, [r1, r3]
 8007ee0:	f003 031f 	and.w	r3, r3, #31
 8007ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007eea:	4b0e      	ldr	r3, [pc, #56]	@ (8007f24 <HAL_RCC_ClockConfig+0x358>)
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	f003 030f 	and.w	r3, r3, #15
 8007ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8007f28 <HAL_RCC_ClockConfig+0x35c>)
 8007ef4:	5cd3      	ldrb	r3, [r2, r3]
 8007ef6:	f003 031f 	and.w	r3, r3, #31
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	fa22 f303 	lsr.w	r3, r2, r3
 8007f00:	4a0a      	ldr	r2, [pc, #40]	@ (8007f2c <HAL_RCC_ClockConfig+0x360>)
 8007f02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f04:	4a0a      	ldr	r2, [pc, #40]	@ (8007f30 <HAL_RCC_ClockConfig+0x364>)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f34 <HAL_RCC_ClockConfig+0x368>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7f9 fc32 	bl	8001778 <HAL_InitTick>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	58024400 	.word	0x58024400
 8007f28:	0800f920 	.word	0x0800f920
 8007f2c:	24000004 	.word	0x24000004
 8007f30:	24000000 	.word	0x24000000
 8007f34:	24000008 	.word	0x24000008

08007f38 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08c      	sub	sp, #48	@ 0x30
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d12a      	bne.n	8007fa0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8008000 <HAL_RCC_MCOConfig+0xc8>)
 8007f4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007f50:	4a2b      	ldr	r2, [pc, #172]	@ (8008000 <HAL_RCC_MCOConfig+0xc8>)
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007f5a:	4b29      	ldr	r3, [pc, #164]	@ (8008000 <HAL_RCC_MCOConfig+0xc8>)
 8007f5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007f68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f6e:	2302      	movs	r3, #2
 8007f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f72:	2303      	movs	r3, #3
 8007f74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007f7e:	f107 031c 	add.w	r3, r7, #28
 8007f82:	4619      	mov	r1, r3
 8007f84:	481f      	ldr	r0, [pc, #124]	@ (8008004 <HAL_RCC_MCOConfig+0xcc>)
 8007f86:	f7fc fdd3 	bl	8004b30 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008000 <HAL_RCC_MCOConfig+0xc8>)
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8007f92:	68b9      	ldr	r1, [r7, #8]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	430b      	orrs	r3, r1
 8007f98:	4919      	ldr	r1, [pc, #100]	@ (8008000 <HAL_RCC_MCOConfig+0xc8>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007f9e:	e02a      	b.n	8007ff6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007fa0:	4b17      	ldr	r3, [pc, #92]	@ (8008000 <HAL_RCC_MCOConfig+0xc8>)
 8007fa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007fa6:	4a16      	ldr	r2, [pc, #88]	@ (8008000 <HAL_RCC_MCOConfig+0xc8>)
 8007fa8:	f043 0304 	orr.w	r3, r3, #4
 8007fac:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007fb0:	4b13      	ldr	r3, [pc, #76]	@ (8008000 <HAL_RCC_MCOConfig+0xc8>)
 8007fb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	617b      	str	r3, [r7, #20]
 8007fbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007fbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007fd4:	f107 031c 	add.w	r3, r7, #28
 8007fd8:	4619      	mov	r1, r3
 8007fda:	480b      	ldr	r0, [pc, #44]	@ (8008008 <HAL_RCC_MCOConfig+0xd0>)
 8007fdc:	f7fc fda8 	bl	8004b30 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007fe0:	4b07      	ldr	r3, [pc, #28]	@ (8008000 <HAL_RCC_MCOConfig+0xc8>)
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	01d9      	lsls	r1, r3, #7
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	4903      	ldr	r1, [pc, #12]	@ (8008000 <HAL_RCC_MCOConfig+0xc8>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	610b      	str	r3, [r1, #16]
}
 8007ff6:	bf00      	nop
 8007ff8:	3730      	adds	r7, #48	@ 0x30
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	58024400 	.word	0x58024400
 8008004:	58020000 	.word	0x58020000
 8008008:	58020800 	.word	0x58020800

0800800c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800800c:	b480      	push	{r7}
 800800e:	b089      	sub	sp, #36	@ 0x24
 8008010:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008012:	4bb3      	ldr	r3, [pc, #716]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800801a:	2b18      	cmp	r3, #24
 800801c:	f200 8155 	bhi.w	80082ca <HAL_RCC_GetSysClockFreq+0x2be>
 8008020:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	0800808d 	.word	0x0800808d
 800802c:	080082cb 	.word	0x080082cb
 8008030:	080082cb 	.word	0x080082cb
 8008034:	080082cb 	.word	0x080082cb
 8008038:	080082cb 	.word	0x080082cb
 800803c:	080082cb 	.word	0x080082cb
 8008040:	080082cb 	.word	0x080082cb
 8008044:	080082cb 	.word	0x080082cb
 8008048:	080080b3 	.word	0x080080b3
 800804c:	080082cb 	.word	0x080082cb
 8008050:	080082cb 	.word	0x080082cb
 8008054:	080082cb 	.word	0x080082cb
 8008058:	080082cb 	.word	0x080082cb
 800805c:	080082cb 	.word	0x080082cb
 8008060:	080082cb 	.word	0x080082cb
 8008064:	080082cb 	.word	0x080082cb
 8008068:	080080b9 	.word	0x080080b9
 800806c:	080082cb 	.word	0x080082cb
 8008070:	080082cb 	.word	0x080082cb
 8008074:	080082cb 	.word	0x080082cb
 8008078:	080082cb 	.word	0x080082cb
 800807c:	080082cb 	.word	0x080082cb
 8008080:	080082cb 	.word	0x080082cb
 8008084:	080082cb 	.word	0x080082cb
 8008088:	080080bf 	.word	0x080080bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800808c:	4b94      	ldr	r3, [pc, #592]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d009      	beq.n	80080ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008098:	4b91      	ldr	r3, [pc, #580]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	08db      	lsrs	r3, r3, #3
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	4a90      	ldr	r2, [pc, #576]	@ (80082e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080a4:	fa22 f303 	lsr.w	r3, r2, r3
 80080a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80080aa:	e111      	b.n	80082d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80080ac:	4b8d      	ldr	r3, [pc, #564]	@ (80082e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080ae:	61bb      	str	r3, [r7, #24]
      break;
 80080b0:	e10e      	b.n	80082d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80080b2:	4b8d      	ldr	r3, [pc, #564]	@ (80082e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80080b4:	61bb      	str	r3, [r7, #24]
      break;
 80080b6:	e10b      	b.n	80082d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80080b8:	4b8c      	ldr	r3, [pc, #560]	@ (80082ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80080ba:	61bb      	str	r3, [r7, #24]
      break;
 80080bc:	e108      	b.n	80082d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080be:	4b88      	ldr	r3, [pc, #544]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80080c8:	4b85      	ldr	r3, [pc, #532]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080cc:	091b      	lsrs	r3, r3, #4
 80080ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80080d4:	4b82      	ldr	r3, [pc, #520]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80080de:	4b80      	ldr	r3, [pc, #512]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e2:	08db      	lsrs	r3, r3, #3
 80080e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	fb02 f303 	mul.w	r3, r2, r3
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 80e1 	beq.w	80082c4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b02      	cmp	r3, #2
 8008106:	f000 8083 	beq.w	8008210 <HAL_RCC_GetSysClockFreq+0x204>
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2b02      	cmp	r3, #2
 800810e:	f200 80a1 	bhi.w	8008254 <HAL_RCC_GetSysClockFreq+0x248>
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <HAL_RCC_GetSysClockFreq+0x114>
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d056      	beq.n	80081cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800811e:	e099      	b.n	8008254 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008120:	4b6f      	ldr	r3, [pc, #444]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d02d      	beq.n	8008188 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800812c:	4b6c      	ldr	r3, [pc, #432]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	08db      	lsrs	r3, r3, #3
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	4a6b      	ldr	r2, [pc, #428]	@ (80082e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008138:	fa22 f303 	lsr.w	r3, r2, r3
 800813c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	ee07 3a90 	vmov	s15, r3
 8008144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008156:	4b62      	ldr	r3, [pc, #392]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008166:	ed97 6a02 	vldr	s12, [r7, #8]
 800816a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80082f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800816e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800817a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008182:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008186:	e087      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008192:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80082f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819a:	4b51      	ldr	r3, [pc, #324]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800819c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800819e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80081ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80082f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80081ca:	e065      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80082f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80081da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081de:	4b40      	ldr	r3, [pc, #256]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80081f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80082f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800820e:	e043      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	ee07 3a90 	vmov	s15, r3
 8008216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80082fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800821e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008222:	4b2f      	ldr	r3, [pc, #188]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008232:	ed97 6a02 	vldr	s12, [r7, #8]
 8008236:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80082f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800823a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800823e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008252:	e021      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80082f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008266:	4b1e      	ldr	r3, [pc, #120]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008276:	ed97 6a02 	vldr	s12, [r7, #8]
 800827a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80082f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800827e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800828a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008296:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008298:	4b11      	ldr	r3, [pc, #68]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800829a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829c:	0a5b      	lsrs	r3, r3, #9
 800829e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a2:	3301      	adds	r3, #1
 80082a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	ee07 3a90 	vmov	s15, r3
 80082ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80082b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80082b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082bc:	ee17 3a90 	vmov	r3, s15
 80082c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80082c2:	e005      	b.n	80082d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	61bb      	str	r3, [r7, #24]
      break;
 80082c8:	e002      	b.n	80082d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80082ca:	4b07      	ldr	r3, [pc, #28]	@ (80082e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80082cc:	61bb      	str	r3, [r7, #24]
      break;
 80082ce:	bf00      	nop
  }

  return sysclockfreq;
 80082d0:	69bb      	ldr	r3, [r7, #24]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3724      	adds	r7, #36	@ 0x24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	58024400 	.word	0x58024400
 80082e4:	03d09000 	.word	0x03d09000
 80082e8:	003d0900 	.word	0x003d0900
 80082ec:	007a1200 	.word	0x007a1200
 80082f0:	46000000 	.word	0x46000000
 80082f4:	4c742400 	.word	0x4c742400
 80082f8:	4a742400 	.word	0x4a742400
 80082fc:	4af42400 	.word	0x4af42400

08008300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8008306:	f7ff fe81 	bl	800800c <HAL_RCC_GetSysClockFreq>
 800830a:	4602      	mov	r2, r0
 800830c:	4b10      	ldr	r3, [pc, #64]	@ (8008350 <HAL_RCC_GetHCLKFreq+0x50>)
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	0a1b      	lsrs	r3, r3, #8
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	490f      	ldr	r1, [pc, #60]	@ (8008354 <HAL_RCC_GetHCLKFreq+0x54>)
 8008318:	5ccb      	ldrb	r3, [r1, r3]
 800831a:	f003 031f 	and.w	r3, r3, #31
 800831e:	fa22 f303 	lsr.w	r3, r2, r3
 8008322:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008324:	4b0a      	ldr	r3, [pc, #40]	@ (8008350 <HAL_RCC_GetHCLKFreq+0x50>)
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	f003 030f 	and.w	r3, r3, #15
 800832c:	4a09      	ldr	r2, [pc, #36]	@ (8008354 <HAL_RCC_GetHCLKFreq+0x54>)
 800832e:	5cd3      	ldrb	r3, [r2, r3]
 8008330:	f003 031f 	and.w	r3, r3, #31
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	fa22 f303 	lsr.w	r3, r2, r3
 800833a:	4a07      	ldr	r2, [pc, #28]	@ (8008358 <HAL_RCC_GetHCLKFreq+0x58>)
 800833c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800833e:	4a07      	ldr	r2, [pc, #28]	@ (800835c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008344:	4b04      	ldr	r3, [pc, #16]	@ (8008358 <HAL_RCC_GetHCLKFreq+0x58>)
 8008346:	681b      	ldr	r3, [r3, #0]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	58024400 	.word	0x58024400
 8008354:	0800f920 	.word	0x0800f920
 8008358:	24000004 	.word	0x24000004
 800835c:	24000000 	.word	0x24000000

08008360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8008364:	f7ff ffcc 	bl	8008300 <HAL_RCC_GetHCLKFreq>
 8008368:	4602      	mov	r2, r0
 800836a:	4b06      	ldr	r3, [pc, #24]	@ (8008384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	091b      	lsrs	r3, r3, #4
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	4904      	ldr	r1, [pc, #16]	@ (8008388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008376:	5ccb      	ldrb	r3, [r1, r3]
 8008378:	f003 031f 	and.w	r3, r3, #31
 800837c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008380:	4618      	mov	r0, r3
 8008382:	bd80      	pop	{r7, pc}
 8008384:	58024400 	.word	0x58024400
 8008388:	0800f920 	.word	0x0800f920

0800838c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800838c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008390:	b0c8      	sub	sp, #288	@ 0x120
 8008392:	af00      	add	r7, sp, #0
 8008394:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008398:	2300      	movs	r3, #0
 800839a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800839e:	2300      	movs	r3, #0
 80083a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80083b0:	2500      	movs	r5, #0
 80083b2:	ea54 0305 	orrs.w	r3, r4, r5
 80083b6:	d049      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80083b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083c2:	d02f      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80083c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083c8:	d828      	bhi.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80083ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083ce:	d01a      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80083d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083d4:	d822      	bhi.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80083da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083de:	d007      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80083e0:	e01c      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e2:	4ba7      	ldr	r3, [pc, #668]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e6:	4aa6      	ldr	r2, [pc, #664]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80083ee:	e01a      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f4:	3308      	adds	r3, #8
 80083f6:	2102      	movs	r1, #2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f002 fa6d 	bl	800a8d8 <RCCEx_PLL2_Config>
 80083fe:	4603      	mov	r3, r0
 8008400:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008404:	e00f      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800840a:	3328      	adds	r3, #40	@ 0x28
 800840c:	2102      	movs	r1, #2
 800840e:	4618      	mov	r0, r3
 8008410:	f002 fb14 	bl	800aa3c <RCCEx_PLL3_Config>
 8008414:	4603      	mov	r3, r0
 8008416:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800841a:	e004      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008422:	e000      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008426:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800842e:	4b94      	ldr	r3, [pc, #592]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008432:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800843a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800843c:	4a90      	ldr	r2, [pc, #576]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800843e:	430b      	orrs	r3, r1
 8008440:	6513      	str	r3, [r2, #80]	@ 0x50
 8008442:	e003      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008444:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008448:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800844c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008458:	f04f 0900 	mov.w	r9, #0
 800845c:	ea58 0309 	orrs.w	r3, r8, r9
 8008460:	d047      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008468:	2b04      	cmp	r3, #4
 800846a:	d82a      	bhi.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800846c:	a201      	add	r2, pc, #4	@ (adr r2, 8008474 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800846e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008472:	bf00      	nop
 8008474:	08008489 	.word	0x08008489
 8008478:	08008497 	.word	0x08008497
 800847c:	080084ad 	.word	0x080084ad
 8008480:	080084cb 	.word	0x080084cb
 8008484:	080084cb 	.word	0x080084cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008488:	4b7d      	ldr	r3, [pc, #500]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	4a7c      	ldr	r2, [pc, #496]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800848e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008494:	e01a      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800849a:	3308      	adds	r3, #8
 800849c:	2100      	movs	r1, #0
 800849e:	4618      	mov	r0, r3
 80084a0:	f002 fa1a 	bl	800a8d8 <RCCEx_PLL2_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084aa:	e00f      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b0:	3328      	adds	r3, #40	@ 0x28
 80084b2:	2100      	movs	r1, #0
 80084b4:	4618      	mov	r0, r3
 80084b6:	f002 fac1 	bl	800aa3c <RCCEx_PLL3_Config>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084c0:	e004      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084c8:	e000      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80084ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d8:	f023 0107 	bic.w	r1, r3, #7
 80084dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084e2:	4a67      	ldr	r2, [pc, #412]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084e4:	430b      	orrs	r3, r1
 80084e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80084e8:	e003      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80084f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80084fe:	f04f 0b00 	mov.w	fp, #0
 8008502:	ea5a 030b 	orrs.w	r3, sl, fp
 8008506:	d054      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8008508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800850c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800850e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008512:	d036      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008514:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008518:	d82f      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800851a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800851e:	d032      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008524:	d829      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008526:	2bc0      	cmp	r3, #192	@ 0xc0
 8008528:	d02f      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800852a:	2bc0      	cmp	r3, #192	@ 0xc0
 800852c:	d825      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800852e:	2b80      	cmp	r3, #128	@ 0x80
 8008530:	d018      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008532:	2b80      	cmp	r3, #128	@ 0x80
 8008534:	d821      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800853a:	2b40      	cmp	r3, #64	@ 0x40
 800853c:	d007      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800853e:	e01c      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008540:	4b4f      	ldr	r3, [pc, #316]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	4a4e      	ldr	r2, [pc, #312]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800854a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800854c:	e01e      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800854e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008552:	3308      	adds	r3, #8
 8008554:	2100      	movs	r1, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f002 f9be 	bl	800a8d8 <RCCEx_PLL2_Config>
 800855c:	4603      	mov	r3, r0
 800855e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008562:	e013      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008568:	3328      	adds	r3, #40	@ 0x28
 800856a:	2100      	movs	r1, #0
 800856c:	4618      	mov	r0, r3
 800856e:	f002 fa65 	bl	800aa3c <RCCEx_PLL3_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008578:	e008      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008580:	e004      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008582:	bf00      	nop
 8008584:	e002      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008586:	bf00      	nop
 8008588:	e000      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800858a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800858c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008594:	4b3a      	ldr	r3, [pc, #232]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008598:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800859c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085a2:	4a37      	ldr	r2, [pc, #220]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085a4:	430b      	orrs	r3, r1
 80085a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80085a8:	e003      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80085b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80085be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80085c2:	2300      	movs	r3, #0
 80085c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80085c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80085cc:	460b      	mov	r3, r1
 80085ce:	4313      	orrs	r3, r2
 80085d0:	d05c      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80085d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085d8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80085dc:	d03b      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80085de:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80085e2:	d834      	bhi.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80085e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085e8:	d037      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80085ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085ee:	d82e      	bhi.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80085f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80085f4:	d033      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80085f6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80085fa:	d828      	bhi.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80085fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008600:	d01a      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008606:	d822      	bhi.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800860c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008610:	d007      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008612:	e01c      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008614:	4b1a      	ldr	r3, [pc, #104]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008618:	4a19      	ldr	r2, [pc, #100]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800861a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800861e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008620:	e01e      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008626:	3308      	adds	r3, #8
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f002 f954 	bl	800a8d8 <RCCEx_PLL2_Config>
 8008630:	4603      	mov	r3, r0
 8008632:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008636:	e013      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800863c:	3328      	adds	r3, #40	@ 0x28
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f002 f9fb 	bl	800aa3c <RCCEx_PLL3_Config>
 8008646:	4603      	mov	r3, r0
 8008648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800864c:	e008      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008654:	e004      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008656:	bf00      	nop
 8008658:	e002      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800865a:	bf00      	nop
 800865c:	e000      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800865e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008660:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10d      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008668:	4b05      	ldr	r3, [pc, #20]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800866a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800866c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008676:	4a02      	ldr	r2, [pc, #8]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008678:	430b      	orrs	r3, r1
 800867a:	6513      	str	r3, [r2, #80]	@ 0x50
 800867c:	e006      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800867e:	bf00      	nop
 8008680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008684:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008688:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800868c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800869c:	2300      	movs	r3, #0
 800869e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80086a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80086a6:	460b      	mov	r3, r1
 80086a8:	4313      	orrs	r3, r2
 80086aa:	d03a      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80086ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086b2:	2b30      	cmp	r3, #48	@ 0x30
 80086b4:	d01f      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80086b6:	2b30      	cmp	r3, #48	@ 0x30
 80086b8:	d819      	bhi.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x362>
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d00c      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d815      	bhi.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x362>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d019      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80086c6:	2b10      	cmp	r3, #16
 80086c8:	d111      	bne.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ca:	4bae      	ldr	r3, [pc, #696]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80086cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ce:	4aad      	ldr	r2, [pc, #692]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80086d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80086d6:	e011      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086dc:	3308      	adds	r3, #8
 80086de:	2102      	movs	r1, #2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f002 f8f9 	bl	800a8d8 <RCCEx_PLL2_Config>
 80086e6:	4603      	mov	r3, r0
 80086e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80086ec:	e006      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086f4:	e002      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80086f6:	bf00      	nop
 80086f8:	e000      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80086fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008704:	4b9f      	ldr	r3, [pc, #636]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008708:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800870c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008712:	4a9c      	ldr	r2, [pc, #624]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008714:	430b      	orrs	r3, r1
 8008716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008718:	e003      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800871a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800871e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800872e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008732:	2300      	movs	r3, #0
 8008734:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008738:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800873c:	460b      	mov	r3, r1
 800873e:	4313      	orrs	r3, r2
 8008740:	d051      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800874c:	d035      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800874e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008752:	d82e      	bhi.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008754:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008758:	d031      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x432>
 800875a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800875e:	d828      	bhi.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008764:	d01a      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800876a:	d822      	bhi.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008774:	d007      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008776:	e01c      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008778:	4b82      	ldr	r3, [pc, #520]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800877a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877c:	4a81      	ldr	r2, [pc, #516]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800877e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008784:	e01c      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800878a:	3308      	adds	r3, #8
 800878c:	2100      	movs	r1, #0
 800878e:	4618      	mov	r0, r3
 8008790:	f002 f8a2 	bl	800a8d8 <RCCEx_PLL2_Config>
 8008794:	4603      	mov	r3, r0
 8008796:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800879a:	e011      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800879c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087a0:	3328      	adds	r3, #40	@ 0x28
 80087a2:	2100      	movs	r1, #0
 80087a4:	4618      	mov	r0, r3
 80087a6:	f002 f949 	bl	800aa3c <RCCEx_PLL3_Config>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80087b0:	e006      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087b8:	e002      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80087ba:	bf00      	nop
 80087bc:	e000      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80087be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10a      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80087c8:	4b6e      	ldr	r3, [pc, #440]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80087d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087d6:	4a6b      	ldr	r2, [pc, #428]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087d8:	430b      	orrs	r3, r1
 80087da:	6513      	str	r3, [r2, #80]	@ 0x50
 80087dc:	e003      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80087e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80087f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087f6:	2300      	movs	r3, #0
 80087f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80087fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008800:	460b      	mov	r3, r1
 8008802:	4313      	orrs	r3, r2
 8008804:	d053      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800880a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800880c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008810:	d033      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008812:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008816:	d82c      	bhi.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008818:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800881c:	d02f      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800881e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008822:	d826      	bhi.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008824:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008828:	d02b      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800882a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800882e:	d820      	bhi.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008834:	d012      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800883a:	d81a      	bhi.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d022      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008844:	d115      	bne.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800884a:	3308      	adds	r3, #8
 800884c:	2101      	movs	r1, #1
 800884e:	4618      	mov	r0, r3
 8008850:	f002 f842 	bl	800a8d8 <RCCEx_PLL2_Config>
 8008854:	4603      	mov	r3, r0
 8008856:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800885a:	e015      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800885c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008860:	3328      	adds	r3, #40	@ 0x28
 8008862:	2101      	movs	r1, #1
 8008864:	4618      	mov	r0, r3
 8008866:	f002 f8e9 	bl	800aa3c <RCCEx_PLL3_Config>
 800886a:	4603      	mov	r3, r0
 800886c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008870:	e00a      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008878:	e006      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800887a:	bf00      	nop
 800887c:	e004      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800887e:	bf00      	nop
 8008880:	e002      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008882:	bf00      	nop
 8008884:	e000      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10a      	bne.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008890:	4b3c      	ldr	r3, [pc, #240]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008894:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800889e:	4a39      	ldr	r2, [pc, #228]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80088a0:	430b      	orrs	r3, r1
 80088a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80088a4:	e003      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80088ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80088ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088be:	2300      	movs	r3, #0
 80088c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80088c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4313      	orrs	r3, r2
 80088cc:	d060      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80088ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80088d6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80088da:	d039      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80088dc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80088e0:	d832      	bhi.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80088e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088e6:	d035      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80088e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088ec:	d82c      	bhi.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80088ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088f2:	d031      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80088f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088f8:	d826      	bhi.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80088fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088fe:	d02d      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008900:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008904:	d820      	bhi.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800890a:	d012      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800890c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008910:	d81a      	bhi.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d024      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800891a:	d115      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800891c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008920:	3308      	adds	r3, #8
 8008922:	2101      	movs	r1, #1
 8008924:	4618      	mov	r0, r3
 8008926:	f001 ffd7 	bl	800a8d8 <RCCEx_PLL2_Config>
 800892a:	4603      	mov	r3, r0
 800892c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008930:	e017      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008936:	3328      	adds	r3, #40	@ 0x28
 8008938:	2101      	movs	r1, #1
 800893a:	4618      	mov	r0, r3
 800893c:	f002 f87e 	bl	800aa3c <RCCEx_PLL3_Config>
 8008940:	4603      	mov	r3, r0
 8008942:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008946:	e00c      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800894e:	e008      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008950:	bf00      	nop
 8008952:	e006      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008954:	bf00      	nop
 8008956:	e004      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008958:	bf00      	nop
 800895a:	e002      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800895c:	bf00      	nop
 800895e:	e000      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008962:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10e      	bne.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800896a:	4b06      	ldr	r3, [pc, #24]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800896c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800897a:	4a02      	ldr	r2, [pc, #8]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800897c:	430b      	orrs	r3, r1
 800897e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008980:	e006      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008982:	bf00      	nop
 8008984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008988:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800898c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800899c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089a0:	2300      	movs	r3, #0
 80089a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80089a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80089aa:	460b      	mov	r3, r1
 80089ac:	4313      	orrs	r3, r2
 80089ae:	d037      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80089b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ba:	d00e      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80089bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089c0:	d816      	bhi.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d018      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80089c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ca:	d111      	bne.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089cc:	4bc4      	ldr	r3, [pc, #784]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d0:	4ac3      	ldr	r2, [pc, #780]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80089d8:	e00f      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089de:	3308      	adds	r3, #8
 80089e0:	2101      	movs	r1, #1
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 ff78 	bl	800a8d8 <RCCEx_PLL2_Config>
 80089e8:	4603      	mov	r3, r0
 80089ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80089ee:	e004      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089f6:	e000      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80089f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10a      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a02:	4bb7      	ldr	r3, [pc, #732]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a06:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a10:	4ab3      	ldr	r2, [pc, #716]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a12:	430b      	orrs	r3, r1
 8008a14:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a16:	e003      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a30:	2300      	movs	r3, #0
 8008a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008a36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	d039      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d81c      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a50 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a50:	08008a8d 	.word	0x08008a8d
 8008a54:	08008a61 	.word	0x08008a61
 8008a58:	08008a6f 	.word	0x08008a6f
 8008a5c:	08008a8d 	.word	0x08008a8d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a60:	4b9f      	ldr	r3, [pc, #636]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a64:	4a9e      	ldr	r2, [pc, #632]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008a6c:	e00f      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a72:	3308      	adds	r3, #8
 8008a74:	2102      	movs	r1, #2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 ff2e 	bl	800a8d8 <RCCEx_PLL2_Config>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008a82:	e004      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a8a:	e000      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10a      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008a96:	4b92      	ldr	r3, [pc, #584]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a9a:	f023 0103 	bic.w	r1, r3, #3
 8008a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa4:	4a8e      	ldr	r2, [pc, #568]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008aa6:	430b      	orrs	r3, r1
 8008aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008aaa:	e003      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ab0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008aca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	f000 8099 	beq.w	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ad6:	4b83      	ldr	r3, [pc, #524]	@ (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a82      	ldr	r2, [pc, #520]	@ (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ae2:	f7f8 fe93 	bl	800180c <HAL_GetTick>
 8008ae6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008aea:	e00b      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008aec:	f7f8 fe8e 	bl	800180c <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	2b64      	cmp	r3, #100	@ 0x64
 8008afa:	d903      	bls.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b02:	e005      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b04:	4b77      	ldr	r3, [pc, #476]	@ (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0ed      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008b10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d173      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b18:	4b71      	ldr	r3, [pc, #452]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b24:	4053      	eors	r3, r2
 8008b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d015      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b36:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b3a:	4b69      	ldr	r3, [pc, #420]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b3e:	4a68      	ldr	r2, [pc, #416]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b44:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b46:	4b66      	ldr	r3, [pc, #408]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b4a:	4a65      	ldr	r2, [pc, #404]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b50:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008b52:	4a63      	ldr	r2, [pc, #396]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b58:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b66:	d118      	bne.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b68:	f7f8 fe50 	bl	800180c <HAL_GetTick>
 8008b6c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b70:	e00d      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b72:	f7f8 fe4b 	bl	800180c <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008b7c:	1ad2      	subs	r2, r2, r3
 8008b7e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d903      	bls.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008b8c:	e005      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b8e:	4b54      	ldr	r3, [pc, #336]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0eb      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008b9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d129      	bne.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bb2:	d10e      	bne.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bc4:	091a      	lsrs	r2, r3, #4
 8008bc6:	4b48      	ldr	r3, [pc, #288]	@ (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	4a45      	ldr	r2, [pc, #276]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6113      	str	r3, [r2, #16]
 8008bd0:	e005      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008bd2:	4b43      	ldr	r3, [pc, #268]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	4a42      	ldr	r2, [pc, #264]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bd8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008bdc:	6113      	str	r3, [r2, #16]
 8008bde:	4b40      	ldr	r3, [pc, #256]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008be0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bee:	4a3c      	ldr	r2, [pc, #240]	@ (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bf4:	e008      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bfa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008bfe:	e003      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f002 0301 	and.w	r3, r2, #1
 8008c14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c22:	460b      	mov	r3, r1
 8008c24:	4313      	orrs	r3, r2
 8008c26:	f000 8090 	beq.w	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c32:	2b28      	cmp	r3, #40	@ 0x28
 8008c34:	d870      	bhi.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008c36:	a201      	add	r2, pc, #4	@ (adr r2, 8008c3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008d21 	.word	0x08008d21
 8008c40:	08008d19 	.word	0x08008d19
 8008c44:	08008d19 	.word	0x08008d19
 8008c48:	08008d19 	.word	0x08008d19
 8008c4c:	08008d19 	.word	0x08008d19
 8008c50:	08008d19 	.word	0x08008d19
 8008c54:	08008d19 	.word	0x08008d19
 8008c58:	08008d19 	.word	0x08008d19
 8008c5c:	08008ced 	.word	0x08008ced
 8008c60:	08008d19 	.word	0x08008d19
 8008c64:	08008d19 	.word	0x08008d19
 8008c68:	08008d19 	.word	0x08008d19
 8008c6c:	08008d19 	.word	0x08008d19
 8008c70:	08008d19 	.word	0x08008d19
 8008c74:	08008d19 	.word	0x08008d19
 8008c78:	08008d19 	.word	0x08008d19
 8008c7c:	08008d03 	.word	0x08008d03
 8008c80:	08008d19 	.word	0x08008d19
 8008c84:	08008d19 	.word	0x08008d19
 8008c88:	08008d19 	.word	0x08008d19
 8008c8c:	08008d19 	.word	0x08008d19
 8008c90:	08008d19 	.word	0x08008d19
 8008c94:	08008d19 	.word	0x08008d19
 8008c98:	08008d19 	.word	0x08008d19
 8008c9c:	08008d21 	.word	0x08008d21
 8008ca0:	08008d19 	.word	0x08008d19
 8008ca4:	08008d19 	.word	0x08008d19
 8008ca8:	08008d19 	.word	0x08008d19
 8008cac:	08008d19 	.word	0x08008d19
 8008cb0:	08008d19 	.word	0x08008d19
 8008cb4:	08008d19 	.word	0x08008d19
 8008cb8:	08008d19 	.word	0x08008d19
 8008cbc:	08008d21 	.word	0x08008d21
 8008cc0:	08008d19 	.word	0x08008d19
 8008cc4:	08008d19 	.word	0x08008d19
 8008cc8:	08008d19 	.word	0x08008d19
 8008ccc:	08008d19 	.word	0x08008d19
 8008cd0:	08008d19 	.word	0x08008d19
 8008cd4:	08008d19 	.word	0x08008d19
 8008cd8:	08008d19 	.word	0x08008d19
 8008cdc:	08008d21 	.word	0x08008d21
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	58024800 	.word	0x58024800
 8008ce8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f001 fdef 	bl	800a8d8 <RCCEx_PLL2_Config>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008d00:	e00f      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d06:	3328      	adds	r3, #40	@ 0x28
 8008d08:	2101      	movs	r1, #1
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 fe96 	bl	800aa3c <RCCEx_PLL3_Config>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008d16:	e004      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d1e:	e000      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10b      	bne.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d2a:	4bc0      	ldr	r3, [pc, #768]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d2e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d3a:	4abc      	ldr	r2, [pc, #752]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d3c:	430b      	orrs	r3, r1
 8008d3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d40:	e003      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	f002 0302 	and.w	r3, r2, #2
 8008d56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d60:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008d64:	460b      	mov	r3, r1
 8008d66:	4313      	orrs	r3, r2
 8008d68:	d043      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d72:	2b05      	cmp	r3, #5
 8008d74:	d824      	bhi.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008d76:	a201      	add	r2, pc, #4	@ (adr r2, 8008d7c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008dc9 	.word	0x08008dc9
 8008d80:	08008d95 	.word	0x08008d95
 8008d84:	08008dab 	.word	0x08008dab
 8008d88:	08008dc9 	.word	0x08008dc9
 8008d8c:	08008dc9 	.word	0x08008dc9
 8008d90:	08008dc9 	.word	0x08008dc9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d98:	3308      	adds	r3, #8
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 fd9b 	bl	800a8d8 <RCCEx_PLL2_Config>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008da8:	e00f      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dae:	3328      	adds	r3, #40	@ 0x28
 8008db0:	2101      	movs	r1, #1
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 fe42 	bl	800aa3c <RCCEx_PLL3_Config>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008dbe:	e004      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dc6:	e000      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10b      	bne.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008dd2:	4b96      	ldr	r3, [pc, #600]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd6:	f023 0107 	bic.w	r1, r3, #7
 8008dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de2:	4a92      	ldr	r2, [pc, #584]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008de4:	430b      	orrs	r3, r1
 8008de6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008de8:	e003      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f002 0304 	and.w	r3, r2, #4
 8008dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e02:	2300      	movs	r3, #0
 8008e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e08:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	d043      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d824      	bhi.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e24 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008e71 	.word	0x08008e71
 8008e28:	08008e3d 	.word	0x08008e3d
 8008e2c:	08008e53 	.word	0x08008e53
 8008e30:	08008e71 	.word	0x08008e71
 8008e34:	08008e71 	.word	0x08008e71
 8008e38:	08008e71 	.word	0x08008e71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e40:	3308      	adds	r3, #8
 8008e42:	2101      	movs	r1, #1
 8008e44:	4618      	mov	r0, r3
 8008e46:	f001 fd47 	bl	800a8d8 <RCCEx_PLL2_Config>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008e50:	e00f      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e56:	3328      	adds	r3, #40	@ 0x28
 8008e58:	2101      	movs	r1, #1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f001 fdee 	bl	800aa3c <RCCEx_PLL3_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008e66:	e004      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e6e:	e000      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e7a:	4b6c      	ldr	r3, [pc, #432]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e7e:	f023 0107 	bic.w	r1, r3, #7
 8008e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e8a:	4a68      	ldr	r2, [pc, #416]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e90:	e003      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f002 0320 	and.w	r3, r2, #32
 8008ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	d055      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ec6:	d033      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ecc:	d82c      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ed2:	d02f      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ed8:	d826      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008eda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ede:	d02b      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008ee0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ee4:	d820      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eea:	d012      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ef0:	d81a      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d022      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008efa:	d115      	bne.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f00:	3308      	adds	r3, #8
 8008f02:	2100      	movs	r1, #0
 8008f04:	4618      	mov	r0, r3
 8008f06:	f001 fce7 	bl	800a8d8 <RCCEx_PLL2_Config>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f10:	e015      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f16:	3328      	adds	r3, #40	@ 0x28
 8008f18:	2102      	movs	r1, #2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f001 fd8e 	bl	800aa3c <RCCEx_PLL3_Config>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f26:	e00a      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f2e:	e006      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008f30:	bf00      	nop
 8008f32:	e004      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008f34:	bf00      	nop
 8008f36:	e002      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008f38:	bf00      	nop
 8008f3a:	e000      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10b      	bne.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f46:	4b39      	ldr	r3, [pc, #228]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f4a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f56:	4a35      	ldr	r2, [pc, #212]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f5c:	e003      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f76:	2300      	movs	r3, #0
 8008f78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4313      	orrs	r3, r2
 8008f84:	d058      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f8e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008f92:	d033      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008f94:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008f98:	d82c      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f9e:	d02f      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fa4:	d826      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008fa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008faa:	d02b      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008fac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fb0:	d820      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fb6:	d012      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008fb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fbc:	d81a      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d022      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fc6:	d115      	bne.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fcc:	3308      	adds	r3, #8
 8008fce:	2100      	movs	r1, #0
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f001 fc81 	bl	800a8d8 <RCCEx_PLL2_Config>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008fdc:	e015      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe2:	3328      	adds	r3, #40	@ 0x28
 8008fe4:	2102      	movs	r1, #2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f001 fd28 	bl	800aa3c <RCCEx_PLL3_Config>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008ff2:	e00a      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ffa:	e006      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ffc:	bf00      	nop
 8008ffe:	e004      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009000:	bf00      	nop
 8009002:	e002      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009004:	bf00      	nop
 8009006:	e000      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800900a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10e      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009012:	4b06      	ldr	r3, [pc, #24]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009016:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800901a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800901e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009022:	4a02      	ldr	r2, [pc, #8]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009024:	430b      	orrs	r3, r1
 8009026:	6593      	str	r3, [r2, #88]	@ 0x58
 8009028:	e006      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800902a:	bf00      	nop
 800902c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009030:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009034:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009048:	2300      	movs	r3, #0
 800904a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800904e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009052:	460b      	mov	r3, r1
 8009054:	4313      	orrs	r3, r2
 8009056:	d055      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009058:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800905c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009060:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009064:	d033      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009066:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800906a:	d82c      	bhi.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800906c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009070:	d02f      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009076:	d826      	bhi.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009078:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800907c:	d02b      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800907e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009082:	d820      	bhi.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009088:	d012      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800908a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800908e:	d81a      	bhi.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009090:	2b00      	cmp	r3, #0
 8009092:	d022      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8009094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009098:	d115      	bne.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800909a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800909e:	3308      	adds	r3, #8
 80090a0:	2100      	movs	r1, #0
 80090a2:	4618      	mov	r0, r3
 80090a4:	f001 fc18 	bl	800a8d8 <RCCEx_PLL2_Config>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80090ae:	e015      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b4:	3328      	adds	r3, #40	@ 0x28
 80090b6:	2102      	movs	r1, #2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 fcbf 	bl	800aa3c <RCCEx_PLL3_Config>
 80090be:	4603      	mov	r3, r0
 80090c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80090c4:	e00a      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80090cc:	e006      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80090ce:	bf00      	nop
 80090d0:	e004      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80090d2:	bf00      	nop
 80090d4:	e002      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80090d6:	bf00      	nop
 80090d8:	e000      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80090da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10b      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80090e4:	4ba1      	ldr	r3, [pc, #644]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80090e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80090ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090f4:	4a9d      	ldr	r2, [pc, #628]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80090f6:	430b      	orrs	r3, r1
 80090f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80090fa:	e003      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009100:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f002 0308 	and.w	r3, r2, #8
 8009110:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009114:	2300      	movs	r3, #0
 8009116:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800911a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800911e:	460b      	mov	r3, r1
 8009120:	4313      	orrs	r3, r2
 8009122:	d01e      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009124:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800912c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009130:	d10c      	bne.n	800914c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009136:	3328      	adds	r3, #40	@ 0x28
 8009138:	2102      	movs	r1, #2
 800913a:	4618      	mov	r0, r3
 800913c:	f001 fc7e 	bl	800aa3c <RCCEx_PLL3_Config>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800914c:	4b87      	ldr	r3, [pc, #540]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800914e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009150:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800915c:	4a83      	ldr	r2, [pc, #524]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800915e:	430b      	orrs	r3, r1
 8009160:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	f002 0310 	and.w	r3, r2, #16
 800916e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009172:	2300      	movs	r3, #0
 8009174:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009178:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800917c:	460b      	mov	r3, r1
 800917e:	4313      	orrs	r3, r2
 8009180:	d01e      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009186:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800918a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800918e:	d10c      	bne.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009194:	3328      	adds	r3, #40	@ 0x28
 8009196:	2102      	movs	r1, #2
 8009198:	4618      	mov	r0, r3
 800919a:	f001 fc4f 	bl	800aa3c <RCCEx_PLL3_Config>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80091aa:	4b70      	ldr	r3, [pc, #448]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80091b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80091ba:	4a6c      	ldr	r2, [pc, #432]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091bc:	430b      	orrs	r3, r1
 80091be:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80091cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091d0:	2300      	movs	r3, #0
 80091d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80091da:	460b      	mov	r3, r1
 80091dc:	4313      	orrs	r3, r2
 80091de:	d03e      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80091e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ec:	d022      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80091ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091f2:	d81b      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80091f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091fc:	d00b      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80091fe:	e015      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009204:	3308      	adds	r3, #8
 8009206:	2100      	movs	r1, #0
 8009208:	4618      	mov	r0, r3
 800920a:	f001 fb65 	bl	800a8d8 <RCCEx_PLL2_Config>
 800920e:	4603      	mov	r3, r0
 8009210:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009214:	e00f      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800921a:	3328      	adds	r3, #40	@ 0x28
 800921c:	2102      	movs	r1, #2
 800921e:	4618      	mov	r0, r3
 8009220:	f001 fc0c 	bl	800aa3c <RCCEx_PLL3_Config>
 8009224:	4603      	mov	r3, r0
 8009226:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800922a:	e004      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009232:	e000      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009236:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10b      	bne.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800923e:	4b4b      	ldr	r3, [pc, #300]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009242:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800924a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800924e:	4a47      	ldr	r2, [pc, #284]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009250:	430b      	orrs	r3, r1
 8009252:	6593      	str	r3, [r2, #88]	@ 0x58
 8009254:	e003      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009256:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800925a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800925e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800926a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800926c:	2300      	movs	r3, #0
 800926e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009270:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009274:	460b      	mov	r3, r1
 8009276:	4313      	orrs	r3, r2
 8009278:	d03b      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800927a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800927e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009282:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009286:	d01f      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8009288:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800928c:	d818      	bhi.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800928e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009292:	d003      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8009294:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009298:	d007      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800929a:	e011      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800929c:	4b33      	ldr	r3, [pc, #204]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800929e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a0:	4a32      	ldr	r2, [pc, #200]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80092a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80092a8:	e00f      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092ae:	3328      	adds	r3, #40	@ 0x28
 80092b0:	2101      	movs	r1, #1
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 fbc2 	bl	800aa3c <RCCEx_PLL3_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80092be:	e004      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092c6:	e000      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80092c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10b      	bne.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092d2:	4b26      	ldr	r3, [pc, #152]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80092d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80092da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092e2:	4a22      	ldr	r2, [pc, #136]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80092e4:	430b      	orrs	r3, r1
 80092e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80092e8:	e003      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80092f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80092fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8009300:	2300      	movs	r3, #0
 8009302:	677b      	str	r3, [r7, #116]	@ 0x74
 8009304:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009308:	460b      	mov	r3, r1
 800930a:	4313      	orrs	r3, r2
 800930c:	d034      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800930e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009314:	2b00      	cmp	r3, #0
 8009316:	d003      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8009318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800931c:	d007      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800931e:	e011      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009320:	4b12      	ldr	r3, [pc, #72]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009324:	4a11      	ldr	r2, [pc, #68]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800932a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800932c:	e00e      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800932e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009332:	3308      	adds	r3, #8
 8009334:	2102      	movs	r1, #2
 8009336:	4618      	mov	r0, r3
 8009338:	f001 face 	bl	800a8d8 <RCCEx_PLL2_Config>
 800933c:	4603      	mov	r3, r0
 800933e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009342:	e003      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800934a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800934c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10d      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009354:	4b05      	ldr	r3, [pc, #20]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009358:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800935c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009362:	4a02      	ldr	r2, [pc, #8]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009364:	430b      	orrs	r3, r1
 8009366:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009368:	e006      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800936a:	bf00      	nop
 800936c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009370:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009374:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009384:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009386:	2300      	movs	r3, #0
 8009388:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800938a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800938e:	460b      	mov	r3, r1
 8009390:	4313      	orrs	r3, r2
 8009392:	d00c      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009398:	3328      	adds	r3, #40	@ 0x28
 800939a:	2102      	movs	r1, #2
 800939c:	4618      	mov	r0, r3
 800939e:	f001 fb4d 	bl	800aa3c <RCCEx_PLL3_Config>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80093ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80093ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80093bc:	2300      	movs	r3, #0
 80093be:	667b      	str	r3, [r7, #100]	@ 0x64
 80093c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80093c4:	460b      	mov	r3, r1
 80093c6:	4313      	orrs	r3, r2
 80093c8:	d038      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80093ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093d6:	d018      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80093d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093dc:	d811      	bhi.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80093de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093e2:	d014      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80093e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093e8:	d80b      	bhi.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d011      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80093ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093f2:	d106      	bne.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093f4:	4bc3      	ldr	r3, [pc, #780]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f8:	4ac2      	ldr	r2, [pc, #776]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009400:	e008      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009408:	e004      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800940a:	bf00      	nop
 800940c:	e002      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800940e:	bf00      	nop
 8009410:	e000      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009414:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10b      	bne.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800941c:	4bb9      	ldr	r3, [pc, #740]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800941e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009420:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800942c:	4ab5      	ldr	r2, [pc, #724]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800942e:	430b      	orrs	r3, r1
 8009430:	6553      	str	r3, [r2, #84]	@ 0x54
 8009432:	e003      	b.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009434:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009438:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800943c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009448:	65bb      	str	r3, [r7, #88]	@ 0x58
 800944a:	2300      	movs	r3, #0
 800944c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800944e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009452:	460b      	mov	r3, r1
 8009454:	4313      	orrs	r3, r2
 8009456:	d009      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009458:	4baa      	ldr	r3, [pc, #680]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800945a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800945c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009466:	4aa7      	ldr	r2, [pc, #668]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009468:	430b      	orrs	r3, r1
 800946a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800946c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009478:	653b      	str	r3, [r7, #80]	@ 0x50
 800947a:	2300      	movs	r3, #0
 800947c:	657b      	str	r3, [r7, #84]	@ 0x54
 800947e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009482:	460b      	mov	r3, r1
 8009484:	4313      	orrs	r3, r2
 8009486:	d009      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009488:	4b9e      	ldr	r3, [pc, #632]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800948a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800948c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009496:	4a9b      	ldr	r2, [pc, #620]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009498:	430b      	orrs	r3, r1
 800949a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800949c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80094a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094aa:	2300      	movs	r3, #0
 80094ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80094b2:	460b      	mov	r3, r1
 80094b4:	4313      	orrs	r3, r2
 80094b6:	d009      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80094b8:	4b92      	ldr	r3, [pc, #584]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094bc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80094c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094c6:	4a8f      	ldr	r2, [pc, #572]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094c8:	430b      	orrs	r3, r1
 80094ca:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80094cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80094d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80094da:	2300      	movs	r3, #0
 80094dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80094de:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80094e2:	460b      	mov	r3, r1
 80094e4:	4313      	orrs	r3, r2
 80094e6:	d00e      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094e8:	4b86      	ldr	r3, [pc, #536]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	4a85      	ldr	r2, [pc, #532]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80094f2:	6113      	str	r3, [r2, #16]
 80094f4:	4b83      	ldr	r3, [pc, #524]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094f6:	6919      	ldr	r1, [r3, #16]
 80094f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009500:	4a80      	ldr	r2, [pc, #512]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009502:	430b      	orrs	r3, r1
 8009504:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009512:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009514:	2300      	movs	r3, #0
 8009516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009518:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800951c:	460b      	mov	r3, r1
 800951e:	4313      	orrs	r3, r2
 8009520:	d009      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009522:	4b78      	ldr	r3, [pc, #480]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009526:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800952a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800952e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009530:	4a74      	ldr	r2, [pc, #464]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009532:	430b      	orrs	r3, r1
 8009534:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009542:	633b      	str	r3, [r7, #48]	@ 0x30
 8009544:	2300      	movs	r3, #0
 8009546:	637b      	str	r3, [r7, #52]	@ 0x34
 8009548:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800954c:	460b      	mov	r3, r1
 800954e:	4313      	orrs	r3, r2
 8009550:	d00a      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009552:	4b6c      	ldr	r3, [pc, #432]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009556:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800955a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800955e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009562:	4a68      	ldr	r2, [pc, #416]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009564:	430b      	orrs	r3, r1
 8009566:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	2100      	movs	r1, #0
 8009572:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800957a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800957e:	460b      	mov	r3, r1
 8009580:	4313      	orrs	r3, r2
 8009582:	d011      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009588:	3308      	adds	r3, #8
 800958a:	2100      	movs	r1, #0
 800958c:	4618      	mov	r0, r3
 800958e:	f001 f9a3 	bl	800a8d8 <RCCEx_PLL2_Config>
 8009592:	4603      	mov	r3, r0
 8009594:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009598:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80095a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	2100      	movs	r1, #0
 80095b2:	6239      	str	r1, [r7, #32]
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80095ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80095be:	460b      	mov	r3, r1
 80095c0:	4313      	orrs	r3, r2
 80095c2:	d011      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095c8:	3308      	adds	r3, #8
 80095ca:	2101      	movs	r1, #1
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 f983 	bl	800a8d8 <RCCEx_PLL2_Config>
 80095d2:	4603      	mov	r3, r0
 80095d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80095d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80095e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	2100      	movs	r1, #0
 80095f2:	61b9      	str	r1, [r7, #24]
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	61fb      	str	r3, [r7, #28]
 80095fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80095fe:	460b      	mov	r3, r1
 8009600:	4313      	orrs	r3, r2
 8009602:	d011      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009608:	3308      	adds	r3, #8
 800960a:	2102      	movs	r1, #2
 800960c:	4618      	mov	r0, r3
 800960e:	f001 f963 	bl	800a8d8 <RCCEx_PLL2_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009618:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800961c:	2b00      	cmp	r3, #0
 800961e:	d003      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009620:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009624:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	2100      	movs	r1, #0
 8009632:	6139      	str	r1, [r7, #16]
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800963e:	460b      	mov	r3, r1
 8009640:	4313      	orrs	r3, r2
 8009642:	d011      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009648:	3328      	adds	r3, #40	@ 0x28
 800964a:	2100      	movs	r1, #0
 800964c:	4618      	mov	r0, r3
 800964e:	f001 f9f5 	bl	800aa3c <RCCEx_PLL3_Config>
 8009652:	4603      	mov	r3, r0
 8009654:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009660:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009664:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	2100      	movs	r1, #0
 8009672:	60b9      	str	r1, [r7, #8]
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	60fb      	str	r3, [r7, #12]
 800967a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800967e:	460b      	mov	r3, r1
 8009680:	4313      	orrs	r3, r2
 8009682:	d011      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009688:	3328      	adds	r3, #40	@ 0x28
 800968a:	2101      	movs	r1, #1
 800968c:	4618      	mov	r0, r3
 800968e:	f001 f9d5 	bl	800aa3c <RCCEx_PLL3_Config>
 8009692:	4603      	mov	r3, r0
 8009694:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009698:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80096a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	2100      	movs	r1, #0
 80096b2:	6039      	str	r1, [r7, #0]
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	607b      	str	r3, [r7, #4]
 80096ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80096be:	460b      	mov	r3, r1
 80096c0:	4313      	orrs	r3, r2
 80096c2:	d011      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096c8:	3328      	adds	r3, #40	@ 0x28
 80096ca:	2102      	movs	r1, #2
 80096cc:	4618      	mov	r0, r3
 80096ce:	f001 f9b5 	bl	800aa3c <RCCEx_PLL3_Config>
 80096d2:	4603      	mov	r3, r0
 80096d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80096d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d003      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80096e8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	e000      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80096fc:	46bd      	mov	sp, r7
 80096fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009702:	bf00      	nop
 8009704:	58024400 	.word	0x58024400

08009708 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b090      	sub	sp, #64	@ 0x40
 800970c:	af00      	add	r7, sp, #0
 800970e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009716:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800971a:	430b      	orrs	r3, r1
 800971c:	f040 8094 	bne.w	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009720:	4b97      	ldr	r3, [pc, #604]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	2b04      	cmp	r3, #4
 800972e:	f200 8087 	bhi.w	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009732:	a201      	add	r2, pc, #4	@ (adr r2, 8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	0800974d 	.word	0x0800974d
 800973c:	08009775 	.word	0x08009775
 8009740:	0800979d 	.word	0x0800979d
 8009744:	08009839 	.word	0x08009839
 8009748:	080097c5 	.word	0x080097c5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800974c:	4b8c      	ldr	r3, [pc, #560]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009754:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009758:	d108      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800975a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800975e:	4618      	mov	r0, r3
 8009760:	f000 ff68 	bl	800a634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009768:	f000 bc97 	b.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009770:	f000 bc93 	b.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009774:	4b82      	ldr	r3, [pc, #520]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800977c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009780:	d108      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009782:	f107 0318 	add.w	r3, r7, #24
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fcac 	bl	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009790:	f000 bc83 	b.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009798:	f000 bc7f 	b.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800979c:	4b78      	ldr	r3, [pc, #480]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097a8:	d108      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097aa:	f107 030c 	add.w	r3, r7, #12
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 fdec 	bl	800a38c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097b8:	f000 bc6f 	b.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c0:	f000 bc6b 	b.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097c4:	4b6e      	ldr	r3, [pc, #440]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097cc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097ce:	4b6c      	ldr	r3, [pc, #432]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0304 	and.w	r3, r3, #4
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	d10c      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80097da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d109      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097e0:	4b67      	ldr	r3, [pc, #412]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	08db      	lsrs	r3, r3, #3
 80097e6:	f003 0303 	and.w	r3, r3, #3
 80097ea:	4a66      	ldr	r2, [pc, #408]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80097ec:	fa22 f303 	lsr.w	r3, r2, r3
 80097f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097f2:	e01f      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097f4:	4b62      	ldr	r3, [pc, #392]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009800:	d106      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009808:	d102      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800980a:	4b5f      	ldr	r3, [pc, #380]	@ (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800980c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800980e:	e011      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009810:	4b5b      	ldr	r3, [pc, #364]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800981c:	d106      	bne.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800981e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009824:	d102      	bne.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009826:	4b59      	ldr	r3, [pc, #356]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800982a:	e003      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800982c:	2300      	movs	r3, #0
 800982e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009830:	f000 bc33 	b.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009834:	f000 bc31 	b.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009838:	4b55      	ldr	r3, [pc, #340]	@ (8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800983a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800983c:	f000 bc2d 	b.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009840:	2300      	movs	r3, #0
 8009842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009844:	f000 bc29 	b.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8009848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800984c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009850:	430b      	orrs	r3, r1
 8009852:	f040 809f 	bne.w	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8009856:	4b4a      	ldr	r3, [pc, #296]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800985a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800985e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009866:	d04d      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800986e:	f200 8084 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009874:	2bc0      	cmp	r3, #192	@ 0xc0
 8009876:	d07d      	beq.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987a:	2bc0      	cmp	r3, #192	@ 0xc0
 800987c:	d87d      	bhi.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009880:	2b80      	cmp	r3, #128	@ 0x80
 8009882:	d02d      	beq.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009886:	2b80      	cmp	r3, #128	@ 0x80
 8009888:	d877      	bhi.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800988a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8009890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009892:	2b40      	cmp	r3, #64	@ 0x40
 8009894:	d012      	beq.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009896:	e070      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009898:	4b39      	ldr	r3, [pc, #228]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098a4:	d107      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fec2 	bl	800a634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098b4:	e3f1      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ba:	e3ee      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098bc:	4b30      	ldr	r3, [pc, #192]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098c8:	d107      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ca:	f107 0318 	add.w	r3, r7, #24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fc08 	bl	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d8:	e3df      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098de:	e3dc      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098e0:	4b27      	ldr	r3, [pc, #156]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ec:	d107      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ee:	f107 030c 	add.w	r3, r7, #12
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fd4a 	bl	800a38c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098fc:	e3cd      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009902:	e3ca      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009904:	4b1e      	ldr	r3, [pc, #120]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009908:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800990c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800990e:	4b1c      	ldr	r3, [pc, #112]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0304 	and.w	r3, r3, #4
 8009916:	2b04      	cmp	r3, #4
 8009918:	d10c      	bne.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800991a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800991c:	2b00      	cmp	r3, #0
 800991e:	d109      	bne.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009920:	4b17      	ldr	r3, [pc, #92]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	08db      	lsrs	r3, r3, #3
 8009926:	f003 0303 	and.w	r3, r3, #3
 800992a:	4a16      	ldr	r2, [pc, #88]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800992c:	fa22 f303 	lsr.w	r3, r2, r3
 8009930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009932:	e01e      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009934:	4b12      	ldr	r3, [pc, #72]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800993c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009940:	d106      	bne.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009944:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009948:	d102      	bne.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800994a:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800994c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800994e:	e010      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009950:	4b0b      	ldr	r3, [pc, #44]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800995c:	d106      	bne.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800995e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009964:	d102      	bne.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009966:	4b09      	ldr	r3, [pc, #36]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800996a:	e002      	b.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009970:	e393      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009972:	e392      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009974:	4b06      	ldr	r3, [pc, #24]	@ (8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009978:	e38f      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800997e:	e38c      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009980:	58024400 	.word	0x58024400
 8009984:	03d09000 	.word	0x03d09000
 8009988:	003d0900 	.word	0x003d0900
 800998c:	007a1200 	.word	0x007a1200
 8009990:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009998:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800999c:	430b      	orrs	r3, r1
 800999e:	f040 809c 	bne.w	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80099a2:	4b9e      	ldr	r3, [pc, #632]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80099a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099a6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80099aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099b2:	d054      	beq.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099ba:	f200 808b 	bhi.w	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80099c4:	f000 8083 	beq.w	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80099ce:	f200 8081 	bhi.w	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80099d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099d8:	d02f      	beq.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e0:	d878      	bhi.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099ee:	d012      	beq.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80099f0:	e070      	b.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099f2:	4b8a      	ldr	r3, [pc, #552]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099fe:	d107      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fe15 	bl	800a634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a0e:	e344      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a14:	e341      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a16:	4b81      	ldr	r3, [pc, #516]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a22:	d107      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a24:	f107 0318 	add.w	r3, r7, #24
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 fb5b 	bl	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a32:	e332      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a38:	e32f      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a3a:	4b78      	ldr	r3, [pc, #480]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a46:	d107      	bne.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a48:	f107 030c 	add.w	r3, r7, #12
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fc9d 	bl	800a38c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a56:	e320      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a5c:	e31d      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a68:	4b6c      	ldr	r3, [pc, #432]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0304 	and.w	r3, r3, #4
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d10c      	bne.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d109      	bne.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a7a:	4b68      	ldr	r3, [pc, #416]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	08db      	lsrs	r3, r3, #3
 8009a80:	f003 0303 	and.w	r3, r3, #3
 8009a84:	4a66      	ldr	r2, [pc, #408]	@ (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009a86:	fa22 f303 	lsr.w	r3, r2, r3
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a8c:	e01e      	b.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a8e:	4b63      	ldr	r3, [pc, #396]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a9a:	d106      	bne.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aa2:	d102      	bne.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009aa4:	4b5f      	ldr	r3, [pc, #380]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009aa8:	e010      	b.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ab2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ab6:	d106      	bne.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abe:	d102      	bne.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ac0:	4b59      	ldr	r3, [pc, #356]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ac4:	e002      	b.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8009aca:	e2e6      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009acc:	e2e5      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ace:	4b57      	ldr	r3, [pc, #348]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad2:	e2e2      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad8:	e2df      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ade:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	f040 80a7 	bne.w	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009af0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009af8:	d055      	beq.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b00:	f200 8096 	bhi.w	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009b0a:	f000 8084 	beq.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009b14:	f200 808c 	bhi.w	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b1e:	d030      	beq.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8009b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b26:	f200 8083 	bhi.w	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d004      	beq.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b36:	d012      	beq.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8009b38:	e07a      	b.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b3a:	4b38      	ldr	r3, [pc, #224]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b46:	d107      	bne.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 fd71 	bl	800a634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b56:	e2a0      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b5c:	e29d      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b6a:	d107      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b6c:	f107 0318 	add.w	r3, r7, #24
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 fab7 	bl	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b7a:	e28e      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b80:	e28b      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b82:	4b26      	ldr	r3, [pc, #152]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b8e:	d107      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b90:	f107 030c 	add.w	r3, r7, #12
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 fbf9 	bl	800a38c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b9e:	e27c      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ba4:	e279      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009baa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	d10c      	bne.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d109      	bne.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bc2:	4b16      	ldr	r3, [pc, #88]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	08db      	lsrs	r3, r3, #3
 8009bc8:	f003 0303 	and.w	r3, r3, #3
 8009bcc:	4a14      	ldr	r2, [pc, #80]	@ (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009bce:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bd4:	e01e      	b.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bd6:	4b11      	ldr	r3, [pc, #68]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009be2:	d106      	bne.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bea:	d102      	bne.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009bec:	4b0d      	ldr	r3, [pc, #52]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bf0:	e010      	b.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bfe:	d106      	bne.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c06:	d102      	bne.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c08:	4b07      	ldr	r3, [pc, #28]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c0c:	e002      	b.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009c12:	e242      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009c14:	e241      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c16:	4b05      	ldr	r3, [pc, #20]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c1a:	e23e      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	03d09000 	.word	0x03d09000
 8009c24:	003d0900 	.word	0x003d0900
 8009c28:	007a1200 	.word	0x007a1200
 8009c2c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c34:	e231      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c3a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009c3e:	430b      	orrs	r3, r1
 8009c40:	f040 8085 	bne.w	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009c44:	4b9c      	ldr	r3, [pc, #624]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c48:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c54:	d06b      	beq.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c5c:	d874      	bhi.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c64:	d056      	beq.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8009c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c6c:	d86c      	bhi.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c74:	d03b      	beq.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8009c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c7c:	d864      	bhi.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c84:	d021      	beq.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8009c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c8c:	d85c      	bhi.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d004      	beq.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8009c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c9a:	d004      	beq.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8009c9c:	e054      	b.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009c9e:	f7fe fb5f 	bl	8008360 <HAL_RCC_GetPCLK1Freq>
 8009ca2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ca4:	e1f9      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ca6:	4b84      	ldr	r3, [pc, #528]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cb2:	d107      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cb4:	f107 0318 	add.w	r3, r7, #24
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fa13 	bl	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cc2:	e1ea      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc8:	e1e7      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cca:	4b7b      	ldr	r3, [pc, #492]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cd6:	d107      	bne.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cd8:	f107 030c 	add.w	r3, r7, #12
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 fb55 	bl	800a38c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ce6:	e1d8      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cec:	e1d5      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009cee:	4b72      	ldr	r3, [pc, #456]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d109      	bne.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	08db      	lsrs	r3, r3, #3
 8009d00:	f003 0303 	and.w	r3, r3, #3
 8009d04:	4a6d      	ldr	r2, [pc, #436]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009d06:	fa22 f303 	lsr.w	r3, r2, r3
 8009d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d0c:	e1c5      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d12:	e1c2      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009d14:	4b68      	ldr	r3, [pc, #416]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d20:	d102      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8009d22:	4b67      	ldr	r3, [pc, #412]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d26:	e1b8      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d2c:	e1b5      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009d2e:	4b62      	ldr	r3, [pc, #392]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d3a:	d102      	bne.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8009d3c:	4b61      	ldr	r3, [pc, #388]	@ (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d40:	e1ab      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d46:	e1a8      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d4c:	e1a5      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d52:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009d56:	430b      	orrs	r3, r1
 8009d58:	d173      	bne.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009d5a:	4b57      	ldr	r3, [pc, #348]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d62:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d6a:	d02f      	beq.n	8009dcc <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d72:	d863      	bhi.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d004      	beq.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d80:	d012      	beq.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8009d82:	e05b      	b.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d84:	4b4c      	ldr	r3, [pc, #304]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d90:	d107      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d92:	f107 0318 	add.w	r3, r7, #24
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 f9a4 	bl	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009da0:	e17b      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009da6:	e178      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009da8:	4b43      	ldr	r3, [pc, #268]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009db0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009db4:	d107      	bne.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009db6:	f107 030c 	add.w	r3, r7, #12
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 fae6 	bl	800a38c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dc4:	e169      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dca:	e166      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009dd4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009dd6:	4b38      	ldr	r3, [pc, #224]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0304 	and.w	r3, r3, #4
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d10c      	bne.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8009de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d109      	bne.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009de8:	4b33      	ldr	r3, [pc, #204]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	08db      	lsrs	r3, r3, #3
 8009dee:	f003 0303 	and.w	r3, r3, #3
 8009df2:	4a32      	ldr	r2, [pc, #200]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009df4:	fa22 f303 	lsr.w	r3, r2, r3
 8009df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dfa:	e01e      	b.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e08:	d106      	bne.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e10:	d102      	bne.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e12:	4b2b      	ldr	r3, [pc, #172]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e16:	e010      	b.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e18:	4b27      	ldr	r3, [pc, #156]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e24:	d106      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8009e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e2c:	d102      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e2e:	4b25      	ldr	r3, [pc, #148]	@ (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e32:	e002      	b.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e38:	e12f      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009e3a:	e12e      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e40:	e12b      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e46:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009e4a:	430b      	orrs	r3, r1
 8009e4c:	d13c      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e56:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d004      	beq.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e64:	d012      	beq.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009e66:	e023      	b.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e68:	4b13      	ldr	r3, [pc, #76]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e74:	d107      	bne.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 fbda 	bl	800a634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e84:	e109      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e8a:	e106      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e98:	d107      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e9a:	f107 0318 	add.w	r3, r7, #24
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 f920 	bl	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ea8:	e0f7      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eae:	e0f4      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eb4:	e0f1      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009eb6:	bf00      	nop
 8009eb8:	58024400 	.word	0x58024400
 8009ebc:	03d09000 	.word	0x03d09000
 8009ec0:	003d0900 	.word	0x003d0900
 8009ec4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ecc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	f040 8091 	bne.w	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009ed6:	4b73      	ldr	r3, [pc, #460]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eda:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009ede:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009ee6:	f000 8081 	beq.w	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eec:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009ef0:	d87f      	bhi.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ef8:	d06b      	beq.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f00:	d877      	bhi.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f08:	d056      	beq.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f10:	d86f      	bhi.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009f18:	d03b      	beq.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009f20:	d867      	bhi.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f28:	d021      	beq.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f30:	d85f      	bhi.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d004      	beq.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f3e:	d004      	beq.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009f40:	e057      	b.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009f42:	f000 f8b9 	bl	800a0b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f48:	e0a7      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f4a:	4b56      	ldr	r3, [pc, #344]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f56:	d107      	bne.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f58:	f107 0318 	add.w	r3, r7, #24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 f8c1 	bl	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f66:	e098      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f6c:	e095      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f6e:	4b4d      	ldr	r3, [pc, #308]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f7a:	d107      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f7c:	f107 030c 	add.w	r3, r7, #12
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fa03 	bl	800a38c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f8a:	e086      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f90:	e083      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f92:	4b44      	ldr	r3, [pc, #272]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 0304 	and.w	r3, r3, #4
 8009f9a:	2b04      	cmp	r3, #4
 8009f9c:	d109      	bne.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f9e:	4b41      	ldr	r3, [pc, #260]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	08db      	lsrs	r3, r3, #3
 8009fa4:	f003 0303 	and.w	r3, r3, #3
 8009fa8:	4a3f      	ldr	r2, [pc, #252]	@ (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009faa:	fa22 f303 	lsr.w	r3, r2, r3
 8009fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fb0:	e073      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fb6:	e070      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009fb8:	4b3a      	ldr	r3, [pc, #232]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fc4:	d102      	bne.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8009fc6:	4b39      	ldr	r3, [pc, #228]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8009fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fca:	e066      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd0:	e063      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fd2:	4b34      	ldr	r3, [pc, #208]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fde:	d102      	bne.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8009fe0:	4b33      	ldr	r3, [pc, #204]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fe4:	e059      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fea:	e056      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fec:	4b31      	ldr	r3, [pc, #196]	@ (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff0:	e053      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff6:	e050      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ffc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a000:	430b      	orrs	r3, r1
 800a002:	d148      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a004:	4b27      	ldr	r3, [pc, #156]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a008:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a00c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a014:	d02a      	beq.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a01c:	d838      	bhi.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800a024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a02a:	d00d      	beq.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800a02c:	e030      	b.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a02e:	4b1d      	ldr	r3, [pc, #116]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a03a:	d102      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800a03c:	4b1c      	ldr	r3, [pc, #112]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800a03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a040:	e02b      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a046:	e028      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a048:	4b16      	ldr	r3, [pc, #88]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a054:	d107      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a05a:	4618      	mov	r0, r3
 800a05c:	f000 faea 	bl	800a634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a064:	e019      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a06a:	e016      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a06c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a078:	d107      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a07a:	f107 0318 	add.w	r3, r7, #24
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 f830 	bl	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a088:	e007      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a08a:	2300      	movs	r3, #0
 800a08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a08e:	e004      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a094:	e001      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3740      	adds	r7, #64	@ 0x40
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	58024400 	.word	0x58024400
 800a0a8:	03d09000 	.word	0x03d09000
 800a0ac:	003d0900 	.word	0x003d0900
 800a0b0:	007a1200 	.word	0x007a1200
 800a0b4:	00bb8000 	.word	0x00bb8000

0800a0b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800a0bc:	f7fe f920 	bl	8008300 <HAL_RCC_GetHCLKFreq>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	4b06      	ldr	r3, [pc, #24]	@ (800a0dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	091b      	lsrs	r3, r3, #4
 800a0c8:	f003 0307 	and.w	r3, r3, #7
 800a0cc:	4904      	ldr	r1, [pc, #16]	@ (800a0e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a0ce:	5ccb      	ldrb	r3, [r1, r3]
 800a0d0:	f003 031f 	and.w	r3, r3, #31
 800a0d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	58024400 	.word	0x58024400
 800a0e0:	0800f920 	.word	0x0800f920

0800a0e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b089      	sub	sp, #36	@ 0x24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0ec:	4ba1      	ldr	r3, [pc, #644]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f0:	f003 0303 	and.w	r3, r3, #3
 800a0f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a0f6:	4b9f      	ldr	r3, [pc, #636]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fa:	0b1b      	lsrs	r3, r3, #12
 800a0fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a100:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a102:	4b9c      	ldr	r3, [pc, #624]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a106:	091b      	lsrs	r3, r3, #4
 800a108:	f003 0301 	and.w	r3, r3, #1
 800a10c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a10e:	4b99      	ldr	r3, [pc, #612]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a112:	08db      	lsrs	r3, r3, #3
 800a114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	fb02 f303 	mul.w	r3, r2, r3
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a126:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 8111 	beq.w	800a354 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	2b02      	cmp	r3, #2
 800a136:	f000 8083 	beq.w	800a240 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	f200 80a1 	bhi.w	800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d003      	beq.n	800a150 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d056      	beq.n	800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a14e:	e099      	b.n	800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a150:	4b88      	ldr	r3, [pc, #544]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 0320 	and.w	r3, r3, #32
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d02d      	beq.n	800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a15c:	4b85      	ldr	r3, [pc, #532]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	08db      	lsrs	r3, r3, #3
 800a162:	f003 0303 	and.w	r3, r3, #3
 800a166:	4a84      	ldr	r2, [pc, #528]	@ (800a378 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a168:	fa22 f303 	lsr.w	r3, r2, r3
 800a16c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	ee07 3a90 	vmov	s15, r3
 800a174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	ee07 3a90 	vmov	s15, r3
 800a17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a186:	4b7b      	ldr	r3, [pc, #492]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a196:	ed97 6a03 	vldr	s12, [r7, #12]
 800a19a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a37c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a1b6:	e087      	b.n	800a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a380 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ca:	4b6a      	ldr	r3, [pc, #424]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a37c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1fa:	e065      	b.n	800a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a206:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a384 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a20e:	4b59      	ldr	r3, [pc, #356]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a222:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a37c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a23e:	e043      	b.n	800a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a252:	4b48      	ldr	r3, [pc, #288]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a262:	ed97 6a03 	vldr	s12, [r7, #12]
 800a266:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a37c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a27e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a282:	e021      	b.n	800a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	ee07 3a90 	vmov	s15, r3
 800a28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a28e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a384 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a296:	4b37      	ldr	r3, [pc, #220]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a29e:	ee07 3a90 	vmov	s15, r3
 800a2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a37c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a2c8:	4b2a      	ldr	r3, [pc, #168]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2cc:	0a5b      	lsrs	r3, r3, #9
 800a2ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2d2:	ee07 3a90 	vmov	s15, r3
 800a2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ee:	ee17 2a90 	vmov	r2, s15
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a2f6:	4b1f      	ldr	r3, [pc, #124]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2fa:	0c1b      	lsrs	r3, r3, #16
 800a2fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a300:	ee07 3a90 	vmov	s15, r3
 800a304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a308:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a30c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a310:	edd7 6a07 	vldr	s13, [r7, #28]
 800a314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a31c:	ee17 2a90 	vmov	r2, s15
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a324:	4b13      	ldr	r3, [pc, #76]	@ (800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a328:	0e1b      	lsrs	r3, r3, #24
 800a32a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a32e:	ee07 3a90 	vmov	s15, r3
 800a332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a33a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a33e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a34a:	ee17 2a90 	vmov	r2, s15
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a352:	e008      	b.n	800a366 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	609a      	str	r2, [r3, #8]
}
 800a366:	bf00      	nop
 800a368:	3724      	adds	r7, #36	@ 0x24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	58024400 	.word	0x58024400
 800a378:	03d09000 	.word	0x03d09000
 800a37c:	46000000 	.word	0x46000000
 800a380:	4c742400 	.word	0x4c742400
 800a384:	4a742400 	.word	0x4a742400
 800a388:	4af42400 	.word	0x4af42400

0800a38c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b089      	sub	sp, #36	@ 0x24
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a394:	4ba1      	ldr	r3, [pc, #644]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a398:	f003 0303 	and.w	r3, r3, #3
 800a39c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a39e:	4b9f      	ldr	r3, [pc, #636]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a2:	0d1b      	lsrs	r3, r3, #20
 800a3a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a3a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a3aa:	4b9c      	ldr	r3, [pc, #624]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ae:	0a1b      	lsrs	r3, r3, #8
 800a3b0:	f003 0301 	and.w	r3, r3, #1
 800a3b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a3b6:	4b99      	ldr	r3, [pc, #612]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3ba:	08db      	lsrs	r3, r3, #3
 800a3bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	fb02 f303 	mul.w	r3, r2, r3
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 8111 	beq.w	800a5fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	f000 8083 	beq.w	800a4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	f200 80a1 	bhi.w	800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d056      	beq.n	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a3f6:	e099      	b.n	800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3f8:	4b88      	ldr	r3, [pc, #544]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0320 	and.w	r3, r3, #32
 800a400:	2b00      	cmp	r3, #0
 800a402:	d02d      	beq.n	800a460 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a404:	4b85      	ldr	r3, [pc, #532]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	08db      	lsrs	r3, r3, #3
 800a40a:	f003 0303 	and.w	r3, r3, #3
 800a40e:	4a84      	ldr	r2, [pc, #528]	@ (800a620 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a410:	fa22 f303 	lsr.w	r3, r2, r3
 800a414:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	ee07 3a90 	vmov	s15, r3
 800a41c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	ee07 3a90 	vmov	s15, r3
 800a426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a42e:	4b7b      	ldr	r3, [pc, #492]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a43e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a442:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a624 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a44e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a45a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a45e:	e087      	b.n	800a570 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a628 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a472:	4b6a      	ldr	r3, [pc, #424]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a482:	ed97 6a03 	vldr	s12, [r7, #12]
 800a486:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a624 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4a2:	e065      	b.n	800a570 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a62c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4b6:	4b59      	ldr	r3, [pc, #356]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a624 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4e6:	e043      	b.n	800a570 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	ee07 3a90 	vmov	s15, r3
 800a4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a4f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fa:	4b48      	ldr	r3, [pc, #288]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a50e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a624 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a522:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a52a:	e021      	b.n	800a570 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	ee07 3a90 	vmov	s15, r3
 800a532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a536:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a62c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a53e:	4b37      	ldr	r3, [pc, #220]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a54e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a552:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a624 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a55e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a56e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a570:	4b2a      	ldr	r3, [pc, #168]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a574:	0a5b      	lsrs	r3, r3, #9
 800a576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a57a:	ee07 3a90 	vmov	s15, r3
 800a57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a58a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a58e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a596:	ee17 2a90 	vmov	r2, s15
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a59e:	4b1f      	ldr	r3, [pc, #124]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a2:	0c1b      	lsrs	r3, r3, #16
 800a5a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5a8:	ee07 3a90 	vmov	s15, r3
 800a5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a5b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5c4:	ee17 2a90 	vmov	r2, s15
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a5cc:	4b13      	ldr	r3, [pc, #76]	@ (800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d0:	0e1b      	lsrs	r3, r3, #24
 800a5d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a5e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5f2:	ee17 2a90 	vmov	r2, s15
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a5fa:	e008      	b.n	800a60e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	609a      	str	r2, [r3, #8]
}
 800a60e:	bf00      	nop
 800a610:	3724      	adds	r7, #36	@ 0x24
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	58024400 	.word	0x58024400
 800a620:	03d09000 	.word	0x03d09000
 800a624:	46000000 	.word	0x46000000
 800a628:	4c742400 	.word	0x4c742400
 800a62c:	4a742400 	.word	0x4a742400
 800a630:	4af42400 	.word	0x4af42400

0800a634 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a634:	b480      	push	{r7}
 800a636:	b089      	sub	sp, #36	@ 0x24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a63c:	4ba0      	ldr	r3, [pc, #640]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a640:	f003 0303 	and.w	r3, r3, #3
 800a644:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a646:	4b9e      	ldr	r3, [pc, #632]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64a:	091b      	lsrs	r3, r3, #4
 800a64c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a650:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a652:	4b9b      	ldr	r3, [pc, #620]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a65c:	4b98      	ldr	r3, [pc, #608]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a65e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a660:	08db      	lsrs	r3, r3, #3
 800a662:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	fb02 f303 	mul.w	r3, r2, r3
 800a66c:	ee07 3a90 	vmov	s15, r3
 800a670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a674:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f000 8111 	beq.w	800a8a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	2b02      	cmp	r3, #2
 800a684:	f000 8083 	beq.w	800a78e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	f200 80a1 	bhi.w	800a7d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d056      	beq.n	800a74a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a69c:	e099      	b.n	800a7d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a69e:	4b88      	ldr	r3, [pc, #544]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0320 	and.w	r3, r3, #32
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d02d      	beq.n	800a706 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6aa:	4b85      	ldr	r3, [pc, #532]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	08db      	lsrs	r3, r3, #3
 800a6b0:	f003 0303 	and.w	r3, r3, #3
 800a6b4:	4a83      	ldr	r2, [pc, #524]	@ (800a8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	ee07 3a90 	vmov	s15, r3
 800a6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	ee07 3a90 	vmov	s15, r3
 800a6cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6d4:	4b7a      	ldr	r3, [pc, #488]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6dc:	ee07 3a90 	vmov	s15, r3
 800a6e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6e8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a700:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a704:	e087      	b.n	800a816 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	ee07 3a90 	vmov	s15, r3
 800a70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a710:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a8cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a718:	4b69      	ldr	r3, [pc, #420]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a71a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a720:	ee07 3a90 	vmov	s15, r3
 800a724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a728:	ed97 6a03 	vldr	s12, [r7, #12]
 800a72c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a738:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a73c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a740:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a744:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a748:	e065      	b.n	800a816 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	ee07 3a90 	vmov	s15, r3
 800a750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a754:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a75c:	4b58      	ldr	r3, [pc, #352]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a764:	ee07 3a90 	vmov	s15, r3
 800a768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a76c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a770:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a77c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a784:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a788:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a78c:	e043      	b.n	800a816 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	ee07 3a90 	vmov	s15, r3
 800a794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a798:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a8d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a79c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7a0:	4b47      	ldr	r3, [pc, #284]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a8:	ee07 3a90 	vmov	s15, r3
 800a7ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7b4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7d0:	e021      	b.n	800a816 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	ee07 3a90 	vmov	s15, r3
 800a7d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7dc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a8cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a7e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7e4:	4b36      	ldr	r3, [pc, #216]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ec:	ee07 3a90 	vmov	s15, r3
 800a7f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7f8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a804:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a80c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a810:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a814:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a816:	4b2a      	ldr	r3, [pc, #168]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a81a:	0a5b      	lsrs	r3, r3, #9
 800a81c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a820:	ee07 3a90 	vmov	s15, r3
 800a824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a828:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a82c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a830:	edd7 6a07 	vldr	s13, [r7, #28]
 800a834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a83c:	ee17 2a90 	vmov	r2, s15
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a844:	4b1e      	ldr	r3, [pc, #120]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a848:	0c1b      	lsrs	r3, r3, #16
 800a84a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a84e:	ee07 3a90 	vmov	s15, r3
 800a852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a856:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a85a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a85e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a86a:	ee17 2a90 	vmov	r2, s15
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a872:	4b13      	ldr	r3, [pc, #76]	@ (800a8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a876:	0e1b      	lsrs	r3, r3, #24
 800a878:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a87c:	ee07 3a90 	vmov	s15, r3
 800a880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a884:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a888:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a88c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a898:	ee17 2a90 	vmov	r2, s15
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a8a0:	e008      	b.n	800a8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	609a      	str	r2, [r3, #8]
}
 800a8b4:	bf00      	nop
 800a8b6:	3724      	adds	r7, #36	@ 0x24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	58024400 	.word	0x58024400
 800a8c4:	03d09000 	.word	0x03d09000
 800a8c8:	46000000 	.word	0x46000000
 800a8cc:	4c742400 	.word	0x4c742400
 800a8d0:	4a742400 	.word	0x4a742400
 800a8d4:	4af42400 	.word	0x4af42400

0800a8d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a8e6:	4b53      	ldr	r3, [pc, #332]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ea:	f003 0303 	and.w	r3, r3, #3
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d101      	bne.n	800a8f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e099      	b.n	800aa2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a8f6:	4b4f      	ldr	r3, [pc, #316]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a4e      	ldr	r2, [pc, #312]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a8fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a902:	f7f6 ff83 	bl	800180c <HAL_GetTick>
 800a906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a908:	e008      	b.n	800a91c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a90a:	f7f6 ff7f 	bl	800180c <HAL_GetTick>
 800a90e:	4602      	mov	r2, r0
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	2b02      	cmp	r3, #2
 800a916:	d901      	bls.n	800a91c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a918:	2303      	movs	r3, #3
 800a91a:	e086      	b.n	800aa2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a91c:	4b45      	ldr	r3, [pc, #276]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1f0      	bne.n	800a90a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a928:	4b42      	ldr	r3, [pc, #264]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	031b      	lsls	r3, r3, #12
 800a936:	493f      	ldr	r1, [pc, #252]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a938:	4313      	orrs	r3, r2
 800a93a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	3b01      	subs	r3, #1
 800a942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	025b      	lsls	r3, r3, #9
 800a94e:	b29b      	uxth	r3, r3
 800a950:	431a      	orrs	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	3b01      	subs	r3, #1
 800a958:	041b      	lsls	r3, r3, #16
 800a95a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a95e:	431a      	orrs	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	3b01      	subs	r3, #1
 800a966:	061b      	lsls	r3, r3, #24
 800a968:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a96c:	4931      	ldr	r1, [pc, #196]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a96e:	4313      	orrs	r3, r2
 800a970:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a972:	4b30      	ldr	r3, [pc, #192]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a976:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	492d      	ldr	r1, [pc, #180]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a980:	4313      	orrs	r3, r2
 800a982:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a984:	4b2b      	ldr	r3, [pc, #172]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a988:	f023 0220 	bic.w	r2, r3, #32
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	4928      	ldr	r1, [pc, #160]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a992:	4313      	orrs	r3, r2
 800a994:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a996:	4b27      	ldr	r3, [pc, #156]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a99a:	4a26      	ldr	r2, [pc, #152]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a99c:	f023 0310 	bic.w	r3, r3, #16
 800a9a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a9a2:	4b24      	ldr	r3, [pc, #144]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9a6:	4b24      	ldr	r3, [pc, #144]	@ (800aa38 <RCCEx_PLL2_Config+0x160>)
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	69d2      	ldr	r2, [r2, #28]
 800a9ae:	00d2      	lsls	r2, r2, #3
 800a9b0:	4920      	ldr	r1, [pc, #128]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a9b6:	4b1f      	ldr	r3, [pc, #124]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ba:	4a1e      	ldr	r2, [pc, #120]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9bc:	f043 0310 	orr.w	r3, r3, #16
 800a9c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a9c8:	4b1a      	ldr	r3, [pc, #104]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9cc:	4a19      	ldr	r2, [pc, #100]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a9d4:	e00f      	b.n	800a9f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d106      	bne.n	800a9ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a9dc:	4b15      	ldr	r3, [pc, #84]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e0:	4a14      	ldr	r2, [pc, #80]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a9e8:	e005      	b.n	800a9f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a9ea:	4b12      	ldr	r3, [pc, #72]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ee:	4a11      	ldr	r2, [pc, #68]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a9f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a9f6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a0e      	ldr	r2, [pc, #56]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800a9fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aa00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa02:	f7f6 ff03 	bl	800180c <HAL_GetTick>
 800aa06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa08:	e008      	b.n	800aa1c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aa0a:	f7f6 feff 	bl	800180c <HAL_GetTick>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d901      	bls.n	800aa1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e006      	b.n	800aa2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa1c:	4b05      	ldr	r3, [pc, #20]	@ (800aa34 <RCCEx_PLL2_Config+0x15c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d0f0      	beq.n	800aa0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	58024400 	.word	0x58024400
 800aa38:	ffff0007 	.word	0xffff0007

0800aa3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa4a:	4b53      	ldr	r3, [pc, #332]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aa4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa4e:	f003 0303 	and.w	r3, r3, #3
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d101      	bne.n	800aa5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e099      	b.n	800ab8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aa5a:	4b4f      	ldr	r3, [pc, #316]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a4e      	ldr	r2, [pc, #312]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aa60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa66:	f7f6 fed1 	bl	800180c <HAL_GetTick>
 800aa6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa6c:	e008      	b.n	800aa80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa6e:	f7f6 fecd 	bl	800180c <HAL_GetTick>
 800aa72:	4602      	mov	r2, r0
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d901      	bls.n	800aa80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e086      	b.n	800ab8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa80:	4b45      	ldr	r3, [pc, #276]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1f0      	bne.n	800aa6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aa8c:	4b42      	ldr	r3, [pc, #264]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa90:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	051b      	lsls	r3, r3, #20
 800aa9a:	493f      	ldr	r1, [pc, #252]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	628b      	str	r3, [r1, #40]	@ 0x28
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	025b      	lsls	r3, r3, #9
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	431a      	orrs	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	041b      	lsls	r3, r3, #16
 800aabe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aac2:	431a      	orrs	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	3b01      	subs	r3, #1
 800aaca:	061b      	lsls	r3, r3, #24
 800aacc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aad0:	4931      	ldr	r1, [pc, #196]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aad6:	4b30      	ldr	r3, [pc, #192]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aada:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	492d      	ldr	r1, [pc, #180]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aae8:	4b2b      	ldr	r3, [pc, #172]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aaea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	4928      	ldr	r1, [pc, #160]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aafa:	4b27      	ldr	r3, [pc, #156]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800aafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aafe:	4a26      	ldr	r2, [pc, #152]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ab06:	4b24      	ldr	r3, [pc, #144]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab0a:	4b24      	ldr	r3, [pc, #144]	@ (800ab9c <RCCEx_PLL3_Config+0x160>)
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	69d2      	ldr	r2, [r2, #28]
 800ab12:	00d2      	lsls	r2, r2, #3
 800ab14:	4920      	ldr	r1, [pc, #128]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab16:	4313      	orrs	r3, r2
 800ab18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ab1a:	4b1f      	ldr	r3, [pc, #124]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1e:	4a1e      	ldr	r2, [pc, #120]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d106      	bne.n	800ab3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ab2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab30:	4a19      	ldr	r2, [pc, #100]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ab36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab38:	e00f      	b.n	800ab5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d106      	bne.n	800ab4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ab40:	4b15      	ldr	r3, [pc, #84]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab44:	4a14      	ldr	r2, [pc, #80]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ab4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab4c:	e005      	b.n	800ab5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ab4e:	4b12      	ldr	r3, [pc, #72]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab52:	4a11      	ldr	r2, [pc, #68]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ab58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a0e      	ldr	r2, [pc, #56]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab66:	f7f6 fe51 	bl	800180c <HAL_GetTick>
 800ab6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab6c:	e008      	b.n	800ab80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ab6e:	f7f6 fe4d 	bl	800180c <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d901      	bls.n	800ab80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	e006      	b.n	800ab8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab80:	4b05      	ldr	r3, [pc, #20]	@ (800ab98 <RCCEx_PLL3_Config+0x15c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d0f0      	beq.n	800ab6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	58024400 	.word	0x58024400
 800ab9c:	ffff0007 	.word	0xffff0007

0800aba0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e10f      	b.n	800add2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a87      	ldr	r2, [pc, #540]	@ (800addc <HAL_SPI_Init+0x23c>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d00f      	beq.n	800abe2 <HAL_SPI_Init+0x42>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a86      	ldr	r2, [pc, #536]	@ (800ade0 <HAL_SPI_Init+0x240>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d00a      	beq.n	800abe2 <HAL_SPI_Init+0x42>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a84      	ldr	r2, [pc, #528]	@ (800ade4 <HAL_SPI_Init+0x244>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d005      	beq.n	800abe2 <HAL_SPI_Init+0x42>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	2b0f      	cmp	r3, #15
 800abdc:	d901      	bls.n	800abe2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e0f7      	b.n	800add2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fdc2 	bl	800b76c <SPI_GetPacketSize>
 800abe8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a7b      	ldr	r2, [pc, #492]	@ (800addc <HAL_SPI_Init+0x23c>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d00c      	beq.n	800ac0e <HAL_SPI_Init+0x6e>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a79      	ldr	r2, [pc, #484]	@ (800ade0 <HAL_SPI_Init+0x240>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d007      	beq.n	800ac0e <HAL_SPI_Init+0x6e>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a78      	ldr	r2, [pc, #480]	@ (800ade4 <HAL_SPI_Init+0x244>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d002      	beq.n	800ac0e <HAL_SPI_Init+0x6e>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b08      	cmp	r3, #8
 800ac0c:	d811      	bhi.n	800ac32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac12:	4a72      	ldr	r2, [pc, #456]	@ (800addc <HAL_SPI_Init+0x23c>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d009      	beq.n	800ac2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a70      	ldr	r2, [pc, #448]	@ (800ade0 <HAL_SPI_Init+0x240>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d004      	beq.n	800ac2c <HAL_SPI_Init+0x8c>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a6f      	ldr	r2, [pc, #444]	@ (800ade4 <HAL_SPI_Init+0x244>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d104      	bne.n	800ac36 <HAL_SPI_Init+0x96>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b10      	cmp	r3, #16
 800ac30:	d901      	bls.n	800ac36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e0cd      	b.n	800add2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d106      	bne.n	800ac50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7f6 fb1a 	bl	8001284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2202      	movs	r2, #2
 800ac54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0201 	bic.w	r2, r2, #1
 800ac66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ac72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac7c:	d119      	bne.n	800acb2 <HAL_SPI_Init+0x112>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac86:	d103      	bne.n	800ac90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d008      	beq.n	800aca2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10c      	bne.n	800acb2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ac9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aca0:	d107      	bne.n	800acb2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800acb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00f      	beq.n	800acde <HAL_SPI_Init+0x13e>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	2b06      	cmp	r3, #6
 800acc4:	d90b      	bls.n	800acde <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	430a      	orrs	r2, r1
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	e007      	b.n	800acee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800acec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	69da      	ldr	r2, [r3, #28]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf6:	431a      	orrs	r2, r3
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	431a      	orrs	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad00:	ea42 0103 	orr.w	r1, r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68da      	ldr	r2, [r3, #12]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad18:	431a      	orrs	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	431a      	orrs	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	431a      	orrs	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	431a      	orrs	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	431a      	orrs	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad42:	431a      	orrs	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	431a      	orrs	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad4e:	ea42 0103 	orr.w	r1, r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d113      	bne.n	800ad8e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ad8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f022 0201 	bic.w	r2, r2, #1
 800ad9c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00a      	beq.n	800adc0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	430a      	orrs	r2, r1
 800adbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	40013000 	.word	0x40013000
 800ade0:	40003800 	.word	0x40003800
 800ade4:	40003c00 	.word	0x40003c00

0800ade8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af02      	add	r7, sp, #8
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	603b      	str	r3, [r7, #0]
 800adf4:	4613      	mov	r3, r2
 800adf6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3320      	adds	r3, #32
 800adfe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae00:	f7f6 fd04 	bl	800180c <HAL_GetTick>
 800ae04:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d001      	beq.n	800ae16 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800ae12:	2302      	movs	r3, #2
 800ae14:	e1d1      	b.n	800b1ba <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d002      	beq.n	800ae22 <HAL_SPI_Transmit+0x3a>
 800ae1c:	88fb      	ldrh	r3, [r7, #6]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e1c9      	b.n	800b1ba <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d101      	bne.n	800ae34 <HAL_SPI_Transmit+0x4c>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e1c2      	b.n	800b1ba <HAL_SPI_Transmit+0x3d2>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2203      	movs	r2, #3
 800ae40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	88fa      	ldrh	r2, [r7, #6]
 800ae56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	88fa      	ldrh	r2, [r7, #6]
 800ae5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ae8c:	d108      	bne.n	800aea0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae9c:	601a      	str	r2, [r3, #0]
 800ae9e:	e009      	b.n	800aeb4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800aeb2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	4b96      	ldr	r3, [pc, #600]	@ (800b114 <HAL_SPI_Transmit+0x32c>)
 800aebc:	4013      	ands	r3, r2
 800aebe:	88f9      	ldrh	r1, [r7, #6]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	6812      	ldr	r2, [r2, #0]
 800aec4:	430b      	orrs	r3, r1
 800aec6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f042 0201 	orr.w	r2, r2, #1
 800aed6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aee0:	d107      	bne.n	800aef2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aef0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	2b0f      	cmp	r3, #15
 800aef8:	d947      	bls.n	800af8a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800aefa:	e03f      	b.n	800af7c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	f003 0302 	and.w	r3, r3, #2
 800af06:	2b02      	cmp	r3, #2
 800af08:	d114      	bne.n	800af34 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6812      	ldr	r2, [r2, #0]
 800af14:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af1a:	1d1a      	adds	r2, r3, #4
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af26:	b29b      	uxth	r3, r3
 800af28:	3b01      	subs	r3, #1
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800af32:	e023      	b.n	800af7c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af34:	f7f6 fc6a 	bl	800180c <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	429a      	cmp	r2, r3
 800af42:	d803      	bhi.n	800af4c <HAL_SPI_Transmit+0x164>
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4a:	d102      	bne.n	800af52 <HAL_SPI_Transmit+0x16a>
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d114      	bne.n	800af7c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f000 fb3c 	bl	800b5d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800af78:	2303      	movs	r3, #3
 800af7a:	e11e      	b.n	800b1ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af82:	b29b      	uxth	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1b9      	bne.n	800aefc <HAL_SPI_Transmit+0x114>
 800af88:	e0f1      	b.n	800b16e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	2b07      	cmp	r3, #7
 800af90:	f240 80e6 	bls.w	800b160 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800af94:	e05d      	b.n	800b052 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d132      	bne.n	800b00a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800afaa:	b29b      	uxth	r3, r3
 800afac:	2b01      	cmp	r3, #1
 800afae:	d918      	bls.n	800afe2 <HAL_SPI_Transmit+0x1fa>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d014      	beq.n	800afe2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6812      	ldr	r2, [r2, #0]
 800afc2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afc8:	1d1a      	adds	r2, r3, #4
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	3b02      	subs	r3, #2
 800afd8:	b29a      	uxth	r2, r3
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800afe0:	e037      	b.n	800b052 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afe6:	881a      	ldrh	r2, [r3, #0]
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aff0:	1c9a      	adds	r2, r3, #2
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800affc:	b29b      	uxth	r3, r3
 800affe:	3b01      	subs	r3, #1
 800b000:	b29a      	uxth	r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b008:	e023      	b.n	800b052 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b00a:	f7f6 fbff 	bl	800180c <HAL_GetTick>
 800b00e:	4602      	mov	r2, r0
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	1ad3      	subs	r3, r2, r3
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d803      	bhi.n	800b022 <HAL_SPI_Transmit+0x23a>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b020:	d102      	bne.n	800b028 <HAL_SPI_Transmit+0x240>
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d114      	bne.n	800b052 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 fad1 	bl	800b5d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b034:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e0b3      	b.n	800b1ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b058:	b29b      	uxth	r3, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d19b      	bne.n	800af96 <HAL_SPI_Transmit+0x1ae>
 800b05e:	e086      	b.n	800b16e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	f003 0302 	and.w	r3, r3, #2
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d154      	bne.n	800b118 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b074:	b29b      	uxth	r3, r3
 800b076:	2b03      	cmp	r3, #3
 800b078:	d918      	bls.n	800b0ac <HAL_SPI_Transmit+0x2c4>
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b07e:	2b40      	cmp	r3, #64	@ 0x40
 800b080:	d914      	bls.n	800b0ac <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	6812      	ldr	r2, [r2, #0]
 800b08c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b092:	1d1a      	adds	r2, r3, #4
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	3b04      	subs	r3, #4
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b0aa:	e059      	b.n	800b160 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d917      	bls.n	800b0e8 <HAL_SPI_Transmit+0x300>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d013      	beq.n	800b0e8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0c4:	881a      	ldrh	r2, [r3, #0]
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0ce:	1c9a      	adds	r2, r3, #2
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	3b02      	subs	r3, #2
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b0e6:	e03b      	b.n	800b160 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3320      	adds	r3, #32
 800b0f2:	7812      	ldrb	r2, [r2, #0]
 800b0f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0fa:	1c5a      	adds	r2, r3, #1
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b106:	b29b      	uxth	r3, r3
 800b108:	3b01      	subs	r3, #1
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b112:	e025      	b.n	800b160 <HAL_SPI_Transmit+0x378>
 800b114:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b118:	f7f6 fb78 	bl	800180c <HAL_GetTick>
 800b11c:	4602      	mov	r2, r0
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	429a      	cmp	r2, r3
 800b126:	d803      	bhi.n	800b130 <HAL_SPI_Transmit+0x348>
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b12e:	d102      	bne.n	800b136 <HAL_SPI_Transmit+0x34e>
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d114      	bne.n	800b160 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f000 fa4a 	bl	800b5d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b142:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b15c:	2303      	movs	r3, #3
 800b15e:	e02c      	b.n	800b1ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b166:	b29b      	uxth	r3, r3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f47f af79 	bne.w	800b060 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	2200      	movs	r2, #0
 800b176:	2108      	movs	r1, #8
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f000 fac9 	bl	800b710 <SPI_WaitOnFlagUntilTimeout>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d007      	beq.n	800b194 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b18a:	f043 0220 	orr.w	r2, r3, #32
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 fa1b 	bl	800b5d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e000      	b.n	800b1ba <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
  }
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop

0800b1c4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b08a      	sub	sp, #40	@ 0x28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b1dc:	6a3a      	ldr	r2, [r7, #32]
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b1f6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	3330      	adds	r3, #48	@ 0x30
 800b1fe:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b206:	2b00      	cmp	r3, #0
 800b208:	d010      	beq.n	800b22c <HAL_SPI_IRQHandler+0x68>
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	f003 0308 	and.w	r3, r3, #8
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00b      	beq.n	800b22c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	699a      	ldr	r2, [r3, #24]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b222:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f9af 	bl	800b588 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800b22a:	e192      	b.n	800b552 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b232:	2b00      	cmp	r3, #0
 800b234:	d113      	bne.n	800b25e <HAL_SPI_IRQHandler+0x9a>
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	f003 0320 	and.w	r3, r3, #32
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10e      	bne.n	800b25e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b246:	2b00      	cmp	r3, #0
 800b248:	d009      	beq.n	800b25e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	4798      	blx	r3
    handled = 1UL;
 800b25a:	2301      	movs	r3, #1
 800b25c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10f      	bne.n	800b288 <HAL_SPI_IRQHandler+0xc4>
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00a      	beq.n	800b288 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d105      	bne.n	800b288 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	4798      	blx	r3
    handled = 1UL;
 800b284:	2301      	movs	r3, #1
 800b286:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	f003 0320 	and.w	r3, r3, #32
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10f      	bne.n	800b2b2 <HAL_SPI_IRQHandler+0xee>
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	f003 0302 	and.w	r3, r3, #2
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00a      	beq.n	800b2b2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d105      	bne.n	800b2b2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	4798      	blx	r3
    handled = 1UL;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f040 8147 	bne.w	800b548 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	f003 0308 	and.w	r3, r3, #8
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f000 808b 	beq.w	800b3dc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	699a      	ldr	r2, [r3, #24]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f042 0208 	orr.w	r2, r2, #8
 800b2d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	699a      	ldr	r2, [r3, #24]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f042 0210 	orr.w	r2, r2, #16
 800b2e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	699a      	ldr	r2, [r3, #24]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2f4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	691a      	ldr	r2, [r3, #16]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f022 0208 	bic.w	r2, r2, #8
 800b304:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d13d      	bne.n	800b390 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b314:	e036      	b.n	800b384 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	2b0f      	cmp	r3, #15
 800b31c:	d90b      	bls.n	800b336 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b326:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b328:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b32e:	1d1a      	adds	r2, r3, #4
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	665a      	str	r2, [r3, #100]	@ 0x64
 800b334:	e01d      	b.n	800b372 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	2b07      	cmp	r3, #7
 800b33c:	d90b      	bls.n	800b356 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	8812      	ldrh	r2, [r2, #0]
 800b346:	b292      	uxth	r2, r2
 800b348:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b34e:	1c9a      	adds	r2, r3, #2
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	665a      	str	r2, [r3, #100]	@ 0x64
 800b354:	e00d      	b.n	800b372 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b362:	7812      	ldrb	r2, [r2, #0]
 800b364:	b2d2      	uxtb	r2, r2
 800b366:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b378:	b29b      	uxth	r3, r3
 800b37a:	3b01      	subs	r3, #1
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1c2      	bne.n	800b316 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 f91d 	bl	800b5d0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d003      	beq.n	800b3b0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f8e3 	bl	800b574 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b3ae:	e0d0      	b.n	800b552 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b3b0:	7cfb      	ldrb	r3, [r7, #19]
 800b3b2:	2b05      	cmp	r3, #5
 800b3b4:	d103      	bne.n	800b3be <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7f4 fffc 	bl	80003b4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b3bc:	e0c6      	b.n	800b54c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b3be:	7cfb      	ldrb	r3, [r7, #19]
 800b3c0:	2b04      	cmp	r3, #4
 800b3c2:	d103      	bne.n	800b3cc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f8cb 	bl	800b560 <HAL_SPI_RxCpltCallback>
    return;
 800b3ca:	e0bf      	b.n	800b54c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b3cc:	7cfb      	ldrb	r3, [r7, #19]
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	f040 80bc 	bne.w	800b54c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f7f4 ffdd 	bl	8000394 <HAL_SPI_TxCpltCallback>
    return;
 800b3da:	e0b7      	b.n	800b54c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f000 80b5 	beq.w	800b552 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00f      	beq.n	800b412 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3f8:	f043 0204 	orr.w	r2, r3, #4
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	699a      	ldr	r2, [r3, #24]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b410:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00f      	beq.n	800b43c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b422:	f043 0201 	orr.w	r2, r3, #1
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	699a      	ldr	r2, [r3, #24]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b43a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00f      	beq.n	800b466 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b44c:	f043 0208 	orr.w	r2, r3, #8
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	699a      	ldr	r2, [r3, #24]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b464:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	f003 0320 	and.w	r3, r3, #32
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00f      	beq.n	800b490 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b476:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	699a      	ldr	r2, [r3, #24]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f042 0220 	orr.w	r2, r2, #32
 800b48e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b496:	2b00      	cmp	r3, #0
 800b498:	d05a      	beq.n	800b550 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f022 0201 	bic.w	r2, r2, #1
 800b4a8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	6919      	ldr	r1, [r3, #16]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	4b28      	ldr	r3, [pc, #160]	@ (800b558 <HAL_SPI_IRQHandler+0x394>)
 800b4b6:	400b      	ands	r3, r1
 800b4b8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b4c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b4c4:	d138      	bne.n	800b538 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689a      	ldr	r2, [r3, #8]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b4d4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d013      	beq.n	800b506 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4e2:	4a1e      	ldr	r2, [pc, #120]	@ (800b55c <HAL_SPI_IRQHandler+0x398>)
 800b4e4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7f7 ff3c 	bl	8003368 <HAL_DMA_Abort_IT>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d007      	beq.n	800b506 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d020      	beq.n	800b550 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b512:	4a12      	ldr	r2, [pc, #72]	@ (800b55c <HAL_SPI_IRQHandler+0x398>)
 800b514:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7f7 ff24 	bl	8003368 <HAL_DMA_Abort_IT>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d014      	beq.n	800b550 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b52c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b536:	e00b      	b.n	800b550 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f817 	bl	800b574 <HAL_SPI_ErrorCallback>
    return;
 800b546:	e003      	b.n	800b550 <HAL_SPI_IRQHandler+0x38c>
    return;
 800b548:	bf00      	nop
 800b54a:	e002      	b.n	800b552 <HAL_SPI_IRQHandler+0x38e>
    return;
 800b54c:	bf00      	nop
 800b54e:	e000      	b.n	800b552 <HAL_SPI_IRQHandler+0x38e>
    return;
 800b550:	bf00      	nop
  }
}
 800b552:	3728      	adds	r7, #40	@ 0x28
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	fffffc94 	.word	0xfffffc94
 800b55c:	0800b59d 	.word	0x0800b59d

0800b560 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f7ff ffd6 	bl	800b574 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b5c8:	bf00      	nop
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	699a      	ldr	r2, [r3, #24]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f042 0208 	orr.w	r2, r2, #8
 800b5ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	699a      	ldr	r2, [r3, #24]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f042 0210 	orr.w	r2, r2, #16
 800b5fe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f022 0201 	bic.w	r2, r2, #1
 800b60e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	6919      	ldr	r1, [r3, #16]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	4b3c      	ldr	r3, [pc, #240]	@ (800b70c <SPI_CloseTransfer+0x13c>)
 800b61c:	400b      	ands	r3, r1
 800b61e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	689a      	ldr	r2, [r3, #8]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b62e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b04      	cmp	r3, #4
 800b63a:	d014      	beq.n	800b666 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f003 0320 	and.w	r3, r3, #32
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00f      	beq.n	800b666 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b64c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	699a      	ldr	r2, [r3, #24]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f042 0220 	orr.w	r2, r2, #32
 800b664:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b03      	cmp	r3, #3
 800b670:	d014      	beq.n	800b69c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00f      	beq.n	800b69c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b682:	f043 0204 	orr.w	r2, r3, #4
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	699a      	ldr	r2, [r3, #24]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b69a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00f      	beq.n	800b6c6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6ac:	f043 0201 	orr.w	r2, r3, #1
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	699a      	ldr	r2, [r3, #24]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00f      	beq.n	800b6f0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6d6:	f043 0208 	orr.w	r2, r3, #8
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	699a      	ldr	r2, [r3, #24]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b6ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b700:	bf00      	nop
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	fffffc90 	.word	0xfffffc90

0800b710 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	603b      	str	r3, [r7, #0]
 800b71c:	4613      	mov	r3, r2
 800b71e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b720:	e010      	b.n	800b744 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b722:	f7f6 f873 	bl	800180c <HAL_GetTick>
 800b726:	4602      	mov	r2, r0
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d803      	bhi.n	800b73a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b738:	d102      	bne.n	800b740 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d101      	bne.n	800b744 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b740:	2303      	movs	r3, #3
 800b742:	e00f      	b.n	800b764 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	695a      	ldr	r2, [r3, #20]
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	4013      	ands	r3, r2
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	429a      	cmp	r2, r3
 800b752:	bf0c      	ite	eq
 800b754:	2301      	moveq	r3, #1
 800b756:	2300      	movne	r3, #0
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	461a      	mov	r2, r3
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d0df      	beq.n	800b722 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b778:	095b      	lsrs	r3, r3, #5
 800b77a:	3301      	adds	r3, #1
 800b77c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	3301      	adds	r3, #1
 800b784:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	3307      	adds	r3, #7
 800b78a:	08db      	lsrs	r3, r3, #3
 800b78c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	fb02 f303 	mul.w	r3, r2, r3
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
	...

0800b7a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	f107 001c 	add.w	r0, r7, #28
 800b7b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d121      	bne.n	800b802 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68da      	ldr	r2, [r3, #12]
 800b7ce:	4b2c      	ldr	r3, [pc, #176]	@ (800b880 <USB_CoreInit+0xdc>)
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b7e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d105      	bne.n	800b7f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f001 fafa 	bl	800cdf0 <USB_CoreReset>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]
 800b800:	e01b      	b.n	800b83a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f001 faee 	bl	800cdf0 <USB_CoreReset>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b818:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d106      	bne.n	800b82e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b824:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b82c:	e005      	b.n	800b83a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b832:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b83a:	7fbb      	ldrb	r3, [r7, #30]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d116      	bne.n	800b86e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b844:	b29a      	uxth	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b84e:	4b0d      	ldr	r3, [pc, #52]	@ (800b884 <USB_CoreInit+0xe0>)
 800b850:	4313      	orrs	r3, r2
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	f043 0206 	orr.w	r2, r3, #6
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	f043 0220 	orr.w	r2, r3, #32
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b87a:	b004      	add	sp, #16
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	ffbdffbf 	.word	0xffbdffbf
 800b884:	03ee0000 	.word	0x03ee0000

0800b888 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	4613      	mov	r3, r2
 800b894:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d165      	bne.n	800b968 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	4a41      	ldr	r2, [pc, #260]	@ (800b9a4 <USB_SetTurnaroundTime+0x11c>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d906      	bls.n	800b8b2 <USB_SetTurnaroundTime+0x2a>
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	4a40      	ldr	r2, [pc, #256]	@ (800b9a8 <USB_SetTurnaroundTime+0x120>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d202      	bcs.n	800b8b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b8ac:	230f      	movs	r3, #15
 800b8ae:	617b      	str	r3, [r7, #20]
 800b8b0:	e062      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	4a3c      	ldr	r2, [pc, #240]	@ (800b9a8 <USB_SetTurnaroundTime+0x120>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d306      	bcc.n	800b8c8 <USB_SetTurnaroundTime+0x40>
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	4a3b      	ldr	r2, [pc, #236]	@ (800b9ac <USB_SetTurnaroundTime+0x124>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d202      	bcs.n	800b8c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b8c2:	230e      	movs	r3, #14
 800b8c4:	617b      	str	r3, [r7, #20]
 800b8c6:	e057      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	4a38      	ldr	r2, [pc, #224]	@ (800b9ac <USB_SetTurnaroundTime+0x124>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d306      	bcc.n	800b8de <USB_SetTurnaroundTime+0x56>
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	4a37      	ldr	r2, [pc, #220]	@ (800b9b0 <USB_SetTurnaroundTime+0x128>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d202      	bcs.n	800b8de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b8d8:	230d      	movs	r3, #13
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	e04c      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	4a33      	ldr	r2, [pc, #204]	@ (800b9b0 <USB_SetTurnaroundTime+0x128>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d306      	bcc.n	800b8f4 <USB_SetTurnaroundTime+0x6c>
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	4a32      	ldr	r2, [pc, #200]	@ (800b9b4 <USB_SetTurnaroundTime+0x12c>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d802      	bhi.n	800b8f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b8ee:	230c      	movs	r3, #12
 800b8f0:	617b      	str	r3, [r7, #20]
 800b8f2:	e041      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	4a2f      	ldr	r2, [pc, #188]	@ (800b9b4 <USB_SetTurnaroundTime+0x12c>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d906      	bls.n	800b90a <USB_SetTurnaroundTime+0x82>
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	4a2e      	ldr	r2, [pc, #184]	@ (800b9b8 <USB_SetTurnaroundTime+0x130>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d802      	bhi.n	800b90a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b904:	230b      	movs	r3, #11
 800b906:	617b      	str	r3, [r7, #20]
 800b908:	e036      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	4a2a      	ldr	r2, [pc, #168]	@ (800b9b8 <USB_SetTurnaroundTime+0x130>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d906      	bls.n	800b920 <USB_SetTurnaroundTime+0x98>
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	4a29      	ldr	r2, [pc, #164]	@ (800b9bc <USB_SetTurnaroundTime+0x134>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d802      	bhi.n	800b920 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b91a:	230a      	movs	r3, #10
 800b91c:	617b      	str	r3, [r7, #20]
 800b91e:	e02b      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	4a26      	ldr	r2, [pc, #152]	@ (800b9bc <USB_SetTurnaroundTime+0x134>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d906      	bls.n	800b936 <USB_SetTurnaroundTime+0xae>
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	4a25      	ldr	r2, [pc, #148]	@ (800b9c0 <USB_SetTurnaroundTime+0x138>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d202      	bcs.n	800b936 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b930:	2309      	movs	r3, #9
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	e020      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	4a21      	ldr	r2, [pc, #132]	@ (800b9c0 <USB_SetTurnaroundTime+0x138>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d306      	bcc.n	800b94c <USB_SetTurnaroundTime+0xc4>
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	4a20      	ldr	r2, [pc, #128]	@ (800b9c4 <USB_SetTurnaroundTime+0x13c>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d802      	bhi.n	800b94c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b946:	2308      	movs	r3, #8
 800b948:	617b      	str	r3, [r7, #20]
 800b94a:	e015      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	4a1d      	ldr	r2, [pc, #116]	@ (800b9c4 <USB_SetTurnaroundTime+0x13c>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d906      	bls.n	800b962 <USB_SetTurnaroundTime+0xda>
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	4a1c      	ldr	r2, [pc, #112]	@ (800b9c8 <USB_SetTurnaroundTime+0x140>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d202      	bcs.n	800b962 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b95c:	2307      	movs	r3, #7
 800b95e:	617b      	str	r3, [r7, #20]
 800b960:	e00a      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b962:	2306      	movs	r3, #6
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	e007      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b968:	79fb      	ldrb	r3, [r7, #7]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d102      	bne.n	800b974 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b96e:	2309      	movs	r3, #9
 800b970:	617b      	str	r3, [r7, #20]
 800b972:	e001      	b.n	800b978 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b974:	2309      	movs	r3, #9
 800b976:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	68da      	ldr	r2, [r3, #12]
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	029b      	lsls	r3, r3, #10
 800b98c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b990:	431a      	orrs	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	371c      	adds	r7, #28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr
 800b9a4:	00d8acbf 	.word	0x00d8acbf
 800b9a8:	00e4e1c0 	.word	0x00e4e1c0
 800b9ac:	00f42400 	.word	0x00f42400
 800b9b0:	01067380 	.word	0x01067380
 800b9b4:	011a499f 	.word	0x011a499f
 800b9b8:	01312cff 	.word	0x01312cff
 800b9bc:	014ca43f 	.word	0x014ca43f
 800b9c0:	016e3600 	.word	0x016e3600
 800b9c4:	01a6ab1f 	.word	0x01a6ab1f
 800b9c8:	01e84800 	.word	0x01e84800

0800b9cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	f043 0201 	orr.w	r2, r3, #1
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	f023 0201 	bic.w	r2, r3, #1
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba2c:	78fb      	ldrb	r3, [r7, #3]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d115      	bne.n	800ba5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ba3e:	200a      	movs	r0, #10
 800ba40:	f7f5 fef0 	bl	8001824 <HAL_Delay>
      ms += 10U;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	330a      	adds	r3, #10
 800ba48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f001 f93f 	bl	800ccce <USB_GetMode>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d01e      	beq.n	800ba94 <USB_SetCurrentMode+0x84>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba5a:	d9f0      	bls.n	800ba3e <USB_SetCurrentMode+0x2e>
 800ba5c:	e01a      	b.n	800ba94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba5e:	78fb      	ldrb	r3, [r7, #3]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d115      	bne.n	800ba90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ba70:	200a      	movs	r0, #10
 800ba72:	f7f5 fed7 	bl	8001824 <HAL_Delay>
      ms += 10U;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	330a      	adds	r3, #10
 800ba7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f001 f926 	bl	800ccce <USB_GetMode>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d005      	beq.n	800ba94 <USB_SetCurrentMode+0x84>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba8c:	d9f0      	bls.n	800ba70 <USB_SetCurrentMode+0x60>
 800ba8e:	e001      	b.n	800ba94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	e005      	b.n	800baa0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2bc8      	cmp	r3, #200	@ 0xc8
 800ba98:	d101      	bne.n	800ba9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e000      	b.n	800baa0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800baa8:	b084      	sub	sp, #16
 800baaa:	b580      	push	{r7, lr}
 800baac:	b086      	sub	sp, #24
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bac2:	2300      	movs	r3, #0
 800bac4:	613b      	str	r3, [r7, #16]
 800bac6:	e009      	b.n	800badc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	3340      	adds	r3, #64	@ 0x40
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	2200      	movs	r2, #0
 800bad4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	3301      	adds	r3, #1
 800bada:	613b      	str	r3, [r7, #16]
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2b0e      	cmp	r3, #14
 800bae0:	d9f2      	bls.n	800bac8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bae2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d11c      	bne.n	800bb24 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800baf8:	f043 0302 	orr.w	r3, r3, #2
 800bafc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb02:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	e005      	b.n	800bb30 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb28:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb36:	461a      	mov	r2, r3
 800bb38:	2300      	movs	r3, #0
 800bb3a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb3c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d10d      	bne.n	800bb60 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bb44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d104      	bne.n	800bb56 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f968 	bl	800be24 <USB_SetDevSpeed>
 800bb54:	e008      	b.n	800bb68 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bb56:	2101      	movs	r1, #1
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f963 	bl	800be24 <USB_SetDevSpeed>
 800bb5e:	e003      	b.n	800bb68 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb60:	2103      	movs	r1, #3
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f95e 	bl	800be24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb68:	2110      	movs	r1, #16
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f8fa 	bl	800bd64 <USB_FlushTxFifo>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f924 	bl	800bdc8 <USB_FlushRxFifo>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb90:	461a      	mov	r2, r3
 800bb92:	2300      	movs	r3, #0
 800bb94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	2300      	movs	r3, #0
 800bba0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bba8:	461a      	mov	r2, r3
 800bbaa:	2300      	movs	r3, #0
 800bbac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbae:	2300      	movs	r3, #0
 800bbb0:	613b      	str	r3, [r7, #16]
 800bbb2:	e043      	b.n	800bc3c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbca:	d118      	bne.n	800bbfe <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10a      	bne.n	800bbe8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	015a      	lsls	r2, r3, #5
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	4413      	add	r3, r2
 800bbda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbde:	461a      	mov	r2, r3
 800bbe0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bbe4:	6013      	str	r3, [r2, #0]
 800bbe6:	e013      	b.n	800bc10 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	015a      	lsls	r2, r3, #5
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bbfa:	6013      	str	r3, [r2, #0]
 800bbfc:	e008      	b.n	800bc10 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	015a      	lsls	r2, r3, #5
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	4413      	add	r3, r2
 800bc06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	2300      	movs	r3, #0
 800bc20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	015a      	lsls	r2, r3, #5
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	4413      	add	r3, r2
 800bc2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc2e:	461a      	mov	r2, r3
 800bc30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	613b      	str	r3, [r7, #16]
 800bc3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bc40:	461a      	mov	r2, r3
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d3b5      	bcc.n	800bbb4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	613b      	str	r3, [r7, #16]
 800bc4c:	e043      	b.n	800bcd6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	015a      	lsls	r2, r3, #5
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	4413      	add	r3, r2
 800bc56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc64:	d118      	bne.n	800bc98 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10a      	bne.n	800bc82 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	015a      	lsls	r2, r3, #5
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4413      	add	r3, r2
 800bc74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc78:	461a      	mov	r2, r3
 800bc7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	e013      	b.n	800bcaa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	e008      	b.n	800bcaa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bca4:	461a      	mov	r2, r3
 800bca6:	2300      	movs	r3, #0
 800bca8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	015a      	lsls	r2, r3, #5
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	2300      	movs	r3, #0
 800bcba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	015a      	lsls	r2, r3, #5
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcc8:	461a      	mov	r2, r3
 800bcca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bcce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	613b      	str	r3, [r7, #16]
 800bcd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bcda:	461a      	mov	r2, r3
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d3b5      	bcc.n	800bc4e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcf4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bd02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d105      	bne.n	800bd18 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	f043 0210 	orr.w	r2, r3, #16
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	699a      	ldr	r2, [r3, #24]
 800bd1c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd5c <USB_DevInit+0x2b4>)
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d005      	beq.n	800bd38 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	f043 0208 	orr.w	r2, r3, #8
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d105      	bne.n	800bd4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	699a      	ldr	r2, [r3, #24]
 800bd44:	4b06      	ldr	r3, [pc, #24]	@ (800bd60 <USB_DevInit+0x2b8>)
 800bd46:	4313      	orrs	r3, r2
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd58:	b004      	add	sp, #16
 800bd5a:	4770      	bx	lr
 800bd5c:	803c3800 	.word	0x803c3800
 800bd60:	40000004 	.word	0x40000004

0800bd64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	3301      	adds	r3, #1
 800bd76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd7e:	d901      	bls.n	800bd84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd80:	2303      	movs	r3, #3
 800bd82:	e01b      	b.n	800bdbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	daf2      	bge.n	800bd72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	019b      	lsls	r3, r3, #6
 800bd94:	f043 0220 	orr.w	r2, r3, #32
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bda8:	d901      	bls.n	800bdae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bdaa:	2303      	movs	r3, #3
 800bdac:	e006      	b.n	800bdbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	f003 0320 	and.w	r3, r3, #32
 800bdb6:	2b20      	cmp	r3, #32
 800bdb8:	d0f0      	beq.n	800bd9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bde0:	d901      	bls.n	800bde6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bde2:	2303      	movs	r3, #3
 800bde4:	e018      	b.n	800be18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	daf2      	bge.n	800bdd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2210      	movs	r2, #16
 800bdf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be04:	d901      	bls.n	800be0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800be06:	2303      	movs	r3, #3
 800be08:	e006      	b.n	800be18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	f003 0310 	and.w	r3, r3, #16
 800be12:	2b10      	cmp	r3, #16
 800be14:	d0f0      	beq.n	800bdf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	460b      	mov	r3, r1
 800be2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	78fb      	ldrb	r3, [r7, #3]
 800be3e:	68f9      	ldr	r1, [r7, #12]
 800be40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be44:	4313      	orrs	r3, r2
 800be46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800be56:	b480      	push	{r7}
 800be58:	b087      	sub	sp, #28
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	f003 0306 	and.w	r3, r3, #6
 800be6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d102      	bne.n	800be7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800be76:	2300      	movs	r3, #0
 800be78:	75fb      	strb	r3, [r7, #23]
 800be7a:	e00a      	b.n	800be92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d002      	beq.n	800be88 <USB_GetDevSpeed+0x32>
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2b06      	cmp	r3, #6
 800be86:	d102      	bne.n	800be8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800be88:	2302      	movs	r3, #2
 800be8a:	75fb      	strb	r3, [r7, #23]
 800be8c:	e001      	b.n	800be92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800be8e:	230f      	movs	r3, #15
 800be90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800be92:	7dfb      	ldrb	r3, [r7, #23]
}
 800be94:	4618      	mov	r0, r3
 800be96:	371c      	adds	r7, #28
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	785b      	ldrb	r3, [r3, #1]
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d139      	bne.n	800bf30 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bec2:	69da      	ldr	r2, [r3, #28]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	f003 030f 	and.w	r3, r3, #15
 800becc:	2101      	movs	r1, #1
 800bece:	fa01 f303 	lsl.w	r3, r1, r3
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	68f9      	ldr	r1, [r7, #12]
 800bed6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800beda:	4313      	orrs	r3, r2
 800bedc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	015a      	lsls	r2, r3, #5
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	4413      	add	r3, r2
 800bee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d153      	bne.n	800bf9c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	015a      	lsls	r2, r3, #5
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4413      	add	r3, r2
 800befc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	791b      	ldrb	r3, [r3, #4]
 800bf0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	059b      	lsls	r3, r3, #22
 800bf16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	0159      	lsls	r1, r3, #5
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	440b      	add	r3, r1
 800bf22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf26:	4619      	mov	r1, r3
 800bf28:	4b20      	ldr	r3, [pc, #128]	@ (800bfac <USB_ActivateEndpoint+0x10c>)
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	600b      	str	r3, [r1, #0]
 800bf2e:	e035      	b.n	800bf9c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf36:	69da      	ldr	r2, [r3, #28]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	f003 030f 	and.w	r3, r3, #15
 800bf40:	2101      	movs	r1, #1
 800bf42:	fa01 f303 	lsl.w	r3, r1, r3
 800bf46:	041b      	lsls	r3, r3, #16
 800bf48:	68f9      	ldr	r1, [r7, #12]
 800bf4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	015a      	lsls	r2, r3, #5
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4413      	add	r3, r2
 800bf5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d119      	bne.n	800bf9c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	015a      	lsls	r2, r3, #5
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	4413      	add	r3, r2
 800bf70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	791b      	ldrb	r3, [r3, #4]
 800bf82:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf84:	430b      	orrs	r3, r1
 800bf86:	431a      	orrs	r2, r3
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	0159      	lsls	r1, r3, #5
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	440b      	add	r3, r1
 800bf90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf94:	4619      	mov	r1, r3
 800bf96:	4b05      	ldr	r3, [pc, #20]	@ (800bfac <USB_ActivateEndpoint+0x10c>)
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	10008000 	.word	0x10008000

0800bfb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	785b      	ldrb	r3, [r3, #1]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d161      	bne.n	800c090 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	015a      	lsls	r2, r3, #5
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bfde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bfe2:	d11f      	bne.n	800c024 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	015a      	lsls	r2, r3, #5
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	4413      	add	r3, r2
 800bfec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	0151      	lsls	r1, r2, #5
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	440a      	add	r2, r1
 800bffa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bffe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c002:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	015a      	lsls	r2, r3, #5
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	4413      	add	r3, r2
 800c00c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	0151      	lsls	r1, r2, #5
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	440a      	add	r2, r1
 800c01a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c01e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c022:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c02a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	f003 030f 	and.w	r3, r3, #15
 800c034:	2101      	movs	r1, #1
 800c036:	fa01 f303 	lsl.w	r3, r1, r3
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	43db      	mvns	r3, r3
 800c03e:	68f9      	ldr	r1, [r7, #12]
 800c040:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c044:	4013      	ands	r3, r2
 800c046:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c04e:	69da      	ldr	r2, [r3, #28]
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	f003 030f 	and.w	r3, r3, #15
 800c058:	2101      	movs	r1, #1
 800c05a:	fa01 f303 	lsl.w	r3, r1, r3
 800c05e:	b29b      	uxth	r3, r3
 800c060:	43db      	mvns	r3, r3
 800c062:	68f9      	ldr	r1, [r7, #12]
 800c064:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c068:	4013      	ands	r3, r2
 800c06a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	015a      	lsls	r2, r3, #5
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	4413      	add	r3, r2
 800c074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	0159      	lsls	r1, r3, #5
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	440b      	add	r3, r1
 800c082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c086:	4619      	mov	r1, r3
 800c088:	4b35      	ldr	r3, [pc, #212]	@ (800c160 <USB_DeactivateEndpoint+0x1b0>)
 800c08a:	4013      	ands	r3, r2
 800c08c:	600b      	str	r3, [r1, #0]
 800c08e:	e060      	b.n	800c152 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	015a      	lsls	r2, r3, #5
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	4413      	add	r3, r2
 800c098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c0a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0a6:	d11f      	bne.n	800c0e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	015a      	lsls	r2, r3, #5
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	0151      	lsls	r1, r2, #5
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	440a      	add	r2, r1
 800c0be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c0c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	015a      	lsls	r2, r3, #5
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68ba      	ldr	r2, [r7, #8]
 800c0d8:	0151      	lsls	r1, r2, #5
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	440a      	add	r2, r1
 800c0de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c0e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	f003 030f 	and.w	r3, r3, #15
 800c0f8:	2101      	movs	r1, #1
 800c0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c0fe:	041b      	lsls	r3, r3, #16
 800c100:	43db      	mvns	r3, r3
 800c102:	68f9      	ldr	r1, [r7, #12]
 800c104:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c108:	4013      	ands	r3, r2
 800c10a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c112:	69da      	ldr	r2, [r3, #28]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	f003 030f 	and.w	r3, r3, #15
 800c11c:	2101      	movs	r1, #1
 800c11e:	fa01 f303 	lsl.w	r3, r1, r3
 800c122:	041b      	lsls	r3, r3, #16
 800c124:	43db      	mvns	r3, r3
 800c126:	68f9      	ldr	r1, [r7, #12]
 800c128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c12c:	4013      	ands	r3, r2
 800c12e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	015a      	lsls	r2, r3, #5
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	4413      	add	r3, r2
 800c138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	0159      	lsls	r1, r3, #5
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	440b      	add	r3, r1
 800c146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c14a:	4619      	mov	r1, r3
 800c14c:	4b05      	ldr	r3, [pc, #20]	@ (800c164 <USB_DeactivateEndpoint+0x1b4>)
 800c14e:	4013      	ands	r3, r2
 800c150:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3714      	adds	r7, #20
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	ec337800 	.word	0xec337800
 800c164:	eff37800 	.word	0xeff37800

0800c168 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	@ 0x28
 800c16c:	af02      	add	r7, sp, #8
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	4613      	mov	r3, r2
 800c174:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	785b      	ldrb	r3, [r3, #1]
 800c184:	2b01      	cmp	r3, #1
 800c186:	f040 8185 	bne.w	800c494 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d132      	bne.n	800c1f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	015a      	lsls	r2, r3, #5
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	4413      	add	r3, r2
 800c19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c19e:	691a      	ldr	r2, [r3, #16]
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	0159      	lsls	r1, r3, #5
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	440b      	add	r3, r1
 800c1a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4ba7      	ldr	r3, [pc, #668]	@ (800c44c <USB_EPStartXfer+0x2e4>)
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	015a      	lsls	r2, r3, #5
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	69ba      	ldr	r2, [r7, #24]
 800c1c4:	0151      	lsls	r1, r2, #5
 800c1c6:	69fa      	ldr	r2, [r7, #28]
 800c1c8:	440a      	add	r2, r1
 800c1ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c1d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	015a      	lsls	r2, r3, #5
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1e0:	691a      	ldr	r2, [r3, #16]
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	0159      	lsls	r1, r3, #5
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	440b      	add	r3, r1
 800c1ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4b97      	ldr	r3, [pc, #604]	@ (800c450 <USB_EPStartXfer+0x2e8>)
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	610b      	str	r3, [r1, #16]
 800c1f6:	e097      	b.n	800c328 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	015a      	lsls	r2, r3, #5
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c204:	691a      	ldr	r2, [r3, #16]
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	0159      	lsls	r1, r3, #5
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	440b      	add	r3, r1
 800c20e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c212:	4619      	mov	r1, r3
 800c214:	4b8e      	ldr	r3, [pc, #568]	@ (800c450 <USB_EPStartXfer+0x2e8>)
 800c216:	4013      	ands	r3, r2
 800c218:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	015a      	lsls	r2, r3, #5
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	4413      	add	r3, r2
 800c222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c226:	691a      	ldr	r2, [r3, #16]
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	0159      	lsls	r1, r3, #5
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	440b      	add	r3, r1
 800c230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c234:	4619      	mov	r1, r3
 800c236:	4b85      	ldr	r3, [pc, #532]	@ (800c44c <USB_EPStartXfer+0x2e4>)
 800c238:	4013      	ands	r3, r2
 800c23a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d11a      	bne.n	800c278 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	691a      	ldr	r2, [r3, #16]
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d903      	bls.n	800c256 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	689a      	ldr	r2, [r3, #8]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	69ba      	ldr	r2, [r7, #24]
 800c266:	0151      	lsls	r1, r2, #5
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	440a      	add	r2, r1
 800c26c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c270:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c274:	6113      	str	r3, [r2, #16]
 800c276:	e044      	b.n	800c302 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	691a      	ldr	r2, [r3, #16]
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	4413      	add	r3, r2
 800c282:	1e5a      	subs	r2, r3, #1
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	015a      	lsls	r2, r3, #5
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	4413      	add	r3, r2
 800c296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c29a:	691a      	ldr	r2, [r3, #16]
 800c29c:	8afb      	ldrh	r3, [r7, #22]
 800c29e:	04d9      	lsls	r1, r3, #19
 800c2a0:	4b6c      	ldr	r3, [pc, #432]	@ (800c454 <USB_EPStartXfer+0x2ec>)
 800c2a2:	400b      	ands	r3, r1
 800c2a4:	69b9      	ldr	r1, [r7, #24]
 800c2a6:	0148      	lsls	r0, r1, #5
 800c2a8:	69f9      	ldr	r1, [r7, #28]
 800c2aa:	4401      	add	r1, r0
 800c2ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	791b      	ldrb	r3, [r3, #4]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d122      	bne.n	800c302 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	69ba      	ldr	r2, [r7, #24]
 800c2cc:	0151      	lsls	r1, r2, #5
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	440a      	add	r2, r1
 800c2d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2d6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c2da:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	015a      	lsls	r2, r3, #5
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2e8:	691a      	ldr	r2, [r3, #16]
 800c2ea:	8afb      	ldrh	r3, [r7, #22]
 800c2ec:	075b      	lsls	r3, r3, #29
 800c2ee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c2f2:	69b9      	ldr	r1, [r7, #24]
 800c2f4:	0148      	lsls	r0, r1, #5
 800c2f6:	69f9      	ldr	r1, [r7, #28]
 800c2f8:	4401      	add	r1, r0
 800c2fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c2fe:	4313      	orrs	r3, r2
 800c300:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	015a      	lsls	r2, r3, #5
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	4413      	add	r3, r2
 800c30a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c30e:	691a      	ldr	r2, [r3, #16]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c318:	69b9      	ldr	r1, [r7, #24]
 800c31a:	0148      	lsls	r0, r1, #5
 800c31c:	69f9      	ldr	r1, [r7, #28]
 800c31e:	4401      	add	r1, r0
 800c320:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c324:	4313      	orrs	r3, r2
 800c326:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c328:	79fb      	ldrb	r3, [r7, #7]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d14b      	bne.n	800c3c6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	69db      	ldr	r3, [r3, #28]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d009      	beq.n	800c34a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	015a      	lsls	r2, r3, #5
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	4413      	add	r3, r2
 800c33e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c342:	461a      	mov	r2, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	69db      	ldr	r3, [r3, #28]
 800c348:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	791b      	ldrb	r3, [r3, #4]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d128      	bne.n	800c3a4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d110      	bne.n	800c384 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	015a      	lsls	r2, r3, #5
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	4413      	add	r3, r2
 800c36a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	69ba      	ldr	r2, [r7, #24]
 800c372:	0151      	lsls	r1, r2, #5
 800c374:	69fa      	ldr	r2, [r7, #28]
 800c376:	440a      	add	r2, r1
 800c378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c37c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	e00f      	b.n	800c3a4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	015a      	lsls	r2, r3, #5
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	4413      	add	r3, r2
 800c38c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	69ba      	ldr	r2, [r7, #24]
 800c394:	0151      	lsls	r1, r2, #5
 800c396:	69fa      	ldr	r2, [r7, #28]
 800c398:	440a      	add	r2, r1
 800c39a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c39e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3a2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	015a      	lsls	r2, r3, #5
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	69ba      	ldr	r2, [r7, #24]
 800c3b4:	0151      	lsls	r1, r2, #5
 800c3b6:	69fa      	ldr	r2, [r7, #28]
 800c3b8:	440a      	add	r2, r1
 800c3ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	e169      	b.n	800c69a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	015a      	lsls	r2, r3, #5
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	69ba      	ldr	r2, [r7, #24]
 800c3d6:	0151      	lsls	r1, r2, #5
 800c3d8:	69fa      	ldr	r2, [r7, #28]
 800c3da:	440a      	add	r2, r1
 800c3dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c3e4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	791b      	ldrb	r3, [r3, #4]
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d015      	beq.n	800c41a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 8151 	beq.w	800c69a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	f003 030f 	and.w	r3, r3, #15
 800c408:	2101      	movs	r1, #1
 800c40a:	fa01 f303 	lsl.w	r3, r1, r3
 800c40e:	69f9      	ldr	r1, [r7, #28]
 800c410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c414:	4313      	orrs	r3, r2
 800c416:	634b      	str	r3, [r1, #52]	@ 0x34
 800c418:	e13f      	b.n	800c69a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c426:	2b00      	cmp	r3, #0
 800c428:	d116      	bne.n	800c458 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	015a      	lsls	r2, r3, #5
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	4413      	add	r3, r2
 800c432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	0151      	lsls	r1, r2, #5
 800c43c:	69fa      	ldr	r2, [r7, #28]
 800c43e:	440a      	add	r2, r1
 800c440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c444:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	e015      	b.n	800c478 <USB_EPStartXfer+0x310>
 800c44c:	e007ffff 	.word	0xe007ffff
 800c450:	fff80000 	.word	0xfff80000
 800c454:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	015a      	lsls	r2, r3, #5
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	4413      	add	r3, r2
 800c460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	69ba      	ldr	r2, [r7, #24]
 800c468:	0151      	lsls	r1, r2, #5
 800c46a:	69fa      	ldr	r2, [r7, #28]
 800c46c:	440a      	add	r2, r1
 800c46e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c476:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	68d9      	ldr	r1, [r3, #12]
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	781a      	ldrb	r2, [r3, #0]
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	b298      	uxth	r0, r3
 800c486:	79fb      	ldrb	r3, [r7, #7]
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	4603      	mov	r3, r0
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f000 f9b9 	bl	800c804 <USB_WritePacket>
 800c492:	e102      	b.n	800c69a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	015a      	lsls	r2, r3, #5
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	4413      	add	r3, r2
 800c49c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4a0:	691a      	ldr	r2, [r3, #16]
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	0159      	lsls	r1, r3, #5
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	440b      	add	r3, r1
 800c4aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	4b7c      	ldr	r3, [pc, #496]	@ (800c6a4 <USB_EPStartXfer+0x53c>)
 800c4b2:	4013      	ands	r3, r2
 800c4b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	015a      	lsls	r2, r3, #5
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	4413      	add	r3, r2
 800c4be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4c2:	691a      	ldr	r2, [r3, #16]
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	0159      	lsls	r1, r3, #5
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	440b      	add	r3, r1
 800c4cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	4b75      	ldr	r3, [pc, #468]	@ (800c6a8 <USB_EPStartXfer+0x540>)
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d12f      	bne.n	800c53e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	689a      	ldr	r2, [r3, #8]
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	689a      	ldr	r2, [r3, #8]
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	015a      	lsls	r2, r3, #5
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c502:	691a      	ldr	r2, [r3, #16]
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	6a1b      	ldr	r3, [r3, #32]
 800c508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c50c:	69b9      	ldr	r1, [r7, #24]
 800c50e:	0148      	lsls	r0, r1, #5
 800c510:	69f9      	ldr	r1, [r7, #28]
 800c512:	4401      	add	r1, r0
 800c514:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c518:	4313      	orrs	r3, r2
 800c51a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	015a      	lsls	r2, r3, #5
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	4413      	add	r3, r2
 800c524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	69ba      	ldr	r2, [r7, #24]
 800c52c:	0151      	lsls	r1, r2, #5
 800c52e:	69fa      	ldr	r2, [r7, #28]
 800c530:	440a      	add	r2, r1
 800c532:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c536:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c53a:	6113      	str	r3, [r2, #16]
 800c53c:	e05f      	b.n	800c5fe <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d123      	bne.n	800c58e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	015a      	lsls	r2, r3, #5
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	4413      	add	r3, r2
 800c54e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c552:	691a      	ldr	r2, [r3, #16]
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c55c:	69b9      	ldr	r1, [r7, #24]
 800c55e:	0148      	lsls	r0, r1, #5
 800c560:	69f9      	ldr	r1, [r7, #28]
 800c562:	4401      	add	r1, r0
 800c564:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c568:	4313      	orrs	r3, r2
 800c56a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	015a      	lsls	r2, r3, #5
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	4413      	add	r3, r2
 800c574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	69ba      	ldr	r2, [r7, #24]
 800c57c:	0151      	lsls	r1, r2, #5
 800c57e:	69fa      	ldr	r2, [r7, #28]
 800c580:	440a      	add	r2, r1
 800c582:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c586:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c58a:	6113      	str	r3, [r2, #16]
 800c58c:	e037      	b.n	800c5fe <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	691a      	ldr	r2, [r3, #16]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	4413      	add	r3, r2
 800c598:	1e5a      	subs	r2, r3, #1
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5a2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	8afa      	ldrh	r2, [r7, #22]
 800c5aa:	fb03 f202 	mul.w	r2, r3, r2
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	015a      	lsls	r2, r3, #5
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5be:	691a      	ldr	r2, [r3, #16]
 800c5c0:	8afb      	ldrh	r3, [r7, #22]
 800c5c2:	04d9      	lsls	r1, r3, #19
 800c5c4:	4b39      	ldr	r3, [pc, #228]	@ (800c6ac <USB_EPStartXfer+0x544>)
 800c5c6:	400b      	ands	r3, r1
 800c5c8:	69b9      	ldr	r1, [r7, #24]
 800c5ca:	0148      	lsls	r0, r1, #5
 800c5cc:	69f9      	ldr	r1, [r7, #28]
 800c5ce:	4401      	add	r1, r0
 800c5d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	015a      	lsls	r2, r3, #5
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	4413      	add	r3, r2
 800c5e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5e4:	691a      	ldr	r2, [r3, #16]
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5ee:	69b9      	ldr	r1, [r7, #24]
 800c5f0:	0148      	lsls	r0, r1, #5
 800c5f2:	69f9      	ldr	r1, [r7, #28]
 800c5f4:	4401      	add	r1, r0
 800c5f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c5fe:	79fb      	ldrb	r3, [r7, #7]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d10d      	bne.n	800c620 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d009      	beq.n	800c620 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	68d9      	ldr	r1, [r3, #12]
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	015a      	lsls	r2, r3, #5
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	4413      	add	r3, r2
 800c618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c61c:	460a      	mov	r2, r1
 800c61e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	791b      	ldrb	r3, [r3, #4]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d128      	bne.n	800c67a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c634:	2b00      	cmp	r3, #0
 800c636:	d110      	bne.n	800c65a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	69ba      	ldr	r2, [r7, #24]
 800c648:	0151      	lsls	r1, r2, #5
 800c64a:	69fa      	ldr	r2, [r7, #28]
 800c64c:	440a      	add	r2, r1
 800c64e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c652:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	e00f      	b.n	800c67a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	015a      	lsls	r2, r3, #5
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	4413      	add	r3, r2
 800c662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	69ba      	ldr	r2, [r7, #24]
 800c66a:	0151      	lsls	r1, r2, #5
 800c66c:	69fa      	ldr	r2, [r7, #28]
 800c66e:	440a      	add	r2, r1
 800c670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c678:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	015a      	lsls	r2, r3, #5
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	4413      	add	r3, r2
 800c682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	69ba      	ldr	r2, [r7, #24]
 800c68a:	0151      	lsls	r1, r2, #5
 800c68c:	69fa      	ldr	r2, [r7, #28]
 800c68e:	440a      	add	r2, r1
 800c690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c694:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c698:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3720      	adds	r7, #32
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	fff80000 	.word	0xfff80000
 800c6a8:	e007ffff 	.word	0xe007ffff
 800c6ac:	1ff80000 	.word	0x1ff80000

0800c6b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	785b      	ldrb	r3, [r3, #1]
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d14a      	bne.n	800c764 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	015a      	lsls	r2, r3, #5
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c6e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c6e6:	f040 8086 	bne.w	800c7f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	015a      	lsls	r2, r3, #5
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	7812      	ldrb	r2, [r2, #0]
 800c6fe:	0151      	lsls	r1, r2, #5
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	440a      	add	r2, r1
 800c704:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c708:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c70c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	015a      	lsls	r2, r3, #5
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	4413      	add	r3, r2
 800c718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	7812      	ldrb	r2, [r2, #0]
 800c722:	0151      	lsls	r1, r2, #5
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	440a      	add	r2, r1
 800c728:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c72c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c730:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3301      	adds	r3, #1
 800c736:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c73e:	4293      	cmp	r3, r2
 800c740:	d902      	bls.n	800c748 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c742:	2301      	movs	r3, #1
 800c744:	75fb      	strb	r3, [r7, #23]
          break;
 800c746:	e056      	b.n	800c7f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	015a      	lsls	r2, r3, #5
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	4413      	add	r3, r2
 800c752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c75c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c760:	d0e7      	beq.n	800c732 <USB_EPStopXfer+0x82>
 800c762:	e048      	b.n	800c7f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	015a      	lsls	r2, r3, #5
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	4413      	add	r3, r2
 800c76e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c778:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c77c:	d13b      	bne.n	800c7f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	015a      	lsls	r2, r3, #5
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	4413      	add	r3, r2
 800c788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	7812      	ldrb	r2, [r2, #0]
 800c792:	0151      	lsls	r1, r2, #5
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	440a      	add	r2, r1
 800c798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c79c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c7a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	015a      	lsls	r2, r3, #5
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	7812      	ldrb	r2, [r2, #0]
 800c7b6:	0151      	lsls	r1, r2, #5
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	440a      	add	r2, r1
 800c7bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c7c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c7c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d902      	bls.n	800c7dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	75fb      	strb	r3, [r7, #23]
          break;
 800c7da:	e00c      	b.n	800c7f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	015a      	lsls	r2, r3, #5
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c7f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7f4:	d0e7      	beq.n	800c7c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	371c      	adds	r7, #28
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c804:	b480      	push	{r7}
 800c806:	b089      	sub	sp, #36	@ 0x24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	4611      	mov	r1, r2
 800c810:	461a      	mov	r2, r3
 800c812:	460b      	mov	r3, r1
 800c814:	71fb      	strb	r3, [r7, #7]
 800c816:	4613      	mov	r3, r2
 800c818:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c822:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c826:	2b00      	cmp	r3, #0
 800c828:	d123      	bne.n	800c872 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c82a:	88bb      	ldrh	r3, [r7, #4]
 800c82c:	3303      	adds	r3, #3
 800c82e:	089b      	lsrs	r3, r3, #2
 800c830:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c832:	2300      	movs	r3, #0
 800c834:	61bb      	str	r3, [r7, #24]
 800c836:	e018      	b.n	800c86a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c838:	79fb      	ldrb	r3, [r7, #7]
 800c83a:	031a      	lsls	r2, r3, #12
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c844:	461a      	mov	r2, r3
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	3301      	adds	r3, #1
 800c850:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	3301      	adds	r3, #1
 800c856:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	3301      	adds	r3, #1
 800c85c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	3301      	adds	r3, #1
 800c862:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c864:	69bb      	ldr	r3, [r7, #24]
 800c866:	3301      	adds	r3, #1
 800c868:	61bb      	str	r3, [r7, #24]
 800c86a:	69ba      	ldr	r2, [r7, #24]
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d3e2      	bcc.n	800c838 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3724      	adds	r7, #36	@ 0x24
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c880:	b480      	push	{r7}
 800c882:	b08b      	sub	sp, #44	@ 0x2c
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	4613      	mov	r3, r2
 800c88c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c896:	88fb      	ldrh	r3, [r7, #6]
 800c898:	089b      	lsrs	r3, r3, #2
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c89e:	88fb      	ldrh	r3, [r7, #6]
 800c8a0:	f003 0303 	and.w	r3, r3, #3
 800c8a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	623b      	str	r3, [r7, #32]
 800c8aa:	e014      	b.n	800c8d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	623b      	str	r3, [r7, #32]
 800c8d6:	6a3a      	ldr	r2, [r7, #32]
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d3e6      	bcc.n	800c8ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c8de:	8bfb      	ldrh	r3, [r7, #30]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d01e      	beq.n	800c922 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	f107 0310 	add.w	r3, r7, #16
 800c8f4:	6812      	ldr	r2, [r2, #0]
 800c8f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c8f8:	693a      	ldr	r2, [r7, #16]
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	00db      	lsls	r3, r3, #3
 800c900:	fa22 f303 	lsr.w	r3, r2, r3
 800c904:	b2da      	uxtb	r2, r3
 800c906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c908:	701a      	strb	r2, [r3, #0]
      i++;
 800c90a:	6a3b      	ldr	r3, [r7, #32]
 800c90c:	3301      	adds	r3, #1
 800c90e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c912:	3301      	adds	r3, #1
 800c914:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c916:	8bfb      	ldrh	r3, [r7, #30]
 800c918:	3b01      	subs	r3, #1
 800c91a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c91c:	8bfb      	ldrh	r3, [r7, #30]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1ea      	bne.n	800c8f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c924:	4618      	mov	r0, r3
 800c926:	372c      	adds	r7, #44	@ 0x2c
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	785b      	ldrb	r3, [r3, #1]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d12c      	bne.n	800c9a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	015a      	lsls	r2, r3, #5
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	4413      	add	r3, r2
 800c954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	db12      	blt.n	800c984 <USB_EPSetStall+0x54>
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00f      	beq.n	800c984 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	015a      	lsls	r2, r3, #5
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	4413      	add	r3, r2
 800c96c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	0151      	lsls	r1, r2, #5
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	440a      	add	r2, r1
 800c97a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c97e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c982:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	015a      	lsls	r2, r3, #5
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	4413      	add	r3, r2
 800c98c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	0151      	lsls	r1, r2, #5
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	440a      	add	r2, r1
 800c99a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c99e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c9a2:	6013      	str	r3, [r2, #0]
 800c9a4:	e02b      	b.n	800c9fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	015a      	lsls	r2, r3, #5
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	db12      	blt.n	800c9de <USB_EPSetStall+0xae>
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00f      	beq.n	800c9de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	015a      	lsls	r2, r3, #5
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	0151      	lsls	r1, r2, #5
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	440a      	add	r2, r1
 800c9d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c9dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	015a      	lsls	r2, r3, #5
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	0151      	lsls	r1, r2, #5
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	440a      	add	r2, r1
 800c9f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c9fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	785b      	ldrb	r3, [r3, #1]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d128      	bne.n	800ca7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	015a      	lsls	r2, r3, #5
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	4413      	add	r3, r2
 800ca30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	0151      	lsls	r1, r2, #5
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	440a      	add	r2, r1
 800ca3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ca46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	791b      	ldrb	r3, [r3, #4]
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d003      	beq.n	800ca58 <USB_EPClearStall+0x4c>
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	791b      	ldrb	r3, [r3, #4]
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d138      	bne.n	800caca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	015a      	lsls	r2, r3, #5
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	4413      	add	r3, r2
 800ca60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	0151      	lsls	r1, r2, #5
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	440a      	add	r2, r1
 800ca6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca76:	6013      	str	r3, [r2, #0]
 800ca78:	e027      	b.n	800caca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	015a      	lsls	r2, r3, #5
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4413      	add	r3, r2
 800ca82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	0151      	lsls	r1, r2, #5
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	440a      	add	r2, r1
 800ca90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ca98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	791b      	ldrb	r3, [r3, #4]
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	d003      	beq.n	800caaa <USB_EPClearStall+0x9e>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	791b      	ldrb	r3, [r3, #4]
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d10f      	bne.n	800caca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	015a      	lsls	r2, r3, #5
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	4413      	add	r3, r2
 800cab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	0151      	lsls	r1, r2, #5
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	440a      	add	r2, r1
 800cac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cac8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	460b      	mov	r3, r1
 800cae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800caf6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cafa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	78fb      	ldrb	r3, [r7, #3]
 800cb06:	011b      	lsls	r3, r3, #4
 800cb08:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800cb0c:	68f9      	ldr	r1, [r7, #12]
 800cb0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cb12:	4313      	orrs	r3, r2
 800cb14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3714      	adds	r7, #20
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb3e:	f023 0303 	bic.w	r3, r3, #3
 800cb42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb52:	f023 0302 	bic.w	r3, r3, #2
 800cb56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb66:	b480      	push	{r7}
 800cb68:	b085      	sub	sp, #20
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb80:	f023 0303 	bic.w	r3, r3, #3
 800cb84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb94:	f043 0302 	orr.w	r3, r3, #2
 800cb98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	4013      	ands	r3, r2
 800cbbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cbce:	b480      	push	{r7}
 800cbd0:	b085      	sub	sp, #20
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbea:	69db      	ldr	r3, [r3, #28]
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	4013      	ands	r3, r2
 800cbf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	0c1b      	lsrs	r3, r3, #16
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cc02:	b480      	push	{r7}
 800cc04:	b085      	sub	sp, #20
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc14:	699b      	ldr	r3, [r3, #24]
 800cc16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc1e:	69db      	ldr	r3, [r3, #28]
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	4013      	ands	r3, r2
 800cc24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	b29b      	uxth	r3, r3
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3714      	adds	r7, #20
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr

0800cc36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cc36:	b480      	push	{r7}
 800cc38:	b085      	sub	sp, #20
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	460b      	mov	r3, r1
 800cc40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cc46:	78fb      	ldrb	r3, [r7, #3]
 800cc48:	015a      	lsls	r2, r3, #5
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc5c:	695b      	ldr	r3, [r3, #20]
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	4013      	ands	r3, r2
 800cc62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cc64:	68bb      	ldr	r3, [r7, #8]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cc72:	b480      	push	{r7}
 800cc74:	b087      	sub	sp, #28
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cc96:	78fb      	ldrb	r3, [r7, #3]
 800cc98:	f003 030f 	and.w	r3, r3, #15
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	fa22 f303 	lsr.w	r3, r2, r3
 800cca2:	01db      	lsls	r3, r3, #7
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ccac:	78fb      	ldrb	r3, [r7, #3]
 800ccae:	015a      	lsls	r2, r3, #5
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	693a      	ldr	r2, [r7, #16]
 800ccbc:	4013      	ands	r3, r2
 800ccbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ccc0:	68bb      	ldr	r3, [r7, #8]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	371c      	adds	r7, #28
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr

0800ccce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b083      	sub	sp, #12
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	695b      	ldr	r3, [r3, #20]
 800ccda:	f003 0301 	and.w	r3, r3, #1
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
	...

0800ccec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd06:	4619      	mov	r1, r3
 800cd08:	4b09      	ldr	r3, [pc, #36]	@ (800cd30 <USB_ActivateSetup+0x44>)
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cd1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	fffff800 	.word	0xfffff800

0800cd34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b087      	sub	sp, #28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	607a      	str	r2, [r7, #4]
 800cd40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	333c      	adds	r3, #60	@ 0x3c
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	4a26      	ldr	r2, [pc, #152]	@ (800cdec <USB_EP0_OutStart+0xb8>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d90a      	bls.n	800cd6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd68:	d101      	bne.n	800cd6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e037      	b.n	800cdde <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd74:	461a      	mov	r2, r3
 800cd76:	2300      	movs	r3, #0
 800cd78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cd8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd9c:	f043 0318 	orr.w	r3, r3, #24
 800cda0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	697a      	ldr	r2, [r7, #20]
 800cdac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cdb0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cdb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cdb6:	7afb      	ldrb	r3, [r7, #11]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d10f      	bne.n	800cddc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	697a      	ldr	r2, [r7, #20]
 800cdd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cdd6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cdda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	371c      	adds	r7, #28
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	4f54300a 	.word	0x4f54300a

0800cdf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce08:	d901      	bls.n	800ce0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	e01b      	b.n	800ce46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	691b      	ldr	r3, [r3, #16]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	daf2      	bge.n	800cdfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce16:	2300      	movs	r3, #0
 800ce18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	f043 0201 	orr.w	r2, r3, #1
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce32:	d901      	bls.n	800ce38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce34:	2303      	movs	r3, #3
 800ce36:	e006      	b.n	800ce46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d0f0      	beq.n	800ce26 <USB_CoreReset+0x36>

  return HAL_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
	...

0800ce54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ce60:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ce64:	f002 fcb8 	bl	800f7d8 <USBD_static_malloc>
 800ce68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d109      	bne.n	800ce84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	32b0      	adds	r2, #176	@ 0xb0
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ce80:	2302      	movs	r3, #2
 800ce82:	e0d4      	b.n	800d02e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ce84:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ce88:	2100      	movs	r1, #0
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f002 fce8 	bl	800f860 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	32b0      	adds	r2, #176	@ 0xb0
 800ce9a:	68f9      	ldr	r1, [r7, #12]
 800ce9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	32b0      	adds	r2, #176	@ 0xb0
 800ceaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	7c1b      	ldrb	r3, [r3, #16]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d138      	bne.n	800cf2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cebc:	4b5e      	ldr	r3, [pc, #376]	@ (800d038 <USBD_CDC_Init+0x1e4>)
 800cebe:	7819      	ldrb	r1, [r3, #0]
 800cec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cec4:	2202      	movs	r2, #2
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f002 fb63 	bl	800f592 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cecc:	4b5a      	ldr	r3, [pc, #360]	@ (800d038 <USBD_CDC_Init+0x1e4>)
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	f003 020f 	and.w	r2, r3, #15
 800ced4:	6879      	ldr	r1, [r7, #4]
 800ced6:	4613      	mov	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	4413      	add	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	440b      	add	r3, r1
 800cee0:	3324      	adds	r3, #36	@ 0x24
 800cee2:	2201      	movs	r2, #1
 800cee4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cee6:	4b55      	ldr	r3, [pc, #340]	@ (800d03c <USBD_CDC_Init+0x1e8>)
 800cee8:	7819      	ldrb	r1, [r3, #0]
 800ceea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ceee:	2202      	movs	r2, #2
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f002 fb4e 	bl	800f592 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cef6:	4b51      	ldr	r3, [pc, #324]	@ (800d03c <USBD_CDC_Init+0x1e8>)
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	f003 020f 	and.w	r2, r3, #15
 800cefe:	6879      	ldr	r1, [r7, #4]
 800cf00:	4613      	mov	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	4413      	add	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	440b      	add	r3, r1
 800cf0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf0e:	2201      	movs	r2, #1
 800cf10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf12:	4b4b      	ldr	r3, [pc, #300]	@ (800d040 <USBD_CDC_Init+0x1ec>)
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	f003 020f 	and.w	r2, r3, #15
 800cf1a:	6879      	ldr	r1, [r7, #4]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	440b      	add	r3, r1
 800cf26:	3326      	adds	r3, #38	@ 0x26
 800cf28:	2210      	movs	r2, #16
 800cf2a:	801a      	strh	r2, [r3, #0]
 800cf2c:	e035      	b.n	800cf9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cf2e:	4b42      	ldr	r3, [pc, #264]	@ (800d038 <USBD_CDC_Init+0x1e4>)
 800cf30:	7819      	ldrb	r1, [r3, #0]
 800cf32:	2340      	movs	r3, #64	@ 0x40
 800cf34:	2202      	movs	r2, #2
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f002 fb2b 	bl	800f592 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cf3c:	4b3e      	ldr	r3, [pc, #248]	@ (800d038 <USBD_CDC_Init+0x1e4>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	f003 020f 	and.w	r2, r3, #15
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	4613      	mov	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	4413      	add	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	440b      	add	r3, r1
 800cf50:	3324      	adds	r3, #36	@ 0x24
 800cf52:	2201      	movs	r2, #1
 800cf54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf56:	4b39      	ldr	r3, [pc, #228]	@ (800d03c <USBD_CDC_Init+0x1e8>)
 800cf58:	7819      	ldrb	r1, [r3, #0]
 800cf5a:	2340      	movs	r3, #64	@ 0x40
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f002 fb17 	bl	800f592 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cf64:	4b35      	ldr	r3, [pc, #212]	@ (800d03c <USBD_CDC_Init+0x1e8>)
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	f003 020f 	and.w	r2, r3, #15
 800cf6c:	6879      	ldr	r1, [r7, #4]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	440b      	add	r3, r1
 800cf78:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cf80:	4b2f      	ldr	r3, [pc, #188]	@ (800d040 <USBD_CDC_Init+0x1ec>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	f003 020f 	and.w	r2, r3, #15
 800cf88:	6879      	ldr	r1, [r7, #4]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	440b      	add	r3, r1
 800cf94:	3326      	adds	r3, #38	@ 0x26
 800cf96:	2210      	movs	r2, #16
 800cf98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cf9a:	4b29      	ldr	r3, [pc, #164]	@ (800d040 <USBD_CDC_Init+0x1ec>)
 800cf9c:	7819      	ldrb	r1, [r3, #0]
 800cf9e:	2308      	movs	r3, #8
 800cfa0:	2203      	movs	r2, #3
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f002 faf5 	bl	800f592 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cfa8:	4b25      	ldr	r3, [pc, #148]	@ (800d040 <USBD_CDC_Init+0x1ec>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	f003 020f 	and.w	r2, r3, #15
 800cfb0:	6879      	ldr	r1, [r7, #4]
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4413      	add	r3, r2
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	440b      	add	r3, r1
 800cfbc:	3324      	adds	r3, #36	@ 0x24
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	33b0      	adds	r3, #176	@ 0xb0
 800cfd4:	009b      	lsls	r3, r3, #2
 800cfd6:	4413      	add	r3, r2
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d101      	bne.n	800cffc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cff8:	2302      	movs	r3, #2
 800cffa:	e018      	b.n	800d02e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	7c1b      	ldrb	r3, [r3, #16]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10a      	bne.n	800d01a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d004:	4b0d      	ldr	r3, [pc, #52]	@ (800d03c <USBD_CDC_Init+0x1e8>)
 800d006:	7819      	ldrb	r1, [r3, #0]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d00e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f002 fbac 	bl	800f770 <USBD_LL_PrepareReceive>
 800d018:	e008      	b.n	800d02c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d01a:	4b08      	ldr	r3, [pc, #32]	@ (800d03c <USBD_CDC_Init+0x1e8>)
 800d01c:	7819      	ldrb	r1, [r3, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d024:	2340      	movs	r3, #64	@ 0x40
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f002 fba2 	bl	800f770 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	24000097 	.word	0x24000097
 800d03c:	24000098 	.word	0x24000098
 800d040:	24000099 	.word	0x24000099

0800d044 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d050:	4b3a      	ldr	r3, [pc, #232]	@ (800d13c <USBD_CDC_DeInit+0xf8>)
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	4619      	mov	r1, r3
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f002 fac1 	bl	800f5de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d05c:	4b37      	ldr	r3, [pc, #220]	@ (800d13c <USBD_CDC_DeInit+0xf8>)
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	f003 020f 	and.w	r2, r3, #15
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	4613      	mov	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4413      	add	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	440b      	add	r3, r1
 800d070:	3324      	adds	r3, #36	@ 0x24
 800d072:	2200      	movs	r2, #0
 800d074:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d076:	4b32      	ldr	r3, [pc, #200]	@ (800d140 <USBD_CDC_DeInit+0xfc>)
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	4619      	mov	r1, r3
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f002 faae 	bl	800f5de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d082:	4b2f      	ldr	r3, [pc, #188]	@ (800d140 <USBD_CDC_DeInit+0xfc>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	f003 020f 	and.w	r2, r3, #15
 800d08a:	6879      	ldr	r1, [r7, #4]
 800d08c:	4613      	mov	r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4413      	add	r3, r2
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	440b      	add	r3, r1
 800d096:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d09a:	2200      	movs	r2, #0
 800d09c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d09e:	4b29      	ldr	r3, [pc, #164]	@ (800d144 <USBD_CDC_DeInit+0x100>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f002 fa9a 	bl	800f5de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d0aa:	4b26      	ldr	r3, [pc, #152]	@ (800d144 <USBD_CDC_DeInit+0x100>)
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	f003 020f 	and.w	r2, r3, #15
 800d0b2:	6879      	ldr	r1, [r7, #4]
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4413      	add	r3, r2
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	440b      	add	r3, r1
 800d0be:	3324      	adds	r3, #36	@ 0x24
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d0c4:	4b1f      	ldr	r3, [pc, #124]	@ (800d144 <USBD_CDC_DeInit+0x100>)
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	f003 020f 	and.w	r2, r3, #15
 800d0cc:	6879      	ldr	r1, [r7, #4]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	4413      	add	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	440b      	add	r3, r1
 800d0d8:	3326      	adds	r3, #38	@ 0x26
 800d0da:	2200      	movs	r2, #0
 800d0dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	32b0      	adds	r2, #176	@ 0xb0
 800d0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d01f      	beq.n	800d130 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	33b0      	adds	r3, #176	@ 0xb0
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4413      	add	r3, r2
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	32b0      	adds	r2, #176	@ 0xb0
 800d10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d112:	4618      	mov	r0, r3
 800d114:	f002 fb6e 	bl	800f7f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	32b0      	adds	r2, #176	@ 0xb0
 800d122:	2100      	movs	r1, #0
 800d124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	24000097 	.word	0x24000097
 800d140:	24000098 	.word	0x24000098
 800d144:	24000099 	.word	0x24000099

0800d148 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b086      	sub	sp, #24
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	32b0      	adds	r2, #176	@ 0xb0
 800d15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d160:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d162:	2300      	movs	r3, #0
 800d164:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d166:	2300      	movs	r3, #0
 800d168:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d101      	bne.n	800d178 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d174:	2303      	movs	r3, #3
 800d176:	e0bf      	b.n	800d2f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d180:	2b00      	cmp	r3, #0
 800d182:	d050      	beq.n	800d226 <USBD_CDC_Setup+0xde>
 800d184:	2b20      	cmp	r3, #32
 800d186:	f040 80af 	bne.w	800d2e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	88db      	ldrh	r3, [r3, #6]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d03a      	beq.n	800d208 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	b25b      	sxtb	r3, r3
 800d198:	2b00      	cmp	r3, #0
 800d19a:	da1b      	bge.n	800d1d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	33b0      	adds	r3, #176	@ 0xb0
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d1b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d1b4:	683a      	ldr	r2, [r7, #0]
 800d1b6:	88d2      	ldrh	r2, [r2, #6]
 800d1b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	88db      	ldrh	r3, [r3, #6]
 800d1be:	2b07      	cmp	r3, #7
 800d1c0:	bf28      	it	cs
 800d1c2:	2307      	movcs	r3, #7
 800d1c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	89fa      	ldrh	r2, [r7, #14]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f001 fd7d 	bl	800eccc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d1d2:	e090      	b.n	800d2f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	785a      	ldrb	r2, [r3, #1]
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	88db      	ldrh	r3, [r3, #6]
 800d1e2:	2b3f      	cmp	r3, #63	@ 0x3f
 800d1e4:	d803      	bhi.n	800d1ee <USBD_CDC_Setup+0xa6>
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	88db      	ldrh	r3, [r3, #6]
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	e000      	b.n	800d1f0 <USBD_CDC_Setup+0xa8>
 800d1ee:	2240      	movs	r2, #64	@ 0x40
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d1f6:	6939      	ldr	r1, [r7, #16]
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d1fe:	461a      	mov	r2, r3
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f001 fd8f 	bl	800ed24 <USBD_CtlPrepareRx>
      break;
 800d206:	e076      	b.n	800d2f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	33b0      	adds	r3, #176	@ 0xb0
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	7850      	ldrb	r0, [r2, #1]
 800d21e:	2200      	movs	r2, #0
 800d220:	6839      	ldr	r1, [r7, #0]
 800d222:	4798      	blx	r3
      break;
 800d224:	e067      	b.n	800d2f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	785b      	ldrb	r3, [r3, #1]
 800d22a:	2b0b      	cmp	r3, #11
 800d22c:	d851      	bhi.n	800d2d2 <USBD_CDC_Setup+0x18a>
 800d22e:	a201      	add	r2, pc, #4	@ (adr r2, 800d234 <USBD_CDC_Setup+0xec>)
 800d230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d234:	0800d265 	.word	0x0800d265
 800d238:	0800d2e1 	.word	0x0800d2e1
 800d23c:	0800d2d3 	.word	0x0800d2d3
 800d240:	0800d2d3 	.word	0x0800d2d3
 800d244:	0800d2d3 	.word	0x0800d2d3
 800d248:	0800d2d3 	.word	0x0800d2d3
 800d24c:	0800d2d3 	.word	0x0800d2d3
 800d250:	0800d2d3 	.word	0x0800d2d3
 800d254:	0800d2d3 	.word	0x0800d2d3
 800d258:	0800d2d3 	.word	0x0800d2d3
 800d25c:	0800d28f 	.word	0x0800d28f
 800d260:	0800d2b9 	.word	0x0800d2b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	2b03      	cmp	r3, #3
 800d26e:	d107      	bne.n	800d280 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d270:	f107 030a 	add.w	r3, r7, #10
 800d274:	2202      	movs	r2, #2
 800d276:	4619      	mov	r1, r3
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f001 fd27 	bl	800eccc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d27e:	e032      	b.n	800d2e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d280:	6839      	ldr	r1, [r7, #0]
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f001 fca5 	bl	800ebd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d288:	2303      	movs	r3, #3
 800d28a:	75fb      	strb	r3, [r7, #23]
          break;
 800d28c:	e02b      	b.n	800d2e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d294:	b2db      	uxtb	r3, r3
 800d296:	2b03      	cmp	r3, #3
 800d298:	d107      	bne.n	800d2aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d29a:	f107 030d 	add.w	r3, r7, #13
 800d29e:	2201      	movs	r2, #1
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f001 fd12 	bl	800eccc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2a8:	e01d      	b.n	800d2e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d2aa:	6839      	ldr	r1, [r7, #0]
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f001 fc90 	bl	800ebd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2b2:	2303      	movs	r3, #3
 800d2b4:	75fb      	strb	r3, [r7, #23]
          break;
 800d2b6:	e016      	b.n	800d2e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b03      	cmp	r3, #3
 800d2c2:	d00f      	beq.n	800d2e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d2c4:	6839      	ldr	r1, [r7, #0]
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f001 fc83 	bl	800ebd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d2d0:	e008      	b.n	800d2e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f001 fc7c 	bl	800ebd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	75fb      	strb	r3, [r7, #23]
          break;
 800d2de:	e002      	b.n	800d2e6 <USBD_CDC_Setup+0x19e>
          break;
 800d2e0:	bf00      	nop
 800d2e2:	e008      	b.n	800d2f6 <USBD_CDC_Setup+0x1ae>
          break;
 800d2e4:	bf00      	nop
      }
      break;
 800d2e6:	e006      	b.n	800d2f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f001 fc71 	bl	800ebd2 <USBD_CtlError>
      ret = USBD_FAIL;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800d2f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800d2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3718      	adds	r7, #24
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d312:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	32b0      	adds	r2, #176	@ 0xb0
 800d31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d101      	bne.n	800d32a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d326:	2303      	movs	r3, #3
 800d328:	e065      	b.n	800d3f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	32b0      	adds	r2, #176	@ 0xb0
 800d334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d338:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d33a:	78fb      	ldrb	r3, [r7, #3]
 800d33c:	f003 020f 	and.w	r2, r3, #15
 800d340:	6879      	ldr	r1, [r7, #4]
 800d342:	4613      	mov	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4413      	add	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	440b      	add	r3, r1
 800d34c:	3318      	adds	r3, #24
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d02f      	beq.n	800d3b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d354:	78fb      	ldrb	r3, [r7, #3]
 800d356:	f003 020f 	and.w	r2, r3, #15
 800d35a:	6879      	ldr	r1, [r7, #4]
 800d35c:	4613      	mov	r3, r2
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	440b      	add	r3, r1
 800d366:	3318      	adds	r3, #24
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	78fb      	ldrb	r3, [r7, #3]
 800d36c:	f003 010f 	and.w	r1, r3, #15
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	460b      	mov	r3, r1
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	440b      	add	r3, r1
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	4403      	add	r3, r0
 800d37c:	331c      	adds	r3, #28
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	fbb2 f1f3 	udiv	r1, r2, r3
 800d384:	fb01 f303 	mul.w	r3, r1, r3
 800d388:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d112      	bne.n	800d3b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d38e:	78fb      	ldrb	r3, [r7, #3]
 800d390:	f003 020f 	and.w	r2, r3, #15
 800d394:	6879      	ldr	r1, [r7, #4]
 800d396:	4613      	mov	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	440b      	add	r3, r1
 800d3a0:	3318      	adds	r3, #24
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d3a6:	78f9      	ldrb	r1, [r7, #3]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f002 f9be 	bl	800f72e <USBD_LL_Transmit>
 800d3b2:	e01f      	b.n	800d3f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	33b0      	adds	r3, #176	@ 0xb0
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d010      	beq.n	800d3f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	33b0      	adds	r3, #176	@ 0xb0
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	4413      	add	r3, r2
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	68ba      	ldr	r2, [r7, #8]
 800d3e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d3ea:	68ba      	ldr	r2, [r7, #8]
 800d3ec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d3f0:	78fa      	ldrb	r2, [r7, #3]
 800d3f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d3f4:	2300      	movs	r3, #0
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b084      	sub	sp, #16
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	460b      	mov	r3, r1
 800d408:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	32b0      	adds	r2, #176	@ 0xb0
 800d414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d418:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	32b0      	adds	r2, #176	@ 0xb0
 800d424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d101      	bne.n	800d430 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d42c:	2303      	movs	r3, #3
 800d42e:	e01a      	b.n	800d466 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d430:	78fb      	ldrb	r3, [r7, #3]
 800d432:	4619      	mov	r1, r3
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f002 f9bc 	bl	800f7b2 <USBD_LL_GetRxDataSize>
 800d43a:	4602      	mov	r2, r0
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	33b0      	adds	r3, #176	@ 0xb0
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	4413      	add	r3, r2
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d460:	4611      	mov	r1, r2
 800d462:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b084      	sub	sp, #16
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	32b0      	adds	r2, #176	@ 0xb0
 800d480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d484:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d101      	bne.n	800d490 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d48c:	2303      	movs	r3, #3
 800d48e:	e024      	b.n	800d4da <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	33b0      	adds	r3, #176	@ 0xb0
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4413      	add	r3, r2
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d019      	beq.n	800d4d8 <USBD_CDC_EP0_RxReady+0x6a>
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d4aa:	2bff      	cmp	r3, #255	@ 0xff
 800d4ac:	d014      	beq.n	800d4d8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	33b0      	adds	r3, #176	@ 0xb0
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4413      	add	r3, r2
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	689b      	ldr	r3, [r3, #8]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d4c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d4ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	22ff      	movs	r2, #255	@ 0xff
 800d4d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
	...

0800d4e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4ec:	2182      	movs	r1, #130	@ 0x82
 800d4ee:	4818      	ldr	r0, [pc, #96]	@ (800d550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4f0:	f000 fd0f 	bl	800df12 <USBD_GetEpDesc>
 800d4f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4f6:	2101      	movs	r1, #1
 800d4f8:	4815      	ldr	r0, [pc, #84]	@ (800d550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4fa:	f000 fd0a 	bl	800df12 <USBD_GetEpDesc>
 800d4fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d500:	2181      	movs	r1, #129	@ 0x81
 800d502:	4813      	ldr	r0, [pc, #76]	@ (800d550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d504:	f000 fd05 	bl	800df12 <USBD_GetEpDesc>
 800d508:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	2210      	movs	r2, #16
 800d514:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d006      	beq.n	800d52a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	2200      	movs	r2, #0
 800d520:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d524:	711a      	strb	r2, [r3, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d006      	beq.n	800d53e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d538:	711a      	strb	r2, [r3, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2243      	movs	r2, #67	@ 0x43
 800d542:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d544:	4b02      	ldr	r3, [pc, #8]	@ (800d550 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d546:	4618      	mov	r0, r3
 800d548:	3718      	adds	r7, #24
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	24000054 	.word	0x24000054

0800d554 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d55c:	2182      	movs	r1, #130	@ 0x82
 800d55e:	4818      	ldr	r0, [pc, #96]	@ (800d5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d560:	f000 fcd7 	bl	800df12 <USBD_GetEpDesc>
 800d564:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d566:	2101      	movs	r1, #1
 800d568:	4815      	ldr	r0, [pc, #84]	@ (800d5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d56a:	f000 fcd2 	bl	800df12 <USBD_GetEpDesc>
 800d56e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d570:	2181      	movs	r1, #129	@ 0x81
 800d572:	4813      	ldr	r0, [pc, #76]	@ (800d5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d574:	f000 fccd 	bl	800df12 <USBD_GetEpDesc>
 800d578:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	2210      	movs	r2, #16
 800d584:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d006      	beq.n	800d59a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	2200      	movs	r2, #0
 800d590:	711a      	strb	r2, [r3, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	f042 0202 	orr.w	r2, r2, #2
 800d598:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d006      	beq.n	800d5ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	711a      	strb	r2, [r3, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f042 0202 	orr.w	r2, r2, #2
 800d5ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2243      	movs	r2, #67	@ 0x43
 800d5b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d5b4:	4b02      	ldr	r3, [pc, #8]	@ (800d5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3718      	adds	r7, #24
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	24000054 	.word	0x24000054

0800d5c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b086      	sub	sp, #24
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d5cc:	2182      	movs	r1, #130	@ 0x82
 800d5ce:	4818      	ldr	r0, [pc, #96]	@ (800d630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5d0:	f000 fc9f 	bl	800df12 <USBD_GetEpDesc>
 800d5d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d5d6:	2101      	movs	r1, #1
 800d5d8:	4815      	ldr	r0, [pc, #84]	@ (800d630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5da:	f000 fc9a 	bl	800df12 <USBD_GetEpDesc>
 800d5de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d5e0:	2181      	movs	r1, #129	@ 0x81
 800d5e2:	4813      	ldr	r0, [pc, #76]	@ (800d630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5e4:	f000 fc95 	bl	800df12 <USBD_GetEpDesc>
 800d5e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	2210      	movs	r2, #16
 800d5f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d006      	beq.n	800d60a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d604:	711a      	strb	r2, [r3, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d006      	beq.n	800d61e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2200      	movs	r2, #0
 800d614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d618:	711a      	strb	r2, [r3, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2243      	movs	r2, #67	@ 0x43
 800d622:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d624:	4b02      	ldr	r3, [pc, #8]	@ (800d630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d626:	4618      	mov	r0, r3
 800d628:	3718      	adds	r7, #24
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	24000054 	.word	0x24000054

0800d634 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	220a      	movs	r2, #10
 800d640:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d642:	4b03      	ldr	r3, [pc, #12]	@ (800d650 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d644:	4618      	mov	r0, r3
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	24000010 	.word	0x24000010

0800d654 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d664:	2303      	movs	r3, #3
 800d666:	e009      	b.n	800d67c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	33b0      	adds	r3, #176	@ 0xb0
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4413      	add	r3, r2
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d688:	b480      	push	{r7}
 800d68a:	b087      	sub	sp, #28
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	32b0      	adds	r2, #176	@ 0xb0
 800d69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	e008      	b.n	800d6c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	68ba      	ldr	r2, [r7, #8]
 800d6b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	371c      	adds	r7, #28
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b085      	sub	sp, #20
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	32b0      	adds	r2, #176	@ 0xb0
 800d6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d101      	bne.n	800d6f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d6ec:	2303      	movs	r3, #3
 800d6ee:	e004      	b.n	800d6fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
	...

0800d708 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	32b0      	adds	r2, #176	@ 0xb0
 800d71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d71e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	32b0      	adds	r2, #176	@ 0xb0
 800d72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d101      	bne.n	800d736 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d732:	2303      	movs	r3, #3
 800d734:	e018      	b.n	800d768 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	7c1b      	ldrb	r3, [r3, #16]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10a      	bne.n	800d754 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d73e:	4b0c      	ldr	r3, [pc, #48]	@ (800d770 <USBD_CDC_ReceivePacket+0x68>)
 800d740:	7819      	ldrb	r1, [r3, #0]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f002 f80f 	bl	800f770 <USBD_LL_PrepareReceive>
 800d752:	e008      	b.n	800d766 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d754:	4b06      	ldr	r3, [pc, #24]	@ (800d770 <USBD_CDC_ReceivePacket+0x68>)
 800d756:	7819      	ldrb	r1, [r3, #0]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d75e:	2340      	movs	r3, #64	@ 0x40
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f002 f805 	bl	800f770 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	24000098 	.word	0x24000098

0800d774 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	4613      	mov	r3, r2
 800d780:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d101      	bne.n	800d78c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d788:	2303      	movs	r3, #3
 800d78a:	e01f      	b.n	800d7cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2200      	movs	r2, #0
 800d790:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d003      	beq.n	800d7b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	79fa      	ldrb	r2, [r7, #7]
 800d7be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f001 fe79 	bl	800f4b8 <USBD_LL_Init>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d7ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3718      	adds	r7, #24
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d101      	bne.n	800d7ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d7e8:	2303      	movs	r3, #3
 800d7ea:	e025      	b.n	800d838 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	683a      	ldr	r2, [r7, #0]
 800d7f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	32ae      	adds	r2, #174	@ 0xae
 800d7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00f      	beq.n	800d828 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	32ae      	adds	r2, #174	@ 0xae
 800d812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d818:	f107 020e 	add.w	r2, r7, #14
 800d81c:	4610      	mov	r0, r2
 800d81e:	4798      	blx	r3
 800d820:	4602      	mov	r2, r0
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d82e:	1c5a      	adds	r2, r3, #1
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d836:	2300      	movs	r3, #0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f001 fe87 	bl	800f55c <USBD_LL_Start>
 800d84e:	4603      	mov	r3, r0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d860:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d862:	4618      	mov	r0, r3
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	460b      	mov	r3, r1
 800d878:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d884:	2b00      	cmp	r3, #0
 800d886:	d009      	beq.n	800d89c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	78fa      	ldrb	r2, [r7, #3]
 800d892:	4611      	mov	r1, r2
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	4798      	blx	r3
 800d898:	4603      	mov	r3, r0
 800d89a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	78fa      	ldrb	r2, [r7, #3]
 800d8c0:	4611      	mov	r1, r2
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	4798      	blx	r3
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d001      	beq.n	800d8d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b084      	sub	sp, #16
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8ea:	6839      	ldr	r1, [r7, #0]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f001 f936 	bl	800eb5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d900:	461a      	mov	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d90e:	f003 031f 	and.w	r3, r3, #31
 800d912:	2b02      	cmp	r3, #2
 800d914:	d01a      	beq.n	800d94c <USBD_LL_SetupStage+0x72>
 800d916:	2b02      	cmp	r3, #2
 800d918:	d822      	bhi.n	800d960 <USBD_LL_SetupStage+0x86>
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d002      	beq.n	800d924 <USBD_LL_SetupStage+0x4a>
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d00a      	beq.n	800d938 <USBD_LL_SetupStage+0x5e>
 800d922:	e01d      	b.n	800d960 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fb63 	bl	800dff8 <USBD_StdDevReq>
 800d932:	4603      	mov	r3, r0
 800d934:	73fb      	strb	r3, [r7, #15]
      break;
 800d936:	e020      	b.n	800d97a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d93e:	4619      	mov	r1, r3
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 fbcb 	bl	800e0dc <USBD_StdItfReq>
 800d946:	4603      	mov	r3, r0
 800d948:	73fb      	strb	r3, [r7, #15]
      break;
 800d94a:	e016      	b.n	800d97a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d952:	4619      	mov	r1, r3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fc2d 	bl	800e1b4 <USBD_StdEPReq>
 800d95a:	4603      	mov	r3, r0
 800d95c:	73fb      	strb	r3, [r7, #15]
      break;
 800d95e:	e00c      	b.n	800d97a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d966:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f001 fe54 	bl	800f61c <USBD_LL_StallEP>
 800d974:	4603      	mov	r3, r0
 800d976:	73fb      	strb	r3, [r7, #15]
      break;
 800d978:	bf00      	nop
  }

  return ret;
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	460b      	mov	r3, r1
 800d98e:	607a      	str	r2, [r7, #4]
 800d990:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d996:	7afb      	ldrb	r3, [r7, #11]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d16e      	bne.n	800da7a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d9a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d9aa:	2b03      	cmp	r3, #3
 800d9ac:	f040 8098 	bne.w	800dae0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	689a      	ldr	r2, [r3, #8]
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d913      	bls.n	800d9e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	689a      	ldr	r2, [r3, #8]
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	1ad2      	subs	r2, r2, r3
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	68da      	ldr	r2, [r3, #12]
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	689b      	ldr	r3, [r3, #8]
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	bf28      	it	cs
 800d9d6:	4613      	movcs	r3, r2
 800d9d8:	461a      	mov	r2, r3
 800d9da:	6879      	ldr	r1, [r7, #4]
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	f001 f9be 	bl	800ed5e <USBD_CtlContinueRx>
 800d9e2:	e07d      	b.n	800dae0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d9ea:	f003 031f 	and.w	r3, r3, #31
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	d014      	beq.n	800da1c <USBD_LL_DataOutStage+0x98>
 800d9f2:	2b02      	cmp	r3, #2
 800d9f4:	d81d      	bhi.n	800da32 <USBD_LL_DataOutStage+0xae>
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d002      	beq.n	800da00 <USBD_LL_DataOutStage+0x7c>
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d003      	beq.n	800da06 <USBD_LL_DataOutStage+0x82>
 800d9fe:	e018      	b.n	800da32 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800da00:	2300      	movs	r3, #0
 800da02:	75bb      	strb	r3, [r7, #22]
            break;
 800da04:	e018      	b.n	800da38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	4619      	mov	r1, r3
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f000 fa64 	bl	800dede <USBD_CoreFindIF>
 800da16:	4603      	mov	r3, r0
 800da18:	75bb      	strb	r3, [r7, #22]
            break;
 800da1a:	e00d      	b.n	800da38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800da22:	b2db      	uxtb	r3, r3
 800da24:	4619      	mov	r1, r3
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f000 fa66 	bl	800def8 <USBD_CoreFindEP>
 800da2c:	4603      	mov	r3, r0
 800da2e:	75bb      	strb	r3, [r7, #22]
            break;
 800da30:	e002      	b.n	800da38 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800da32:	2300      	movs	r3, #0
 800da34:	75bb      	strb	r3, [r7, #22]
            break;
 800da36:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800da38:	7dbb      	ldrb	r3, [r7, #22]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d119      	bne.n	800da72 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da44:	b2db      	uxtb	r3, r3
 800da46:	2b03      	cmp	r3, #3
 800da48:	d113      	bne.n	800da72 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800da4a:	7dba      	ldrb	r2, [r7, #22]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	32ae      	adds	r2, #174	@ 0xae
 800da50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00b      	beq.n	800da72 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800da5a:	7dba      	ldrb	r2, [r7, #22]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800da62:	7dba      	ldrb	r2, [r7, #22]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	32ae      	adds	r2, #174	@ 0xae
 800da68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f001 f984 	bl	800ed80 <USBD_CtlSendStatus>
 800da78:	e032      	b.n	800dae0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800da7a:	7afb      	ldrb	r3, [r7, #11]
 800da7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da80:	b2db      	uxtb	r3, r3
 800da82:	4619      	mov	r1, r3
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f000 fa37 	bl	800def8 <USBD_CoreFindEP>
 800da8a:	4603      	mov	r3, r0
 800da8c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da8e:	7dbb      	ldrb	r3, [r7, #22]
 800da90:	2bff      	cmp	r3, #255	@ 0xff
 800da92:	d025      	beq.n	800dae0 <USBD_LL_DataOutStage+0x15c>
 800da94:	7dbb      	ldrb	r3, [r7, #22]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d122      	bne.n	800dae0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d117      	bne.n	800dad6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800daa6:	7dba      	ldrb	r2, [r7, #22]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	32ae      	adds	r2, #174	@ 0xae
 800daac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab0:	699b      	ldr	r3, [r3, #24]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00f      	beq.n	800dad6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dab6:	7dba      	ldrb	r2, [r7, #22]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dabe:	7dba      	ldrb	r2, [r7, #22]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	32ae      	adds	r2, #174	@ 0xae
 800dac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	7afa      	ldrb	r2, [r7, #11]
 800dacc:	4611      	mov	r1, r2
 800dace:	68f8      	ldr	r0, [r7, #12]
 800dad0:	4798      	blx	r3
 800dad2:	4603      	mov	r3, r0
 800dad4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
 800dade:	e000      	b.n	800dae2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3718      	adds	r7, #24
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}

0800daea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b086      	sub	sp, #24
 800daee:	af00      	add	r7, sp, #0
 800daf0:	60f8      	str	r0, [r7, #12]
 800daf2:	460b      	mov	r3, r1
 800daf4:	607a      	str	r2, [r7, #4]
 800daf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800daf8:	7afb      	ldrb	r3, [r7, #11]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d16f      	bne.n	800dbde <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	3314      	adds	r3, #20
 800db02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d15a      	bne.n	800dbc4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	689a      	ldr	r2, [r3, #8]
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	429a      	cmp	r2, r3
 800db18:	d914      	bls.n	800db44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	689a      	ldr	r2, [r3, #8]
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	1ad2      	subs	r2, r2, r3
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	461a      	mov	r2, r3
 800db2e:	6879      	ldr	r1, [r7, #4]
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f001 f8e6 	bl	800ed02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db36:	2300      	movs	r3, #0
 800db38:	2200      	movs	r2, #0
 800db3a:	2100      	movs	r1, #0
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f001 fe17 	bl	800f770 <USBD_LL_PrepareReceive>
 800db42:	e03f      	b.n	800dbc4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	68da      	ldr	r2, [r3, #12]
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d11c      	bne.n	800db8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	685a      	ldr	r2, [r3, #4]
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800db58:	429a      	cmp	r2, r3
 800db5a:	d316      	bcc.n	800db8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	685a      	ldr	r2, [r3, #4]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800db66:	429a      	cmp	r2, r3
 800db68:	d20f      	bcs.n	800db8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800db6a:	2200      	movs	r2, #0
 800db6c:	2100      	movs	r1, #0
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f001 f8c7 	bl	800ed02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2200      	movs	r2, #0
 800db78:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db7c:	2300      	movs	r3, #0
 800db7e:	2200      	movs	r2, #0
 800db80:	2100      	movs	r1, #0
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f001 fdf4 	bl	800f770 <USBD_LL_PrepareReceive>
 800db88:	e01c      	b.n	800dbc4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db90:	b2db      	uxtb	r3, r3
 800db92:	2b03      	cmp	r3, #3
 800db94:	d10f      	bne.n	800dbb6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d009      	beq.n	800dbb6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2200      	movs	r2, #0
 800dba6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbb6:	2180      	movs	r1, #128	@ 0x80
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f001 fd2f 	bl	800f61c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	f001 f8f1 	bl	800eda6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d03a      	beq.n	800dc44 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f7ff fe42 	bl	800d858 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800dbdc:	e032      	b.n	800dc44 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dbde:	7afb      	ldrb	r3, [r7, #11]
 800dbe0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f000 f985 	bl	800def8 <USBD_CoreFindEP>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
 800dbf4:	2bff      	cmp	r3, #255	@ 0xff
 800dbf6:	d025      	beq.n	800dc44 <USBD_LL_DataInStage+0x15a>
 800dbf8:	7dfb      	ldrb	r3, [r7, #23]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d122      	bne.n	800dc44 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	2b03      	cmp	r3, #3
 800dc08:	d11c      	bne.n	800dc44 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dc0a:	7dfa      	ldrb	r2, [r7, #23]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	32ae      	adds	r2, #174	@ 0xae
 800dc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc14:	695b      	ldr	r3, [r3, #20]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d014      	beq.n	800dc44 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dc1a:	7dfa      	ldrb	r2, [r7, #23]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dc22:	7dfa      	ldrb	r2, [r7, #23]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	32ae      	adds	r2, #174	@ 0xae
 800dc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc2c:	695b      	ldr	r3, [r3, #20]
 800dc2e:	7afa      	ldrb	r2, [r7, #11]
 800dc30:	4611      	mov	r1, r2
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	4798      	blx	r3
 800dc36:	4603      	mov	r3, r0
 800dc38:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dc3a:	7dbb      	ldrb	r3, [r7, #22]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d001      	beq.n	800dc44 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dc40:	7dbb      	ldrb	r3, [r7, #22]
 800dc42:	e000      	b.n	800dc46 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3718      	adds	r7, #24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b084      	sub	sp, #16
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc56:	2300      	movs	r3, #0
 800dc58:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2200      	movs	r2, #0
 800dc66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d014      	beq.n	800dcb4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00e      	beq.n	800dcb4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	6852      	ldr	r2, [r2, #4]
 800dca2:	b2d2      	uxtb	r2, r2
 800dca4:	4611      	mov	r1, r2
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	4798      	blx	r3
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d001      	beq.n	800dcb4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dcb4:	2340      	movs	r3, #64	@ 0x40
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	2100      	movs	r1, #0
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f001 fc69 	bl	800f592 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2240      	movs	r2, #64	@ 0x40
 800dccc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dcd0:	2340      	movs	r3, #64	@ 0x40
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2180      	movs	r1, #128	@ 0x80
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f001 fc5b 	bl	800f592 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2240      	movs	r2, #64	@ 0x40
 800dce6:	621a      	str	r2, [r3, #32]

  return ret;
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dcf2:	b480      	push	{r7}
 800dcf4:	b083      	sub	sp, #12
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	78fa      	ldrb	r2, [r7, #3]
 800dd02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b04      	cmp	r3, #4
 800dd24:	d006      	beq.n	800dd34 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd2c:	b2da      	uxtb	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2204      	movs	r2, #4
 800dd38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dd3c:	2300      	movs	r3, #0
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	370c      	adds	r7, #12
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr

0800dd4a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dd4a:	b480      	push	{r7}
 800dd4c:	b083      	sub	sp, #12
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2b04      	cmp	r3, #4
 800dd5c:	d106      	bne.n	800dd6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	370c      	adds	r7, #12
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr

0800dd7a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b082      	sub	sp, #8
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b03      	cmp	r3, #3
 800dd8c:	d110      	bne.n	800ddb0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00b      	beq.n	800ddb0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd9e:	69db      	ldr	r3, [r3, #28]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d005      	beq.n	800ddb0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddaa:	69db      	ldr	r3, [r3, #28]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ddb0:	2300      	movs	r3, #0
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3708      	adds	r7, #8
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b082      	sub	sp, #8
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	32ae      	adds	r2, #174	@ 0xae
 800ddd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d101      	bne.n	800dddc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ddd8:	2303      	movs	r3, #3
 800ddda:	e01c      	b.n	800de16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	2b03      	cmp	r3, #3
 800dde6:	d115      	bne.n	800de14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	32ae      	adds	r2, #174	@ 0xae
 800ddf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddf6:	6a1b      	ldr	r3, [r3, #32]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00b      	beq.n	800de14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	32ae      	adds	r2, #174	@ 0xae
 800de06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de0a:	6a1b      	ldr	r3, [r3, #32]
 800de0c:	78fa      	ldrb	r2, [r7, #3]
 800de0e:	4611      	mov	r1, r2
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b082      	sub	sp, #8
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	460b      	mov	r3, r1
 800de28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	32ae      	adds	r2, #174	@ 0xae
 800de34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d101      	bne.n	800de40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800de3c:	2303      	movs	r3, #3
 800de3e:	e01c      	b.n	800de7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de46:	b2db      	uxtb	r3, r3
 800de48:	2b03      	cmp	r3, #3
 800de4a:	d115      	bne.n	800de78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	32ae      	adds	r2, #174	@ 0xae
 800de56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00b      	beq.n	800de78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	32ae      	adds	r2, #174	@ 0xae
 800de6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de70:	78fa      	ldrb	r2, [r7, #3]
 800de72:	4611      	mov	r1, r2
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800de82:	b480      	push	{r7}
 800de84:	b083      	sub	sp, #12
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800de8a:	2300      	movs	r3, #0
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dea0:	2300      	movs	r3, #0
 800dea2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2201      	movs	r2, #1
 800dea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00e      	beq.n	800ded4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	6852      	ldr	r2, [r2, #4]
 800dec2:	b2d2      	uxtb	r2, r2
 800dec4:	4611      	mov	r1, r2
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	4798      	blx	r3
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ded0:	2303      	movs	r3, #3
 800ded2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ded4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dede:	b480      	push	{r7}
 800dee0:	b083      	sub	sp, #12
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
 800dee6:	460b      	mov	r3, r1
 800dee8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800deea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800deec:	4618      	mov	r0, r3
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	460b      	mov	r3, r1
 800df02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800df04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800df06:	4618      	mov	r0, r3
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b086      	sub	sp, #24
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
 800df1a:	460b      	mov	r3, r1
 800df1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	885b      	ldrh	r3, [r3, #2]
 800df2e:	b29b      	uxth	r3, r3
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	7812      	ldrb	r2, [r2, #0]
 800df34:	4293      	cmp	r3, r2
 800df36:	d91f      	bls.n	800df78 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800df3e:	e013      	b.n	800df68 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800df40:	f107 030a 	add.w	r3, r7, #10
 800df44:	4619      	mov	r1, r3
 800df46:	6978      	ldr	r0, [r7, #20]
 800df48:	f000 f81b 	bl	800df82 <USBD_GetNextDesc>
 800df4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	785b      	ldrb	r3, [r3, #1]
 800df52:	2b05      	cmp	r3, #5
 800df54:	d108      	bne.n	800df68 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	789b      	ldrb	r3, [r3, #2]
 800df5e:	78fa      	ldrb	r2, [r7, #3]
 800df60:	429a      	cmp	r2, r3
 800df62:	d008      	beq.n	800df76 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800df64:	2300      	movs	r3, #0
 800df66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	885b      	ldrh	r3, [r3, #2]
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	897b      	ldrh	r3, [r7, #10]
 800df70:	429a      	cmp	r2, r3
 800df72:	d8e5      	bhi.n	800df40 <USBD_GetEpDesc+0x2e>
 800df74:	e000      	b.n	800df78 <USBD_GetEpDesc+0x66>
          break;
 800df76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800df78:	693b      	ldr	r3, [r7, #16]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3718      	adds	r7, #24
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800df82:	b480      	push	{r7}
 800df84:	b085      	sub	sp, #20
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	881b      	ldrh	r3, [r3, #0]
 800df94:	68fa      	ldr	r2, [r7, #12]
 800df96:	7812      	ldrb	r2, [r2, #0]
 800df98:	4413      	add	r3, r2
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dfac:	68fb      	ldr	r3, [r7, #12]
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3714      	adds	r7, #20
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dfba:	b480      	push	{r7}
 800dfbc:	b087      	sub	sp, #28
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dfd8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dfdc:	021b      	lsls	r3, r3, #8
 800dfde:	b21a      	sxth	r2, r3
 800dfe0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	b21b      	sxth	r3, r3
 800dfe8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dfea:	89fb      	ldrh	r3, [r7, #14]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	371c      	adds	r7, #28
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e00e:	2b40      	cmp	r3, #64	@ 0x40
 800e010:	d005      	beq.n	800e01e <USBD_StdDevReq+0x26>
 800e012:	2b40      	cmp	r3, #64	@ 0x40
 800e014:	d857      	bhi.n	800e0c6 <USBD_StdDevReq+0xce>
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00f      	beq.n	800e03a <USBD_StdDevReq+0x42>
 800e01a:	2b20      	cmp	r3, #32
 800e01c:	d153      	bne.n	800e0c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	32ae      	adds	r2, #174	@ 0xae
 800e028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	6839      	ldr	r1, [r7, #0]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	4798      	blx	r3
 800e034:	4603      	mov	r3, r0
 800e036:	73fb      	strb	r3, [r7, #15]
      break;
 800e038:	e04a      	b.n	800e0d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	785b      	ldrb	r3, [r3, #1]
 800e03e:	2b09      	cmp	r3, #9
 800e040:	d83b      	bhi.n	800e0ba <USBD_StdDevReq+0xc2>
 800e042:	a201      	add	r2, pc, #4	@ (adr r2, 800e048 <USBD_StdDevReq+0x50>)
 800e044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e048:	0800e09d 	.word	0x0800e09d
 800e04c:	0800e0b1 	.word	0x0800e0b1
 800e050:	0800e0bb 	.word	0x0800e0bb
 800e054:	0800e0a7 	.word	0x0800e0a7
 800e058:	0800e0bb 	.word	0x0800e0bb
 800e05c:	0800e07b 	.word	0x0800e07b
 800e060:	0800e071 	.word	0x0800e071
 800e064:	0800e0bb 	.word	0x0800e0bb
 800e068:	0800e093 	.word	0x0800e093
 800e06c:	0800e085 	.word	0x0800e085
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e070:	6839      	ldr	r1, [r7, #0]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 fa3c 	bl	800e4f0 <USBD_GetDescriptor>
          break;
 800e078:	e024      	b.n	800e0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 fbcb 	bl	800e818 <USBD_SetAddress>
          break;
 800e082:	e01f      	b.n	800e0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fc0a 	bl	800e8a0 <USBD_SetConfig>
 800e08c:	4603      	mov	r3, r0
 800e08e:	73fb      	strb	r3, [r7, #15]
          break;
 800e090:	e018      	b.n	800e0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e092:	6839      	ldr	r1, [r7, #0]
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 fcad 	bl	800e9f4 <USBD_GetConfig>
          break;
 800e09a:	e013      	b.n	800e0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fcde 	bl	800ea60 <USBD_GetStatus>
          break;
 800e0a4:	e00e      	b.n	800e0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fd0d 	bl	800eac8 <USBD_SetFeature>
          break;
 800e0ae:	e009      	b.n	800e0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e0b0:	6839      	ldr	r1, [r7, #0]
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 fd31 	bl	800eb1a <USBD_ClrFeature>
          break;
 800e0b8:	e004      	b.n	800e0c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e0ba:	6839      	ldr	r1, [r7, #0]
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 fd88 	bl	800ebd2 <USBD_CtlError>
          break;
 800e0c2:	bf00      	nop
      }
      break;
 800e0c4:	e004      	b.n	800e0d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e0c6:	6839      	ldr	r1, [r7, #0]
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 fd82 	bl	800ebd2 <USBD_CtlError>
      break;
 800e0ce:	bf00      	nop
  }

  return ret;
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop

0800e0dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e0f2:	2b40      	cmp	r3, #64	@ 0x40
 800e0f4:	d005      	beq.n	800e102 <USBD_StdItfReq+0x26>
 800e0f6:	2b40      	cmp	r3, #64	@ 0x40
 800e0f8:	d852      	bhi.n	800e1a0 <USBD_StdItfReq+0xc4>
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d001      	beq.n	800e102 <USBD_StdItfReq+0x26>
 800e0fe:	2b20      	cmp	r3, #32
 800e100:	d14e      	bne.n	800e1a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	3b01      	subs	r3, #1
 800e10c:	2b02      	cmp	r3, #2
 800e10e:	d840      	bhi.n	800e192 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	889b      	ldrh	r3, [r3, #4]
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b01      	cmp	r3, #1
 800e118:	d836      	bhi.n	800e188 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	889b      	ldrh	r3, [r3, #4]
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	4619      	mov	r1, r3
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7ff fedb 	bl	800dede <USBD_CoreFindIF>
 800e128:	4603      	mov	r3, r0
 800e12a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e12c:	7bbb      	ldrb	r3, [r7, #14]
 800e12e:	2bff      	cmp	r3, #255	@ 0xff
 800e130:	d01d      	beq.n	800e16e <USBD_StdItfReq+0x92>
 800e132:	7bbb      	ldrb	r3, [r7, #14]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d11a      	bne.n	800e16e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e138:	7bba      	ldrb	r2, [r7, #14]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	32ae      	adds	r2, #174	@ 0xae
 800e13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00f      	beq.n	800e168 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e148:	7bba      	ldrb	r2, [r7, #14]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e150:	7bba      	ldrb	r2, [r7, #14]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	32ae      	adds	r2, #174	@ 0xae
 800e156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	6839      	ldr	r1, [r7, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	4798      	blx	r3
 800e162:	4603      	mov	r3, r0
 800e164:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e166:	e004      	b.n	800e172 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e168:	2303      	movs	r3, #3
 800e16a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e16c:	e001      	b.n	800e172 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e16e:	2303      	movs	r3, #3
 800e170:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	88db      	ldrh	r3, [r3, #6]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d110      	bne.n	800e19c <USBD_StdItfReq+0xc0>
 800e17a:	7bfb      	ldrb	r3, [r7, #15]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10d      	bne.n	800e19c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 fdfd 	bl	800ed80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e186:	e009      	b.n	800e19c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e188:	6839      	ldr	r1, [r7, #0]
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fd21 	bl	800ebd2 <USBD_CtlError>
          break;
 800e190:	e004      	b.n	800e19c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 fd1c 	bl	800ebd2 <USBD_CtlError>
          break;
 800e19a:	e000      	b.n	800e19e <USBD_StdItfReq+0xc2>
          break;
 800e19c:	bf00      	nop
      }
      break;
 800e19e:	e004      	b.n	800e1aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e1a0:	6839      	ldr	r1, [r7, #0]
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 fd15 	bl	800ebd2 <USBD_CtlError>
      break;
 800e1a8:	bf00      	nop
  }

  return ret;
 800e1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3710      	adds	r7, #16
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	889b      	ldrh	r3, [r3, #4]
 800e1c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e1d0:	2b40      	cmp	r3, #64	@ 0x40
 800e1d2:	d007      	beq.n	800e1e4 <USBD_StdEPReq+0x30>
 800e1d4:	2b40      	cmp	r3, #64	@ 0x40
 800e1d6:	f200 817f 	bhi.w	800e4d8 <USBD_StdEPReq+0x324>
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d02a      	beq.n	800e234 <USBD_StdEPReq+0x80>
 800e1de:	2b20      	cmp	r3, #32
 800e1e0:	f040 817a 	bne.w	800e4d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e1e4:	7bbb      	ldrb	r3, [r7, #14]
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7ff fe85 	bl	800def8 <USBD_CoreFindEP>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1f2:	7b7b      	ldrb	r3, [r7, #13]
 800e1f4:	2bff      	cmp	r3, #255	@ 0xff
 800e1f6:	f000 8174 	beq.w	800e4e2 <USBD_StdEPReq+0x32e>
 800e1fa:	7b7b      	ldrb	r3, [r7, #13]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f040 8170 	bne.w	800e4e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e202:	7b7a      	ldrb	r2, [r7, #13]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e20a:	7b7a      	ldrb	r2, [r7, #13]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	32ae      	adds	r2, #174	@ 0xae
 800e210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	2b00      	cmp	r3, #0
 800e218:	f000 8163 	beq.w	800e4e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e21c:	7b7a      	ldrb	r2, [r7, #13]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	32ae      	adds	r2, #174	@ 0xae
 800e222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	6839      	ldr	r1, [r7, #0]
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	4798      	blx	r3
 800e22e:	4603      	mov	r3, r0
 800e230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e232:	e156      	b.n	800e4e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	785b      	ldrb	r3, [r3, #1]
 800e238:	2b03      	cmp	r3, #3
 800e23a:	d008      	beq.n	800e24e <USBD_StdEPReq+0x9a>
 800e23c:	2b03      	cmp	r3, #3
 800e23e:	f300 8145 	bgt.w	800e4cc <USBD_StdEPReq+0x318>
 800e242:	2b00      	cmp	r3, #0
 800e244:	f000 809b 	beq.w	800e37e <USBD_StdEPReq+0x1ca>
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d03c      	beq.n	800e2c6 <USBD_StdEPReq+0x112>
 800e24c:	e13e      	b.n	800e4cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b02      	cmp	r3, #2
 800e258:	d002      	beq.n	800e260 <USBD_StdEPReq+0xac>
 800e25a:	2b03      	cmp	r3, #3
 800e25c:	d016      	beq.n	800e28c <USBD_StdEPReq+0xd8>
 800e25e:	e02c      	b.n	800e2ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e260:	7bbb      	ldrb	r3, [r7, #14]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00d      	beq.n	800e282 <USBD_StdEPReq+0xce>
 800e266:	7bbb      	ldrb	r3, [r7, #14]
 800e268:	2b80      	cmp	r3, #128	@ 0x80
 800e26a:	d00a      	beq.n	800e282 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e26c:	7bbb      	ldrb	r3, [r7, #14]
 800e26e:	4619      	mov	r1, r3
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f001 f9d3 	bl	800f61c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e276:	2180      	movs	r1, #128	@ 0x80
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f001 f9cf 	bl	800f61c <USBD_LL_StallEP>
 800e27e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e280:	e020      	b.n	800e2c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e282:	6839      	ldr	r1, [r7, #0]
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 fca4 	bl	800ebd2 <USBD_CtlError>
              break;
 800e28a:	e01b      	b.n	800e2c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	885b      	ldrh	r3, [r3, #2]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d10e      	bne.n	800e2b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e294:	7bbb      	ldrb	r3, [r7, #14]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00b      	beq.n	800e2b2 <USBD_StdEPReq+0xfe>
 800e29a:	7bbb      	ldrb	r3, [r7, #14]
 800e29c:	2b80      	cmp	r3, #128	@ 0x80
 800e29e:	d008      	beq.n	800e2b2 <USBD_StdEPReq+0xfe>
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	88db      	ldrh	r3, [r3, #6]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d104      	bne.n	800e2b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2a8:	7bbb      	ldrb	r3, [r7, #14]
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f001 f9b5 	bl	800f61c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fd64 	bl	800ed80 <USBD_CtlSendStatus>

              break;
 800e2b8:	e004      	b.n	800e2c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fc88 	bl	800ebd2 <USBD_CtlError>
              break;
 800e2c2:	bf00      	nop
          }
          break;
 800e2c4:	e107      	b.n	800e4d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	2b02      	cmp	r3, #2
 800e2d0:	d002      	beq.n	800e2d8 <USBD_StdEPReq+0x124>
 800e2d2:	2b03      	cmp	r3, #3
 800e2d4:	d016      	beq.n	800e304 <USBD_StdEPReq+0x150>
 800e2d6:	e04b      	b.n	800e370 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2d8:	7bbb      	ldrb	r3, [r7, #14]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00d      	beq.n	800e2fa <USBD_StdEPReq+0x146>
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
 800e2e0:	2b80      	cmp	r3, #128	@ 0x80
 800e2e2:	d00a      	beq.n	800e2fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2e4:	7bbb      	ldrb	r3, [r7, #14]
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f001 f997 	bl	800f61c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2ee:	2180      	movs	r1, #128	@ 0x80
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f001 f993 	bl	800f61c <USBD_LL_StallEP>
 800e2f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e2f8:	e040      	b.n	800e37c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e2fa:	6839      	ldr	r1, [r7, #0]
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 fc68 	bl	800ebd2 <USBD_CtlError>
              break;
 800e302:	e03b      	b.n	800e37c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	885b      	ldrh	r3, [r3, #2]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d136      	bne.n	800e37a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e30c:	7bbb      	ldrb	r3, [r7, #14]
 800e30e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e312:	2b00      	cmp	r3, #0
 800e314:	d004      	beq.n	800e320 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e316:	7bbb      	ldrb	r3, [r7, #14]
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f001 f99d 	bl	800f65a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 fd2d 	bl	800ed80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e326:	7bbb      	ldrb	r3, [r7, #14]
 800e328:	4619      	mov	r1, r3
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7ff fde4 	bl	800def8 <USBD_CoreFindEP>
 800e330:	4603      	mov	r3, r0
 800e332:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e334:	7b7b      	ldrb	r3, [r7, #13]
 800e336:	2bff      	cmp	r3, #255	@ 0xff
 800e338:	d01f      	beq.n	800e37a <USBD_StdEPReq+0x1c6>
 800e33a:	7b7b      	ldrb	r3, [r7, #13]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d11c      	bne.n	800e37a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e340:	7b7a      	ldrb	r2, [r7, #13]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e348:	7b7a      	ldrb	r2, [r7, #13]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	32ae      	adds	r2, #174	@ 0xae
 800e34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e352:	689b      	ldr	r3, [r3, #8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d010      	beq.n	800e37a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e358:	7b7a      	ldrb	r2, [r7, #13]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	32ae      	adds	r2, #174	@ 0xae
 800e35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	6839      	ldr	r1, [r7, #0]
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	4798      	blx	r3
 800e36a:	4603      	mov	r3, r0
 800e36c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e36e:	e004      	b.n	800e37a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fc2d 	bl	800ebd2 <USBD_CtlError>
              break;
 800e378:	e000      	b.n	800e37c <USBD_StdEPReq+0x1c8>
              break;
 800e37a:	bf00      	nop
          }
          break;
 800e37c:	e0ab      	b.n	800e4d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e384:	b2db      	uxtb	r3, r3
 800e386:	2b02      	cmp	r3, #2
 800e388:	d002      	beq.n	800e390 <USBD_StdEPReq+0x1dc>
 800e38a:	2b03      	cmp	r3, #3
 800e38c:	d032      	beq.n	800e3f4 <USBD_StdEPReq+0x240>
 800e38e:	e097      	b.n	800e4c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e390:	7bbb      	ldrb	r3, [r7, #14]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d007      	beq.n	800e3a6 <USBD_StdEPReq+0x1f2>
 800e396:	7bbb      	ldrb	r3, [r7, #14]
 800e398:	2b80      	cmp	r3, #128	@ 0x80
 800e39a:	d004      	beq.n	800e3a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e39c:	6839      	ldr	r1, [r7, #0]
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fc17 	bl	800ebd2 <USBD_CtlError>
                break;
 800e3a4:	e091      	b.n	800e4ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	da0b      	bge.n	800e3c6 <USBD_StdEPReq+0x212>
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
 800e3b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	3310      	adds	r3, #16
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	3304      	adds	r3, #4
 800e3c4:	e00b      	b.n	800e3de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3c6:	7bbb      	ldrb	r3, [r7, #14]
 800e3c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4413      	add	r3, r2
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	4413      	add	r3, r2
 800e3dc:	3304      	adds	r3, #4
 800e3de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	2202      	movs	r2, #2
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 fc6d 	bl	800eccc <USBD_CtlSendData>
              break;
 800e3f2:	e06a      	b.n	800e4ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e3f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	da11      	bge.n	800e420 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e3fc:	7bbb      	ldrb	r3, [r7, #14]
 800e3fe:	f003 020f 	and.w	r2, r3, #15
 800e402:	6879      	ldr	r1, [r7, #4]
 800e404:	4613      	mov	r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4413      	add	r3, r2
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	440b      	add	r3, r1
 800e40e:	3324      	adds	r3, #36	@ 0x24
 800e410:	881b      	ldrh	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d117      	bne.n	800e446 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e416:	6839      	ldr	r1, [r7, #0]
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 fbda 	bl	800ebd2 <USBD_CtlError>
                  break;
 800e41e:	e054      	b.n	800e4ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e420:	7bbb      	ldrb	r3, [r7, #14]
 800e422:	f003 020f 	and.w	r2, r3, #15
 800e426:	6879      	ldr	r1, [r7, #4]
 800e428:	4613      	mov	r3, r2
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4413      	add	r3, r2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	440b      	add	r3, r1
 800e432:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e436:	881b      	ldrh	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d104      	bne.n	800e446 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 fbc7 	bl	800ebd2 <USBD_CtlError>
                  break;
 800e444:	e041      	b.n	800e4ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	da0b      	bge.n	800e466 <USBD_StdEPReq+0x2b2>
 800e44e:	7bbb      	ldrb	r3, [r7, #14]
 800e450:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e454:	4613      	mov	r3, r2
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	4413      	add	r3, r2
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	3310      	adds	r3, #16
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	4413      	add	r3, r2
 800e462:	3304      	adds	r3, #4
 800e464:	e00b      	b.n	800e47e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e466:	7bbb      	ldrb	r3, [r7, #14]
 800e468:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e46c:	4613      	mov	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	4413      	add	r3, r2
 800e47c:	3304      	adds	r3, #4
 800e47e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e480:	7bbb      	ldrb	r3, [r7, #14]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d002      	beq.n	800e48c <USBD_StdEPReq+0x2d8>
 800e486:	7bbb      	ldrb	r3, [r7, #14]
 800e488:	2b80      	cmp	r3, #128	@ 0x80
 800e48a:	d103      	bne.n	800e494 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	2200      	movs	r2, #0
 800e490:	601a      	str	r2, [r3, #0]
 800e492:	e00e      	b.n	800e4b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e494:	7bbb      	ldrb	r3, [r7, #14]
 800e496:	4619      	mov	r1, r3
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f001 f8fd 	bl	800f698 <USBD_LL_IsStallEP>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d003      	beq.n	800e4ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	601a      	str	r2, [r3, #0]
 800e4aa:	e002      	b.n	800e4b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	2202      	movs	r2, #2
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 fc07 	bl	800eccc <USBD_CtlSendData>
              break;
 800e4be:	e004      	b.n	800e4ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e4c0:	6839      	ldr	r1, [r7, #0]
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 fb85 	bl	800ebd2 <USBD_CtlError>
              break;
 800e4c8:	bf00      	nop
          }
          break;
 800e4ca:	e004      	b.n	800e4d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e4cc:	6839      	ldr	r1, [r7, #0]
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 fb7f 	bl	800ebd2 <USBD_CtlError>
          break;
 800e4d4:	bf00      	nop
      }
      break;
 800e4d6:	e005      	b.n	800e4e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e4d8:	6839      	ldr	r1, [r7, #0]
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 fb79 	bl	800ebd2 <USBD_CtlError>
      break;
 800e4e0:	e000      	b.n	800e4e4 <USBD_StdEPReq+0x330>
      break;
 800e4e2:	bf00      	nop
  }

  return ret;
 800e4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
	...

0800e4f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e4fe:	2300      	movs	r3, #0
 800e500:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e502:	2300      	movs	r3, #0
 800e504:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	885b      	ldrh	r3, [r3, #2]
 800e50a:	0a1b      	lsrs	r3, r3, #8
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	3b01      	subs	r3, #1
 800e510:	2b0e      	cmp	r3, #14
 800e512:	f200 8152 	bhi.w	800e7ba <USBD_GetDescriptor+0x2ca>
 800e516:	a201      	add	r2, pc, #4	@ (adr r2, 800e51c <USBD_GetDescriptor+0x2c>)
 800e518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e51c:	0800e58d 	.word	0x0800e58d
 800e520:	0800e5a5 	.word	0x0800e5a5
 800e524:	0800e5e5 	.word	0x0800e5e5
 800e528:	0800e7bb 	.word	0x0800e7bb
 800e52c:	0800e7bb 	.word	0x0800e7bb
 800e530:	0800e75b 	.word	0x0800e75b
 800e534:	0800e787 	.word	0x0800e787
 800e538:	0800e7bb 	.word	0x0800e7bb
 800e53c:	0800e7bb 	.word	0x0800e7bb
 800e540:	0800e7bb 	.word	0x0800e7bb
 800e544:	0800e7bb 	.word	0x0800e7bb
 800e548:	0800e7bb 	.word	0x0800e7bb
 800e54c:	0800e7bb 	.word	0x0800e7bb
 800e550:	0800e7bb 	.word	0x0800e7bb
 800e554:	0800e559 	.word	0x0800e559
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e55e:	69db      	ldr	r3, [r3, #28]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00b      	beq.n	800e57c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e56a:	69db      	ldr	r3, [r3, #28]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	7c12      	ldrb	r2, [r2, #16]
 800e570:	f107 0108 	add.w	r1, r7, #8
 800e574:	4610      	mov	r0, r2
 800e576:	4798      	blx	r3
 800e578:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e57a:	e126      	b.n	800e7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 fb27 	bl	800ebd2 <USBD_CtlError>
        err++;
 800e584:	7afb      	ldrb	r3, [r7, #11]
 800e586:	3301      	adds	r3, #1
 800e588:	72fb      	strb	r3, [r7, #11]
      break;
 800e58a:	e11e      	b.n	800e7ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	7c12      	ldrb	r2, [r2, #16]
 800e598:	f107 0108 	add.w	r1, r7, #8
 800e59c:	4610      	mov	r0, r2
 800e59e:	4798      	blx	r3
 800e5a0:	60f8      	str	r0, [r7, #12]
      break;
 800e5a2:	e112      	b.n	800e7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	7c1b      	ldrb	r3, [r3, #16]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d10d      	bne.n	800e5c8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5b4:	f107 0208 	add.w	r2, r7, #8
 800e5b8:	4610      	mov	r0, r2
 800e5ba:	4798      	blx	r3
 800e5bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	2202      	movs	r2, #2
 800e5c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e5c6:	e100      	b.n	800e7ca <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5d0:	f107 0208 	add.w	r2, r7, #8
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	4798      	blx	r3
 800e5d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	3301      	adds	r3, #1
 800e5de:	2202      	movs	r2, #2
 800e5e0:	701a      	strb	r2, [r3, #0]
      break;
 800e5e2:	e0f2      	b.n	800e7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	885b      	ldrh	r3, [r3, #2]
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	2b05      	cmp	r3, #5
 800e5ec:	f200 80ac 	bhi.w	800e748 <USBD_GetDescriptor+0x258>
 800e5f0:	a201      	add	r2, pc, #4	@ (adr r2, 800e5f8 <USBD_GetDescriptor+0x108>)
 800e5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f6:	bf00      	nop
 800e5f8:	0800e611 	.word	0x0800e611
 800e5fc:	0800e645 	.word	0x0800e645
 800e600:	0800e679 	.word	0x0800e679
 800e604:	0800e6ad 	.word	0x0800e6ad
 800e608:	0800e6e1 	.word	0x0800e6e1
 800e60c:	0800e715 	.word	0x0800e715
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d00b      	beq.n	800e634 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	7c12      	ldrb	r2, [r2, #16]
 800e628:	f107 0108 	add.w	r1, r7, #8
 800e62c:	4610      	mov	r0, r2
 800e62e:	4798      	blx	r3
 800e630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e632:	e091      	b.n	800e758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e634:	6839      	ldr	r1, [r7, #0]
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 facb 	bl	800ebd2 <USBD_CtlError>
            err++;
 800e63c:	7afb      	ldrb	r3, [r7, #11]
 800e63e:	3301      	adds	r3, #1
 800e640:	72fb      	strb	r3, [r7, #11]
          break;
 800e642:	e089      	b.n	800e758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00b      	beq.n	800e668 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	7c12      	ldrb	r2, [r2, #16]
 800e65c:	f107 0108 	add.w	r1, r7, #8
 800e660:	4610      	mov	r0, r2
 800e662:	4798      	blx	r3
 800e664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e666:	e077      	b.n	800e758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e668:	6839      	ldr	r1, [r7, #0]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 fab1 	bl	800ebd2 <USBD_CtlError>
            err++;
 800e670:	7afb      	ldrb	r3, [r7, #11]
 800e672:	3301      	adds	r3, #1
 800e674:	72fb      	strb	r3, [r7, #11]
          break;
 800e676:	e06f      	b.n	800e758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00b      	beq.n	800e69c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	7c12      	ldrb	r2, [r2, #16]
 800e690:	f107 0108 	add.w	r1, r7, #8
 800e694:	4610      	mov	r0, r2
 800e696:	4798      	blx	r3
 800e698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e69a:	e05d      	b.n	800e758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e69c:	6839      	ldr	r1, [r7, #0]
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 fa97 	bl	800ebd2 <USBD_CtlError>
            err++;
 800e6a4:	7afb      	ldrb	r3, [r7, #11]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6aa:	e055      	b.n	800e758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6b2:	691b      	ldr	r3, [r3, #16]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00b      	beq.n	800e6d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6be:	691b      	ldr	r3, [r3, #16]
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	7c12      	ldrb	r2, [r2, #16]
 800e6c4:	f107 0108 	add.w	r1, r7, #8
 800e6c8:	4610      	mov	r0, r2
 800e6ca:	4798      	blx	r3
 800e6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ce:	e043      	b.n	800e758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fa7d 	bl	800ebd2 <USBD_CtlError>
            err++;
 800e6d8:	7afb      	ldrb	r3, [r7, #11]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e6de:	e03b      	b.n	800e758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6e6:	695b      	ldr	r3, [r3, #20]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d00b      	beq.n	800e704 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6f2:	695b      	ldr	r3, [r3, #20]
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	7c12      	ldrb	r2, [r2, #16]
 800e6f8:	f107 0108 	add.w	r1, r7, #8
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	4798      	blx	r3
 800e700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e702:	e029      	b.n	800e758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 fa63 	bl	800ebd2 <USBD_CtlError>
            err++;
 800e70c:	7afb      	ldrb	r3, [r7, #11]
 800e70e:	3301      	adds	r3, #1
 800e710:	72fb      	strb	r3, [r7, #11]
          break;
 800e712:	e021      	b.n	800e758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e71a:	699b      	ldr	r3, [r3, #24]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00b      	beq.n	800e738 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e726:	699b      	ldr	r3, [r3, #24]
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	7c12      	ldrb	r2, [r2, #16]
 800e72c:	f107 0108 	add.w	r1, r7, #8
 800e730:	4610      	mov	r0, r2
 800e732:	4798      	blx	r3
 800e734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e736:	e00f      	b.n	800e758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e738:	6839      	ldr	r1, [r7, #0]
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 fa49 	bl	800ebd2 <USBD_CtlError>
            err++;
 800e740:	7afb      	ldrb	r3, [r7, #11]
 800e742:	3301      	adds	r3, #1
 800e744:	72fb      	strb	r3, [r7, #11]
          break;
 800e746:	e007      	b.n	800e758 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e748:	6839      	ldr	r1, [r7, #0]
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 fa41 	bl	800ebd2 <USBD_CtlError>
          err++;
 800e750:	7afb      	ldrb	r3, [r7, #11]
 800e752:	3301      	adds	r3, #1
 800e754:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e756:	bf00      	nop
      }
      break;
 800e758:	e037      	b.n	800e7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	7c1b      	ldrb	r3, [r3, #16]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d109      	bne.n	800e776 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e76a:	f107 0208 	add.w	r2, r7, #8
 800e76e:	4610      	mov	r0, r2
 800e770:	4798      	blx	r3
 800e772:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e774:	e029      	b.n	800e7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e776:	6839      	ldr	r1, [r7, #0]
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 fa2a 	bl	800ebd2 <USBD_CtlError>
        err++;
 800e77e:	7afb      	ldrb	r3, [r7, #11]
 800e780:	3301      	adds	r3, #1
 800e782:	72fb      	strb	r3, [r7, #11]
      break;
 800e784:	e021      	b.n	800e7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	7c1b      	ldrb	r3, [r3, #16]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d10d      	bne.n	800e7aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e796:	f107 0208 	add.w	r2, r7, #8
 800e79a:	4610      	mov	r0, r2
 800e79c:	4798      	blx	r3
 800e79e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	2207      	movs	r2, #7
 800e7a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7a8:	e00f      	b.n	800e7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e7aa:	6839      	ldr	r1, [r7, #0]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 fa10 	bl	800ebd2 <USBD_CtlError>
        err++;
 800e7b2:	7afb      	ldrb	r3, [r7, #11]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	72fb      	strb	r3, [r7, #11]
      break;
 800e7b8:	e007      	b.n	800e7ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e7ba:	6839      	ldr	r1, [r7, #0]
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 fa08 	bl	800ebd2 <USBD_CtlError>
      err++;
 800e7c2:	7afb      	ldrb	r3, [r7, #11]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	72fb      	strb	r3, [r7, #11]
      break;
 800e7c8:	bf00      	nop
  }

  if (err != 0U)
 800e7ca:	7afb      	ldrb	r3, [r7, #11]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d11e      	bne.n	800e80e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	88db      	ldrh	r3, [r3, #6]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d016      	beq.n	800e806 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e7d8:	893b      	ldrh	r3, [r7, #8]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00e      	beq.n	800e7fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	88da      	ldrh	r2, [r3, #6]
 800e7e2:	893b      	ldrh	r3, [r7, #8]
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	bf28      	it	cs
 800e7e8:	4613      	movcs	r3, r2
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e7ee:	893b      	ldrh	r3, [r7, #8]
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	68f9      	ldr	r1, [r7, #12]
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 fa69 	bl	800eccc <USBD_CtlSendData>
 800e7fa:	e009      	b.n	800e810 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e7fc:	6839      	ldr	r1, [r7, #0]
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 f9e7 	bl	800ebd2 <USBD_CtlError>
 800e804:	e004      	b.n	800e810 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 faba 	bl	800ed80 <USBD_CtlSendStatus>
 800e80c:	e000      	b.n	800e810 <USBD_GetDescriptor+0x320>
    return;
 800e80e:	bf00      	nop
  }
}
 800e810:	3710      	adds	r7, #16
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop

0800e818 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	889b      	ldrh	r3, [r3, #4]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d131      	bne.n	800e88e <USBD_SetAddress+0x76>
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	88db      	ldrh	r3, [r3, #6]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d12d      	bne.n	800e88e <USBD_SetAddress+0x76>
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	885b      	ldrh	r3, [r3, #2]
 800e836:	2b7f      	cmp	r3, #127	@ 0x7f
 800e838:	d829      	bhi.n	800e88e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	885b      	ldrh	r3, [r3, #2]
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e844:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	2b03      	cmp	r3, #3
 800e850:	d104      	bne.n	800e85c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e852:	6839      	ldr	r1, [r7, #0]
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 f9bc 	bl	800ebd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e85a:	e01d      	b.n	800e898 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	7bfa      	ldrb	r2, [r7, #15]
 800e860:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e864:	7bfb      	ldrb	r3, [r7, #15]
 800e866:	4619      	mov	r1, r3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 ff41 	bl	800f6f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 fa86 	bl	800ed80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d004      	beq.n	800e884 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2202      	movs	r2, #2
 800e87e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e882:	e009      	b.n	800e898 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e88c:	e004      	b.n	800e898 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e88e:	6839      	ldr	r1, [r7, #0]
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 f99e 	bl	800ebd2 <USBD_CtlError>
  }
}
 800e896:	bf00      	nop
 800e898:	bf00      	nop
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	885b      	ldrh	r3, [r3, #2]
 800e8b2:	b2da      	uxtb	r2, r3
 800e8b4:	4b4e      	ldr	r3, [pc, #312]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e8b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e8b8:	4b4d      	ldr	r3, [pc, #308]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d905      	bls.n	800e8cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e8c0:	6839      	ldr	r1, [r7, #0]
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 f985 	bl	800ebd2 <USBD_CtlError>
    return USBD_FAIL;
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	e08c      	b.n	800e9e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d002      	beq.n	800e8de <USBD_SetConfig+0x3e>
 800e8d8:	2b03      	cmp	r3, #3
 800e8da:	d029      	beq.n	800e930 <USBD_SetConfig+0x90>
 800e8dc:	e075      	b.n	800e9ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e8de:	4b44      	ldr	r3, [pc, #272]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d020      	beq.n	800e928 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e8e6:	4b42      	ldr	r3, [pc, #264]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e8f0:	4b3f      	ldr	r3, [pc, #252]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7fe ffb9 	bl	800d86e <USBD_SetClassConfig>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e900:	7bfb      	ldrb	r3, [r7, #15]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d008      	beq.n	800e918 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e906:	6839      	ldr	r1, [r7, #0]
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 f962 	bl	800ebd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2202      	movs	r2, #2
 800e912:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e916:	e065      	b.n	800e9e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 fa31 	bl	800ed80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2203      	movs	r2, #3
 800e922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e926:	e05d      	b.n	800e9e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 fa29 	bl	800ed80 <USBD_CtlSendStatus>
      break;
 800e92e:	e059      	b.n	800e9e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e930:	4b2f      	ldr	r3, [pc, #188]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d112      	bne.n	800e95e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2202      	movs	r2, #2
 800e93c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e940:	4b2b      	ldr	r3, [pc, #172]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	461a      	mov	r2, r3
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e94a:	4b29      	ldr	r3, [pc, #164]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7fe ffa8 	bl	800d8a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 fa12 	bl	800ed80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e95c:	e042      	b.n	800e9e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e95e:	4b24      	ldr	r3, [pc, #144]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	461a      	mov	r2, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d02a      	beq.n	800e9c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	b2db      	uxtb	r3, r3
 800e972:	4619      	mov	r1, r3
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f7fe ff96 	bl	800d8a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e97a:	4b1d      	ldr	r3, [pc, #116]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	461a      	mov	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e984:	4b1a      	ldr	r3, [pc, #104]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	4619      	mov	r1, r3
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f7fe ff6f 	bl	800d86e <USBD_SetClassConfig>
 800e990:	4603      	mov	r3, r0
 800e992:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e994:	7bfb      	ldrb	r3, [r7, #15]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d00f      	beq.n	800e9ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e99a:	6839      	ldr	r1, [r7, #0]
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f918 	bl	800ebd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7fe ff7b 	bl	800d8a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e9b8:	e014      	b.n	800e9e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 f9e0 	bl	800ed80 <USBD_CtlSendStatus>
      break;
 800e9c0:	e010      	b.n	800e9e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 f9dc 	bl	800ed80 <USBD_CtlSendStatus>
      break;
 800e9c8:	e00c      	b.n	800e9e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e9ca:	6839      	ldr	r1, [r7, #0]
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 f900 	bl	800ebd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e9d2:	4b07      	ldr	r3, [pc, #28]	@ (800e9f0 <USBD_SetConfig+0x150>)
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7fe ff64 	bl	800d8a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e9de:	2303      	movs	r3, #3
 800e9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800e9e2:	bf00      	nop
  }

  return ret;
 800e9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	2400048c 	.word	0x2400048c

0800e9f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	88db      	ldrh	r3, [r3, #6]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d004      	beq.n	800ea10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ea06:	6839      	ldr	r1, [r7, #0]
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 f8e2 	bl	800ebd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ea0e:	e023      	b.n	800ea58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	2b02      	cmp	r3, #2
 800ea1a:	dc02      	bgt.n	800ea22 <USBD_GetConfig+0x2e>
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	dc03      	bgt.n	800ea28 <USBD_GetConfig+0x34>
 800ea20:	e015      	b.n	800ea4e <USBD_GetConfig+0x5a>
 800ea22:	2b03      	cmp	r3, #3
 800ea24:	d00b      	beq.n	800ea3e <USBD_GetConfig+0x4a>
 800ea26:	e012      	b.n	800ea4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	3308      	adds	r3, #8
 800ea32:	2201      	movs	r2, #1
 800ea34:	4619      	mov	r1, r3
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 f948 	bl	800eccc <USBD_CtlSendData>
        break;
 800ea3c:	e00c      	b.n	800ea58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	3304      	adds	r3, #4
 800ea42:	2201      	movs	r2, #1
 800ea44:	4619      	mov	r1, r3
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 f940 	bl	800eccc <USBD_CtlSendData>
        break;
 800ea4c:	e004      	b.n	800ea58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f8be 	bl	800ebd2 <USBD_CtlError>
        break;
 800ea56:	bf00      	nop
}
 800ea58:	bf00      	nop
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	3b01      	subs	r3, #1
 800ea74:	2b02      	cmp	r3, #2
 800ea76:	d81e      	bhi.n	800eab6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	88db      	ldrh	r3, [r3, #6]
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d004      	beq.n	800ea8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f8a5 	bl	800ebd2 <USBD_CtlError>
        break;
 800ea88:	e01a      	b.n	800eac0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d005      	beq.n	800eaa6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	f043 0202 	orr.w	r2, r3, #2
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	330c      	adds	r3, #12
 800eaaa:	2202      	movs	r2, #2
 800eaac:	4619      	mov	r1, r3
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 f90c 	bl	800eccc <USBD_CtlSendData>
      break;
 800eab4:	e004      	b.n	800eac0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eab6:	6839      	ldr	r1, [r7, #0]
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f88a 	bl	800ebd2 <USBD_CtlError>
      break;
 800eabe:	bf00      	nop
  }
}
 800eac0:	bf00      	nop
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	885b      	ldrh	r3, [r3, #2]
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d107      	bne.n	800eaea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2201      	movs	r2, #1
 800eade:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 f94c 	bl	800ed80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800eae8:	e013      	b.n	800eb12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	885b      	ldrh	r3, [r3, #2]
 800eaee:	2b02      	cmp	r3, #2
 800eaf0:	d10b      	bne.n	800eb0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	889b      	ldrh	r3, [r3, #4]
 800eaf6:	0a1b      	lsrs	r3, r3, #8
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	b2da      	uxtb	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 f93c 	bl	800ed80 <USBD_CtlSendStatus>
}
 800eb08:	e003      	b.n	800eb12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eb0a:	6839      	ldr	r1, [r7, #0]
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 f860 	bl	800ebd2 <USBD_CtlError>
}
 800eb12:	bf00      	nop
 800eb14:	3708      	adds	r7, #8
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b082      	sub	sp, #8
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	3b01      	subs	r3, #1
 800eb2e:	2b02      	cmp	r3, #2
 800eb30:	d80b      	bhi.n	800eb4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	885b      	ldrh	r3, [r3, #2]
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d10c      	bne.n	800eb54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 f91c 	bl	800ed80 <USBD_CtlSendStatus>
      }
      break;
 800eb48:	e004      	b.n	800eb54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eb4a:	6839      	ldr	r1, [r7, #0]
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f000 f840 	bl	800ebd2 <USBD_CtlError>
      break;
 800eb52:	e000      	b.n	800eb56 <USBD_ClrFeature+0x3c>
      break;
 800eb54:	bf00      	nop
  }
}
 800eb56:	bf00      	nop
 800eb58:	3708      	adds	r7, #8
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b084      	sub	sp, #16
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	781a      	ldrb	r2, [r3, #0]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	3301      	adds	r3, #1
 800eb78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	781a      	ldrb	r2, [r3, #0]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	3301      	adds	r3, #1
 800eb86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eb88:	68f8      	ldr	r0, [r7, #12]
 800eb8a:	f7ff fa16 	bl	800dfba <SWAPBYTE>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	461a      	mov	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eba2:	68f8      	ldr	r0, [r7, #12]
 800eba4:	f7ff fa09 	bl	800dfba <SWAPBYTE>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	461a      	mov	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f7ff f9fc 	bl	800dfba <SWAPBYTE>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	80da      	strh	r2, [r3, #6]
}
 800ebca:	bf00      	nop
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b082      	sub	sp, #8
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
 800ebda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebdc:	2180      	movs	r1, #128	@ 0x80
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 fd1c 	bl	800f61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fd18 	bl	800f61c <USBD_LL_StallEP>
}
 800ebec:	bf00      	nop
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b086      	sub	sp, #24
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ec00:	2300      	movs	r3, #0
 800ec02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d042      	beq.n	800ec90 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ec0e:	6938      	ldr	r0, [r7, #16]
 800ec10:	f000 f842 	bl	800ec98 <USBD_GetLen>
 800ec14:	4603      	mov	r3, r0
 800ec16:	3301      	adds	r3, #1
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec1e:	d808      	bhi.n	800ec32 <USBD_GetString+0x3e>
 800ec20:	6938      	ldr	r0, [r7, #16]
 800ec22:	f000 f839 	bl	800ec98 <USBD_GetLen>
 800ec26:	4603      	mov	r3, r0
 800ec28:	3301      	adds	r3, #1
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	005b      	lsls	r3, r3, #1
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	e001      	b.n	800ec36 <USBD_GetString+0x42>
 800ec32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ec3a:	7dfb      	ldrb	r3, [r7, #23]
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	4413      	add	r3, r2
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	7812      	ldrb	r2, [r2, #0]
 800ec44:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ec4c:	7dfb      	ldrb	r3, [r7, #23]
 800ec4e:	68ba      	ldr	r2, [r7, #8]
 800ec50:	4413      	add	r3, r2
 800ec52:	2203      	movs	r2, #3
 800ec54:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec56:	7dfb      	ldrb	r3, [r7, #23]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ec5c:	e013      	b.n	800ec86 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ec5e:	7dfb      	ldrb	r3, [r7, #23]
 800ec60:	68ba      	ldr	r2, [r7, #8]
 800ec62:	4413      	add	r3, r2
 800ec64:	693a      	ldr	r2, [r7, #16]
 800ec66:	7812      	ldrb	r2, [r2, #0]
 800ec68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	613b      	str	r3, [r7, #16]
    idx++;
 800ec70:	7dfb      	ldrb	r3, [r7, #23]
 800ec72:	3301      	adds	r3, #1
 800ec74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ec76:	7dfb      	ldrb	r3, [r7, #23]
 800ec78:	68ba      	ldr	r2, [r7, #8]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	3301      	adds	r3, #1
 800ec84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1e7      	bne.n	800ec5e <USBD_GetString+0x6a>
 800ec8e:	e000      	b.n	800ec92 <USBD_GetString+0x9e>
    return;
 800ec90:	bf00      	nop
  }
}
 800ec92:	3718      	adds	r7, #24
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eca0:	2300      	movs	r3, #0
 800eca2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eca8:	e005      	b.n	800ecb6 <USBD_GetLen+0x1e>
  {
    len++;
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
 800ecac:	3301      	adds	r3, #1
 800ecae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d1f5      	bne.n	800ecaa <USBD_GetLen+0x12>
  }

  return len;
 800ecbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3714      	adds	r7, #20
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2202      	movs	r2, #2
 800ecdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	68ba      	ldr	r2, [r7, #8]
 800ecf0:	2100      	movs	r1, #0
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f000 fd1b 	bl	800f72e <USBD_LL_Transmit>

  return USBD_OK;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b084      	sub	sp, #16
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	60f8      	str	r0, [r7, #12]
 800ed0a:	60b9      	str	r1, [r7, #8]
 800ed0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	68ba      	ldr	r2, [r7, #8]
 800ed12:	2100      	movs	r1, #0
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	f000 fd0a 	bl	800f72e <USBD_LL_Transmit>

  return USBD_OK;
 800ed1a:	2300      	movs	r3, #0
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3710      	adds	r7, #16
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2203      	movs	r2, #3
 800ed34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f000 fd0e 	bl	800f770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed54:	2300      	movs	r3, #0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b084      	sub	sp, #16
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	60f8      	str	r0, [r7, #12]
 800ed66:	60b9      	str	r1, [r7, #8]
 800ed68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	68ba      	ldr	r2, [r7, #8]
 800ed6e:	2100      	movs	r1, #0
 800ed70:	68f8      	ldr	r0, [r7, #12]
 800ed72:	f000 fcfd 	bl	800f770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2204      	movs	r2, #4
 800ed8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ed90:	2300      	movs	r3, #0
 800ed92:	2200      	movs	r2, #0
 800ed94:	2100      	movs	r1, #0
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 fcc9 	bl	800f72e <USBD_LL_Transmit>

  return USBD_OK;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3708      	adds	r7, #8
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b082      	sub	sp, #8
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2205      	movs	r2, #5
 800edb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edb6:	2300      	movs	r3, #0
 800edb8:	2200      	movs	r2, #0
 800edba:	2100      	movs	r1, #0
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 fcd7 	bl	800f770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800edd0:	2201      	movs	r2, #1
 800edd2:	4913      	ldr	r1, [pc, #76]	@ (800ee20 <MX_USB_DEVICE_Init+0x54>)
 800edd4:	4813      	ldr	r0, [pc, #76]	@ (800ee24 <MX_USB_DEVICE_Init+0x58>)
 800edd6:	f7fe fccd 	bl	800d774 <USBD_Init>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ede0:	f7f1 ff84 	bl	8000cec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800ede4:	4910      	ldr	r1, [pc, #64]	@ (800ee28 <MX_USB_DEVICE_Init+0x5c>)
 800ede6:	480f      	ldr	r0, [pc, #60]	@ (800ee24 <MX_USB_DEVICE_Init+0x58>)
 800ede8:	f7fe fcf4 	bl	800d7d4 <USBD_RegisterClass>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800edf2:	f7f1 ff7b 	bl	8000cec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800edf6:	490d      	ldr	r1, [pc, #52]	@ (800ee2c <MX_USB_DEVICE_Init+0x60>)
 800edf8:	480a      	ldr	r0, [pc, #40]	@ (800ee24 <MX_USB_DEVICE_Init+0x58>)
 800edfa:	f7fe fc2b 	bl	800d654 <USBD_CDC_RegisterInterface>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d001      	beq.n	800ee08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ee04:	f7f1 ff72 	bl	8000cec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ee08:	4806      	ldr	r0, [pc, #24]	@ (800ee24 <MX_USB_DEVICE_Init+0x58>)
 800ee0a:	f7fe fd19 	bl	800d840 <USBD_Start>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d001      	beq.n	800ee18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ee14:	f7f1 ff6a 	bl	8000cec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ee18:	f7f8 fa96 	bl	8007348 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ee1c:	bf00      	nop
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	240000b0 	.word	0x240000b0
 800ee24:	24000490 	.word	0x24000490
 800ee28:	2400001c 	.word	0x2400001c
 800ee2c:	2400009c 	.word	0x2400009c

0800ee30 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ee34:	2200      	movs	r2, #0
 800ee36:	4905      	ldr	r1, [pc, #20]	@ (800ee4c <CDC_Init_HS+0x1c>)
 800ee38:	4805      	ldr	r0, [pc, #20]	@ (800ee50 <CDC_Init_HS+0x20>)
 800ee3a:	f7fe fc25 	bl	800d688 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ee3e:	4905      	ldr	r1, [pc, #20]	@ (800ee54 <CDC_Init_HS+0x24>)
 800ee40:	4803      	ldr	r0, [pc, #12]	@ (800ee50 <CDC_Init_HS+0x20>)
 800ee42:	f7fe fc43 	bl	800d6cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ee46:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	24000f6c 	.word	0x24000f6c
 800ee50:	24000490 	.word	0x24000490
 800ee54:	2400076c 	.word	0x2400076c

0800ee58 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ee5c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	4603      	mov	r3, r0
 800ee70:	6039      	str	r1, [r7, #0]
 800ee72:	71fb      	strb	r3, [r7, #7]
 800ee74:	4613      	mov	r3, r2
 800ee76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ee78:	79fb      	ldrb	r3, [r7, #7]
 800ee7a:	2b23      	cmp	r3, #35	@ 0x23
 800ee7c:	d84a      	bhi.n	800ef14 <CDC_Control_HS+0xac>
 800ee7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee84 <CDC_Control_HS+0x1c>)
 800ee80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee84:	0800ef15 	.word	0x0800ef15
 800ee88:	0800ef15 	.word	0x0800ef15
 800ee8c:	0800ef15 	.word	0x0800ef15
 800ee90:	0800ef15 	.word	0x0800ef15
 800ee94:	0800ef15 	.word	0x0800ef15
 800ee98:	0800ef15 	.word	0x0800ef15
 800ee9c:	0800ef15 	.word	0x0800ef15
 800eea0:	0800ef15 	.word	0x0800ef15
 800eea4:	0800ef15 	.word	0x0800ef15
 800eea8:	0800ef15 	.word	0x0800ef15
 800eeac:	0800ef15 	.word	0x0800ef15
 800eeb0:	0800ef15 	.word	0x0800ef15
 800eeb4:	0800ef15 	.word	0x0800ef15
 800eeb8:	0800ef15 	.word	0x0800ef15
 800eebc:	0800ef15 	.word	0x0800ef15
 800eec0:	0800ef15 	.word	0x0800ef15
 800eec4:	0800ef15 	.word	0x0800ef15
 800eec8:	0800ef15 	.word	0x0800ef15
 800eecc:	0800ef15 	.word	0x0800ef15
 800eed0:	0800ef15 	.word	0x0800ef15
 800eed4:	0800ef15 	.word	0x0800ef15
 800eed8:	0800ef15 	.word	0x0800ef15
 800eedc:	0800ef15 	.word	0x0800ef15
 800eee0:	0800ef15 	.word	0x0800ef15
 800eee4:	0800ef15 	.word	0x0800ef15
 800eee8:	0800ef15 	.word	0x0800ef15
 800eeec:	0800ef15 	.word	0x0800ef15
 800eef0:	0800ef15 	.word	0x0800ef15
 800eef4:	0800ef15 	.word	0x0800ef15
 800eef8:	0800ef15 	.word	0x0800ef15
 800eefc:	0800ef15 	.word	0x0800ef15
 800ef00:	0800ef15 	.word	0x0800ef15
 800ef04:	0800ef15 	.word	0x0800ef15
 800ef08:	0800ef15 	.word	0x0800ef15
 800ef0c:	0800ef15 	.word	0x0800ef15
 800ef10:	0800ef15 	.word	0x0800ef15
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ef14:	bf00      	nop
  }

  return (USBD_OK);
 800ef16:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	370c      	adds	r7, #12
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ef2e:	6879      	ldr	r1, [r7, #4]
 800ef30:	4805      	ldr	r0, [pc, #20]	@ (800ef48 <CDC_Receive_HS+0x24>)
 800ef32:	f7fe fbcb 	bl	800d6cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ef36:	4804      	ldr	r0, [pc, #16]	@ (800ef48 <CDC_Receive_HS+0x24>)
 800ef38:	f7fe fbe6 	bl	800d708 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ef3c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	24000490 	.word	0x24000490

0800ef4c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b087      	sub	sp, #28
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	4613      	mov	r3, r2
 800ef58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800ef5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	371c      	adds	r7, #28
 800ef66:	46bd      	mov	sp, r7
 800ef68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6c:	4770      	bx	lr
	...

0800ef70 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	4603      	mov	r3, r0
 800ef78:	6039      	str	r1, [r7, #0]
 800ef7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	2212      	movs	r2, #18
 800ef80:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ef82:	4b03      	ldr	r3, [pc, #12]	@ (800ef90 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr
 800ef90:	240000d0 	.word	0x240000d0

0800ef94 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	6039      	str	r1, [r7, #0]
 800ef9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	2204      	movs	r2, #4
 800efa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800efa6:	4b03      	ldr	r3, [pc, #12]	@ (800efb4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr
 800efb4:	240000e4 	.word	0x240000e4

0800efb8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	4603      	mov	r3, r0
 800efc0:	6039      	str	r1, [r7, #0]
 800efc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800efc4:	79fb      	ldrb	r3, [r7, #7]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d105      	bne.n	800efd6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800efca:	683a      	ldr	r2, [r7, #0]
 800efcc:	4907      	ldr	r1, [pc, #28]	@ (800efec <USBD_HS_ProductStrDescriptor+0x34>)
 800efce:	4808      	ldr	r0, [pc, #32]	@ (800eff0 <USBD_HS_ProductStrDescriptor+0x38>)
 800efd0:	f7ff fe10 	bl	800ebf4 <USBD_GetString>
 800efd4:	e004      	b.n	800efe0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800efd6:	683a      	ldr	r2, [r7, #0]
 800efd8:	4904      	ldr	r1, [pc, #16]	@ (800efec <USBD_HS_ProductStrDescriptor+0x34>)
 800efda:	4805      	ldr	r0, [pc, #20]	@ (800eff0 <USBD_HS_ProductStrDescriptor+0x38>)
 800efdc:	f7ff fe0a 	bl	800ebf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800efe0:	4b02      	ldr	r3, [pc, #8]	@ (800efec <USBD_HS_ProductStrDescriptor+0x34>)
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3708      	adds	r7, #8
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	2400176c 	.word	0x2400176c
 800eff0:	0800f8d8 	.word	0x0800f8d8

0800eff4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	4603      	mov	r3, r0
 800effc:	6039      	str	r1, [r7, #0]
 800effe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f000:	683a      	ldr	r2, [r7, #0]
 800f002:	4904      	ldr	r1, [pc, #16]	@ (800f014 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f004:	4804      	ldr	r0, [pc, #16]	@ (800f018 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f006:	f7ff fdf5 	bl	800ebf4 <USBD_GetString>
  return USBD_StrDesc;
 800f00a:	4b02      	ldr	r3, [pc, #8]	@ (800f014 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	2400176c 	.word	0x2400176c
 800f018:	0800f8f0 	.word	0x0800f8f0

0800f01c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	4603      	mov	r3, r0
 800f024:	6039      	str	r1, [r7, #0]
 800f026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	221a      	movs	r2, #26
 800f02c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f02e:	f000 f843 	bl	800f0b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f032:	4b02      	ldr	r3, [pc, #8]	@ (800f03c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f034:	4618      	mov	r0, r3
 800f036:	3708      	adds	r7, #8
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	240000e8 	.word	0x240000e8

0800f040 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	4603      	mov	r3, r0
 800f048:	6039      	str	r1, [r7, #0]
 800f04a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f04c:	79fb      	ldrb	r3, [r7, #7]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d105      	bne.n	800f05e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	4907      	ldr	r1, [pc, #28]	@ (800f074 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f056:	4808      	ldr	r0, [pc, #32]	@ (800f078 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f058:	f7ff fdcc 	bl	800ebf4 <USBD_GetString>
 800f05c:	e004      	b.n	800f068 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f05e:	683a      	ldr	r2, [r7, #0]
 800f060:	4904      	ldr	r1, [pc, #16]	@ (800f074 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f062:	4805      	ldr	r0, [pc, #20]	@ (800f078 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f064:	f7ff fdc6 	bl	800ebf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f068:	4b02      	ldr	r3, [pc, #8]	@ (800f074 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	2400176c 	.word	0x2400176c
 800f078:	0800f904 	.word	0x0800f904

0800f07c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	4603      	mov	r3, r0
 800f084:	6039      	str	r1, [r7, #0]
 800f086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f088:	79fb      	ldrb	r3, [r7, #7]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d105      	bne.n	800f09a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f08e:	683a      	ldr	r2, [r7, #0]
 800f090:	4907      	ldr	r1, [pc, #28]	@ (800f0b0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f092:	4808      	ldr	r0, [pc, #32]	@ (800f0b4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f094:	f7ff fdae 	bl	800ebf4 <USBD_GetString>
 800f098:	e004      	b.n	800f0a4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f09a:	683a      	ldr	r2, [r7, #0]
 800f09c:	4904      	ldr	r1, [pc, #16]	@ (800f0b0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f09e:	4805      	ldr	r0, [pc, #20]	@ (800f0b4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f0a0:	f7ff fda8 	bl	800ebf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f0a4:	4b02      	ldr	r3, [pc, #8]	@ (800f0b0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	2400176c 	.word	0x2400176c
 800f0b4:	0800f910 	.word	0x0800f910

0800f0b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f0be:	4b0f      	ldr	r3, [pc, #60]	@ (800f0fc <Get_SerialNum+0x44>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f0c4:	4b0e      	ldr	r3, [pc, #56]	@ (800f100 <Get_SerialNum+0x48>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f0ca:	4b0e      	ldr	r3, [pc, #56]	@ (800f104 <Get_SerialNum+0x4c>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d009      	beq.n	800f0f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f0de:	2208      	movs	r2, #8
 800f0e0:	4909      	ldr	r1, [pc, #36]	@ (800f108 <Get_SerialNum+0x50>)
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f000 f814 	bl	800f110 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f0e8:	2204      	movs	r2, #4
 800f0ea:	4908      	ldr	r1, [pc, #32]	@ (800f10c <Get_SerialNum+0x54>)
 800f0ec:	68b8      	ldr	r0, [r7, #8]
 800f0ee:	f000 f80f 	bl	800f110 <IntToUnicode>
  }
}
 800f0f2:	bf00      	nop
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	08fff800 	.word	0x08fff800
 800f100:	08fff804 	.word	0x08fff804
 800f104:	08fff808 	.word	0x08fff808
 800f108:	240000ea 	.word	0x240000ea
 800f10c:	240000fa 	.word	0x240000fa

0800f110 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f110:	b480      	push	{r7}
 800f112:	b087      	sub	sp, #28
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	4613      	mov	r3, r2
 800f11c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f11e:	2300      	movs	r3, #0
 800f120:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f122:	2300      	movs	r3, #0
 800f124:	75fb      	strb	r3, [r7, #23]
 800f126:	e027      	b.n	800f178 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	0f1b      	lsrs	r3, r3, #28
 800f12c:	2b09      	cmp	r3, #9
 800f12e:	d80b      	bhi.n	800f148 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	0f1b      	lsrs	r3, r3, #28
 800f134:	b2da      	uxtb	r2, r3
 800f136:	7dfb      	ldrb	r3, [r7, #23]
 800f138:	005b      	lsls	r3, r3, #1
 800f13a:	4619      	mov	r1, r3
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	440b      	add	r3, r1
 800f140:	3230      	adds	r2, #48	@ 0x30
 800f142:	b2d2      	uxtb	r2, r2
 800f144:	701a      	strb	r2, [r3, #0]
 800f146:	e00a      	b.n	800f15e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	0f1b      	lsrs	r3, r3, #28
 800f14c:	b2da      	uxtb	r2, r3
 800f14e:	7dfb      	ldrb	r3, [r7, #23]
 800f150:	005b      	lsls	r3, r3, #1
 800f152:	4619      	mov	r1, r3
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	440b      	add	r3, r1
 800f158:	3237      	adds	r2, #55	@ 0x37
 800f15a:	b2d2      	uxtb	r2, r2
 800f15c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	011b      	lsls	r3, r3, #4
 800f162:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f164:	7dfb      	ldrb	r3, [r7, #23]
 800f166:	005b      	lsls	r3, r3, #1
 800f168:	3301      	adds	r3, #1
 800f16a:	68ba      	ldr	r2, [r7, #8]
 800f16c:	4413      	add	r3, r2
 800f16e:	2200      	movs	r2, #0
 800f170:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f172:	7dfb      	ldrb	r3, [r7, #23]
 800f174:	3301      	adds	r3, #1
 800f176:	75fb      	strb	r3, [r7, #23]
 800f178:	7dfa      	ldrb	r2, [r7, #23]
 800f17a:	79fb      	ldrb	r3, [r7, #7]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d3d3      	bcc.n	800f128 <IntToUnicode+0x18>
  }
}
 800f180:	bf00      	nop
 800f182:	bf00      	nop
 800f184:	371c      	adds	r7, #28
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
	...

0800f190 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b0ba      	sub	sp, #232	@ 0xe8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f198:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f19c:	2200      	movs	r2, #0
 800f19e:	601a      	str	r2, [r3, #0]
 800f1a0:	605a      	str	r2, [r3, #4]
 800f1a2:	609a      	str	r2, [r3, #8]
 800f1a4:	60da      	str	r2, [r3, #12]
 800f1a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f1a8:	f107 0310 	add.w	r3, r7, #16
 800f1ac:	22c0      	movs	r2, #192	@ 0xc0
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f000 fb55 	bl	800f860 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4a43      	ldr	r2, [pc, #268]	@ (800f2c8 <HAL_PCD_MspInit+0x138>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d17f      	bne.n	800f2c0 <HAL_PCD_MspInit+0x130>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f1c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f1c4:	f04f 0300 	mov.w	r3, #0
 800f1c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800f1d0:	2312      	movs	r3, #18
 800f1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800f1d4:	2302      	movs	r3, #2
 800f1d6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800f1d8:	2303      	movs	r3, #3
 800f1da:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800f1dc:	2302      	movs	r3, #2
 800f1de:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800f1e0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f1e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800f1ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f1f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f1f6:	f107 0310 	add.w	r3, r7, #16
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7f9 f8c6 	bl	800838c <HAL_RCCEx_PeriphCLKConfig>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d001      	beq.n	800f20a <HAL_PCD_MspInit+0x7a>
    {
      Error_Handler();
 800f206:	f7f1 fd71 	bl	8000cec <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f20a:	f7f8 f89d 	bl	8007348 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f20e:	4b2f      	ldr	r3, [pc, #188]	@ (800f2cc <HAL_PCD_MspInit+0x13c>)
 800f210:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f214:	4a2d      	ldr	r2, [pc, #180]	@ (800f2cc <HAL_PCD_MspInit+0x13c>)
 800f216:	f043 0301 	orr.w	r3, r3, #1
 800f21a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800f21e:	4b2b      	ldr	r3, [pc, #172]	@ (800f2cc <HAL_PCD_MspInit+0x13c>)
 800f220:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f224:	f003 0301 	and.w	r3, r3, #1
 800f228:	60fb      	str	r3, [r7, #12]
 800f22a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f22c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f230:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f234:	2300      	movs	r3, #0
 800f236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f23a:	2300      	movs	r3, #0
 800f23c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f240:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f244:	4619      	mov	r1, r3
 800f246:	4822      	ldr	r0, [pc, #136]	@ (800f2d0 <HAL_PCD_MspInit+0x140>)
 800f248:	f7f5 fc72 	bl	8004b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f24c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f250:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f254:	2302      	movs	r3, #2
 800f256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f25a:	2300      	movs	r3, #0
 800f25c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f260:	2300      	movs	r3, #0
 800f262:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f266:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f26a:	4619      	mov	r1, r3
 800f26c:	4818      	ldr	r0, [pc, #96]	@ (800f2d0 <HAL_PCD_MspInit+0x140>)
 800f26e:	f7f5 fc5f 	bl	8004b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f272:	4b16      	ldr	r3, [pc, #88]	@ (800f2cc <HAL_PCD_MspInit+0x13c>)
 800f274:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800f278:	4a14      	ldr	r2, [pc, #80]	@ (800f2cc <HAL_PCD_MspInit+0x13c>)
 800f27a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800f27e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800f282:	4b12      	ldr	r3, [pc, #72]	@ (800f2cc <HAL_PCD_MspInit+0x13c>)
 800f284:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800f288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f28c:	60bb      	str	r3, [r7, #8]
 800f28e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800f290:	2200      	movs	r2, #0
 800f292:	2100      	movs	r1, #0
 800f294:	204a      	movs	r0, #74	@ 0x4a
 800f296:	f7f3 faea 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800f29a:	204a      	movs	r0, #74	@ 0x4a
 800f29c:	f7f3 fb01 	bl	80028a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	2100      	movs	r1, #0
 800f2a4:	204b      	movs	r0, #75	@ 0x4b
 800f2a6:	f7f3 fae2 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800f2aa:	204b      	movs	r0, #75	@ 0x4b
 800f2ac:	f7f3 faf9 	bl	80028a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	204d      	movs	r0, #77	@ 0x4d
 800f2b6:	f7f3 fada 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f2ba:	204d      	movs	r0, #77	@ 0x4d
 800f2bc:	f7f3 faf1 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f2c0:	bf00      	nop
 800f2c2:	37e8      	adds	r7, #232	@ 0xe8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	40040000 	.word	0x40040000
 800f2cc:	58024400 	.word	0x58024400
 800f2d0:	58020000 	.word	0x58020000

0800f2d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	4610      	mov	r0, r2
 800f2ec:	f7fe faf5 	bl	800d8da <USBD_LL_SetupStage>
}
 800f2f0:	bf00      	nop
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	460b      	mov	r3, r1
 800f302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f30a:	78fa      	ldrb	r2, [r7, #3]
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	4613      	mov	r3, r2
 800f310:	00db      	lsls	r3, r3, #3
 800f312:	4413      	add	r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	440b      	add	r3, r1
 800f318:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	78fb      	ldrb	r3, [r7, #3]
 800f320:	4619      	mov	r1, r3
 800f322:	f7fe fb2f 	bl	800d984 <USBD_LL_DataOutStage>
}
 800f326:	bf00      	nop
 800f328:	3708      	adds	r7, #8
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}

0800f32e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f32e:	b580      	push	{r7, lr}
 800f330:	b082      	sub	sp, #8
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
 800f336:	460b      	mov	r3, r1
 800f338:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f340:	78fa      	ldrb	r2, [r7, #3]
 800f342:	6879      	ldr	r1, [r7, #4]
 800f344:	4613      	mov	r3, r2
 800f346:	00db      	lsls	r3, r3, #3
 800f348:	4413      	add	r3, r2
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	440b      	add	r3, r1
 800f34e:	3320      	adds	r3, #32
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	78fb      	ldrb	r3, [r7, #3]
 800f354:	4619      	mov	r1, r3
 800f356:	f7fe fbc8 	bl	800daea <USBD_LL_DataInStage>
}
 800f35a:	bf00      	nop
 800f35c:	3708      	adds	r7, #8
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}

0800f362 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f362:	b580      	push	{r7, lr}
 800f364:	b082      	sub	sp, #8
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f370:	4618      	mov	r0, r3
 800f372:	f7fe fd02 	bl	800dd7a <USBD_LL_SOF>
}
 800f376:	bf00      	nop
 800f378:	3708      	adds	r7, #8
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}

0800f37e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f37e:	b580      	push	{r7, lr}
 800f380:	b084      	sub	sp, #16
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f386:	2301      	movs	r3, #1
 800f388:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	79db      	ldrb	r3, [r3, #7]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d102      	bne.n	800f398 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f392:	2300      	movs	r3, #0
 800f394:	73fb      	strb	r3, [r7, #15]
 800f396:	e008      	b.n	800f3aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	79db      	ldrb	r3, [r3, #7]
 800f39c:	2b02      	cmp	r3, #2
 800f39e:	d102      	bne.n	800f3a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	73fb      	strb	r3, [r7, #15]
 800f3a4:	e001      	b.n	800f3aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f3a6:	f7f1 fca1 	bl	8000cec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3b0:	7bfa      	ldrb	r2, [r7, #15]
 800f3b2:	4611      	mov	r1, r2
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7fe fc9c 	bl	800dcf2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fe fc44 	bl	800dc4e <USBD_LL_Reset>
}
 800f3c6:	bf00      	nop
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
	...

0800f3d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fe fc97 	bl	800dd12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	6812      	ldr	r2, [r2, #0]
 800f3f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f3f6:	f043 0301 	orr.w	r3, r3, #1
 800f3fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	7adb      	ldrb	r3, [r3, #11]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d005      	beq.n	800f410 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f404:	4b04      	ldr	r3, [pc, #16]	@ (800f418 <HAL_PCD_SuspendCallback+0x48>)
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	4a03      	ldr	r2, [pc, #12]	@ (800f418 <HAL_PCD_SuspendCallback+0x48>)
 800f40a:	f043 0306 	orr.w	r3, r3, #6
 800f40e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f410:	bf00      	nop
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}
 800f418:	e000ed00 	.word	0xe000ed00

0800f41c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fe fc8d 	bl	800dd4a <USBD_LL_Resume>
}
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f44a:	78fa      	ldrb	r2, [r7, #3]
 800f44c:	4611      	mov	r1, r2
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fe fce5 	bl	800de1e <USBD_LL_IsoOUTIncomplete>
}
 800f454:	bf00      	nop
 800f456:	3708      	adds	r7, #8
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	460b      	mov	r3, r1
 800f466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f46e:	78fa      	ldrb	r2, [r7, #3]
 800f470:	4611      	mov	r1, r2
 800f472:	4618      	mov	r0, r3
 800f474:	f7fe fca1 	bl	800ddba <USBD_LL_IsoINIncomplete>
}
 800f478:	bf00      	nop
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f48e:	4618      	mov	r0, r3
 800f490:	f7fe fcf7 	bl	800de82 <USBD_LL_DevConnected>
}
 800f494:	bf00      	nop
 800f496:	3708      	adds	r7, #8
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fe fcf4 	bl	800de98 <USBD_LL_DevDisconnected>
}
 800f4b0:	bf00      	nop
 800f4b2:	3708      	adds	r7, #8
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d140      	bne.n	800f54a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f4c8:	4a22      	ldr	r2, [pc, #136]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	4a20      	ldr	r2, [pc, #128]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f4d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f4d8:	4b1e      	ldr	r3, [pc, #120]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f4da:	4a1f      	ldr	r2, [pc, #124]	@ (800f558 <USBD_LL_Init+0xa0>)
 800f4dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800f4de:	4b1d      	ldr	r3, [pc, #116]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f4e0:	2209      	movs	r2, #9
 800f4e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800f4e4:	4b1b      	ldr	r3, [pc, #108]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f4e6:	2202      	movs	r2, #2
 800f4e8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f4ea:	4b1a      	ldr	r3, [pc, #104]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f4f0:	4b18      	ldr	r3, [pc, #96]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f4f2:	2202      	movs	r2, #2
 800f4f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f4f6:	4b17      	ldr	r3, [pc, #92]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f4fc:	4b15      	ldr	r3, [pc, #84]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f4fe:	2200      	movs	r2, #0
 800f500:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f502:	4b14      	ldr	r3, [pc, #80]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f504:	2200      	movs	r2, #0
 800f506:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800f508:	4b12      	ldr	r3, [pc, #72]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f50a:	2201      	movs	r2, #1
 800f50c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f50e:	4b11      	ldr	r3, [pc, #68]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f510:	2200      	movs	r2, #0
 800f512:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f514:	4b0f      	ldr	r3, [pc, #60]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f516:	2200      	movs	r2, #0
 800f518:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f51a:	480e      	ldr	r0, [pc, #56]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f51c:	f7f6 fc39 	bl	8005d92 <HAL_PCD_Init>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d001      	beq.n	800f52a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f526:	f7f1 fbe1 	bl	8000cec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f52a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f52e:	4809      	ldr	r0, [pc, #36]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f530:	f7f7 fe8f 	bl	8007252 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f534:	2280      	movs	r2, #128	@ 0x80
 800f536:	2100      	movs	r1, #0
 800f538:	4806      	ldr	r0, [pc, #24]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f53a:	f7f7 fe43 	bl	80071c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f53e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800f542:	2101      	movs	r1, #1
 800f544:	4803      	ldr	r0, [pc, #12]	@ (800f554 <USBD_LL_Init+0x9c>)
 800f546:	f7f7 fe3d 	bl	80071c4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	2400196c 	.word	0x2400196c
 800f558:	40040000 	.word	0x40040000

0800f55c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f564:	2300      	movs	r3, #0
 800f566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f568:	2300      	movs	r3, #0
 800f56a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f572:	4618      	mov	r0, r3
 800f574:	f7f6 fd19 	bl	8005faa <HAL_PCD_Start>
 800f578:	4603      	mov	r3, r0
 800f57a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 f942 	bl	800f808 <USBD_Get_USB_Status>
 800f584:	4603      	mov	r3, r0
 800f586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f588:	7bbb      	ldrb	r3, [r7, #14]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b084      	sub	sp, #16
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
 800f59a:	4608      	mov	r0, r1
 800f59c:	4611      	mov	r1, r2
 800f59e:	461a      	mov	r2, r3
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	70fb      	strb	r3, [r7, #3]
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	70bb      	strb	r3, [r7, #2]
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f5ba:	78bb      	ldrb	r3, [r7, #2]
 800f5bc:	883a      	ldrh	r2, [r7, #0]
 800f5be:	78f9      	ldrb	r1, [r7, #3]
 800f5c0:	f7f7 fa1a 	bl	80069f8 <HAL_PCD_EP_Open>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5c8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f000 f91c 	bl	800f808 <USBD_Get_USB_Status>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b084      	sub	sp, #16
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f5f8:	78fa      	ldrb	r2, [r7, #3]
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7f7 fa65 	bl	8006acc <HAL_PCD_EP_Close>
 800f602:	4603      	mov	r3, r0
 800f604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f606:	7bfb      	ldrb	r3, [r7, #15]
 800f608:	4618      	mov	r0, r3
 800f60a:	f000 f8fd 	bl	800f808 <USBD_Get_USB_Status>
 800f60e:	4603      	mov	r3, r0
 800f610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f612:	7bbb      	ldrb	r3, [r7, #14]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	460b      	mov	r3, r1
 800f626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f636:	78fa      	ldrb	r2, [r7, #3]
 800f638:	4611      	mov	r1, r2
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7f7 fb1d 	bl	8006c7a <HAL_PCD_EP_SetStall>
 800f640:	4603      	mov	r3, r0
 800f642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f644:	7bfb      	ldrb	r3, [r7, #15]
 800f646:	4618      	mov	r0, r3
 800f648:	f000 f8de 	bl	800f808 <USBD_Get_USB_Status>
 800f64c:	4603      	mov	r3, r0
 800f64e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f650:	7bbb      	ldrb	r3, [r7, #14]
}
 800f652:	4618      	mov	r0, r3
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}

0800f65a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f65a:	b580      	push	{r7, lr}
 800f65c:	b084      	sub	sp, #16
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
 800f662:	460b      	mov	r3, r1
 800f664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f666:	2300      	movs	r3, #0
 800f668:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f66a:	2300      	movs	r3, #0
 800f66c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f674:	78fa      	ldrb	r2, [r7, #3]
 800f676:	4611      	mov	r1, r2
 800f678:	4618      	mov	r0, r3
 800f67a:	f7f7 fb61 	bl	8006d40 <HAL_PCD_EP_ClrStall>
 800f67e:	4603      	mov	r3, r0
 800f680:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f682:	7bfb      	ldrb	r3, [r7, #15]
 800f684:	4618      	mov	r0, r3
 800f686:	f000 f8bf 	bl	800f808 <USBD_Get_USB_Status>
 800f68a:	4603      	mov	r3, r0
 800f68c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f68e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f6ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	da0b      	bge.n	800f6cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f6b4:	78fb      	ldrb	r3, [r7, #3]
 800f6b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f6ba:	68f9      	ldr	r1, [r7, #12]
 800f6bc:	4613      	mov	r3, r2
 800f6be:	00db      	lsls	r3, r3, #3
 800f6c0:	4413      	add	r3, r2
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	440b      	add	r3, r1
 800f6c6:	3316      	adds	r3, #22
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	e00b      	b.n	800f6e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f6cc:	78fb      	ldrb	r3, [r7, #3]
 800f6ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f6d2:	68f9      	ldr	r1, [r7, #12]
 800f6d4:	4613      	mov	r3, r2
 800f6d6:	00db      	lsls	r3, r3, #3
 800f6d8:	4413      	add	r3, r2
 800f6da:	009b      	lsls	r3, r3, #2
 800f6dc:	440b      	add	r3, r1
 800f6de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f6e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f700:	2300      	movs	r3, #0
 800f702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f70a:	78fa      	ldrb	r2, [r7, #3]
 800f70c:	4611      	mov	r1, r2
 800f70e:	4618      	mov	r0, r3
 800f710:	f7f7 f94e 	bl	80069b0 <HAL_PCD_SetAddress>
 800f714:	4603      	mov	r3, r0
 800f716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f718:	7bfb      	ldrb	r3, [r7, #15]
 800f71a:	4618      	mov	r0, r3
 800f71c:	f000 f874 	bl	800f808 <USBD_Get_USB_Status>
 800f720:	4603      	mov	r3, r0
 800f722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f724:	7bbb      	ldrb	r3, [r7, #14]
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f72e:	b580      	push	{r7, lr}
 800f730:	b086      	sub	sp, #24
 800f732:	af00      	add	r7, sp, #0
 800f734:	60f8      	str	r0, [r7, #12]
 800f736:	607a      	str	r2, [r7, #4]
 800f738:	603b      	str	r3, [r7, #0]
 800f73a:	460b      	mov	r3, r1
 800f73c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f73e:	2300      	movs	r3, #0
 800f740:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f742:	2300      	movs	r3, #0
 800f744:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f74c:	7af9      	ldrb	r1, [r7, #11]
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	f7f7 fa58 	bl	8006c06 <HAL_PCD_EP_Transmit>
 800f756:	4603      	mov	r3, r0
 800f758:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f75a:	7dfb      	ldrb	r3, [r7, #23]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f000 f853 	bl	800f808 <USBD_Get_USB_Status>
 800f762:	4603      	mov	r3, r0
 800f764:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f766:	7dbb      	ldrb	r3, [r7, #22]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3718      	adds	r7, #24
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b086      	sub	sp, #24
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	607a      	str	r2, [r7, #4]
 800f77a:	603b      	str	r3, [r7, #0]
 800f77c:	460b      	mov	r3, r1
 800f77e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f780:	2300      	movs	r3, #0
 800f782:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f784:	2300      	movs	r3, #0
 800f786:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f78e:	7af9      	ldrb	r1, [r7, #11]
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	f7f7 f9e4 	bl	8006b60 <HAL_PCD_EP_Receive>
 800f798:	4603      	mov	r3, r0
 800f79a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f79c:	7dfb      	ldrb	r3, [r7, #23]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f000 f832 	bl	800f808 <USBD_Get_USB_Status>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3718      	adds	r7, #24
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b082      	sub	sp, #8
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f7c4:	78fa      	ldrb	r2, [r7, #3]
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7f7 fa04 	bl	8006bd6 <HAL_PCD_EP_GetRxCount>
 800f7ce:	4603      	mov	r3, r0
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f7e0:	4b03      	ldr	r3, [pc, #12]	@ (800f7f0 <USBD_static_malloc+0x18>)
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	370c      	adds	r7, #12
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop
 800f7f0:	24001e50 	.word	0x24001e50

0800f7f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f7fc:	bf00      	nop
 800f7fe:	370c      	adds	r7, #12
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	4603      	mov	r3, r0
 800f810:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f812:	2300      	movs	r3, #0
 800f814:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f816:	79fb      	ldrb	r3, [r7, #7]
 800f818:	2b03      	cmp	r3, #3
 800f81a:	d817      	bhi.n	800f84c <USBD_Get_USB_Status+0x44>
 800f81c:	a201      	add	r2, pc, #4	@ (adr r2, 800f824 <USBD_Get_USB_Status+0x1c>)
 800f81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f822:	bf00      	nop
 800f824:	0800f835 	.word	0x0800f835
 800f828:	0800f83b 	.word	0x0800f83b
 800f82c:	0800f841 	.word	0x0800f841
 800f830:	0800f847 	.word	0x0800f847
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f834:	2300      	movs	r3, #0
 800f836:	73fb      	strb	r3, [r7, #15]
    break;
 800f838:	e00b      	b.n	800f852 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f83a:	2303      	movs	r3, #3
 800f83c:	73fb      	strb	r3, [r7, #15]
    break;
 800f83e:	e008      	b.n	800f852 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f840:	2301      	movs	r3, #1
 800f842:	73fb      	strb	r3, [r7, #15]
    break;
 800f844:	e005      	b.n	800f852 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f846:	2303      	movs	r3, #3
 800f848:	73fb      	strb	r3, [r7, #15]
    break;
 800f84a:	e002      	b.n	800f852 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f84c:	2303      	movs	r3, #3
 800f84e:	73fb      	strb	r3, [r7, #15]
    break;
 800f850:	bf00      	nop
  }
  return usb_status;
 800f852:	7bfb      	ldrb	r3, [r7, #15]
}
 800f854:	4618      	mov	r0, r3
 800f856:	3714      	adds	r7, #20
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr

0800f860 <memset>:
 800f860:	4402      	add	r2, r0
 800f862:	4603      	mov	r3, r0
 800f864:	4293      	cmp	r3, r2
 800f866:	d100      	bne.n	800f86a <memset+0xa>
 800f868:	4770      	bx	lr
 800f86a:	f803 1b01 	strb.w	r1, [r3], #1
 800f86e:	e7f9      	b.n	800f864 <memset+0x4>

0800f870 <__libc_init_array>:
 800f870:	b570      	push	{r4, r5, r6, lr}
 800f872:	4d0d      	ldr	r5, [pc, #52]	@ (800f8a8 <__libc_init_array+0x38>)
 800f874:	4c0d      	ldr	r4, [pc, #52]	@ (800f8ac <__libc_init_array+0x3c>)
 800f876:	1b64      	subs	r4, r4, r5
 800f878:	10a4      	asrs	r4, r4, #2
 800f87a:	2600      	movs	r6, #0
 800f87c:	42a6      	cmp	r6, r4
 800f87e:	d109      	bne.n	800f894 <__libc_init_array+0x24>
 800f880:	4d0b      	ldr	r5, [pc, #44]	@ (800f8b0 <__libc_init_array+0x40>)
 800f882:	4c0c      	ldr	r4, [pc, #48]	@ (800f8b4 <__libc_init_array+0x44>)
 800f884:	f000 f818 	bl	800f8b8 <_init>
 800f888:	1b64      	subs	r4, r4, r5
 800f88a:	10a4      	asrs	r4, r4, #2
 800f88c:	2600      	movs	r6, #0
 800f88e:	42a6      	cmp	r6, r4
 800f890:	d105      	bne.n	800f89e <__libc_init_array+0x2e>
 800f892:	bd70      	pop	{r4, r5, r6, pc}
 800f894:	f855 3b04 	ldr.w	r3, [r5], #4
 800f898:	4798      	blx	r3
 800f89a:	3601      	adds	r6, #1
 800f89c:	e7ee      	b.n	800f87c <__libc_init_array+0xc>
 800f89e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8a2:	4798      	blx	r3
 800f8a4:	3601      	adds	r6, #1
 800f8a6:	e7f2      	b.n	800f88e <__libc_init_array+0x1e>
 800f8a8:	0800f938 	.word	0x0800f938
 800f8ac:	0800f938 	.word	0x0800f938
 800f8b0:	0800f938 	.word	0x0800f938
 800f8b4:	0800f93c 	.word	0x0800f93c

0800f8b8 <_init>:
 800f8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ba:	bf00      	nop
 800f8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8be:	bc08      	pop	{r3}
 800f8c0:	469e      	mov	lr, r3
 800f8c2:	4770      	bx	lr

0800f8c4 <_fini>:
 800f8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c6:	bf00      	nop
 800f8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ca:	bc08      	pop	{r3}
 800f8cc:	469e      	mov	lr, r3
 800f8ce:	4770      	bx	lr
