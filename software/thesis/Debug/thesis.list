
thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012fc4  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08013270  08013270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013700  08013700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08013704  08013704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000108  24000000  08013708  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001fac  24000108  08013810  00015108  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240020b4  08013810  000160b4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00015108  2**0
                  CONTENTS, READONLY
  9 .debug_info   00024481  00000000  00000000  00015136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004ff2  00000000  00000000  000395b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001c48  00000000  00000000  0003e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001578  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036b87  00000000  00000000  00041770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00028320  00000000  00000000  000782f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014dd96  00000000  00000000  000a0617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ee3ad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007764  00000000  00000000  001ee3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000054  00000000  00000000  001f5b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000108 	.word	0x24000108
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08013258 	.word	0x08013258

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400010c 	.word	0x2400010c
 80002e8:	08013258 	.word	0x08013258

080002ec <I2C_write>:
#include "comms.h"


// I2C
void I2C_write(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af04      	add	r7, sp, #16
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	72fb      	strb	r3, [r7, #11]
 80002fa:	4613      	mov	r3, r2
 80002fc:	72bb      	strb	r3, [r7, #10]
	*status = HAL_I2C_Mem_Write(&hi2c2, dev_adress, reg_adress, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	b299      	uxth	r1, r3
 8000302:	7abb      	ldrb	r3, [r7, #10]
 8000304:	b29a      	uxth	r2, r3
 8000306:	2364      	movs	r3, #100	@ 0x64
 8000308:	9302      	str	r3, [sp, #8]
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2301      	movs	r3, #1
 8000314:	4805      	ldr	r0, [pc, #20]	@ (800032c <I2C_write+0x40>)
 8000316:	f008 f9ab 	bl	8008670 <HAL_I2C_Mem_Write>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	240002f8 	.word	0x240002f8

08000330 <I2C_read>:

void I2C_read(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af02      	add	r7, sp, #8
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	460b      	mov	r3, r1
 800033c:	72fb      	strb	r3, [r7, #11]
 800033e:	4613      	mov	r3, r2
 8000340:	72bb      	strb	r3, [r7, #10]
	dev_adress += 1;
 8000342:	7afb      	ldrb	r3, [r7, #11]
 8000344:	3301      	adds	r3, #1
 8000346:	72fb      	strb	r3, [r7, #11]
	*status = HAL_I2C_Master_Transmit(&hi2c2, dev_adress, &reg_adress, 1, 500);
 8000348:	7afb      	ldrb	r3, [r7, #11]
 800034a:	b299      	uxth	r1, r3
 800034c:	f107 020a 	add.w	r2, r7, #10
 8000350:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2301      	movs	r3, #1
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <I2C_read+0x60>)
 800035a:	f007 ff7b 	bl	8008254 <HAL_I2C_Master_Transmit>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	701a      	strb	r2, [r3, #0]
	*status |= HAL_I2C_Master_Receive(&hi2c2, dev_adress, data, 1, 100);
 8000366:	7afb      	ldrb	r3, [r7, #11]
 8000368:	b299      	uxth	r1, r3
 800036a:	2364      	movs	r3, #100	@ 0x64
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2301      	movs	r3, #1
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4807      	ldr	r0, [pc, #28]	@ (8000390 <I2C_read+0x60>)
 8000374:	f008 f886 	bl	8008484 <HAL_I2C_Master_Receive>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b2da      	uxtb	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	701a      	strb	r2, [r3, #0]
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	240002f8 	.word	0x240002f8

08000394 <close_SPI>:




// SPI
void close_SPI(SPI_HandleTypeDef* hspi) {
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	uint32_t itflag = hspi->Instance->SR;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	60fb      	str	r3, [r7, #12]

	  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	699a      	ldr	r2, [r3, #24]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f042 0208 	orr.w	r2, r2, #8
 80003b2:	619a      	str	r2, [r3, #24]
	  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	699a      	ldr	r2, [r3, #24]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f042 0210 	orr.w	r2, r2, #16
 80003c2:	619a      	str	r2, [r3, #24]

	  /* Disable SPI peripheral */
	  __HAL_SPI_DISABLE(hspi);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f022 0201 	bic.w	r2, r2, #1
 80003d2:	601a      	str	r2, [r3, #0]

	  /* Disable ITs */
	  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6919      	ldr	r1, [r3, #16]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b3c      	ldr	r3, [pc, #240]	@ (80004d0 <close_SPI+0x13c>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	6113      	str	r3, [r2, #16]
	                              SPI_IT_FRE | SPI_IT_MODF));

	  /* Disable Tx DMA Request */
	  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	689a      	ldr	r2, [r3, #8]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80003f2:	609a      	str	r2, [r3, #8]

	  /* Report UnderRun error for non RX Only communication */
	  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	2b04      	cmp	r3, #4
 80003fe:	d014      	beq.n	800042a <close_SPI+0x96>
	  {
	    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f003 0320 	and.w	r3, r3, #32
 8000406:	2b00      	cmp	r3, #0
 8000408:	d00f      	beq.n	800042a <close_SPI+0x96>
	    {
	      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000410:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	699a      	ldr	r2, [r3, #24]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f042 0220 	orr.w	r2, r2, #32
 8000428:	619a      	str	r2, [r3, #24]
	    }
	  }

	  /* Report OverRun error for non TX Only communication */
	  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2b03      	cmp	r3, #3
 8000434:	d014      	beq.n	8000460 <close_SPI+0xcc>
	  {
	    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00f      	beq.n	8000460 <close_SPI+0xcc>
	    {
	      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000446:	f043 0204 	orr.w	r2, r3, #4
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	699a      	ldr	r2, [r3, #24]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800045e:	619a      	str	r2, [r3, #24]
	    }
	#endif /* USE_SPI_CRC */
	  }

	  /* SPI Mode Fault error interrupt occurred -------------------------------*/
	  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000466:	2b00      	cmp	r3, #0
 8000468:	d00f      	beq.n	800048a <close_SPI+0xf6>
	  {
	    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000470:	f043 0201 	orr.w	r2, r3, #1
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	699a      	ldr	r2, [r3, #24]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000488:	619a      	str	r2, [r3, #24]
	  }

	  /* SPI Frame error interrupt occurred ------------------------------------*/
	  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000490:	2b00      	cmp	r3, #0
 8000492:	d00f      	beq.n	80004b4 <close_SPI+0x120>
	  {
	    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800049a:	f043 0208 	orr.w	r2, r3, #8
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	699a      	ldr	r2, [r3, #24]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80004b2:	619a      	str	r2, [r3, #24]
	  }

	  hspi->TxXferCount = (uint16_t)0UL;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	  hspi->RxXferCount = (uint16_t)0UL;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80004c4:	bf00      	nop
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	fffffc90 	.word	0xfffffc90

080004d4 <HAL_SPI_TxCpltCallback>:

// DMA callbacks, when SPI finishes
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80004dc:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <HAL_SPI_TxCpltCallback+0x1c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	24000124 	.word	0x24000124

080004f4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80004fc:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	24000124 	.word	0x24000124

08000514 <SPI_check_CTS>:

void SPI_check_CTS(HAL_StatusTypeDef* status) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint8_t attempt = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]
	//uint8_t data[] = {0x20, 0, 0, 0}; //GET_INT_STATUS to clear CTS
	// Wait until Clear To Send (CTS) signal appears
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 8000520:	e00c      	b.n	800053c <SPI_check_CTS+0x28>
		attempt++;
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	3301      	adds	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
		if (attempt > 100) {
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	2b64      	cmp	r3, #100	@ 0x64
 800052c:	d903      	bls.n	8000536 <SPI_check_CTS+0x22>
			*status = 0x3; // Timeout
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2203      	movs	r2, #3
 8000532:	701a      	strb	r2, [r3, #0]
			return;
 8000534:	e00a      	b.n	800054c <SPI_check_CTS+0x38>
		}
		HAL_Delay(100);
 8000536:	2064      	movs	r0, #100	@ 0x64
 8000538:	f002 fc9e 	bl	8002e78 <HAL_Delay>
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800053c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <SPI_check_CTS+0x40>)
 8000542:	f007 fd9f 	bl	8008084 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0ea      	beq.n	8000522 <SPI_check_CTS+0xe>

	//*status |= HAL_SPI_Transmit(&hspi4, data, 4, 100);

	// SI is now ready to receive data

}
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	58021000 	.word	0x58021000

08000558 <SPI_write>:

void SPI_write(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
	// Transmit data array
	SPI_check_CTS(status);
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f7ff ffd5 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d110      	bne.n	8000594 <SPI_write+0x3c>
	*status |= HAL_SPI_Transmit(&hspi4, data, *size, 100);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	2364      	movs	r3, #100	@ 0x64
 800057a:	68b9      	ldr	r1, [r7, #8]
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <SPI_write+0x44>)
 800057e:	f00d fd47 	bl	800e010 <HAL_SPI_Transmit>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4313      	orrs	r3, r2
 800058c:	b2da      	uxtb	r2, r3
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e000      	b.n	8000596 <SPI_write+0x3e>
	if (*status != 0) {return;}
 8000594:	bf00      	nop
}
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2400034c 	.word	0x2400034c

080005a0 <SPI_read>:

// SPI functions
void SPI_read(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* TxSize, uint8_t* RxSize) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < *TxSize; i++) {
		data_buffer[i] = data[i];
	}
	*/

	SPI_check_CTS(status);
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f7ff ffb0 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d14a      	bne.n	8000652 <SPI_read+0xb2>
	// Duplicate data array with command and zeros (use static buffer)
	data_buffer[0] = data[0];
	*/

	// Address of requested register
	*status |= HAL_SPI_Transmit(&hspi4, data, *TxSize, 70);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	2346      	movs	r3, #70	@ 0x46
 80005c4:	68b9      	ldr	r1, [r7, #8]
 80005c6:	4826      	ldr	r0, [pc, #152]	@ (8000660 <SPI_read+0xc0>)
 80005c8:	f00d fd22 	bl	800e010 <HAL_SPI_Transmit>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	701a      	strb	r2, [r3, #0]

	// Wait for CTS
	SPI_check_CTS(status);
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f7ff ff99 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d135      	bne.n	8000656 <SPI_read+0xb6>


	// Once approved, prepare for reading (READ_CMD_BUFF)
	data[0] = 0x44;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	2244      	movs	r2, #68	@ 0x44
 80005ee:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	3301      	adds	r3, #1
 80005f4:	22ff      	movs	r2, #255	@ 0xff
 80005f6:	701a      	strb	r2, [r3, #0]

	// Insert padding (Tx delay + CTS byte)
	*RxSize += 2;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3302      	adds	r3, #2
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	701a      	strb	r2, [r3, #0]

	// Issue reading command
	*status |= HAL_SPI_TransmitReceive(&hspi4, data, data_buffer, *RxSize, 100);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	2364      	movs	r3, #100	@ 0x64
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	4613      	mov	r3, r2
 8000610:	4a14      	ldr	r2, [pc, #80]	@ (8000664 <SPI_read+0xc4>)
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	4812      	ldr	r0, [pc, #72]	@ (8000660 <SPI_read+0xc0>)
 8000616:	f00d fee9 	bl	800e3ec <HAL_SPI_TransmitReceive>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	701a      	strb	r2, [r3, #0]


	// Load read data into data array and remove padding at the beginning
	for (uint8_t i = 2; i < *RxSize; i++) {
 800062a:	2302      	movs	r3, #2
 800062c:	75fb      	strb	r3, [r7, #23]
 800062e:	e00a      	b.n	8000646 <SPI_read+0xa6>
		data[i-2] = data_buffer[i];
 8000630:	7dfa      	ldrb	r2, [r7, #23]
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	3b02      	subs	r3, #2
 8000636:	68b9      	ldr	r1, [r7, #8]
 8000638:	440b      	add	r3, r1
 800063a:	490a      	ldr	r1, [pc, #40]	@ (8000664 <SPI_read+0xc4>)
 800063c:	5c8a      	ldrb	r2, [r1, r2]
 800063e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 2; i < *RxSize; i++) {
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	3301      	adds	r3, #1
 8000644:	75fb      	strb	r3, [r7, #23]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	7dfa      	ldrb	r2, [r7, #23]
 800064c:	429a      	cmp	r2, r3
 800064e:	d3ef      	bcc.n	8000630 <SPI_read+0x90>
 8000650:	e002      	b.n	8000658 <SPI_read+0xb8>
	if (*status != 0) {return;}
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <SPI_read+0xb8>
	if (*status != 0) {return;}
 8000656:	bf00      	nop
	}

}
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2400034c 	.word	0x2400034c
 8000664:	24000128 	.word	0x24000128

08000668 <PowerReset>:
	}
	strcpy(IDs[1], temp);
	return;
}

void PowerReset(HAL_StatusTypeDef* status) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers to default state
	I2C_read(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	220c      	movs	r2, #12
 8000676:	2144      	movs	r1, #68	@ 0x44
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff fe59 	bl	8000330 <I2C_read>
	reg_val++;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000686:	f107 030f 	add.w	r3, r7, #15
 800068a:	220c      	movs	r2, #12
 800068c:	2144      	movs	r1, #68	@ 0x44
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff fe2c 	bl	80002ec <I2C_write>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <PowerInit>:


void PowerInit(HAL_StatusTypeDef* status) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers
	PowerReset(status);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffdf 	bl	8000668 <PowerReset>

	// Set device as SINK (Disable SRC/SNK toggle and poll CC lines only)
	// CONTROL2:(MODE, TOGGLE)
	I2C_read(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 80006aa:	f107 030f 	add.w	r3, r7, #15
 80006ae:	2208      	movs	r2, #8
 80006b0:	2144      	movs	r1, #68	@ 0x44
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff fe3c 	bl	8000330 <I2C_read>
	reg_val |= ((1<<2) | 1);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	f043 0305 	orr.w	r3, r3, #5
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]
	reg_val &= ~(1<<1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	f023 0302 	bic.w	r3, r3, #2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 80006cc:	f107 030f 	add.w	r3, r7, #15
 80006d0:	2208      	movs	r2, #8
 80006d2:	2144      	movs	r1, #68	@ 0x44
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fe09 	bl	80002ec <I2C_write>


	// Initially, set current to USB default  (recommended by doc.)
	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80006da:	f107 030f 	add.w	r3, r7, #15
 80006de:	2206      	movs	r2, #6
 80006e0:	2144      	movs	r1, #68	@ 0x44
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff fe24 	bl	8000330 <I2C_read>
	reg_val &= ~(1<<3);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]
	reg_val |= (1 << 2);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80006fc:	f107 030f 	add.w	r3, r7, #15
 8000700:	2206      	movs	r2, #6
 8000702:	2144      	movs	r1, #68	@ 0x44
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff fdf1 	bl	80002ec <I2C_write>

	// Disable current source(s) at CC lines
	I2C_read(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 800070a:	f107 030f 	add.w	r3, r7, #15
 800070e:	2202      	movs	r2, #2
 8000710:	2144      	movs	r1, #68	@ 0x44
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff fe0c 	bl	8000330 <I2C_read>
	reg_val &= ~((1 << 5) | (1 << 4));
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 8000722:	f107 030f 	add.w	r3, r7, #15
 8000726:	2202      	movs	r2, #2
 8000728:	2144      	movs	r1, #68	@ 0x44
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff fdde 	bl	80002ec <I2C_write>

	// Mask interrupt for current level request
	reg_val = 0xFE;
 8000730:	23fe      	movs	r3, #254	@ 0xfe
 8000732:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASK, &reg_val);
 8000734:	f107 030f 	add.w	r3, r7, #15
 8000738:	220a      	movs	r2, #10
 800073a:	2144      	movs	r1, #68	@ 0x44
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fdd5 	bl	80002ec <I2C_write>

	// Mask interrupt for toggle status
	reg_val = 0xBF;
 8000742:	23bf      	movs	r3, #191	@ 0xbf
 8000744:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKA, &reg_val);
 8000746:	f107 030f 	add.w	r3, r7, #15
 800074a:	220e      	movs	r2, #14
 800074c:	2144      	movs	r1, #68	@ 0x44
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff fdcc 	bl	80002ec <I2C_write>

	// Mask interrupt for GoodCRC acknowledge (BMC is not used)
	reg_val = 0x01;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKB, &reg_val);
 8000758:	f107 030f 	add.w	r3, r7, #15
 800075c:	220f      	movs	r2, #15
 800075e:	2144      	movs	r1, #68	@ 0x44
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fdc3 	bl	80002ec <I2C_write>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <PowerIncreaseCurrent>:

void PowerIncreaseCurrent(HAL_StatusTypeDef* status) {
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 8000776:	f107 030f 	add.w	r3, r7, #15
 800077a:	2206      	movs	r2, #6
 800077c:	2144      	movs	r1, #68	@ 0x44
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fdd6 	bl	8000330 <I2C_read>
	reg_val |= ((1<<3) | (1<<2));
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f043 030c 	orr.w	r3, r3, #12
 800078a:	b2db      	uxtb	r3, r3
 800078c:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 800078e:	f107 030f 	add.w	r3, r7, #15
 8000792:	2206      	movs	r2, #6
 8000794:	2144      	movs	r1, #68	@ 0x44
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fda8 	bl	80002ec <I2C_write>

	return;
 800079c:	bf00      	nop
}
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <USB_CDC_RxHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef GROUND_STATION
void USB_CDC_RxHandler(uint8_t *buffer, uint32_t size) {
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	char cmd_temp = buffer[0];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	73fb      	strb	r3, [r7, #15]
	if (cmd_temp == '\r') {
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	2b0d      	cmp	r3, #13
 80007b8:	d019      	beq.n	80007ee <USB_CDC_RxHandler+0x4a>
		return;
	}
	else if (size == 1) {
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d104      	bne.n	80007ca <USB_CDC_RxHandler+0x26>
		cmd_index = (char) buffer[0];
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <USB_CDC_RxHandler+0x58>)
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e012      	b.n	80007f0 <USB_CDC_RxHandler+0x4c>
	}
	else {
		uint8_t first = (uint8_t) buffer[0] - '1';
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	3b31      	subs	r3, #49	@ 0x31
 80007d0:	73bb      	strb	r3, [r7, #14]
		uint8_t second = (uint8_t) buffer[1] - '1';
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3301      	adds	r3, #1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3b31      	subs	r3, #49	@ 0x31
 80007da:	737b      	strb	r3, [r7, #13]

		cam_mode_select = first * 16 + second;
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	7b7b      	ldrb	r3, [r7, #13]
 80007e4:	4413      	add	r3, r2
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <USB_CDC_RxHandler+0x5c>)
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e000      	b.n	80007f0 <USB_CDC_RxHandler+0x4c>
		return;
 80007ee:	bf00      	nop
			default: {
				cam_mode_select = 0xAA; //ERROR
			}
		}*/
	}
}
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	24000001 	.word	0x24000001

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b5b0      	push	{r4, r5, r7, lr}
 8000806:	b096      	sub	sp, #88	@ 0x58
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800080a:	f000 fc6f 	bl	80010ec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f002 faa1 	bl	8002d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f8d7 	bl	80009c4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000816:	f000 f957 	bl	8000ac8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 fb4f 	bl	8000ebc <MX_GPIO_Init>
  MX_DMA_Init();
 800081e:	f000 fb1d 	bl	8000e5c <MX_DMA_Init>
  MX_DCMI_Init();
 8000822:	f000 fa51 	bl	8000cc8 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000826:	f000 fa83 	bl	8000d30 <MX_I2C2_Init>
  MX_ADC1_Init();
 800082a:	f000 f96d 	bl	8000b08 <MX_ADC1_Init>
  MX_ADC2_Init();
 800082e:	f000 f9e5 	bl	8000bfc <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8000832:	f011 ff59 	bl	80126e8 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8000836:	f000 fabb 	bl	8000db0 <MX_SPI4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setup(&status, &error_index);
 800083a:	4959      	ldr	r1, [pc, #356]	@ (80009a0 <main+0x19c>)
 800083c:	4859      	ldr	r0, [pc, #356]	@ (80009a4 <main+0x1a0>)
 800083e:	f001 fb91 	bl	8001f64 <setup>
  HAL_Delay(1000);
 8000842:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000846:	f002 fb17 	bl	8002e78 <HAL_Delay>
  cmd_main_win();
 800084a:	f001 fc27 	bl	800209c <cmd_main_win>
  while (1) {
	  if (radio_nirq) {
 800084e:	4b56      	ldr	r3, [pc, #344]	@ (80009a8 <main+0x1a4>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00a      	beq.n	800086c <main+0x68>
		  // Handling of the packet IRQ
		  nirq_handler(&status, &error_index, &ping_in_progress);
 8000856:	4a55      	ldr	r2, [pc, #340]	@ (80009ac <main+0x1a8>)
 8000858:	4951      	ldr	r1, [pc, #324]	@ (80009a0 <main+0x19c>)
 800085a:	4852      	ldr	r0, [pc, #328]	@ (80009a4 <main+0x1a0>)
 800085c:	f001 fd22 	bl	80022a4 <nirq_handler>
		  radio_nirq = 0;
 8000860:	4b51      	ldr	r3, [pc, #324]	@ (80009a8 <main+0x1a4>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
		  SPI_check_CTS(&status);
 8000866:	484f      	ldr	r0, [pc, #316]	@ (80009a4 <main+0x1a0>)
 8000868:	f7ff fe54 	bl	8000514 <SPI_check_CTS>
	  }
#ifdef GROUND_STATION
	  switch (cmd_index) {
 800086c:	4b50      	ldr	r3, [pc, #320]	@ (80009b0 <main+0x1ac>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	3b30      	subs	r3, #48	@ 0x30
 8000872:	2b04      	cmp	r3, #4
 8000874:	d87d      	bhi.n	8000972 <main+0x16e>
 8000876:	a201      	add	r2, pc, #4	@ (adr r2, 800087c <main+0x78>)
 8000878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087c:	08000891 	.word	0x08000891
 8000880:	08000899 	.word	0x08000899
 8000884:	080008d1 	.word	0x080008d1
 8000888:	080008d9 	.word	0x080008d9
 800088c:	08000939 	.word	0x08000939

	  		  // Idle
	  		  case '0':
	  			HAL_Delay(100);
 8000890:	2064      	movs	r0, #100	@ 0x64
 8000892:	f002 faf1 	bl	8002e78 <HAL_Delay>
	  			break;
 8000896:	e082      	b.n	800099e <main+0x19a>

	  		  // Ping
	  		  case '1': {
	  			  ping_in_progress = 1;
 8000898:	4b44      	ldr	r3, [pc, #272]	@ (80009ac <main+0x1a8>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
	  			  radio_ping(&status);
 800089e:	4841      	ldr	r0, [pc, #260]	@ (80009a4 <main+0x1a0>)
 80008a0:	f001 fc40 	bl	8002124 <radio_ping>





	  			  uint8_t buffer[] = "Ping DONE \r\n";
 80008a4:	4b43      	ldr	r3, [pc, #268]	@ (80009b4 <main+0x1b0>)
 80008a6:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80008aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ac:	c407      	stmia	r4!, {r0, r1, r2}
 80008ae:	7023      	strb	r3, [r4, #0]
	  			  uint8_t buffer_size = sizeof(buffer);
 80008b0:	230d      	movs	r3, #13
 80008b2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	  			  CDC_Transmit_HS(buffer, buffer_size);
 80008b6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f011 ffde 	bl	8012884 <CDC_Transmit_HS>
	  			  cmd_index = '0';
 80008c8:	4b39      	ldr	r3, [pc, #228]	@ (80009b0 <main+0x1ac>)
 80008ca:	2230      	movs	r2, #48	@ 0x30
 80008cc:	701a      	strb	r2, [r3, #0]
	  			  break;
 80008ce:	e066      	b.n	800099e <main+0x19a>
	  			}


	  		  // Telemetry
	  		  case '2': {
	  			  cmd_index = '0';
 80008d0:	4b37      	ldr	r3, [pc, #220]	@ (80009b0 <main+0x1ac>)
 80008d2:	2230      	movs	r2, #48	@ 0x30
 80008d4:	701a      	strb	r2, [r3, #0]
	  			break;
 80008d6:	e062      	b.n	800099e <main+0x19a>
	  		  }

	  		  // IMG
	  		  case '3': {
	  			  cmd_img_options();
 80008d8:	f001 fc02 	bl	80020e0 <cmd_img_options>
	  			  while (cam_mode_select == 0xFF) {
 80008dc:	e01c      	b.n	8000918 <main+0x114>
	  				  if (cam_mode_select == 0xAA) {
 80008de:	4b36      	ldr	r3, [pc, #216]	@ (80009b8 <main+0x1b4>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2baa      	cmp	r3, #170	@ 0xaa
 80008e4:	d118      	bne.n	8000918 <main+0x114>
	  					  uint8_t buffer[] = "Unrecognized command \r\n";
 80008e6:	4b35      	ldr	r3, [pc, #212]	@ (80009bc <main+0x1b8>)
 80008e8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80008ec:	461d      	mov	r5, r3
 80008ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008f6:	e884 0003 	stmia.w	r4, {r0, r1}
	  					  uint16_t buffer_size = sizeof(buffer);
 80008fa:	2318      	movs	r3, #24
 80008fc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	  					  CDC_Transmit_HS(buffer, buffer_size);
 8000900:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8000904:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f011 ffba 	bl	8012884 <CDC_Transmit_HS>
	  					  cmd_index = '0';
 8000910:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <main+0x1ac>)
 8000912:	2230      	movs	r2, #48	@ 0x30
 8000914:	701a      	strb	r2, [r3, #0]
	  					  break;
 8000916:	e003      	b.n	8000920 <main+0x11c>
	  			  while (cam_mode_select == 0xFF) {
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <main+0x1b4>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2bff      	cmp	r3, #255	@ 0xff
 800091e:	d0de      	beq.n	80008de <main+0xda>
	  				  }
	  			  }
	  			  capture_img(&status, &error_index, &cam_mode_select);
 8000920:	4a25      	ldr	r2, [pc, #148]	@ (80009b8 <main+0x1b4>)
 8000922:	491f      	ldr	r1, [pc, #124]	@ (80009a0 <main+0x19c>)
 8000924:	481f      	ldr	r0, [pc, #124]	@ (80009a4 <main+0x1a0>)
 8000926:	f001 fc48 	bl	80021ba <capture_img>
	  			  cmd_index = '0';
 800092a:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <main+0x1ac>)
 800092c:	2230      	movs	r2, #48	@ 0x30
 800092e:	701a      	strb	r2, [r3, #0]
	  			  cam_mode_select = 0xFF; //return to default state
 8000930:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <main+0x1b4>)
 8000932:	22ff      	movs	r2, #255	@ 0xff
 8000934:	701a      	strb	r2, [r3, #0]
	  			break;
 8000936:	e032      	b.n	800099e <main+0x19a>
	  		  }
	  		  case '4': {
	  			uint8_t buffer[] = "\e[1;1H\e[2J";
 8000938:	4a21      	ldr	r2, [pc, #132]	@ (80009c0 <main+0x1bc>)
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000940:	c303      	stmia	r3!, {r0, r1}
 8000942:	801a      	strh	r2, [r3, #0]
 8000944:	3302      	adds	r3, #2
 8000946:	0c12      	lsrs	r2, r2, #16
 8000948:	701a      	strb	r2, [r3, #0]
	  			uint16_t buffer_size = sizeof(buffer);
 800094a:	230b      	movs	r3, #11
 800094c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	  			CDC_Transmit_HS(buffer, buffer_size);
 8000950:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f011 ff92 	bl	8012884 <CDC_Transmit_HS>
	  			cmd_index = '0';
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <main+0x1ac>)
 8000962:	2230      	movs	r2, #48	@ 0x30
 8000964:	701a      	strb	r2, [r3, #0]
	  			HAL_Delay(100);
 8000966:	2064      	movs	r0, #100	@ 0x64
 8000968:	f002 fa86 	bl	8002e78 <HAL_Delay>
	  			cmd_main_win();
 800096c:	f001 fb96 	bl	800209c <cmd_main_win>
	  			break;
 8000970:	e015      	b.n	800099e <main+0x19a>
	  		  }
	  		  default: {
	  			uint8_t buffer[] = "Unrecognized command \r\n";
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <main+0x1b8>)
 8000974:	1d3c      	adds	r4, r7, #4
 8000976:	461d      	mov	r5, r3
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000980:	e884 0003 	stmia.w	r4, {r0, r1}
	  			uint16_t buffer_size = sizeof(buffer);
 8000984:	2318      	movs	r3, #24
 8000986:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	  			CDC_Transmit_HS(buffer, buffer_size);
 800098a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f011 ff76 	bl	8012884 <CDC_Transmit_HS>
	  			cmd_index = '0';
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <main+0x1ac>)
 800099a:	2230      	movs	r2, #48	@ 0x30
 800099c:	701a      	strb	r2, [r3, #0]
	  if (radio_nirq) {
 800099e:	e756      	b.n	800084e <main+0x4a>
 80009a0:	240004c5 	.word	0x240004c5
 80009a4:	240004c4 	.word	0x240004c4
 80009a8:	240004c6 	.word	0x240004c6
 80009ac:	240004c7 	.word	0x240004c7
 80009b0:	24000000 	.word	0x24000000
 80009b4:	08013270 	.word	0x08013270
 80009b8:	24000001 	.word	0x24000001
 80009bc:	08013280 	.word	0x08013280
 80009c0:	08013298 	.word	0x08013298

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b09c      	sub	sp, #112	@ 0x70
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ce:	224c      	movs	r2, #76	@ 0x4c
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f012 fc06 	bl	80131e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2220      	movs	r2, #32
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f012 fc00 	bl	80131e4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009e4:	4b36      	ldr	r3, [pc, #216]	@ (8000ac0 <SystemClock_Config+0xfc>)
 80009e6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ee:	2002      	movs	r0, #2
 80009f0:	f009 fd84 	bl	800a4fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009f4:	2300      	movs	r3, #0
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <SystemClock_Config+0x100>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a31      	ldr	r2, [pc, #196]	@ (8000ac4 <SystemClock_Config+0x100>)
 80009fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <SystemClock_Config+0x100>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a10:	bf00      	nop
 8000a12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <SystemClock_Config+0x100>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a1e:	d1f8      	bne.n	8000a12 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a24:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000a36:	2346      	movs	r3, #70	@ 0x46
 8000a38:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 25;
 8000a3e:	2319      	movs	r3, #25
 8000a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000a42:	2304      	movs	r3, #4
 8000a44:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a46:	230c      	movs	r3, #12
 8000a48:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	4618      	mov	r0, r3
 8000a58:	f009 fd9a 	bl	800a590 <HAL_RCC_OscConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a62:	f000 fb6f 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	233f      	movs	r3, #63	@ 0x3f
 8000a68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a76:	2340      	movs	r3, #64	@ 0x40
 8000a78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a7a:	2340      	movs	r3, #64	@ 0x40
 8000a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a84:	2340      	movs	r3, #64	@ 0x40
 8000a86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2106      	movs	r1, #6
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f00a f9b1 	bl	800adf4 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000a98:	f000 fb54 	bl	8001144 <Error_Handler>
  }
  __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <SystemClock_Config+0xfc>)
 8000a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <SystemClock_Config+0xfc>)
 8000aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8000aa8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aac:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f00a fb55 	bl	800b160 <HAL_RCC_MCOConfig>
}
 8000ab6:	bf00      	nop
 8000ab8:	3770      	adds	r7, #112	@ 0x70
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	58024800 	.word	0x58024800

08000ac8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0b0      	sub	sp, #192	@ 0xc0
 8000acc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	22c0      	movs	r2, #192	@ 0xc0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f012 fb85 	bl	80131e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000ada:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 8000ae6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000aea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4618      	mov	r0, r3
 8000af0:	f00a fd60 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <PeriphCommonClock_Config+0x36>
  {
    Error_Handler();
 8000afa:	f000 fb23 	bl	8001144 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	37c0      	adds	r7, #192	@ 0xc0
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b2c:	4b30      	ldr	r3, [pc, #192]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b2e:	4a31      	ldr	r2, [pc, #196]	@ (8000bf4 <MX_ADC1_Init+0xec>)
 8000b30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b32:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b34:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b40:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b46:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b4c:	4b28      	ldr	r3, [pc, #160]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b52:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b58:	4b25      	ldr	r3, [pc, #148]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b5e:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b64:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b8a:	4819      	ldr	r0, [pc, #100]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000b8c:	f002 fb56 	bl	800323c <HAL_ADC_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b96:	f000 fad5 	bl	8001144 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4812      	ldr	r0, [pc, #72]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000ba6:	f003 f815 	bl	8003bd4 <HAL_ADCEx_MultiModeConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000bb0:	f000 fac8 	bl	8001144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <MX_ADC1_Init+0xf0>)
 8000bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb8:	2306      	movs	r3, #6
 8000bba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bc0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bc4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <MX_ADC1_Init+0xe8>)
 8000bd8:	f002 fc8a 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000be2:	f000 faaf 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	@ 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	24000168 	.word	0x24000168
 8000bf4:	40022000 	.word	0x40022000
 8000bf8:	25b00200 	.word	0x25b00200

08000bfc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c14:	4b29      	ldr	r3, [pc, #164]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c16:	4a2a      	ldr	r2, [pc, #168]	@ (8000cc0 <MX_ADC2_Init+0xc4>)
 8000c18:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c1a:	4b28      	ldr	r3, [pc, #160]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c1c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c20:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000c22:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c28:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c2e:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c30:	2204      	movs	r2, #4
 8000c32:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c34:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c3a:	4b20      	ldr	r3, [pc, #128]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c46:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c58:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c72:	4812      	ldr	r0, [pc, #72]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000c74:	f002 fae2 	bl	800323c <HAL_ADC_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000c7e:	f000 fa61 	bl	8001144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c82:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <MX_ADC2_Init+0xc8>)
 8000c84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c86:	2306      	movs	r3, #6
 8000c88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c8e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c94:	2304      	movs	r3, #4
 8000c96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_ADC2_Init+0xc0>)
 8000ca6:	f002 fc23 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000cb0:	f000 fa48 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	240001cc 	.word	0x240001cc
 8000cc0:	40022100 	.word	0x40022100
 8000cc4:	21800100 	.word	0x21800100

08000cc8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000cce:	4a17      	ldr	r2, [pc, #92]	@ (8000d2c <MX_DCMI_Init+0x64>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000cda:	2220      	movs	r2, #32
 8000cdc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000cde:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000ce0:	2280      	movs	r2, #128	@ 0x80
 8000ce2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d08:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <MX_DCMI_Init+0x60>)
 8000d16:	f003 f981 	bl	800401c <HAL_DCMI_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d20:	f000 fa10 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	24000230 	.word	0x24000230
 8000d2c:	48020000 	.word	0x48020000

08000d30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d36:	4a1c      	ldr	r2, [pc, #112]	@ (8000da8 <MX_I2C2_Init+0x78>)
 8000d38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dac <MX_I2C2_Init+0x7c>)
 8000d3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d6a:	480e      	ldr	r0, [pc, #56]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d6c:	f007 f9d6 	bl	800811c <HAL_I2C_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d76:	f000 f9e5 	bl	8001144 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d7e:	f008 f885 	bl	8008e8c <HAL_I2CEx_ConfigAnalogFilter>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d88:	f000 f9dc 	bl	8001144 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d90:	f008 f8c7 	bl	8008f22 <HAL_I2CEx_ConfigDigitalFilter>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 f9d3 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	240002f8 	.word	0x240002f8
 8000da8:	40005800 	.word	0x40005800
 8000dac:	20b0ccff 	.word	0x20b0ccff

08000db0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000db4:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000db6:	4a28      	ldr	r2, [pc, #160]	@ (8000e58 <MX_SPI4_Init+0xa8>)
 8000db8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000dba:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000dbc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000dc0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000dc2:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000dca:	2207      	movs	r2, #7
 8000dcc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dce:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000ddc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000de0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e06:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_SPI4_Init+0xa4>)
 8000e40:	f00c ffc2 	bl	800ddc8 <HAL_SPI_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000e4a:	f000 f97b 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2400034c 	.word	0x2400034c
 8000e58:	40013400 	.word	0x40013400

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_DMA_Init+0x5c>)
 8000e64:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e68:	4a13      	ldr	r2, [pc, #76]	@ (8000eb8 <MX_DMA_Init+0x5c>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_DMA_Init+0x5c>)
 8000e74:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	200b      	movs	r0, #11
 8000e86:	f003 f81c 	bl	8003ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	f003 f833 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	200c      	movs	r0, #12
 8000e96:	f003 f814 	bl	8003ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e9a:	200c      	movs	r0, #12
 8000e9c:	f003 f82b 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	200d      	movs	r0, #13
 8000ea6:	f003 f80c 	bl	8003ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000eaa:	200d      	movs	r0, #13
 8000eac:	f003 f823 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	58024400 	.word	0x58024400

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	@ 0x30
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	4b77      	ldr	r3, [pc, #476]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000ed4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed8:	4a75      	ldr	r2, [pc, #468]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ede:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ee2:	4b73      	ldr	r3, [pc, #460]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000ee4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000ef2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef6:	4a6e      	ldr	r2, [pc, #440]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f00:	4b6b      	ldr	r3, [pc, #428]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b68      	ldr	r3, [pc, #416]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f14:	4a66      	ldr	r2, [pc, #408]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f1e:	4b64      	ldr	r3, [pc, #400]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b60      	ldr	r3, [pc, #384]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f32:	4a5f      	ldr	r2, [pc, #380]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	4b59      	ldr	r3, [pc, #356]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f50:	4a57      	ldr	r2, [pc, #348]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f5a:	4b55      	ldr	r3, [pc, #340]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f68:	4b51      	ldr	r3, [pc, #324]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f6e:	4a50      	ldr	r2, [pc, #320]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f78:	4b4d      	ldr	r3, [pc, #308]	@ (80010b0 <MX_GPIO_Init+0x1f4>)
 8000f7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_3V3_GPIO_Port, DCMI_3V3_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f8c:	4849      	ldr	r0, [pc, #292]	@ (80010b4 <MX_GPIO_Init+0x1f8>)
 8000f8e:	f007 f891 	bl	80080b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f98:	4847      	ldr	r0, [pc, #284]	@ (80010b8 <MX_GPIO_Init+0x1fc>)
 8000f9a:	f007 f88b 	bl	80080b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fa4:	4845      	ldr	r0, [pc, #276]	@ (80010bc <MX_GPIO_Init+0x200>)
 8000fa6:	f007 f885 	bl	80080b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fb0:	4842      	ldr	r0, [pc, #264]	@ (80010bc <MX_GPIO_Init+0x200>)
 8000fb2:	f007 f87f 	bl	80080b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_N_Pin */
  GPIO_InitStruct.Pin = INT_N_Pin;
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	483d      	ldr	r0, [pc, #244]	@ (80010c0 <MX_GPIO_Init+0x204>)
 8000fca:	f006 feab 	bl	8007d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT__Pin */
  GPIO_InitStruct.Pin = FLT__Pin;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(FLT__GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4835      	ldr	r0, [pc, #212]	@ (80010b8 <MX_GPIO_Init+0x1fc>)
 8000fe2:	f006 fe9f 	bl	8007d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : COMMAND_DONE_Pin */
  GPIO_InitStruct.Pin = COMMAND_DONE_Pin;
 8000fe6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COMMAND_DONE_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482e      	ldr	r0, [pc, #184]	@ (80010b4 <MX_GPIO_Init+0x1f8>)
 8000ffc:	f006 fe92 	bl	8007d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : nIRQ_Pin */
  GPIO_InitStruct.Pin = nIRQ_Pin;
 8001000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001006:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nIRQ_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4827      	ldr	r0, [pc, #156]	@ (80010b4 <MX_GPIO_Init+0x1f8>)
 8001018:	f006 fe84 	bl	8007d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_3V3_Pin */
  GPIO_InitStruct.Pin = DCMI_3V3_Pin;
 800101c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DCMI_3V3_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	481f      	ldr	r0, [pc, #124]	@ (80010b4 <MX_GPIO_Init+0x1f8>)
 8001036:	f006 fe75 	bl	8007d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDN_Pin */
  GPIO_InitStruct.Pin = SDN_Pin;
 800103a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001044:	2302      	movs	r3, #2
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SDN_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	4819      	ldr	r0, [pc, #100]	@ (80010b8 <MX_GPIO_Init+0x1fc>)
 8001054:	f006 fe66 	bl	8007d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_RST_Pin DCMI_PWDN_Pin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin|DCMI_PWDN_Pin;
 8001058:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4812      	ldr	r0, [pc, #72]	@ (80010bc <MX_GPIO_Init+0x200>)
 8001072:	f006 fe57 	bl	8007d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_MCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_MCLK_Pin;
 8001076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DCMI_MCLK_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <MX_GPIO_Init+0x204>)
 8001094:	f006 fe46 	bl	8007d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(nIRQ_EXTI_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2028      	movs	r0, #40	@ 0x28
 800109e:	f002 ff10 	bl	8003ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(nIRQ_EXTI_IRQn);
 80010a2:	2028      	movs	r0, #40	@ 0x28
 80010a4:	f002 ff27 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010a8:	bf00      	nop
 80010aa:	3730      	adds	r7, #48	@ 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	58024400 	.word	0x58024400
 80010b4:	58021000 	.word	0x58021000
 80010b8:	58020400 	.word	0x58020400
 80010bc:	58020c00 	.word	0x58020c00
 80010c0:	58020000 	.word	0x58020000

080010c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_10) {
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010d4:	d102      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x18>
    radio_nirq = 1;
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x24>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
  }
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	240004c6 	.word	0x240004c6

080010ec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010fe:	f002 ff15 	bl	8003f2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001102:	2301      	movs	r3, #1
 8001104:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001106:	2300      	movs	r3, #0
 8001108:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800110e:	231f      	movs	r3, #31
 8001110:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001112:	2387      	movs	r3, #135	@ 0x87
 8001114:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001116:	2300      	movs	r3, #0
 8001118:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800111a:	2300      	movs	r3, #0
 800111c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800111e:	2301      	movs	r3, #1
 8001120:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001122:	2301      	movs	r3, #1
 8001124:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800112e:	463b      	mov	r3, r7
 8001130:	4618      	mov	r0, r3
 8001132:	f002 ff33 	bl	8003f9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001136:	2004      	movs	r0, #4
 8001138:	f002 ff10 	bl	8003f5c <HAL_MPU_Enable>

}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <Error_Handler+0x8>

08001150 <camera_init>:
	status |= HAL_I2C_Master_Receive(p_I2C, CAM_READ, data, 1, 100);
	return status;
}
*/

void camera_init(HAL_StatusTypeDef* status, uint8_t* mode){
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	//uint8_t read_value;



	// Power-up camera
	HAL_GPIO_WritePin(CAM_PWR_PORT, CAM_PWR_PIN, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001160:	48b6      	ldr	r0, [pc, #728]	@ (800143c <camera_init+0x2ec>)
 8001162:	f006 ffa7 	bl	80080b4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001166:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800116a:	f001 fe85 	bl	8002e78 <HAL_Delay>

	// Enable camera
	HAL_GPIO_WritePin(CAM_PWDN_PORT, CAM_PWDN_PIN, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001174:	48b2      	ldr	r0, [pc, #712]	@ (8001440 <camera_init+0x2f0>)
 8001176:	f006 ff9d 	bl	80080b4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800117a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800117e:	f001 fe7b 	bl	8002e78 <HAL_Delay>

	// Reset camera
	HAL_GPIO_WritePin(CAM_RESET_PORT, CAM_RESET_PIN, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001188:	48ad      	ldr	r0, [pc, #692]	@ (8001440 <camera_init+0x2f0>)
 800118a:	f006 ff93 	bl	80080b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800118e:	2064      	movs	r0, #100	@ 0x64
 8001190:	f001 fe72 	bl	8002e78 <HAL_Delay>
	HAL_GPIO_WritePin(CAM_RESET_PORT, CAM_RESET_PIN, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800119a:	48a9      	ldr	r0, [pc, #676]	@ (8001440 <camera_init+0x2f0>)
 800119c:	f006 ff8a 	bl	80080b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011a0:	2064      	movs	r0, #100	@ 0x64
 80011a2:	f001 fe69 	bl	8002e78 <HAL_Delay>


	// Initialization common for all modes
	uint8_t data = 0x80;
 80011a6:	2380      	movs	r3, #128	@ 0x80
 80011a8:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80011aa:	f107 030f 	add.w	r3, r7, #15
 80011ae:	2212      	movs	r2, #18
 80011b0:	2142      	movs	r1, #66	@ 0x42
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff f89a 	bl	80002ec <I2C_write>
	//status = camera_write(CAM_COM7, 0x80);			// Reset all registers
	I2C_read(status, CAM_WRITE, CAM_CLKRC, &data);
 80011b8:	f107 030f 	add.w	r3, r7, #15
 80011bc:	2211      	movs	r2, #17
 80011be:	2142      	movs	r1, #66	@ 0x42
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff f8b5 	bl	8000330 <I2C_read>
	data |= 0b1;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_CLKRC, &data);
 80011d0:	f107 030f 	add.w	r3, r7, #15
 80011d4:	2211      	movs	r2, #17
 80011d6:	2142      	movs	r1, #66	@ 0x42
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff f887 	bl	80002ec <I2C_write>
	//status |= camera_write(CAM_CLKRC, 0x01);		// Set clock pre-scaler /2, since A/C converter operates up to 12 MHz and input CLK is 24 MHz
	I2C_read(status, CAM_WRITE, CAM_DBLV, &data);
 80011de:	f107 030f 	add.w	r3, r7, #15
 80011e2:	226b      	movs	r2, #107	@ 0x6b
 80011e4:	2142      	movs	r1, #66	@ 0x42
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff f8a2 	bl	8000330 <I2C_read>
	data &= ~(1<<7 | 1<<6);
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	73fb      	strb	r3, [r7, #15]
	//data = 0x0A;
	I2C_write(status, CAM_WRITE, CAM_DBLV, &data);
 80011f6:	f107 030f 	add.w	r3, r7, #15
 80011fa:	226b      	movs	r2, #107	@ 0x6b
 80011fc:	2142      	movs	r1, #66	@ 0x42
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f874 	bl	80002ec <I2C_write>
	//status |= camera_write(CAM_DBLV, 0x0A);			// Bypass PLL

	// Enable scaling for resolutions smaller than VGA
	if ((*mode != 0x00) && (*mode != 0x01)) {
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d016      	beq.n	800123a <camera_init+0xea>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d012      	beq.n	800123a <camera_init+0xea>
		//status |= camera_write(CAM_COM3, 0x08);
		I2C_read(status, CAM_WRITE, CAM_COM3, &data);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	220c      	movs	r2, #12
 800121a:	2142      	movs	r1, #66	@ 0x42
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff f887 	bl	8000330 <I2C_read>
		//data = 0x08;
		data |= 1<<3;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	b2db      	uxtb	r3, r3
 800122a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM3, &data);
 800122c:	f107 030f 	add.w	r3, r7, #15
 8001230:	220c      	movs	r2, #12
 8001232:	2142      	movs	r1, #66	@ 0x42
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff f859 	bl	80002ec <I2C_write>
	}

	// Settings depending on choice of mode
	switch (*mode) {
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b31      	cmp	r3, #49	@ 0x31
 8001240:	f200 80ee 	bhi.w	8001420 <camera_init+0x2d0>
 8001244:	a201      	add	r2, pc, #4	@ (adr r2, 800124c <camera_init+0xfc>)
 8001246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124a:	bf00      	nop
 800124c:	08001315 	.word	0x08001315
 8001250:	08001329 	.word	0x08001329
 8001254:	08001421 	.word	0x08001421
 8001258:	08001421 	.word	0x08001421
 800125c:	08001421 	.word	0x08001421
 8001260:	08001421 	.word	0x08001421
 8001264:	08001421 	.word	0x08001421
 8001268:	08001421 	.word	0x08001421
 800126c:	08001421 	.word	0x08001421
 8001270:	08001421 	.word	0x08001421
 8001274:	08001421 	.word	0x08001421
 8001278:	08001421 	.word	0x08001421
 800127c:	08001421 	.word	0x08001421
 8001280:	08001421 	.word	0x08001421
 8001284:	08001421 	.word	0x08001421
 8001288:	08001421 	.word	0x08001421
 800128c:	0800134f 	.word	0x0800134f
 8001290:	08001363 	.word	0x08001363
 8001294:	08001421 	.word	0x08001421
 8001298:	08001421 	.word	0x08001421
 800129c:	08001421 	.word	0x08001421
 80012a0:	08001421 	.word	0x08001421
 80012a4:	08001421 	.word	0x08001421
 80012a8:	08001421 	.word	0x08001421
 80012ac:	08001421 	.word	0x08001421
 80012b0:	08001421 	.word	0x08001421
 80012b4:	08001421 	.word	0x08001421
 80012b8:	08001421 	.word	0x08001421
 80012bc:	08001421 	.word	0x08001421
 80012c0:	08001421 	.word	0x08001421
 80012c4:	08001421 	.word	0x08001421
 80012c8:	08001421 	.word	0x08001421
 80012cc:	08001389 	.word	0x08001389
 80012d0:	0800139d 	.word	0x0800139d
 80012d4:	08001421 	.word	0x08001421
 80012d8:	08001421 	.word	0x08001421
 80012dc:	08001421 	.word	0x08001421
 80012e0:	08001421 	.word	0x08001421
 80012e4:	08001421 	.word	0x08001421
 80012e8:	08001421 	.word	0x08001421
 80012ec:	08001421 	.word	0x08001421
 80012f0:	08001421 	.word	0x08001421
 80012f4:	08001421 	.word	0x08001421
 80012f8:	08001421 	.word	0x08001421
 80012fc:	08001421 	.word	0x08001421
 8001300:	08001421 	.word	0x08001421
 8001304:	08001421 	.word	0x08001421
 8001308:	08001421 	.word	0x08001421
 800130c:	080013c3 	.word	0x080013c3
 8001310:	080013d7 	.word	0x080013d7
	// VGA - YUV
	case 0x00: {
		//status |= camera_write(CAM_COM7, 0x00);		// Set output format
		data = 0x00;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001318:	f107 030f 	add.w	r3, r7, #15
 800131c:	2212      	movs	r2, #18
 800131e:	2142      	movs	r1, #66	@ 0x42
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7fe ffe3 	bl	80002ec <I2C_write>
		break;
 8001326:	e07b      	b.n	8001420 <camera_init+0x2d0>
	}
	// VGA - RGB565
	case 0x01: {
		//status |= camera_write(CAM_COM7, 0x04);		// Set output format
		data = 0x04;
 8001328:	2304      	movs	r3, #4
 800132a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 800132c:	f107 030f 	add.w	r3, r7, #15
 8001330:	2212      	movs	r2, #18
 8001332:	2142      	movs	r1, #66	@ 0x42
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7fe ffd9 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 800133a:	23d0      	movs	r3, #208	@ 0xd0
 800133c:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 800133e:	f107 030f 	add.w	r3, r7, #15
 8001342:	2240      	movs	r2, #64	@ 0x40
 8001344:	2142      	movs	r1, #66	@ 0x42
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7fe ffd0 	bl	80002ec <I2C_write>
		break;
 800134c:	e068      	b.n	8001420 <camera_init+0x2d0>
	}
	// CIF - YUV
	case 0x10: {
		//status |= camera_write(CAM_COM7, 0x20);		// Set output format
		data = 0x20;
 800134e:	2320      	movs	r3, #32
 8001350:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001352:	f107 030f 	add.w	r3, r7, #15
 8001356:	2212      	movs	r2, #18
 8001358:	2142      	movs	r1, #66	@ 0x42
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7fe ffc6 	bl	80002ec <I2C_write>
		break;
 8001360:	e05e      	b.n	8001420 <camera_init+0x2d0>
	}
	// CIF - RGB565
	case 0x11: {
		//status |= camera_write(CAM_COM7, 0x24);		// Set output format
		data = 0x24;
 8001362:	2324      	movs	r3, #36	@ 0x24
 8001364:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001366:	f107 030f 	add.w	r3, r7, #15
 800136a:	2212      	movs	r2, #18
 800136c:	2142      	movs	r1, #66	@ 0x42
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7fe ffbc 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 8001374:	23d0      	movs	r3, #208	@ 0xd0
 8001376:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 8001378:	f107 030f 	add.w	r3, r7, #15
 800137c:	2240      	movs	r2, #64	@ 0x40
 800137e:	2142      	movs	r1, #66	@ 0x42
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7fe ffb3 	bl	80002ec <I2C_write>
		break;
 8001386:	e04b      	b.n	8001420 <camera_init+0x2d0>
	}
	// QVGA - YUV
	case 0x20: {
		//status |= camera_write(CAM_COM7, 0x10);		// Set output format
		data = 0x10;
 8001388:	2310      	movs	r3, #16
 800138a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 800138c:	f107 030f 	add.w	r3, r7, #15
 8001390:	2212      	movs	r2, #18
 8001392:	2142      	movs	r1, #66	@ 0x42
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7fe ffa9 	bl	80002ec <I2C_write>
		break;
 800139a:	e041      	b.n	8001420 <camera_init+0x2d0>
	}
	// QVGA - RGB565
	case 0x21: {
		//status |= camera_write(CAM_COM7, 0x14);		// Set output format
		data = 0x14;
 800139c:	2314      	movs	r3, #20
 800139e:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80013a0:	f107 030f 	add.w	r3, r7, #15
 80013a4:	2212      	movs	r2, #18
 80013a6:	2142      	movs	r1, #66	@ 0x42
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7fe ff9f 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 80013ae:	23d0      	movs	r3, #208	@ 0xd0
 80013b0:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 80013b2:	f107 030f 	add.w	r3, r7, #15
 80013b6:	2240      	movs	r2, #64	@ 0x40
 80013b8:	2142      	movs	r1, #66	@ 0x42
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7fe ff96 	bl	80002ec <I2C_write>
		break;
 80013c0:	e02e      	b.n	8001420 <camera_init+0x2d0>
	}
	// QCIF - YUV
	case 0x30: {
		//status |= camera_write(CAM_COM7, 0x08);		// Set output format
		data = 0x08;
 80013c2:	2308      	movs	r3, #8
 80013c4:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80013c6:	f107 030f 	add.w	r3, r7, #15
 80013ca:	2212      	movs	r2, #18
 80013cc:	2142      	movs	r1, #66	@ 0x42
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7fe ff8c 	bl	80002ec <I2C_write>
		break;
 80013d4:	e024      	b.n	8001420 <camera_init+0x2d0>
	}
	// QCIF - RGB565
	case 0x31: {
		//status |= camera_write(CAM_COM7, 0x0C);		// Set output format
		I2C_read(status, CAM_WRITE, CAM_COM7, &data);
 80013d6:	f107 030f 	add.w	r3, r7, #15
 80013da:	2212      	movs	r2, #18
 80013dc:	2142      	movs	r1, #66	@ 0x42
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7fe ffa6 	bl	8000330 <I2C_read>
		//data = 0x0C;
		data |= (1 << 3) | (1 << 2);
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	f043 030c 	orr.w	r3, r3, #12
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	73fb      	strb	r3, [r7, #15]

		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80013ee:	f107 030f 	add.w	r3, r7, #15
 80013f2:	2212      	movs	r2, #18
 80013f4:	2142      	movs	r1, #66	@ 0x42
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7fe ff78 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		//data = 0xD0;
		data &= ~(1<<5);
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	f023 0320 	bic.w	r3, r3, #32
 8001402:	b2db      	uxtb	r3, r3
 8001404:	73fb      	strb	r3, [r7, #15]
		data |= (1<<4);
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	f043 0310 	orr.w	r3, r3, #16
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 8001410:	f107 030f 	add.w	r3, r7, #15
 8001414:	2240      	movs	r2, #64	@ 0x40
 8001416:	2142      	movs	r1, #66	@ 0x42
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7fe ff67 	bl	80002ec <I2C_write>
		break;
 800141e:	bf00      	nop
	}


	//status |= camera_write(CAM_COM8, 0x8F);		// Automatic exposure & gain control
	//status |= camera_write(CAM_RSVD, 0x84);			// Colour correction
	data = 0x84;
 8001420:	2384      	movs	r3, #132	@ 0x84
 8001422:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_RSVD, &data);
 8001424:	f107 030f 	add.w	r3, r7, #15
 8001428:	22b0      	movs	r2, #176	@ 0xb0
 800142a:	2142      	movs	r1, #66	@ 0x42
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7fe ff5d 	bl	80002ec <I2C_write>

	//return status;
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	58021000 	.word	0x58021000
 8001440:	58020c00 	.word	0x58020c00

08001444 <camera_capture_photo>:


void camera_capture_photo(HAL_StatusTypeDef* status, uint8_t* destination_adress, uint32_t* size) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
	//HAL_StatusTypeDef status;

	// Begin transmission of data from camera to memory
	*status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, destination_adress, *size);
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2102      	movs	r1, #2
 8001458:	480a      	ldr	r0, [pc, #40]	@ (8001484 <camera_capture_photo+0x40>)
 800145a:	f002 fe59 	bl	8004110 <HAL_DCMI_Start_DMA>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5000);
 8001466:	f241 3088 	movw	r0, #5000	@ 0x1388
 800146a:	f001 fd05 	bl	8002e78 <HAL_Delay>

	// End transmission
	*status = HAL_DCMI_Stop(&hdcmi);
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <camera_capture_photo+0x40>)
 8001470:	f002 ff10 	bl	8004294 <HAL_DCMI_Stop>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	701a      	strb	r2, [r3, #0]

	//return status;
}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	24000230 	.word	0x24000230

08001488 <radio_power_up>:
#include "radio.h"

void radio_power_up(HAL_StatusTypeDef *status) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001496:	4890      	ldr	r0, [pc, #576]	@ (80016d8 <radio_power_up+0x250>)
 8001498:	f006 fe0c 	bl	80080b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800149c:	2064      	movs	r0, #100	@ 0x64
 800149e:	f001 fceb 	bl	8002e78 <HAL_Delay>
	uint8_t data[] = {RF_POWER_UP};
 80014a2:	4a8e      	ldr	r2, [pc, #568]	@ (80016dc <radio_power_up+0x254>)
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ac:	6018      	str	r0, [r3, #0]
 80014ae:	3304      	adds	r3, #4
 80014b0:	8019      	strh	r1, [r3, #0]
 80014b2:	3302      	adds	r3, #2
 80014b4:	0c0a      	lsrs	r2, r1, #16
 80014b6:	701a      	strb	r2, [r3, #0]
	//uint8_t data[9] = {0x02, 0x01, 0x01, 0x01, 0xC9, 0xC3, 0x80, 0x44, 0xFF};
	uint8_t size = sizeof(data);
 80014b8:	2307      	movs	r3, #7
 80014ba:	777b      	strb	r3, [r7, #29]
	uint16_t attempt = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	83fb      	strh	r3, [r7, #30]
	//uint8_t NOP = 0x00;
	uint8_t *pData = data;
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	61bb      	str	r3, [r7, #24]
	SPI_HandleTypeDef *hspi = &hspi4;
 80014c6:	4b86      	ldr	r3, [pc, #536]	@ (80016e0 <radio_power_up+0x258>)
 80014c8:	617b      	str	r3, [r7, #20]

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3320      	adds	r3, #32
 80014d0:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

	// Optimization of HAL_SPI_Transmit

	if (hspi->State != HAL_SPI_STATE_READY) {
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d003      	beq.n	80014e6 <radio_power_up+0x5e>
		*status = HAL_BUSY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2202      	movs	r2, #2
 80014e2:	701a      	strb	r2, [r3, #0]
		return;
 80014e4:	e0f4      	b.n	80016d0 <radio_power_up+0x248>
	}
	/* Lock the process */
	__HAL_LOCK(&hspi4);
 80014e6:	4b7e      	ldr	r3, [pc, #504]	@ (80016e0 <radio_power_up+0x258>)
 80014e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	f000 80ef 	beq.w	80016d0 <radio_power_up+0x248>
 80014f2:	4b7b      	ldr	r3, [pc, #492]	@ (80016e0 <radio_power_up+0x258>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2203      	movs	r2, #3
 80014fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2200      	movs	r2, #0
 8001506:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	hspi->pTxBuffPtr = (const uint8_t*) pData;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi->TxXferSize = size; // One byte
 8001510:	7f7b      	ldrb	r3, [r7, #29]
 8001512:	b29a      	uxth	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	hspi->TxXferCount = size;
 800151a:	7f7b      	ldrb	r3, [r7, #29]
 800151c:	b29a      	uxth	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

	/*Init field not used in handle to zero */
	hspi->pRxBuffPtr = NULL;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2200      	movs	r2, #0
 8001528:	665a      	str	r2, [r3, #100]	@ 0x64
	hspi->RxXferSize = (uint16_t) 0UL;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2200      	movs	r2, #0
 800152e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	hspi->RxXferCount = (uint16_t) 0UL;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2200      	movs	r2, #0
 8001536:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
	hspi->TxISR = NULL;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2200      	movs	r2, #0
 800153e:	675a      	str	r2, [r3, #116]	@ 0x74
	hspi->RxISR = NULL;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2200      	movs	r2, #0
 8001544:	671a      	str	r2, [r3, #112]	@ 0x70

	// Communication direction
	SPI_2LINES_TX(hspi);
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001558:	60da      	str	r2, [r3, #12]

	/* Set the number of data at current transfer */
	MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, size);
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4b60      	ldr	r3, [pc, #384]	@ (80016e4 <radio_power_up+0x25c>)
 8001562:	4013      	ands	r3, r2
 8001564:	7f79      	ldrb	r1, [r7, #29]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	430b      	orrs	r3, r1
 800156c:	6053      	str	r3, [r2, #4]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001574:	4858      	ldr	r0, [pc, #352]	@ (80016d8 <radio_power_up+0x250>)
 8001576:	f006 fd9d 	bl	80080b4 <HAL_GPIO_WritePin>

	// Wait for CTS to go high
	if (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800157a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800157e:	485a      	ldr	r0, [pc, #360]	@ (80016e8 <radio_power_up+0x260>)
 8001580:	f006 fd80 	bl	8008084 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d11f      	bne.n	80015ca <radio_power_up+0x142>
		// Wait until Clear To Send (CTS) signal appears
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800158a:	e016      	b.n	80015ba <radio_power_up+0x132>
			attempt++;
 800158c:	8bfb      	ldrh	r3, [r7, #30]
 800158e:	3301      	adds	r3, #1
 8001590:	83fb      	strh	r3, [r7, #30]
			if (attempt > 10000) {
 8001592:	8bfb      	ldrh	r3, [r7, #30]
 8001594:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001598:	4293      	cmp	r3, r2
 800159a:	d90e      	bls.n	80015ba <radio_power_up+0x132>
				*status = 0x3; // Timeout
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2203      	movs	r2, #3
 80015a0:	701a      	strb	r2, [r3, #0]
				// End process
				close_SPI(hspi);
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7fe fef6 	bl	8000394 <close_SPI>
				hspi->State = HAL_SPI_STATE_READY;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

				/* Unlock the process */
				__HAL_UNLOCK(hspi);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				return;
 80015b8:	e08a      	b.n	80016d0 <radio_power_up+0x248>
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80015ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015be:	484a      	ldr	r0, [pc, #296]	@ (80016e8 <radio_power_up+0x260>)
 80015c0:	f006 fd60 	bl	8008084 <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0e0      	beq.n	800158c <radio_power_up+0x104>
			}
		}
	}
	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(hspi);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015e8:	601a      	str	r2, [r3, #0]

	// Loop until the byte is sent
	// While this seems unnecessary, it covers 2 requirements - wait until SPI is ready to send and then send only one byte
	while (hspi->TxXferCount > 0UL) {
 80015ea:	e058      	b.n	800169e <radio_power_up+0x216>
		/* Wait until TXP flag is set to send data */
		if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) {
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d151      	bne.n	800169e <radio_power_up+0x216>
			if ((hspi->TxXferCount > 3UL)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001600:	b29b      	uxth	r3, r3
 8001602:	2b03      	cmp	r3, #3
 8001604:	d918      	bls.n	8001638 <radio_power_up+0x1b0>
					&& (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA)) {
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800160a:	2b40      	cmp	r3, #64	@ 0x40
 800160c:	d914      	bls.n	8001638 <radio_power_up+0x1b0>
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
						*((const uint32_t*) hspi->pTxBuffPtr);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	681b      	ldr	r3, [r3, #0]
						*((const uint32_t*) hspi->pTxBuffPtr);
 8001616:	6812      	ldr	r2, [r2, #0]
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
 8001618:	621a      	str	r2, [r3, #32]
				hspi->pTxBuffPtr += sizeof(uint32_t);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161e:	1d1a      	adds	r2, r3, #4
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount -= (uint16_t) 4UL;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800162a:	b29b      	uxth	r3, r3
 800162c:	3b04      	subs	r3, #4
 800162e:	b29a      	uxth	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8001636:	e032      	b.n	800169e <radio_power_up+0x216>
			} else if ((hspi->TxXferCount > 1UL)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800163e:	b29b      	uxth	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d917      	bls.n	8001674 <radio_power_up+0x1ec>
					&& (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA)) {
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <radio_power_up+0x1ec>
#if defined (__GNUC__)
				*ptxdr_16bits = *((const uint16_t*) hspi->pTxBuffPtr);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001650:	881a      	ldrh	r2, [r3, #0]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	801a      	strh	r2, [r3, #0]
#else
		          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
		#endif /* __GNUC__ */
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165a:	1c9a      	adds	r2, r3, #2
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount -= (uint16_t) 2UL;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001666:	b29b      	uxth	r3, r3
 8001668:	3b02      	subs	r3, #2
 800166a:	b29a      	uxth	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8001672:	e014      	b.n	800169e <radio_power_up+0x216>
			} else {
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
						*((const uint8_t*) hspi->pTxBuffPtr);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3320      	adds	r3, #32
						*((const uint8_t*) hspi->pTxBuffPtr);
 800167e:	7812      	ldrb	r2, [r2, #0]
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
 8001680:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr += sizeof(uint8_t);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount--;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001692:	b29b      	uxth	r3, r3
 8001694:	3b01      	subs	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	while (hspi->TxXferCount > 0UL) {
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1a0      	bne.n	80015ec <radio_power_up+0x164>
		 }
		 */
	}

	// Wait until transfer is completed
	while (!(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_EOT))) {
 80016aa:	bf00      	nop
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d1f8      	bne.n	80016ac <radio_power_up+0x224>
	}

	// End process
	close_SPI(hspi);
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7fe fe6a 	bl	8000394 <close_SPI>
	hspi->State = HAL_SPI_STATE_READY;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	/* Unlock the process */
	__HAL_UNLOCK(hspi);
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	//*status = HAL_SPI_Transmit(&hspi4, &NOP, 1, 10);
	//*status = HAL_SPI_Transmit(&hspi4, data, size, 50);
	//SPI_write(status, data, &size);
}
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	58020400 	.word	0x58020400
 80016dc:	080132a4 	.word	0x080132a4
 80016e0:	2400034c 	.word	0x2400034c
 80016e4:	ffff0000 	.word	0xffff0000
 80016e8:	58021000 	.word	0x58021000

080016ec <radio_pins>:

void radio_pins(HAL_StatusTypeDef* status) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GPIO_PIN_CFG};
 80016f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <radio_pins+0x34>)
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016fe:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8001702:	2308      	movs	r3, #8
 8001704:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001706:	f107 020f 	add.w	r2, r7, #15
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4619      	mov	r1, r3
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7fe ff21 	bl	8000558 <SPI_write>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	080132ac 	.word	0x080132ac

08001724 <radio_TCXO>:

void radio_TCXO(HAL_StatusTypeDef* status) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_XO_TUNE_2};
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <radio_TCXO+0x2c>)
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	2300      	movs	r3, #0
 8001732:	82bb      	strh	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001734:	2306      	movs	r3, #6
 8001736:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001738:	f107 020f 	add.w	r2, r7, #15
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4619      	mov	r1, r3
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7fe ff08 	bl	8000558 <SPI_write>
}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	00020011 	.word	0x00020011

08001754 <radio_global>:

void radio_global(HAL_StatusTypeDef* status) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_CONFIG_1};
 800175c:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <radio_global+0x34>)
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001766:	6018      	str	r0, [r3, #0]
 8001768:	3304      	adds	r3, #4
 800176a:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 800176c:	2305      	movs	r3, #5
 800176e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001770:	f107 020f 	add.w	r2, r7, #15
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe feec 	bl	8000558 <SPI_write>
}
 8001780:	bf00      	nop
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	080132b4 	.word	0x080132b4

0800178c <radio_interrupts>:

void radio_interrupts(HAL_StatusTypeDef* status) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_INT_CTL_ENABLE_2};
 8001794:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <radio_interrupts+0x34>)
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800179e:	6018      	str	r0, [r3, #0]
 80017a0:	3304      	adds	r3, #4
 80017a2:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80017a4:	2306      	movs	r3, #6
 80017a6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80017a8:	f107 020f 	add.w	r2, r7, #15
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7fe fed0 	bl	8000558 <SPI_write>
}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	080132bc 	.word	0x080132bc

080017c4 <radio_fast_registers>:

void radio_fast_registers(HAL_StatusTypeDef* status) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FRR_CTL_A_MODE_4};
 80017cc:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <radio_fast_registers+0x34>)
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017d6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 80017da:	2308      	movs	r3, #8
 80017dc:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80017de:	f107 020f 	add.w	r2, r7, #15
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7fe feb5 	bl	8000558 <SPI_write>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	080132c4 	.word	0x080132c4

080017fc <radio_Tx>:

void radio_Tx(HAL_StatusTypeDef* status) {
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b089      	sub	sp, #36	@ 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PREAMBLE_TX_LENGTH_9};
 8001804:	4b09      	ldr	r3, [pc, #36]	@ (800182c <radio_Tx+0x30>)
 8001806:	f107 0410 	add.w	r4, r7, #16
 800180a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180c:	c407      	stmia	r4!, {r0, r1, r2}
 800180e:	7023      	strb	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001810:	230d      	movs	r3, #13
 8001812:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001814:	f107 020f 	add.w	r2, r7, #15
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe fe9a 	bl	8000558 <SPI_write>
}
 8001824:	bf00      	nop
 8001826:	3724      	adds	r7, #36	@ 0x24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	080132cc 	.word	0x080132cc

08001830 <radio_sync>:

void radio_sync(HAL_StatusTypeDef* status) {
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b089      	sub	sp, #36	@ 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNC_CONFIG_10};
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <radio_sync+0x30>)
 800183a:	f107 0410 	add.w	r4, r7, #16
 800183e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001840:	c407      	stmia	r4!, {r0, r1, r2}
 8001842:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001844:	230e      	movs	r3, #14
 8001846:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001848:	f107 020f 	add.w	r2, r7, #15
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4619      	mov	r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe fe80 	bl	8000558 <SPI_write>
}
 8001858:	bf00      	nop
 800185a:	3724      	adds	r7, #36	@ 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	080132dc 	.word	0x080132dc

08001864 <radio_packet_CRC>:

void radio_packet_CRC(HAL_StatusTypeDef* status) {
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_CONFIG_12};
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <radio_packet_CRC+0x30>)
 800186e:	f107 0410 	add.w	r4, r7, #16
 8001872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001878:	2310      	movs	r3, #16
 800187a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800187c:	f107 020f 	add.w	r2, r7, #15
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe fe66 	bl	8000558 <SPI_write>
}
 800188c:	bf00      	nop
 800188e:	3724      	adds	r7, #36	@ 0x24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd90      	pop	{r4, r7, pc}
 8001894:	080132ec 	.word	0x080132ec

08001898 <radio_Rx_thr>:

void radio_Rx_thr(HAL_StatusTypeDef* status) {
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b089      	sub	sp, #36	@ 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_THRESHOLD_12};
 80018a0:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <radio_Rx_thr+0x30>)
 80018a2:	f107 0410 	add.w	r4, r7, #16
 80018a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80018ac:	2310      	movs	r3, #16
 80018ae:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80018b0:	f107 020f 	add.w	r2, r7, #15
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe fe4c 	bl	8000558 <SPI_write>
}
 80018c0:	bf00      	nop
 80018c2:	3724      	adds	r7, #36	@ 0x24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	080132fc 	.word	0x080132fc

080018cc <radio_Rx_CRC_1>:

void radio_Rx_CRC_1(HAL_StatusTypeDef* status) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_FIELD_3_CRC_CONFIG_12};
 80018d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <radio_Rx_CRC_1+0x34>)
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 80018e4:	2310      	movs	r3, #16
 80018e6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80018e8:	f107 020f 	add.w	r2, r7, #15
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4619      	mov	r1, r3
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe fe30 	bl	8000558 <SPI_write>
}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	180c1211 	.word	0x180c1211

08001904 <radio_Rx_CRC_2>:

void radio_Rx_CRC_2(HAL_StatusTypeDef* status) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_1_CRC_CONFIG_12};
 800190c:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <radio_Rx_CRC_2+0x34>)
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 800191c:	2310      	movs	r3, #16
 800191e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001920:	f107 020f 	add.w	r2, r7, #15
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	4619      	mov	r1, r3
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7fe fe14 	bl	8000558 <SPI_write>
}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	240c1211 	.word	0x240c1211

0800193c <radio_Rx_CRC_3>:

void radio_Rx_CRC_3(HAL_StatusTypeDef* status) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_4_CRC_CONFIG_5};
 8001944:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <radio_Rx_CRC_3+0x34>)
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	711a      	strb	r2, [r3, #4]
	uint8_t size = sizeof(data);
 8001952:	2309      	movs	r3, #9
 8001954:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001956:	f107 020b 	add.w	r2, r7, #11
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7fe fdf9 	bl	8000558 <SPI_write>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	30051211 	.word	0x30051211

08001974 <radio_Rx_CRC_seed>:

void radio_Rx_CRC_seed(HAL_StatusTypeDef* status) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_SEED_31_24_4};
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <radio_Rx_CRC_seed+0x2c>)
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001984:	2308      	movs	r3, #8
 8001986:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001988:	f107 020f 	add.w	r2, r7, #15
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7fe fde0 	bl	8000558 <SPI_write>
}
 8001998:	bf00      	nop
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	36041211 	.word	0x36041211

080019a4 <radio_mod>:

void radio_mod(HAL_StatusTypeDef* status) {
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_MOD_TYPE_12};
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <radio_mod+0x30>)
 80019ae:	f107 0410 	add.w	r4, r7, #16
 80019b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80019b8:	2310      	movs	r3, #16
 80019ba:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80019bc:	f107 020f 	add.w	r2, r7, #15
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fdc6 	bl	8000558 <SPI_write>
}
 80019cc:	bf00      	nop
 80019ce:	3724      	adds	r7, #36	@ 0x24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd90      	pop	{r4, r7, pc}
 80019d4:	0801330c 	.word	0x0801330c

080019d8 <radio_freq_dev>:

void radio_freq_dev(HAL_StatusTypeDef* status) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_FREQ_DEV_0_1};
 80019e0:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <radio_freq_dev+0x34>)
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ea:	6018      	str	r0, [r3, #0]
 80019ec:	3304      	adds	r3, #4
 80019ee:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80019f0:	2305      	movs	r3, #5
 80019f2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80019f4:	f107 020f 	add.w	r2, r7, #15
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7fe fdaa 	bl	8000558 <SPI_write>
}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	0801331c 	.word	0x0801331c

08001a10 <radio_Tx_ramp>:

void radio_Tx_ramp(HAL_StatusTypeDef* status) {
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_TX_RAMP_DELAY_12};
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <radio_Tx_ramp+0x30>)
 8001a1a:	f107 0410 	add.w	r4, r7, #16
 8001a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001a24:	2310      	movs	r3, #16
 8001a26:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a28:	f107 020f 	add.w	r2, r7, #15
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4619      	mov	r1, r3
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7fe fd90 	bl	8000558 <SPI_write>
}
 8001a38:	bf00      	nop
 8001a3a:	3724      	adds	r7, #36	@ 0x24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	08013324 	.word	0x08013324

08001a44 <radio_NCO_offset>:

void radio_NCO_offset(HAL_StatusTypeDef* status) {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b089      	sub	sp, #36	@ 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_BCR_NCO_OFFSET_2_12};
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <radio_NCO_offset+0x30>)
 8001a4e:	f107 0410 	add.w	r4, r7, #16
 8001a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001a58:	2310      	movs	r3, #16
 8001a5a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a5c:	f107 020f 	add.w	r2, r7, #15
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7fe fd76 	bl	8000558 <SPI_write>
}
 8001a6c:	bf00      	nop
 8001a6e:	3724      	adds	r7, #36	@ 0x24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	08013334 	.word	0x08013334

08001a78 <radio_AFC>:

void radio_AFC(HAL_StatusTypeDef* status) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AFC_LIMITER_1_3};
 8001a80:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab4 <radio_AFC+0x3c>)
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8a:	6018      	str	r0, [r3, #0]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	8019      	strh	r1, [r3, #0]
 8001a90:	3302      	adds	r3, #2
 8001a92:	0c0a      	lsrs	r2, r1, #16
 8001a94:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001a96:	2307      	movs	r3, #7
 8001a98:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a9a:	f107 020f 	add.w	r2, r7, #15
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7fe fd57 	bl	8000558 <SPI_write>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	08013344 	.word	0x08013344

08001ab8 <radio_AGC_1>:

void radio_AGC_1(HAL_StatusTypeDef* status) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_CONTROL_1};
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <radio_AGC_1+0x34>)
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aca:	6018      	str	r0, [r3, #0]
 8001acc:	3304      	adds	r3, #4
 8001ace:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001ad0:	2305      	movs	r3, #5
 8001ad2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001ad4:	f107 020f 	add.w	r2, r7, #15
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4619      	mov	r1, r3
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe fd3a 	bl	8000558 <SPI_write>
}
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	0801334c 	.word	0x0801334c

08001af0 <radio_AGC_2>:

void radio_AGC_2(HAL_StatusTypeDef* status) {
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b089      	sub	sp, #36	@ 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_WINDOW_SIZE_12};
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <radio_AGC_2+0x30>)
 8001afa:	f107 0410 	add.w	r4, r7, #16
 8001afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001b04:	2310      	movs	r3, #16
 8001b06:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b08:	f107 020f 	add.w	r2, r7, #15
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe fd20 	bl	8000558 <SPI_write>
}
 8001b18:	bf00      	nop
 8001b1a:	3724      	adds	r7, #36	@ 0x24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}
 8001b20:	08013354 	.word	0x08013354

08001b24 <radio_RAW>:

void radio_RAW(HAL_StatusTypeDef* status) {
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_CONTROL_10};
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <radio_RAW+0x30>)
 8001b2e:	f107 0410 	add.w	r4, r7, #16
 8001b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b34:	c407      	stmia	r4!, {r0, r1, r2}
 8001b36:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001b38:	230e      	movs	r3, #14
 8001b3a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b3c:	f107 020f 	add.w	r2, r7, #15
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	4619      	mov	r1, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fd06 	bl	8000558 <SPI_write>
}
 8001b4c:	bf00      	nop
 8001b4e:	3724      	adds	r7, #36	@ 0x24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd90      	pop	{r4, r7, pc}
 8001b54:	08013364 	.word	0x08013364

08001b58 <radio_search_period>:

void radio_search_period(HAL_StatusTypeDef* status) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_SEARCH2_2};
 8001b60:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <radio_search_period+0x34>)
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b6a:	6018      	str	r0, [r3, #0]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001b70:	2306      	movs	r3, #6
 8001b72:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b74:	f107 020f 	add.w	r2, r7, #15
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe fcea 	bl	8000558 <SPI_write>
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	08013374 	.word	0x08013374

08001b90 <radio_GFSK_thr>:

void radio_GFSK_thr(HAL_StatusTypeDef* status) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_SPIKE_DET_2};
 8001b98:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <radio_GFSK_thr+0x34>)
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba2:	6018      	str	r0, [r3, #0]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001ba8:	2306      	movs	r3, #6
 8001baa:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001bac:	f107 020f 	add.w	r2, r7, #15
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fcce 	bl	8000558 <SPI_write>
}
 8001bbc:	bf00      	nop
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0801337c 	.word	0x0801337c

08001bc8 <radio_RSSI_thr>:

void radio_RSSI_thr(HAL_StatusTypeDef* status) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RSSI_MUTE_1};
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <radio_RSSI_thr+0x2c>)
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	753b      	strb	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001bd8:	2305      	movs	r3, #5
 8001bda:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001bdc:	f107 020f 	add.w	r2, r7, #15
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7fe fcb6 	bl	8000558 <SPI_write>
}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	57012011 	.word	0x57012011

08001bf8 <radio_RSSI_att>:

void radio_RSSI_att(HAL_StatusTypeDef* status) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_DSA_CTRL1_5};
 8001c00:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <radio_RSSI_att+0x30>)
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c08:	c303      	stmia	r3!, {r0, r1}
 8001c0a:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001c0c:	2309      	movs	r3, #9
 8001c0e:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001c10:	f107 020b 	add.w	r2, r7, #11
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe fc9c 	bl	8000558 <SPI_write>
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	08013384 	.word	0x08013384

08001c2c <radio_Rx_filter_1>:

void radio_Rx_filter_1(HAL_StatusTypeDef* status) {
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b089      	sub	sp, #36	@ 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12};
 8001c34:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <radio_Rx_filter_1+0x30>)
 8001c36:	f107 0410 	add.w	r4, r7, #16
 8001c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001c40:	2310      	movs	r3, #16
 8001c42:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001c44:	f107 020f 	add.w	r2, r7, #15
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe fc82 	bl	8000558 <SPI_write>
}
 8001c54:	bf00      	nop
 8001c56:	3724      	adds	r7, #36	@ 0x24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	08013390 	.word	0x08013390

08001c60 <radio_Rx_filter_2>:

void radio_Rx_filter_2(HAL_StatusTypeDef* status) {
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b089      	sub	sp, #36	@ 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12};
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <radio_Rx_filter_2+0x30>)
 8001c6a:	f107 0410 	add.w	r4, r7, #16
 8001c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001c74:	2310      	movs	r3, #16
 8001c76:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001c78:	f107 020f 	add.w	r2, r7, #15
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe fc68 	bl	8000558 <SPI_write>
}
 8001c88:	bf00      	nop
 8001c8a:	3724      	adds	r7, #36	@ 0x24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	080133a0 	.word	0x080133a0

08001c94 <radio_Rx_filter_3>:

void radio_Rx_filter_3(HAL_StatusTypeDef* status) {
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b089      	sub	sp, #36	@ 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12};
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <radio_Rx_filter_3+0x30>)
 8001c9e:	f107 0410 	add.w	r4, r7, #16
 8001ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001ca8:	2310      	movs	r3, #16
 8001caa:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001cac:	f107 020f 	add.w	r2, r7, #15
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fc4e 	bl	8000558 <SPI_write>
}
 8001cbc:	bf00      	nop
 8001cbe:	3724      	adds	r7, #36	@ 0x24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}
 8001cc4:	080133b0 	.word	0x080133b0

08001cc8 <radio_PA_1>:

void radio_PA_1(HAL_StatusTypeDef* status) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PA_MODE_4};
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <radio_PA_1+0x34>)
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cda:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8001cde:	2308      	movs	r3, #8
 8001ce0:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001ce2:	f107 020f 	add.w	r2, r7, #15
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7fe fc33 	bl	8000558 <SPI_write>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	080133c0 	.word	0x080133c0

08001d00 <radio_PA_2>:

void radio_PA_2(HAL_StatusTypeDef* status) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNTH_PFDCP_CPFF_7};
 8001d08:	4a0b      	ldr	r2, [pc, #44]	@ (8001d38 <radio_PA_2+0x38>)
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d10:	c303      	stmia	r3!, {r0, r1}
 8001d12:	801a      	strh	r2, [r3, #0]
 8001d14:	3302      	adds	r3, #2
 8001d16:	0c12      	lsrs	r2, r2, #16
 8001d18:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001d1a:	230b      	movs	r3, #11
 8001d1c:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001d1e:	f107 020b 	add.w	r2, r7, #11
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7fe fc15 	bl	8000558 <SPI_write>
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	080133c8 	.word	0x080133c8

08001d3c <radio_masks>:

void radio_masks(HAL_StatusTypeDef* status) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MATCH_VALUE_1_12};
 8001d44:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <radio_masks+0x34>)
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 8001d54:	2310      	movs	r3, #16
 8001d56:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001d58:	f107 020f 	add.w	r2, r7, #15
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4619      	mov	r1, r3
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fbf8 	bl	8000558 <SPI_write>
}
 8001d68:	bf00      	nop
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	000c3011 	.word	0x000c3011

08001d74 <radio_PLL>:

void radio_PLL(HAL_StatusTypeDef* status) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FREQ_CONTROL_INTE_8};
 8001d7c:	4a09      	ldr	r2, [pc, #36]	@ (8001da4 <radio_PLL+0x30>)
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t size = sizeof(data);
 8001d88:	230c      	movs	r3, #12
 8001d8a:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001d8c:	f107 020b 	add.w	r2, r7, #11
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	4619      	mov	r1, r3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7fe fbde 	bl	8000558 <SPI_write>
}
 8001d9c:	bf00      	nop
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	080133d4 	.word	0x080133d4

08001da8 <radio_mode_Rx>:

// Modes
void radio_mode_Rx(HAL_StatusTypeDef* status) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	// Enable Rx and then enter ready mode
	uint8_t data[] = {0x32, 0, 0, 0, 60, 0, 0, 8, 8};
 8001db0:	4a09      	ldr	r2, [pc, #36]	@ (8001dd8 <radio_mode_Rx+0x30>)
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001db8:	c303      	stmia	r3!, {r0, r1}
 8001dba:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001dbc:	2309      	movs	r3, #9
 8001dbe:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001dc0:	f107 020b 	add.w	r2, r7, #11
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe fbc4 	bl	8000558 <SPI_write>
}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	080133e0 	.word	0x080133e0

08001ddc <radio_write_FIFO>:

void radio_write_FIFO(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 8001ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001de0:	b089      	sub	sp, #36	@ 0x24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	466b      	mov	r3, sp
 8001dec:	461e      	mov	r6, r3
	(*size)++;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	701a      	strb	r2, [r3, #0]
	uint8_t command[*size];
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7819      	ldrb	r1, [r3, #0]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	3b01      	subs	r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	b2cb      	uxtb	r3, r1
 8001e06:	2200      	movs	r2, #0
 8001e08:	4698      	mov	r8, r3
 8001e0a:	4691      	mov	r9, r2
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e20:	b2cb      	uxtb	r3, r1
 8001e22:	2200      	movs	r2, #0
 8001e24:	461c      	mov	r4, r3
 8001e26:	4615      	mov	r5, r2
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	00eb      	lsls	r3, r5, #3
 8001e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e36:	00e2      	lsls	r2, r4, #3
 8001e38:	460b      	mov	r3, r1
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	08db      	lsrs	r3, r3, #3
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	ebad 0d03 	sub.w	sp, sp, r3
 8001e44:	466b      	mov	r3, sp
 8001e46:	3300      	adds	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
	command[0] = 0x66;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2266      	movs	r2, #102	@ 0x66
 8001e4e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i < *size; i++) {
 8001e50:	2301      	movs	r3, #1
 8001e52:	77fb      	strb	r3, [r7, #31]
 8001e54:	e009      	b.n	8001e6a <radio_write_FIFO+0x8e>
		command[i] = data[i];
 8001e56:	7ffb      	ldrb	r3, [r7, #31]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	441a      	add	r2, r3
 8001e5c:	7ffb      	ldrb	r3, [r7, #31]
 8001e5e:	7811      	ldrb	r1, [r2, #0]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < *size; i++) {
 8001e64:	7ffb      	ldrb	r3, [r7, #31]
 8001e66:	3301      	adds	r3, #1
 8001e68:	77fb      	strb	r3, [r7, #31]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	7ffa      	ldrb	r2, [r7, #31]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d3f0      	bcc.n	8001e56 <radio_write_FIFO+0x7a>
	}

	SPI_write(status, command, size);
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6979      	ldr	r1, [r7, #20]
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7fe fb6d 	bl	8000558 <SPI_write>
 8001e7e:	46b5      	mov	sp, r6
}
 8001e80:	bf00      	nop
 8001e82:	3724      	adds	r7, #36	@ 0x24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001e8c <radio_mode_Tx>:

void radio_mode_Tx(HAL_StatusTypeDef* status) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	// Enable Tx mode. After transmission switch to Rx
	uint8_t data[] = {0x31, 0, 0, 0, 60, 0, 0};
 8001e94:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec8 <radio_mode_Tx+0x3c>)
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e9e:	6018      	str	r0, [r3, #0]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	8019      	strh	r1, [r3, #0]
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	0c0a      	lsrs	r2, r1, #16
 8001ea8:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001eaa:	2307      	movs	r3, #7
 8001eac:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001eae:	f107 020f 	add.w	r2, r7, #15
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7fe fb4d 	bl	8000558 <SPI_write>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	080133ec 	.word	0x080133ec

08001ecc <radio_send_packet>:

void radio_send_packet(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
	// Fill FIFO
	radio_write_FIFO(status, data, size);
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff ff7d 	bl	8001ddc <radio_write_FIFO>
	// Begin transmission
	radio_mode_Tx(status);
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff ffd2 	bl	8001e8c <radio_mode_Tx>
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <radio_read_PH_status>:

uint8_t radio_read_PH_status(HAL_StatusTypeDef* status) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x21, 0xFF}; //Leave all interrupts pending or they will reset themselves
 8001ef8:	f64f 7321 	movw	r3, #65313	@ 0xff21
 8001efc:	81bb      	strh	r3, [r7, #12]
	data[0] = 0x21;
 8001efe:	2321      	movs	r3, #33	@ 0x21
 8001f00:	733b      	strb	r3, [r7, #12]
	uint8_t size = 2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	72fb      	strb	r3, [r7, #11]
	SPI_read(status, data, &size, &size);
 8001f06:	f107 030b 	add.w	r3, r7, #11
 8001f0a:	f107 020b 	add.w	r2, r7, #11
 8001f0e:	f107 010c 	add.w	r1, r7, #12
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fb44 	bl	80005a0 <SPI_read>

	uint8_t ph_status = data[0];
 8001f18:	7b3b      	ldrb	r3, [r7, #12]
 8001f1a:	73fb      	strb	r3, [r7, #15]
		// Incoming packet matched the filter


	}
	*/
	return ph_status;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <radio_request_repetition>:

void radio_request_repetition(HAL_StatusTypeDef* status) {
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	uint8_t size = 60;
 8001f2e:	233c      	movs	r3, #60	@ 0x3c
 8001f30:	73fb      	strb	r3, [r7, #15]
	uint8_t data[] = {0};
 8001f32:	2300      	movs	r3, #0
 8001f34:	733b      	strb	r3, [r7, #12]
	radio_send_packet(status, data, &size);
 8001f36:	f107 020f 	add.w	r2, r7, #15
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffc3 	bl	8001ecc <radio_send_packet>
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <radio_repetition_requested>:
void radio_repetition_requested (HAL_StatusTypeDef* status) {
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	radio_mode_Tx(status); // Reuse data in TX FIFO
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ff98 	bl	8001e8c <radio_mode_Tx>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <setup>:
#include <routines.h>

void setup(HAL_StatusTypeDef* status, fault_flag* error_index) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]

	/// Issue POWER_UP command - wake transceiver up
		radio_power_up(status);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fa8a 	bl	8001488 <radio_power_up>
		if (*status != 0) {
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <setup+0x20>
			*error_index = RADIO_PWUP;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	701a      	strb	r2, [r3, #0]
			return;
 8001f82:	e088      	b.n	8002096 <setup+0x132>
		}

	// USB-C
	PowerInit(status);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7fe fb89 	bl	800069c <PowerInit>

	/// Check for errors, if non are found -> increase supply current
	if (*status == 0) {
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d107      	bne.n	8001fa2 <setup+0x3e>
		PowerIncreaseCurrent(status);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fbeb 	bl	800076e <PowerIncreaseCurrent>
		*error_index = POWER_INIT;
		return;
	}

	/// Check for error
	if (*status != 0) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <setup+0x4e>
 8001fa0:	e003      	b.n	8001faa <setup+0x46>
		*error_index = POWER_INIT;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
		return;
 8001fa8:	e075      	b.n	8002096 <setup+0x132>
		*error_index = POWER_INC;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2202      	movs	r2, #2
 8001fae:	701a      	strb	r2, [r3, #0]
		return;
 8001fb0:	e071      	b.n	8002096 <setup+0x132>

	*/


	/// Issue radio setup
	radio_pins(status);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fb9a 	bl	80016ec <radio_pins>
	radio_TCXO(status);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fbb3 	bl	8001724 <radio_TCXO>
	radio_global(status);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fbc8 	bl	8001754 <radio_global>
	radio_interrupts(status);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fbe1 	bl	800178c <radio_interrupts>
	radio_fast_registers(status);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fbfa 	bl	80017c4 <radio_fast_registers>
	radio_Tx(status);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fc13 	bl	80017fc <radio_Tx>
	radio_sync(status);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fc2a 	bl	8001830 <radio_sync>
	radio_packet_CRC(status);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff fc41 	bl	8001864 <radio_packet_CRC>
	radio_Rx_thr(status);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fc58 	bl	8001898 <radio_Rx_thr>
	radio_Rx_CRC_1(status);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff fc6f 	bl	80018cc <radio_Rx_CRC_1>
	radio_Rx_CRC_2(status);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fc88 	bl	8001904 <radio_Rx_CRC_2>
	radio_Rx_CRC_3(status);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff fca1 	bl	800193c <radio_Rx_CRC_3>
	radio_Rx_CRC_seed(status);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fcba 	bl	8001974 <radio_Rx_CRC_seed>
	radio_mod(status);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fccf 	bl	80019a4 <radio_mod>
	radio_freq_dev(status);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fce6 	bl	80019d8 <radio_freq_dev>
	radio_Tx_ramp(status);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff fcff 	bl	8001a10 <radio_Tx_ramp>
	radio_NCO_offset(status);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fd16 	bl	8001a44 <radio_NCO_offset>
	radio_AFC(status);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fd2d 	bl	8001a78 <radio_AFC>
	radio_AGC_1(status);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fd4a 	bl	8001ab8 <radio_AGC_1>
	radio_AGC_2(status);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fd63 	bl	8001af0 <radio_AGC_2>
	radio_RAW(status);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fd7a 	bl	8001b24 <radio_RAW>
	radio_search_period(status);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff fd91 	bl	8001b58 <radio_search_period>
	radio_GFSK_thr(status);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fdaa 	bl	8001b90 <radio_GFSK_thr>
	radio_RSSI_thr(status);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fdc3 	bl	8001bc8 <radio_RSSI_thr>
	radio_RSSI_att(status);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fdd8 	bl	8001bf8 <radio_RSSI_att>
	radio_Rx_filter_1(status);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fdef 	bl	8001c2c <radio_Rx_filter_1>
	radio_Rx_filter_2(status);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fe06 	bl	8001c60 <radio_Rx_filter_2>
	radio_Rx_filter_3(status);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff fe1d 	bl	8001c94 <radio_Rx_filter_3>
	radio_PA_1(status);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fe34 	bl	8001cc8 <radio_PA_1>
	radio_PA_2(status);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff fe4d 	bl	8001d00 <radio_PA_2>
	radio_masks(status);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fe68 	bl	8001d3c <radio_masks>
	radio_PLL(status);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff fe81 	bl	8001d74 <radio_PLL>

	// Check for errors
	if (*status != 0) {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <setup+0x11e>
		*error_index = RADIO_SETUP;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2205      	movs	r2, #5
 800207e:	701a      	strb	r2, [r3, #0]
		return;
 8002080:	e009      	b.n	8002096 <setup+0x132>
	}

	// Init. radio into receive mode
	radio_mode_Rx(status);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fe90 	bl	8001da8 <radio_mode_Rx>
	if (*status != 0) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <setup+0x132>
		*error_index = RADIO_SET_RX;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2206      	movs	r2, #6
 8002094:	701a      	strb	r2, [r3, #0]
	}

}
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <cmd_main_win>:

void cmd_main_win() {
 800209c:	b580      	push	{r7, lr}
 800209e:	b0ca      	sub	sp, #296	@ 0x128
 80020a0:	af00      	add	r7, sp, #0
	uint8_t TxBuffer[] = "==================================================\r\n"
 80020a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80020a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020aa:	4a0c      	ldr	r2, [pc, #48]	@ (80020dc <cmd_main_win+0x40>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	4611      	mov	r1, r2
 80020b0:	f240 1325 	movw	r3, #293	@ 0x125
 80020b4:	461a      	mov	r2, r3
 80020b6:	f011 f8c1 	bl	801323c <memcpy>
						 "1) Ping satellite \r\n"
						 "2) Get satellite's telemetry \r\n"
						 "3) Get image \r\n"
						 "4) Clear terminal \r\n"
						 "==================================================\r\n";
	uint16_t TxBufferLen = sizeof(TxBuffer);
 80020ba:	f240 1325 	movw	r3, #293	@ 0x125
 80020be:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	CDC_Transmit_HS(TxBuffer, TxBufferLen);
 80020c2:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80020c6:	463b      	mov	r3, r7
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f010 fbda 	bl	8012884 <CDC_Transmit_HS>
}
 80020d0:	bf00      	nop
 80020d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	080133f4 	.word	0x080133f4

080020e0 <cmd_img_options>:

void cmd_img_options() {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0e2      	sub	sp, #392	@ 0x188
 80020e4:	af00      	add	r7, sp, #0
	uint8_t TxBuffer[] = "==================================================\r\n"
 80020e6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80020ea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <cmd_img_options+0x40>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	4611      	mov	r1, r2
 80020f4:	f240 1383 	movw	r3, #387	@ 0x183
 80020f8:	461a      	mov	r2, r3
 80020fa:	f011 f89f 	bl	801323c <memcpy>
						 "--------------------------------------------------\r\n"
						 "Y - Colour mode: \r\n"
						 "1) Black & White \r\n"
						 "2) Colourful \r\n"
						 "==================================================\r\n";
	uint16_t TxBufferLen = sizeof(TxBuffer);
 80020fe:	f240 1383 	movw	r3, #387	@ 0x183
 8002102:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
	CDC_Transmit_HS(TxBuffer, TxBufferLen);
 8002106:	f8b7 2186 	ldrh.w	r2, [r7, #390]	@ 0x186
 800210a:	463b      	mov	r3, r7
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f010 fbb8 	bl	8012884 <CDC_Transmit_HS>
}
 8002114:	bf00      	nop
 8002116:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	0801351c 	.word	0x0801351c

08002124 <radio_ping>:

void radio_ping(HAL_StatusTypeDef* status) {
 8002124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002128:	b087      	sub	sp, #28
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	466b      	mov	r3, sp
 8002130:	461e      	mov	r6, r3
	// Fill 60byte packet with dummy data (all ones)
	uint8_t size = 60;
 8002132:	233c      	movs	r3, #60	@ 0x3c
 8002134:	72fb      	strb	r3, [r7, #11]
	uint8_t data[size];
 8002136:	7af9      	ldrb	r1, [r7, #11]
 8002138:	460b      	mov	r3, r1
 800213a:	3b01      	subs	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	b2cb      	uxtb	r3, r1
 8002140:	2200      	movs	r2, #0
 8002142:	4698      	mov	r8, r3
 8002144:	4691      	mov	r9, r2
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800215a:	b2cb      	uxtb	r3, r1
 800215c:	2200      	movs	r2, #0
 800215e:	461c      	mov	r4, r3
 8002160:	4615      	mov	r5, r2
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	00eb      	lsls	r3, r5, #3
 800216c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002170:	00e2      	lsls	r2, r4, #3
 8002172:	460b      	mov	r3, r1
 8002174:	3307      	adds	r3, #7
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	ebad 0d03 	sub.w	sp, sp, r3
 800217e:	466b      	mov	r3, sp
 8002180:	3300      	adds	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < size; i++) {
 8002184:	2300      	movs	r3, #0
 8002186:	75fb      	strb	r3, [r7, #23]
 8002188:	e006      	b.n	8002198 <radio_ping+0x74>
		data[i] = 0xFF;
 800218a:	7dfb      	ldrb	r3, [r7, #23]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	21ff      	movs	r1, #255	@ 0xff
 8002190:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < size; i++) {
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	3301      	adds	r3, #1
 8002196:	75fb      	strb	r3, [r7, #23]
 8002198:	7afb      	ldrb	r3, [r7, #11]
 800219a:	7dfa      	ldrb	r2, [r7, #23]
 800219c:	429a      	cmp	r2, r3
 800219e:	d3f4      	bcc.n	800218a <radio_ping+0x66>
	}
	radio_send_packet(status, data, &size);
 80021a0:	f107 030b 	add.w	r3, r7, #11
 80021a4:	461a      	mov	r2, r3
 80021a6:	68f9      	ldr	r1, [r7, #12]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fe8f 	bl	8001ecc <radio_send_packet>
 80021ae:	46b5      	mov	sp, r6
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080021ba <capture_img>:

void capture_img(HAL_StatusTypeDef* status, fault_flag* error_index, uint8_t* img_mode) {
 80021ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021be:	b089      	sub	sp, #36	@ 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
	/*#define IMG_SIZE 614400 // VGA = 640 * 480 * 2
//#define IMG_SIZE 202752 // CIF = 352 * 288 * 2
//#define IMG_SIZE 153600 // QVGA = 320 * 240 * 2
//#define IMG_SIZE 50688 // QCIF = 176 * 144 * 2*/

	uint8_t res = (*img_mode & 0b11110000);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f023 030f 	bic.w	r3, r3, #15
 80021d0:	77fb      	strb	r3, [r7, #31]
	uint32_t size;
	switch (res) {
 80021d2:	7ffb      	ldrb	r3, [r7, #31]
 80021d4:	2b30      	cmp	r3, #48	@ 0x30
 80021d6:	d016      	beq.n	8002206 <capture_img+0x4c>
 80021d8:	2b30      	cmp	r3, #48	@ 0x30
 80021da:	dc18      	bgt.n	800220e <capture_img+0x54>
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d00e      	beq.n	80021fe <capture_img+0x44>
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	dc14      	bgt.n	800220e <capture_img+0x54>
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <capture_img+0x34>
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	d004      	beq.n	80021f6 <capture_img+0x3c>
 80021ec:	e00f      	b.n	800220e <capture_img+0x54>
		case (0x00): {
			size = 614400;
 80021ee:	f44f 2316 	mov.w	r3, #614400	@ 0x96000
 80021f2:	613b      	str	r3, [r7, #16]
			break;
 80021f4:	e012      	b.n	800221c <capture_img+0x62>
		}
		case (0x10): {
			size = 202752;
 80021f6:	f44f 3346 	mov.w	r3, #202752	@ 0x31800
 80021fa:	613b      	str	r3, [r7, #16]
			break;
 80021fc:	e00e      	b.n	800221c <capture_img+0x62>
		}
		case (0x20): {
			size = 153600;
 80021fe:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8002202:	613b      	str	r3, [r7, #16]
			break;
 8002204:	e00a      	b.n	800221c <capture_img+0x62>
		}
		case (0x30): {
			size = 50688;
 8002206:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800220a:	613b      	str	r3, [r7, #16]
			break;
 800220c:	e006      	b.n	800221c <capture_img+0x62>
		}
		default: {
			*status = HAL_ERROR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
			*error_index = IMG_DEF;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2208      	movs	r2, #8
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e03f      	b.n	800229c <capture_img+0xe2>
			return;
		}
	}

	uint8_t buff[size];
 800221c:	6939      	ldr	r1, [r7, #16]
 800221e:	466b      	mov	r3, sp
 8002220:	461e      	mov	r6, r3
 8002222:	460b      	mov	r3, r1
 8002224:	3b01      	subs	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	2300      	movs	r3, #0
 800222a:	4688      	mov	r8, r1
 800222c:	4699      	mov	r9, r3
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800223a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800223e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002242:	2300      	movs	r3, #0
 8002244:	460c      	mov	r4, r1
 8002246:	461d      	mov	r5, r3
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	00eb      	lsls	r3, r5, #3
 8002252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002256:	00e2      	lsls	r2, r4, #3
 8002258:	1dcb      	adds	r3, r1, #7
 800225a:	08db      	lsrs	r3, r3, #3
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	ebad 0d03 	sub.w	sp, sp, r3
 8002262:	466b      	mov	r3, sp
 8002264:	3300      	adds	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
	camera_init(status, img_mode);
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7fe ff70 	bl	8001150 <camera_init>
	if (*status != 0) {
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <capture_img+0xc4>
		*error_index = CAM_INIT;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2209      	movs	r2, #9
 800227c:	701a      	strb	r2, [r3, #0]
	}
	camera_capture_photo(status, buff, &size);
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	461a      	mov	r2, r3
 8002284:	6979      	ldr	r1, [r7, #20]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7ff f8dc 	bl	8001444 <camera_capture_photo>

	if (*status != 0) {
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <capture_img+0xe0>
		*error_index = CAM_CAPTURE;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	220a      	movs	r2, #10
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	46b5      	mov	sp, r6
	}
}
 800229c:	3724      	adds	r7, #36	@ 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080022a4 <nirq_handler>:

void nirq_handler(HAL_StatusTypeDef* status, fault_flag* error_index, uint8_t* ping) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b096      	sub	sp, #88	@ 0x58
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]

	// Packet handling
	uint8_t pending_interrupts = radio_read_PH_status(status);
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7ff fe1d 	bl	8001ef0 <radio_read_PH_status>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54


	// Receiving
	if ((pending_interrupts * (1 << 7)) == (1 << 7)) {
 80022bc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d164      	bne.n	800238e <nirq_handler+0xea>
		// An incoming packet matched filter, check CRC
		if ((pending_interrupts * ((1 << 3)|(1 << 2))) == 0) {
 80022c4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d15d      	bne.n	8002388 <nirq_handler+0xe4>
			// Read packet from FIFO
			uint8_t packet[60];
			uint8_t ones = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			uint8_t zeros = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
			uint8_t rs= 60;
 80022d8:	233c      	movs	r3, #60	@ 0x3c
 80022da:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			uint8_t ts = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

			packet[0] = 0x77;
 80022e4:	2377      	movs	r3, #119	@ 0x77
 80022e6:	753b      	strb	r3, [r7, #20]
			SPI_read(status, packet, &ts, &rs);
 80022e8:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 80022ec:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80022f0:	f107 0114 	add.w	r1, r7, #20
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7fe f953 	bl	80005a0 <SPI_read>
			if (*status != 0) {
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <nirq_handler+0x64>
				*status = HAL_ERROR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]

			}
			for (uint8_t i = 0; i < 60; i++) {
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 800230e:	e01f      	b.n	8002350 <nirq_handler+0xac>
				if (packet[i] == 0xFF) {
 8002310:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002314:	3358      	adds	r3, #88	@ 0x58
 8002316:	443b      	add	r3, r7
 8002318:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800231c:	2bff      	cmp	r3, #255	@ 0xff
 800231e:	d105      	bne.n	800232c <nirq_handler+0x88>
					ones++;
 8002320:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002324:	3301      	adds	r3, #1
 8002326:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800232a:	e00c      	b.n	8002346 <nirq_handler+0xa2>
				}
				else if (packet[i] == 0) {
 800232c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002330:	3358      	adds	r3, #88	@ 0x58
 8002332:	443b      	add	r3, r7
 8002334:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <nirq_handler+0xa2>
					zeros++;
 800233c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002340:	3301      	adds	r3, #1
 8002342:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
			for (uint8_t i = 0; i < 60; i++) {
 8002346:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800234a:	3301      	adds	r3, #1
 800234c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8002350:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002354:	2b3b      	cmp	r3, #59	@ 0x3b
 8002356:	d9db      	bls.n	8002310 <nirq_handler+0x6c>
				}
			}

			// Data handling logic
			/// PING
			if (ones == 60) {
 8002358:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800235c:	2b3c      	cmp	r3, #60	@ 0x3c
 800235e:	d10b      	bne.n	8002378 <nirq_handler+0xd4>
				if (*ping == 1) { // Response to ping received
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d103      	bne.n	8002370 <nirq_handler+0xcc>
					*ping = 0;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e01d      	b.n	80023ac <nirq_handler+0x108>

				}
				else {
					radio_ping(status); // Send ping response
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f7ff fed7 	bl	8002124 <radio_ping>
 8002376:	e019      	b.n	80023ac <nirq_handler+0x108>
				}
			}

			// Data retransmission request
			else if (zeros == 60) {
 8002378:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800237c:	2b3c      	cmp	r3, #60	@ 0x3c
 800237e:	d115      	bne.n	80023ac <nirq_handler+0x108>
				radio_repetition_requested(status);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fde4 	bl	8001f4e <radio_repetition_requested>
 8002386:	e011      	b.n	80023ac <nirq_handler+0x108>
			return;
		}

		// Request packet retransmission
		else {
			radio_request_repetition(status);
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff fdcc 	bl	8001f26 <radio_request_repetition>
		}

	}

	if ((pending_interrupts * (1 << 6)) == (1 << 6)) {
 800238e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002392:	2b01      	cmp	r3, #1
 8002394:	d102      	bne.n	800239c <nirq_handler+0xf8>
		// Unrecognized packet, rearm RX
		radio_mode_Rx(status);
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7ff fd06 	bl	8001da8 <radio_mode_Rx>

	}

	if ((pending_interrupts * 1 << 5) != (1 << 5)) {
 800239c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80023a0:	015b      	lsls	r3, r3, #5
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d002      	beq.n	80023ac <nirq_handler+0x108>
		// Buffer transmitted - switch to RX and listen
		radio_mode_Rx(status);
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f7ff fcfe 	bl	8001da8 <radio_mode_Rx>
	}

}
 80023ac:	3758      	adds	r7, #88	@ 0x58
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_MspInit+0x30>)
 80023bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80023c0:	4a08      	ldr	r2, [pc, #32]	@ (80023e4 <HAL_MspInit+0x30>)
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_MspInit+0x30>)
 80023cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	58024400 	.word	0x58024400

080023e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0be      	sub	sp, #248	@ 0xf8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002400:	f107 0320 	add.w	r3, r7, #32
 8002404:	22c0      	movs	r2, #192	@ 0xc0
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f010 feeb 	bl	80131e4 <memset>
  if(hadc->Instance==ADC1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6f      	ldr	r2, [pc, #444]	@ (80025d0 <HAL_ADC_MspInit+0x1e8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	f040 8087 	bne.w	8002528 <HAL_ADC_MspInit+0x140>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800241a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002426:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800242a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242e:	f107 0320 	add.w	r3, r7, #32
 8002432:	4618      	mov	r0, r3
 8002434:	f009 f8be 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 800243e:	f7fe fe81 	bl	8001144 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002442:	4b64      	ldr	r3, [pc, #400]	@ (80025d4 <HAL_ADC_MspInit+0x1ec>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	4a62      	ldr	r2, [pc, #392]	@ (80025d4 <HAL_ADC_MspInit+0x1ec>)
 800244a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800244c:	4b61      	ldr	r3, [pc, #388]	@ (80025d4 <HAL_ADC_MspInit+0x1ec>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d10e      	bne.n	8002472 <HAL_ADC_MspInit+0x8a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002454:	4b60      	ldr	r3, [pc, #384]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 8002456:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800245a:	4a5f      	ldr	r2, [pc, #380]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 800245c:	f043 0320 	orr.w	r3, r3, #32
 8002460:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8002464:	4b5c      	ldr	r3, [pc, #368]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 8002466:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	4b59      	ldr	r3, [pc, #356]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 8002474:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002478:	4a57      	ldr	r2, [pc, #348]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002482:	4b55      	ldr	r3, [pc, #340]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 8002484:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002490:	4b51      	ldr	r3, [pc, #324]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 8002492:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002496:	4a50      	ldr	r2, [pc, #320]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024a0:	4b4d      	ldr	r3, [pc, #308]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 80024a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	4b4a      	ldr	r3, [pc, #296]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 80024b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024b4:	4a48      	ldr	r2, [pc, #288]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024be:	4b46      	ldr	r3, [pc, #280]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 80024c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INN16
    PC4     ------> ADC1_INP4
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = NTC_2__Pin|NTC_2_A1_Pin;
 80024cc:	2303      	movs	r3, #3
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d2:	2303      	movs	r3, #3
 80024d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80024e2:	4619      	mov	r1, r3
 80024e4:	483d      	ldr	r0, [pc, #244]	@ (80025dc <HAL_ADC_MspInit+0x1f4>)
 80024e6:	f005 fc1d 	bl	8007d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CC1_Pin;
 80024ea:	2310      	movs	r3, #16
 80024ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f0:	2303      	movs	r3, #3
 80024f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC1_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002500:	4619      	mov	r1, r3
 8002502:	4837      	ldr	r0, [pc, #220]	@ (80025e0 <HAL_ADC_MspInit+0x1f8>)
 8002504:	f005 fc0e 	bl	8007d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VBUS_Pin;
 8002508:	2301      	movs	r3, #1
 800250a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250e:	2303      	movs	r3, #3
 8002510:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ADC_VBUS_GPIO_Port, &GPIO_InitStruct);
 800251a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800251e:	4619      	mov	r1, r3
 8002520:	4830      	ldr	r0, [pc, #192]	@ (80025e4 <HAL_ADC_MspInit+0x1fc>)
 8002522:	f005 fbff 	bl	8007d24 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002526:	e04e      	b.n	80025c6 <HAL_ADC_MspInit+0x1de>
  else if(hadc->Instance==ADC2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a2e      	ldr	r2, [pc, #184]	@ (80025e8 <HAL_ADC_MspInit+0x200>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d149      	bne.n	80025c6 <HAL_ADC_MspInit+0x1de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002532:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800253e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002542:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002546:	f107 0320 	add.w	r3, r7, #32
 800254a:	4618      	mov	r0, r3
 800254c:	f009 f832 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_ADC_MspInit+0x172>
      Error_Handler();
 8002556:	f7fe fdf5 	bl	8001144 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800255a:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <HAL_ADC_MspInit+0x1ec>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	4a1c      	ldr	r2, [pc, #112]	@ (80025d4 <HAL_ADC_MspInit+0x1ec>)
 8002562:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002564:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <HAL_ADC_MspInit+0x1ec>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d10e      	bne.n	800258a <HAL_ADC_MspInit+0x1a2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800256c:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 800256e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002572:	4a19      	ldr	r2, [pc, #100]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 8002574:	f043 0320 	orr.w	r3, r3, #32
 8002578:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800257c:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 800257e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 800258c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002590:	4a11      	ldr	r2, [pc, #68]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <HAL_ADC_MspInit+0x1f0>)
 800259c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CC2_Pin;
 80025a8:	2320      	movs	r3, #32
 80025aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ae:	2303      	movs	r3, #3
 80025b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC2_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025be:	4619      	mov	r1, r3
 80025c0:	4807      	ldr	r0, [pc, #28]	@ (80025e0 <HAL_ADC_MspInit+0x1f8>)
 80025c2:	f005 fbaf 	bl	8007d24 <HAL_GPIO_Init>
}
 80025c6:	bf00      	nop
 80025c8:	37f8      	adds	r7, #248	@ 0xf8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40022000 	.word	0x40022000
 80025d4:	240004c8 	.word	0x240004c8
 80025d8:	58024400 	.word	0x58024400
 80025dc:	58020000 	.word	0x58020000
 80025e0:	58020800 	.word	0x58020800
 80025e4:	58020400 	.word	0x58020400
 80025e8:	40022100 	.word	0x40022100

080025ec <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	@ 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6a      	ldr	r2, [pc, #424]	@ (80027b4 <HAL_DCMI_MspInit+0x1c8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	f040 80ce 	bne.w	80027ac <HAL_DCMI_MspInit+0x1c0>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002610:	4b69      	ldr	r3, [pc, #420]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 8002612:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002616:	4a68      	ldr	r2, [pc, #416]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
 8002620:	4b65      	ldr	r3, [pc, #404]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 8002622:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	4b62      	ldr	r3, [pc, #392]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 8002630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002634:	4a60      	ldr	r2, [pc, #384]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800263e:	4b5e      	ldr	r3, [pc, #376]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 8002640:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800264c:	4b5a      	ldr	r3, [pc, #360]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 800264e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002652:	4a59      	ldr	r2, [pc, #356]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800265c:	4b56      	ldr	r3, [pc, #344]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 800265e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800266a:	4b53      	ldr	r3, [pc, #332]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 800266c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002670:	4a51      	ldr	r2, [pc, #324]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 8002672:	f043 0308 	orr.w	r3, r3, #8
 8002676:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800267a:	4b4f      	ldr	r3, [pc, #316]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 800267c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	4b4b      	ldr	r3, [pc, #300]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 800268a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800268e:	4a4a      	ldr	r2, [pc, #296]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002698:	4b47      	ldr	r3, [pc, #284]	@ (80027b8 <HAL_DCMI_MspInit+0x1cc>)
 800269a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80026a6:	2350      	movs	r3, #80	@ 0x50
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026b6:	230d      	movs	r3, #13
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 031c 	add.w	r3, r7, #28
 80026be:	4619      	mov	r1, r3
 80026c0:	483e      	ldr	r0, [pc, #248]	@ (80027bc <HAL_DCMI_MspInit+0x1d0>)
 80026c2:	f005 fb2f 	bl	8007d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80026c6:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 80026ca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d4:	2303      	movs	r3, #3
 80026d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026d8:	230d      	movs	r3, #13
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026dc:	f107 031c 	add.w	r3, r7, #28
 80026e0:	4619      	mov	r1, r3
 80026e2:	4837      	ldr	r0, [pc, #220]	@ (80027c0 <HAL_DCMI_MspInit+0x1d4>)
 80026e4:	f005 fb1e 	bl	8007d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026e8:	2308      	movs	r3, #8
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026f8:	230d      	movs	r3, #13
 80026fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	4619      	mov	r1, r3
 8002702:	4830      	ldr	r0, [pc, #192]	@ (80027c4 <HAL_DCMI_MspInit+0x1d8>)
 8002704:	f005 fb0e 	bl	8007d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002708:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800271a:	230d      	movs	r3, #13
 800271c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	4828      	ldr	r0, [pc, #160]	@ (80027c8 <HAL_DCMI_MspInit+0x1dc>)
 8002726:	f005 fafd 	bl	8007d24 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 800272a:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 800272c:	4a28      	ldr	r2, [pc, #160]	@ (80027d0 <HAL_DCMI_MspInit+0x1e4>)
 800272e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8002730:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 8002732:	224b      	movs	r2, #75	@ 0x4b
 8002734:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002736:	4b25      	ldr	r3, [pc, #148]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800273c:	4b23      	ldr	r3, [pc, #140]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002742:	4b22      	ldr	r3, [pc, #136]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 8002744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002748:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 800274c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002750:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002752:	4b1e      	ldr	r3, [pc, #120]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 8002754:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002758:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800275a:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 800275c:	2200      	movs	r2, #0
 800275e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002760:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 8002762:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002766:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002768:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 800276a:	2204      	movs	r2, #4
 800276c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800276e:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 8002770:	2203      	movs	r2, #3
 8002772:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8002774:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 8002776:	2200      	movs	r2, #0
 8002778:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002780:	4812      	ldr	r0, [pc, #72]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 8002782:	f001 ff41 	bl	8004608 <HAL_DMA_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_DCMI_MspInit+0x1a4>
    {
      Error_Handler();
 800278c:	f7fe fcda 	bl	8001144 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a0e      	ldr	r2, [pc, #56]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 8002794:	649a      	str	r2, [r3, #72]	@ 0x48
 8002796:	4a0d      	ldr	r2, [pc, #52]	@ (80027cc <HAL_DCMI_MspInit+0x1e0>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	2100      	movs	r1, #0
 80027a0:	204e      	movs	r0, #78	@ 0x4e
 80027a2:	f001 fb8e 	bl	8003ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80027a6:	204e      	movs	r0, #78	@ 0x4e
 80027a8:	f001 fba5 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80027ac:	bf00      	nop
 80027ae:	3730      	adds	r7, #48	@ 0x30
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	48020000 	.word	0x48020000
 80027b8:	58024400 	.word	0x58024400
 80027bc:	58020000 	.word	0x58020000
 80027c0:	58020800 	.word	0x58020800
 80027c4:	58020c00 	.word	0x58020c00
 80027c8:	58020400 	.word	0x58020400
 80027cc:	24000280 	.word	0x24000280
 80027d0:	40020010 	.word	0x40020010

080027d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0ba      	sub	sp, #232	@ 0xe8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	22c0      	movs	r2, #192	@ 0xc0
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f010 fcf5 	bl	80131e4 <memset>
  if(hi2c->Instance==I2C2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a27      	ldr	r2, [pc, #156]	@ (800289c <HAL_I2C_MspInit+0xc8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d146      	bne.n	8002892 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002804:	f04f 0208 	mov.w	r2, #8
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4618      	mov	r0, r3
 800281c:	f008 feca 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002826:	f7fe fc8d 	bl	8001144 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282a:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <HAL_I2C_MspInit+0xcc>)
 800282c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002830:	4a1b      	ldr	r2, [pc, #108]	@ (80028a0 <HAL_I2C_MspInit+0xcc>)
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800283a:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_I2C_MspInit+0xcc>)
 800283c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002848:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800284c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002850:	2312      	movs	r3, #18
 8002852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002856:	2301      	movs	r3, #1
 8002858:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002862:	2304      	movs	r3, #4
 8002864:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002868:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800286c:	4619      	mov	r1, r3
 800286e:	480d      	ldr	r0, [pc, #52]	@ (80028a4 <HAL_I2C_MspInit+0xd0>)
 8002870:	f005 fa58 	bl	8007d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002874:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <HAL_I2C_MspInit+0xcc>)
 8002876:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800287a:	4a09      	ldr	r2, [pc, #36]	@ (80028a0 <HAL_I2C_MspInit+0xcc>)
 800287c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002880:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002884:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_I2C_MspInit+0xcc>)
 8002886:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800288a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002892:	bf00      	nop
 8002894:	37e8      	adds	r7, #232	@ 0xe8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40005800 	.word	0x40005800
 80028a0:	58024400 	.word	0x58024400
 80028a4:	58020400 	.word	0x58020400

080028a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0ba      	sub	sp, #232	@ 0xe8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	22c0      	movs	r2, #192	@ 0xc0
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f010 fc8b 	bl	80131e4 <memset>
  if(hspi->Instance==SPI4)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002a80 <HAL_SPI_MspInit+0x1d8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	f040 80cf 	bne.w	8002a78 <HAL_SPI_MspInit+0x1d0>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80028da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80028e6:	2301      	movs	r3, #1
 80028e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80028ea:	2310      	movs	r3, #16
 80028ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80028ee:	2302      	movs	r3, #2
 80028f0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 16;
 80028f2:	2310      	movs	r3, #16
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80028f6:	2302      	movs	r3, #2
 80028f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80028fa:	23c0      	movs	r3, #192	@ 0xc0
 80028fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80028fe:	2300      	movs	r3, #0
 8002900:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8002906:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800290a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	4618      	mov	r0, r3
 8002912:	f008 fe4f 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 800291c:	f7fe fc12 	bl	8001144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002920:	4b58      	ldr	r3, [pc, #352]	@ (8002a84 <HAL_SPI_MspInit+0x1dc>)
 8002922:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002926:	4a57      	ldr	r2, [pc, #348]	@ (8002a84 <HAL_SPI_MspInit+0x1dc>)
 8002928:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800292c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002930:	4b54      	ldr	r3, [pc, #336]	@ (8002a84 <HAL_SPI_MspInit+0x1dc>)
 8002932:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800293e:	4b51      	ldr	r3, [pc, #324]	@ (8002a84 <HAL_SPI_MspInit+0x1dc>)
 8002940:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002944:	4a4f      	ldr	r2, [pc, #316]	@ (8002a84 <HAL_SPI_MspInit+0x1dc>)
 8002946:	f043 0310 	orr.w	r3, r3, #16
 800294a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800294e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a84 <HAL_SPI_MspInit+0x1dc>)
 8002950:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_nSEL_Pin;
 800295c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002960:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296a:	2301      	movs	r3, #1
 800296c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002970:	2303      	movs	r3, #3
 8002972:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002976:	2305      	movs	r3, #5
 8002978:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(SPI4_nSEL_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002980:	4619      	mov	r1, r3
 8002982:	4841      	ldr	r0, [pc, #260]	@ (8002a88 <HAL_SPI_MspInit+0x1e0>)
 8002984:	f005 f9ce 	bl	8007d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002988:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800298c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80029a2:	2305      	movs	r3, #5
 80029a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4836      	ldr	r0, [pc, #216]	@ (8002a88 <HAL_SPI_MspInit+0x1e0>)
 80029b0:	f005 f9b8 	bl	8007d24 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream1;
 80029b4:	4b35      	ldr	r3, [pc, #212]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029b6:	4a36      	ldr	r2, [pc, #216]	@ (8002a90 <HAL_SPI_MspInit+0x1e8>)
 80029b8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80029ba:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029bc:	2254      	movs	r2, #84	@ 0x54
 80029be:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029c0:	4b32      	ldr	r3, [pc, #200]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029c2:	2240      	movs	r2, #64	@ 0x40
 80029c4:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c6:	4b31      	ldr	r3, [pc, #196]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029cc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029d2:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029da:	4b2c      	ldr	r3, [pc, #176]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80029e0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029e6:	4b29      	ldr	r3, [pc, #164]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ec:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80029f2:	4826      	ldr	r0, [pc, #152]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 80029f4:	f001 fe08 	bl	8004608 <HAL_DMA_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_SPI_MspInit+0x15a>
    {
      Error_Handler();
 80029fe:	f7fe fba1 	bl	8001144 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a21      	ldr	r2, [pc, #132]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 8002a06:	679a      	str	r2, [r3, #120]	@ 0x78
 8002a08:	4a20      	ldr	r2, [pc, #128]	@ (8002a8c <HAL_SPI_MspInit+0x1e4>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream2;
 8002a0e:	4b21      	ldr	r3, [pc, #132]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a10:	4a21      	ldr	r2, [pc, #132]	@ (8002a98 <HAL_SPI_MspInit+0x1f0>)
 8002a12:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002a14:	4b1f      	ldr	r3, [pc, #124]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a16:	2253      	movs	r2, #83	@ 0x53
 8002a18:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a20:	4b1c      	ldr	r3, [pc, #112]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a26:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a2c:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a34:	4b17      	ldr	r3, [pc, #92]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8002a3a:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a40:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a46:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002a4c:	4811      	ldr	r0, [pc, #68]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a4e:	f001 fddb 	bl	8004608 <HAL_DMA_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 8002a58:	f7fe fb74 	bl	8001144 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a60:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a62:	4a0c      	ldr	r2, [pc, #48]	@ (8002a94 <HAL_SPI_MspInit+0x1ec>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	2054      	movs	r0, #84	@ 0x54
 8002a6e:	f001 fa28 	bl	8003ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002a72:	2054      	movs	r0, #84	@ 0x54
 8002a74:	f001 fa3f 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8002a78:	bf00      	nop
 8002a7a:	37e8      	adds	r7, #232	@ 0xe8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40013400 	.word	0x40013400
 8002a84:	58024400 	.word	0x58024400
 8002a88:	58021000 	.word	0x58021000
 8002a8c:	240003d4 	.word	0x240003d4
 8002a90:	40020028 	.word	0x40020028
 8002a94:	2400044c 	.word	0x2400044c
 8002a98:	40020040 	.word	0x40020040

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <NMI_Handler+0x4>

08002aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <HardFault_Handler+0x4>

08002aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <MemManage_Handler+0x4>

08002ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <BusFault_Handler+0x4>

08002abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <UsageFault_Handler+0x4>

08002ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af2:	f000 f9a1 	bl	8002e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002b00:	4802      	ldr	r0, [pc, #8]	@ (8002b0c <DMA1_Stream0_IRQHandler+0x10>)
 8002b02:	f003 f8dd 	bl	8005cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	24000280 	.word	0x24000280

08002b10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002b14:	4802      	ldr	r0, [pc, #8]	@ (8002b20 <DMA1_Stream1_IRQHandler+0x10>)
 8002b16:	f003 f8d3 	bl	8005cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	240003d4 	.word	0x240003d4

08002b24 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002b28:	4802      	ldr	r0, [pc, #8]	@ (8002b34 <DMA1_Stream2_IRQHandler+0x10>)
 8002b2a:	f003 f8c9 	bl	8005cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	2400044c 	.word	0x2400044c

08002b38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nIRQ_Pin);
 8002b3c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002b40:	f005 fad1 	bl	80080e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002b4c:	4802      	ldr	r0, [pc, #8]	@ (8002b58 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8002b4e:	f006 fb75 	bl	800923c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	240019b0 	.word	0x240019b0

08002b5c <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002b60:	4802      	ldr	r0, [pc, #8]	@ (8002b6c <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8002b62:	f006 fb6b 	bl	800923c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	240019b0 	.word	0x240019b0

08002b70 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002b74:	4802      	ldr	r0, [pc, #8]	@ (8002b80 <OTG_HS_IRQHandler+0x10>)
 8002b76:	f006 fb61 	bl	800923c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	240019b0 	.word	0x240019b0

08002b84 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002b88:	4802      	ldr	r0, [pc, #8]	@ (8002b94 <DCMI_PSSI_IRQHandler+0x10>)
 8002b8a:	f001 fbe3 	bl	8004354 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	24000230 	.word	0x24000230

08002b98 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002b9c:	4802      	ldr	r0, [pc, #8]	@ (8002ba8 <SPI4_IRQHandler+0x10>)
 8002b9e:	f00b ff5f 	bl	800ea60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	2400034c 	.word	0x2400034c

08002bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8002cac <SystemInit+0x100>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb6:	4a3d      	ldr	r2, [pc, #244]	@ (8002cac <SystemInit+0x100>)
 8002bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb0 <SystemInit+0x104>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d807      	bhi.n	8002bdc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bcc:	4b38      	ldr	r3, [pc, #224]	@ (8002cb0 <SystemInit+0x104>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 030f 	bic.w	r3, r3, #15
 8002bd4:	4a36      	ldr	r2, [pc, #216]	@ (8002cb0 <SystemInit+0x104>)
 8002bd6:	f043 0303 	orr.w	r3, r3, #3
 8002bda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002bdc:	4b35      	ldr	r3, [pc, #212]	@ (8002cb4 <SystemInit+0x108>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a34      	ldr	r2, [pc, #208]	@ (8002cb4 <SystemInit+0x108>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002be8:	4b32      	ldr	r3, [pc, #200]	@ (8002cb4 <SystemInit+0x108>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002bee:	4b31      	ldr	r3, [pc, #196]	@ (8002cb4 <SystemInit+0x108>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4930      	ldr	r1, [pc, #192]	@ (8002cb4 <SystemInit+0x108>)
 8002bf4:	4b30      	ldr	r3, [pc, #192]	@ (8002cb8 <SystemInit+0x10c>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb0 <SystemInit+0x104>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c06:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb0 <SystemInit+0x104>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 030f 	bic.w	r3, r3, #15
 8002c0e:	4a28      	ldr	r2, [pc, #160]	@ (8002cb0 <SystemInit+0x104>)
 8002c10:	f043 0303 	orr.w	r3, r3, #3
 8002c14:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002c16:	4b27      	ldr	r3, [pc, #156]	@ (8002cb4 <SystemInit+0x108>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002c1c:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <SystemInit+0x108>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002c22:	4b24      	ldr	r3, [pc, #144]	@ (8002cb4 <SystemInit+0x108>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c28:	4b22      	ldr	r3, [pc, #136]	@ (8002cb4 <SystemInit+0x108>)
 8002c2a:	4a24      	ldr	r2, [pc, #144]	@ (8002cbc <SystemInit+0x110>)
 8002c2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c2e:	4b21      	ldr	r3, [pc, #132]	@ (8002cb4 <SystemInit+0x108>)
 8002c30:	4a23      	ldr	r2, [pc, #140]	@ (8002cc0 <SystemInit+0x114>)
 8002c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c34:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb4 <SystemInit+0x108>)
 8002c36:	4a23      	ldr	r2, [pc, #140]	@ (8002cc4 <SystemInit+0x118>)
 8002c38:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <SystemInit+0x108>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c40:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb4 <SystemInit+0x108>)
 8002c42:	4a20      	ldr	r2, [pc, #128]	@ (8002cc4 <SystemInit+0x118>)
 8002c44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c46:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <SystemInit+0x108>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c4c:	4b19      	ldr	r3, [pc, #100]	@ (8002cb4 <SystemInit+0x108>)
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <SystemInit+0x118>)
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c52:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <SystemInit+0x108>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c58:	4b16      	ldr	r3, [pc, #88]	@ (8002cb4 <SystemInit+0x108>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a15      	ldr	r2, [pc, #84]	@ (8002cb4 <SystemInit+0x108>)
 8002c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <SystemInit+0x108>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002c6a:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <SystemInit+0x108>)
 8002c6c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002c70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d113      	bne.n	8002ca0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002c78:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb4 <SystemInit+0x108>)
 8002c7a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb4 <SystemInit+0x108>)
 8002c80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c84:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c88:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc8 <SystemInit+0x11c>)
 8002c8a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <SystemInit+0x108>)
 8002c92:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002c96:	4a07      	ldr	r2, [pc, #28]	@ (8002cb4 <SystemInit+0x108>)
 8002c98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c9c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000ed00 	.word	0xe000ed00
 8002cb0:	52002000 	.word	0x52002000
 8002cb4:	58024400 	.word	0x58024400
 8002cb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002cbc:	02020200 	.word	0x02020200
 8002cc0:	01ff0000 	.word	0x01ff0000
 8002cc4:	01010280 	.word	0x01010280
 8002cc8:	52004000 	.word	0x52004000

08002ccc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <ExitRun0Mode+0x2c>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a08      	ldr	r2, [pc, #32]	@ (8002cf8 <ExitRun0Mode+0x2c>)
 8002cd6:	f043 0302 	orr.w	r3, r3, #2
 8002cda:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002cdc:	bf00      	nop
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <ExitRun0Mode+0x2c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f9      	beq.n	8002cde <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	58024800 	.word	0x58024800

08002cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002cfc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002d38 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002d00:	f7ff ffe4 	bl	8002ccc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d04:	f7ff ff52 	bl	8002bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d08:	480c      	ldr	r0, [pc, #48]	@ (8002d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d0a:	490d      	ldr	r1, [pc, #52]	@ (8002d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d10:	e002      	b.n	8002d18 <LoopCopyDataInit>

08002d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d16:	3304      	adds	r3, #4

08002d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d1c:	d3f9      	bcc.n	8002d12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d20:	4c0a      	ldr	r4, [pc, #40]	@ (8002d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d24:	e001      	b.n	8002d2a <LoopFillZerobss>

08002d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d28:	3204      	adds	r2, #4

08002d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d2c:	d3fb      	bcc.n	8002d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d2e:	f010 fa61 	bl	80131f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d32:	f7fd fd67 	bl	8000804 <main>
  bx  lr
 8002d36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d38:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002d3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d40:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8002d44:	08013708 	.word	0x08013708
  ldr r2, =_sbss
 8002d48:	24000108 	.word	0x24000108
  ldr r4, =_ebss
 8002d4c:	240020b4 	.word	0x240020b4

08002d50 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d50:	e7fe      	b.n	8002d50 <ADC_IRQHandler>
	...

08002d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d5a:	2003      	movs	r0, #3
 8002d5c:	f001 f8a6 	bl	8003eac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002d60:	f008 fa68 	bl	800b234 <HAL_RCC_GetSysClockFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <HAL_Init+0x68>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	4913      	ldr	r1, [pc, #76]	@ (8002dc0 <HAL_Init+0x6c>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dbc <HAL_Init+0x68>)
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc0 <HAL_Init+0x6c>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
 8002d94:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc4 <HAL_Init+0x70>)
 8002d96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d98:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc8 <HAL_Init+0x74>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d9e:	200f      	movs	r0, #15
 8002da0:	f000 f814 	bl	8002dcc <HAL_InitTick>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e002      	b.n	8002db4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002dae:	f7ff fb01 	bl	80023b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	080136e8 	.word	0x080136e8
 8002dc4:	24000008 	.word	0x24000008
 8002dc8:	24000004 	.word	0x24000004

08002dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002dd4:	4b15      	ldr	r3, [pc, #84]	@ (8002e2c <HAL_InitTick+0x60>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e021      	b.n	8002e24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002de0:	4b13      	ldr	r3, [pc, #76]	@ (8002e30 <HAL_InitTick+0x64>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_InitTick+0x60>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f001 f88b 	bl	8003f12 <HAL_SYSTICK_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00e      	b.n	8002e24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d80a      	bhi.n	8002e22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f001 f855 	bl	8003ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e18:	4a06      	ldr	r2, [pc, #24]	@ (8002e34 <HAL_InitTick+0x68>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	24000010 	.word	0x24000010
 8002e30:	24000004 	.word	0x24000004
 8002e34:	2400000c 	.word	0x2400000c

08002e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_IncTick+0x20>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	24000010 	.word	0x24000010
 8002e5c:	240004cc 	.word	0x240004cc

08002e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return uwTick;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_GetTick+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	240004cc 	.word	0x240004cc

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff ffee 	bl	8002e60 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	24000010 	.word	0x24000010

08002ec0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	609a      	str	r2, [r3, #8]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	609a      	str	r2, [r3, #8]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <LL_ADC_SetChannelPreselection+0x24>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2201      	movs	r2, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	e015      	b.n	8002f78 <LL_ADC_SetChannelPreselection+0x50>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e003      	b.n	8002f6e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2201      	movs	r2, #1
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	69d2      	ldr	r2, [r2, #28]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b087      	sub	sp, #28
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3360      	adds	r3, #96	@ 0x60
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3360      	adds	r3, #96	@ 0x60
 8003010:	461a      	mov	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	431a      	orrs	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	601a      	str	r2, [r3, #0]
  }
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003036:	b480      	push	{r7}
 8003038:	b087      	sub	sp, #28
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3330      	adds	r3, #48	@ 0x30
 8003046:	461a      	mov	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	4413      	add	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	211f      	movs	r1, #31
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	401a      	ands	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	f003 011f 	and.w	r1, r3, #31
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	431a      	orrs	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800308e:	b480      	push	{r7}
 8003090:	b087      	sub	sp, #28
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3314      	adds	r3, #20
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	0e5b      	lsrs	r3, r3, #25
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	4413      	add	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	0d1b      	lsrs	r3, r3, #20
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2107      	movs	r1, #7
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	401a      	ands	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	0d1b      	lsrs	r3, r3, #20
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	431a      	orrs	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0318 	and.w	r3, r3, #24
 8003106:	4908      	ldr	r1, [pc, #32]	@ (8003128 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003108:	40d9      	lsrs	r1, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	400b      	ands	r3, r1
 800310e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003112:	431a      	orrs	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	000fffff 	.word	0x000fffff

0800312c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	4b04      	ldr	r3, [pc, #16]	@ (800314c <LL_ADC_DisableDeepPowerDown+0x20>)
 800313a:	4013      	ands	r3, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6093      	str	r3, [r2, #8]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	5fffffc0 	.word	0x5fffffc0

08003150 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003164:	d101      	bne.n	800316a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	4b05      	ldr	r3, [pc, #20]	@ (800319c <LL_ADC_EnableInternalRegulator+0x24>)
 8003186:	4013      	ands	r3, r2
 8003188:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	6fffffc0 	.word	0x6fffffc0

080031a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031b4:	d101      	bne.n	80031ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <LL_ADC_IsEnabled+0x18>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_ADC_IsEnabled+0x1a>
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d101      	bne.n	8003206 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b08      	cmp	r3, #8
 8003226:	d101      	bne.n	800322c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b089      	sub	sp, #36	@ 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003248:	2300      	movs	r3, #0
 800324a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e138      	b.n	80034c8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff f8bf 	bl	80023e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff67 	bl	8003150 <LL_ADC_IsDeepPowerDownEnabled>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff4d 	bl	800312c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ff82 	bl	80031a0 <LL_ADC_IsInternalRegulatorEnabled>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d114      	bne.n	80032cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff66 	bl	8003178 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032ac:	4b88      	ldr	r3, [pc, #544]	@ (80034d0 <HAL_ADC_Init+0x294>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	4a88      	ldr	r2, [pc, #544]	@ (80034d4 <HAL_ADC_Init+0x298>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	099b      	lsrs	r3, r3, #6
 80032ba:	3301      	adds	r3, #1
 80032bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032be:	e002      	b.n	80032c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f9      	bne.n	80032c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff65 	bl	80031a0 <LL_ADC_IsInternalRegulatorEnabled>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10d      	bne.n	80032f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e0:	f043 0210 	orr.w	r2, r3, #16
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff76 	bl	80031ee <LL_ADC_REG_IsConversionOngoing>
 8003302:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 80d2 	bne.w	80034b6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f040 80ce 	bne.w	80034b6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003322:	f043 0202 	orr.w	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff4a 	bl	80031c8 <LL_ADC_IsEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d110      	bne.n	800335c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800333a:	4867      	ldr	r0, [pc, #412]	@ (80034d8 <HAL_ADC_Init+0x29c>)
 800333c:	f7ff ff44 	bl	80031c8 <LL_ADC_IsEnabled>
 8003340:	4604      	mov	r4, r0
 8003342:	4866      	ldr	r0, [pc, #408]	@ (80034dc <HAL_ADC_Init+0x2a0>)
 8003344:	f7ff ff40 	bl	80031c8 <LL_ADC_IsEnabled>
 8003348:	4603      	mov	r3, r0
 800334a:	4323      	orrs	r3, r4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4619      	mov	r1, r3
 8003356:	4862      	ldr	r0, [pc, #392]	@ (80034e0 <HAL_ADC_Init+0x2a4>)
 8003358:	f7ff fdb2 	bl	8002ec0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7d5b      	ldrb	r3, [r3, #21]
 8003360:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003366:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800336c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7f1b      	ldrb	r3, [r3, #28]
 8003372:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7f1b      	ldrb	r3, [r3, #28]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	3b01      	subs	r3, #1
 8003386:	045b      	lsls	r3, r3, #17
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b4c      	ldr	r3, [pc, #304]	@ (80034e4 <HAL_ADC_Init+0x2a8>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	430b      	orrs	r3, r1
 80033bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ff13 	bl	80031ee <LL_ADC_REG_IsConversionOngoing>
 80033c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ff20 	bl	8003214 <LL_ADC_INJ_IsConversionOngoing>
 80033d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d14a      	bne.n	8003472 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d147      	bne.n	8003472 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	7d1b      	ldrb	r3, [r3, #20]
 80033e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	4b3c      	ldr	r3, [pc, #240]	@ (80034e8 <HAL_ADC_Init+0x2ac>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	69b9      	ldr	r1, [r7, #24]
 8003400:	430b      	orrs	r3, r1
 8003402:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800340a:	2b01      	cmp	r3, #1
 800340c:	d11b      	bne.n	8003446 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	4b34      	ldr	r3, [pc, #208]	@ (80034ec <HAL_ADC_Init+0x2b0>)
 800341c:	4013      	ands	r3, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003422:	3a01      	subs	r2, #1
 8003424:	0411      	lsls	r1, r2, #16
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003430:	4311      	orrs	r1, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003436:	430a      	orrs	r2, r1
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	611a      	str	r2, [r3, #16]
 8003444:	e007      	b.n	8003456 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fabd 	bl	80039ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10c      	bne.n	8003494 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003480:	f023 010f 	bic.w	r1, r3, #15
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	1e5a      	subs	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30
 8003492:	e007      	b.n	80034a4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 020f 	bic.w	r2, r2, #15
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a8:	f023 0303 	bic.w	r3, r3, #3
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80034b4:	e007      	b.n	80034c6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ba:	f043 0210 	orr.w	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3724      	adds	r7, #36	@ 0x24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}
 80034d0:	24000004 	.word	0x24000004
 80034d4:	053e2d63 	.word	0x053e2d63
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40022100 	.word	0x40022100
 80034e0:	40022300 	.word	0x40022300
 80034e4:	fff0c003 	.word	0xfff0c003
 80034e8:	ffffbffc 	.word	0xffffbffc
 80034ec:	fc00f81e 	.word	0xfc00f81e

080034f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b08d      	sub	sp, #52	@ 0x34
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a5b      	ldr	r2, [pc, #364]	@ (8003678 <HAL_ADC_ConfigChannel+0x188>)
 800350a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_ADC_ConfigChannel+0x2a>
 8003516:	2302      	movs	r3, #2
 8003518:	e263      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x4f2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fe61 	bl	80031ee <LL_ADC_REG_IsConversionOngoing>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 8248 	bne.w	80039c4 <HAL_ADC_ConfigChannel+0x4d4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	db2c      	blt.n	8003596 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003544:	2b00      	cmp	r3, #0
 8003546:	d108      	bne.n	800355a <HAL_ADC_ConfigChannel+0x6a>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	2201      	movs	r2, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	e016      	b.n	8003588 <HAL_ADC_ConfigChannel+0x98>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	613b      	str	r3, [r7, #16]
  return result;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8003572:	2320      	movs	r3, #32
 8003574:	e003      	b.n	800357e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	2201      	movs	r2, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	69d1      	ldr	r1, [r2, #28]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	430b      	orrs	r3, r1
 8003594:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f7ff fd47 	bl	8003036 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fe1e 	bl	80031ee <LL_ADC_REG_IsConversionOngoing>
 80035b2:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fe2b 	bl	8003214 <LL_ADC_INJ_IsConversionOngoing>
 80035be:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 80a2 	bne.w	800370c <HAL_ADC_ConfigChannel+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 809e 	bne.w	800370c <HAL_ADC_ConfigChannel+0x21c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6819      	ldr	r1, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	461a      	mov	r2, r3
 80035de:	f7ff fd56 	bl	800308e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x118>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	e00a      	b.n	800361e <HAL_ADC_ConfigChannel+0x12e>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	2b04      	cmp	r3, #4
 8003626:	d029      	beq.n	800367c <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	6919      	ldr	r1, [r3, #16]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f7ff fcaa 	bl	8002f8e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6919      	ldr	r1, [r3, #16]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	7e5b      	ldrb	r3, [r3, #25]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d102      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x160>
 800364a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800364e:	e000      	b.n	8003652 <HAL_ADC_ConfigChannel+0x162>
 8003650:	2300      	movs	r3, #0
 8003652:	461a      	mov	r2, r3
 8003654:	f7ff fcd4 	bl	8003000 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6919      	ldr	r1, [r3, #16]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	7e1b      	ldrb	r3, [r3, #24]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d102      	bne.n	800366e <HAL_ADC_ConfigChannel+0x17e>
 8003668:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800366c:	e000      	b.n	8003670 <HAL_ADC_ConfigChannel+0x180>
 800366e:	2300      	movs	r3, #0
 8003670:	461a      	mov	r2, r3
 8003672:	f7ff fcac 	bl	8002fce <LL_ADC_SetDataRightShift>
 8003676:	e049      	b.n	800370c <HAL_ADC_ConfigChannel+0x21c>
 8003678:	47ff0000 	.word	0x47ff0000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003682:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	069b      	lsls	r3, r3, #26
 800368c:	429a      	cmp	r2, r3
 800368e:	d107      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x1b0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800369e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	069b      	lsls	r3, r3, #26
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d107      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x1d4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80036c2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	069b      	lsls	r3, r3, #26
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d107      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1f8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80036e6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	069b      	lsls	r3, r3, #26
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d107      	bne.n	800370c <HAL_ADC_ConfigChannel+0x21c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800370a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fd59 	bl	80031c8 <LL_ADC_IsEnabled>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 815c 	bne.w	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6819      	ldr	r1, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	461a      	mov	r2, r3
 800372c:	f7ff fcda 	bl	80030e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a89      	ldr	r2, [pc, #548]	@ (800395c <HAL_ADC_ConfigChannel+0x46c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	f040 809a 	bne.w	8003870 <HAL_ADC_ConfigChannel+0x380>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4986      	ldr	r1, [pc, #536]	@ (8003960 <HAL_ADC_ConfigChannel+0x470>)
 8003746:	428b      	cmp	r3, r1
 8003748:	d147      	bne.n	80037da <HAL_ADC_ConfigChannel+0x2ea>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4985      	ldr	r1, [pc, #532]	@ (8003964 <HAL_ADC_ConfigChannel+0x474>)
 8003750:	428b      	cmp	r3, r1
 8003752:	d040      	beq.n	80037d6 <HAL_ADC_ConfigChannel+0x2e6>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4983      	ldr	r1, [pc, #524]	@ (8003968 <HAL_ADC_ConfigChannel+0x478>)
 800375a:	428b      	cmp	r3, r1
 800375c:	d039      	beq.n	80037d2 <HAL_ADC_ConfigChannel+0x2e2>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4982      	ldr	r1, [pc, #520]	@ (800396c <HAL_ADC_ConfigChannel+0x47c>)
 8003764:	428b      	cmp	r3, r1
 8003766:	d032      	beq.n	80037ce <HAL_ADC_ConfigChannel+0x2de>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4980      	ldr	r1, [pc, #512]	@ (8003970 <HAL_ADC_ConfigChannel+0x480>)
 800376e:	428b      	cmp	r3, r1
 8003770:	d02b      	beq.n	80037ca <HAL_ADC_ConfigChannel+0x2da>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	497f      	ldr	r1, [pc, #508]	@ (8003974 <HAL_ADC_ConfigChannel+0x484>)
 8003778:	428b      	cmp	r3, r1
 800377a:	d024      	beq.n	80037c6 <HAL_ADC_ConfigChannel+0x2d6>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	497d      	ldr	r1, [pc, #500]	@ (8003978 <HAL_ADC_ConfigChannel+0x488>)
 8003782:	428b      	cmp	r3, r1
 8003784:	d01d      	beq.n	80037c2 <HAL_ADC_ConfigChannel+0x2d2>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	497c      	ldr	r1, [pc, #496]	@ (800397c <HAL_ADC_ConfigChannel+0x48c>)
 800378c:	428b      	cmp	r3, r1
 800378e:	d016      	beq.n	80037be <HAL_ADC_ConfigChannel+0x2ce>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	497a      	ldr	r1, [pc, #488]	@ (8003980 <HAL_ADC_ConfigChannel+0x490>)
 8003796:	428b      	cmp	r3, r1
 8003798:	d00f      	beq.n	80037ba <HAL_ADC_ConfigChannel+0x2ca>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4979      	ldr	r1, [pc, #484]	@ (8003984 <HAL_ADC_ConfigChannel+0x494>)
 80037a0:	428b      	cmp	r3, r1
 80037a2:	d008      	beq.n	80037b6 <HAL_ADC_ConfigChannel+0x2c6>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4977      	ldr	r1, [pc, #476]	@ (8003988 <HAL_ADC_ConfigChannel+0x498>)
 80037aa:	428b      	cmp	r3, r1
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x2c2>
 80037ae:	4b77      	ldr	r3, [pc, #476]	@ (800398c <HAL_ADC_ConfigChannel+0x49c>)
 80037b0:	e05a      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037b2:	2300      	movs	r3, #0
 80037b4:	e058      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037b6:	4b76      	ldr	r3, [pc, #472]	@ (8003990 <HAL_ADC_ConfigChannel+0x4a0>)
 80037b8:	e056      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037ba:	4b76      	ldr	r3, [pc, #472]	@ (8003994 <HAL_ADC_ConfigChannel+0x4a4>)
 80037bc:	e054      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037be:	4b70      	ldr	r3, [pc, #448]	@ (8003980 <HAL_ADC_ConfigChannel+0x490>)
 80037c0:	e052      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037c2:	4b6e      	ldr	r3, [pc, #440]	@ (800397c <HAL_ADC_ConfigChannel+0x48c>)
 80037c4:	e050      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037c6:	4b74      	ldr	r3, [pc, #464]	@ (8003998 <HAL_ADC_ConfigChannel+0x4a8>)
 80037c8:	e04e      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037ca:	4b74      	ldr	r3, [pc, #464]	@ (800399c <HAL_ADC_ConfigChannel+0x4ac>)
 80037cc:	e04c      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037ce:	4b74      	ldr	r3, [pc, #464]	@ (80039a0 <HAL_ADC_ConfigChannel+0x4b0>)
 80037d0:	e04a      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037d2:	4b74      	ldr	r3, [pc, #464]	@ (80039a4 <HAL_ADC_ConfigChannel+0x4b4>)
 80037d4:	e048      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e046      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4972      	ldr	r1, [pc, #456]	@ (80039a8 <HAL_ADC_ConfigChannel+0x4b8>)
 80037e0:	428b      	cmp	r3, r1
 80037e2:	d140      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x376>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	495e      	ldr	r1, [pc, #376]	@ (8003964 <HAL_ADC_ConfigChannel+0x474>)
 80037ea:	428b      	cmp	r3, r1
 80037ec:	d039      	beq.n	8003862 <HAL_ADC_ConfigChannel+0x372>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	495d      	ldr	r1, [pc, #372]	@ (8003968 <HAL_ADC_ConfigChannel+0x478>)
 80037f4:	428b      	cmp	r3, r1
 80037f6:	d032      	beq.n	800385e <HAL_ADC_ConfigChannel+0x36e>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	495b      	ldr	r1, [pc, #364]	@ (800396c <HAL_ADC_ConfigChannel+0x47c>)
 80037fe:	428b      	cmp	r3, r1
 8003800:	d02b      	beq.n	800385a <HAL_ADC_ConfigChannel+0x36a>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	495a      	ldr	r1, [pc, #360]	@ (8003970 <HAL_ADC_ConfigChannel+0x480>)
 8003808:	428b      	cmp	r3, r1
 800380a:	d024      	beq.n	8003856 <HAL_ADC_ConfigChannel+0x366>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4958      	ldr	r1, [pc, #352]	@ (8003974 <HAL_ADC_ConfigChannel+0x484>)
 8003812:	428b      	cmp	r3, r1
 8003814:	d01d      	beq.n	8003852 <HAL_ADC_ConfigChannel+0x362>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4957      	ldr	r1, [pc, #348]	@ (8003978 <HAL_ADC_ConfigChannel+0x488>)
 800381c:	428b      	cmp	r3, r1
 800381e:	d016      	beq.n	800384e <HAL_ADC_ConfigChannel+0x35e>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4955      	ldr	r1, [pc, #340]	@ (800397c <HAL_ADC_ConfigChannel+0x48c>)
 8003826:	428b      	cmp	r3, r1
 8003828:	d00f      	beq.n	800384a <HAL_ADC_ConfigChannel+0x35a>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4954      	ldr	r1, [pc, #336]	@ (8003980 <HAL_ADC_ConfigChannel+0x490>)
 8003830:	428b      	cmp	r3, r1
 8003832:	d008      	beq.n	8003846 <HAL_ADC_ConfigChannel+0x356>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4953      	ldr	r1, [pc, #332]	@ (8003988 <HAL_ADC_ConfigChannel+0x498>)
 800383a:	428b      	cmp	r3, r1
 800383c:	d101      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x352>
 800383e:	4b53      	ldr	r3, [pc, #332]	@ (800398c <HAL_ADC_ConfigChannel+0x49c>)
 8003840:	e012      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 8003842:	2300      	movs	r3, #0
 8003844:	e010      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 8003846:	4b53      	ldr	r3, [pc, #332]	@ (8003994 <HAL_ADC_ConfigChannel+0x4a4>)
 8003848:	e00e      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 800384a:	4b4d      	ldr	r3, [pc, #308]	@ (8003980 <HAL_ADC_ConfigChannel+0x490>)
 800384c:	e00c      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 800384e:	4b4b      	ldr	r3, [pc, #300]	@ (800397c <HAL_ADC_ConfigChannel+0x48c>)
 8003850:	e00a      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 8003852:	4b51      	ldr	r3, [pc, #324]	@ (8003998 <HAL_ADC_ConfigChannel+0x4a8>)
 8003854:	e008      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 8003856:	4b51      	ldr	r3, [pc, #324]	@ (800399c <HAL_ADC_ConfigChannel+0x4ac>)
 8003858:	e006      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 800385a:	4b51      	ldr	r3, [pc, #324]	@ (80039a0 <HAL_ADC_ConfigChannel+0x4b0>)
 800385c:	e004      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 800385e:	4b51      	ldr	r3, [pc, #324]	@ (80039a4 <HAL_ADC_ConfigChannel+0x4b4>)
 8003860:	e002      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_ADC_ConfigChannel+0x378>
 8003866:	2300      	movs	r3, #0
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f7ff fb5c 	bl	8002f28 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f280 80ae 	bge.w	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800387a:	484c      	ldr	r0, [pc, #304]	@ (80039ac <HAL_ADC_ConfigChannel+0x4bc>)
 800387c:	f7ff fb46 	bl	8002f0c <LL_ADC_GetCommonPathInternalCh>
 8003880:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003882:	4837      	ldr	r0, [pc, #220]	@ (8003960 <HAL_ADC_ConfigChannel+0x470>)
 8003884:	f7ff fca0 	bl	80031c8 <LL_ADC_IsEnabled>
 8003888:	4604      	mov	r4, r0
 800388a:	4847      	ldr	r0, [pc, #284]	@ (80039a8 <HAL_ADC_ConfigChannel+0x4b8>)
 800388c:	f7ff fc9c 	bl	80031c8 <LL_ADC_IsEnabled>
 8003890:	4603      	mov	r3, r0
 8003892:	4323      	orrs	r3, r4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d156      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x456>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a44      	ldr	r2, [pc, #272]	@ (80039b0 <HAL_ADC_ConfigChannel+0x4c0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d123      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x3fa>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d11e      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x3fa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a3d      	ldr	r2, [pc, #244]	@ (80039a8 <HAL_ADC_ConfigChannel+0x4b8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	f040 808f 	bne.w	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038be:	4619      	mov	r1, r3
 80038c0:	483a      	ldr	r0, [pc, #232]	@ (80039ac <HAL_ADC_ConfigChannel+0x4bc>)
 80038c2:	f7ff fb10 	bl	8002ee6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038c6:	4b3b      	ldr	r3, [pc, #236]	@ (80039b4 <HAL_ADC_ConfigChannel+0x4c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	4a3a      	ldr	r2, [pc, #232]	@ (80039b8 <HAL_ADC_ConfigChannel+0x4c8>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	099b      	lsrs	r3, r3, #6
 80038d4:	3301      	adds	r3, #1
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80038da:	e002      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x3f2>
              {
                wait_loop_index--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3b01      	subs	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f9      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e8:	e075      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a33      	ldr	r2, [pc, #204]	@ (80039bc <HAL_ADC_ConfigChannel+0x4cc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d111      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x428>
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10c      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x428>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a29      	ldr	r2, [pc, #164]	@ (80039a8 <HAL_ADC_ConfigChannel+0x4b8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d166      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800390e:	4619      	mov	r1, r3
 8003910:	4826      	ldr	r0, [pc, #152]	@ (80039ac <HAL_ADC_ConfigChannel+0x4bc>)
 8003912:	f7ff fae8 	bl	8002ee6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003916:	e05e      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a28      	ldr	r2, [pc, #160]	@ (80039c0 <HAL_ADC_ConfigChannel+0x4d0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d159      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d154      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <HAL_ADC_ConfigChannel+0x4b8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d14f      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800393c:	4619      	mov	r1, r3
 800393e:	481b      	ldr	r0, [pc, #108]	@ (80039ac <HAL_ADC_ConfigChannel+0x4bc>)
 8003940:	f7ff fad1 	bl	8002ee6 <LL_ADC_SetCommonPathInternalCh>
 8003944:	e047      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394a:	f043 0220 	orr.w	r2, r3, #32
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003958:	e03d      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x4e6>
 800395a:	bf00      	nop
 800395c:	47ff0000 	.word	0x47ff0000
 8003960:	40022000 	.word	0x40022000
 8003964:	04300002 	.word	0x04300002
 8003968:	08600004 	.word	0x08600004
 800396c:	0c900008 	.word	0x0c900008
 8003970:	10c00010 	.word	0x10c00010
 8003974:	14f00020 	.word	0x14f00020
 8003978:	2a000400 	.word	0x2a000400
 800397c:	2e300800 	.word	0x2e300800
 8003980:	32601000 	.word	0x32601000
 8003984:	43210000 	.word	0x43210000
 8003988:	4b840000 	.word	0x4b840000
 800398c:	4fb80000 	.word	0x4fb80000
 8003990:	47520000 	.word	0x47520000
 8003994:	36902000 	.word	0x36902000
 8003998:	25b00200 	.word	0x25b00200
 800399c:	21800100 	.word	0x21800100
 80039a0:	1d500080 	.word	0x1d500080
 80039a4:	19200040 	.word	0x19200040
 80039a8:	40022100 	.word	0x40022100
 80039ac:	40022300 	.word	0x40022300
 80039b0:	cb840000 	.word	0xcb840000
 80039b4:	24000004 	.word	0x24000004
 80039b8:	053e2d63 	.word	0x053e2d63
 80039bc:	bac04000 	.word	0xbac04000
 80039c0:	cfb80000 	.word	0xcfb80000
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80039de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3734      	adds	r7, #52	@ 0x34
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd90      	pop	{r4, r7, pc}
 80039ea:	bf00      	nop

080039ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80039f4:	4b60      	ldr	r3, [pc, #384]	@ (8003b78 <ADC_ConfigureBoostMode+0x18c>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01c      	beq.n	8003a3a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003a00:	f007 fd92 	bl	800b528 <HAL_RCC_GetHCLKFreq>
 8003a04:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a0e:	d010      	beq.n	8003a32 <ADC_ConfigureBoostMode+0x46>
 8003a10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a14:	d873      	bhi.n	8003afe <ADC_ConfigureBoostMode+0x112>
 8003a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a1a:	d002      	beq.n	8003a22 <ADC_ConfigureBoostMode+0x36>
 8003a1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a20:	d16d      	bne.n	8003afe <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	60fb      	str	r3, [r7, #12]
        break;
 8003a30:	e068      	b.n	8003b04 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	60fb      	str	r3, [r7, #12]
        break;
 8003a38:	e064      	b.n	8003b04 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003a3a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	f008 ff75 	bl	800c930 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a46:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003a50:	d051      	beq.n	8003af6 <ADC_ConfigureBoostMode+0x10a>
 8003a52:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003a56:	d854      	bhi.n	8003b02 <ADC_ConfigureBoostMode+0x116>
 8003a58:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003a5c:	d047      	beq.n	8003aee <ADC_ConfigureBoostMode+0x102>
 8003a5e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003a62:	d84e      	bhi.n	8003b02 <ADC_ConfigureBoostMode+0x116>
 8003a64:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003a68:	d03d      	beq.n	8003ae6 <ADC_ConfigureBoostMode+0xfa>
 8003a6a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003a6e:	d848      	bhi.n	8003b02 <ADC_ConfigureBoostMode+0x116>
 8003a70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a74:	d033      	beq.n	8003ade <ADC_ConfigureBoostMode+0xf2>
 8003a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a7a:	d842      	bhi.n	8003b02 <ADC_ConfigureBoostMode+0x116>
 8003a7c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003a80:	d029      	beq.n	8003ad6 <ADC_ConfigureBoostMode+0xea>
 8003a82:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003a86:	d83c      	bhi.n	8003b02 <ADC_ConfigureBoostMode+0x116>
 8003a88:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003a8c:	d01a      	beq.n	8003ac4 <ADC_ConfigureBoostMode+0xd8>
 8003a8e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003a92:	d836      	bhi.n	8003b02 <ADC_ConfigureBoostMode+0x116>
 8003a94:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003a98:	d014      	beq.n	8003ac4 <ADC_ConfigureBoostMode+0xd8>
 8003a9a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003a9e:	d830      	bhi.n	8003b02 <ADC_ConfigureBoostMode+0x116>
 8003aa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aa4:	d00e      	beq.n	8003ac4 <ADC_ConfigureBoostMode+0xd8>
 8003aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aaa:	d82a      	bhi.n	8003b02 <ADC_ConfigureBoostMode+0x116>
 8003aac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ab0:	d008      	beq.n	8003ac4 <ADC_ConfigureBoostMode+0xd8>
 8003ab2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ab6:	d824      	bhi.n	8003b02 <ADC_ConfigureBoostMode+0x116>
 8003ab8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003abc:	d002      	beq.n	8003ac4 <ADC_ConfigureBoostMode+0xd8>
 8003abe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ac2:	d11e      	bne.n	8003b02 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	0c9b      	lsrs	r3, r3, #18
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	60fb      	str	r3, [r7, #12]
        break;
 8003ad4:	e016      	b.n	8003b04 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	60fb      	str	r3, [r7, #12]
        break;
 8003adc:	e012      	b.n	8003b04 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	60fb      	str	r3, [r7, #12]
        break;
 8003ae4:	e00e      	b.n	8003b04 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	60fb      	str	r3, [r7, #12]
        break;
 8003aec:	e00a      	b.n	8003b04 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	09db      	lsrs	r3, r3, #7
 8003af2:	60fb      	str	r3, [r7, #12]
        break;
 8003af4:	e006      	b.n	8003b04 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	60fb      	str	r3, [r7, #12]
        break;
 8003afc:	e002      	b.n	8003b04 <ADC_ConfigureBoostMode+0x118>
        break;
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003b02:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003b7c <ADC_ConfigureBoostMode+0x190>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d808      	bhi.n	8003b24 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b20:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003b22:	e025      	b.n	8003b70 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <ADC_ConfigureBoostMode+0x194>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d80a      	bhi.n	8003b42 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b3e:	609a      	str	r2, [r3, #8]
}
 8003b40:	e016      	b.n	8003b70 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a0f      	ldr	r2, [pc, #60]	@ (8003b84 <ADC_ConfigureBoostMode+0x198>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d80a      	bhi.n	8003b60 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5c:	609a      	str	r2, [r3, #8]
}
 8003b5e:	e007      	b.n	8003b70 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003b6e:	609a      	str	r2, [r3, #8]
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40022300 	.word	0x40022300
 8003b7c:	005f5e10 	.word	0x005f5e10
 8003b80:	00bebc20 	.word	0x00bebc20
 8003b84:	017d7840 	.word	0x017d7840

08003b88 <LL_ADC_IsEnabled>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <LL_ADC_IsEnabled+0x18>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <LL_ADC_IsEnabled+0x1a>
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_ADC_REG_IsConversionOngoing>:
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d101      	bne.n	8003bc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b09f      	sub	sp, #124	@ 0x7c
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e080      	b.n	8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a3d      	ldr	r2, [pc, #244]	@ (8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d102      	bne.n	8003c12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c0c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	e001      	b.n	8003c16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e05f      	b.n	8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ffb9 	bl	8003bae <LL_ADC_REG_IsConversionOngoing>
 8003c3c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff ffb3 	bl	8003bae <LL_ADC_REG_IsConversionOngoing>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d141      	bne.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d13e      	bne.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c54:	4b2b      	ldr	r3, [pc, #172]	@ (8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003c56:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d020      	beq.n	8003ca2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c70:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c72:	4822      	ldr	r0, [pc, #136]	@ (8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003c74:	f7ff ff88 	bl	8003b88 <LL_ADC_IsEnabled>
 8003c78:	4604      	mov	r4, r0
 8003c7a:	4821      	ldr	r0, [pc, #132]	@ (8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003c7c:	f7ff ff84 	bl	8003b88 <LL_ADC_IsEnabled>
 8003c80:	4603      	mov	r3, r0
 8003c82:	4323      	orrs	r3, r4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d12e      	bne.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	6811      	ldr	r1, [r2, #0]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	6892      	ldr	r2, [r2, #8]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c9e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ca0:	e021      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cae:	4813      	ldr	r0, [pc, #76]	@ (8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003cb0:	f7ff ff6a 	bl	8003b88 <LL_ADC_IsEnabled>
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	4812      	ldr	r0, [pc, #72]	@ (8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003cb8:	f7ff ff66 	bl	8003b88 <LL_ADC_IsEnabled>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4323      	orrs	r3, r4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d110      	bne.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cd0:	e009      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003ce4:	e000      	b.n	8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ce6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cf0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	377c      	adds	r7, #124	@ 0x7c
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd90      	pop	{r4, r7, pc}
 8003cfc:	40022000 	.word	0x40022000
 8003d00:	40022100 	.word	0x40022100
 8003d04:	40022300 	.word	0x40022300
 8003d08:	fffff0e0 	.word	0xfffff0e0

08003d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <__NVIC_SetPriorityGrouping+0x40>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <__NVIC_SetPriorityGrouping+0x44>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d3a:	4a04      	ldr	r2, [pc, #16]	@ (8003d4c <__NVIC_SetPriorityGrouping+0x40>)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	60d3      	str	r3, [r2, #12]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000ed00 	.word	0xe000ed00
 8003d50:	05fa0000 	.word	0x05fa0000

08003d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d58:	4b04      	ldr	r3, [pc, #16]	@ (8003d6c <__NVIC_GetPriorityGrouping+0x18>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	f003 0307 	and.w	r3, r3, #7
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	db0b      	blt.n	8003d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	f003 021f 	and.w	r2, r3, #31
 8003d88:	4907      	ldr	r1, [pc, #28]	@ (8003da8 <__NVIC_EnableIRQ+0x38>)
 8003d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	2001      	movs	r0, #1
 8003d92:	fa00 f202 	lsl.w	r2, r0, r2
 8003d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000e100 	.word	0xe000e100

08003dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	6039      	str	r1, [r7, #0]
 8003db6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	db0a      	blt.n	8003dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	490c      	ldr	r1, [pc, #48]	@ (8003df8 <__NVIC_SetPriority+0x4c>)
 8003dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dca:	0112      	lsls	r2, r2, #4
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	440b      	add	r3, r1
 8003dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd4:	e00a      	b.n	8003dec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4908      	ldr	r1, [pc, #32]	@ (8003dfc <__NVIC_SetPriority+0x50>)
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	3b04      	subs	r3, #4
 8003de4:	0112      	lsls	r2, r2, #4
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	440b      	add	r3, r1
 8003dea:	761a      	strb	r2, [r3, #24]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000e100 	.word	0xe000e100
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	@ 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f1c3 0307 	rsb	r3, r3, #7
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	bf28      	it	cs
 8003e1e:	2304      	movcs	r3, #4
 8003e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3304      	adds	r3, #4
 8003e26:	2b06      	cmp	r3, #6
 8003e28:	d902      	bls.n	8003e30 <NVIC_EncodePriority+0x30>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3b03      	subs	r3, #3
 8003e2e:	e000      	b.n	8003e32 <NVIC_EncodePriority+0x32>
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e34:	f04f 32ff 	mov.w	r2, #4294967295
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	401a      	ands	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e48:	f04f 31ff 	mov.w	r1, #4294967295
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	43d9      	mvns	r1, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e58:	4313      	orrs	r3, r2
         );
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3724      	adds	r7, #36	@ 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e78:	d301      	bcc.n	8003e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e00f      	b.n	8003e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea8 <SysTick_Config+0x40>)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e86:	210f      	movs	r1, #15
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	f7ff ff8e 	bl	8003dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e90:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <SysTick_Config+0x40>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e96:	4b04      	ldr	r3, [pc, #16]	@ (8003ea8 <SysTick_Config+0x40>)
 8003e98:	2207      	movs	r2, #7
 8003e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	e000e010 	.word	0xe000e010

08003eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ff29 	bl	8003d0c <__NVIC_SetPriorityGrouping>
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b086      	sub	sp, #24
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed0:	f7ff ff40 	bl	8003d54 <__NVIC_GetPriorityGrouping>
 8003ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	6978      	ldr	r0, [r7, #20]
 8003edc:	f7ff ff90 	bl	8003e00 <NVIC_EncodePriority>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff5f 	bl	8003dac <__NVIC_SetPriority>
}
 8003eee:	bf00      	nop
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ff33 	bl	8003d70 <__NVIC_EnableIRQ>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffa4 	bl	8003e68 <SysTick_Config>
 8003f20:	4603      	mov	r3, r0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003f30:	f3bf 8f5f 	dmb	sy
}
 8003f34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f36:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <HAL_MPU_Disable+0x28>)
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	4a06      	ldr	r2, [pc, #24]	@ (8003f54 <HAL_MPU_Disable+0x28>)
 8003f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f40:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003f42:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_MPU_Disable+0x2c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	605a      	str	r2, [r3, #4]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	e000ed00 	.word	0xe000ed00
 8003f58:	e000ed90 	.word	0xe000ed90

08003f5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003f64:	4a0b      	ldr	r2, [pc, #44]	@ (8003f94 <HAL_MPU_Enable+0x38>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f98 <HAL_MPU_Enable+0x3c>)
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	4a09      	ldr	r2, [pc, #36]	@ (8003f98 <HAL_MPU_Enable+0x3c>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f78:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003f7a:	f3bf 8f4f 	dsb	sy
}
 8003f7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f80:	f3bf 8f6f 	isb	sy
}
 8003f84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	e000ed90 	.word	0xe000ed90
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	785a      	ldrb	r2, [r3, #1]
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004018 <HAL_MPU_ConfigRegion+0x7c>)
 8003faa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003fac:	4b1a      	ldr	r3, [pc, #104]	@ (8004018 <HAL_MPU_ConfigRegion+0x7c>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	4a19      	ldr	r2, [pc, #100]	@ (8004018 <HAL_MPU_ConfigRegion+0x7c>)
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003fb8:	4a17      	ldr	r2, [pc, #92]	@ (8004018 <HAL_MPU_ConfigRegion+0x7c>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	7b1b      	ldrb	r3, [r3, #12]
 8003fc4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7adb      	ldrb	r3, [r3, #11]
 8003fca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003fcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7a9b      	ldrb	r3, [r3, #10]
 8003fd2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7b5b      	ldrb	r3, [r3, #13]
 8003fda:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	7b9b      	ldrb	r3, [r3, #14]
 8003fe2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003fe4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7bdb      	ldrb	r3, [r3, #15]
 8003fea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003fec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7a5b      	ldrb	r3, [r3, #9]
 8003ff2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ff4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7a1b      	ldrb	r3, [r3, #8]
 8003ffa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003ffc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	7812      	ldrb	r2, [r2, #0]
 8004002:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004004:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004006:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004008:	6113      	str	r3, [r2, #16]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	e000ed90 	.word	0xe000ed90

0800401c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e069      	b.n	8004102 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fe fad6 	bl	80025ec <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6819      	ldr	r1, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b2a      	ldr	r3, [pc, #168]	@ (800410c <HAL_DCMI_Init+0xf0>)
 8004062:	400b      	ands	r3, r1
 8004064:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800407a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004086:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004092:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800409e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80040aa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d112      	bne.n	80040e2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7f1b      	ldrb	r3, [r3, #28]
 80040c0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	7f5b      	ldrb	r3, [r3, #29]
 80040c6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040c8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	7f9b      	ldrb	r3, [r3, #30]
 80040ce:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80040d0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7fdb      	ldrb	r3, [r3, #31]
 80040d8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80040de:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040e0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 021e 	orr.w	r2, r2, #30
 80040f0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	ffe0f007 	.word	0xffe0f007

08004110 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_DCMI_Start_DMA+0x1c>
 8004128:	2302      	movs	r3, #2
 800412a:	e0ab      	b.n	8004284 <HAL_DCMI_Start_DMA+0x174>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800414a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0202 	bic.w	r2, r2, #2
 800415a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6819      	ldr	r1, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004170:	4a46      	ldr	r2, [pc, #280]	@ (800428c <HAL_DCMI_Start_DMA+0x17c>)
 8004172:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004178:	4a45      	ldr	r2, [pc, #276]	@ (8004290 <HAL_DCMI_Start_DMA+0x180>)
 800417a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004180:	2200      	movs	r2, #0
 8004182:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a2:	d219      	bcs.n	80041d8 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3328      	adds	r3, #40	@ 0x28
 80041ae:	4619      	mov	r1, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	f000 fdb6 	bl	8004d24 <HAL_DMA_Start_IT>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d055      	beq.n	800426a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2240      	movs	r2, #64	@ 0x40
 80041c2:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e055      	b.n	8004284 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041dc:	4a2b      	ldr	r2, [pc, #172]	@ (800428c <HAL_DCMI_Start_DMA+0x17c>)
 80041de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80041f2:	e009      	b.n	8004208 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f8:	085a      	lsrs	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	005a      	lsls	r2, r3, #1
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004210:	d2f0      	bcs.n	80041f4 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004216:	1e9a      	subs	r2, r3, #2
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4413      	add	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3328      	adds	r3, #40	@ 0x28
 800423a:	4619      	mov	r1, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	f003 f8bd 	bl	80073c4 <HAL_DMAEx_MultiBufferStart_IT>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00c      	beq.n	800426a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2240      	movs	r2, #64	@ 0x40
 8004254:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e00c      	b.n	8004284 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	080044a9 	.word	0x080044a9
 8004290:	080045cf 	.word	0x080045cf

08004294 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800429c:	4b2b      	ldr	r3, [pc, #172]	@ (800434c <HAL_DCMI_Stop+0xb8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004350 <HAL_DCMI_Stop+0xbc>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	0a5b      	lsrs	r3, r3, #9
 80042a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_DCMI_Stop+0x30>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e03f      	b.n	8004344 <HAL_DCMI_Stop+0xb0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d108      	bne.n	8004302 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	72fb      	strb	r3, [r7, #11]
      break;
 8004300:	e006      	b.n	8004310 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e9      	bne.n	80042e4 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800431e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004324:	4618      	mov	r0, r3
 8004326:	f000 ff67 	bl	80051f8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8004342:	7afb      	ldrb	r3, [r7, #11]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	24000004 	.word	0x24000004
 8004350:	10624dd3 	.word	0x10624dd3

08004354 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d016      	beq.n	800439c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2204      	movs	r2, #4
 8004374:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437a:	f043 0202 	orr.w	r2, r3, #2
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2204      	movs	r2, #4
 8004386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800438e:	4a31      	ldr	r2, [pc, #196]	@ (8004454 <HAL_DCMI_IRQHandler+0x100>)
 8004390:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004396:	4618      	mov	r0, r3
 8004398:	f001 fa4c 	bl	8005834 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2202      	movs	r2, #2
 80043ac:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2204      	movs	r2, #4
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c6:	4a23      	ldr	r2, [pc, #140]	@ (8004454 <HAL_DCMI_IRQHandler+0x100>)
 80043c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 fa30 	bl	8005834 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2210      	movs	r2, #16
 80043e4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f840 	bl	800446c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d006      	beq.n	8004404 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2208      	movs	r2, #8
 80043fc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f83e 	bl	8004480 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01d      	beq.n	800444a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b02      	cmp	r3, #2
 800441a:	d107      	bne.n	800442c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 021e 	bic.w	r2, r2, #30
 800442a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f825 	bl	8004494 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	080045cf 	.word	0x080045cf

08004458 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d043      	beq.n	8004546 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ca:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d118      	bne.n	800450a <DCMI_DMAXferCplt+0x62>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d015      	beq.n	800450a <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f0:	00da      	lsls	r2, r3, #3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4413      	add	r3, r2
 80044f6:	2200      	movs	r2, #0
 80044f8:	4619      	mov	r1, r3
 80044fa:	f003 fac1 	bl	8007a80 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	1e5a      	subs	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	639a      	str	r2, [r3, #56]	@ 0x38
 8004508:	e044      	b.n	8004594 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d13c      	bne.n	8004594 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	00da      	lsls	r2, r3, #3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4413      	add	r3, r2
 8004532:	2201      	movs	r2, #1
 8004534:	4619      	mov	r1, r3
 8004536:	f003 faa3 	bl	8007a80 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	1e5a      	subs	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	639a      	str	r2, [r3, #56]	@ 0x38
 8004544:	e026      	b.n	8004594 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d006      	beq.n	8004564 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004560:	60da      	str	r2, [r3, #12]
 8004562:	e017      	b.n	8004594 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10f      	bne.n	8004594 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004578:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457e:	0099      	lsls	r1, r3, #2
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	440a      	add	r2, r1
 800458a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	429a      	cmp	r2, r3
 800459e:	d112      	bne.n	80045c6 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d103      	bne.n	80045c6 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 80045c6:	bf00      	nop
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045da:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d009      	beq.n	80045fa <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff ff2c 	bl	8004458 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004610:	f7fe fc26 	bl	8002e60 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e37d      	b.n	8004d1c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a66      	ldr	r2, [pc, #408]	@ (80047c0 <HAL_DMA_Init+0x1b8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d04a      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a65      	ldr	r2, [pc, #404]	@ (80047c4 <HAL_DMA_Init+0x1bc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d045      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a63      	ldr	r2, [pc, #396]	@ (80047c8 <HAL_DMA_Init+0x1c0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d040      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a62      	ldr	r2, [pc, #392]	@ (80047cc <HAL_DMA_Init+0x1c4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d03b      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a60      	ldr	r2, [pc, #384]	@ (80047d0 <HAL_DMA_Init+0x1c8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d036      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a5f      	ldr	r2, [pc, #380]	@ (80047d4 <HAL_DMA_Init+0x1cc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d031      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a5d      	ldr	r2, [pc, #372]	@ (80047d8 <HAL_DMA_Init+0x1d0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d02c      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a5c      	ldr	r2, [pc, #368]	@ (80047dc <HAL_DMA_Init+0x1d4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d027      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a5a      	ldr	r2, [pc, #360]	@ (80047e0 <HAL_DMA_Init+0x1d8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d022      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a59      	ldr	r2, [pc, #356]	@ (80047e4 <HAL_DMA_Init+0x1dc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d01d      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a57      	ldr	r2, [pc, #348]	@ (80047e8 <HAL_DMA_Init+0x1e0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d018      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a56      	ldr	r2, [pc, #344]	@ (80047ec <HAL_DMA_Init+0x1e4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a54      	ldr	r2, [pc, #336]	@ (80047f0 <HAL_DMA_Init+0x1e8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00e      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a53      	ldr	r2, [pc, #332]	@ (80047f4 <HAL_DMA_Init+0x1ec>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a51      	ldr	r2, [pc, #324]	@ (80047f8 <HAL_DMA_Init+0x1f0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_DMA_Init+0xb8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a50      	ldr	r2, [pc, #320]	@ (80047fc <HAL_DMA_Init+0x1f4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_DMA_Init+0xbc>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <HAL_DMA_Init+0xbe>
 80046c4:	2300      	movs	r3, #0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 813c 	beq.w	8004944 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a37      	ldr	r2, [pc, #220]	@ (80047c0 <HAL_DMA_Init+0x1b8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d04a      	beq.n	800477c <HAL_DMA_Init+0x174>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a36      	ldr	r2, [pc, #216]	@ (80047c4 <HAL_DMA_Init+0x1bc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d045      	beq.n	800477c <HAL_DMA_Init+0x174>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a34      	ldr	r2, [pc, #208]	@ (80047c8 <HAL_DMA_Init+0x1c0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d040      	beq.n	800477c <HAL_DMA_Init+0x174>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a33      	ldr	r2, [pc, #204]	@ (80047cc <HAL_DMA_Init+0x1c4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d03b      	beq.n	800477c <HAL_DMA_Init+0x174>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a31      	ldr	r2, [pc, #196]	@ (80047d0 <HAL_DMA_Init+0x1c8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d036      	beq.n	800477c <HAL_DMA_Init+0x174>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a30      	ldr	r2, [pc, #192]	@ (80047d4 <HAL_DMA_Init+0x1cc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d031      	beq.n	800477c <HAL_DMA_Init+0x174>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2e      	ldr	r2, [pc, #184]	@ (80047d8 <HAL_DMA_Init+0x1d0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02c      	beq.n	800477c <HAL_DMA_Init+0x174>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2d      	ldr	r2, [pc, #180]	@ (80047dc <HAL_DMA_Init+0x1d4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d027      	beq.n	800477c <HAL_DMA_Init+0x174>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a2b      	ldr	r2, [pc, #172]	@ (80047e0 <HAL_DMA_Init+0x1d8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d022      	beq.n	800477c <HAL_DMA_Init+0x174>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2a      	ldr	r2, [pc, #168]	@ (80047e4 <HAL_DMA_Init+0x1dc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d01d      	beq.n	800477c <HAL_DMA_Init+0x174>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a28      	ldr	r2, [pc, #160]	@ (80047e8 <HAL_DMA_Init+0x1e0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_DMA_Init+0x174>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a27      	ldr	r2, [pc, #156]	@ (80047ec <HAL_DMA_Init+0x1e4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_DMA_Init+0x174>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a25      	ldr	r2, [pc, #148]	@ (80047f0 <HAL_DMA_Init+0x1e8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_DMA_Init+0x174>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a24      	ldr	r2, [pc, #144]	@ (80047f4 <HAL_DMA_Init+0x1ec>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_DMA_Init+0x174>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a22      	ldr	r2, [pc, #136]	@ (80047f8 <HAL_DMA_Init+0x1f0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_DMA_Init+0x174>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a21      	ldr	r2, [pc, #132]	@ (80047fc <HAL_DMA_Init+0x1f4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d108      	bne.n	800478e <HAL_DMA_Init+0x186>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e007      	b.n	800479e <HAL_DMA_Init+0x196>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800479e:	e02f      	b.n	8004800 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047a0:	f7fe fb5e 	bl	8002e60 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b05      	cmp	r3, #5
 80047ac:	d928      	bls.n	8004800 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2203      	movs	r2, #3
 80047b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e2ad      	b.n	8004d1c <HAL_DMA_Init+0x714>
 80047c0:	40020010 	.word	0x40020010
 80047c4:	40020028 	.word	0x40020028
 80047c8:	40020040 	.word	0x40020040
 80047cc:	40020058 	.word	0x40020058
 80047d0:	40020070 	.word	0x40020070
 80047d4:	40020088 	.word	0x40020088
 80047d8:	400200a0 	.word	0x400200a0
 80047dc:	400200b8 	.word	0x400200b8
 80047e0:	40020410 	.word	0x40020410
 80047e4:	40020428 	.word	0x40020428
 80047e8:	40020440 	.word	0x40020440
 80047ec:	40020458 	.word	0x40020458
 80047f0:	40020470 	.word	0x40020470
 80047f4:	40020488 	.word	0x40020488
 80047f8:	400204a0 	.word	0x400204a0
 80047fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1c8      	bne.n	80047a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4b73      	ldr	r3, [pc, #460]	@ (80049e8 <HAL_DMA_Init+0x3e0>)
 800481a:	4013      	ands	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004826:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004832:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	2b04      	cmp	r3, #4
 8004852:	d107      	bne.n	8004864 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	4313      	orrs	r3, r2
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b28      	cmp	r3, #40	@ 0x28
 800486a:	d903      	bls.n	8004874 <HAL_DMA_Init+0x26c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b2e      	cmp	r3, #46	@ 0x2e
 8004872:	d91f      	bls.n	80048b4 <HAL_DMA_Init+0x2ac>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b3e      	cmp	r3, #62	@ 0x3e
 800487a:	d903      	bls.n	8004884 <HAL_DMA_Init+0x27c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b42      	cmp	r3, #66	@ 0x42
 8004882:	d917      	bls.n	80048b4 <HAL_DMA_Init+0x2ac>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b46      	cmp	r3, #70	@ 0x46
 800488a:	d903      	bls.n	8004894 <HAL_DMA_Init+0x28c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b48      	cmp	r3, #72	@ 0x48
 8004892:	d90f      	bls.n	80048b4 <HAL_DMA_Init+0x2ac>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b4e      	cmp	r3, #78	@ 0x4e
 800489a:	d903      	bls.n	80048a4 <HAL_DMA_Init+0x29c>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b52      	cmp	r3, #82	@ 0x52
 80048a2:	d907      	bls.n	80048b4 <HAL_DMA_Init+0x2ac>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b73      	cmp	r3, #115	@ 0x73
 80048aa:	d905      	bls.n	80048b8 <HAL_DMA_Init+0x2b0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b77      	cmp	r3, #119	@ 0x77
 80048b2:	d801      	bhi.n	80048b8 <HAL_DMA_Init+0x2b0>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_DMA_Init+0x2b2>
 80048b8:	2300      	movs	r3, #0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 0307 	bic.w	r3, r3, #7
 80048dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d117      	bne.n	8004920 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00e      	beq.n	8004920 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f002 fbd4 	bl	80070b0 <DMA_CheckFifoParam>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2240      	movs	r2, #64	@ 0x40
 8004912:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e1fd      	b.n	8004d1c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f002 fb0f 	bl	8006f4c <DMA_CalcBaseAndBitshift>
 800492e:	4603      	mov	r3, r0
 8004930:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	223f      	movs	r2, #63	@ 0x3f
 800493c:	409a      	lsls	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	e0fd      	b.n	8004b40 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a28      	ldr	r2, [pc, #160]	@ (80049ec <HAL_DMA_Init+0x3e4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d04a      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a27      	ldr	r2, [pc, #156]	@ (80049f0 <HAL_DMA_Init+0x3e8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d045      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a25      	ldr	r2, [pc, #148]	@ (80049f4 <HAL_DMA_Init+0x3ec>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d040      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a24      	ldr	r2, [pc, #144]	@ (80049f8 <HAL_DMA_Init+0x3f0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d03b      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a22      	ldr	r2, [pc, #136]	@ (80049fc <HAL_DMA_Init+0x3f4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d036      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a21      	ldr	r2, [pc, #132]	@ (8004a00 <HAL_DMA_Init+0x3f8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d031      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1f      	ldr	r2, [pc, #124]	@ (8004a04 <HAL_DMA_Init+0x3fc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02c      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a08 <HAL_DMA_Init+0x400>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d027      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <HAL_DMA_Init+0x404>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d022      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a10 <HAL_DMA_Init+0x408>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d01d      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a19      	ldr	r2, [pc, #100]	@ (8004a14 <HAL_DMA_Init+0x40c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d018      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a18      	ldr	r2, [pc, #96]	@ (8004a18 <HAL_DMA_Init+0x410>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d013      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a16      	ldr	r2, [pc, #88]	@ (8004a1c <HAL_DMA_Init+0x414>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00e      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a15      	ldr	r2, [pc, #84]	@ (8004a20 <HAL_DMA_Init+0x418>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d009      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a13      	ldr	r2, [pc, #76]	@ (8004a24 <HAL_DMA_Init+0x41c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <HAL_DMA_Init+0x3dc>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a12      	ldr	r2, [pc, #72]	@ (8004a28 <HAL_DMA_Init+0x420>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d123      	bne.n	8004a2c <HAL_DMA_Init+0x424>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e022      	b.n	8004a2e <HAL_DMA_Init+0x426>
 80049e8:	fe10803f 	.word	0xfe10803f
 80049ec:	48022c08 	.word	0x48022c08
 80049f0:	48022c1c 	.word	0x48022c1c
 80049f4:	48022c30 	.word	0x48022c30
 80049f8:	48022c44 	.word	0x48022c44
 80049fc:	48022c58 	.word	0x48022c58
 8004a00:	48022c6c 	.word	0x48022c6c
 8004a04:	48022c80 	.word	0x48022c80
 8004a08:	48022c94 	.word	0x48022c94
 8004a0c:	58025408 	.word	0x58025408
 8004a10:	5802541c 	.word	0x5802541c
 8004a14:	58025430 	.word	0x58025430
 8004a18:	58025444 	.word	0x58025444
 8004a1c:	58025458 	.word	0x58025458
 8004a20:	5802546c 	.word	0x5802546c
 8004a24:	58025480 	.word	0x58025480
 8004a28:	58025494 	.word	0x58025494
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d07d      	beq.n	8004b2e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a7f      	ldr	r2, [pc, #508]	@ (8004c34 <HAL_DMA_Init+0x62c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d021      	beq.n	8004a80 <HAL_DMA_Init+0x478>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a7d      	ldr	r2, [pc, #500]	@ (8004c38 <HAL_DMA_Init+0x630>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01c      	beq.n	8004a80 <HAL_DMA_Init+0x478>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c3c <HAL_DMA_Init+0x634>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d017      	beq.n	8004a80 <HAL_DMA_Init+0x478>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a7a      	ldr	r2, [pc, #488]	@ (8004c40 <HAL_DMA_Init+0x638>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d012      	beq.n	8004a80 <HAL_DMA_Init+0x478>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a79      	ldr	r2, [pc, #484]	@ (8004c44 <HAL_DMA_Init+0x63c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00d      	beq.n	8004a80 <HAL_DMA_Init+0x478>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a77      	ldr	r2, [pc, #476]	@ (8004c48 <HAL_DMA_Init+0x640>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d008      	beq.n	8004a80 <HAL_DMA_Init+0x478>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a76      	ldr	r2, [pc, #472]	@ (8004c4c <HAL_DMA_Init+0x644>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <HAL_DMA_Init+0x478>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a74      	ldr	r2, [pc, #464]	@ (8004c50 <HAL_DMA_Init+0x648>)
 8004a7e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4b6e      	ldr	r3, [pc, #440]	@ (8004c54 <HAL_DMA_Init+0x64c>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b40      	cmp	r3, #64	@ 0x40
 8004aa6:	d008      	beq.n	8004aba <HAL_DMA_Init+0x4b2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b80      	cmp	r3, #128	@ 0x80
 8004aae:	d102      	bne.n	8004ab6 <HAL_DMA_Init+0x4ae>
 8004ab0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ab4:	e002      	b.n	8004abc <HAL_DMA_Init+0x4b4>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <HAL_DMA_Init+0x4b4>
 8004aba:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68d2      	ldr	r2, [r2, #12]
 8004ac0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ac2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004aca:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ad2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ada:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ae2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004aea:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b55      	ldr	r3, [pc, #340]	@ (8004c58 <HAL_DMA_Init+0x650>)
 8004b02:	4413      	add	r3, r2
 8004b04:	4a55      	ldr	r2, [pc, #340]	@ (8004c5c <HAL_DMA_Init+0x654>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	009a      	lsls	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f002 fa1a 	bl	8006f4c <DMA_CalcBaseAndBitshift>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	2201      	movs	r2, #1
 8004b26:	409a      	lsls	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	e008      	b.n	8004b40 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2240      	movs	r2, #64	@ 0x40
 8004b32:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2203      	movs	r2, #3
 8004b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0ed      	b.n	8004d1c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a46      	ldr	r2, [pc, #280]	@ (8004c60 <HAL_DMA_Init+0x658>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d072      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a45      	ldr	r2, [pc, #276]	@ (8004c64 <HAL_DMA_Init+0x65c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d06d      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a43      	ldr	r2, [pc, #268]	@ (8004c68 <HAL_DMA_Init+0x660>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d068      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a42      	ldr	r2, [pc, #264]	@ (8004c6c <HAL_DMA_Init+0x664>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d063      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a40      	ldr	r2, [pc, #256]	@ (8004c70 <HAL_DMA_Init+0x668>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d05e      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a3f      	ldr	r2, [pc, #252]	@ (8004c74 <HAL_DMA_Init+0x66c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d059      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a3d      	ldr	r2, [pc, #244]	@ (8004c78 <HAL_DMA_Init+0x670>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d054      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a3c      	ldr	r2, [pc, #240]	@ (8004c7c <HAL_DMA_Init+0x674>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d04f      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a3a      	ldr	r2, [pc, #232]	@ (8004c80 <HAL_DMA_Init+0x678>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d04a      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a39      	ldr	r2, [pc, #228]	@ (8004c84 <HAL_DMA_Init+0x67c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d045      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a37      	ldr	r2, [pc, #220]	@ (8004c88 <HAL_DMA_Init+0x680>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d040      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a36      	ldr	r2, [pc, #216]	@ (8004c8c <HAL_DMA_Init+0x684>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d03b      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a34      	ldr	r2, [pc, #208]	@ (8004c90 <HAL_DMA_Init+0x688>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d036      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a33      	ldr	r2, [pc, #204]	@ (8004c94 <HAL_DMA_Init+0x68c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d031      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a31      	ldr	r2, [pc, #196]	@ (8004c98 <HAL_DMA_Init+0x690>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d02c      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a30      	ldr	r2, [pc, #192]	@ (8004c9c <HAL_DMA_Init+0x694>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d027      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a13      	ldr	r2, [pc, #76]	@ (8004c34 <HAL_DMA_Init+0x62c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d022      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a12      	ldr	r2, [pc, #72]	@ (8004c38 <HAL_DMA_Init+0x630>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d01d      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a10      	ldr	r2, [pc, #64]	@ (8004c3c <HAL_DMA_Init+0x634>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d018      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a0f      	ldr	r2, [pc, #60]	@ (8004c40 <HAL_DMA_Init+0x638>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c44 <HAL_DMA_Init+0x63c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00e      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a0c      	ldr	r2, [pc, #48]	@ (8004c48 <HAL_DMA_Init+0x640>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d009      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a0a      	ldr	r2, [pc, #40]	@ (8004c4c <HAL_DMA_Init+0x644>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <HAL_DMA_Init+0x628>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a09      	ldr	r2, [pc, #36]	@ (8004c50 <HAL_DMA_Init+0x648>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d137      	bne.n	8004ca0 <HAL_DMA_Init+0x698>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e036      	b.n	8004ca2 <HAL_DMA_Init+0x69a>
 8004c34:	58025408 	.word	0x58025408
 8004c38:	5802541c 	.word	0x5802541c
 8004c3c:	58025430 	.word	0x58025430
 8004c40:	58025444 	.word	0x58025444
 8004c44:	58025458 	.word	0x58025458
 8004c48:	5802546c 	.word	0x5802546c
 8004c4c:	58025480 	.word	0x58025480
 8004c50:	58025494 	.word	0x58025494
 8004c54:	fffe000f 	.word	0xfffe000f
 8004c58:	a7fdabf8 	.word	0xa7fdabf8
 8004c5c:	cccccccd 	.word	0xcccccccd
 8004c60:	40020010 	.word	0x40020010
 8004c64:	40020028 	.word	0x40020028
 8004c68:	40020040 	.word	0x40020040
 8004c6c:	40020058 	.word	0x40020058
 8004c70:	40020070 	.word	0x40020070
 8004c74:	40020088 	.word	0x40020088
 8004c78:	400200a0 	.word	0x400200a0
 8004c7c:	400200b8 	.word	0x400200b8
 8004c80:	40020410 	.word	0x40020410
 8004c84:	40020428 	.word	0x40020428
 8004c88:	40020440 	.word	0x40020440
 8004c8c:	40020458 	.word	0x40020458
 8004c90:	40020470 	.word	0x40020470
 8004c94:	40020488 	.word	0x40020488
 8004c98:	400204a0 	.word	0x400204a0
 8004c9c:	400204b8 	.word	0x400204b8
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d032      	beq.n	8004d0c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f002 fa7e 	bl	80071a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b80      	cmp	r3, #128	@ 0x80
 8004cb2:	d102      	bne.n	8004cba <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004cce:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d010      	beq.n	8004cfa <HAL_DMA_Init+0x6f2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d80c      	bhi.n	8004cfa <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f002 fafb 	bl	80072dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cf6:	605a      	str	r2, [r3, #4]
 8004cf8:	e008      	b.n	8004d0c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e226      	b.n	800518e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_DMA_Start_IT+0x2a>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e21f      	b.n	800518e <HAL_DMA_Start_IT+0x46a>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	f040 820a 	bne.w	8005178 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a68      	ldr	r2, [pc, #416]	@ (8004f18 <HAL_DMA_Start_IT+0x1f4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04a      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a66      	ldr	r2, [pc, #408]	@ (8004f1c <HAL_DMA_Start_IT+0x1f8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d045      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a65      	ldr	r2, [pc, #404]	@ (8004f20 <HAL_DMA_Start_IT+0x1fc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d040      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a63      	ldr	r2, [pc, #396]	@ (8004f24 <HAL_DMA_Start_IT+0x200>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d03b      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a62      	ldr	r2, [pc, #392]	@ (8004f28 <HAL_DMA_Start_IT+0x204>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d036      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a60      	ldr	r2, [pc, #384]	@ (8004f2c <HAL_DMA_Start_IT+0x208>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d031      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a5f      	ldr	r2, [pc, #380]	@ (8004f30 <HAL_DMA_Start_IT+0x20c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d02c      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8004f34 <HAL_DMA_Start_IT+0x210>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d027      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a5c      	ldr	r2, [pc, #368]	@ (8004f38 <HAL_DMA_Start_IT+0x214>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8004f3c <HAL_DMA_Start_IT+0x218>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a59      	ldr	r2, [pc, #356]	@ (8004f40 <HAL_DMA_Start_IT+0x21c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a57      	ldr	r2, [pc, #348]	@ (8004f44 <HAL_DMA_Start_IT+0x220>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a56      	ldr	r2, [pc, #344]	@ (8004f48 <HAL_DMA_Start_IT+0x224>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a54      	ldr	r2, [pc, #336]	@ (8004f4c <HAL_DMA_Start_IT+0x228>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a53      	ldr	r2, [pc, #332]	@ (8004f50 <HAL_DMA_Start_IT+0x22c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a51      	ldr	r2, [pc, #324]	@ (8004f54 <HAL_DMA_Start_IT+0x230>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d108      	bne.n	8004e24 <HAL_DMA_Start_IT+0x100>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e007      	b.n	8004e34 <HAL_DMA_Start_IT+0x110>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f001 fea2 	bl	8006b84 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a34      	ldr	r2, [pc, #208]	@ (8004f18 <HAL_DMA_Start_IT+0x1f4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d04a      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a33      	ldr	r2, [pc, #204]	@ (8004f1c <HAL_DMA_Start_IT+0x1f8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d045      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a31      	ldr	r2, [pc, #196]	@ (8004f20 <HAL_DMA_Start_IT+0x1fc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d040      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a30      	ldr	r2, [pc, #192]	@ (8004f24 <HAL_DMA_Start_IT+0x200>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d03b      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f28 <HAL_DMA_Start_IT+0x204>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d036      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2d      	ldr	r2, [pc, #180]	@ (8004f2c <HAL_DMA_Start_IT+0x208>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d031      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a2b      	ldr	r2, [pc, #172]	@ (8004f30 <HAL_DMA_Start_IT+0x20c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d02c      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004f34 <HAL_DMA_Start_IT+0x210>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d027      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a28      	ldr	r2, [pc, #160]	@ (8004f38 <HAL_DMA_Start_IT+0x214>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d022      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a27      	ldr	r2, [pc, #156]	@ (8004f3c <HAL_DMA_Start_IT+0x218>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d01d      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a25      	ldr	r2, [pc, #148]	@ (8004f40 <HAL_DMA_Start_IT+0x21c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d018      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a24      	ldr	r2, [pc, #144]	@ (8004f44 <HAL_DMA_Start_IT+0x220>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	@ (8004f48 <HAL_DMA_Start_IT+0x224>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a21      	ldr	r2, [pc, #132]	@ (8004f4c <HAL_DMA_Start_IT+0x228>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d009      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f50 <HAL_DMA_Start_IT+0x22c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1e      	ldr	r2, [pc, #120]	@ (8004f54 <HAL_DMA_Start_IT+0x230>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d101      	bne.n	8004ee4 <HAL_DMA_Start_IT+0x1c0>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_DMA_Start_IT+0x1c2>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d036      	beq.n	8004f58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f023 021e 	bic.w	r2, r3, #30
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0216 	orr.w	r2, r2, #22
 8004efc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d03e      	beq.n	8004f84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0208 	orr.w	r2, r2, #8
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e035      	b.n	8004f84 <HAL_DMA_Start_IT+0x260>
 8004f18:	40020010 	.word	0x40020010
 8004f1c:	40020028 	.word	0x40020028
 8004f20:	40020040 	.word	0x40020040
 8004f24:	40020058 	.word	0x40020058
 8004f28:	40020070 	.word	0x40020070
 8004f2c:	40020088 	.word	0x40020088
 8004f30:	400200a0 	.word	0x400200a0
 8004f34:	400200b8 	.word	0x400200b8
 8004f38:	40020410 	.word	0x40020410
 8004f3c:	40020428 	.word	0x40020428
 8004f40:	40020440 	.word	0x40020440
 8004f44:	40020458 	.word	0x40020458
 8004f48:	40020470 	.word	0x40020470
 8004f4c:	40020488 	.word	0x40020488
 8004f50:	400204a0 	.word	0x400204a0
 8004f54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 020e 	bic.w	r2, r3, #14
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 020a 	orr.w	r2, r2, #10
 8004f6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0204 	orr.w	r2, r2, #4
 8004f82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a83      	ldr	r2, [pc, #524]	@ (8005198 <HAL_DMA_Start_IT+0x474>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d072      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a82      	ldr	r2, [pc, #520]	@ (800519c <HAL_DMA_Start_IT+0x478>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d06d      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a80      	ldr	r2, [pc, #512]	@ (80051a0 <HAL_DMA_Start_IT+0x47c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d068      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a7f      	ldr	r2, [pc, #508]	@ (80051a4 <HAL_DMA_Start_IT+0x480>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d063      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a7d      	ldr	r2, [pc, #500]	@ (80051a8 <HAL_DMA_Start_IT+0x484>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d05e      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7c      	ldr	r2, [pc, #496]	@ (80051ac <HAL_DMA_Start_IT+0x488>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d059      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a7a      	ldr	r2, [pc, #488]	@ (80051b0 <HAL_DMA_Start_IT+0x48c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d054      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a79      	ldr	r2, [pc, #484]	@ (80051b4 <HAL_DMA_Start_IT+0x490>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d04f      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a77      	ldr	r2, [pc, #476]	@ (80051b8 <HAL_DMA_Start_IT+0x494>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d04a      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a76      	ldr	r2, [pc, #472]	@ (80051bc <HAL_DMA_Start_IT+0x498>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d045      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a74      	ldr	r2, [pc, #464]	@ (80051c0 <HAL_DMA_Start_IT+0x49c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d040      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a73      	ldr	r2, [pc, #460]	@ (80051c4 <HAL_DMA_Start_IT+0x4a0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d03b      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a71      	ldr	r2, [pc, #452]	@ (80051c8 <HAL_DMA_Start_IT+0x4a4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d036      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a70      	ldr	r2, [pc, #448]	@ (80051cc <HAL_DMA_Start_IT+0x4a8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d031      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a6e      	ldr	r2, [pc, #440]	@ (80051d0 <HAL_DMA_Start_IT+0x4ac>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d02c      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a6d      	ldr	r2, [pc, #436]	@ (80051d4 <HAL_DMA_Start_IT+0x4b0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d027      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6b      	ldr	r2, [pc, #428]	@ (80051d8 <HAL_DMA_Start_IT+0x4b4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d022      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6a      	ldr	r2, [pc, #424]	@ (80051dc <HAL_DMA_Start_IT+0x4b8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d01d      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a68      	ldr	r2, [pc, #416]	@ (80051e0 <HAL_DMA_Start_IT+0x4bc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d018      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a67      	ldr	r2, [pc, #412]	@ (80051e4 <HAL_DMA_Start_IT+0x4c0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a65      	ldr	r2, [pc, #404]	@ (80051e8 <HAL_DMA_Start_IT+0x4c4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00e      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a64      	ldr	r2, [pc, #400]	@ (80051ec <HAL_DMA_Start_IT+0x4c8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d009      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a62      	ldr	r2, [pc, #392]	@ (80051f0 <HAL_DMA_Start_IT+0x4cc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a61      	ldr	r2, [pc, #388]	@ (80051f4 <HAL_DMA_Start_IT+0x4d0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d101      	bne.n	8005078 <HAL_DMA_Start_IT+0x354>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_DMA_Start_IT+0x356>
 8005078:	2300      	movs	r3, #0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01a      	beq.n	80050b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005096:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800509a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a37      	ldr	r2, [pc, #220]	@ (8005198 <HAL_DMA_Start_IT+0x474>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d04a      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a36      	ldr	r2, [pc, #216]	@ (800519c <HAL_DMA_Start_IT+0x478>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d045      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a34      	ldr	r2, [pc, #208]	@ (80051a0 <HAL_DMA_Start_IT+0x47c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d040      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a33      	ldr	r2, [pc, #204]	@ (80051a4 <HAL_DMA_Start_IT+0x480>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d03b      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a31      	ldr	r2, [pc, #196]	@ (80051a8 <HAL_DMA_Start_IT+0x484>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d036      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a30      	ldr	r2, [pc, #192]	@ (80051ac <HAL_DMA_Start_IT+0x488>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d031      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2e      	ldr	r2, [pc, #184]	@ (80051b0 <HAL_DMA_Start_IT+0x48c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d02c      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2d      	ldr	r2, [pc, #180]	@ (80051b4 <HAL_DMA_Start_IT+0x490>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d027      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2b      	ldr	r2, [pc, #172]	@ (80051b8 <HAL_DMA_Start_IT+0x494>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2a      	ldr	r2, [pc, #168]	@ (80051bc <HAL_DMA_Start_IT+0x498>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d01d      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a28      	ldr	r2, [pc, #160]	@ (80051c0 <HAL_DMA_Start_IT+0x49c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a27      	ldr	r2, [pc, #156]	@ (80051c4 <HAL_DMA_Start_IT+0x4a0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a25      	ldr	r2, [pc, #148]	@ (80051c8 <HAL_DMA_Start_IT+0x4a4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a24      	ldr	r2, [pc, #144]	@ (80051cc <HAL_DMA_Start_IT+0x4a8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a22      	ldr	r2, [pc, #136]	@ (80051d0 <HAL_DMA_Start_IT+0x4ac>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a21      	ldr	r2, [pc, #132]	@ (80051d4 <HAL_DMA_Start_IT+0x4b0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d108      	bne.n	8005166 <HAL_DMA_Start_IT+0x442>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e012      	b.n	800518c <HAL_DMA_Start_IT+0x468>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	e009      	b.n	800518c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800517e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40020010 	.word	0x40020010
 800519c:	40020028 	.word	0x40020028
 80051a0:	40020040 	.word	0x40020040
 80051a4:	40020058 	.word	0x40020058
 80051a8:	40020070 	.word	0x40020070
 80051ac:	40020088 	.word	0x40020088
 80051b0:	400200a0 	.word	0x400200a0
 80051b4:	400200b8 	.word	0x400200b8
 80051b8:	40020410 	.word	0x40020410
 80051bc:	40020428 	.word	0x40020428
 80051c0:	40020440 	.word	0x40020440
 80051c4:	40020458 	.word	0x40020458
 80051c8:	40020470 	.word	0x40020470
 80051cc:	40020488 	.word	0x40020488
 80051d0:	400204a0 	.word	0x400204a0
 80051d4:	400204b8 	.word	0x400204b8
 80051d8:	58025408 	.word	0x58025408
 80051dc:	5802541c 	.word	0x5802541c
 80051e0:	58025430 	.word	0x58025430
 80051e4:	58025444 	.word	0x58025444
 80051e8:	58025458 	.word	0x58025458
 80051ec:	5802546c 	.word	0x5802546c
 80051f0:	58025480 	.word	0x58025480
 80051f4:	58025494 	.word	0x58025494

080051f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005200:	f7fd fe2e 	bl	8002e60 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e2dc      	b.n	80057ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d008      	beq.n	800522e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2280      	movs	r2, #128	@ 0x80
 8005220:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e2cd      	b.n	80057ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a76      	ldr	r2, [pc, #472]	@ (800540c <HAL_DMA_Abort+0x214>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d04a      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a74      	ldr	r2, [pc, #464]	@ (8005410 <HAL_DMA_Abort+0x218>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d045      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a73      	ldr	r2, [pc, #460]	@ (8005414 <HAL_DMA_Abort+0x21c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d040      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a71      	ldr	r2, [pc, #452]	@ (8005418 <HAL_DMA_Abort+0x220>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d03b      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a70      	ldr	r2, [pc, #448]	@ (800541c <HAL_DMA_Abort+0x224>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d036      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a6e      	ldr	r2, [pc, #440]	@ (8005420 <HAL_DMA_Abort+0x228>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d031      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a6d      	ldr	r2, [pc, #436]	@ (8005424 <HAL_DMA_Abort+0x22c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d02c      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a6b      	ldr	r2, [pc, #428]	@ (8005428 <HAL_DMA_Abort+0x230>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d027      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a6a      	ldr	r2, [pc, #424]	@ (800542c <HAL_DMA_Abort+0x234>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d022      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a68      	ldr	r2, [pc, #416]	@ (8005430 <HAL_DMA_Abort+0x238>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a67      	ldr	r2, [pc, #412]	@ (8005434 <HAL_DMA_Abort+0x23c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a65      	ldr	r2, [pc, #404]	@ (8005438 <HAL_DMA_Abort+0x240>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a64      	ldr	r2, [pc, #400]	@ (800543c <HAL_DMA_Abort+0x244>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a62      	ldr	r2, [pc, #392]	@ (8005440 <HAL_DMA_Abort+0x248>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a61      	ldr	r2, [pc, #388]	@ (8005444 <HAL_DMA_Abort+0x24c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5f      	ldr	r2, [pc, #380]	@ (8005448 <HAL_DMA_Abort+0x250>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <HAL_DMA_Abort+0xda>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_DMA_Abort+0xdc>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d013      	beq.n	8005300 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 021e 	bic.w	r2, r2, #30
 80052e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	e00a      	b.n	8005316 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 020e 	bic.w	r2, r2, #14
 800530e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a3c      	ldr	r2, [pc, #240]	@ (800540c <HAL_DMA_Abort+0x214>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d072      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a3a      	ldr	r2, [pc, #232]	@ (8005410 <HAL_DMA_Abort+0x218>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d06d      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a39      	ldr	r2, [pc, #228]	@ (8005414 <HAL_DMA_Abort+0x21c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d068      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a37      	ldr	r2, [pc, #220]	@ (8005418 <HAL_DMA_Abort+0x220>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d063      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a36      	ldr	r2, [pc, #216]	@ (800541c <HAL_DMA_Abort+0x224>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d05e      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a34      	ldr	r2, [pc, #208]	@ (8005420 <HAL_DMA_Abort+0x228>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d059      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a33      	ldr	r2, [pc, #204]	@ (8005424 <HAL_DMA_Abort+0x22c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d054      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a31      	ldr	r2, [pc, #196]	@ (8005428 <HAL_DMA_Abort+0x230>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d04f      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a30      	ldr	r2, [pc, #192]	@ (800542c <HAL_DMA_Abort+0x234>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d04a      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2e      	ldr	r2, [pc, #184]	@ (8005430 <HAL_DMA_Abort+0x238>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d045      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2d      	ldr	r2, [pc, #180]	@ (8005434 <HAL_DMA_Abort+0x23c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d040      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2b      	ldr	r2, [pc, #172]	@ (8005438 <HAL_DMA_Abort+0x240>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d03b      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2a      	ldr	r2, [pc, #168]	@ (800543c <HAL_DMA_Abort+0x244>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d036      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a28      	ldr	r2, [pc, #160]	@ (8005440 <HAL_DMA_Abort+0x248>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d031      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a27      	ldr	r2, [pc, #156]	@ (8005444 <HAL_DMA_Abort+0x24c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d02c      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a25      	ldr	r2, [pc, #148]	@ (8005448 <HAL_DMA_Abort+0x250>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d027      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a24      	ldr	r2, [pc, #144]	@ (800544c <HAL_DMA_Abort+0x254>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a22      	ldr	r2, [pc, #136]	@ (8005450 <HAL_DMA_Abort+0x258>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01d      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a21      	ldr	r2, [pc, #132]	@ (8005454 <HAL_DMA_Abort+0x25c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d018      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005458 <HAL_DMA_Abort+0x260>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1e      	ldr	r2, [pc, #120]	@ (800545c <HAL_DMA_Abort+0x264>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005460 <HAL_DMA_Abort+0x268>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005464 <HAL_DMA_Abort+0x26c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a19      	ldr	r2, [pc, #100]	@ (8005468 <HAL_DMA_Abort+0x270>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d132      	bne.n	800546c <HAL_DMA_Abort+0x274>
 8005406:	2301      	movs	r3, #1
 8005408:	e031      	b.n	800546e <HAL_DMA_Abort+0x276>
 800540a:	bf00      	nop
 800540c:	40020010 	.word	0x40020010
 8005410:	40020028 	.word	0x40020028
 8005414:	40020040 	.word	0x40020040
 8005418:	40020058 	.word	0x40020058
 800541c:	40020070 	.word	0x40020070
 8005420:	40020088 	.word	0x40020088
 8005424:	400200a0 	.word	0x400200a0
 8005428:	400200b8 	.word	0x400200b8
 800542c:	40020410 	.word	0x40020410
 8005430:	40020428 	.word	0x40020428
 8005434:	40020440 	.word	0x40020440
 8005438:	40020458 	.word	0x40020458
 800543c:	40020470 	.word	0x40020470
 8005440:	40020488 	.word	0x40020488
 8005444:	400204a0 	.word	0x400204a0
 8005448:	400204b8 	.word	0x400204b8
 800544c:	58025408 	.word	0x58025408
 8005450:	5802541c 	.word	0x5802541c
 8005454:	58025430 	.word	0x58025430
 8005458:	58025444 	.word	0x58025444
 800545c:	58025458 	.word	0x58025458
 8005460:	5802546c 	.word	0x5802546c
 8005464:	58025480 	.word	0x58025480
 8005468:	58025494 	.word	0x58025494
 800546c:	2300      	movs	r3, #0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800547c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005480:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a6d      	ldr	r2, [pc, #436]	@ (800563c <HAL_DMA_Abort+0x444>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d04a      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6b      	ldr	r2, [pc, #428]	@ (8005640 <HAL_DMA_Abort+0x448>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d045      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a6a      	ldr	r2, [pc, #424]	@ (8005644 <HAL_DMA_Abort+0x44c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d040      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a68      	ldr	r2, [pc, #416]	@ (8005648 <HAL_DMA_Abort+0x450>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d03b      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a67      	ldr	r2, [pc, #412]	@ (800564c <HAL_DMA_Abort+0x454>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d036      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a65      	ldr	r2, [pc, #404]	@ (8005650 <HAL_DMA_Abort+0x458>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d031      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a64      	ldr	r2, [pc, #400]	@ (8005654 <HAL_DMA_Abort+0x45c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d02c      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a62      	ldr	r2, [pc, #392]	@ (8005658 <HAL_DMA_Abort+0x460>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d027      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a61      	ldr	r2, [pc, #388]	@ (800565c <HAL_DMA_Abort+0x464>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a5f      	ldr	r2, [pc, #380]	@ (8005660 <HAL_DMA_Abort+0x468>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01d      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005664 <HAL_DMA_Abort+0x46c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a5c      	ldr	r2, [pc, #368]	@ (8005668 <HAL_DMA_Abort+0x470>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a5b      	ldr	r2, [pc, #364]	@ (800566c <HAL_DMA_Abort+0x474>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a59      	ldr	r2, [pc, #356]	@ (8005670 <HAL_DMA_Abort+0x478>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a58      	ldr	r2, [pc, #352]	@ (8005674 <HAL_DMA_Abort+0x47c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a56      	ldr	r2, [pc, #344]	@ (8005678 <HAL_DMA_Abort+0x480>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d108      	bne.n	8005534 <HAL_DMA_Abort+0x33c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e007      	b.n	8005544 <HAL_DMA_Abort+0x34c>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005544:	e013      	b.n	800556e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005546:	f7fd fc8b 	bl	8002e60 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b05      	cmp	r3, #5
 8005552:	d90c      	bls.n	800556e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2203      	movs	r2, #3
 800555e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e12d      	b.n	80057ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2f      	ldr	r2, [pc, #188]	@ (800563c <HAL_DMA_Abort+0x444>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d04a      	beq.n	800561a <HAL_DMA_Abort+0x422>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2d      	ldr	r2, [pc, #180]	@ (8005640 <HAL_DMA_Abort+0x448>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d045      	beq.n	800561a <HAL_DMA_Abort+0x422>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2c      	ldr	r2, [pc, #176]	@ (8005644 <HAL_DMA_Abort+0x44c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d040      	beq.n	800561a <HAL_DMA_Abort+0x422>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2a      	ldr	r2, [pc, #168]	@ (8005648 <HAL_DMA_Abort+0x450>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d03b      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a29      	ldr	r2, [pc, #164]	@ (800564c <HAL_DMA_Abort+0x454>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d036      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a27      	ldr	r2, [pc, #156]	@ (8005650 <HAL_DMA_Abort+0x458>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d031      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a26      	ldr	r2, [pc, #152]	@ (8005654 <HAL_DMA_Abort+0x45c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d02c      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a24      	ldr	r2, [pc, #144]	@ (8005658 <HAL_DMA_Abort+0x460>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d027      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a23      	ldr	r2, [pc, #140]	@ (800565c <HAL_DMA_Abort+0x464>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d022      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a21      	ldr	r2, [pc, #132]	@ (8005660 <HAL_DMA_Abort+0x468>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01d      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a20      	ldr	r2, [pc, #128]	@ (8005664 <HAL_DMA_Abort+0x46c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005668 <HAL_DMA_Abort+0x470>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1d      	ldr	r2, [pc, #116]	@ (800566c <HAL_DMA_Abort+0x474>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00e      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <HAL_DMA_Abort+0x478>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_DMA_Abort+0x422>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1a      	ldr	r2, [pc, #104]	@ (8005674 <HAL_DMA_Abort+0x47c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_DMA_Abort+0x422>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a18      	ldr	r2, [pc, #96]	@ (8005678 <HAL_DMA_Abort+0x480>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d101      	bne.n	800561e <HAL_DMA_Abort+0x426>
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <HAL_DMA_Abort+0x428>
 800561e:	2300      	movs	r3, #0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d02b      	beq.n	800567c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005628:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	223f      	movs	r2, #63	@ 0x3f
 8005634:	409a      	lsls	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	609a      	str	r2, [r3, #8]
 800563a:	e02a      	b.n	8005692 <HAL_DMA_Abort+0x49a>
 800563c:	40020010 	.word	0x40020010
 8005640:	40020028 	.word	0x40020028
 8005644:	40020040 	.word	0x40020040
 8005648:	40020058 	.word	0x40020058
 800564c:	40020070 	.word	0x40020070
 8005650:	40020088 	.word	0x40020088
 8005654:	400200a0 	.word	0x400200a0
 8005658:	400200b8 	.word	0x400200b8
 800565c:	40020410 	.word	0x40020410
 8005660:	40020428 	.word	0x40020428
 8005664:	40020440 	.word	0x40020440
 8005668:	40020458 	.word	0x40020458
 800566c:	40020470 	.word	0x40020470
 8005670:	40020488 	.word	0x40020488
 8005674:	400204a0 	.word	0x400204a0
 8005678:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005680:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	2201      	movs	r2, #1
 800568c:	409a      	lsls	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a4f      	ldr	r2, [pc, #316]	@ (80057d4 <HAL_DMA_Abort+0x5dc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d072      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a4d      	ldr	r2, [pc, #308]	@ (80057d8 <HAL_DMA_Abort+0x5e0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d06d      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a4c      	ldr	r2, [pc, #304]	@ (80057dc <HAL_DMA_Abort+0x5e4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d068      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a4a      	ldr	r2, [pc, #296]	@ (80057e0 <HAL_DMA_Abort+0x5e8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d063      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a49      	ldr	r2, [pc, #292]	@ (80057e4 <HAL_DMA_Abort+0x5ec>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d05e      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a47      	ldr	r2, [pc, #284]	@ (80057e8 <HAL_DMA_Abort+0x5f0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d059      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a46      	ldr	r2, [pc, #280]	@ (80057ec <HAL_DMA_Abort+0x5f4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d054      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a44      	ldr	r2, [pc, #272]	@ (80057f0 <HAL_DMA_Abort+0x5f8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d04f      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a43      	ldr	r2, [pc, #268]	@ (80057f4 <HAL_DMA_Abort+0x5fc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d04a      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a41      	ldr	r2, [pc, #260]	@ (80057f8 <HAL_DMA_Abort+0x600>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d045      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a40      	ldr	r2, [pc, #256]	@ (80057fc <HAL_DMA_Abort+0x604>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d040      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a3e      	ldr	r2, [pc, #248]	@ (8005800 <HAL_DMA_Abort+0x608>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d03b      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a3d      	ldr	r2, [pc, #244]	@ (8005804 <HAL_DMA_Abort+0x60c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d036      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a3b      	ldr	r2, [pc, #236]	@ (8005808 <HAL_DMA_Abort+0x610>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d031      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a3a      	ldr	r2, [pc, #232]	@ (800580c <HAL_DMA_Abort+0x614>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d02c      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a38      	ldr	r2, [pc, #224]	@ (8005810 <HAL_DMA_Abort+0x618>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d027      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a37      	ldr	r2, [pc, #220]	@ (8005814 <HAL_DMA_Abort+0x61c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a35      	ldr	r2, [pc, #212]	@ (8005818 <HAL_DMA_Abort+0x620>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01d      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a34      	ldr	r2, [pc, #208]	@ (800581c <HAL_DMA_Abort+0x624>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a32      	ldr	r2, [pc, #200]	@ (8005820 <HAL_DMA_Abort+0x628>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a31      	ldr	r2, [pc, #196]	@ (8005824 <HAL_DMA_Abort+0x62c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2f      	ldr	r2, [pc, #188]	@ (8005828 <HAL_DMA_Abort+0x630>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2e      	ldr	r2, [pc, #184]	@ (800582c <HAL_DMA_Abort+0x634>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2c      	ldr	r2, [pc, #176]	@ (8005830 <HAL_DMA_Abort+0x638>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_DMA_Abort+0x58e>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_DMA_Abort+0x590>
 8005786:	2300      	movs	r3, #0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d015      	beq.n	80057b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005794:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00c      	beq.n	80057b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80057b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40020010 	.word	0x40020010
 80057d8:	40020028 	.word	0x40020028
 80057dc:	40020040 	.word	0x40020040
 80057e0:	40020058 	.word	0x40020058
 80057e4:	40020070 	.word	0x40020070
 80057e8:	40020088 	.word	0x40020088
 80057ec:	400200a0 	.word	0x400200a0
 80057f0:	400200b8 	.word	0x400200b8
 80057f4:	40020410 	.word	0x40020410
 80057f8:	40020428 	.word	0x40020428
 80057fc:	40020440 	.word	0x40020440
 8005800:	40020458 	.word	0x40020458
 8005804:	40020470 	.word	0x40020470
 8005808:	40020488 	.word	0x40020488
 800580c:	400204a0 	.word	0x400204a0
 8005810:	400204b8 	.word	0x400204b8
 8005814:	58025408 	.word	0x58025408
 8005818:	5802541c 	.word	0x5802541c
 800581c:	58025430 	.word	0x58025430
 8005820:	58025444 	.word	0x58025444
 8005824:	58025458 	.word	0x58025458
 8005828:	5802546c 	.word	0x5802546c
 800582c:	58025480 	.word	0x58025480
 8005830:	58025494 	.word	0x58025494

08005834 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e237      	b.n	8005cb6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d004      	beq.n	800585c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2280      	movs	r2, #128	@ 0x80
 8005856:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e22c      	b.n	8005cb6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a5c      	ldr	r2, [pc, #368]	@ (80059d4 <HAL_DMA_Abort_IT+0x1a0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d04a      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a5b      	ldr	r2, [pc, #364]	@ (80059d8 <HAL_DMA_Abort_IT+0x1a4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d045      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a59      	ldr	r2, [pc, #356]	@ (80059dc <HAL_DMA_Abort_IT+0x1a8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d040      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a58      	ldr	r2, [pc, #352]	@ (80059e0 <HAL_DMA_Abort_IT+0x1ac>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d03b      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a56      	ldr	r2, [pc, #344]	@ (80059e4 <HAL_DMA_Abort_IT+0x1b0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d036      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a55      	ldr	r2, [pc, #340]	@ (80059e8 <HAL_DMA_Abort_IT+0x1b4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d031      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a53      	ldr	r2, [pc, #332]	@ (80059ec <HAL_DMA_Abort_IT+0x1b8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d02c      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a52      	ldr	r2, [pc, #328]	@ (80059f0 <HAL_DMA_Abort_IT+0x1bc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d027      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a50      	ldr	r2, [pc, #320]	@ (80059f4 <HAL_DMA_Abort_IT+0x1c0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d022      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4f      	ldr	r2, [pc, #316]	@ (80059f8 <HAL_DMA_Abort_IT+0x1c4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d01d      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a4d      	ldr	r2, [pc, #308]	@ (80059fc <HAL_DMA_Abort_IT+0x1c8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d018      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a4c      	ldr	r2, [pc, #304]	@ (8005a00 <HAL_DMA_Abort_IT+0x1cc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d013      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005a04 <HAL_DMA_Abort_IT+0x1d0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00e      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a49      	ldr	r2, [pc, #292]	@ (8005a08 <HAL_DMA_Abort_IT+0x1d4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d009      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a47      	ldr	r2, [pc, #284]	@ (8005a0c <HAL_DMA_Abort_IT+0x1d8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d004      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a46      	ldr	r2, [pc, #280]	@ (8005a10 <HAL_DMA_Abort_IT+0x1dc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d101      	bne.n	8005900 <HAL_DMA_Abort_IT+0xcc>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <HAL_DMA_Abort_IT+0xce>
 8005900:	2300      	movs	r3, #0
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 8086 	beq.w	8005a14 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2204      	movs	r2, #4
 800590c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2f      	ldr	r2, [pc, #188]	@ (80059d4 <HAL_DMA_Abort_IT+0x1a0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d04a      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2e      	ldr	r2, [pc, #184]	@ (80059d8 <HAL_DMA_Abort_IT+0x1a4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d045      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a2c      	ldr	r2, [pc, #176]	@ (80059dc <HAL_DMA_Abort_IT+0x1a8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d040      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a2b      	ldr	r2, [pc, #172]	@ (80059e0 <HAL_DMA_Abort_IT+0x1ac>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d03b      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a29      	ldr	r2, [pc, #164]	@ (80059e4 <HAL_DMA_Abort_IT+0x1b0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d036      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a28      	ldr	r2, [pc, #160]	@ (80059e8 <HAL_DMA_Abort_IT+0x1b4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d031      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a26      	ldr	r2, [pc, #152]	@ (80059ec <HAL_DMA_Abort_IT+0x1b8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02c      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a25      	ldr	r2, [pc, #148]	@ (80059f0 <HAL_DMA_Abort_IT+0x1bc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d027      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a23      	ldr	r2, [pc, #140]	@ (80059f4 <HAL_DMA_Abort_IT+0x1c0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a22      	ldr	r2, [pc, #136]	@ (80059f8 <HAL_DMA_Abort_IT+0x1c4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a20      	ldr	r2, [pc, #128]	@ (80059fc <HAL_DMA_Abort_IT+0x1c8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1f      	ldr	r2, [pc, #124]	@ (8005a00 <HAL_DMA_Abort_IT+0x1cc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a04 <HAL_DMA_Abort_IT+0x1d0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1c      	ldr	r2, [pc, #112]	@ (8005a08 <HAL_DMA_Abort_IT+0x1d4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1a      	ldr	r2, [pc, #104]	@ (8005a0c <HAL_DMA_Abort_IT+0x1d8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a19      	ldr	r2, [pc, #100]	@ (8005a10 <HAL_DMA_Abort_IT+0x1dc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d108      	bne.n	80059c2 <HAL_DMA_Abort_IT+0x18e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e178      	b.n	8005cb4 <HAL_DMA_Abort_IT+0x480>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e16f      	b.n	8005cb4 <HAL_DMA_Abort_IT+0x480>
 80059d4:	40020010 	.word	0x40020010
 80059d8:	40020028 	.word	0x40020028
 80059dc:	40020040 	.word	0x40020040
 80059e0:	40020058 	.word	0x40020058
 80059e4:	40020070 	.word	0x40020070
 80059e8:	40020088 	.word	0x40020088
 80059ec:	400200a0 	.word	0x400200a0
 80059f0:	400200b8 	.word	0x400200b8
 80059f4:	40020410 	.word	0x40020410
 80059f8:	40020428 	.word	0x40020428
 80059fc:	40020440 	.word	0x40020440
 8005a00:	40020458 	.word	0x40020458
 8005a04:	40020470 	.word	0x40020470
 8005a08:	40020488 	.word	0x40020488
 8005a0c:	400204a0 	.word	0x400204a0
 8005a10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 020e 	bic.w	r2, r2, #14
 8005a22:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a6c      	ldr	r2, [pc, #432]	@ (8005bdc <HAL_DMA_Abort_IT+0x3a8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d04a      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a6b      	ldr	r2, [pc, #428]	@ (8005be0 <HAL_DMA_Abort_IT+0x3ac>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d045      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a69      	ldr	r2, [pc, #420]	@ (8005be4 <HAL_DMA_Abort_IT+0x3b0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d040      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a68      	ldr	r2, [pc, #416]	@ (8005be8 <HAL_DMA_Abort_IT+0x3b4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d03b      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a66      	ldr	r2, [pc, #408]	@ (8005bec <HAL_DMA_Abort_IT+0x3b8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d036      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a65      	ldr	r2, [pc, #404]	@ (8005bf0 <HAL_DMA_Abort_IT+0x3bc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d031      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a63      	ldr	r2, [pc, #396]	@ (8005bf4 <HAL_DMA_Abort_IT+0x3c0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d02c      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a62      	ldr	r2, [pc, #392]	@ (8005bf8 <HAL_DMA_Abort_IT+0x3c4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d027      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a60      	ldr	r2, [pc, #384]	@ (8005bfc <HAL_DMA_Abort_IT+0x3c8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d022      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a5f      	ldr	r2, [pc, #380]	@ (8005c00 <HAL_DMA_Abort_IT+0x3cc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d01d      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a5d      	ldr	r2, [pc, #372]	@ (8005c04 <HAL_DMA_Abort_IT+0x3d0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d018      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a5c      	ldr	r2, [pc, #368]	@ (8005c08 <HAL_DMA_Abort_IT+0x3d4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d013      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a5a      	ldr	r2, [pc, #360]	@ (8005c0c <HAL_DMA_Abort_IT+0x3d8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a59      	ldr	r2, [pc, #356]	@ (8005c10 <HAL_DMA_Abort_IT+0x3dc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d009      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a57      	ldr	r2, [pc, #348]	@ (8005c14 <HAL_DMA_Abort_IT+0x3e0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a56      	ldr	r2, [pc, #344]	@ (8005c18 <HAL_DMA_Abort_IT+0x3e4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d108      	bne.n	8005ad6 <HAL_DMA_Abort_IT+0x2a2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e007      	b.n	8005ae6 <HAL_DMA_Abort_IT+0x2b2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a3c      	ldr	r2, [pc, #240]	@ (8005bdc <HAL_DMA_Abort_IT+0x3a8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d072      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a3a      	ldr	r2, [pc, #232]	@ (8005be0 <HAL_DMA_Abort_IT+0x3ac>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d06d      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a39      	ldr	r2, [pc, #228]	@ (8005be4 <HAL_DMA_Abort_IT+0x3b0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d068      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a37      	ldr	r2, [pc, #220]	@ (8005be8 <HAL_DMA_Abort_IT+0x3b4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d063      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a36      	ldr	r2, [pc, #216]	@ (8005bec <HAL_DMA_Abort_IT+0x3b8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d05e      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a34      	ldr	r2, [pc, #208]	@ (8005bf0 <HAL_DMA_Abort_IT+0x3bc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d059      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a33      	ldr	r2, [pc, #204]	@ (8005bf4 <HAL_DMA_Abort_IT+0x3c0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d054      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a31      	ldr	r2, [pc, #196]	@ (8005bf8 <HAL_DMA_Abort_IT+0x3c4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d04f      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a30      	ldr	r2, [pc, #192]	@ (8005bfc <HAL_DMA_Abort_IT+0x3c8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d04a      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2e      	ldr	r2, [pc, #184]	@ (8005c00 <HAL_DMA_Abort_IT+0x3cc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d045      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c04 <HAL_DMA_Abort_IT+0x3d0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d040      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a2b      	ldr	r2, [pc, #172]	@ (8005c08 <HAL_DMA_Abort_IT+0x3d4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d03b      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2a      	ldr	r2, [pc, #168]	@ (8005c0c <HAL_DMA_Abort_IT+0x3d8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d036      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a28      	ldr	r2, [pc, #160]	@ (8005c10 <HAL_DMA_Abort_IT+0x3dc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d031      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a27      	ldr	r2, [pc, #156]	@ (8005c14 <HAL_DMA_Abort_IT+0x3e0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d02c      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a25      	ldr	r2, [pc, #148]	@ (8005c18 <HAL_DMA_Abort_IT+0x3e4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d027      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a24      	ldr	r2, [pc, #144]	@ (8005c1c <HAL_DMA_Abort_IT+0x3e8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d022      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a22      	ldr	r2, [pc, #136]	@ (8005c20 <HAL_DMA_Abort_IT+0x3ec>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01d      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a21      	ldr	r2, [pc, #132]	@ (8005c24 <HAL_DMA_Abort_IT+0x3f0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d018      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c28 <HAL_DMA_Abort_IT+0x3f4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8005c2c <HAL_DMA_Abort_IT+0x3f8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005c30 <HAL_DMA_Abort_IT+0x3fc>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005c34 <HAL_DMA_Abort_IT+0x400>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a19      	ldr	r2, [pc, #100]	@ (8005c38 <HAL_DMA_Abort_IT+0x404>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d132      	bne.n	8005c3c <HAL_DMA_Abort_IT+0x408>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e031      	b.n	8005c3e <HAL_DMA_Abort_IT+0x40a>
 8005bda:	bf00      	nop
 8005bdc:	40020010 	.word	0x40020010
 8005be0:	40020028 	.word	0x40020028
 8005be4:	40020040 	.word	0x40020040
 8005be8:	40020058 	.word	0x40020058
 8005bec:	40020070 	.word	0x40020070
 8005bf0:	40020088 	.word	0x40020088
 8005bf4:	400200a0 	.word	0x400200a0
 8005bf8:	400200b8 	.word	0x400200b8
 8005bfc:	40020410 	.word	0x40020410
 8005c00:	40020428 	.word	0x40020428
 8005c04:	40020440 	.word	0x40020440
 8005c08:	40020458 	.word	0x40020458
 8005c0c:	40020470 	.word	0x40020470
 8005c10:	40020488 	.word	0x40020488
 8005c14:	400204a0 	.word	0x400204a0
 8005c18:	400204b8 	.word	0x400204b8
 8005c1c:	58025408 	.word	0x58025408
 8005c20:	5802541c 	.word	0x5802541c
 8005c24:	58025430 	.word	0x58025430
 8005c28:	58025444 	.word	0x58025444
 8005c2c:	58025458 	.word	0x58025458
 8005c30:	5802546c 	.word	0x5802546c
 8005c34:	58025480 	.word	0x58025480
 8005c38:	58025494 	.word	0x58025494
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d028      	beq.n	8005c94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2201      	movs	r2, #1
 8005c62:	409a      	lsls	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005c70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00c      	beq.n	8005c94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop

08005cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	@ 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ccc:	4b67      	ldr	r3, [pc, #412]	@ (8005e6c <HAL_DMA_IRQHandler+0x1ac>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a67      	ldr	r2, [pc, #412]	@ (8005e70 <HAL_DMA_IRQHandler+0x1b0>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	0a9b      	lsrs	r3, r3, #10
 8005cd8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cde:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a5f      	ldr	r2, [pc, #380]	@ (8005e74 <HAL_DMA_IRQHandler+0x1b4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d04a      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a5d      	ldr	r2, [pc, #372]	@ (8005e78 <HAL_DMA_IRQHandler+0x1b8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d045      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8005e7c <HAL_DMA_IRQHandler+0x1bc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d040      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a5a      	ldr	r2, [pc, #360]	@ (8005e80 <HAL_DMA_IRQHandler+0x1c0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d03b      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a59      	ldr	r2, [pc, #356]	@ (8005e84 <HAL_DMA_IRQHandler+0x1c4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d036      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a57      	ldr	r2, [pc, #348]	@ (8005e88 <HAL_DMA_IRQHandler+0x1c8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d031      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a56      	ldr	r2, [pc, #344]	@ (8005e8c <HAL_DMA_IRQHandler+0x1cc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d02c      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a54      	ldr	r2, [pc, #336]	@ (8005e90 <HAL_DMA_IRQHandler+0x1d0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d027      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a53      	ldr	r2, [pc, #332]	@ (8005e94 <HAL_DMA_IRQHandler+0x1d4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d022      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a51      	ldr	r2, [pc, #324]	@ (8005e98 <HAL_DMA_IRQHandler+0x1d8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d01d      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a50      	ldr	r2, [pc, #320]	@ (8005e9c <HAL_DMA_IRQHandler+0x1dc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a4e      	ldr	r2, [pc, #312]	@ (8005ea0 <HAL_DMA_IRQHandler+0x1e0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a4d      	ldr	r2, [pc, #308]	@ (8005ea4 <HAL_DMA_IRQHandler+0x1e4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a4b      	ldr	r2, [pc, #300]	@ (8005ea8 <HAL_DMA_IRQHandler+0x1e8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a4a      	ldr	r2, [pc, #296]	@ (8005eac <HAL_DMA_IRQHandler+0x1ec>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a48      	ldr	r2, [pc, #288]	@ (8005eb0 <HAL_DMA_IRQHandler+0x1f0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d101      	bne.n	8005d96 <HAL_DMA_IRQHandler+0xd6>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <HAL_DMA_IRQHandler+0xd8>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 842b 	beq.w	80065f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2208      	movs	r2, #8
 8005da8:	409a      	lsls	r2, r3
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 80a2 	beq.w	8005ef8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e74 <HAL_DMA_IRQHandler+0x1b4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d04a      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005e78 <HAL_DMA_IRQHandler+0x1b8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d045      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8005e7c <HAL_DMA_IRQHandler+0x1bc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d040      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8005e80 <HAL_DMA_IRQHandler+0x1c0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d03b      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a28      	ldr	r2, [pc, #160]	@ (8005e84 <HAL_DMA_IRQHandler+0x1c4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d036      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a27      	ldr	r2, [pc, #156]	@ (8005e88 <HAL_DMA_IRQHandler+0x1c8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d031      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a25      	ldr	r2, [pc, #148]	@ (8005e8c <HAL_DMA_IRQHandler+0x1cc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d02c      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a24      	ldr	r2, [pc, #144]	@ (8005e90 <HAL_DMA_IRQHandler+0x1d0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d027      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a22      	ldr	r2, [pc, #136]	@ (8005e94 <HAL_DMA_IRQHandler+0x1d4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d022      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a21      	ldr	r2, [pc, #132]	@ (8005e98 <HAL_DMA_IRQHandler+0x1d8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d01d      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8005e9c <HAL_DMA_IRQHandler+0x1dc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d018      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1e      	ldr	r2, [pc, #120]	@ (8005ea0 <HAL_DMA_IRQHandler+0x1e0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d013      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea4 <HAL_DMA_IRQHandler+0x1e4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00e      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea8 <HAL_DMA_IRQHandler+0x1e8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a19      	ldr	r2, [pc, #100]	@ (8005eac <HAL_DMA_IRQHandler+0x1ec>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <HAL_DMA_IRQHandler+0x1f0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d12f      	bne.n	8005eb4 <HAL_DMA_IRQHandler+0x1f4>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bf14      	ite	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	2300      	moveq	r3, #0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	e02e      	b.n	8005ec8 <HAL_DMA_IRQHandler+0x208>
 8005e6a:	bf00      	nop
 8005e6c:	24000004 	.word	0x24000004
 8005e70:	1b4e81b5 	.word	0x1b4e81b5
 8005e74:	40020010 	.word	0x40020010
 8005e78:	40020028 	.word	0x40020028
 8005e7c:	40020040 	.word	0x40020040
 8005e80:	40020058 	.word	0x40020058
 8005e84:	40020070 	.word	0x40020070
 8005e88:	40020088 	.word	0x40020088
 8005e8c:	400200a0 	.word	0x400200a0
 8005e90:	400200b8 	.word	0x400200b8
 8005e94:	40020410 	.word	0x40020410
 8005e98:	40020428 	.word	0x40020428
 8005e9c:	40020440 	.word	0x40020440
 8005ea0:	40020458 	.word	0x40020458
 8005ea4:	40020470 	.word	0x40020470
 8005ea8:	40020488 	.word	0x40020488
 8005eac:	400204a0 	.word	0x400204a0
 8005eb0:	400204b8 	.word	0x400204b8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bf14      	ite	ne
 8005ec2:	2301      	movne	r3, #1
 8005ec4:	2300      	moveq	r3, #0
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d015      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005efc:	f003 031f 	and.w	r3, r3, #31
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d06e      	beq.n	8005fec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a69      	ldr	r2, [pc, #420]	@ (80060b8 <HAL_DMA_IRQHandler+0x3f8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d04a      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a67      	ldr	r2, [pc, #412]	@ (80060bc <HAL_DMA_IRQHandler+0x3fc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d045      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a66      	ldr	r2, [pc, #408]	@ (80060c0 <HAL_DMA_IRQHandler+0x400>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d040      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a64      	ldr	r2, [pc, #400]	@ (80060c4 <HAL_DMA_IRQHandler+0x404>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d03b      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a63      	ldr	r2, [pc, #396]	@ (80060c8 <HAL_DMA_IRQHandler+0x408>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d036      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a61      	ldr	r2, [pc, #388]	@ (80060cc <HAL_DMA_IRQHandler+0x40c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d031      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a60      	ldr	r2, [pc, #384]	@ (80060d0 <HAL_DMA_IRQHandler+0x410>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d02c      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a5e      	ldr	r2, [pc, #376]	@ (80060d4 <HAL_DMA_IRQHandler+0x414>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d027      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a5d      	ldr	r2, [pc, #372]	@ (80060d8 <HAL_DMA_IRQHandler+0x418>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d022      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a5b      	ldr	r2, [pc, #364]	@ (80060dc <HAL_DMA_IRQHandler+0x41c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01d      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a5a      	ldr	r2, [pc, #360]	@ (80060e0 <HAL_DMA_IRQHandler+0x420>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d018      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a58      	ldr	r2, [pc, #352]	@ (80060e4 <HAL_DMA_IRQHandler+0x424>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a57      	ldr	r2, [pc, #348]	@ (80060e8 <HAL_DMA_IRQHandler+0x428>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00e      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a55      	ldr	r2, [pc, #340]	@ (80060ec <HAL_DMA_IRQHandler+0x42c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d009      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a54      	ldr	r2, [pc, #336]	@ (80060f0 <HAL_DMA_IRQHandler+0x430>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a52      	ldr	r2, [pc, #328]	@ (80060f4 <HAL_DMA_IRQHandler+0x434>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d10a      	bne.n	8005fc4 <HAL_DMA_IRQHandler+0x304>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e003      	b.n	8005fcc <HAL_DMA_IRQHandler+0x30c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00d      	beq.n	8005fec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2201      	movs	r2, #1
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe4:	f043 0202 	orr.w	r2, r3, #2
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 808f 	beq.w	8006120 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <HAL_DMA_IRQHandler+0x3f8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d04a      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2a      	ldr	r2, [pc, #168]	@ (80060bc <HAL_DMA_IRQHandler+0x3fc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d045      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a29      	ldr	r2, [pc, #164]	@ (80060c0 <HAL_DMA_IRQHandler+0x400>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d040      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a27      	ldr	r2, [pc, #156]	@ (80060c4 <HAL_DMA_IRQHandler+0x404>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d03b      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a26      	ldr	r2, [pc, #152]	@ (80060c8 <HAL_DMA_IRQHandler+0x408>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d036      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a24      	ldr	r2, [pc, #144]	@ (80060cc <HAL_DMA_IRQHandler+0x40c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d031      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <HAL_DMA_IRQHandler+0x410>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d02c      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a21      	ldr	r2, [pc, #132]	@ (80060d4 <HAL_DMA_IRQHandler+0x414>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d027      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a20      	ldr	r2, [pc, #128]	@ (80060d8 <HAL_DMA_IRQHandler+0x418>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d022      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1e      	ldr	r2, [pc, #120]	@ (80060dc <HAL_DMA_IRQHandler+0x41c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01d      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1d      	ldr	r2, [pc, #116]	@ (80060e0 <HAL_DMA_IRQHandler+0x420>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d018      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1b      	ldr	r2, [pc, #108]	@ (80060e4 <HAL_DMA_IRQHandler+0x424>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1a      	ldr	r2, [pc, #104]	@ (80060e8 <HAL_DMA_IRQHandler+0x428>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00e      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a18      	ldr	r2, [pc, #96]	@ (80060ec <HAL_DMA_IRQHandler+0x42c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d009      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a17      	ldr	r2, [pc, #92]	@ (80060f0 <HAL_DMA_IRQHandler+0x430>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d004      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a15      	ldr	r2, [pc, #84]	@ (80060f4 <HAL_DMA_IRQHandler+0x434>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d12a      	bne.n	80060f8 <HAL_DMA_IRQHandler+0x438>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e023      	b.n	8006100 <HAL_DMA_IRQHandler+0x440>
 80060b8:	40020010 	.word	0x40020010
 80060bc:	40020028 	.word	0x40020028
 80060c0:	40020040 	.word	0x40020040
 80060c4:	40020058 	.word	0x40020058
 80060c8:	40020070 	.word	0x40020070
 80060cc:	40020088 	.word	0x40020088
 80060d0:	400200a0 	.word	0x400200a0
 80060d4:	400200b8 	.word	0x400200b8
 80060d8:	40020410 	.word	0x40020410
 80060dc:	40020428 	.word	0x40020428
 80060e0:	40020440 	.word	0x40020440
 80060e4:	40020458 	.word	0x40020458
 80060e8:	40020470 	.word	0x40020470
 80060ec:	40020488 	.word	0x40020488
 80060f0:	400204a0 	.word	0x400204a0
 80060f4:	400204b8 	.word	0x400204b8
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00d      	beq.n	8006120 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	2204      	movs	r2, #4
 800610e:	409a      	lsls	r2, r3
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006118:	f043 0204 	orr.w	r2, r3, #4
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006124:	f003 031f 	and.w	r3, r3, #31
 8006128:	2210      	movs	r2, #16
 800612a:	409a      	lsls	r2, r3
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	4013      	ands	r3, r2
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80a6 	beq.w	8006282 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a85      	ldr	r2, [pc, #532]	@ (8006350 <HAL_DMA_IRQHandler+0x690>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d04a      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a83      	ldr	r2, [pc, #524]	@ (8006354 <HAL_DMA_IRQHandler+0x694>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d045      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a82      	ldr	r2, [pc, #520]	@ (8006358 <HAL_DMA_IRQHandler+0x698>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d040      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a80      	ldr	r2, [pc, #512]	@ (800635c <HAL_DMA_IRQHandler+0x69c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d03b      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a7f      	ldr	r2, [pc, #508]	@ (8006360 <HAL_DMA_IRQHandler+0x6a0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d036      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a7d      	ldr	r2, [pc, #500]	@ (8006364 <HAL_DMA_IRQHandler+0x6a4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d031      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a7c      	ldr	r2, [pc, #496]	@ (8006368 <HAL_DMA_IRQHandler+0x6a8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d02c      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a7a      	ldr	r2, [pc, #488]	@ (800636c <HAL_DMA_IRQHandler+0x6ac>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d027      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a79      	ldr	r2, [pc, #484]	@ (8006370 <HAL_DMA_IRQHandler+0x6b0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d022      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a77      	ldr	r2, [pc, #476]	@ (8006374 <HAL_DMA_IRQHandler+0x6b4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d01d      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a76      	ldr	r2, [pc, #472]	@ (8006378 <HAL_DMA_IRQHandler+0x6b8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d018      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a74      	ldr	r2, [pc, #464]	@ (800637c <HAL_DMA_IRQHandler+0x6bc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a73      	ldr	r2, [pc, #460]	@ (8006380 <HAL_DMA_IRQHandler+0x6c0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00e      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a71      	ldr	r2, [pc, #452]	@ (8006384 <HAL_DMA_IRQHandler+0x6c4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d009      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a70      	ldr	r2, [pc, #448]	@ (8006388 <HAL_DMA_IRQHandler+0x6c8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d004      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a6e      	ldr	r2, [pc, #440]	@ (800638c <HAL_DMA_IRQHandler+0x6cc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10a      	bne.n	80061ec <HAL_DMA_IRQHandler+0x52c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	bf14      	ite	ne
 80061e4:	2301      	movne	r3, #1
 80061e6:	2300      	moveq	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	e009      	b.n	8006200 <HAL_DMA_IRQHandler+0x540>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d03e      	beq.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	2210      	movs	r2, #16
 800620e:	409a      	lsls	r2, r3
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d018      	beq.n	8006254 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d108      	bne.n	8006242 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d024      	beq.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4798      	blx	r3
 8006240:	e01f      	b.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01b      	beq.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	4798      	blx	r3
 8006252:	e016      	b.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d107      	bne.n	8006272 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0208 	bic.w	r2, r2, #8
 8006270:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	2220      	movs	r2, #32
 800628c:	409a      	lsls	r2, r3
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8110 	beq.w	80064b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2c      	ldr	r2, [pc, #176]	@ (8006350 <HAL_DMA_IRQHandler+0x690>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d04a      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006354 <HAL_DMA_IRQHandler+0x694>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d045      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a29      	ldr	r2, [pc, #164]	@ (8006358 <HAL_DMA_IRQHandler+0x698>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d040      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a28      	ldr	r2, [pc, #160]	@ (800635c <HAL_DMA_IRQHandler+0x69c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d03b      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a26      	ldr	r2, [pc, #152]	@ (8006360 <HAL_DMA_IRQHandler+0x6a0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d036      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a25      	ldr	r2, [pc, #148]	@ (8006364 <HAL_DMA_IRQHandler+0x6a4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d031      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a23      	ldr	r2, [pc, #140]	@ (8006368 <HAL_DMA_IRQHandler+0x6a8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d02c      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a22      	ldr	r2, [pc, #136]	@ (800636c <HAL_DMA_IRQHandler+0x6ac>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d027      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a20      	ldr	r2, [pc, #128]	@ (8006370 <HAL_DMA_IRQHandler+0x6b0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d022      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006374 <HAL_DMA_IRQHandler+0x6b4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d01d      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1d      	ldr	r2, [pc, #116]	@ (8006378 <HAL_DMA_IRQHandler+0x6b8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d018      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1c      	ldr	r2, [pc, #112]	@ (800637c <HAL_DMA_IRQHandler+0x6bc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1a      	ldr	r2, [pc, #104]	@ (8006380 <HAL_DMA_IRQHandler+0x6c0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00e      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a19      	ldr	r2, [pc, #100]	@ (8006384 <HAL_DMA_IRQHandler+0x6c4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d009      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a17      	ldr	r2, [pc, #92]	@ (8006388 <HAL_DMA_IRQHandler+0x6c8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a16      	ldr	r2, [pc, #88]	@ (800638c <HAL_DMA_IRQHandler+0x6cc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d12b      	bne.n	8006390 <HAL_DMA_IRQHandler+0x6d0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0310 	and.w	r3, r3, #16
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf14      	ite	ne
 8006346:	2301      	movne	r3, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	e02a      	b.n	80063a4 <HAL_DMA_IRQHandler+0x6e4>
 800634e:	bf00      	nop
 8006350:	40020010 	.word	0x40020010
 8006354:	40020028 	.word	0x40020028
 8006358:	40020040 	.word	0x40020040
 800635c:	40020058 	.word	0x40020058
 8006360:	40020070 	.word	0x40020070
 8006364:	40020088 	.word	0x40020088
 8006368:	400200a0 	.word	0x400200a0
 800636c:	400200b8 	.word	0x400200b8
 8006370:	40020410 	.word	0x40020410
 8006374:	40020428 	.word	0x40020428
 8006378:	40020440 	.word	0x40020440
 800637c:	40020458 	.word	0x40020458
 8006380:	40020470 	.word	0x40020470
 8006384:	40020488 	.word	0x40020488
 8006388:	400204a0 	.word	0x400204a0
 800638c:	400204b8 	.word	0x400204b8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8087 	beq.w	80064b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2220      	movs	r2, #32
 80063b4:	409a      	lsls	r2, r3
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d139      	bne.n	800643a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0216 	bic.w	r2, r2, #22
 80063d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695a      	ldr	r2, [r3, #20]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d103      	bne.n	80063f6 <HAL_DMA_IRQHandler+0x736>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0208 	bic.w	r2, r2, #8
 8006404:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	223f      	movs	r2, #63	@ 0x3f
 8006410:	409a      	lsls	r2, r3
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 8382 	beq.w	8006b34 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
          }
          return;
 8006438:	e37c      	b.n	8006b34 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d018      	beq.n	800647a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d108      	bne.n	8006468 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645a:	2b00      	cmp	r3, #0
 800645c:	d02c      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
 8006466:	e027      	b.n	80064b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d023      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4798      	blx	r3
 8006478:	e01e      	b.n	80064b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10f      	bne.n	80064a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0210 	bic.w	r2, r2, #16
 8006496:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 833e 	beq.w	8006b3e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8088 	beq.w	80065e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2204      	movs	r2, #4
 80064d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a89      	ldr	r2, [pc, #548]	@ (8006704 <HAL_DMA_IRQHandler+0xa44>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d04a      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a88      	ldr	r2, [pc, #544]	@ (8006708 <HAL_DMA_IRQHandler+0xa48>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d045      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a86      	ldr	r2, [pc, #536]	@ (800670c <HAL_DMA_IRQHandler+0xa4c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d040      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a85      	ldr	r2, [pc, #532]	@ (8006710 <HAL_DMA_IRQHandler+0xa50>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d03b      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a83      	ldr	r2, [pc, #524]	@ (8006714 <HAL_DMA_IRQHandler+0xa54>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d036      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a82      	ldr	r2, [pc, #520]	@ (8006718 <HAL_DMA_IRQHandler+0xa58>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d031      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a80      	ldr	r2, [pc, #512]	@ (800671c <HAL_DMA_IRQHandler+0xa5c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d02c      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a7f      	ldr	r2, [pc, #508]	@ (8006720 <HAL_DMA_IRQHandler+0xa60>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d027      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a7d      	ldr	r2, [pc, #500]	@ (8006724 <HAL_DMA_IRQHandler+0xa64>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d022      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a7c      	ldr	r2, [pc, #496]	@ (8006728 <HAL_DMA_IRQHandler+0xa68>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d01d      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a7a      	ldr	r2, [pc, #488]	@ (800672c <HAL_DMA_IRQHandler+0xa6c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d018      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a79      	ldr	r2, [pc, #484]	@ (8006730 <HAL_DMA_IRQHandler+0xa70>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d013      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a77      	ldr	r2, [pc, #476]	@ (8006734 <HAL_DMA_IRQHandler+0xa74>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a76      	ldr	r2, [pc, #472]	@ (8006738 <HAL_DMA_IRQHandler+0xa78>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d009      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a74      	ldr	r2, [pc, #464]	@ (800673c <HAL_DMA_IRQHandler+0xa7c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a73      	ldr	r2, [pc, #460]	@ (8006740 <HAL_DMA_IRQHandler+0xa80>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d108      	bne.n	800658a <HAL_DMA_IRQHandler+0x8ca>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e007      	b.n	800659a <HAL_DMA_IRQHandler+0x8da>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3301      	adds	r3, #1
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d307      	bcc.n	80065b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f2      	bne.n	800659a <HAL_DMA_IRQHandler+0x8da>
 80065b4:	e000      	b.n	80065b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80065b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2203      	movs	r2, #3
 80065ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80065ce:	e003      	b.n	80065d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 82aa 	beq.w	8006b3e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
 80065f2:	e2a4      	b.n	8006b3e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a52      	ldr	r2, [pc, #328]	@ (8006744 <HAL_DMA_IRQHandler+0xa84>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d04a      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a51      	ldr	r2, [pc, #324]	@ (8006748 <HAL_DMA_IRQHandler+0xa88>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d045      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a4f      	ldr	r2, [pc, #316]	@ (800674c <HAL_DMA_IRQHandler+0xa8c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d040      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a4e      	ldr	r2, [pc, #312]	@ (8006750 <HAL_DMA_IRQHandler+0xa90>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d03b      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a4c      	ldr	r2, [pc, #304]	@ (8006754 <HAL_DMA_IRQHandler+0xa94>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d036      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a4b      	ldr	r2, [pc, #300]	@ (8006758 <HAL_DMA_IRQHandler+0xa98>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d031      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a49      	ldr	r2, [pc, #292]	@ (800675c <HAL_DMA_IRQHandler+0xa9c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d02c      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a48      	ldr	r2, [pc, #288]	@ (8006760 <HAL_DMA_IRQHandler+0xaa0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d027      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a46      	ldr	r2, [pc, #280]	@ (8006764 <HAL_DMA_IRQHandler+0xaa4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d022      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a45      	ldr	r2, [pc, #276]	@ (8006768 <HAL_DMA_IRQHandler+0xaa8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d01d      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a43      	ldr	r2, [pc, #268]	@ (800676c <HAL_DMA_IRQHandler+0xaac>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d018      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a42      	ldr	r2, [pc, #264]	@ (8006770 <HAL_DMA_IRQHandler+0xab0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d013      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a40      	ldr	r2, [pc, #256]	@ (8006774 <HAL_DMA_IRQHandler+0xab4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00e      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a3f      	ldr	r2, [pc, #252]	@ (8006778 <HAL_DMA_IRQHandler+0xab8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d009      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a3d      	ldr	r2, [pc, #244]	@ (800677c <HAL_DMA_IRQHandler+0xabc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_DMA_IRQHandler+0x9d4>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a3c      	ldr	r2, [pc, #240]	@ (8006780 <HAL_DMA_IRQHandler+0xac0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d101      	bne.n	8006698 <HAL_DMA_IRQHandler+0x9d8>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <HAL_DMA_IRQHandler+0x9da>
 8006698:	2300      	movs	r3, #0
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 824f 	beq.w	8006b3e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	2204      	movs	r2, #4
 80066b2:	409a      	lsls	r2, r3
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80dd 	beq.w	8006878 <HAL_DMA_IRQHandler+0xbb8>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80d7 	beq.w	8006878 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2204      	movs	r2, #4
 80066d4:	409a      	lsls	r2, r3
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d059      	beq.n	8006798 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d14a      	bne.n	8006784 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8220 	beq.w	8006b38 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006700:	e21a      	b.n	8006b38 <HAL_DMA_IRQHandler+0xe78>
 8006702:	bf00      	nop
 8006704:	40020010 	.word	0x40020010
 8006708:	40020028 	.word	0x40020028
 800670c:	40020040 	.word	0x40020040
 8006710:	40020058 	.word	0x40020058
 8006714:	40020070 	.word	0x40020070
 8006718:	40020088 	.word	0x40020088
 800671c:	400200a0 	.word	0x400200a0
 8006720:	400200b8 	.word	0x400200b8
 8006724:	40020410 	.word	0x40020410
 8006728:	40020428 	.word	0x40020428
 800672c:	40020440 	.word	0x40020440
 8006730:	40020458 	.word	0x40020458
 8006734:	40020470 	.word	0x40020470
 8006738:	40020488 	.word	0x40020488
 800673c:	400204a0 	.word	0x400204a0
 8006740:	400204b8 	.word	0x400204b8
 8006744:	48022c08 	.word	0x48022c08
 8006748:	48022c1c 	.word	0x48022c1c
 800674c:	48022c30 	.word	0x48022c30
 8006750:	48022c44 	.word	0x48022c44
 8006754:	48022c58 	.word	0x48022c58
 8006758:	48022c6c 	.word	0x48022c6c
 800675c:	48022c80 	.word	0x48022c80
 8006760:	48022c94 	.word	0x48022c94
 8006764:	58025408 	.word	0x58025408
 8006768:	5802541c 	.word	0x5802541c
 800676c:	58025430 	.word	0x58025430
 8006770:	58025444 	.word	0x58025444
 8006774:	58025458 	.word	0x58025458
 8006778:	5802546c 	.word	0x5802546c
 800677c:	58025480 	.word	0x58025480
 8006780:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 81d5 	beq.w	8006b38 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006796:	e1cf      	b.n	8006b38 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d160      	bne.n	8006864 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a7f      	ldr	r2, [pc, #508]	@ (80069a4 <HAL_DMA_IRQHandler+0xce4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d04a      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a7d      	ldr	r2, [pc, #500]	@ (80069a8 <HAL_DMA_IRQHandler+0xce8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d045      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a7c      	ldr	r2, [pc, #496]	@ (80069ac <HAL_DMA_IRQHandler+0xcec>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d040      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a7a      	ldr	r2, [pc, #488]	@ (80069b0 <HAL_DMA_IRQHandler+0xcf0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d03b      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a79      	ldr	r2, [pc, #484]	@ (80069b4 <HAL_DMA_IRQHandler+0xcf4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d036      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a77      	ldr	r2, [pc, #476]	@ (80069b8 <HAL_DMA_IRQHandler+0xcf8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d031      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a76      	ldr	r2, [pc, #472]	@ (80069bc <HAL_DMA_IRQHandler+0xcfc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d02c      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a74      	ldr	r2, [pc, #464]	@ (80069c0 <HAL_DMA_IRQHandler+0xd00>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d027      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a73      	ldr	r2, [pc, #460]	@ (80069c4 <HAL_DMA_IRQHandler+0xd04>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d022      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a71      	ldr	r2, [pc, #452]	@ (80069c8 <HAL_DMA_IRQHandler+0xd08>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d01d      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a70      	ldr	r2, [pc, #448]	@ (80069cc <HAL_DMA_IRQHandler+0xd0c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d018      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a6e      	ldr	r2, [pc, #440]	@ (80069d0 <HAL_DMA_IRQHandler+0xd10>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a6d      	ldr	r2, [pc, #436]	@ (80069d4 <HAL_DMA_IRQHandler+0xd14>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00e      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a6b      	ldr	r2, [pc, #428]	@ (80069d8 <HAL_DMA_IRQHandler+0xd18>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d009      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a6a      	ldr	r2, [pc, #424]	@ (80069dc <HAL_DMA_IRQHandler+0xd1c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d004      	beq.n	8006842 <HAL_DMA_IRQHandler+0xb82>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a68      	ldr	r2, [pc, #416]	@ (80069e0 <HAL_DMA_IRQHandler+0xd20>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d108      	bne.n	8006854 <HAL_DMA_IRQHandler+0xb94>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0208 	bic.w	r2, r2, #8
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	e007      	b.n	8006864 <HAL_DMA_IRQHandler+0xba4>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0204 	bic.w	r2, r2, #4
 8006862:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8165 	beq.w	8006b38 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006876:	e15f      	b.n	8006b38 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	2202      	movs	r2, #2
 8006882:	409a      	lsls	r2, r3
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4013      	ands	r3, r2
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 80c5 	beq.w	8006a18 <HAL_DMA_IRQHandler+0xd58>
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 80bf 	beq.w	8006a18 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2202      	movs	r2, #2
 80068a4:	409a      	lsls	r2, r3
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d018      	beq.n	80068e6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d109      	bne.n	80068d2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 813a 	beq.w	8006b3c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068d0:	e134      	b.n	8006b3c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8130 	beq.w	8006b3c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068e4:	e12a      	b.n	8006b3c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f003 0320 	and.w	r3, r3, #32
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 8089 	bne.w	8006a04 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a2b      	ldr	r2, [pc, #172]	@ (80069a4 <HAL_DMA_IRQHandler+0xce4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d04a      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a29      	ldr	r2, [pc, #164]	@ (80069a8 <HAL_DMA_IRQHandler+0xce8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d045      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a28      	ldr	r2, [pc, #160]	@ (80069ac <HAL_DMA_IRQHandler+0xcec>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d040      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a26      	ldr	r2, [pc, #152]	@ (80069b0 <HAL_DMA_IRQHandler+0xcf0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d03b      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a25      	ldr	r2, [pc, #148]	@ (80069b4 <HAL_DMA_IRQHandler+0xcf4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d036      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a23      	ldr	r2, [pc, #140]	@ (80069b8 <HAL_DMA_IRQHandler+0xcf8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d031      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a22      	ldr	r2, [pc, #136]	@ (80069bc <HAL_DMA_IRQHandler+0xcfc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d02c      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a20      	ldr	r2, [pc, #128]	@ (80069c0 <HAL_DMA_IRQHandler+0xd00>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d027      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1f      	ldr	r2, [pc, #124]	@ (80069c4 <HAL_DMA_IRQHandler+0xd04>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d022      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1d      	ldr	r2, [pc, #116]	@ (80069c8 <HAL_DMA_IRQHandler+0xd08>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01d      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1c      	ldr	r2, [pc, #112]	@ (80069cc <HAL_DMA_IRQHandler+0xd0c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d018      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1a      	ldr	r2, [pc, #104]	@ (80069d0 <HAL_DMA_IRQHandler+0xd10>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d013      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a19      	ldr	r2, [pc, #100]	@ (80069d4 <HAL_DMA_IRQHandler+0xd14>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00e      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a17      	ldr	r2, [pc, #92]	@ (80069d8 <HAL_DMA_IRQHandler+0xd18>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d009      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a16      	ldr	r2, [pc, #88]	@ (80069dc <HAL_DMA_IRQHandler+0xd1c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d004      	beq.n	8006992 <HAL_DMA_IRQHandler+0xcd2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a14      	ldr	r2, [pc, #80]	@ (80069e0 <HAL_DMA_IRQHandler+0xd20>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d128      	bne.n	80069e4 <HAL_DMA_IRQHandler+0xd24>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0214 	bic.w	r2, r2, #20
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	e027      	b.n	80069f4 <HAL_DMA_IRQHandler+0xd34>
 80069a4:	40020010 	.word	0x40020010
 80069a8:	40020028 	.word	0x40020028
 80069ac:	40020040 	.word	0x40020040
 80069b0:	40020058 	.word	0x40020058
 80069b4:	40020070 	.word	0x40020070
 80069b8:	40020088 	.word	0x40020088
 80069bc:	400200a0 	.word	0x400200a0
 80069c0:	400200b8 	.word	0x400200b8
 80069c4:	40020410 	.word	0x40020410
 80069c8:	40020428 	.word	0x40020428
 80069cc:	40020440 	.word	0x40020440
 80069d0:	40020458 	.word	0x40020458
 80069d4:	40020470 	.word	0x40020470
 80069d8:	40020488 	.word	0x40020488
 80069dc:	400204a0 	.word	0x400204a0
 80069e0:	400204b8 	.word	0x400204b8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 020a 	bic.w	r2, r2, #10
 80069f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8097 	beq.w	8006b3c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a16:	e091      	b.n	8006b3c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	2208      	movs	r2, #8
 8006a22:	409a      	lsls	r2, r3
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8088 	beq.w	8006b3e <HAL_DMA_IRQHandler+0xe7e>
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8082 	beq.w	8006b3e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a41      	ldr	r2, [pc, #260]	@ (8006b44 <HAL_DMA_IRQHandler+0xe84>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d04a      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a3f      	ldr	r2, [pc, #252]	@ (8006b48 <HAL_DMA_IRQHandler+0xe88>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d045      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a3e      	ldr	r2, [pc, #248]	@ (8006b4c <HAL_DMA_IRQHandler+0xe8c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d040      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a3c      	ldr	r2, [pc, #240]	@ (8006b50 <HAL_DMA_IRQHandler+0xe90>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d03b      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a3b      	ldr	r2, [pc, #236]	@ (8006b54 <HAL_DMA_IRQHandler+0xe94>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d036      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a39      	ldr	r2, [pc, #228]	@ (8006b58 <HAL_DMA_IRQHandler+0xe98>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d031      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a38      	ldr	r2, [pc, #224]	@ (8006b5c <HAL_DMA_IRQHandler+0xe9c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d02c      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a36      	ldr	r2, [pc, #216]	@ (8006b60 <HAL_DMA_IRQHandler+0xea0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d027      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a35      	ldr	r2, [pc, #212]	@ (8006b64 <HAL_DMA_IRQHandler+0xea4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d022      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a33      	ldr	r2, [pc, #204]	@ (8006b68 <HAL_DMA_IRQHandler+0xea8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d01d      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a32      	ldr	r2, [pc, #200]	@ (8006b6c <HAL_DMA_IRQHandler+0xeac>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d018      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a30      	ldr	r2, [pc, #192]	@ (8006b70 <HAL_DMA_IRQHandler+0xeb0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8006b74 <HAL_DMA_IRQHandler+0xeb4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b78 <HAL_DMA_IRQHandler+0xeb8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a2c      	ldr	r2, [pc, #176]	@ (8006b7c <HAL_DMA_IRQHandler+0xebc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_DMA_IRQHandler+0xe1a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8006b80 <HAL_DMA_IRQHandler+0xec0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d108      	bne.n	8006aec <HAL_DMA_IRQHandler+0xe2c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 021c 	bic.w	r2, r2, #28
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	e007      	b.n	8006afc <HAL_DMA_IRQHandler+0xe3c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 020e 	bic.w	r2, r2, #14
 8006afa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b00:	f003 031f 	and.w	r3, r3, #31
 8006b04:	2201      	movs	r2, #1
 8006b06:	409a      	lsls	r2, r3
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
 8006b32:	e004      	b.n	8006b3e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006b34:	bf00      	nop
 8006b36:	e002      	b.n	8006b3e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b38:	bf00      	nop
 8006b3a:	e000      	b.n	8006b3e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b3c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b3e:	3728      	adds	r7, #40	@ 0x28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40020010 	.word	0x40020010
 8006b48:	40020028 	.word	0x40020028
 8006b4c:	40020040 	.word	0x40020040
 8006b50:	40020058 	.word	0x40020058
 8006b54:	40020070 	.word	0x40020070
 8006b58:	40020088 	.word	0x40020088
 8006b5c:	400200a0 	.word	0x400200a0
 8006b60:	400200b8 	.word	0x400200b8
 8006b64:	40020410 	.word	0x40020410
 8006b68:	40020428 	.word	0x40020428
 8006b6c:	40020440 	.word	0x40020440
 8006b70:	40020458 	.word	0x40020458
 8006b74:	40020470 	.word	0x40020470
 8006b78:	40020488 	.word	0x40020488
 8006b7c:	400204a0 	.word	0x400204a0
 8006b80:	400204b8 	.word	0x400204b8

08006b84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b96:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a7f      	ldr	r2, [pc, #508]	@ (8006da0 <DMA_SetConfig+0x21c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d072      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a7d      	ldr	r2, [pc, #500]	@ (8006da4 <DMA_SetConfig+0x220>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d06d      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8006da8 <DMA_SetConfig+0x224>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d068      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a7a      	ldr	r2, [pc, #488]	@ (8006dac <DMA_SetConfig+0x228>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d063      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a79      	ldr	r2, [pc, #484]	@ (8006db0 <DMA_SetConfig+0x22c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d05e      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a77      	ldr	r2, [pc, #476]	@ (8006db4 <DMA_SetConfig+0x230>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d059      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a76      	ldr	r2, [pc, #472]	@ (8006db8 <DMA_SetConfig+0x234>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d054      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a74      	ldr	r2, [pc, #464]	@ (8006dbc <DMA_SetConfig+0x238>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d04f      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a73      	ldr	r2, [pc, #460]	@ (8006dc0 <DMA_SetConfig+0x23c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d04a      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a71      	ldr	r2, [pc, #452]	@ (8006dc4 <DMA_SetConfig+0x240>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d045      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a70      	ldr	r2, [pc, #448]	@ (8006dc8 <DMA_SetConfig+0x244>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d040      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a6e      	ldr	r2, [pc, #440]	@ (8006dcc <DMA_SetConfig+0x248>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d03b      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a6d      	ldr	r2, [pc, #436]	@ (8006dd0 <DMA_SetConfig+0x24c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d036      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a6b      	ldr	r2, [pc, #428]	@ (8006dd4 <DMA_SetConfig+0x250>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d031      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a6a      	ldr	r2, [pc, #424]	@ (8006dd8 <DMA_SetConfig+0x254>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d02c      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a68      	ldr	r2, [pc, #416]	@ (8006ddc <DMA_SetConfig+0x258>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d027      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a67      	ldr	r2, [pc, #412]	@ (8006de0 <DMA_SetConfig+0x25c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d022      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a65      	ldr	r2, [pc, #404]	@ (8006de4 <DMA_SetConfig+0x260>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01d      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a64      	ldr	r2, [pc, #400]	@ (8006de8 <DMA_SetConfig+0x264>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d018      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a62      	ldr	r2, [pc, #392]	@ (8006dec <DMA_SetConfig+0x268>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d013      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a61      	ldr	r2, [pc, #388]	@ (8006df0 <DMA_SetConfig+0x26c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00e      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a5f      	ldr	r2, [pc, #380]	@ (8006df4 <DMA_SetConfig+0x270>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d009      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a5e      	ldr	r2, [pc, #376]	@ (8006df8 <DMA_SetConfig+0x274>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d004      	beq.n	8006c8e <DMA_SetConfig+0x10a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a5c      	ldr	r2, [pc, #368]	@ (8006dfc <DMA_SetConfig+0x278>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d101      	bne.n	8006c92 <DMA_SetConfig+0x10e>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <DMA_SetConfig+0x110>
 8006c92:	2300      	movs	r3, #0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00d      	beq.n	8006cb4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006ca0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006cb2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a39      	ldr	r2, [pc, #228]	@ (8006da0 <DMA_SetConfig+0x21c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d04a      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a38      	ldr	r2, [pc, #224]	@ (8006da4 <DMA_SetConfig+0x220>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d045      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a36      	ldr	r2, [pc, #216]	@ (8006da8 <DMA_SetConfig+0x224>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d040      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a35      	ldr	r2, [pc, #212]	@ (8006dac <DMA_SetConfig+0x228>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d03b      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a33      	ldr	r2, [pc, #204]	@ (8006db0 <DMA_SetConfig+0x22c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d036      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a32      	ldr	r2, [pc, #200]	@ (8006db4 <DMA_SetConfig+0x230>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d031      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a30      	ldr	r2, [pc, #192]	@ (8006db8 <DMA_SetConfig+0x234>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d02c      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8006dbc <DMA_SetConfig+0x238>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d027      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a2d      	ldr	r2, [pc, #180]	@ (8006dc0 <DMA_SetConfig+0x23c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d022      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a2c      	ldr	r2, [pc, #176]	@ (8006dc4 <DMA_SetConfig+0x240>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d01d      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc8 <DMA_SetConfig+0x244>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d018      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a29      	ldr	r2, [pc, #164]	@ (8006dcc <DMA_SetConfig+0x248>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d013      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a27      	ldr	r2, [pc, #156]	@ (8006dd0 <DMA_SetConfig+0x24c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d00e      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a26      	ldr	r2, [pc, #152]	@ (8006dd4 <DMA_SetConfig+0x250>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d009      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a24      	ldr	r2, [pc, #144]	@ (8006dd8 <DMA_SetConfig+0x254>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d004      	beq.n	8006d54 <DMA_SetConfig+0x1d0>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a23      	ldr	r2, [pc, #140]	@ (8006ddc <DMA_SetConfig+0x258>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d101      	bne.n	8006d58 <DMA_SetConfig+0x1d4>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e000      	b.n	8006d5a <DMA_SetConfig+0x1d6>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d059      	beq.n	8006e12 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	223f      	movs	r2, #63	@ 0x3f
 8006d68:	409a      	lsls	r2, r3
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d7c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2b40      	cmp	r3, #64	@ 0x40
 8006d8c:	d138      	bne.n	8006e00 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d9e:	e0ae      	b.n	8006efe <DMA_SetConfig+0x37a>
 8006da0:	40020010 	.word	0x40020010
 8006da4:	40020028 	.word	0x40020028
 8006da8:	40020040 	.word	0x40020040
 8006dac:	40020058 	.word	0x40020058
 8006db0:	40020070 	.word	0x40020070
 8006db4:	40020088 	.word	0x40020088
 8006db8:	400200a0 	.word	0x400200a0
 8006dbc:	400200b8 	.word	0x400200b8
 8006dc0:	40020410 	.word	0x40020410
 8006dc4:	40020428 	.word	0x40020428
 8006dc8:	40020440 	.word	0x40020440
 8006dcc:	40020458 	.word	0x40020458
 8006dd0:	40020470 	.word	0x40020470
 8006dd4:	40020488 	.word	0x40020488
 8006dd8:	400204a0 	.word	0x400204a0
 8006ddc:	400204b8 	.word	0x400204b8
 8006de0:	58025408 	.word	0x58025408
 8006de4:	5802541c 	.word	0x5802541c
 8006de8:	58025430 	.word	0x58025430
 8006dec:	58025444 	.word	0x58025444
 8006df0:	58025458 	.word	0x58025458
 8006df4:	5802546c 	.word	0x5802546c
 8006df8:	58025480 	.word	0x58025480
 8006dfc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	60da      	str	r2, [r3, #12]
}
 8006e10:	e075      	b.n	8006efe <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a3d      	ldr	r2, [pc, #244]	@ (8006f0c <DMA_SetConfig+0x388>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d04a      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a3b      	ldr	r2, [pc, #236]	@ (8006f10 <DMA_SetConfig+0x38c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d045      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8006f14 <DMA_SetConfig+0x390>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d040      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a38      	ldr	r2, [pc, #224]	@ (8006f18 <DMA_SetConfig+0x394>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d03b      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a37      	ldr	r2, [pc, #220]	@ (8006f1c <DMA_SetConfig+0x398>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d036      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a35      	ldr	r2, [pc, #212]	@ (8006f20 <DMA_SetConfig+0x39c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d031      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a34      	ldr	r2, [pc, #208]	@ (8006f24 <DMA_SetConfig+0x3a0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d02c      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a32      	ldr	r2, [pc, #200]	@ (8006f28 <DMA_SetConfig+0x3a4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d027      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a31      	ldr	r2, [pc, #196]	@ (8006f2c <DMA_SetConfig+0x3a8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d022      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a2f      	ldr	r2, [pc, #188]	@ (8006f30 <DMA_SetConfig+0x3ac>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d01d      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f34 <DMA_SetConfig+0x3b0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d018      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a2c      	ldr	r2, [pc, #176]	@ (8006f38 <DMA_SetConfig+0x3b4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a2b      	ldr	r2, [pc, #172]	@ (8006f3c <DMA_SetConfig+0x3b8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00e      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a29      	ldr	r2, [pc, #164]	@ (8006f40 <DMA_SetConfig+0x3bc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d009      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a28      	ldr	r2, [pc, #160]	@ (8006f44 <DMA_SetConfig+0x3c0>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d004      	beq.n	8006eb2 <DMA_SetConfig+0x32e>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a26      	ldr	r2, [pc, #152]	@ (8006f48 <DMA_SetConfig+0x3c4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d101      	bne.n	8006eb6 <DMA_SetConfig+0x332>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <DMA_SetConfig+0x334>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d020      	beq.n	8006efe <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	409a      	lsls	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2b40      	cmp	r3, #64	@ 0x40
 8006eda:	d108      	bne.n	8006eee <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	60da      	str	r2, [r3, #12]
}
 8006eec:	e007      	b.n	8006efe <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	60da      	str	r2, [r3, #12]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	48022c08 	.word	0x48022c08
 8006f10:	48022c1c 	.word	0x48022c1c
 8006f14:	48022c30 	.word	0x48022c30
 8006f18:	48022c44 	.word	0x48022c44
 8006f1c:	48022c58 	.word	0x48022c58
 8006f20:	48022c6c 	.word	0x48022c6c
 8006f24:	48022c80 	.word	0x48022c80
 8006f28:	48022c94 	.word	0x48022c94
 8006f2c:	58025408 	.word	0x58025408
 8006f30:	5802541c 	.word	0x5802541c
 8006f34:	58025430 	.word	0x58025430
 8006f38:	58025444 	.word	0x58025444
 8006f3c:	58025458 	.word	0x58025458
 8006f40:	5802546c 	.word	0x5802546c
 8006f44:	58025480 	.word	0x58025480
 8006f48:	58025494 	.word	0x58025494

08006f4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a42      	ldr	r2, [pc, #264]	@ (8007064 <DMA_CalcBaseAndBitshift+0x118>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d04a      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a41      	ldr	r2, [pc, #260]	@ (8007068 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d045      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800706c <DMA_CalcBaseAndBitshift+0x120>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d040      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a3e      	ldr	r2, [pc, #248]	@ (8007070 <DMA_CalcBaseAndBitshift+0x124>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d03b      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a3c      	ldr	r2, [pc, #240]	@ (8007074 <DMA_CalcBaseAndBitshift+0x128>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d036      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8007078 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d031      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a39      	ldr	r2, [pc, #228]	@ (800707c <DMA_CalcBaseAndBitshift+0x130>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d02c      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a38      	ldr	r2, [pc, #224]	@ (8007080 <DMA_CalcBaseAndBitshift+0x134>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d027      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a36      	ldr	r2, [pc, #216]	@ (8007084 <DMA_CalcBaseAndBitshift+0x138>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d022      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a35      	ldr	r2, [pc, #212]	@ (8007088 <DMA_CalcBaseAndBitshift+0x13c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d01d      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a33      	ldr	r2, [pc, #204]	@ (800708c <DMA_CalcBaseAndBitshift+0x140>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d018      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a32      	ldr	r2, [pc, #200]	@ (8007090 <DMA_CalcBaseAndBitshift+0x144>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d013      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a30      	ldr	r2, [pc, #192]	@ (8007094 <DMA_CalcBaseAndBitshift+0x148>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00e      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a2f      	ldr	r2, [pc, #188]	@ (8007098 <DMA_CalcBaseAndBitshift+0x14c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d009      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800709c <DMA_CalcBaseAndBitshift+0x150>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a2c      	ldr	r2, [pc, #176]	@ (80070a0 <DMA_CalcBaseAndBitshift+0x154>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d101      	bne.n	8006ff8 <DMA_CalcBaseAndBitshift+0xac>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <DMA_CalcBaseAndBitshift+0xae>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d024      	beq.n	8007048 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	3b10      	subs	r3, #16
 8007006:	4a27      	ldr	r2, [pc, #156]	@ (80070a4 <DMA_CalcBaseAndBitshift+0x158>)
 8007008:	fba2 2303 	umull	r2, r3, r2, r3
 800700c:	091b      	lsrs	r3, r3, #4
 800700e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	4a24      	ldr	r2, [pc, #144]	@ (80070a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007018:	5cd3      	ldrb	r3, [r2, r3]
 800701a:	461a      	mov	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d908      	bls.n	8007038 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	4b1f      	ldr	r3, [pc, #124]	@ (80070ac <DMA_CalcBaseAndBitshift+0x160>)
 800702e:	4013      	ands	r3, r2
 8007030:	1d1a      	adds	r2, r3, #4
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	659a      	str	r2, [r3, #88]	@ 0x58
 8007036:	e00d      	b.n	8007054 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	4b1b      	ldr	r3, [pc, #108]	@ (80070ac <DMA_CalcBaseAndBitshift+0x160>)
 8007040:	4013      	ands	r3, r2
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	6593      	str	r3, [r2, #88]	@ 0x58
 8007046:	e005      	b.n	8007054 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	40020010 	.word	0x40020010
 8007068:	40020028 	.word	0x40020028
 800706c:	40020040 	.word	0x40020040
 8007070:	40020058 	.word	0x40020058
 8007074:	40020070 	.word	0x40020070
 8007078:	40020088 	.word	0x40020088
 800707c:	400200a0 	.word	0x400200a0
 8007080:	400200b8 	.word	0x400200b8
 8007084:	40020410 	.word	0x40020410
 8007088:	40020428 	.word	0x40020428
 800708c:	40020440 	.word	0x40020440
 8007090:	40020458 	.word	0x40020458
 8007094:	40020470 	.word	0x40020470
 8007098:	40020488 	.word	0x40020488
 800709c:	400204a0 	.word	0x400204a0
 80070a0:	400204b8 	.word	0x400204b8
 80070a4:	aaaaaaab 	.word	0xaaaaaaab
 80070a8:	080136f8 	.word	0x080136f8
 80070ac:	fffffc00 	.word	0xfffffc00

080070b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d120      	bne.n	8007106 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d858      	bhi.n	800717e <DMA_CheckFifoParam+0xce>
 80070cc:	a201      	add	r2, pc, #4	@ (adr r2, 80070d4 <DMA_CheckFifoParam+0x24>)
 80070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d2:	bf00      	nop
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	080070f7 	.word	0x080070f7
 80070dc:	080070e5 	.word	0x080070e5
 80070e0:	0800717f 	.word	0x0800717f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d048      	beq.n	8007182 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070f4:	e045      	b.n	8007182 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80070fe:	d142      	bne.n	8007186 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007104:	e03f      	b.n	8007186 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800710e:	d123      	bne.n	8007158 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007114:	2b03      	cmp	r3, #3
 8007116:	d838      	bhi.n	800718a <DMA_CheckFifoParam+0xda>
 8007118:	a201      	add	r2, pc, #4	@ (adr r2, 8007120 <DMA_CheckFifoParam+0x70>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	08007131 	.word	0x08007131
 8007124:	08007137 	.word	0x08007137
 8007128:	08007131 	.word	0x08007131
 800712c:	08007149 	.word	0x08007149
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	73fb      	strb	r3, [r7, #15]
        break;
 8007134:	e030      	b.n	8007198 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d025      	beq.n	800718e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007146:	e022      	b.n	800718e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007150:	d11f      	bne.n	8007192 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007156:	e01c      	b.n	8007192 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	2b02      	cmp	r3, #2
 800715e:	d902      	bls.n	8007166 <DMA_CheckFifoParam+0xb6>
 8007160:	2b03      	cmp	r3, #3
 8007162:	d003      	beq.n	800716c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007164:	e018      	b.n	8007198 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	73fb      	strb	r3, [r7, #15]
        break;
 800716a:	e015      	b.n	8007198 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00e      	beq.n	8007196 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	73fb      	strb	r3, [r7, #15]
    break;
 800717c:	e00b      	b.n	8007196 <DMA_CheckFifoParam+0xe6>
        break;
 800717e:	bf00      	nop
 8007180:	e00a      	b.n	8007198 <DMA_CheckFifoParam+0xe8>
        break;
 8007182:	bf00      	nop
 8007184:	e008      	b.n	8007198 <DMA_CheckFifoParam+0xe8>
        break;
 8007186:	bf00      	nop
 8007188:	e006      	b.n	8007198 <DMA_CheckFifoParam+0xe8>
        break;
 800718a:	bf00      	nop
 800718c:	e004      	b.n	8007198 <DMA_CheckFifoParam+0xe8>
        break;
 800718e:	bf00      	nop
 8007190:	e002      	b.n	8007198 <DMA_CheckFifoParam+0xe8>
        break;
 8007192:	bf00      	nop
 8007194:	e000      	b.n	8007198 <DMA_CheckFifoParam+0xe8>
    break;
 8007196:	bf00      	nop
    }
  }

  return status;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop

080071a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a38      	ldr	r2, [pc, #224]	@ (800729c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d022      	beq.n	8007206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a36      	ldr	r2, [pc, #216]	@ (80072a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01d      	beq.n	8007206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a35      	ldr	r2, [pc, #212]	@ (80072a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d018      	beq.n	8007206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a33      	ldr	r2, [pc, #204]	@ (80072a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d013      	beq.n	8007206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a32      	ldr	r2, [pc, #200]	@ (80072ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00e      	beq.n	8007206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a30      	ldr	r2, [pc, #192]	@ (80072b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d009      	beq.n	8007206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a2f      	ldr	r2, [pc, #188]	@ (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a2d      	ldr	r2, [pc, #180]	@ (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d101      	bne.n	800720a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800720a:	2300      	movs	r3, #0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01a      	beq.n	8007246 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	3b08      	subs	r3, #8
 8007218:	4a28      	ldr	r2, [pc, #160]	@ (80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800721a:	fba2 2303 	umull	r2, r3, r2, r3
 800721e:	091b      	lsrs	r3, r3, #4
 8007220:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4b26      	ldr	r3, [pc, #152]	@ (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	461a      	mov	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a24      	ldr	r2, [pc, #144]	@ (80072c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007234:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f003 031f 	and.w	r3, r3, #31
 800723c:	2201      	movs	r2, #1
 800723e:	409a      	lsls	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007244:	e024      	b.n	8007290 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	3b10      	subs	r3, #16
 800724e:	4a1e      	ldr	r2, [pc, #120]	@ (80072c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007250:	fba2 2303 	umull	r2, r3, r2, r3
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4a1c      	ldr	r2, [pc, #112]	@ (80072cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d806      	bhi.n	800726e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4a1b      	ldr	r2, [pc, #108]	@ (80072d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d902      	bls.n	800726e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3308      	adds	r3, #8
 800726c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4b18      	ldr	r3, [pc, #96]	@ (80072d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	461a      	mov	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a16      	ldr	r2, [pc, #88]	@ (80072d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007280:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f003 031f 	and.w	r3, r3, #31
 8007288:	2201      	movs	r2, #1
 800728a:	409a      	lsls	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007290:	bf00      	nop
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	58025408 	.word	0x58025408
 80072a0:	5802541c 	.word	0x5802541c
 80072a4:	58025430 	.word	0x58025430
 80072a8:	58025444 	.word	0x58025444
 80072ac:	58025458 	.word	0x58025458
 80072b0:	5802546c 	.word	0x5802546c
 80072b4:	58025480 	.word	0x58025480
 80072b8:	58025494 	.word	0x58025494
 80072bc:	cccccccd 	.word	0xcccccccd
 80072c0:	16009600 	.word	0x16009600
 80072c4:	58025880 	.word	0x58025880
 80072c8:	aaaaaaab 	.word	0xaaaaaaab
 80072cc:	400204b8 	.word	0x400204b8
 80072d0:	4002040f 	.word	0x4002040f
 80072d4:	10008200 	.word	0x10008200
 80072d8:	40020880 	.word	0x40020880

080072dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d04a      	beq.n	8007388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d847      	bhi.n	8007388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a25      	ldr	r2, [pc, #148]	@ (8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d022      	beq.n	8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a24      	ldr	r2, [pc, #144]	@ (8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d01d      	beq.n	8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a22      	ldr	r2, [pc, #136]	@ (800739c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d018      	beq.n	8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a21      	ldr	r2, [pc, #132]	@ (80073a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d013      	beq.n	8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a1f      	ldr	r2, [pc, #124]	@ (80073a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00e      	beq.n	8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a1e      	ldr	r2, [pc, #120]	@ (80073a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d009      	beq.n	8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a1c      	ldr	r2, [pc, #112]	@ (80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d004      	beq.n	8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a1b      	ldr	r2, [pc, #108]	@ (80073b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d101      	bne.n	800734c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007348:	2301      	movs	r3, #1
 800734a:	e000      	b.n	800734e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800734c:	2300      	movs	r3, #0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4b17      	ldr	r3, [pc, #92]	@ (80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	461a      	mov	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a15      	ldr	r2, [pc, #84]	@ (80073b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007364:	671a      	str	r2, [r3, #112]	@ 0x70
 8007366:	e009      	b.n	800737c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4b14      	ldr	r3, [pc, #80]	@ (80073bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	461a      	mov	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a11      	ldr	r2, [pc, #68]	@ (80073c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800737a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3b01      	subs	r3, #1
 8007380:	2201      	movs	r2, #1
 8007382:	409a      	lsls	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007388:	bf00      	nop
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	58025408 	.word	0x58025408
 8007398:	5802541c 	.word	0x5802541c
 800739c:	58025430 	.word	0x58025430
 80073a0:	58025444 	.word	0x58025444
 80073a4:	58025458 	.word	0x58025458
 80073a8:	5802546c 	.word	0x5802546c
 80073ac:	58025480 	.word	0x58025480
 80073b0:	58025494 	.word	0x58025494
 80073b4:	1600963f 	.word	0x1600963f
 80073b8:	58025940 	.word	0x58025940
 80073bc:	1000823f 	.word	0x1000823f
 80073c0:	40020940 	.word	0x40020940

080073c4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	2b80      	cmp	r3, #128	@ 0x80
 80073dc:	d105      	bne.n	80073ea <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e315      	b.n	8007a16 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e30e      	b.n	8007a16 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b01      	cmp	r3, #1
 800740a:	f040 82fd 	bne.w	8007a08 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2202      	movs	r2, #2
 8007412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a82      	ldr	r2, [pc, #520]	@ (800762c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d04a      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a81      	ldr	r2, [pc, #516]	@ (8007630 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d045      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a7f      	ldr	r2, [pc, #508]	@ (8007634 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d040      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a7e      	ldr	r2, [pc, #504]	@ (8007638 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d03b      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a7c      	ldr	r2, [pc, #496]	@ (800763c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d036      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a7b      	ldr	r2, [pc, #492]	@ (8007640 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d031      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a79      	ldr	r2, [pc, #484]	@ (8007644 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d02c      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a78      	ldr	r2, [pc, #480]	@ (8007648 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d027      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a76      	ldr	r2, [pc, #472]	@ (800764c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d022      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a75      	ldr	r2, [pc, #468]	@ (8007650 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d01d      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a73      	ldr	r2, [pc, #460]	@ (8007654 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d018      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a72      	ldr	r2, [pc, #456]	@ (8007658 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d013      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a70      	ldr	r2, [pc, #448]	@ (800765c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00e      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a6f      	ldr	r2, [pc, #444]	@ (8007660 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d009      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a6d      	ldr	r2, [pc, #436]	@ (8007664 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a6c      	ldr	r2, [pc, #432]	@ (8007668 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d101      	bne.n	80074c0 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80074c0:	2300      	movs	r3, #0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d018      	beq.n	80074f8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80074d4:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e2:	3308      	adds	r3, #8
 80074e4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ea:	f003 031f 	and.w	r3, r3, #31
 80074ee:	223f      	movs	r2, #63	@ 0x3f
 80074f0:	409a      	lsls	r2, r3
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	e018      	b.n	800752a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6819      	ldr	r1, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	f248 0320 	movw	r3, #32800	@ 0x8020
 8007506:	430b      	orrs	r3, r1
 8007508:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007516:	3304      	adds	r3, #4
 8007518:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800751e:	f003 031f 	and.w	r3, r3, #31
 8007522:	2201      	movs	r2, #1
 8007524:	409a      	lsls	r2, r3
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	68b9      	ldr	r1, [r7, #8]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fb41 	bl	8007bb8 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a3c      	ldr	r2, [pc, #240]	@ (800762c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d072      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a3a      	ldr	r2, [pc, #232]	@ (8007630 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d06d      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a39      	ldr	r2, [pc, #228]	@ (8007634 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d068      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a37      	ldr	r2, [pc, #220]	@ (8007638 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d063      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a36      	ldr	r2, [pc, #216]	@ (800763c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d05e      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a34      	ldr	r2, [pc, #208]	@ (8007640 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d059      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a33      	ldr	r2, [pc, #204]	@ (8007644 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d054      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a31      	ldr	r2, [pc, #196]	@ (8007648 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d04f      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a30      	ldr	r2, [pc, #192]	@ (800764c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d04a      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a2e      	ldr	r2, [pc, #184]	@ (8007650 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d045      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a2d      	ldr	r2, [pc, #180]	@ (8007654 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d040      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a2b      	ldr	r2, [pc, #172]	@ (8007658 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d03b      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a2a      	ldr	r2, [pc, #168]	@ (800765c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d036      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a28      	ldr	r2, [pc, #160]	@ (8007660 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d031      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a27      	ldr	r2, [pc, #156]	@ (8007664 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d02c      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a25      	ldr	r2, [pc, #148]	@ (8007668 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d027      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a24      	ldr	r2, [pc, #144]	@ (800766c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d022      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a22      	ldr	r2, [pc, #136]	@ (8007670 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d01d      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a21      	ldr	r2, [pc, #132]	@ (8007674 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d018      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007678 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1e      	ldr	r2, [pc, #120]	@ (800767c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00e      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1c      	ldr	r2, [pc, #112]	@ (8007680 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d009      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1b      	ldr	r2, [pc, #108]	@ (8007684 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d004      	beq.n	8007626 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a19      	ldr	r2, [pc, #100]	@ (8007688 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d132      	bne.n	800768c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8007626:	2301      	movs	r3, #1
 8007628:	e031      	b.n	800768e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800762a:	bf00      	nop
 800762c:	40020010 	.word	0x40020010
 8007630:	40020028 	.word	0x40020028
 8007634:	40020040 	.word	0x40020040
 8007638:	40020058 	.word	0x40020058
 800763c:	40020070 	.word	0x40020070
 8007640:	40020088 	.word	0x40020088
 8007644:	400200a0 	.word	0x400200a0
 8007648:	400200b8 	.word	0x400200b8
 800764c:	40020410 	.word	0x40020410
 8007650:	40020428 	.word	0x40020428
 8007654:	40020440 	.word	0x40020440
 8007658:	40020458 	.word	0x40020458
 800765c:	40020470 	.word	0x40020470
 8007660:	40020488 	.word	0x40020488
 8007664:	400204a0 	.word	0x400204a0
 8007668:	400204b8 	.word	0x400204b8
 800766c:	58025408 	.word	0x58025408
 8007670:	5802541c 	.word	0x5802541c
 8007674:	58025430 	.word	0x58025430
 8007678:	58025444 	.word	0x58025444
 800767c:	58025458 	.word	0x58025458
 8007680:	5802546c 	.word	0x5802546c
 8007684:	58025480 	.word	0x58025480
 8007688:	58025494 	.word	0x58025494
 800768c:	2300      	movs	r3, #0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00d      	beq.n	80076ae <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800769a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80076ac:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a3b      	ldr	r2, [pc, #236]	@ (80077a0 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d04a      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a39      	ldr	r2, [pc, #228]	@ (80077a4 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d045      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a38      	ldr	r2, [pc, #224]	@ (80077a8 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d040      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a36      	ldr	r2, [pc, #216]	@ (80077ac <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d03b      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a35      	ldr	r2, [pc, #212]	@ (80077b0 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d036      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a33      	ldr	r2, [pc, #204]	@ (80077b4 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d031      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a32      	ldr	r2, [pc, #200]	@ (80077b8 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d02c      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a30      	ldr	r2, [pc, #192]	@ (80077bc <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d027      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a2f      	ldr	r2, [pc, #188]	@ (80077c0 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d022      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a2d      	ldr	r2, [pc, #180]	@ (80077c4 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d01d      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a2c      	ldr	r2, [pc, #176]	@ (80077c8 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d018      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a2a      	ldr	r2, [pc, #168]	@ (80077cc <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a29      	ldr	r2, [pc, #164]	@ (80077d0 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00e      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a27      	ldr	r2, [pc, #156]	@ (80077d4 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d009      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a26      	ldr	r2, [pc, #152]	@ (80077d8 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d004      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a24      	ldr	r2, [pc, #144]	@ (80077dc <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d101      	bne.n	8007752 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8007752:	2300      	movs	r3, #0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d043      	beq.n	80077e0 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f023 021e 	bic.w	r2, r3, #30
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0216 	orr.w	r2, r2, #22
 800776a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800777a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007788:	2b00      	cmp	r3, #0
 800778a:	d043      	beq.n	8007814 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0208 	orr.w	r2, r2, #8
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	e03a      	b.n	8007814 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800779e:	bf00      	nop
 80077a0:	40020010 	.word	0x40020010
 80077a4:	40020028 	.word	0x40020028
 80077a8:	40020040 	.word	0x40020040
 80077ac:	40020058 	.word	0x40020058
 80077b0:	40020070 	.word	0x40020070
 80077b4:	40020088 	.word	0x40020088
 80077b8:	400200a0 	.word	0x400200a0
 80077bc:	400200b8 	.word	0x400200b8
 80077c0:	40020410 	.word	0x40020410
 80077c4:	40020428 	.word	0x40020428
 80077c8:	40020440 	.word	0x40020440
 80077cc:	40020458 	.word	0x40020458
 80077d0:	40020470 	.word	0x40020470
 80077d4:	40020488 	.word	0x40020488
 80077d8:	400204a0 	.word	0x400204a0
 80077dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 020e 	bic.w	r2, r3, #14
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 020a 	orr.w	r2, r2, #10
 80077f2:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007800:	2b00      	cmp	r3, #0
 8007802:	d007      	beq.n	8007814 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0204 	orr.w	r2, r2, #4
 8007812:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a81      	ldr	r2, [pc, #516]	@ (8007a20 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d072      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a80      	ldr	r2, [pc, #512]	@ (8007a24 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d06d      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a7e      	ldr	r2, [pc, #504]	@ (8007a28 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d068      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a7d      	ldr	r2, [pc, #500]	@ (8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d063      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a7b      	ldr	r2, [pc, #492]	@ (8007a30 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d05e      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a7a      	ldr	r2, [pc, #488]	@ (8007a34 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d059      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a78      	ldr	r2, [pc, #480]	@ (8007a38 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d054      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a77      	ldr	r2, [pc, #476]	@ (8007a3c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d04f      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a75      	ldr	r2, [pc, #468]	@ (8007a40 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d04a      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a74      	ldr	r2, [pc, #464]	@ (8007a44 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d045      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a72      	ldr	r2, [pc, #456]	@ (8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d040      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a71      	ldr	r2, [pc, #452]	@ (8007a4c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d03b      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a6f      	ldr	r2, [pc, #444]	@ (8007a50 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d036      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a6e      	ldr	r2, [pc, #440]	@ (8007a54 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d031      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a6c      	ldr	r2, [pc, #432]	@ (8007a58 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d02c      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a6b      	ldr	r2, [pc, #428]	@ (8007a5c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d027      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a69      	ldr	r2, [pc, #420]	@ (8007a60 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d022      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a68      	ldr	r2, [pc, #416]	@ (8007a64 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d01d      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a66      	ldr	r2, [pc, #408]	@ (8007a68 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d018      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a65      	ldr	r2, [pc, #404]	@ (8007a6c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d013      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a63      	ldr	r2, [pc, #396]	@ (8007a70 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00e      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a62      	ldr	r2, [pc, #392]	@ (8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d009      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a60      	ldr	r2, [pc, #384]	@ (8007a78 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d004      	beq.n	8007904 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a5f      	ldr	r2, [pc, #380]	@ (8007a7c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d101      	bne.n	8007908 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8007904:	2301      	movs	r3, #1
 8007906:	e000      	b.n	800790a <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8007908:	2300      	movs	r3, #0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01a      	beq.n	8007944 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007926:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800792a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800793e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007942:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a35      	ldr	r2, [pc, #212]	@ (8007a20 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d04a      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a34      	ldr	r2, [pc, #208]	@ (8007a24 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d045      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a32      	ldr	r2, [pc, #200]	@ (8007a28 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d040      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a31      	ldr	r2, [pc, #196]	@ (8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d03b      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a2f      	ldr	r2, [pc, #188]	@ (8007a30 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d036      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a2e      	ldr	r2, [pc, #184]	@ (8007a34 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d031      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a2c      	ldr	r2, [pc, #176]	@ (8007a38 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d02c      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a2b      	ldr	r2, [pc, #172]	@ (8007a3c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d027      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a29      	ldr	r2, [pc, #164]	@ (8007a40 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d022      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a28      	ldr	r2, [pc, #160]	@ (8007a44 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d01d      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a26      	ldr	r2, [pc, #152]	@ (8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d018      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a25      	ldr	r2, [pc, #148]	@ (8007a4c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d013      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a23      	ldr	r2, [pc, #140]	@ (8007a50 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00e      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a22      	ldr	r2, [pc, #136]	@ (8007a54 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d009      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a20      	ldr	r2, [pc, #128]	@ (8007a58 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d004      	beq.n	80079e4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a1f      	ldr	r2, [pc, #124]	@ (8007a5c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d108      	bne.n	80079f6 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0201 	orr.w	r2, r2, #1
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	e00e      	b.n	8007a14 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0201 	orr.w	r2, r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	e005      	b.n	8007a14 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	40020010 	.word	0x40020010
 8007a24:	40020028 	.word	0x40020028
 8007a28:	40020040 	.word	0x40020040
 8007a2c:	40020058 	.word	0x40020058
 8007a30:	40020070 	.word	0x40020070
 8007a34:	40020088 	.word	0x40020088
 8007a38:	400200a0 	.word	0x400200a0
 8007a3c:	400200b8 	.word	0x400200b8
 8007a40:	40020410 	.word	0x40020410
 8007a44:	40020428 	.word	0x40020428
 8007a48:	40020440 	.word	0x40020440
 8007a4c:	40020458 	.word	0x40020458
 8007a50:	40020470 	.word	0x40020470
 8007a54:	40020488 	.word	0x40020488
 8007a58:	400204a0 	.word	0x400204a0
 8007a5c:	400204b8 	.word	0x400204b8
 8007a60:	58025408 	.word	0x58025408
 8007a64:	5802541c 	.word	0x5802541c
 8007a68:	58025430 	.word	0x58025430
 8007a6c:	58025444 	.word	0x58025444
 8007a70:	58025458 	.word	0x58025458
 8007a74:	5802546c 	.word	0x5802546c
 8007a78:	58025480 	.word	0x58025480
 8007a7c:	58025494 	.word	0x58025494

08007a80 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a39      	ldr	r2, [pc, #228]	@ (8007b78 <HAL_DMAEx_ChangeMemory+0xf8>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d04a      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a37      	ldr	r2, [pc, #220]	@ (8007b7c <HAL_DMAEx_ChangeMemory+0xfc>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d045      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a36      	ldr	r2, [pc, #216]	@ (8007b80 <HAL_DMAEx_ChangeMemory+0x100>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d040      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a34      	ldr	r2, [pc, #208]	@ (8007b84 <HAL_DMAEx_ChangeMemory+0x104>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d03b      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a33      	ldr	r2, [pc, #204]	@ (8007b88 <HAL_DMAEx_ChangeMemory+0x108>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d036      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a31      	ldr	r2, [pc, #196]	@ (8007b8c <HAL_DMAEx_ChangeMemory+0x10c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d031      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a30      	ldr	r2, [pc, #192]	@ (8007b90 <HAL_DMAEx_ChangeMemory+0x110>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d02c      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8007b94 <HAL_DMAEx_ChangeMemory+0x114>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d027      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8007b98 <HAL_DMAEx_ChangeMemory+0x118>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d022      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a2b      	ldr	r2, [pc, #172]	@ (8007b9c <HAL_DMAEx_ChangeMemory+0x11c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d01d      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a2a      	ldr	r2, [pc, #168]	@ (8007ba0 <HAL_DMAEx_ChangeMemory+0x120>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d018      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a28      	ldr	r2, [pc, #160]	@ (8007ba4 <HAL_DMAEx_ChangeMemory+0x124>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d013      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a27      	ldr	r2, [pc, #156]	@ (8007ba8 <HAL_DMAEx_ChangeMemory+0x128>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00e      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a25      	ldr	r2, [pc, #148]	@ (8007bac <HAL_DMAEx_ChangeMemory+0x12c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d009      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a24      	ldr	r2, [pc, #144]	@ (8007bb0 <HAL_DMAEx_ChangeMemory+0x130>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d004      	beq.n	8007b2e <HAL_DMAEx_ChangeMemory+0xae>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a22      	ldr	r2, [pc, #136]	@ (8007bb4 <HAL_DMAEx_ChangeMemory+0x134>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d101      	bne.n	8007b32 <HAL_DMAEx_ChangeMemory+0xb2>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <HAL_DMAEx_ChangeMemory+0xb4>
 8007b32:	2300      	movs	r3, #0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00c      	beq.n	8007b52 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d104      	bne.n	8007b48 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	60da      	str	r2, [r3, #12]
 8007b46:	e010      	b.n	8007b6a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	611a      	str	r2, [r3, #16]
 8007b50:	e00b      	b.n	8007b6a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d104      	bne.n	8007b62 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	60da      	str	r2, [r3, #12]
 8007b60:	e003      	b.n	8007b6a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	40020010 	.word	0x40020010
 8007b7c:	40020028 	.word	0x40020028
 8007b80:	40020040 	.word	0x40020040
 8007b84:	40020058 	.word	0x40020058
 8007b88:	40020070 	.word	0x40020070
 8007b8c:	40020088 	.word	0x40020088
 8007b90:	400200a0 	.word	0x400200a0
 8007b94:	400200b8 	.word	0x400200b8
 8007b98:	40020410 	.word	0x40020410
 8007b9c:	40020428 	.word	0x40020428
 8007ba0:	40020440 	.word	0x40020440
 8007ba4:	40020458 	.word	0x40020458
 8007ba8:	40020470 	.word	0x40020470
 8007bac:	40020488 	.word	0x40020488
 8007bb0:	400204a0 	.word	0x400204a0
 8007bb4:	400204b8 	.word	0x400204b8

08007bb8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a46      	ldr	r2, [pc, #280]	@ (8007ce4 <DMA_MultiBufferSetConfig+0x12c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d04a      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a44      	ldr	r2, [pc, #272]	@ (8007ce8 <DMA_MultiBufferSetConfig+0x130>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d045      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a43      	ldr	r2, [pc, #268]	@ (8007cec <DMA_MultiBufferSetConfig+0x134>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d040      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a41      	ldr	r2, [pc, #260]	@ (8007cf0 <DMA_MultiBufferSetConfig+0x138>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d03b      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a40      	ldr	r2, [pc, #256]	@ (8007cf4 <DMA_MultiBufferSetConfig+0x13c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d036      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a3e      	ldr	r2, [pc, #248]	@ (8007cf8 <DMA_MultiBufferSetConfig+0x140>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d031      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a3d      	ldr	r2, [pc, #244]	@ (8007cfc <DMA_MultiBufferSetConfig+0x144>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d02c      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a3b      	ldr	r2, [pc, #236]	@ (8007d00 <DMA_MultiBufferSetConfig+0x148>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d027      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a3a      	ldr	r2, [pc, #232]	@ (8007d04 <DMA_MultiBufferSetConfig+0x14c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d022      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a38      	ldr	r2, [pc, #224]	@ (8007d08 <DMA_MultiBufferSetConfig+0x150>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01d      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a37      	ldr	r2, [pc, #220]	@ (8007d0c <DMA_MultiBufferSetConfig+0x154>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d018      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a35      	ldr	r2, [pc, #212]	@ (8007d10 <DMA_MultiBufferSetConfig+0x158>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a34      	ldr	r2, [pc, #208]	@ (8007d14 <DMA_MultiBufferSetConfig+0x15c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00e      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a32      	ldr	r2, [pc, #200]	@ (8007d18 <DMA_MultiBufferSetConfig+0x160>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d009      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a31      	ldr	r2, [pc, #196]	@ (8007d1c <DMA_MultiBufferSetConfig+0x164>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d004      	beq.n	8007c66 <DMA_MultiBufferSetConfig+0xae>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a2f      	ldr	r2, [pc, #188]	@ (8007d20 <DMA_MultiBufferSetConfig+0x168>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d101      	bne.n	8007c6a <DMA_MultiBufferSetConfig+0xb2>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <DMA_MultiBufferSetConfig+0xb4>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d019      	beq.n	8007ca4 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b40      	cmp	r3, #64	@ 0x40
 8007c7e:	d108      	bne.n	8007c92 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8007c90:	e021      	b.n	8007cd6 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	60da      	str	r2, [r3, #12]
}
 8007ca2:	e018      	b.n	8007cd6 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	2b40      	cmp	r3, #64	@ 0x40
 8007cb2:	d108      	bne.n	8007cc6 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	60da      	str	r2, [r3, #12]
}
 8007cc4:	e007      	b.n	8007cd6 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	60da      	str	r2, [r3, #12]
}
 8007cd6:	bf00      	nop
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40020010 	.word	0x40020010
 8007ce8:	40020028 	.word	0x40020028
 8007cec:	40020040 	.word	0x40020040
 8007cf0:	40020058 	.word	0x40020058
 8007cf4:	40020070 	.word	0x40020070
 8007cf8:	40020088 	.word	0x40020088
 8007cfc:	400200a0 	.word	0x400200a0
 8007d00:	400200b8 	.word	0x400200b8
 8007d04:	40020410 	.word	0x40020410
 8007d08:	40020428 	.word	0x40020428
 8007d0c:	40020440 	.word	0x40020440
 8007d10:	40020458 	.word	0x40020458
 8007d14:	40020470 	.word	0x40020470
 8007d18:	40020488 	.word	0x40020488
 8007d1c:	400204a0 	.word	0x400204a0
 8007d20:	400204b8 	.word	0x400204b8

08007d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b089      	sub	sp, #36	@ 0x24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d32:	4b89      	ldr	r3, [pc, #548]	@ (8007f58 <HAL_GPIO_Init+0x234>)
 8007d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d36:	e194      	b.n	8008062 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	fa01 f303 	lsl.w	r3, r1, r3
 8007d44:	4013      	ands	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 8186 	beq.w	800805c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d005      	beq.n	8007d68 <HAL_GPIO_Init+0x44>
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d130      	bne.n	8007dca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	2203      	movs	r2, #3
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d9e:	2201      	movs	r2, #1
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	43db      	mvns	r3, r3
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	4013      	ands	r3, r2
 8007dac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	091b      	lsrs	r3, r3, #4
 8007db4:	f003 0201 	and.w	r2, r3, #1
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f003 0303 	and.w	r3, r3, #3
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d017      	beq.n	8007e06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	2203      	movs	r2, #3
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	43db      	mvns	r3, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	4013      	ands	r3, r2
 8007dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d123      	bne.n	8007e5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	08da      	lsrs	r2, r3, #3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3208      	adds	r2, #8
 8007e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	220f      	movs	r2, #15
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	43db      	mvns	r3, r3
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	4013      	ands	r3, r2
 8007e34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f003 0307 	and.w	r3, r3, #7
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	fa02 f303 	lsl.w	r3, r2, r3
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	08da      	lsrs	r2, r3, #3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3208      	adds	r2, #8
 8007e54:	69b9      	ldr	r1, [r7, #24]
 8007e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	2203      	movs	r2, #3
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	43db      	mvns	r3, r3
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f003 0203 	and.w	r2, r3, #3
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 80e0 	beq.w	800805c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8007f5c <HAL_GPIO_Init+0x238>)
 8007e9e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8007f5c <HAL_GPIO_Init+0x238>)
 8007ea4:	f043 0302 	orr.w	r3, r3, #2
 8007ea8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8007eac:	4b2b      	ldr	r3, [pc, #172]	@ (8007f5c <HAL_GPIO_Init+0x238>)
 8007eae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007eba:	4a29      	ldr	r2, [pc, #164]	@ (8007f60 <HAL_GPIO_Init+0x23c>)
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	089b      	lsrs	r3, r3, #2
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	220f      	movs	r2, #15
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	43db      	mvns	r3, r3
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	4013      	ands	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a20      	ldr	r2, [pc, #128]	@ (8007f64 <HAL_GPIO_Init+0x240>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d052      	beq.n	8007f8c <HAL_GPIO_Init+0x268>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8007f68 <HAL_GPIO_Init+0x244>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d031      	beq.n	8007f52 <HAL_GPIO_Init+0x22e>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8007f6c <HAL_GPIO_Init+0x248>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d02b      	beq.n	8007f4e <HAL_GPIO_Init+0x22a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f70 <HAL_GPIO_Init+0x24c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d025      	beq.n	8007f4a <HAL_GPIO_Init+0x226>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a1c      	ldr	r2, [pc, #112]	@ (8007f74 <HAL_GPIO_Init+0x250>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d01f      	beq.n	8007f46 <HAL_GPIO_Init+0x222>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a1b      	ldr	r2, [pc, #108]	@ (8007f78 <HAL_GPIO_Init+0x254>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d019      	beq.n	8007f42 <HAL_GPIO_Init+0x21e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a1a      	ldr	r2, [pc, #104]	@ (8007f7c <HAL_GPIO_Init+0x258>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d013      	beq.n	8007f3e <HAL_GPIO_Init+0x21a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a19      	ldr	r2, [pc, #100]	@ (8007f80 <HAL_GPIO_Init+0x25c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00d      	beq.n	8007f3a <HAL_GPIO_Init+0x216>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a18      	ldr	r2, [pc, #96]	@ (8007f84 <HAL_GPIO_Init+0x260>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d007      	beq.n	8007f36 <HAL_GPIO_Init+0x212>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a17      	ldr	r2, [pc, #92]	@ (8007f88 <HAL_GPIO_Init+0x264>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d101      	bne.n	8007f32 <HAL_GPIO_Init+0x20e>
 8007f2e:	2309      	movs	r3, #9
 8007f30:	e02d      	b.n	8007f8e <HAL_GPIO_Init+0x26a>
 8007f32:	230a      	movs	r3, #10
 8007f34:	e02b      	b.n	8007f8e <HAL_GPIO_Init+0x26a>
 8007f36:	2308      	movs	r3, #8
 8007f38:	e029      	b.n	8007f8e <HAL_GPIO_Init+0x26a>
 8007f3a:	2307      	movs	r3, #7
 8007f3c:	e027      	b.n	8007f8e <HAL_GPIO_Init+0x26a>
 8007f3e:	2306      	movs	r3, #6
 8007f40:	e025      	b.n	8007f8e <HAL_GPIO_Init+0x26a>
 8007f42:	2305      	movs	r3, #5
 8007f44:	e023      	b.n	8007f8e <HAL_GPIO_Init+0x26a>
 8007f46:	2304      	movs	r3, #4
 8007f48:	e021      	b.n	8007f8e <HAL_GPIO_Init+0x26a>
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e01f      	b.n	8007f8e <HAL_GPIO_Init+0x26a>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e01d      	b.n	8007f8e <HAL_GPIO_Init+0x26a>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e01b      	b.n	8007f8e <HAL_GPIO_Init+0x26a>
 8007f56:	bf00      	nop
 8007f58:	58000080 	.word	0x58000080
 8007f5c:	58024400 	.word	0x58024400
 8007f60:	58000400 	.word	0x58000400
 8007f64:	58020000 	.word	0x58020000
 8007f68:	58020400 	.word	0x58020400
 8007f6c:	58020800 	.word	0x58020800
 8007f70:	58020c00 	.word	0x58020c00
 8007f74:	58021000 	.word	0x58021000
 8007f78:	58021400 	.word	0x58021400
 8007f7c:	58021800 	.word	0x58021800
 8007f80:	58021c00 	.word	0x58021c00
 8007f84:	58022000 	.word	0x58022000
 8007f88:	58022400 	.word	0x58022400
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	69fa      	ldr	r2, [r7, #28]
 8007f90:	f002 0203 	and.w	r2, r2, #3
 8007f94:	0092      	lsls	r2, r2, #2
 8007f96:	4093      	lsls	r3, r2
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f9e:	4938      	ldr	r1, [pc, #224]	@ (8008080 <HAL_GPIO_Init+0x35c>)
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	089b      	lsrs	r3, r3, #2
 8007fa4:	3302      	adds	r3, #2
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	43db      	mvns	r3, r3
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007fd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	43db      	mvns	r3, r3
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008000:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	43db      	mvns	r3, r3
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	4013      	ands	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	43db      	mvns	r3, r3
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	4013      	ands	r3, r2
 8008040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	3301      	adds	r3, #1
 8008060:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	fa22 f303 	lsr.w	r3, r2, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	f47f ae63 	bne.w	8007d38 <HAL_GPIO_Init+0x14>
  }
}
 8008072:	bf00      	nop
 8008074:	bf00      	nop
 8008076:	3724      	adds	r7, #36	@ 0x24
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	58000400 	.word	0x58000400

08008084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691a      	ldr	r2, [r3, #16]
 8008094:	887b      	ldrh	r3, [r7, #2]
 8008096:	4013      	ands	r3, r2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
 80080a0:	e001      	b.n	80080a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	807b      	strh	r3, [r7, #2]
 80080c0:	4613      	mov	r3, r2
 80080c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080c4:	787b      	ldrb	r3, [r7, #1]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080ca:	887a      	ldrh	r2, [r7, #2]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80080d0:	e003      	b.n	80080da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80080d2:	887b      	ldrh	r3, [r7, #2]
 80080d4:	041a      	lsls	r2, r3, #16
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	619a      	str	r2, [r3, #24]
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	4603      	mov	r3, r0
 80080ee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80080f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008100:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800810a:	88fb      	ldrh	r3, [r7, #6]
 800810c:	4618      	mov	r0, r3
 800810e:	f7f8 ffd9 	bl	80010c4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008112:	bf00      	nop
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e08b      	b.n	8008246 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d106      	bne.n	8008148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fa fb46 	bl	80027d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2224      	movs	r2, #36	@ 0x24
 800814c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f022 0201 	bic.w	r2, r2, #1
 800815e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800816c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800817c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d107      	bne.n	8008196 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008192:	609a      	str	r2, [r3, #8]
 8008194:	e006      	b.n	80081a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689a      	ldr	r2, [r3, #8]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80081a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d108      	bne.n	80081be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081ba:	605a      	str	r2, [r3, #4]
 80081bc:	e007      	b.n	80081ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6859      	ldr	r1, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008250 <HAL_I2C_Init+0x134>)
 80081da:	430b      	orrs	r3, r1
 80081dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	691a      	ldr	r2, [r3, #16]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	69d9      	ldr	r1, [r3, #28]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a1a      	ldr	r2, [r3, #32]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2220      	movs	r2, #32
 8008232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	02008000 	.word	0x02008000

08008254 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af02      	add	r7, sp, #8
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	607a      	str	r2, [r7, #4]
 800825e:	461a      	mov	r2, r3
 8008260:	460b      	mov	r3, r1
 8008262:	817b      	strh	r3, [r7, #10]
 8008264:	4613      	mov	r3, r2
 8008266:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b20      	cmp	r3, #32
 8008272:	f040 80fd 	bne.w	8008470 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_I2C_Master_Transmit+0x30>
 8008280:	2302      	movs	r3, #2
 8008282:	e0f6      	b.n	8008472 <HAL_I2C_Master_Transmit+0x21e>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800828c:	f7fa fde8 	bl	8002e60 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	2319      	movs	r3, #25
 8008298:	2201      	movs	r2, #1
 800829a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 fb72 	bl	8008988 <I2C_WaitOnFlagUntilTimeout>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e0e1      	b.n	8008472 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2221      	movs	r2, #33	@ 0x21
 80082b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2210      	movs	r2, #16
 80082ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	893a      	ldrh	r2, [r7, #8]
 80082ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082da:	b29b      	uxth	r3, r3
 80082dc:	2bff      	cmp	r3, #255	@ 0xff
 80082de:	d906      	bls.n	80082ee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	22ff      	movs	r2, #255	@ 0xff
 80082e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80082e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e007      	b.n	80082fe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80082f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80082fc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	d024      	beq.n	8008350 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830a:	781a      	ldrb	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008320:	b29b      	uxth	r3, r3
 8008322:	3b01      	subs	r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800832e:	3b01      	subs	r3, #1
 8008330:	b29a      	uxth	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800833a:	b2db      	uxtb	r3, r3
 800833c:	3301      	adds	r3, #1
 800833e:	b2da      	uxtb	r2, r3
 8008340:	8979      	ldrh	r1, [r7, #10]
 8008342:	4b4e      	ldr	r3, [pc, #312]	@ (800847c <HAL_I2C_Master_Transmit+0x228>)
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 fd6d 	bl	8008e28 <I2C_TransferConfig>
 800834e:	e066      	b.n	800841e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008354:	b2da      	uxtb	r2, r3
 8008356:	8979      	ldrh	r1, [r7, #10]
 8008358:	4b48      	ldr	r3, [pc, #288]	@ (800847c <HAL_I2C_Master_Transmit+0x228>)
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 fd62 	bl	8008e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008364:	e05b      	b.n	800841e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	6a39      	ldr	r1, [r7, #32]
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fb65 	bl	8008a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e07b      	b.n	8008472 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837e:	781a      	ldrb	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008394:	b29b      	uxth	r3, r3
 8008396:	3b01      	subs	r3, #1
 8008398:	b29a      	uxth	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d034      	beq.n	800841e <HAL_I2C_Master_Transmit+0x1ca>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d130      	bne.n	800841e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	2200      	movs	r2, #0
 80083c4:	2180      	movs	r1, #128	@ 0x80
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 fade 	bl	8008988 <I2C_WaitOnFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e04d      	b.n	8008472 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2bff      	cmp	r3, #255	@ 0xff
 80083de:	d90e      	bls.n	80083fe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	22ff      	movs	r2, #255	@ 0xff
 80083e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	8979      	ldrh	r1, [r7, #10]
 80083ee:	2300      	movs	r3, #0
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 fd16 	bl	8008e28 <I2C_TransferConfig>
 80083fc:	e00f      	b.n	800841e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800840c:	b2da      	uxtb	r2, r3
 800840e:	8979      	ldrh	r1, [r7, #10]
 8008410:	2300      	movs	r3, #0
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 fd05 	bl	8008e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008422:	b29b      	uxth	r3, r3
 8008424:	2b00      	cmp	r3, #0
 8008426:	d19e      	bne.n	8008366 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	6a39      	ldr	r1, [r7, #32]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fb4b 	bl	8008ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e01a      	b.n	8008472 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2220      	movs	r2, #32
 8008442:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6859      	ldr	r1, [r3, #4]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	4b0c      	ldr	r3, [pc, #48]	@ (8008480 <HAL_I2C_Master_Transmit+0x22c>)
 8008450:	400b      	ands	r3, r1
 8008452:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2220      	movs	r2, #32
 8008458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	e000      	b.n	8008472 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008470:	2302      	movs	r3, #2
  }
}
 8008472:	4618      	mov	r0, r3
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	80002000 	.word	0x80002000
 8008480:	fe00e800 	.word	0xfe00e800

08008484 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af02      	add	r7, sp, #8
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	607a      	str	r2, [r7, #4]
 800848e:	461a      	mov	r2, r3
 8008490:	460b      	mov	r3, r1
 8008492:	817b      	strh	r3, [r7, #10]
 8008494:	4613      	mov	r3, r2
 8008496:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	f040 80db 	bne.w	800865c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_I2C_Master_Receive+0x30>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e0d4      	b.n	800865e <HAL_I2C_Master_Receive+0x1da>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80084bc:	f7fa fcd0 	bl	8002e60 <HAL_GetTick>
 80084c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	2319      	movs	r3, #25
 80084c8:	2201      	movs	r2, #1
 80084ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fa5a 	bl	8008988 <I2C_WaitOnFlagUntilTimeout>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e0bf      	b.n	800865e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2222      	movs	r2, #34	@ 0x22
 80084e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2210      	movs	r2, #16
 80084ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	893a      	ldrh	r2, [r7, #8]
 80084fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800850a:	b29b      	uxth	r3, r3
 800850c:	2bff      	cmp	r3, #255	@ 0xff
 800850e:	d90e      	bls.n	800852e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	22ff      	movs	r2, #255	@ 0xff
 8008514:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800851a:	b2da      	uxtb	r2, r3
 800851c:	8979      	ldrh	r1, [r7, #10]
 800851e:	4b52      	ldr	r3, [pc, #328]	@ (8008668 <HAL_I2C_Master_Receive+0x1e4>)
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 fc7e 	bl	8008e28 <I2C_TransferConfig>
 800852c:	e06d      	b.n	800860a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008532:	b29a      	uxth	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800853c:	b2da      	uxtb	r2, r3
 800853e:	8979      	ldrh	r1, [r7, #10]
 8008540:	4b49      	ldr	r3, [pc, #292]	@ (8008668 <HAL_I2C_Master_Receive+0x1e4>)
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 fc6d 	bl	8008e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800854e:	e05c      	b.n	800860a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	6a39      	ldr	r1, [r7, #32]
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 fafb 	bl	8008b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e07c      	b.n	800865e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008580:	3b01      	subs	r3, #1
 8008582:	b29a      	uxth	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800858c:	b29b      	uxth	r3, r3
 800858e:	3b01      	subs	r3, #1
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d034      	beq.n	800860a <HAL_I2C_Master_Receive+0x186>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d130      	bne.n	800860a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	2200      	movs	r2, #0
 80085b0:	2180      	movs	r1, #128	@ 0x80
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f9e8 	bl	8008988 <I2C_WaitOnFlagUntilTimeout>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e04d      	b.n	800865e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2bff      	cmp	r3, #255	@ 0xff
 80085ca:	d90e      	bls.n	80085ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	22ff      	movs	r2, #255	@ 0xff
 80085d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	8979      	ldrh	r1, [r7, #10]
 80085da:	2300      	movs	r3, #0
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 fc20 	bl	8008e28 <I2C_TransferConfig>
 80085e8:	e00f      	b.n	800860a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	8979      	ldrh	r1, [r7, #10]
 80085fc:	2300      	movs	r3, #0
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fc0f 	bl	8008e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800860e:	b29b      	uxth	r3, r3
 8008610:	2b00      	cmp	r3, #0
 8008612:	d19d      	bne.n	8008550 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	6a39      	ldr	r1, [r7, #32]
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 fa55 	bl	8008ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e01a      	b.n	800865e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2220      	movs	r2, #32
 800862e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6859      	ldr	r1, [r3, #4]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <HAL_I2C_Master_Receive+0x1e8>)
 800863c:	400b      	ands	r3, r1
 800863e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2220      	movs	r2, #32
 8008644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	e000      	b.n	800865e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800865c:	2302      	movs	r3, #2
  }
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	80002400 	.word	0x80002400
 800866c:	fe00e800 	.word	0xfe00e800

08008670 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	4608      	mov	r0, r1
 800867a:	4611      	mov	r1, r2
 800867c:	461a      	mov	r2, r3
 800867e:	4603      	mov	r3, r0
 8008680:	817b      	strh	r3, [r7, #10]
 8008682:	460b      	mov	r3, r1
 8008684:	813b      	strh	r3, [r7, #8]
 8008686:	4613      	mov	r3, r2
 8008688:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b20      	cmp	r3, #32
 8008694:	f040 80f9 	bne.w	800888a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <HAL_I2C_Mem_Write+0x34>
 800869e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d105      	bne.n	80086b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0ed      	b.n	800888c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d101      	bne.n	80086be <HAL_I2C_Mem_Write+0x4e>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e0e6      	b.n	800888c <HAL_I2C_Mem_Write+0x21c>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80086c6:	f7fa fbcb 	bl	8002e60 <HAL_GetTick>
 80086ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	2319      	movs	r3, #25
 80086d2:	2201      	movs	r2, #1
 80086d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f955 	bl	8008988 <I2C_WaitOnFlagUntilTimeout>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0d1      	b.n	800888c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2221      	movs	r2, #33	@ 0x21
 80086ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2240      	movs	r2, #64	@ 0x40
 80086f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6a3a      	ldr	r2, [r7, #32]
 8008702:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008708:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008710:	88f8      	ldrh	r0, [r7, #6]
 8008712:	893a      	ldrh	r2, [r7, #8]
 8008714:	8979      	ldrh	r1, [r7, #10]
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	4603      	mov	r3, r0
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 f8b9 	bl	8008898 <I2C_RequestMemoryWrite>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e0a9      	b.n	800888c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800873c:	b29b      	uxth	r3, r3
 800873e:	2bff      	cmp	r3, #255	@ 0xff
 8008740:	d90e      	bls.n	8008760 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	22ff      	movs	r2, #255	@ 0xff
 8008746:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800874c:	b2da      	uxtb	r2, r3
 800874e:	8979      	ldrh	r1, [r7, #10]
 8008750:	2300      	movs	r3, #0
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 fb65 	bl	8008e28 <I2C_TransferConfig>
 800875e:	e00f      	b.n	8008780 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008764:	b29a      	uxth	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800876e:	b2da      	uxtb	r2, r3
 8008770:	8979      	ldrh	r1, [r7, #10]
 8008772:	2300      	movs	r3, #0
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 fb54 	bl	8008e28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 f958 	bl	8008a3a <I2C_WaitOnTXISFlagUntilTimeout>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e07b      	b.n	800888c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008798:	781a      	ldrb	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	3b01      	subs	r3, #1
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087bc:	3b01      	subs	r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d034      	beq.n	8008838 <HAL_I2C_Mem_Write+0x1c8>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d130      	bne.n	8008838 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	2200      	movs	r2, #0
 80087de:	2180      	movs	r1, #128	@ 0x80
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 f8d1 	bl	8008988 <I2C_WaitOnFlagUntilTimeout>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e04d      	b.n	800888c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2bff      	cmp	r3, #255	@ 0xff
 80087f8:	d90e      	bls.n	8008818 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	22ff      	movs	r2, #255	@ 0xff
 80087fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008804:	b2da      	uxtb	r2, r3
 8008806:	8979      	ldrh	r1, [r7, #10]
 8008808:	2300      	movs	r3, #0
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 fb09 	bl	8008e28 <I2C_TransferConfig>
 8008816:	e00f      	b.n	8008838 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800881c:	b29a      	uxth	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008826:	b2da      	uxtb	r2, r3
 8008828:	8979      	ldrh	r1, [r7, #10]
 800882a:	2300      	movs	r3, #0
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 faf8 	bl	8008e28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d19e      	bne.n	8008780 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 f93e 	bl	8008ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e01a      	b.n	800888c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2220      	movs	r2, #32
 800885c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6859      	ldr	r1, [r3, #4]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	4b0a      	ldr	r3, [pc, #40]	@ (8008894 <HAL_I2C_Mem_Write+0x224>)
 800886a:	400b      	ands	r3, r1
 800886c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	e000      	b.n	800888c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800888a:	2302      	movs	r3, #2
  }
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	fe00e800 	.word	0xfe00e800

08008898 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af02      	add	r7, sp, #8
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	461a      	mov	r2, r3
 80088a6:	4603      	mov	r3, r0
 80088a8:	817b      	strh	r3, [r7, #10]
 80088aa:	460b      	mov	r3, r1
 80088ac:	813b      	strh	r3, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80088b2:	88fb      	ldrh	r3, [r7, #6]
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	8979      	ldrh	r1, [r7, #10]
 80088b8:	4b20      	ldr	r3, [pc, #128]	@ (800893c <I2C_RequestMemoryWrite+0xa4>)
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 fab1 	bl	8008e28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088c6:	69fa      	ldr	r2, [r7, #28]
 80088c8:	69b9      	ldr	r1, [r7, #24]
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 f8b5 	bl	8008a3a <I2C_WaitOnTXISFlagUntilTimeout>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e02c      	b.n	8008934 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d105      	bne.n	80088ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80088e0:	893b      	ldrh	r3, [r7, #8]
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80088ea:	e015      	b.n	8008918 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80088ec:	893b      	ldrh	r3, [r7, #8]
 80088ee:	0a1b      	lsrs	r3, r3, #8
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	69b9      	ldr	r1, [r7, #24]
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 f89b 	bl	8008a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e012      	b.n	8008934 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800890e:	893b      	ldrh	r3, [r7, #8]
 8008910:	b2da      	uxtb	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2200      	movs	r2, #0
 8008920:	2180      	movs	r1, #128	@ 0x80
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f000 f830 	bl	8008988 <I2C_WaitOnFlagUntilTimeout>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e000      	b.n	8008934 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	80002000 	.word	0x80002000

08008940 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b02      	cmp	r3, #2
 8008954:	d103      	bne.n	800895e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2200      	movs	r2, #0
 800895c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b01      	cmp	r3, #1
 800896a:	d007      	beq.n	800897c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0201 	orr.w	r2, r2, #1
 800897a:	619a      	str	r2, [r3, #24]
  }
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008998:	e03b      	b.n	8008a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 f962 	bl	8008c68 <I2C_IsErrorOccurred>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d001      	beq.n	80089ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e041      	b.n	8008a32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b4:	d02d      	beq.n	8008a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089b6:	f7fa fa53 	bl	8002e60 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d302      	bcc.n	80089cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d122      	bne.n	8008a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	4013      	ands	r3, r2
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	429a      	cmp	r2, r3
 80089da:	bf0c      	ite	eq
 80089dc:	2301      	moveq	r3, #1
 80089de:	2300      	movne	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	461a      	mov	r2, r3
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d113      	bne.n	8008a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ee:	f043 0220 	orr.w	r2, r3, #32
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e00f      	b.n	8008a32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	699a      	ldr	r2, [r3, #24]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	bf0c      	ite	eq
 8008a22:	2301      	moveq	r3, #1
 8008a24:	2300      	movne	r3, #0
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	461a      	mov	r2, r3
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d0b4      	beq.n	800899a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	60f8      	str	r0, [r7, #12]
 8008a42:	60b9      	str	r1, [r7, #8]
 8008a44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a46:	e033      	b.n	8008ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 f90b 	bl	8008c68 <I2C_IsErrorOccurred>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e031      	b.n	8008ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a62:	d025      	beq.n	8008ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a64:	f7fa f9fc 	bl	8002e60 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d302      	bcc.n	8008a7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d11a      	bne.n	8008ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	f003 0302 	and.w	r3, r3, #2
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d013      	beq.n	8008ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8c:	f043 0220 	orr.w	r2, r3, #32
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e007      	b.n	8008ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	f003 0302 	and.w	r3, r3, #2
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d1c4      	bne.n	8008a48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ad4:	e02f      	b.n	8008b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 f8c4 	bl	8008c68 <I2C_IsErrorOccurred>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e02d      	b.n	8008b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aea:	f7fa f9b9 	bl	8002e60 <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d302      	bcc.n	8008b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d11a      	bne.n	8008b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b20      	cmp	r3, #32
 8008b0c:	d013      	beq.n	8008b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b12:	f043 0220 	orr.w	r2, r3, #32
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e007      	b.n	8008b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b20      	cmp	r3, #32
 8008b42:	d1c8      	bne.n	8008ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008b60:	e071      	b.n	8008c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 f87e 	bl	8008c68 <I2C_IsErrorOccurred>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d13b      	bne.n	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d138      	bne.n	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d105      	bne.n	8008ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	f003 0310 	and.w	r3, r3, #16
 8008bae:	2b10      	cmp	r3, #16
 8008bb0:	d121      	bne.n	8008bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2210      	movs	r2, #16
 8008bb8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2204      	movs	r2, #4
 8008bbe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6859      	ldr	r1, [r3, #4]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4b24      	ldr	r3, [pc, #144]	@ (8008c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008bd4:	400b      	ands	r3, r1
 8008bd6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	75fb      	strb	r3, [r7, #23]
 8008bf4:	e002      	b.n	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008bfc:	f7fa f930 	bl	8002e60 <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d302      	bcc.n	8008c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d119      	bne.n	8008c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d116      	bne.n	8008c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d00f      	beq.n	8008c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c2a:	f043 0220 	orr.w	r2, r3, #32
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d002      	beq.n	8008c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d083      	beq.n	8008b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	fe00e800 	.word	0xfe00e800

08008c68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	@ 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	f003 0310 	and.w	r3, r3, #16
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d068      	beq.n	8008d66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2210      	movs	r2, #16
 8008c9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c9c:	e049      	b.n	8008d32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca4:	d045      	beq.n	8008d32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ca6:	f7fa f8db 	bl	8002e60 <HAL_GetTick>
 8008caa:	4602      	mov	r2, r0
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d302      	bcc.n	8008cbc <I2C_IsErrorOccurred+0x54>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d13a      	bne.n	8008d32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cde:	d121      	bne.n	8008d24 <I2C_IsErrorOccurred+0xbc>
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ce6:	d01d      	beq.n	8008d24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008ce8:	7cfb      	ldrb	r3, [r7, #19]
 8008cea:	2b20      	cmp	r3, #32
 8008cec:	d01a      	beq.n	8008d24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008cfe:	f7fa f8af 	bl	8002e60 <HAL_GetTick>
 8008d02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d04:	e00e      	b.n	8008d24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008d06:	f7fa f8ab 	bl	8002e60 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b19      	cmp	r3, #25
 8008d12:	d907      	bls.n	8008d24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	f043 0320 	orr.w	r3, r3, #32
 8008d1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008d22:	e006      	b.n	8008d32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d1e9      	bne.n	8008d06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	d003      	beq.n	8008d48 <I2C_IsErrorOccurred+0xe0>
 8008d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0aa      	beq.n	8008c9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2220      	movs	r2, #32
 8008d56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	f043 0304 	orr.w	r3, r3, #4
 8008d5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	f043 0301 	orr.w	r3, r3, #1
 8008d7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00b      	beq.n	8008db2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	f043 0308 	orr.w	r3, r3, #8
 8008da0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008daa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	f043 0302 	orr.w	r3, r3, #2
 8008dc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008dcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01c      	beq.n	8008e16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f7ff fdaf 	bl	8008940 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6859      	ldr	r1, [r3, #4]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	4b0d      	ldr	r3, [pc, #52]	@ (8008e24 <I2C_IsErrorOccurred+0x1bc>)
 8008dee:	400b      	ands	r3, r1
 8008df0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	431a      	orrs	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2220      	movs	r2, #32
 8008e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3728      	adds	r7, #40	@ 0x28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	fe00e800 	.word	0xfe00e800

08008e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	607b      	str	r3, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	817b      	strh	r3, [r7, #10]
 8008e36:	4613      	mov	r3, r2
 8008e38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e3a:	897b      	ldrh	r3, [r7, #10]
 8008e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e40:	7a7b      	ldrb	r3, [r7, #9]
 8008e42:	041b      	lsls	r3, r3, #16
 8008e44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e48:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e56:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	0d5b      	lsrs	r3, r3, #21
 8008e62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008e66:	4b08      	ldr	r3, [pc, #32]	@ (8008e88 <I2C_TransferConfig+0x60>)
 8008e68:	430b      	orrs	r3, r1
 8008e6a:	43db      	mvns	r3, r3
 8008e6c:	ea02 0103 	and.w	r1, r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008e7a:	bf00      	nop
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	03ff63ff 	.word	0x03ff63ff

08008e8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d138      	bne.n	8008f14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e032      	b.n	8008f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2224      	movs	r2, #36	@ 0x24
 8008ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0201 	bic.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ede:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6819      	ldr	r1, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f042 0201 	orr.w	r2, r2, #1
 8008efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	e000      	b.n	8008f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f14:	2302      	movs	r3, #2
  }
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d139      	bne.n	8008fac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d101      	bne.n	8008f46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008f42:	2302      	movs	r3, #2
 8008f44:	e033      	b.n	8008fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2224      	movs	r2, #36	@ 0x24
 8008f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0201 	bic.w	r2, r2, #1
 8008f64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008f74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	021b      	lsls	r3, r3, #8
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0201 	orr.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e000      	b.n	8008fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008fac:	2302      	movs	r3, #2
  }
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af02      	add	r7, sp, #8
 8008fc0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e0fe      	b.n	80091ca <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d106      	bne.n	8008fe6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f009 fd97 	bl	8012b14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2203      	movs	r2, #3
 8008fea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f006 f949 	bl	800f28a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6818      	ldr	r0, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	7c1a      	ldrb	r2, [r3, #16]
 8009000:	f88d 2000 	strb.w	r2, [sp]
 8009004:	3304      	adds	r3, #4
 8009006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009008:	f006 f81a 	bl	800f040 <USB_CoreInit>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2202      	movs	r2, #2
 8009016:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e0d5      	b.n	80091ca <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2100      	movs	r1, #0
 8009024:	4618      	mov	r0, r3
 8009026:	f006 f941 	bl	800f2ac <USB_SetCurrentMode>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e0c6      	b.n	80091ca <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
 8009040:	e04a      	b.n	80090d8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009042:	7bfa      	ldrb	r2, [r7, #15]
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	4613      	mov	r3, r2
 8009048:	00db      	lsls	r3, r3, #3
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	440b      	add	r3, r1
 8009050:	3315      	adds	r3, #21
 8009052:	2201      	movs	r2, #1
 8009054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009056:	7bfa      	ldrb	r2, [r7, #15]
 8009058:	6879      	ldr	r1, [r7, #4]
 800905a:	4613      	mov	r3, r2
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	4413      	add	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	440b      	add	r3, r1
 8009064:	3314      	adds	r3, #20
 8009066:	7bfa      	ldrb	r2, [r7, #15]
 8009068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800906a:	7bfa      	ldrb	r2, [r7, #15]
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	b298      	uxth	r0, r3
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	4613      	mov	r3, r2
 8009074:	00db      	lsls	r3, r3, #3
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	440b      	add	r3, r1
 800907c:	332e      	adds	r3, #46	@ 0x2e
 800907e:	4602      	mov	r2, r0
 8009080:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009082:	7bfa      	ldrb	r2, [r7, #15]
 8009084:	6879      	ldr	r1, [r7, #4]
 8009086:	4613      	mov	r3, r2
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	440b      	add	r3, r1
 8009090:	3318      	adds	r3, #24
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009096:	7bfa      	ldrb	r2, [r7, #15]
 8009098:	6879      	ldr	r1, [r7, #4]
 800909a:	4613      	mov	r3, r2
 800909c:	00db      	lsls	r3, r3, #3
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	440b      	add	r3, r1
 80090a4:	331c      	adds	r3, #28
 80090a6:	2200      	movs	r2, #0
 80090a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80090aa:	7bfa      	ldrb	r2, [r7, #15]
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	00db      	lsls	r3, r3, #3
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	3320      	adds	r3, #32
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80090be:	7bfa      	ldrb	r2, [r7, #15]
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	4613      	mov	r3, r2
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	3324      	adds	r3, #36	@ 0x24
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	3301      	adds	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	791b      	ldrb	r3, [r3, #4]
 80090dc:	7bfa      	ldrb	r2, [r7, #15]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d3af      	bcc.n	8009042 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]
 80090e6:	e044      	b.n	8009172 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80090e8:	7bfa      	ldrb	r2, [r7, #15]
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	4613      	mov	r3, r2
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	440b      	add	r3, r1
 80090f6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80090fa:	2200      	movs	r2, #0
 80090fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80090fe:	7bfa      	ldrb	r2, [r7, #15]
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	4613      	mov	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	440b      	add	r3, r1
 800910c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009110:	7bfa      	ldrb	r2, [r7, #15]
 8009112:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009114:	7bfa      	ldrb	r2, [r7, #15]
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	4613      	mov	r3, r2
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	440b      	add	r3, r1
 8009122:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009126:	2200      	movs	r2, #0
 8009128:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800912a:	7bfa      	ldrb	r2, [r7, #15]
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009140:	7bfa      	ldrb	r2, [r7, #15]
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	4613      	mov	r3, r2
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009156:	7bfa      	ldrb	r2, [r7, #15]
 8009158:	6879      	ldr	r1, [r7, #4]
 800915a:	4613      	mov	r3, r2
 800915c:	00db      	lsls	r3, r3, #3
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	440b      	add	r3, r1
 8009164:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	3301      	adds	r3, #1
 8009170:	73fb      	strb	r3, [r7, #15]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	791b      	ldrb	r3, [r3, #4]
 8009176:	7bfa      	ldrb	r2, [r7, #15]
 8009178:	429a      	cmp	r2, r3
 800917a:	d3b5      	bcc.n	80090e8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6818      	ldr	r0, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7c1a      	ldrb	r2, [r3, #16]
 8009184:	f88d 2000 	strb.w	r2, [sp]
 8009188:	3304      	adds	r3, #4
 800918a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800918c:	f006 f8da 	bl	800f344 <USB_DevInit>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d005      	beq.n	80091a2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e013      	b.n	80091ca <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	7b1b      	ldrb	r3, [r3, #12]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d102      	bne.n	80091be <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f001 f96f 	bl	800a49c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f007 f91d 	bl	8010402 <USB_DevDisconnect>

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_PCD_Start+0x1c>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e022      	b.n	8009234 <HAL_PCD_Start+0x62>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d009      	beq.n	8009216 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009206:	2b01      	cmp	r3, #1
 8009208:	d105      	bne.n	8009216 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4618      	mov	r0, r3
 800921c:	f006 f824 	bl	800f268 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4618      	mov	r0, r3
 8009226:	f007 f8cb 	bl	80103c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800923c:	b590      	push	{r4, r7, lr}
 800923e:	b08d      	sub	sp, #52	@ 0x34
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4618      	mov	r0, r3
 8009254:	f007 f989 	bl	801056a <USB_GetMode>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	f040 84b9 	bne.w	8009bd2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4618      	mov	r0, r3
 8009266:	f007 f8ed 	bl	8010444 <USB_ReadInterrupts>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 84af 	beq.w	8009bd0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	0a1b      	lsrs	r3, r3, #8
 800927c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4618      	mov	r0, r3
 800928c:	f007 f8da 	bl	8010444 <USB_ReadInterrupts>
 8009290:	4603      	mov	r3, r0
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b02      	cmp	r3, #2
 8009298:	d107      	bne.n	80092aa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	695a      	ldr	r2, [r3, #20]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f002 0202 	and.w	r2, r2, #2
 80092a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f007 f8c8 	bl	8010444 <USB_ReadInterrupts>
 80092b4:	4603      	mov	r3, r0
 80092b6:	f003 0310 	and.w	r3, r3, #16
 80092ba:	2b10      	cmp	r3, #16
 80092bc:	d161      	bne.n	8009382 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0210 	bic.w	r2, r2, #16
 80092cc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f003 020f 	and.w	r2, r3, #15
 80092da:	4613      	mov	r3, r2
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	4413      	add	r3, r2
 80092ea:	3304      	adds	r3, #4
 80092ec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80092f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80092f8:	d124      	bne.n	8009344 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8009300:	4013      	ands	r3, r2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d035      	beq.n	8009372 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009314:	b29b      	uxth	r3, r3
 8009316:	461a      	mov	r2, r3
 8009318:	6a38      	ldr	r0, [r7, #32]
 800931a:	f006 feff 	bl	801011c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	091b      	lsrs	r3, r3, #4
 8009326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800932a:	441a      	add	r2, r3
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	695a      	ldr	r2, [r3, #20]
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	091b      	lsrs	r3, r3, #4
 8009338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800933c:	441a      	add	r2, r3
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	615a      	str	r2, [r3, #20]
 8009342:	e016      	b.n	8009372 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800934a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800934e:	d110      	bne.n	8009372 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009356:	2208      	movs	r2, #8
 8009358:	4619      	mov	r1, r3
 800935a:	6a38      	ldr	r0, [r7, #32]
 800935c:	f006 fede 	bl	801011c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	695a      	ldr	r2, [r3, #20]
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	091b      	lsrs	r3, r3, #4
 8009368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800936c:	441a      	add	r2, r3
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	699a      	ldr	r2, [r3, #24]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f042 0210 	orr.w	r2, r2, #16
 8009380:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f007 f85c 	bl	8010444 <USB_ReadInterrupts>
 800938c:	4603      	mov	r3, r0
 800938e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009392:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009396:	f040 80a7 	bne.w	80094e8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800939a:	2300      	movs	r3, #0
 800939c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f007 f861 	bl	801046a <USB_ReadDevAllOutEpInterrupt>
 80093a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80093aa:	e099      	b.n	80094e0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80093ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 808e 	beq.w	80094d4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	4611      	mov	r1, r2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f007 f885 	bl	80104d2 <USB_ReadDevOutEPInterrupt>
 80093c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00c      	beq.n	80093ee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e0:	461a      	mov	r2, r3
 80093e2:	2301      	movs	r3, #1
 80093e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80093e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fed1 	bl	800a190 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f003 0308 	and.w	r3, r3, #8
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00c      	beq.n	8009412 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80093f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009404:	461a      	mov	r2, r3
 8009406:	2308      	movs	r3, #8
 8009408:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800940a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 ffa7 	bl	800a360 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f003 0310 	and.w	r3, r3, #16
 8009418:	2b00      	cmp	r3, #0
 800941a:	d008      	beq.n	800942e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800941c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009428:	461a      	mov	r2, r3
 800942a:	2310      	movs	r3, #16
 800942c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b00      	cmp	r3, #0
 8009436:	d030      	beq.n	800949a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009440:	2b80      	cmp	r3, #128	@ 0x80
 8009442:	d109      	bne.n	8009458 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	69fa      	ldr	r2, [r7, #28]
 800944e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009452:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009456:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945a:	4613      	mov	r3, r2
 800945c:	00db      	lsls	r3, r3, #3
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	4413      	add	r3, r2
 800946a:	3304      	adds	r3, #4
 800946c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	78db      	ldrb	r3, [r3, #3]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d108      	bne.n	8009488 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2200      	movs	r2, #0
 800947a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800947c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947e:	b2db      	uxtb	r3, r3
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f009 fc9a 	bl	8012dbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009494:	461a      	mov	r2, r3
 8009496:	2302      	movs	r3, #2
 8009498:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d008      	beq.n	80094b6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b0:	461a      	mov	r2, r3
 80094b2:	2320      	movs	r3, #32
 80094b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d009      	beq.n	80094d4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094cc:	461a      	mov	r2, r3
 80094ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80094d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d6:	3301      	adds	r3, #1
 80094d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80094da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094dc:	085b      	lsrs	r3, r3, #1
 80094de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80094e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f47f af62 	bne.w	80093ac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f006 ffa9 	bl	8010444 <USB_ReadInterrupts>
 80094f2:	4603      	mov	r3, r0
 80094f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80094f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80094fc:	f040 80db 	bne.w	80096b6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4618      	mov	r0, r3
 8009506:	f006 ffca 	bl	801049e <USB_ReadDevAllInEpInterrupt>
 800950a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8009510:	e0cd      	b.n	80096ae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 80c2 	beq.w	80096a2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009524:	b2d2      	uxtb	r2, r2
 8009526:	4611      	mov	r1, r2
 8009528:	4618      	mov	r0, r3
 800952a:	f006 fff0 	bl	801050e <USB_ReadDevInEPInterrupt>
 800952e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d057      	beq.n	80095ea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800953a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	2201      	movs	r2, #1
 8009542:	fa02 f303 	lsl.w	r3, r2, r3
 8009546:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800954e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	43db      	mvns	r3, r3
 8009554:	69f9      	ldr	r1, [r7, #28]
 8009556:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800955a:	4013      	ands	r3, r2
 800955c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800955e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	4413      	add	r3, r2
 8009566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800956a:	461a      	mov	r2, r3
 800956c:	2301      	movs	r3, #1
 800956e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	799b      	ldrb	r3, [r3, #6]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d132      	bne.n	80095de <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800957c:	4613      	mov	r3, r2
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	3320      	adds	r3, #32
 8009588:	6819      	ldr	r1, [r3, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800958e:	4613      	mov	r3, r2
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	4413      	add	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4403      	add	r3, r0
 8009598:	331c      	adds	r3, #28
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4419      	add	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095a2:	4613      	mov	r3, r2
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	4413      	add	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4403      	add	r3, r0
 80095ac:	3320      	adds	r3, #32
 80095ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d113      	bne.n	80095de <HAL_PCD_IRQHandler+0x3a2>
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095ba:	4613      	mov	r3, r2
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	440b      	add	r3, r1
 80095c4:	3324      	adds	r3, #36	@ 0x24
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d108      	bne.n	80095de <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80095d6:	461a      	mov	r2, r3
 80095d8:	2101      	movs	r1, #1
 80095da:	f006 fff9 	bl	80105d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f009 fb64 	bl	8012cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d008      	beq.n	8009606 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009600:	461a      	mov	r2, r3
 8009602:	2308      	movs	r3, #8
 8009604:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f003 0310 	and.w	r3, r3, #16
 800960c:	2b00      	cmp	r3, #0
 800960e:	d008      	beq.n	8009622 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800961c:	461a      	mov	r2, r3
 800961e:	2310      	movs	r3, #16
 8009620:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	d008      	beq.n	800963e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800962c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009638:	461a      	mov	r2, r3
 800963a:	2340      	movs	r3, #64	@ 0x40
 800963c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f003 0302 	and.w	r3, r3, #2
 8009644:	2b00      	cmp	r3, #0
 8009646:	d023      	beq.n	8009690 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009648:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800964a:	6a38      	ldr	r0, [r7, #32]
 800964c:	f005 ffd8 	bl	800f600 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009652:	4613      	mov	r3, r2
 8009654:	00db      	lsls	r3, r3, #3
 8009656:	4413      	add	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	3310      	adds	r3, #16
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	4413      	add	r3, r2
 8009660:	3304      	adds	r3, #4
 8009662:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	78db      	ldrb	r3, [r3, #3]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d108      	bne.n	800967e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2200      	movs	r2, #0
 8009670:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009674:	b2db      	uxtb	r3, r3
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f009 fbb1 	bl	8012de0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800968a:	461a      	mov	r2, r3
 800968c:	2302      	movs	r3, #2
 800968e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800969a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fcea 	bl	800a076 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80096a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a4:	3301      	adds	r3, #1
 80096a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	085b      	lsrs	r3, r3, #1
 80096ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80096ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f47f af2e 	bne.w	8009512 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f006 fec2 	bl	8010444 <USB_ReadInterrupts>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096ca:	d122      	bne.n	8009712 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	69fa      	ldr	r2, [r7, #28]
 80096d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096da:	f023 0301 	bic.w	r3, r3, #1
 80096de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d108      	bne.n	80096fc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80096f2:	2100      	movs	r1, #0
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fef5 	bl	800a4e4 <HAL_PCDEx_LPM_Callback>
 80096fa:	e002      	b.n	8009702 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f009 fb4f 	bl	8012da0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	695a      	ldr	r2, [r3, #20]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4618      	mov	r0, r3
 8009718:	f006 fe94 	bl	8010444 <USB_ReadInterrupts>
 800971c:	4603      	mov	r3, r0
 800971e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009726:	d112      	bne.n	800974e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	2b01      	cmp	r3, #1
 8009736:	d102      	bne.n	800973e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f009 fb0b 	bl	8012d54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	695a      	ldr	r2, [r3, #20]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800974c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f006 fe76 	bl	8010444 <USB_ReadInterrupts>
 8009758:	4603      	mov	r3, r0
 800975a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800975e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009762:	d121      	bne.n	80097a8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	695a      	ldr	r2, [r3, #20]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8009772:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800977a:	2b00      	cmp	r3, #0
 800977c:	d111      	bne.n	80097a2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800978c:	089b      	lsrs	r3, r3, #2
 800978e:	f003 020f 	and.w	r2, r3, #15
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009798:	2101      	movs	r1, #1
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fea2 	bl	800a4e4 <HAL_PCDEx_LPM_Callback>
 80097a0:	e002      	b.n	80097a8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f009 fad6 	bl	8012d54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f006 fe49 	bl	8010444 <USB_ReadInterrupts>
 80097b2:	4603      	mov	r3, r0
 80097b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097bc:	f040 80b7 	bne.w	800992e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	69fa      	ldr	r2, [r7, #28]
 80097ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097ce:	f023 0301 	bic.w	r3, r3, #1
 80097d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2110      	movs	r1, #16
 80097da:	4618      	mov	r0, r3
 80097dc:	f005 ff10 	bl	800f600 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097e0:	2300      	movs	r3, #0
 80097e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097e4:	e046      	b.n	8009874 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80097e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f2:	461a      	mov	r2, r3
 80097f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80097f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80097fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800980a:	0151      	lsls	r1, r2, #5
 800980c:	69fa      	ldr	r2, [r7, #28]
 800980e:	440a      	add	r2, r1
 8009810:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009814:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009818:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800981a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009826:	461a      	mov	r2, r3
 8009828:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800982c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800982e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800983e:	0151      	lsls	r1, r2, #5
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	440a      	add	r2, r1
 8009844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009848:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800984c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800984e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4413      	add	r3, r2
 8009856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009868:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800986c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800986e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009870:	3301      	adds	r3, #1
 8009872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	791b      	ldrb	r3, [r3, #4]
 8009878:	461a      	mov	r2, r3
 800987a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987c:	4293      	cmp	r3, r2
 800987e:	d3b2      	bcc.n	80097e6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	69fa      	ldr	r2, [r7, #28]
 800988a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800988e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009892:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7bdb      	ldrb	r3, [r3, #15]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d016      	beq.n	80098ca <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098ac:	f043 030b 	orr.w	r3, r3, #11
 80098b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098c2:	f043 030b 	orr.w	r3, r3, #11
 80098c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80098c8:	e015      	b.n	80098f6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d0:	695a      	ldr	r2, [r3, #20]
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d8:	4619      	mov	r1, r3
 80098da:	f242 032b 	movw	r3, #8235	@ 0x202b
 80098de:	4313      	orrs	r3, r2
 80098e0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	69fa      	ldr	r2, [r7, #28]
 80098ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098f0:	f043 030b 	orr.w	r3, r3, #11
 80098f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009904:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009908:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6818      	ldr	r0, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009918:	461a      	mov	r2, r3
 800991a:	f006 fe59 	bl	80105d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	695a      	ldr	r2, [r3, #20]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800992c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4618      	mov	r0, r3
 8009934:	f006 fd86 	bl	8010444 <USB_ReadInterrupts>
 8009938:	4603      	mov	r3, r0
 800993a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800993e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009942:	d123      	bne.n	800998c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4618      	mov	r0, r3
 800994a:	f006 fe1d 	bl	8010588 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4618      	mov	r0, r3
 8009954:	f005 fecd 	bl	800f6f2 <USB_GetDevSpeed>
 8009958:	4603      	mov	r3, r0
 800995a:	461a      	mov	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681c      	ldr	r4, [r3, #0]
 8009964:	f001 fde0 	bl	800b528 <HAL_RCC_GetHCLKFreq>
 8009968:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800996e:	461a      	mov	r2, r3
 8009970:	4620      	mov	r0, r4
 8009972:	f005 fbd7 	bl	800f124 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f009 f9c3 	bl	8012d02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	695a      	ldr	r2, [r3, #20]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800998a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4618      	mov	r0, r3
 8009992:	f006 fd57 	bl	8010444 <USB_ReadInterrupts>
 8009996:	4603      	mov	r3, r0
 8009998:	f003 0308 	and.w	r3, r3, #8
 800999c:	2b08      	cmp	r3, #8
 800999e:	d10a      	bne.n	80099b6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f009 f9a0 	bl	8012ce6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	695a      	ldr	r2, [r3, #20]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f002 0208 	and.w	r2, r2, #8
 80099b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f006 fd42 	bl	8010444 <USB_ReadInterrupts>
 80099c0:	4603      	mov	r3, r0
 80099c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099c6:	2b80      	cmp	r3, #128	@ 0x80
 80099c8:	d123      	bne.n	8009a12 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80099d6:	2301      	movs	r3, #1
 80099d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80099da:	e014      	b.n	8009a06 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099e0:	4613      	mov	r3, r2
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	4413      	add	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	440b      	add	r3, r1
 80099ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d105      	bne.n	8009a00 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80099f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fb0a 	bl	800a014 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	3301      	adds	r3, #1
 8009a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	791b      	ldrb	r3, [r3, #4]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d3e4      	bcc.n	80099dc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f006 fd14 	bl	8010444 <USB_ReadInterrupts>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a26:	d13c      	bne.n	8009aa2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a28:	2301      	movs	r3, #1
 8009a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a2c:	e02b      	b.n	8009a86 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a42:	4613      	mov	r3, r2
 8009a44:	00db      	lsls	r3, r3, #3
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	440b      	add	r3, r1
 8009a4c:	3318      	adds	r3, #24
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d115      	bne.n	8009a80 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009a54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	da12      	bge.n	8009a80 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a5e:	4613      	mov	r3, r2
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	440b      	add	r3, r1
 8009a68:	3317      	adds	r3, #23
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 faca 	bl	800a014 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a82:	3301      	adds	r3, #1
 8009a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	791b      	ldrb	r3, [r3, #4]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d3cd      	bcc.n	8009a2e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	695a      	ldr	r2, [r3, #20]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f006 fccc 	bl	8010444 <USB_ReadInterrupts>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ab2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ab6:	d156      	bne.n	8009b66 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ab8:	2301      	movs	r3, #1
 8009aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8009abc:	e045      	b.n	8009b4a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	00db      	lsls	r3, r3, #3
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	440b      	add	r3, r1
 8009adc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d12e      	bne.n	8009b44 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009ae6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	da2b      	bge.n	8009b44 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	0c1a      	lsrs	r2, r3, #16
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009af6:	4053      	eors	r3, r2
 8009af8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d121      	bne.n	8009b44 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009b00:	6879      	ldr	r1, [r7, #4]
 8009b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b04:	4613      	mov	r3, r2
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	4413      	add	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	440b      	add	r3, r1
 8009b0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009b12:	2201      	movs	r2, #1
 8009b14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10a      	bne.n	8009b44 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009b40:	6053      	str	r3, [r2, #4]
            break;
 8009b42:	e008      	b.n	8009b56 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b46:	3301      	adds	r3, #1
 8009b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	791b      	ldrb	r3, [r3, #4]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d3b3      	bcc.n	8009abe <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	695a      	ldr	r2, [r3, #20]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f006 fc6a 	bl	8010444 <USB_ReadInterrupts>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b7a:	d10a      	bne.n	8009b92 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f009 f941 	bl	8012e04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	695a      	ldr	r2, [r3, #20]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f006 fc54 	bl	8010444 <USB_ReadInterrupts>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f003 0304 	and.w	r3, r3, #4
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	d115      	bne.n	8009bd2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	f003 0304 	and.w	r3, r3, #4
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f009 f931 	bl	8012e20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	6859      	ldr	r1, [r3, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	605a      	str	r2, [r3, #4]
 8009bce:	e000      	b.n	8009bd2 <HAL_PCD_IRQHandler+0x996>
      return;
 8009bd0:	bf00      	nop
    }
  }
}
 8009bd2:	3734      	adds	r7, #52	@ 0x34
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd90      	pop	{r4, r7, pc}

08009bd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d101      	bne.n	8009bf2 <HAL_PCD_SetAddress+0x1a>
 8009bee:	2302      	movs	r3, #2
 8009bf0:	e012      	b.n	8009c18 <HAL_PCD_SetAddress+0x40>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	78fa      	ldrb	r2, [r7, #3]
 8009bfe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	78fa      	ldrb	r2, [r7, #3]
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f006 fbb3 	bl	8010374 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	4608      	mov	r0, r1
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4603      	mov	r3, r0
 8009c30:	70fb      	strb	r3, [r7, #3]
 8009c32:	460b      	mov	r3, r1
 8009c34:	803b      	strh	r3, [r7, #0]
 8009c36:	4613      	mov	r3, r2
 8009c38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	da0f      	bge.n	8009c66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c46:	78fb      	ldrb	r3, [r7, #3]
 8009c48:	f003 020f 	and.w	r2, r3, #15
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	3310      	adds	r3, #16
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	4413      	add	r3, r2
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	705a      	strb	r2, [r3, #1]
 8009c64:	e00f      	b.n	8009c86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c66:	78fb      	ldrb	r3, [r7, #3]
 8009c68:	f003 020f 	and.w	r2, r3, #15
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	4413      	add	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009c86:	78fb      	ldrb	r3, [r7, #3]
 8009c88:	f003 030f 	and.w	r3, r3, #15
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009c92:	883b      	ldrh	r3, [r7, #0]
 8009c94:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	78ba      	ldrb	r2, [r7, #2]
 8009ca0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	785b      	ldrb	r3, [r3, #1]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d004      	beq.n	8009cb4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009cb4:	78bb      	ldrb	r3, [r7, #2]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d102      	bne.n	8009cc0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d101      	bne.n	8009cce <HAL_PCD_EP_Open+0xae>
 8009cca:	2302      	movs	r3, #2
 8009ccc:	e00e      	b.n	8009cec <HAL_PCD_EP_Open+0xcc>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f005 fd2d 	bl	800f73c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8009cea:	7afb      	ldrb	r3, [r7, #11]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	da0f      	bge.n	8009d28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	f003 020f 	and.w	r2, r3, #15
 8009d0e:	4613      	mov	r3, r2
 8009d10:	00db      	lsls	r3, r3, #3
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	3310      	adds	r3, #16
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2201      	movs	r2, #1
 8009d24:	705a      	strb	r2, [r3, #1]
 8009d26:	e00f      	b.n	8009d48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	f003 020f 	and.w	r2, r3, #15
 8009d2e:	4613      	mov	r3, r2
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	4413      	add	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	3304      	adds	r3, #4
 8009d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d48:	78fb      	ldrb	r3, [r7, #3]
 8009d4a:	f003 030f 	and.w	r3, r3, #15
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d101      	bne.n	8009d62 <HAL_PCD_EP_Close+0x6e>
 8009d5e:	2302      	movs	r3, #2
 8009d60:	e00e      	b.n	8009d80 <HAL_PCD_EP_Close+0x8c>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f005 fd6b 	bl	800f84c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	607a      	str	r2, [r7, #4]
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	460b      	mov	r3, r1
 8009d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d98:	7afb      	ldrb	r3, [r7, #11]
 8009d9a:	f003 020f 	and.w	r2, r3, #15
 8009d9e:	4613      	mov	r3, r2
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	4413      	add	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	3304      	adds	r3, #4
 8009db0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009dca:	7afb      	ldrb	r3, [r7, #11]
 8009dcc:	f003 030f 	and.w	r3, r3, #15
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	799b      	ldrb	r3, [r3, #6]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d102      	bne.n	8009de4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6818      	ldr	r0, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	799b      	ldrb	r3, [r3, #6]
 8009dec:	461a      	mov	r2, r3
 8009dee:	6979      	ldr	r1, [r7, #20]
 8009df0:	f005 fe08 	bl	800fa04 <USB_EPStartXfer>

  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b083      	sub	sp, #12
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	460b      	mov	r3, r1
 8009e08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	f003 020f 	and.w	r2, r3, #15
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	4613      	mov	r3, r2
 8009e14:	00db      	lsls	r3, r3, #3
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	440b      	add	r3, r1
 8009e1c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009e20:	681b      	ldr	r3, [r3, #0]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b086      	sub	sp, #24
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	60f8      	str	r0, [r7, #12]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e3e:	7afb      	ldrb	r3, [r7, #11]
 8009e40:	f003 020f 	and.w	r2, r3, #15
 8009e44:	4613      	mov	r3, r2
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	3310      	adds	r3, #16
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	4413      	add	r3, r2
 8009e52:	3304      	adds	r3, #4
 8009e54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2200      	movs	r2, #0
 8009e66:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e6e:	7afb      	ldrb	r3, [r7, #11]
 8009e70:	f003 030f 	and.w	r3, r3, #15
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	799b      	ldrb	r3, [r3, #6]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d102      	bne.n	8009e88 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	799b      	ldrb	r3, [r3, #6]
 8009e90:	461a      	mov	r2, r3
 8009e92:	6979      	ldr	r1, [r7, #20]
 8009e94:	f005 fdb6 	bl	800fa04 <USB_EPStartXfer>

  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3718      	adds	r7, #24
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009eae:	78fb      	ldrb	r3, [r7, #3]
 8009eb0:	f003 030f 	and.w	r3, r3, #15
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	7912      	ldrb	r2, [r2, #4]
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d901      	bls.n	8009ec0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e04f      	b.n	8009f60 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	da0f      	bge.n	8009ee8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ec8:	78fb      	ldrb	r3, [r7, #3]
 8009eca:	f003 020f 	and.w	r2, r3, #15
 8009ece:	4613      	mov	r3, r2
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	4413      	add	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	3310      	adds	r3, #16
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	4413      	add	r3, r2
 8009edc:	3304      	adds	r3, #4
 8009ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	705a      	strb	r2, [r3, #1]
 8009ee6:	e00d      	b.n	8009f04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009ee8:	78fa      	ldrb	r2, [r7, #3]
 8009eea:	4613      	mov	r3, r2
 8009eec:	00db      	lsls	r3, r3, #3
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	4413      	add	r3, r2
 8009efa:	3304      	adds	r3, #4
 8009efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2201      	movs	r2, #1
 8009f08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f0a:	78fb      	ldrb	r3, [r7, #3]
 8009f0c:	f003 030f 	and.w	r3, r3, #15
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d101      	bne.n	8009f24 <HAL_PCD_EP_SetStall+0x82>
 8009f20:	2302      	movs	r3, #2
 8009f22:	e01d      	b.n	8009f60 <HAL_PCD_EP_SetStall+0xbe>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68f9      	ldr	r1, [r7, #12]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f006 f94a 	bl	80101cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	f003 030f 	and.w	r3, r3, #15
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d109      	bne.n	8009f56 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	7999      	ldrb	r1, [r3, #6]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f50:	461a      	mov	r2, r3
 8009f52:	f006 fb3d 	bl	80105d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	f003 030f 	and.w	r3, r3, #15
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	7912      	ldrb	r2, [r2, #4]
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d901      	bls.n	8009f86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e042      	b.n	800a00c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	da0f      	bge.n	8009fae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f8e:	78fb      	ldrb	r3, [r7, #3]
 8009f90:	f003 020f 	and.w	r2, r3, #15
 8009f94:	4613      	mov	r3, r2
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	4413      	add	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	3310      	adds	r3, #16
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	705a      	strb	r2, [r3, #1]
 8009fac:	e00f      	b.n	8009fce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fae:	78fb      	ldrb	r3, [r7, #3]
 8009fb0:	f003 020f 	and.w	r2, r3, #15
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	f003 030f 	and.w	r3, r3, #15
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d101      	bne.n	8009fee <HAL_PCD_EP_ClrStall+0x86>
 8009fea:	2302      	movs	r3, #2
 8009fec:	e00e      	b.n	800a00c <HAL_PCD_EP_ClrStall+0xa4>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68f9      	ldr	r1, [r7, #12]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f006 f953 	bl	80102a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a024:	2b00      	cmp	r3, #0
 800a026:	da0c      	bge.n	800a042 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	f003 020f 	and.w	r2, r3, #15
 800a02e:	4613      	mov	r3, r2
 800a030:	00db      	lsls	r3, r3, #3
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	3310      	adds	r3, #16
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	4413      	add	r3, r2
 800a03c:	3304      	adds	r3, #4
 800a03e:	60fb      	str	r3, [r7, #12]
 800a040:	e00c      	b.n	800a05c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a042:	78fb      	ldrb	r3, [r7, #3]
 800a044:	f003 020f 	and.w	r2, r3, #15
 800a048:	4613      	mov	r3, r2
 800a04a:	00db      	lsls	r3, r3, #3
 800a04c:	4413      	add	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	4413      	add	r3, r2
 800a058:	3304      	adds	r3, #4
 800a05a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68f9      	ldr	r1, [r7, #12]
 800a062:	4618      	mov	r0, r3
 800a064:	f005 ff72 	bl	800ff4c <USB_EPStopXfer>
 800a068:	4603      	mov	r3, r0
 800a06a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a06c:	7afb      	ldrb	r3, [r7, #11]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b08a      	sub	sp, #40	@ 0x28
 800a07a:	af02      	add	r7, sp, #8
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	4613      	mov	r3, r2
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	3310      	adds	r3, #16
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	4413      	add	r3, r2
 800a09a:	3304      	adds	r3, #4
 800a09c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	695a      	ldr	r2, [r3, #20]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d901      	bls.n	800a0ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e06b      	b.n	800a186 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	691a      	ldr	r2, [r3, #16]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	69fa      	ldr	r2, [r7, #28]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d902      	bls.n	800a0ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	3303      	adds	r3, #3
 800a0ce:	089b      	lsrs	r3, r3, #2
 800a0d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a0d2:	e02a      	b.n	800a12a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	691a      	ldr	r2, [r3, #16]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	69fa      	ldr	r2, [r7, #28]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d902      	bls.n	800a0f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	3303      	adds	r3, #3
 800a0f4:	089b      	lsrs	r3, r3, #2
 800a0f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	68d9      	ldr	r1, [r3, #12]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	4603      	mov	r3, r0
 800a10c:	6978      	ldr	r0, [r7, #20]
 800a10e:	f005 ffc7 	bl	80100a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	68da      	ldr	r2, [r3, #12]
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	441a      	add	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	695a      	ldr	r2, [r3, #20]
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	441a      	add	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a13a:	69ba      	ldr	r2, [r7, #24]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d809      	bhi.n	800a154 <PCD_WriteEmptyTxFifo+0xde>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	695a      	ldr	r2, [r3, #20]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a148:	429a      	cmp	r2, r3
 800a14a:	d203      	bcs.n	800a154 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1bf      	bne.n	800a0d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	691a      	ldr	r2, [r3, #16]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d811      	bhi.n	800a184 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	f003 030f 	and.w	r3, r3, #15
 800a166:	2201      	movs	r2, #1
 800a168:	fa02 f303 	lsl.w	r3, r2, r3
 800a16c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	43db      	mvns	r3, r3
 800a17a:	6939      	ldr	r1, [r7, #16]
 800a17c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a180:	4013      	ands	r3, r2
 800a182:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3720      	adds	r7, #32
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
	...

0800a190 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b088      	sub	sp, #32
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	333c      	adds	r3, #60	@ 0x3c
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	799b      	ldrb	r3, [r3, #6]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d17b      	bne.n	800a2be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d015      	beq.n	800a1fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	4a61      	ldr	r2, [pc, #388]	@ (800a358 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	f240 80b9 	bls.w	800a34c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 80b3 	beq.w	800a34c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1f8:	6093      	str	r3, [r2, #8]
 800a1fa:	e0a7      	b.n	800a34c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	f003 0320 	and.w	r3, r3, #32
 800a202:	2b00      	cmp	r3, #0
 800a204:	d009      	beq.n	800a21a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a212:	461a      	mov	r2, r3
 800a214:	2320      	movs	r3, #32
 800a216:	6093      	str	r3, [r2, #8]
 800a218:	e098      	b.n	800a34c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a220:	2b00      	cmp	r3, #0
 800a222:	f040 8093 	bne.w	800a34c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	4a4b      	ldr	r2, [pc, #300]	@ (800a358 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d90f      	bls.n	800a24e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	015a      	lsls	r2, r3, #5
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	4413      	add	r3, r2
 800a240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a244:	461a      	mov	r2, r3
 800a246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a24a:	6093      	str	r3, [r2, #8]
 800a24c:	e07e      	b.n	800a34c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	4613      	mov	r3, r2
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	4413      	add	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	4413      	add	r3, r2
 800a260:	3304      	adds	r3, #4
 800a262:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6a1a      	ldr	r2, [r3, #32]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	0159      	lsls	r1, r3, #5
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	440b      	add	r3, r1
 800a270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a27a:	1ad2      	subs	r2, r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d114      	bne.n	800a2b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d109      	bne.n	800a2a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a298:	461a      	mov	r2, r3
 800a29a:	2101      	movs	r1, #1
 800a29c:	f006 f998 	bl	80105d0 <USB_EP0_OutStart>
 800a2a0:	e006      	b.n	800a2b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	441a      	add	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f008 fce0 	bl	8012c7c <HAL_PCD_DataOutStageCallback>
 800a2bc:	e046      	b.n	800a34c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	4a26      	ldr	r2, [pc, #152]	@ (800a35c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d124      	bne.n	800a310 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00a      	beq.n	800a2e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2dc:	461a      	mov	r2, r3
 800a2de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2e2:	6093      	str	r3, [r2, #8]
 800a2e4:	e032      	b.n	800a34c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	f003 0320 	and.w	r3, r3, #32
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d008      	beq.n	800a302 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	2320      	movs	r3, #32
 800a300:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	b2db      	uxtb	r3, r3
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f008 fcb7 	bl	8012c7c <HAL_PCD_DataOutStageCallback>
 800a30e:	e01d      	b.n	800a34c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d114      	bne.n	800a340 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	4613      	mov	r3, r2
 800a31c:	00db      	lsls	r3, r3, #3
 800a31e:	4413      	add	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	440b      	add	r3, r1
 800a324:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d108      	bne.n	800a340 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a338:	461a      	mov	r2, r3
 800a33a:	2100      	movs	r1, #0
 800a33c:	f006 f948 	bl	80105d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	b2db      	uxtb	r3, r3
 800a344:	4619      	mov	r1, r3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f008 fc98 	bl	8012c7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3720      	adds	r7, #32
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	4f54300a 	.word	0x4f54300a
 800a35c:	4f54310a 	.word	0x4f54310a

0800a360 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	333c      	adds	r3, #60	@ 0x3c
 800a378:	3304      	adds	r3, #4
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	015a      	lsls	r2, r3, #5
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	4413      	add	r3, r2
 800a386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	4a15      	ldr	r2, [pc, #84]	@ (800a3e8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d90e      	bls.n	800a3b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d009      	beq.n	800a3b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	015a      	lsls	r2, r3, #5
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f008 fc4f 	bl	8012c58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a3e8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d90c      	bls.n	800a3dc <PCD_EP_OutSetupPacket_int+0x7c>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	799b      	ldrb	r3, [r3, #6]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d108      	bne.n	800a3dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	f006 f8fa 	bl	80105d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3718      	adds	r7, #24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	4f54300a 	.word	0x4f54300a

0800a3ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	70fb      	strb	r3, [r7, #3]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a402:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d107      	bne.n	800a41a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a40a:	883b      	ldrh	r3, [r7, #0]
 800a40c:	0419      	lsls	r1, r3, #16
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	430a      	orrs	r2, r1
 800a416:	629a      	str	r2, [r3, #40]	@ 0x28
 800a418:	e028      	b.n	800a46c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a420:	0c1b      	lsrs	r3, r3, #16
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	4413      	add	r3, r2
 800a426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a428:	2300      	movs	r3, #0
 800a42a:	73fb      	strb	r3, [r7, #15]
 800a42c:	e00d      	b.n	800a44a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	7bfb      	ldrb	r3, [r7, #15]
 800a434:	3340      	adds	r3, #64	@ 0x40
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	0c1b      	lsrs	r3, r3, #16
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	4413      	add	r3, r2
 800a442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a444:	7bfb      	ldrb	r3, [r7, #15]
 800a446:	3301      	adds	r3, #1
 800a448:	73fb      	strb	r3, [r7, #15]
 800a44a:	7bfa      	ldrb	r2, [r7, #15]
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	3b01      	subs	r3, #1
 800a450:	429a      	cmp	r2, r3
 800a452:	d3ec      	bcc.n	800a42e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a454:	883b      	ldrh	r3, [r7, #0]
 800a456:	0418      	lsls	r0, r3, #16
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6819      	ldr	r1, [r3, #0]
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	3b01      	subs	r3, #1
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	4302      	orrs	r2, r0
 800a464:	3340      	adds	r3, #64	@ 0x40
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	440b      	add	r3, r1
 800a46a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	887a      	ldrh	r2, [r7, #2]
 800a48c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4ca:	4b05      	ldr	r3, [pc, #20]	@ (800a4e0 <HAL_PCDEx_ActivateLPM+0x44>)
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	10000003 	.word	0x10000003

0800a4e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a504:	4b19      	ldr	r3, [pc, #100]	@ (800a56c <HAL_PWREx_ConfigSupply+0x70>)
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	2b04      	cmp	r3, #4
 800a50e:	d00a      	beq.n	800a526 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a510:	4b16      	ldr	r3, [pc, #88]	@ (800a56c <HAL_PWREx_ConfigSupply+0x70>)
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f003 0307 	and.w	r3, r3, #7
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d001      	beq.n	800a522 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e01f      	b.n	800a562 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	e01d      	b.n	800a562 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a526:	4b11      	ldr	r3, [pc, #68]	@ (800a56c <HAL_PWREx_ConfigSupply+0x70>)
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f023 0207 	bic.w	r2, r3, #7
 800a52e:	490f      	ldr	r1, [pc, #60]	@ (800a56c <HAL_PWREx_ConfigSupply+0x70>)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4313      	orrs	r3, r2
 800a534:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a536:	f7f8 fc93 	bl	8002e60 <HAL_GetTick>
 800a53a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a53c:	e009      	b.n	800a552 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a53e:	f7f8 fc8f 	bl	8002e60 <HAL_GetTick>
 800a542:	4602      	mov	r2, r0
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a54c:	d901      	bls.n	800a552 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e007      	b.n	800a562 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a552:	4b06      	ldr	r3, [pc, #24]	@ (800a56c <HAL_PWREx_ConfigSupply+0x70>)
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a55a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a55e:	d1ee      	bne.n	800a53e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	58024800 	.word	0x58024800

0800a570 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a570:	b480      	push	{r7}
 800a572:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a574:	4b05      	ldr	r3, [pc, #20]	@ (800a58c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	4a04      	ldr	r2, [pc, #16]	@ (800a58c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a57a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a57e:	60d3      	str	r3, [r2, #12]
}
 800a580:	bf00      	nop
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	58024800 	.word	0x58024800

0800a590 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08c      	sub	sp, #48	@ 0x30
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d102      	bne.n	800a5a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	f000 bc1f 	b.w	800ade2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0301 	and.w	r3, r3, #1
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 80b3 	beq.w	800a718 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5b2:	4b95      	ldr	r3, [pc, #596]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5bc:	4b92      	ldr	r3, [pc, #584]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c4:	2b10      	cmp	r3, #16
 800a5c6:	d007      	beq.n	800a5d8 <HAL_RCC_OscConfig+0x48>
 800a5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ca:	2b18      	cmp	r3, #24
 800a5cc:	d112      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x64>
 800a5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d0:	f003 0303 	and.w	r3, r3, #3
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d10d      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5d8:	4b8b      	ldr	r3, [pc, #556]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 8098 	beq.w	800a716 <HAL_RCC_OscConfig+0x186>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f040 8093 	bne.w	800a716 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e3f6      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5fc:	d106      	bne.n	800a60c <HAL_RCC_OscConfig+0x7c>
 800a5fe:	4b82      	ldr	r3, [pc, #520]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a81      	ldr	r2, [pc, #516]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	e058      	b.n	800a6be <HAL_RCC_OscConfig+0x12e>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d112      	bne.n	800a63a <HAL_RCC_OscConfig+0xaa>
 800a614:	4b7c      	ldr	r3, [pc, #496]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a7b      	ldr	r2, [pc, #492]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a61a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	4b79      	ldr	r3, [pc, #484]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a78      	ldr	r2, [pc, #480]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a626:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	4b76      	ldr	r3, [pc, #472]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a75      	ldr	r2, [pc, #468]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	e041      	b.n	800a6be <HAL_RCC_OscConfig+0x12e>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a642:	d112      	bne.n	800a66a <HAL_RCC_OscConfig+0xda>
 800a644:	4b70      	ldr	r3, [pc, #448]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a6f      	ldr	r2, [pc, #444]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a64a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	4b6d      	ldr	r3, [pc, #436]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a6c      	ldr	r2, [pc, #432]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a656:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a65a:	6013      	str	r3, [r2, #0]
 800a65c:	4b6a      	ldr	r3, [pc, #424]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a69      	ldr	r2, [pc, #420]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	e029      	b.n	800a6be <HAL_RCC_OscConfig+0x12e>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a672:	d112      	bne.n	800a69a <HAL_RCC_OscConfig+0x10a>
 800a674:	4b64      	ldr	r3, [pc, #400]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a63      	ldr	r2, [pc, #396]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a67a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	4b61      	ldr	r3, [pc, #388]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a60      	ldr	r2, [pc, #384]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	4b5e      	ldr	r3, [pc, #376]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a5d      	ldr	r2, [pc, #372]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	e011      	b.n	800a6be <HAL_RCC_OscConfig+0x12e>
 800a69a:	4b5b      	ldr	r3, [pc, #364]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a5a      	ldr	r2, [pc, #360]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a6a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6a4:	6013      	str	r3, [r2, #0]
 800a6a6:	4b58      	ldr	r3, [pc, #352]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a57      	ldr	r2, [pc, #348]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a6ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6b0:	6013      	str	r3, [r2, #0]
 800a6b2:	4b55      	ldr	r3, [pc, #340]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a54      	ldr	r2, [pc, #336]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a6b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a6bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d013      	beq.n	800a6ee <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c6:	f7f8 fbcb 	bl	8002e60 <HAL_GetTick>
 800a6ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6cc:	e008      	b.n	800a6e0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6ce:	f7f8 fbc7 	bl	8002e60 <HAL_GetTick>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	2b64      	cmp	r3, #100	@ 0x64
 800a6da:	d901      	bls.n	800a6e0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e380      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6e0:	4b49      	ldr	r3, [pc, #292]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0f0      	beq.n	800a6ce <HAL_RCC_OscConfig+0x13e>
 800a6ec:	e014      	b.n	800a718 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ee:	f7f8 fbb7 	bl	8002e60 <HAL_GetTick>
 800a6f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a6f4:	e008      	b.n	800a708 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6f6:	f7f8 fbb3 	bl	8002e60 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	2b64      	cmp	r3, #100	@ 0x64
 800a702:	d901      	bls.n	800a708 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e36c      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a708:	4b3f      	ldr	r3, [pc, #252]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1f0      	bne.n	800a6f6 <HAL_RCC_OscConfig+0x166>
 800a714:	e000      	b.n	800a718 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a716:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0302 	and.w	r3, r3, #2
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 808c 	beq.w	800a83e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a726:	4b38      	ldr	r3, [pc, #224]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a72e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a730:	4b35      	ldr	r3, [pc, #212]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a734:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d007      	beq.n	800a74c <HAL_RCC_OscConfig+0x1bc>
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	2b18      	cmp	r3, #24
 800a740:	d137      	bne.n	800a7b2 <HAL_RCC_OscConfig+0x222>
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	f003 0303 	and.w	r3, r3, #3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d132      	bne.n	800a7b2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a74c:	4b2e      	ldr	r3, [pc, #184]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	d005      	beq.n	800a764 <HAL_RCC_OscConfig+0x1d4>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e33e      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a764:	4b28      	ldr	r3, [pc, #160]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f023 0219 	bic.w	r2, r3, #25
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	4925      	ldr	r1, [pc, #148]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a772:	4313      	orrs	r3, r2
 800a774:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a776:	f7f8 fb73 	bl	8002e60 <HAL_GetTick>
 800a77a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a77c:	e008      	b.n	800a790 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a77e:	f7f8 fb6f 	bl	8002e60 <HAL_GetTick>
 800a782:	4602      	mov	r2, r0
 800a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d901      	bls.n	800a790 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e328      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a790:	4b1d      	ldr	r3, [pc, #116]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d0f0      	beq.n	800a77e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a79c:	4b1a      	ldr	r3, [pc, #104]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	061b      	lsls	r3, r3, #24
 800a7aa:	4917      	ldr	r1, [pc, #92]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7b0:	e045      	b.n	800a83e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d028      	beq.n	800a80c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7ba:	4b13      	ldr	r3, [pc, #76]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f023 0219 	bic.w	r2, r3, #25
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	4910      	ldr	r1, [pc, #64]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7cc:	f7f8 fb48 	bl	8002e60 <HAL_GetTick>
 800a7d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7d2:	e008      	b.n	800a7e6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7d4:	f7f8 fb44 	bl	8002e60 <HAL_GetTick>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d901      	bls.n	800a7e6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e2fd      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7e6:	4b08      	ldr	r3, [pc, #32]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 0304 	and.w	r3, r3, #4
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d0f0      	beq.n	800a7d4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7f2:	4b05      	ldr	r3, [pc, #20]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	061b      	lsls	r3, r3, #24
 800a800:	4901      	ldr	r1, [pc, #4]	@ (800a808 <HAL_RCC_OscConfig+0x278>)
 800a802:	4313      	orrs	r3, r2
 800a804:	604b      	str	r3, [r1, #4]
 800a806:	e01a      	b.n	800a83e <HAL_RCC_OscConfig+0x2ae>
 800a808:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a80c:	4b97      	ldr	r3, [pc, #604]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a96      	ldr	r2, [pc, #600]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a812:	f023 0301 	bic.w	r3, r3, #1
 800a816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a818:	f7f8 fb22 	bl	8002e60 <HAL_GetTick>
 800a81c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a81e:	e008      	b.n	800a832 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a820:	f7f8 fb1e 	bl	8002e60 <HAL_GetTick>
 800a824:	4602      	mov	r2, r0
 800a826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d901      	bls.n	800a832 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e2d7      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a832:	4b8e      	ldr	r3, [pc, #568]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 0304 	and.w	r3, r3, #4
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1f0      	bne.n	800a820 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0310 	and.w	r3, r3, #16
 800a846:	2b00      	cmp	r3, #0
 800a848:	d06a      	beq.n	800a920 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a84a:	4b88      	ldr	r3, [pc, #544]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a852:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a854:	4b85      	ldr	r3, [pc, #532]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a858:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2b08      	cmp	r3, #8
 800a85e:	d007      	beq.n	800a870 <HAL_RCC_OscConfig+0x2e0>
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	2b18      	cmp	r3, #24
 800a864:	d11b      	bne.n	800a89e <HAL_RCC_OscConfig+0x30e>
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f003 0303 	and.w	r3, r3, #3
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d116      	bne.n	800a89e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a870:	4b7e      	ldr	r3, [pc, #504]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d005      	beq.n	800a888 <HAL_RCC_OscConfig+0x2f8>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	69db      	ldr	r3, [r3, #28]
 800a880:	2b80      	cmp	r3, #128	@ 0x80
 800a882:	d001      	beq.n	800a888 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e2ac      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a888:	4b78      	ldr	r3, [pc, #480]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	061b      	lsls	r3, r3, #24
 800a896:	4975      	ldr	r1, [pc, #468]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a898:	4313      	orrs	r3, r2
 800a89a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a89c:	e040      	b.n	800a920 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d023      	beq.n	800a8ee <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a8a6:	4b71      	ldr	r3, [pc, #452]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a70      	ldr	r2, [pc, #448]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a8ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b2:	f7f8 fad5 	bl	8002e60 <HAL_GetTick>
 800a8b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8b8:	e008      	b.n	800a8cc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8ba:	f7f8 fad1 	bl	8002e60 <HAL_GetTick>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d901      	bls.n	800a8cc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e28a      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8cc:	4b67      	ldr	r3, [pc, #412]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d0f0      	beq.n	800a8ba <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a8d8:	4b64      	ldr	r3, [pc, #400]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	061b      	lsls	r3, r3, #24
 800a8e6:	4961      	ldr	r1, [pc, #388]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	60cb      	str	r3, [r1, #12]
 800a8ec:	e018      	b.n	800a920 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a8ee:	4b5f      	ldr	r3, [pc, #380]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a5e      	ldr	r2, [pc, #376]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a8f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8fa:	f7f8 fab1 	bl	8002e60 <HAL_GetTick>
 800a8fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a900:	e008      	b.n	800a914 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a902:	f7f8 faad 	bl	8002e60 <HAL_GetTick>
 800a906:	4602      	mov	r2, r0
 800a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d901      	bls.n	800a914 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e266      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a914:	4b55      	ldr	r3, [pc, #340]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1f0      	bne.n	800a902 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0308 	and.w	r3, r3, #8
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d036      	beq.n	800a99a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d019      	beq.n	800a968 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a934:	4b4d      	ldr	r3, [pc, #308]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a938:	4a4c      	ldr	r2, [pc, #304]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a93a:	f043 0301 	orr.w	r3, r3, #1
 800a93e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a940:	f7f8 fa8e 	bl	8002e60 <HAL_GetTick>
 800a944:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a946:	e008      	b.n	800a95a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a948:	f7f8 fa8a 	bl	8002e60 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	2b02      	cmp	r3, #2
 800a954:	d901      	bls.n	800a95a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e243      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a95a:	4b44      	ldr	r3, [pc, #272]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a95c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a95e:	f003 0302 	and.w	r3, r3, #2
 800a962:	2b00      	cmp	r3, #0
 800a964:	d0f0      	beq.n	800a948 <HAL_RCC_OscConfig+0x3b8>
 800a966:	e018      	b.n	800a99a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a968:	4b40      	ldr	r3, [pc, #256]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a96a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a96c:	4a3f      	ldr	r2, [pc, #252]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a96e:	f023 0301 	bic.w	r3, r3, #1
 800a972:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a974:	f7f8 fa74 	bl	8002e60 <HAL_GetTick>
 800a978:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a97a:	e008      	b.n	800a98e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a97c:	f7f8 fa70 	bl	8002e60 <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	2b02      	cmp	r3, #2
 800a988:	d901      	bls.n	800a98e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e229      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a98e:	4b37      	ldr	r3, [pc, #220]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a992:	f003 0302 	and.w	r3, r3, #2
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1f0      	bne.n	800a97c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f003 0320 	and.w	r3, r3, #32
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d036      	beq.n	800aa14 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d019      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a9ae:	4b2f      	ldr	r3, [pc, #188]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a2e      	ldr	r2, [pc, #184]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a9b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a9b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9ba:	f7f8 fa51 	bl	8002e60 <HAL_GetTick>
 800a9be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9c0:	e008      	b.n	800a9d4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9c2:	f7f8 fa4d 	bl	8002e60 <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d901      	bls.n	800a9d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e206      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9d4:	4b25      	ldr	r3, [pc, #148]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d0f0      	beq.n	800a9c2 <HAL_RCC_OscConfig+0x432>
 800a9e0:	e018      	b.n	800aa14 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a9e2:	4b22      	ldr	r3, [pc, #136]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a21      	ldr	r2, [pc, #132]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800a9e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9ee:	f7f8 fa37 	bl	8002e60 <HAL_GetTick>
 800a9f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a9f4:	e008      	b.n	800aa08 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9f6:	f7f8 fa33 	bl	8002e60 <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d901      	bls.n	800aa08 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e1ec      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aa08:	4b18      	ldr	r3, [pc, #96]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1f0      	bne.n	800a9f6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 80af 	beq.w	800ab80 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aa22:	4b13      	ldr	r3, [pc, #76]	@ (800aa70 <HAL_RCC_OscConfig+0x4e0>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a12      	ldr	r2, [pc, #72]	@ (800aa70 <HAL_RCC_OscConfig+0x4e0>)
 800aa28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa2e:	f7f8 fa17 	bl	8002e60 <HAL_GetTick>
 800aa32:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa34:	e008      	b.n	800aa48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa36:	f7f8 fa13 	bl	8002e60 <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	2b64      	cmp	r3, #100	@ 0x64
 800aa42:	d901      	bls.n	800aa48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e1cc      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa48:	4b09      	ldr	r3, [pc, #36]	@ (800aa70 <HAL_RCC_OscConfig+0x4e0>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d0f0      	beq.n	800aa36 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d10b      	bne.n	800aa74 <HAL_RCC_OscConfig+0x4e4>
 800aa5c:	4b03      	ldr	r3, [pc, #12]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800aa5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa60:	4a02      	ldr	r2, [pc, #8]	@ (800aa6c <HAL_RCC_OscConfig+0x4dc>)
 800aa62:	f043 0301 	orr.w	r3, r3, #1
 800aa66:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa68:	e05b      	b.n	800ab22 <HAL_RCC_OscConfig+0x592>
 800aa6a:	bf00      	nop
 800aa6c:	58024400 	.word	0x58024400
 800aa70:	58024800 	.word	0x58024800
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d112      	bne.n	800aaa2 <HAL_RCC_OscConfig+0x512>
 800aa7c:	4b9d      	ldr	r3, [pc, #628]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aa7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa80:	4a9c      	ldr	r2, [pc, #624]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aa82:	f023 0301 	bic.w	r3, r3, #1
 800aa86:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa88:	4b9a      	ldr	r3, [pc, #616]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aa8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa8c:	4a99      	ldr	r2, [pc, #612]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aa8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa92:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa94:	4b97      	ldr	r3, [pc, #604]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aa96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa98:	4a96      	ldr	r2, [pc, #600]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aa9a:	f023 0304 	bic.w	r3, r3, #4
 800aa9e:	6713      	str	r3, [r2, #112]	@ 0x70
 800aaa0:	e03f      	b.n	800ab22 <HAL_RCC_OscConfig+0x592>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	d112      	bne.n	800aad0 <HAL_RCC_OscConfig+0x540>
 800aaaa:	4b92      	ldr	r3, [pc, #584]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aaac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aaae:	4a91      	ldr	r2, [pc, #580]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aab0:	f043 0304 	orr.w	r3, r3, #4
 800aab4:	6713      	str	r3, [r2, #112]	@ 0x70
 800aab6:	4b8f      	ldr	r3, [pc, #572]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aaba:	4a8e      	ldr	r2, [pc, #568]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aabc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aac0:	6713      	str	r3, [r2, #112]	@ 0x70
 800aac2:	4b8c      	ldr	r3, [pc, #560]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aac6:	4a8b      	ldr	r2, [pc, #556]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aac8:	f043 0301 	orr.w	r3, r3, #1
 800aacc:	6713      	str	r3, [r2, #112]	@ 0x70
 800aace:	e028      	b.n	800ab22 <HAL_RCC_OscConfig+0x592>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	2b85      	cmp	r3, #133	@ 0x85
 800aad6:	d112      	bne.n	800aafe <HAL_RCC_OscConfig+0x56e>
 800aad8:	4b86      	ldr	r3, [pc, #536]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aadc:	4a85      	ldr	r2, [pc, #532]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aade:	f043 0304 	orr.w	r3, r3, #4
 800aae2:	6713      	str	r3, [r2, #112]	@ 0x70
 800aae4:	4b83      	ldr	r3, [pc, #524]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aae8:	4a82      	ldr	r2, [pc, #520]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aaea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaee:	6713      	str	r3, [r2, #112]	@ 0x70
 800aaf0:	4b80      	ldr	r3, [pc, #512]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aaf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aaf4:	4a7f      	ldr	r2, [pc, #508]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aaf6:	f043 0301 	orr.w	r3, r3, #1
 800aafa:	6713      	str	r3, [r2, #112]	@ 0x70
 800aafc:	e011      	b.n	800ab22 <HAL_RCC_OscConfig+0x592>
 800aafe:	4b7d      	ldr	r3, [pc, #500]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ab00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab02:	4a7c      	ldr	r2, [pc, #496]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ab04:	f023 0301 	bic.w	r3, r3, #1
 800ab08:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab0a:	4b7a      	ldr	r3, [pc, #488]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ab0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab0e:	4a79      	ldr	r2, [pc, #484]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ab10:	f023 0304 	bic.w	r3, r3, #4
 800ab14:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab16:	4b77      	ldr	r3, [pc, #476]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ab18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab1a:	4a76      	ldr	r2, [pc, #472]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ab1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab20:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d015      	beq.n	800ab56 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab2a:	f7f8 f999 	bl	8002e60 <HAL_GetTick>
 800ab2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab30:	e00a      	b.n	800ab48 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab32:	f7f8 f995 	bl	8002e60 <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d901      	bls.n	800ab48 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e14c      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab48:	4b6a      	ldr	r3, [pc, #424]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ab4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab4c:	f003 0302 	and.w	r3, r3, #2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d0ee      	beq.n	800ab32 <HAL_RCC_OscConfig+0x5a2>
 800ab54:	e014      	b.n	800ab80 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab56:	f7f8 f983 	bl	8002e60 <HAL_GetTick>
 800ab5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab5c:	e00a      	b.n	800ab74 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab5e:	f7f8 f97f 	bl	8002e60 <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d901      	bls.n	800ab74 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e136      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab74:	4b5f      	ldr	r3, [pc, #380]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ab76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab78:	f003 0302 	and.w	r3, r3, #2
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1ee      	bne.n	800ab5e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 812b 	beq.w	800ade0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ab8a:	4b5a      	ldr	r3, [pc, #360]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab92:	2b18      	cmp	r3, #24
 800ab94:	f000 80bb 	beq.w	800ad0e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	f040 8095 	bne.w	800accc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aba2:	4b54      	ldr	r3, [pc, #336]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a53      	ldr	r2, [pc, #332]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800aba8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800abac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abae:	f7f8 f957 	bl	8002e60 <HAL_GetTick>
 800abb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abb4:	e008      	b.n	800abc8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abb6:	f7f8 f953 	bl	8002e60 <HAL_GetTick>
 800abba:	4602      	mov	r2, r0
 800abbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d901      	bls.n	800abc8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e10c      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abc8:	4b4a      	ldr	r3, [pc, #296]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1f0      	bne.n	800abb6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abd4:	4b47      	ldr	r3, [pc, #284]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800abd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800abd8:	4b47      	ldr	r3, [pc, #284]	@ (800acf8 <HAL_RCC_OscConfig+0x768>)
 800abda:	4013      	ands	r3, r2
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800abe4:	0112      	lsls	r2, r2, #4
 800abe6:	430a      	orrs	r2, r1
 800abe8:	4942      	ldr	r1, [pc, #264]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800abea:	4313      	orrs	r3, r2
 800abec:	628b      	str	r3, [r1, #40]	@ 0x28
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf2:	3b01      	subs	r3, #1
 800abf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfc:	3b01      	subs	r3, #1
 800abfe:	025b      	lsls	r3, r3, #9
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	431a      	orrs	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	041b      	lsls	r3, r3, #16
 800ac0c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ac10:	431a      	orrs	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac16:	3b01      	subs	r3, #1
 800ac18:	061b      	lsls	r3, r3, #24
 800ac1a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ac1e:	4935      	ldr	r1, [pc, #212]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ac24:	4b33      	ldr	r3, [pc, #204]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac28:	4a32      	ldr	r2, [pc, #200]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac2a:	f023 0301 	bic.w	r3, r3, #1
 800ac2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac30:	4b30      	ldr	r3, [pc, #192]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac34:	4b31      	ldr	r3, [pc, #196]	@ (800acfc <HAL_RCC_OscConfig+0x76c>)
 800ac36:	4013      	ands	r3, r2
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ac3c:	00d2      	lsls	r2, r2, #3
 800ac3e:	492d      	ldr	r1, [pc, #180]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac40:	4313      	orrs	r3, r2
 800ac42:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ac44:	4b2b      	ldr	r3, [pc, #172]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac48:	f023 020c 	bic.w	r2, r3, #12
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac50:	4928      	ldr	r1, [pc, #160]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ac56:	4b27      	ldr	r3, [pc, #156]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5a:	f023 0202 	bic.w	r2, r3, #2
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac62:	4924      	ldr	r1, [pc, #144]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac64:	4313      	orrs	r3, r2
 800ac66:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac68:	4b22      	ldr	r3, [pc, #136]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac6c:	4a21      	ldr	r2, [pc, #132]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac74:	4b1f      	ldr	r3, [pc, #124]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac78:	4a1e      	ldr	r2, [pc, #120]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ac80:	4b1c      	ldr	r3, [pc, #112]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac84:	4a1b      	ldr	r2, [pc, #108]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ac8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ac8c:	4b19      	ldr	r3, [pc, #100]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac90:	4a18      	ldr	r2, [pc, #96]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac92:	f043 0301 	orr.w	r3, r3, #1
 800ac96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac98:	4b16      	ldr	r3, [pc, #88]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a15      	ldr	r2, [pc, #84]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800ac9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aca4:	f7f8 f8dc 	bl	8002e60 <HAL_GetTick>
 800aca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acaa:	e008      	b.n	800acbe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acac:	f7f8 f8d8 	bl	8002e60 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e091      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acbe:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0f0      	beq.n	800acac <HAL_RCC_OscConfig+0x71c>
 800acca:	e089      	b.n	800ade0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800accc:	4b09      	ldr	r3, [pc, #36]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a08      	ldr	r2, [pc, #32]	@ (800acf4 <HAL_RCC_OscConfig+0x764>)
 800acd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acd8:	f7f8 f8c2 	bl	8002e60 <HAL_GetTick>
 800acdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acde:	e00f      	b.n	800ad00 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ace0:	f7f8 f8be 	bl	8002e60 <HAL_GetTick>
 800ace4:	4602      	mov	r2, r0
 800ace6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace8:	1ad3      	subs	r3, r2, r3
 800acea:	2b02      	cmp	r3, #2
 800acec:	d908      	bls.n	800ad00 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800acee:	2303      	movs	r3, #3
 800acf0:	e077      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
 800acf2:	bf00      	nop
 800acf4:	58024400 	.word	0x58024400
 800acf8:	fffffc0c 	.word	0xfffffc0c
 800acfc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad00:	4b3a      	ldr	r3, [pc, #232]	@ (800adec <HAL_RCC_OscConfig+0x85c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e9      	bne.n	800ace0 <HAL_RCC_OscConfig+0x750>
 800ad0c:	e068      	b.n	800ade0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ad0e:	4b37      	ldr	r3, [pc, #220]	@ (800adec <HAL_RCC_OscConfig+0x85c>)
 800ad10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad12:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ad14:	4b35      	ldr	r3, [pc, #212]	@ (800adec <HAL_RCC_OscConfig+0x85c>)
 800ad16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad18:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d031      	beq.n	800ad86 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	f003 0203 	and.w	r2, r3, #3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d12a      	bne.n	800ad86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	091b      	lsrs	r3, r3, #4
 800ad34:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d122      	bne.n	800ad86 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d11a      	bne.n	800ad86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	0a5b      	lsrs	r3, r3, #9
 800ad54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad5c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d111      	bne.n	800ad86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	0c1b      	lsrs	r3, r3, #16
 800ad66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d108      	bne.n	800ad86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	0e1b      	lsrs	r3, r3, #24
 800ad78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d001      	beq.n	800ad8a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e02b      	b.n	800ade2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad8a:	4b18      	ldr	r3, [pc, #96]	@ (800adec <HAL_RCC_OscConfig+0x85c>)
 800ad8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad8e:	08db      	lsrs	r3, r3, #3
 800ad90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad94:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d01f      	beq.n	800ade0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ada0:	4b12      	ldr	r3, [pc, #72]	@ (800adec <HAL_RCC_OscConfig+0x85c>)
 800ada2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada4:	4a11      	ldr	r2, [pc, #68]	@ (800adec <HAL_RCC_OscConfig+0x85c>)
 800ada6:	f023 0301 	bic.w	r3, r3, #1
 800adaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800adac:	f7f8 f858 	bl	8002e60 <HAL_GetTick>
 800adb0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800adb2:	bf00      	nop
 800adb4:	f7f8 f854 	bl	8002e60 <HAL_GetTick>
 800adb8:	4602      	mov	r2, r0
 800adba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d0f9      	beq.n	800adb4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800adc0:	4b0a      	ldr	r3, [pc, #40]	@ (800adec <HAL_RCC_OscConfig+0x85c>)
 800adc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adc4:	4b0a      	ldr	r3, [pc, #40]	@ (800adf0 <HAL_RCC_OscConfig+0x860>)
 800adc6:	4013      	ands	r3, r2
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800adcc:	00d2      	lsls	r2, r2, #3
 800adce:	4907      	ldr	r1, [pc, #28]	@ (800adec <HAL_RCC_OscConfig+0x85c>)
 800add0:	4313      	orrs	r3, r2
 800add2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800add4:	4b05      	ldr	r3, [pc, #20]	@ (800adec <HAL_RCC_OscConfig+0x85c>)
 800add6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add8:	4a04      	ldr	r2, [pc, #16]	@ (800adec <HAL_RCC_OscConfig+0x85c>)
 800adda:	f043 0301 	orr.w	r3, r3, #1
 800adde:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3730      	adds	r7, #48	@ 0x30
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	58024400 	.word	0x58024400
 800adf0:	ffff0007 	.word	0xffff0007

0800adf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d101      	bne.n	800ae08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e19c      	b.n	800b142 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae08:	4b8a      	ldr	r3, [pc, #552]	@ (800b034 <HAL_RCC_ClockConfig+0x240>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 030f 	and.w	r3, r3, #15
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d910      	bls.n	800ae38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae16:	4b87      	ldr	r3, [pc, #540]	@ (800b034 <HAL_RCC_ClockConfig+0x240>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f023 020f 	bic.w	r2, r3, #15
 800ae1e:	4985      	ldr	r1, [pc, #532]	@ (800b034 <HAL_RCC_ClockConfig+0x240>)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae26:	4b83      	ldr	r3, [pc, #524]	@ (800b034 <HAL_RCC_ClockConfig+0x240>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d001      	beq.n	800ae38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e184      	b.n	800b142 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 0304 	and.w	r3, r3, #4
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d010      	beq.n	800ae66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691a      	ldr	r2, [r3, #16]
 800ae48:	4b7b      	ldr	r3, [pc, #492]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d908      	bls.n	800ae66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ae54:	4b78      	ldr	r3, [pc, #480]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	4975      	ldr	r1, [pc, #468]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 0308 	and.w	r3, r3, #8
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d010      	beq.n	800ae94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	695a      	ldr	r2, [r3, #20]
 800ae76:	4b70      	ldr	r3, [pc, #448]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800ae78:	69db      	ldr	r3, [r3, #28]
 800ae7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d908      	bls.n	800ae94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae82:	4b6d      	ldr	r3, [pc, #436]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	496a      	ldr	r1, [pc, #424]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800ae90:	4313      	orrs	r3, r2
 800ae92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 0310 	and.w	r3, r3, #16
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d010      	beq.n	800aec2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699a      	ldr	r2, [r3, #24]
 800aea4:	4b64      	ldr	r3, [pc, #400]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d908      	bls.n	800aec2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aeb0:	4b61      	ldr	r3, [pc, #388]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	495e      	ldr	r1, [pc, #376]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800aebe:	4313      	orrs	r3, r2
 800aec0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 0320 	and.w	r3, r3, #32
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d010      	beq.n	800aef0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	69da      	ldr	r2, [r3, #28]
 800aed2:	4b59      	ldr	r3, [pc, #356]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d908      	bls.n	800aef0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aede:	4b56      	ldr	r3, [pc, #344]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	69db      	ldr	r3, [r3, #28]
 800aeea:	4953      	ldr	r1, [pc, #332]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800aeec:	4313      	orrs	r3, r2
 800aeee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0302 	and.w	r3, r3, #2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d010      	beq.n	800af1e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68da      	ldr	r2, [r3, #12]
 800af00:	4b4d      	ldr	r3, [pc, #308]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	f003 030f 	and.w	r3, r3, #15
 800af08:	429a      	cmp	r2, r3
 800af0a:	d908      	bls.n	800af1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af0c:	4b4a      	ldr	r3, [pc, #296]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800af0e:	699b      	ldr	r3, [r3, #24]
 800af10:	f023 020f 	bic.w	r2, r3, #15
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	4947      	ldr	r1, [pc, #284]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0301 	and.w	r3, r3, #1
 800af26:	2b00      	cmp	r3, #0
 800af28:	d055      	beq.n	800afd6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800af2a:	4b43      	ldr	r3, [pc, #268]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	4940      	ldr	r1, [pc, #256]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800af38:	4313      	orrs	r3, r2
 800af3a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2b02      	cmp	r3, #2
 800af42:	d107      	bne.n	800af54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af44:	4b3c      	ldr	r3, [pc, #240]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d121      	bne.n	800af94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	e0f6      	b.n	800b142 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	2b03      	cmp	r3, #3
 800af5a:	d107      	bne.n	800af6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af5c:	4b36      	ldr	r3, [pc, #216]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af64:	2b00      	cmp	r3, #0
 800af66:	d115      	bne.n	800af94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e0ea      	b.n	800b142 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d107      	bne.n	800af84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800af74:	4b30      	ldr	r3, [pc, #192]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d109      	bne.n	800af94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	e0de      	b.n	800b142 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af84:	4b2c      	ldr	r3, [pc, #176]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 0304 	and.w	r3, r3, #4
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	e0d6      	b.n	800b142 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af94:	4b28      	ldr	r3, [pc, #160]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	f023 0207 	bic.w	r2, r3, #7
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	4925      	ldr	r1, [pc, #148]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800afa2:	4313      	orrs	r3, r2
 800afa4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afa6:	f7f7 ff5b 	bl	8002e60 <HAL_GetTick>
 800afaa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afac:	e00a      	b.n	800afc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afae:	f7f7 ff57 	bl	8002e60 <HAL_GetTick>
 800afb2:	4602      	mov	r2, r0
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d901      	bls.n	800afc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e0be      	b.n	800b142 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afc4:	4b1c      	ldr	r3, [pc, #112]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	00db      	lsls	r3, r3, #3
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d1eb      	bne.n	800afae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0302 	and.w	r3, r3, #2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d010      	beq.n	800b004 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68da      	ldr	r2, [r3, #12]
 800afe6:	4b14      	ldr	r3, [pc, #80]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	f003 030f 	and.w	r3, r3, #15
 800afee:	429a      	cmp	r2, r3
 800aff0:	d208      	bcs.n	800b004 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aff2:	4b11      	ldr	r3, [pc, #68]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	f023 020f 	bic.w	r2, r3, #15
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	490e      	ldr	r1, [pc, #56]	@ (800b038 <HAL_RCC_ClockConfig+0x244>)
 800b000:	4313      	orrs	r3, r2
 800b002:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b004:	4b0b      	ldr	r3, [pc, #44]	@ (800b034 <HAL_RCC_ClockConfig+0x240>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 030f 	and.w	r3, r3, #15
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d214      	bcs.n	800b03c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b012:	4b08      	ldr	r3, [pc, #32]	@ (800b034 <HAL_RCC_ClockConfig+0x240>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f023 020f 	bic.w	r2, r3, #15
 800b01a:	4906      	ldr	r1, [pc, #24]	@ (800b034 <HAL_RCC_ClockConfig+0x240>)
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	4313      	orrs	r3, r2
 800b020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b022:	4b04      	ldr	r3, [pc, #16]	@ (800b034 <HAL_RCC_ClockConfig+0x240>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 030f 	and.w	r3, r3, #15
 800b02a:	683a      	ldr	r2, [r7, #0]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d005      	beq.n	800b03c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e086      	b.n	800b142 <HAL_RCC_ClockConfig+0x34e>
 800b034:	52002000 	.word	0x52002000
 800b038:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0304 	and.w	r3, r3, #4
 800b044:	2b00      	cmp	r3, #0
 800b046:	d010      	beq.n	800b06a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	691a      	ldr	r2, [r3, #16]
 800b04c:	4b3f      	ldr	r3, [pc, #252]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b054:	429a      	cmp	r2, r3
 800b056:	d208      	bcs.n	800b06a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b058:	4b3c      	ldr	r3, [pc, #240]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	4939      	ldr	r1, [pc, #228]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b066:	4313      	orrs	r3, r2
 800b068:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0308 	and.w	r3, r3, #8
 800b072:	2b00      	cmp	r3, #0
 800b074:	d010      	beq.n	800b098 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	695a      	ldr	r2, [r3, #20]
 800b07a:	4b34      	ldr	r3, [pc, #208]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b082:	429a      	cmp	r2, r3
 800b084:	d208      	bcs.n	800b098 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b086:	4b31      	ldr	r3, [pc, #196]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	492e      	ldr	r1, [pc, #184]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b094:	4313      	orrs	r3, r2
 800b096:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0310 	and.w	r3, r3, #16
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d010      	beq.n	800b0c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	699a      	ldr	r2, [r3, #24]
 800b0a8:	4b28      	ldr	r3, [pc, #160]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d208      	bcs.n	800b0c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b0b4:	4b25      	ldr	r3, [pc, #148]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b0b6:	69db      	ldr	r3, [r3, #28]
 800b0b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	4922      	ldr	r1, [pc, #136]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0320 	and.w	r3, r3, #32
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d010      	beq.n	800b0f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	69da      	ldr	r2, [r3, #28]
 800b0d6:	4b1d      	ldr	r3, [pc, #116]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d208      	bcs.n	800b0f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b0e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
 800b0e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	69db      	ldr	r3, [r3, #28]
 800b0ee:	4917      	ldr	r1, [pc, #92]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b0f4:	f000 f89e 	bl	800b234 <HAL_RCC_GetSysClockFreq>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	4b14      	ldr	r3, [pc, #80]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	0a1b      	lsrs	r3, r3, #8
 800b100:	f003 030f 	and.w	r3, r3, #15
 800b104:	4912      	ldr	r1, [pc, #72]	@ (800b150 <HAL_RCC_ClockConfig+0x35c>)
 800b106:	5ccb      	ldrb	r3, [r1, r3]
 800b108:	f003 031f 	and.w	r3, r3, #31
 800b10c:	fa22 f303 	lsr.w	r3, r2, r3
 800b110:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b112:	4b0e      	ldr	r3, [pc, #56]	@ (800b14c <HAL_RCC_ClockConfig+0x358>)
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	f003 030f 	and.w	r3, r3, #15
 800b11a:	4a0d      	ldr	r2, [pc, #52]	@ (800b150 <HAL_RCC_ClockConfig+0x35c>)
 800b11c:	5cd3      	ldrb	r3, [r2, r3]
 800b11e:	f003 031f 	and.w	r3, r3, #31
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	fa22 f303 	lsr.w	r3, r2, r3
 800b128:	4a0a      	ldr	r2, [pc, #40]	@ (800b154 <HAL_RCC_ClockConfig+0x360>)
 800b12a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b12c:	4a0a      	ldr	r2, [pc, #40]	@ (800b158 <HAL_RCC_ClockConfig+0x364>)
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b132:	4b0a      	ldr	r3, [pc, #40]	@ (800b15c <HAL_RCC_ClockConfig+0x368>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4618      	mov	r0, r3
 800b138:	f7f7 fe48 	bl	8002dcc <HAL_InitTick>
 800b13c:	4603      	mov	r3, r0
 800b13e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b140:	7bfb      	ldrb	r3, [r7, #15]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	58024400 	.word	0x58024400
 800b150:	080136e8 	.word	0x080136e8
 800b154:	24000008 	.word	0x24000008
 800b158:	24000004 	.word	0x24000004
 800b15c:	2400000c 	.word	0x2400000c

0800b160 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08c      	sub	sp, #48	@ 0x30
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d12a      	bne.n	800b1c8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b172:	4b2d      	ldr	r3, [pc, #180]	@ (800b228 <HAL_RCC_MCOConfig+0xc8>)
 800b174:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b178:	4a2b      	ldr	r2, [pc, #172]	@ (800b228 <HAL_RCC_MCOConfig+0xc8>)
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b182:	4b29      	ldr	r3, [pc, #164]	@ (800b228 <HAL_RCC_MCOConfig+0xc8>)
 800b184:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b188:	f003 0301 	and.w	r3, r3, #1
 800b18c:	61bb      	str	r3, [r7, #24]
 800b18e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b196:	2302      	movs	r3, #2
 800b198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b19a:	2303      	movs	r3, #3
 800b19c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b1a6:	f107 031c 	add.w	r3, r7, #28
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	481f      	ldr	r0, [pc, #124]	@ (800b22c <HAL_RCC_MCOConfig+0xcc>)
 800b1ae:	f7fc fdb9 	bl	8007d24 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b1b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b228 <HAL_RCC_MCOConfig+0xc8>)
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800b1ba:	68b9      	ldr	r1, [r7, #8]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	430b      	orrs	r3, r1
 800b1c0:	4919      	ldr	r1, [pc, #100]	@ (800b228 <HAL_RCC_MCOConfig+0xc8>)
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b1c6:	e02a      	b.n	800b21e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b1c8:	4b17      	ldr	r3, [pc, #92]	@ (800b228 <HAL_RCC_MCOConfig+0xc8>)
 800b1ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b1ce:	4a16      	ldr	r2, [pc, #88]	@ (800b228 <HAL_RCC_MCOConfig+0xc8>)
 800b1d0:	f043 0304 	orr.w	r3, r3, #4
 800b1d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b1d8:	4b13      	ldr	r3, [pc, #76]	@ (800b228 <HAL_RCC_MCOConfig+0xc8>)
 800b1da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b1de:	f003 0304 	and.w	r3, r3, #4
 800b1e2:	617b      	str	r3, [r7, #20]
 800b1e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b1e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1f0:	2303      	movs	r3, #3
 800b1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b1fc:	f107 031c 	add.w	r3, r7, #28
 800b200:	4619      	mov	r1, r3
 800b202:	480b      	ldr	r0, [pc, #44]	@ (800b230 <HAL_RCC_MCOConfig+0xd0>)
 800b204:	f7fc fd8e 	bl	8007d24 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b208:	4b07      	ldr	r3, [pc, #28]	@ (800b228 <HAL_RCC_MCOConfig+0xc8>)
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	01d9      	lsls	r1, r3, #7
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	430b      	orrs	r3, r1
 800b218:	4903      	ldr	r1, [pc, #12]	@ (800b228 <HAL_RCC_MCOConfig+0xc8>)
 800b21a:	4313      	orrs	r3, r2
 800b21c:	610b      	str	r3, [r1, #16]
}
 800b21e:	bf00      	nop
 800b220:	3730      	adds	r7, #48	@ 0x30
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	58024400 	.word	0x58024400
 800b22c:	58020000 	.word	0x58020000
 800b230:	58020800 	.word	0x58020800

0800b234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b234:	b480      	push	{r7}
 800b236:	b089      	sub	sp, #36	@ 0x24
 800b238:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b23a:	4bb3      	ldr	r3, [pc, #716]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b242:	2b18      	cmp	r3, #24
 800b244:	f200 8155 	bhi.w	800b4f2 <HAL_RCC_GetSysClockFreq+0x2be>
 800b248:	a201      	add	r2, pc, #4	@ (adr r2, 800b250 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24e:	bf00      	nop
 800b250:	0800b2b5 	.word	0x0800b2b5
 800b254:	0800b4f3 	.word	0x0800b4f3
 800b258:	0800b4f3 	.word	0x0800b4f3
 800b25c:	0800b4f3 	.word	0x0800b4f3
 800b260:	0800b4f3 	.word	0x0800b4f3
 800b264:	0800b4f3 	.word	0x0800b4f3
 800b268:	0800b4f3 	.word	0x0800b4f3
 800b26c:	0800b4f3 	.word	0x0800b4f3
 800b270:	0800b2db 	.word	0x0800b2db
 800b274:	0800b4f3 	.word	0x0800b4f3
 800b278:	0800b4f3 	.word	0x0800b4f3
 800b27c:	0800b4f3 	.word	0x0800b4f3
 800b280:	0800b4f3 	.word	0x0800b4f3
 800b284:	0800b4f3 	.word	0x0800b4f3
 800b288:	0800b4f3 	.word	0x0800b4f3
 800b28c:	0800b4f3 	.word	0x0800b4f3
 800b290:	0800b2e1 	.word	0x0800b2e1
 800b294:	0800b4f3 	.word	0x0800b4f3
 800b298:	0800b4f3 	.word	0x0800b4f3
 800b29c:	0800b4f3 	.word	0x0800b4f3
 800b2a0:	0800b4f3 	.word	0x0800b4f3
 800b2a4:	0800b4f3 	.word	0x0800b4f3
 800b2a8:	0800b4f3 	.word	0x0800b4f3
 800b2ac:	0800b4f3 	.word	0x0800b4f3
 800b2b0:	0800b2e7 	.word	0x0800b2e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2b4:	4b94      	ldr	r3, [pc, #592]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0320 	and.w	r3, r3, #32
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d009      	beq.n	800b2d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2c0:	4b91      	ldr	r3, [pc, #580]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	08db      	lsrs	r3, r3, #3
 800b2c6:	f003 0303 	and.w	r3, r3, #3
 800b2ca:	4a90      	ldr	r2, [pc, #576]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b2d2:	e111      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b2d4:	4b8d      	ldr	r3, [pc, #564]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2d6:	61bb      	str	r3, [r7, #24]
      break;
 800b2d8:	e10e      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b2da:	4b8d      	ldr	r3, [pc, #564]	@ (800b510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b2dc:	61bb      	str	r3, [r7, #24]
      break;
 800b2de:	e10b      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b2e0:	4b8c      	ldr	r3, [pc, #560]	@ (800b514 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b2e2:	61bb      	str	r3, [r7, #24]
      break;
 800b2e4:	e108      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2e6:	4b88      	ldr	r3, [pc, #544]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ea:	f003 0303 	and.w	r3, r3, #3
 800b2ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b2f0:	4b85      	ldr	r3, [pc, #532]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f4:	091b      	lsrs	r3, r3, #4
 800b2f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b2fc:	4b82      	ldr	r3, [pc, #520]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b306:	4b80      	ldr	r3, [pc, #512]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b30a:	08db      	lsrs	r3, r3, #3
 800b30c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	fb02 f303 	mul.w	r3, r2, r3
 800b316:	ee07 3a90 	vmov	s15, r3
 800b31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	f000 80e1 	beq.w	800b4ec <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	f000 8083 	beq.w	800b438 <HAL_RCC_GetSysClockFreq+0x204>
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b02      	cmp	r3, #2
 800b336:	f200 80a1 	bhi.w	800b47c <HAL_RCC_GetSysClockFreq+0x248>
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <HAL_RCC_GetSysClockFreq+0x114>
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d056      	beq.n	800b3f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b346:	e099      	b.n	800b47c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b348:	4b6f      	ldr	r3, [pc, #444]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 0320 	and.w	r3, r3, #32
 800b350:	2b00      	cmp	r3, #0
 800b352:	d02d      	beq.n	800b3b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b354:	4b6c      	ldr	r3, [pc, #432]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	08db      	lsrs	r3, r3, #3
 800b35a:	f003 0303 	and.w	r3, r3, #3
 800b35e:	4a6b      	ldr	r2, [pc, #428]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b360:	fa22 f303 	lsr.w	r3, r2, r3
 800b364:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	ee07 3a90 	vmov	s15, r3
 800b36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b37e:	4b62      	ldr	r3, [pc, #392]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b386:	ee07 3a90 	vmov	s15, r3
 800b38a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b38e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b392:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b39a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b39e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b3ae:	e087      	b.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	ee07 3a90 	vmov	s15, r3
 800b3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b51c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c2:	4b51      	ldr	r3, [pc, #324]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3f2:	e065      	b.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b520 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b406:	4b40      	ldr	r3, [pc, #256]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b416:	ed97 6a02 	vldr	s12, [r7, #8]
 800b41a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b436:	e043      	b.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	ee07 3a90 	vmov	s15, r3
 800b43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b442:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b524 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44a:	4b2f      	ldr	r3, [pc, #188]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b45e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b46a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b47a:	e021      	b.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b486:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b520 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48e:	4b1e      	ldr	r3, [pc, #120]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b496:	ee07 3a90 	vmov	s15, r3
 800b49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b4c0:	4b11      	ldr	r3, [pc, #68]	@ (800b508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4c4:	0a5b      	lsrs	r3, r3, #9
 800b4c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	ee07 3a90 	vmov	s15, r3
 800b4d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b4d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4e4:	ee17 3a90 	vmov	r3, s15
 800b4e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b4ea:	e005      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	61bb      	str	r3, [r7, #24]
      break;
 800b4f0:	e002      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b4f2:	4b07      	ldr	r3, [pc, #28]	@ (800b510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b4f4:	61bb      	str	r3, [r7, #24]
      break;
 800b4f6:	bf00      	nop
  }

  return sysclockfreq;
 800b4f8:	69bb      	ldr	r3, [r7, #24]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3724      	adds	r7, #36	@ 0x24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	58024400 	.word	0x58024400
 800b50c:	03d09000 	.word	0x03d09000
 800b510:	003d0900 	.word	0x003d0900
 800b514:	007a1200 	.word	0x007a1200
 800b518:	46000000 	.word	0x46000000
 800b51c:	4c742400 	.word	0x4c742400
 800b520:	4a742400 	.word	0x4a742400
 800b524:	4af42400 	.word	0x4af42400

0800b528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b52e:	f7ff fe81 	bl	800b234 <HAL_RCC_GetSysClockFreq>
 800b532:	4602      	mov	r2, r0
 800b534:	4b10      	ldr	r3, [pc, #64]	@ (800b578 <HAL_RCC_GetHCLKFreq+0x50>)
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	0a1b      	lsrs	r3, r3, #8
 800b53a:	f003 030f 	and.w	r3, r3, #15
 800b53e:	490f      	ldr	r1, [pc, #60]	@ (800b57c <HAL_RCC_GetHCLKFreq+0x54>)
 800b540:	5ccb      	ldrb	r3, [r1, r3]
 800b542:	f003 031f 	and.w	r3, r3, #31
 800b546:	fa22 f303 	lsr.w	r3, r2, r3
 800b54a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b54c:	4b0a      	ldr	r3, [pc, #40]	@ (800b578 <HAL_RCC_GetHCLKFreq+0x50>)
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	f003 030f 	and.w	r3, r3, #15
 800b554:	4a09      	ldr	r2, [pc, #36]	@ (800b57c <HAL_RCC_GetHCLKFreq+0x54>)
 800b556:	5cd3      	ldrb	r3, [r2, r3]
 800b558:	f003 031f 	and.w	r3, r3, #31
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	fa22 f303 	lsr.w	r3, r2, r3
 800b562:	4a07      	ldr	r2, [pc, #28]	@ (800b580 <HAL_RCC_GetHCLKFreq+0x58>)
 800b564:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b566:	4a07      	ldr	r2, [pc, #28]	@ (800b584 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b56c:	4b04      	ldr	r3, [pc, #16]	@ (800b580 <HAL_RCC_GetHCLKFreq+0x58>)
 800b56e:	681b      	ldr	r3, [r3, #0]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	58024400 	.word	0x58024400
 800b57c:	080136e8 	.word	0x080136e8
 800b580:	24000008 	.word	0x24000008
 800b584:	24000004 	.word	0x24000004

0800b588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b58c:	f7ff ffcc 	bl	800b528 <HAL_RCC_GetHCLKFreq>
 800b590:	4602      	mov	r2, r0
 800b592:	4b06      	ldr	r3, [pc, #24]	@ (800b5ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	091b      	lsrs	r3, r3, #4
 800b598:	f003 0307 	and.w	r3, r3, #7
 800b59c:	4904      	ldr	r1, [pc, #16]	@ (800b5b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b59e:	5ccb      	ldrb	r3, [r1, r3]
 800b5a0:	f003 031f 	and.w	r3, r3, #31
 800b5a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	58024400 	.word	0x58024400
 800b5b0:	080136e8 	.word	0x080136e8

0800b5b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5b8:	b0c8      	sub	sp, #288	@ 0x120
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b5cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b5d8:	2500      	movs	r5, #0
 800b5da:	ea54 0305 	orrs.w	r3, r4, r5
 800b5de:	d049      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b5e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b5ea:	d02f      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b5ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b5f0:	d828      	bhi.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b5f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b5f6:	d01a      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b5f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b5fc:	d822      	bhi.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b606:	d007      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b608:	e01c      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b60a:	4ba7      	ldr	r3, [pc, #668]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60e:	4aa6      	ldr	r2, [pc, #664]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b616:	e01a      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b61c:	3308      	adds	r3, #8
 800b61e:	2102      	movs	r1, #2
 800b620:	4618      	mov	r0, r3
 800b622:	f002 fa6d 	bl	800db00 <RCCEx_PLL2_Config>
 800b626:	4603      	mov	r3, r0
 800b628:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b62c:	e00f      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b62e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b632:	3328      	adds	r3, #40	@ 0x28
 800b634:	2102      	movs	r1, #2
 800b636:	4618      	mov	r0, r3
 800b638:	f002 fb14 	bl	800dc64 <RCCEx_PLL3_Config>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b642:	e004      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b64a:	e000      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b64c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b64e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10a      	bne.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b656:	4b94      	ldr	r3, [pc, #592]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b65a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b65e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b664:	4a90      	ldr	r2, [pc, #576]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b666:	430b      	orrs	r3, r1
 800b668:	6513      	str	r3, [r2, #80]	@ 0x50
 800b66a:	e003      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b66c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b670:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b680:	f04f 0900 	mov.w	r9, #0
 800b684:	ea58 0309 	orrs.w	r3, r8, r9
 800b688:	d047      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b68a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b68e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b690:	2b04      	cmp	r3, #4
 800b692:	d82a      	bhi.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b694:	a201      	add	r2, pc, #4	@ (adr r2, 800b69c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69a:	bf00      	nop
 800b69c:	0800b6b1 	.word	0x0800b6b1
 800b6a0:	0800b6bf 	.word	0x0800b6bf
 800b6a4:	0800b6d5 	.word	0x0800b6d5
 800b6a8:	0800b6f3 	.word	0x0800b6f3
 800b6ac:	0800b6f3 	.word	0x0800b6f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6b0:	4b7d      	ldr	r3, [pc, #500]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b4:	4a7c      	ldr	r2, [pc, #496]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6bc:	e01a      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f002 fa1a 	bl	800db00 <RCCEx_PLL2_Config>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6d2:	e00f      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d8:	3328      	adds	r3, #40	@ 0x28
 800b6da:	2100      	movs	r1, #0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f002 fac1 	bl	800dc64 <RCCEx_PLL3_Config>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6e8:	e004      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b6f0:	e000      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b6f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6fc:	4b6a      	ldr	r3, [pc, #424]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b700:	f023 0107 	bic.w	r1, r3, #7
 800b704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b70a:	4a67      	ldr	r2, [pc, #412]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b70c:	430b      	orrs	r3, r1
 800b70e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b710:	e003      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b712:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b716:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b71a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b726:	f04f 0b00 	mov.w	fp, #0
 800b72a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b72e:	d054      	beq.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b736:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b73a:	d036      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b73c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b740:	d82f      	bhi.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b746:	d032      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b74c:	d829      	bhi.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b74e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b750:	d02f      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b752:	2bc0      	cmp	r3, #192	@ 0xc0
 800b754:	d825      	bhi.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b756:	2b80      	cmp	r3, #128	@ 0x80
 800b758:	d018      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b75a:	2b80      	cmp	r3, #128	@ 0x80
 800b75c:	d821      	bhi.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b762:	2b40      	cmp	r3, #64	@ 0x40
 800b764:	d007      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b766:	e01c      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b768:	4b4f      	ldr	r3, [pc, #316]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b76a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76c:	4a4e      	ldr	r2, [pc, #312]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b76e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b774:	e01e      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b77a:	3308      	adds	r3, #8
 800b77c:	2100      	movs	r1, #0
 800b77e:	4618      	mov	r0, r3
 800b780:	f002 f9be 	bl	800db00 <RCCEx_PLL2_Config>
 800b784:	4603      	mov	r3, r0
 800b786:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b78a:	e013      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b78c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b790:	3328      	adds	r3, #40	@ 0x28
 800b792:	2100      	movs	r1, #0
 800b794:	4618      	mov	r0, r3
 800b796:	f002 fa65 	bl	800dc64 <RCCEx_PLL3_Config>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b7a0:	e008      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b7a8:	e004      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7aa:	bf00      	nop
 800b7ac:	e002      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7ae:	bf00      	nop
 800b7b0:	e000      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10a      	bne.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b7bc:	4b3a      	ldr	r3, [pc, #232]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7ca:	4a37      	ldr	r2, [pc, #220]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7cc:	430b      	orrs	r3, r1
 800b7ce:	6513      	str	r3, [r2, #80]	@ 0x50
 800b7d0:	e003      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b7e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b7f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	d05c      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b7fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b800:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b804:	d03b      	beq.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b806:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b80a:	d834      	bhi.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b80c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b810:	d037      	beq.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b816:	d82e      	bhi.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b818:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b81c:	d033      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b81e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b822:	d828      	bhi.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b828:	d01a      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b82a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b82e:	d822      	bhi.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b830:	2b00      	cmp	r3, #0
 800b832:	d003      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b838:	d007      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b83a:	e01c      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b83c:	4b1a      	ldr	r3, [pc, #104]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b83e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b840:	4a19      	ldr	r2, [pc, #100]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b848:	e01e      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b84a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b84e:	3308      	adds	r3, #8
 800b850:	2100      	movs	r1, #0
 800b852:	4618      	mov	r0, r3
 800b854:	f002 f954 	bl	800db00 <RCCEx_PLL2_Config>
 800b858:	4603      	mov	r3, r0
 800b85a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b85e:	e013      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b864:	3328      	adds	r3, #40	@ 0x28
 800b866:	2100      	movs	r1, #0
 800b868:	4618      	mov	r0, r3
 800b86a:	f002 f9fb 	bl	800dc64 <RCCEx_PLL3_Config>
 800b86e:	4603      	mov	r3, r0
 800b870:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b874:	e008      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b87c:	e004      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b87e:	bf00      	nop
 800b880:	e002      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b882:	bf00      	nop
 800b884:	e000      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b886:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10d      	bne.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b890:	4b05      	ldr	r3, [pc, #20]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b894:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800b898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b89c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b89e:	4a02      	ldr	r2, [pc, #8]	@ (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8a0:	430b      	orrs	r3, r1
 800b8a2:	6513      	str	r3, [r2, #80]	@ 0x50
 800b8a4:	e006      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b8a6:	bf00      	nop
 800b8a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b8c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b8ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	d03a      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b8d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8da:	2b30      	cmp	r3, #48	@ 0x30
 800b8dc:	d01f      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b8de:	2b30      	cmp	r3, #48	@ 0x30
 800b8e0:	d819      	bhi.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b8e2:	2b20      	cmp	r3, #32
 800b8e4:	d00c      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b8e6:	2b20      	cmp	r3, #32
 800b8e8:	d815      	bhi.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d019      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b8ee:	2b10      	cmp	r3, #16
 800b8f0:	d111      	bne.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8f2:	4bae      	ldr	r3, [pc, #696]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f6:	4aad      	ldr	r2, [pc, #692]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b8fe:	e011      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b904:	3308      	adds	r3, #8
 800b906:	2102      	movs	r1, #2
 800b908:	4618      	mov	r0, r3
 800b90a:	f002 f8f9 	bl	800db00 <RCCEx_PLL2_Config>
 800b90e:	4603      	mov	r3, r0
 800b910:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b914:	e006      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b91c:	e002      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b91e:	bf00      	nop
 800b920:	e000      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b922:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b924:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b92c:	4b9f      	ldr	r3, [pc, #636]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b92e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b930:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b93a:	4a9c      	ldr	r2, [pc, #624]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b93c:	430b      	orrs	r3, r1
 800b93e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b940:	e003      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b942:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b946:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b94a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b956:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b95a:	2300      	movs	r3, #0
 800b95c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b960:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b964:	460b      	mov	r3, r1
 800b966:	4313      	orrs	r3, r2
 800b968:	d051      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b96e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b970:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b974:	d035      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b976:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b97a:	d82e      	bhi.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b97c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b980:	d031      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b982:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b986:	d828      	bhi.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b98c:	d01a      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b98e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b992:	d822      	bhi.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b99c:	d007      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b99e:	e01c      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9a0:	4b82      	ldr	r3, [pc, #520]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a4:	4a81      	ldr	r2, [pc, #516]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9ac:	e01c      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f002 f8a2 	bl	800db00 <RCCEx_PLL2_Config>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9c2:	e011      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c8:	3328      	adds	r3, #40	@ 0x28
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f002 f949 	bl	800dc64 <RCCEx_PLL3_Config>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9d8:	e006      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b9e0:	e002      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b9e2:	bf00      	nop
 800b9e4:	e000      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b9e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10a      	bne.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b9f0:	4b6e      	ldr	r3, [pc, #440]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b9f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9fe:	4a6b      	ldr	r2, [pc, #428]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba00:	430b      	orrs	r3, r1
 800ba02:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba04:	e003      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ba1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ba24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ba28:	460b      	mov	r3, r1
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	d053      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ba2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba38:	d033      	beq.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ba3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba3e:	d82c      	bhi.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba44:	d02f      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800ba46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba4a:	d826      	bhi.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba50:	d02b      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba56:	d820      	bhi.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba5c:	d012      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ba5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba62:	d81a      	bhi.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d022      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800ba68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba6c:	d115      	bne.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba72:	3308      	adds	r3, #8
 800ba74:	2101      	movs	r1, #1
 800ba76:	4618      	mov	r0, r3
 800ba78:	f002 f842 	bl	800db00 <RCCEx_PLL2_Config>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba82:	e015      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba88:	3328      	adds	r3, #40	@ 0x28
 800ba8a:	2101      	movs	r1, #1
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f002 f8e9 	bl	800dc64 <RCCEx_PLL3_Config>
 800ba92:	4603      	mov	r3, r0
 800ba94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba98:	e00a      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800baa0:	e006      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800baa2:	bf00      	nop
 800baa4:	e004      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800baa6:	bf00      	nop
 800baa8:	e002      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800baaa:	bf00      	nop
 800baac:	e000      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800baae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bab8:	4b3c      	ldr	r3, [pc, #240]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800babc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bac6:	4a39      	ldr	r2, [pc, #228]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bac8:	430b      	orrs	r3, r1
 800baca:	6513      	str	r3, [r2, #80]	@ 0x50
 800bacc:	e003      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bace:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bad2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bae2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bae6:	2300      	movs	r3, #0
 800bae8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800baec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800baf0:	460b      	mov	r3, r1
 800baf2:	4313      	orrs	r3, r2
 800baf4:	d060      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800baf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bafa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bafe:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bb02:	d039      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bb04:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bb08:	d832      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb0e:	d035      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bb10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb14:	d82c      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb1a:	d031      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bb1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb20:	d826      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb26:	d02d      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bb28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb2c:	d820      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb32:	d012      	beq.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bb34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb38:	d81a      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d024      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bb3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb42:	d115      	bne.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb48:	3308      	adds	r3, #8
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f001 ffd7 	bl	800db00 <RCCEx_PLL2_Config>
 800bb52:	4603      	mov	r3, r0
 800bb54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb58:	e017      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb5e:	3328      	adds	r3, #40	@ 0x28
 800bb60:	2101      	movs	r1, #1
 800bb62:	4618      	mov	r0, r3
 800bb64:	f002 f87e 	bl	800dc64 <RCCEx_PLL3_Config>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb6e:	e00c      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bb76:	e008      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb78:	bf00      	nop
 800bb7a:	e006      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb7c:	bf00      	nop
 800bb7e:	e004      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb80:	bf00      	nop
 800bb82:	e002      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb84:	bf00      	nop
 800bb86:	e000      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10e      	bne.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bb92:	4b06      	ldr	r3, [pc, #24]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bb9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bba2:	4a02      	ldr	r2, [pc, #8]	@ (800bbac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bba4:	430b      	orrs	r3, r1
 800bba6:	6593      	str	r3, [r2, #88]	@ 0x58
 800bba8:	e006      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bbaa:	bf00      	nop
 800bbac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bbb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bbc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bbce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	d037      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bbd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bbde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbe2:	d00e      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bbe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbe8:	d816      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d018      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bbee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbf2:	d111      	bne.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbf4:	4bc4      	ldr	r3, [pc, #784]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf8:	4ac3      	ldr	r2, [pc, #780]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc00:	e00f      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc06:	3308      	adds	r3, #8
 800bc08:	2101      	movs	r1, #1
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 ff78 	bl	800db00 <RCCEx_PLL2_Config>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc16:	e004      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc1e:	e000      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bc20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10a      	bne.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc2a:	4bb7      	ldr	r3, [pc, #732]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc2e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bc32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc38:	4ab3      	ldr	r2, [pc, #716]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc3a:	430b      	orrs	r3, r1
 800bc3c:	6513      	str	r3, [r2, #80]	@ 0x50
 800bc3e:	e003      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bc48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bc54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bc5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bc62:	460b      	mov	r3, r1
 800bc64:	4313      	orrs	r3, r2
 800bc66:	d039      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bc68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d81c      	bhi.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bc72:	a201      	add	r2, pc, #4	@ (adr r2, 800bc78 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc78:	0800bcb5 	.word	0x0800bcb5
 800bc7c:	0800bc89 	.word	0x0800bc89
 800bc80:	0800bc97 	.word	0x0800bc97
 800bc84:	0800bcb5 	.word	0x0800bcb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc88:	4b9f      	ldr	r3, [pc, #636]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc8c:	4a9e      	ldr	r2, [pc, #632]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bc94:	e00f      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	2102      	movs	r1, #2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f001 ff2e 	bl	800db00 <RCCEx_PLL2_Config>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcaa:	e004      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bcb2:	e000      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bcb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10a      	bne.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bcbe:	4b92      	ldr	r3, [pc, #584]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcc2:	f023 0103 	bic.w	r1, r3, #3
 800bcc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bccc:	4a8e      	ldr	r2, [pc, #568]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcce:	430b      	orrs	r3, r1
 800bcd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bcd2:	e003      	b.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bcdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bcec:	2300      	movs	r3, #0
 800bcee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bcf2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	f000 8099 	beq.w	800be30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bcfe:	4b83      	ldr	r3, [pc, #524]	@ (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a82      	ldr	r2, [pc, #520]	@ (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd0a:	f7f7 f8a9 	bl	8002e60 <HAL_GetTick>
 800bd0e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd12:	e00b      	b.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd14:	f7f7 f8a4 	bl	8002e60 <HAL_GetTick>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	2b64      	cmp	r3, #100	@ 0x64
 800bd22:	d903      	bls.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bd24:	2303      	movs	r3, #3
 800bd26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bd2a:	e005      	b.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd2c:	4b77      	ldr	r3, [pc, #476]	@ (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d0ed      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bd38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d173      	bne.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bd40:	4b71      	ldr	r3, [pc, #452]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bd44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bd4c:	4053      	eors	r3, r2
 800bd4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d015      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd56:	4b6c      	ldr	r3, [pc, #432]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd5e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd62:	4b69      	ldr	r3, [pc, #420]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd66:	4a68      	ldr	r2, [pc, #416]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd6c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd6e:	4b66      	ldr	r3, [pc, #408]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd72:	4a65      	ldr	r2, [pc, #404]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd78:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bd7a:	4a63      	ldr	r2, [pc, #396]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd80:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bd82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bd8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd8e:	d118      	bne.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd90:	f7f7 f866 	bl	8002e60 <HAL_GetTick>
 800bd94:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd98:	e00d      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd9a:	f7f7 f861 	bl	8002e60 <HAL_GetTick>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bda4:	1ad2      	subs	r2, r2, r3
 800bda6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d903      	bls.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800bdb4:	e005      	b.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdb6:	4b54      	ldr	r3, [pc, #336]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdba:	f003 0302 	and.w	r3, r3, #2
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d0eb      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bdc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d129      	bne.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bdca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bdd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdda:	d10e      	bne.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bddc:	4b4a      	ldr	r3, [pc, #296]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bde4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bde8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bdec:	091a      	lsrs	r2, r3, #4
 800bdee:	4b48      	ldr	r3, [pc, #288]	@ (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	4a45      	ldr	r2, [pc, #276]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdf4:	430b      	orrs	r3, r1
 800bdf6:	6113      	str	r3, [r2, #16]
 800bdf8:	e005      	b.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bdfa:	4b43      	ldr	r3, [pc, #268]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	4a42      	ldr	r2, [pc, #264]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be04:	6113      	str	r3, [r2, #16]
 800be06:	4b40      	ldr	r3, [pc, #256]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be08:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800be0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be16:	4a3c      	ldr	r2, [pc, #240]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be18:	430b      	orrs	r3, r1
 800be1a:	6713      	str	r3, [r2, #112]	@ 0x70
 800be1c:	e008      	b.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800be26:	e003      	b.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f002 0301 	and.w	r3, r2, #1
 800be3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be40:	2300      	movs	r3, #0
 800be42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4313      	orrs	r3, r2
 800be4e:	f000 8090 	beq.w	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800be52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be5a:	2b28      	cmp	r3, #40	@ 0x28
 800be5c:	d870      	bhi.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800be5e:	a201      	add	r2, pc, #4	@ (adr r2, 800be64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800be60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be64:	0800bf49 	.word	0x0800bf49
 800be68:	0800bf41 	.word	0x0800bf41
 800be6c:	0800bf41 	.word	0x0800bf41
 800be70:	0800bf41 	.word	0x0800bf41
 800be74:	0800bf41 	.word	0x0800bf41
 800be78:	0800bf41 	.word	0x0800bf41
 800be7c:	0800bf41 	.word	0x0800bf41
 800be80:	0800bf41 	.word	0x0800bf41
 800be84:	0800bf15 	.word	0x0800bf15
 800be88:	0800bf41 	.word	0x0800bf41
 800be8c:	0800bf41 	.word	0x0800bf41
 800be90:	0800bf41 	.word	0x0800bf41
 800be94:	0800bf41 	.word	0x0800bf41
 800be98:	0800bf41 	.word	0x0800bf41
 800be9c:	0800bf41 	.word	0x0800bf41
 800bea0:	0800bf41 	.word	0x0800bf41
 800bea4:	0800bf2b 	.word	0x0800bf2b
 800bea8:	0800bf41 	.word	0x0800bf41
 800beac:	0800bf41 	.word	0x0800bf41
 800beb0:	0800bf41 	.word	0x0800bf41
 800beb4:	0800bf41 	.word	0x0800bf41
 800beb8:	0800bf41 	.word	0x0800bf41
 800bebc:	0800bf41 	.word	0x0800bf41
 800bec0:	0800bf41 	.word	0x0800bf41
 800bec4:	0800bf49 	.word	0x0800bf49
 800bec8:	0800bf41 	.word	0x0800bf41
 800becc:	0800bf41 	.word	0x0800bf41
 800bed0:	0800bf41 	.word	0x0800bf41
 800bed4:	0800bf41 	.word	0x0800bf41
 800bed8:	0800bf41 	.word	0x0800bf41
 800bedc:	0800bf41 	.word	0x0800bf41
 800bee0:	0800bf41 	.word	0x0800bf41
 800bee4:	0800bf49 	.word	0x0800bf49
 800bee8:	0800bf41 	.word	0x0800bf41
 800beec:	0800bf41 	.word	0x0800bf41
 800bef0:	0800bf41 	.word	0x0800bf41
 800bef4:	0800bf41 	.word	0x0800bf41
 800bef8:	0800bf41 	.word	0x0800bf41
 800befc:	0800bf41 	.word	0x0800bf41
 800bf00:	0800bf41 	.word	0x0800bf41
 800bf04:	0800bf49 	.word	0x0800bf49
 800bf08:	58024400 	.word	0x58024400
 800bf0c:	58024800 	.word	0x58024800
 800bf10:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf18:	3308      	adds	r3, #8
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f001 fdef 	bl	800db00 <RCCEx_PLL2_Config>
 800bf22:	4603      	mov	r3, r0
 800bf24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf28:	e00f      	b.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf2e:	3328      	adds	r3, #40	@ 0x28
 800bf30:	2101      	movs	r1, #1
 800bf32:	4618      	mov	r0, r3
 800bf34:	f001 fe96 	bl	800dc64 <RCCEx_PLL3_Config>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf3e:	e004      	b.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bf46:	e000      	b.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bf48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10b      	bne.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf52:	4bc0      	ldr	r3, [pc, #768]	@ (800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bf5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf62:	4abc      	ldr	r2, [pc, #752]	@ (800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf64:	430b      	orrs	r3, r1
 800bf66:	6553      	str	r3, [r2, #84]	@ 0x54
 800bf68:	e003      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bf72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7a:	f002 0302 	and.w	r3, r2, #2
 800bf7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf82:	2300      	movs	r3, #0
 800bf84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf88:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	d043      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bf92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf9a:	2b05      	cmp	r3, #5
 800bf9c:	d824      	bhi.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bf9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa4:	0800bff1 	.word	0x0800bff1
 800bfa8:	0800bfbd 	.word	0x0800bfbd
 800bfac:	0800bfd3 	.word	0x0800bfd3
 800bfb0:	0800bff1 	.word	0x0800bff1
 800bfb4:	0800bff1 	.word	0x0800bff1
 800bfb8:	0800bff1 	.word	0x0800bff1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	2101      	movs	r1, #1
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f001 fd9b 	bl	800db00 <RCCEx_PLL2_Config>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bfd0:	e00f      	b.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfd6:	3328      	adds	r3, #40	@ 0x28
 800bfd8:	2101      	movs	r1, #1
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f001 fe42 	bl	800dc64 <RCCEx_PLL3_Config>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bfe6:	e004      	b.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bfee:	e000      	b.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800bff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bff2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10b      	bne.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bffa:	4b96      	ldr	r3, [pc, #600]	@ (800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bffe:	f023 0107 	bic.w	r1, r3, #7
 800c002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c00a:	4a92      	ldr	r2, [pc, #584]	@ (800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c00c:	430b      	orrs	r3, r1
 800c00e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c010:	e003      	b.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c012:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c016:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c022:	f002 0304 	and.w	r3, r2, #4
 800c026:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c02a:	2300      	movs	r3, #0
 800c02c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c030:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c034:	460b      	mov	r3, r1
 800c036:	4313      	orrs	r3, r2
 800c038:	d043      	beq.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c03e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c042:	2b05      	cmp	r3, #5
 800c044:	d824      	bhi.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c046:	a201      	add	r2, pc, #4	@ (adr r2, 800c04c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c099 	.word	0x0800c099
 800c050:	0800c065 	.word	0x0800c065
 800c054:	0800c07b 	.word	0x0800c07b
 800c058:	0800c099 	.word	0x0800c099
 800c05c:	0800c099 	.word	0x0800c099
 800c060:	0800c099 	.word	0x0800c099
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c068:	3308      	adds	r3, #8
 800c06a:	2101      	movs	r1, #1
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 fd47 	bl	800db00 <RCCEx_PLL2_Config>
 800c072:	4603      	mov	r3, r0
 800c074:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c078:	e00f      	b.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c07a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c07e:	3328      	adds	r3, #40	@ 0x28
 800c080:	2101      	movs	r1, #1
 800c082:	4618      	mov	r0, r3
 800c084:	f001 fdee 	bl	800dc64 <RCCEx_PLL3_Config>
 800c088:	4603      	mov	r3, r0
 800c08a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c08e:	e004      	b.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c096:	e000      	b.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c09a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10b      	bne.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0a2:	4b6c      	ldr	r3, [pc, #432]	@ (800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a6:	f023 0107 	bic.w	r1, r3, #7
 800c0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c0b2:	4a68      	ldr	r2, [pc, #416]	@ (800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0b4:	430b      	orrs	r3, r1
 800c0b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0b8:	e003      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	f002 0320 	and.w	r3, r2, #32
 800c0ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c0d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c0dc:	460b      	mov	r3, r1
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	d055      	beq.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c0e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c0ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0ee:	d033      	beq.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c0f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0f4:	d82c      	bhi.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0fa:	d02f      	beq.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c100:	d826      	bhi.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c102:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c106:	d02b      	beq.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c108:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c10c:	d820      	bhi.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c10e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c112:	d012      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c118:	d81a      	bhi.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d022      	beq.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c11e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c122:	d115      	bne.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c124:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c128:	3308      	adds	r3, #8
 800c12a:	2100      	movs	r1, #0
 800c12c:	4618      	mov	r0, r3
 800c12e:	f001 fce7 	bl	800db00 <RCCEx_PLL2_Config>
 800c132:	4603      	mov	r3, r0
 800c134:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c138:	e015      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c13a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c13e:	3328      	adds	r3, #40	@ 0x28
 800c140:	2102      	movs	r1, #2
 800c142:	4618      	mov	r0, r3
 800c144:	f001 fd8e 	bl	800dc64 <RCCEx_PLL3_Config>
 800c148:	4603      	mov	r3, r0
 800c14a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c14e:	e00a      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c156:	e006      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c158:	bf00      	nop
 800c15a:	e004      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c15c:	bf00      	nop
 800c15e:	e002      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c160:	bf00      	nop
 800c162:	e000      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c164:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c166:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10b      	bne.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c16e:	4b39      	ldr	r3, [pc, #228]	@ (800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c172:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c17a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c17e:	4a35      	ldr	r2, [pc, #212]	@ (800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c180:	430b      	orrs	r3, r1
 800c182:	6553      	str	r3, [r2, #84]	@ 0x54
 800c184:	e003      	b.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c186:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c18a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c18e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c196:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c19a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c19e:	2300      	movs	r3, #0
 800c1a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c1a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	d058      	beq.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c1ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c1b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c1ba:	d033      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c1bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c1c0:	d82c      	bhi.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1c6:	d02f      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c1c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1cc:	d826      	bhi.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1d2:	d02b      	beq.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c1d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1d8:	d820      	bhi.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1de:	d012      	beq.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c1e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1e4:	d81a      	bhi.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d022      	beq.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c1ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1ee:	d115      	bne.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1f4:	3308      	adds	r3, #8
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f001 fc81 	bl	800db00 <RCCEx_PLL2_Config>
 800c1fe:	4603      	mov	r3, r0
 800c200:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c204:	e015      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c20a:	3328      	adds	r3, #40	@ 0x28
 800c20c:	2102      	movs	r1, #2
 800c20e:	4618      	mov	r0, r3
 800c210:	f001 fd28 	bl	800dc64 <RCCEx_PLL3_Config>
 800c214:	4603      	mov	r3, r0
 800c216:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c21a:	e00a      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c222:	e006      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c224:	bf00      	nop
 800c226:	e004      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c228:	bf00      	nop
 800c22a:	e002      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c22c:	bf00      	nop
 800c22e:	e000      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c230:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c232:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10e      	bne.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c23a:	4b06      	ldr	r3, [pc, #24]	@ (800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c23c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c23e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c246:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c24a:	4a02      	ldr	r2, [pc, #8]	@ (800c254 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c24c:	430b      	orrs	r3, r1
 800c24e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c250:	e006      	b.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c252:	bf00      	nop
 800c254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c258:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c25c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c26c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c270:	2300      	movs	r3, #0
 800c272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c276:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c27a:	460b      	mov	r3, r1
 800c27c:	4313      	orrs	r3, r2
 800c27e:	d055      	beq.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c284:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c288:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c28c:	d033      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c28e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c292:	d82c      	bhi.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c298:	d02f      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c29a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c29e:	d826      	bhi.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c2a4:	d02b      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c2a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c2aa:	d820      	bhi.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2b0:	d012      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c2b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2b6:	d81a      	bhi.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d022      	beq.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c2bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2c0:	d115      	bne.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f001 fc18 	bl	800db00 <RCCEx_PLL2_Config>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c2d6:	e015      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2dc:	3328      	adds	r3, #40	@ 0x28
 800c2de:	2102      	movs	r1, #2
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f001 fcbf 	bl	800dc64 <RCCEx_PLL3_Config>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c2ec:	e00a      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c2f4:	e006      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c2f6:	bf00      	nop
 800c2f8:	e004      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c2fa:	bf00      	nop
 800c2fc:	e002      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c2fe:	bf00      	nop
 800c300:	e000      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c302:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c304:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10b      	bne.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c30c:	4ba1      	ldr	r3, [pc, #644]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c30e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c310:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c318:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c31c:	4a9d      	ldr	r2, [pc, #628]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c31e:	430b      	orrs	r3, r1
 800c320:	6593      	str	r3, [r2, #88]	@ 0x58
 800c322:	e003      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c324:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c328:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	f002 0308 	and.w	r3, r2, #8
 800c338:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c33c:	2300      	movs	r3, #0
 800c33e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c342:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c346:	460b      	mov	r3, r1
 800c348:	4313      	orrs	r3, r2
 800c34a:	d01e      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c34c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c358:	d10c      	bne.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c35a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c35e:	3328      	adds	r3, #40	@ 0x28
 800c360:	2102      	movs	r1, #2
 800c362:	4618      	mov	r0, r3
 800c364:	f001 fc7e 	bl	800dc64 <RCCEx_PLL3_Config>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d002      	beq.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c374:	4b87      	ldr	r3, [pc, #540]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c378:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c37c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c384:	4a83      	ldr	r2, [pc, #524]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c386:	430b      	orrs	r3, r1
 800c388:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c38a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	f002 0310 	and.w	r3, r2, #16
 800c396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c39a:	2300      	movs	r3, #0
 800c39c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c3a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	d01e      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c3aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c3b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3b6:	d10c      	bne.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3bc:	3328      	adds	r3, #40	@ 0x28
 800c3be:	2102      	movs	r1, #2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f001 fc4f 	bl	800dc64 <RCCEx_PLL3_Config>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d002      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c3d2:	4b70      	ldr	r3, [pc, #448]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c3da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c3e2:	4a6c      	ldr	r2, [pc, #432]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3e4:	430b      	orrs	r3, r1
 800c3e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c3e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c3f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c3fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c402:	460b      	mov	r3, r1
 800c404:	4313      	orrs	r3, r2
 800c406:	d03e      	beq.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c40c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c414:	d022      	beq.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c41a:	d81b      	bhi.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d003      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c424:	d00b      	beq.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c426:	e015      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c42c:	3308      	adds	r3, #8
 800c42e:	2100      	movs	r1, #0
 800c430:	4618      	mov	r0, r3
 800c432:	f001 fb65 	bl	800db00 <RCCEx_PLL2_Config>
 800c436:	4603      	mov	r3, r0
 800c438:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c43c:	e00f      	b.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c43e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c442:	3328      	adds	r3, #40	@ 0x28
 800c444:	2102      	movs	r1, #2
 800c446:	4618      	mov	r0, r3
 800c448:	f001 fc0c 	bl	800dc64 <RCCEx_PLL3_Config>
 800c44c:	4603      	mov	r3, r0
 800c44e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c452:	e004      	b.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c45a:	e000      	b.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c45c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c45e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10b      	bne.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c466:	4b4b      	ldr	r3, [pc, #300]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c46a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c46e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c472:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c476:	4a47      	ldr	r2, [pc, #284]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c478:	430b      	orrs	r3, r1
 800c47a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c47c:	e003      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c47e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c482:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c492:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c494:	2300      	movs	r3, #0
 800c496:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c498:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c49c:	460b      	mov	r3, r1
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	d03b      	beq.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c4ae:	d01f      	beq.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c4b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c4b4:	d818      	bhi.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c4b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4ba:	d003      	beq.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c4bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c4c0:	d007      	beq.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c4c2:	e011      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4c4:	4b33      	ldr	r3, [pc, #204]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c8:	4a32      	ldr	r2, [pc, #200]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4d0:	e00f      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4d6:	3328      	adds	r3, #40	@ 0x28
 800c4d8:	2101      	movs	r1, #1
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f001 fbc2 	bl	800dc64 <RCCEx_PLL3_Config>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4e6:	e004      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c4ee:	e000      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c4f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10b      	bne.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4fa:	4b26      	ldr	r3, [pc, #152]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c50a:	4a22      	ldr	r2, [pc, #136]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c50c:	430b      	orrs	r3, r1
 800c50e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c510:	e003      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c512:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c516:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c522:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c526:	673b      	str	r3, [r7, #112]	@ 0x70
 800c528:	2300      	movs	r3, #0
 800c52a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c52c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c530:	460b      	mov	r3, r1
 800c532:	4313      	orrs	r3, r2
 800c534:	d034      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c53a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d003      	beq.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c544:	d007      	beq.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c546:	e011      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c548:	4b12      	ldr	r3, [pc, #72]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c54c:	4a11      	ldr	r2, [pc, #68]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c54e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c554:	e00e      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c55a:	3308      	adds	r3, #8
 800c55c:	2102      	movs	r1, #2
 800c55e:	4618      	mov	r0, r3
 800c560:	f001 face 	bl	800db00 <RCCEx_PLL2_Config>
 800c564:	4603      	mov	r3, r0
 800c566:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c56a:	e003      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c572:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10d      	bne.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c57c:	4b05      	ldr	r3, [pc, #20]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c57e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c580:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c58a:	4a02      	ldr	r2, [pc, #8]	@ (800c594 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c58c:	430b      	orrs	r3, r1
 800c58e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c590:	e006      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c592:	bf00      	nop
 800c594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c598:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c59c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c5ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c5b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	d00c      	beq.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5c0:	3328      	adds	r3, #40	@ 0x28
 800c5c2:	2102      	movs	r1, #2
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f001 fb4d 	bl	800dc64 <RCCEx_PLL3_Config>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c5d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c5e2:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	667b      	str	r3, [r7, #100]	@ 0x64
 800c5e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	d038      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c5f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5fe:	d018      	beq.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c604:	d811      	bhi.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c60a:	d014      	beq.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c60c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c610:	d80b      	bhi.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c612:	2b00      	cmp	r3, #0
 800c614:	d011      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c61a:	d106      	bne.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c61c:	4bc3      	ldr	r3, [pc, #780]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c620:	4ac2      	ldr	r2, [pc, #776]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c628:	e008      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c630:	e004      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c632:	bf00      	nop
 800c634:	e002      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c636:	bf00      	nop
 800c638:	e000      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c63a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c63c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c640:	2b00      	cmp	r3, #0
 800c642:	d10b      	bne.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c644:	4bb9      	ldr	r3, [pc, #740]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c648:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c64c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c654:	4ab5      	ldr	r2, [pc, #724]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c656:	430b      	orrs	r3, r1
 800c658:	6553      	str	r3, [r2, #84]	@ 0x54
 800c65a:	e003      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c65c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c660:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c670:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c672:	2300      	movs	r3, #0
 800c674:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c676:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c67a:	460b      	mov	r3, r1
 800c67c:	4313      	orrs	r3, r2
 800c67e:	d009      	beq.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c680:	4baa      	ldr	r3, [pc, #680]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c684:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c68c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c68e:	4aa7      	ldr	r2, [pc, #668]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c690:	430b      	orrs	r3, r1
 800c692:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c6a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	657b      	str	r3, [r7, #84]	@ 0x54
 800c6a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	d009      	beq.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c6b0:	4b9e      	ldr	r3, [pc, #632]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6b4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6be:	4a9b      	ldr	r2, [pc, #620]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6c0:	430b      	orrs	r3, r1
 800c6c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c6c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6cc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c6d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6d6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	d009      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c6e0:	4b92      	ldr	r3, [pc, #584]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6e4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800c6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6ee:	4a8f      	ldr	r2, [pc, #572]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6f0:	430b      	orrs	r3, r1
 800c6f2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c700:	643b      	str	r3, [r7, #64]	@ 0x40
 800c702:	2300      	movs	r3, #0
 800c704:	647b      	str	r3, [r7, #68]	@ 0x44
 800c706:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c70a:	460b      	mov	r3, r1
 800c70c:	4313      	orrs	r3, r2
 800c70e:	d00e      	beq.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c710:	4b86      	ldr	r3, [pc, #536]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	4a85      	ldr	r2, [pc, #532]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c716:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c71a:	6113      	str	r3, [r2, #16]
 800c71c:	4b83      	ldr	r3, [pc, #524]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c71e:	6919      	ldr	r1, [r3, #16]
 800c720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c724:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c728:	4a80      	ldr	r2, [pc, #512]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c72a:	430b      	orrs	r3, r1
 800c72c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c72e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c73a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c73c:	2300      	movs	r3, #0
 800c73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c740:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c744:	460b      	mov	r3, r1
 800c746:	4313      	orrs	r3, r2
 800c748:	d009      	beq.n	800c75e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c74a:	4b78      	ldr	r3, [pc, #480]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c74c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c74e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c758:	4a74      	ldr	r2, [pc, #464]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c75a:	430b      	orrs	r3, r1
 800c75c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c75e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c76a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c76c:	2300      	movs	r3, #0
 800c76e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c770:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c774:	460b      	mov	r3, r1
 800c776:	4313      	orrs	r3, r2
 800c778:	d00a      	beq.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c77a:	4b6c      	ldr	r3, [pc, #432]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c77c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c77e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c78a:	4a68      	ldr	r2, [pc, #416]	@ (800c92c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c78c:	430b      	orrs	r3, r1
 800c78e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c798:	2100      	movs	r1, #0
 800c79a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	d011      	beq.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7b0:	3308      	adds	r3, #8
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f001 f9a3 	bl	800db00 <RCCEx_PLL2_Config>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c7c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d003      	beq.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c7cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c7d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	2100      	movs	r1, #0
 800c7da:	6239      	str	r1, [r7, #32]
 800c7dc:	f003 0302 	and.w	r3, r3, #2
 800c7e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	d011      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c7ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7f0:	3308      	adds	r3, #8
 800c7f2:	2101      	movs	r1, #1
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f001 f983 	bl	800db00 <RCCEx_PLL2_Config>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c800:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c804:	2b00      	cmp	r3, #0
 800c806:	d003      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c808:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c80c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	2100      	movs	r1, #0
 800c81a:	61b9      	str	r1, [r7, #24]
 800c81c:	f003 0304 	and.w	r3, r3, #4
 800c820:	61fb      	str	r3, [r7, #28]
 800c822:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c826:	460b      	mov	r3, r1
 800c828:	4313      	orrs	r3, r2
 800c82a:	d011      	beq.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c82c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c830:	3308      	adds	r3, #8
 800c832:	2102      	movs	r1, #2
 800c834:	4618      	mov	r0, r3
 800c836:	f001 f963 	bl	800db00 <RCCEx_PLL2_Config>
 800c83a:	4603      	mov	r3, r0
 800c83c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c840:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c844:	2b00      	cmp	r3, #0
 800c846:	d003      	beq.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c848:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c84c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	2100      	movs	r1, #0
 800c85a:	6139      	str	r1, [r7, #16]
 800c85c:	f003 0308 	and.w	r3, r3, #8
 800c860:	617b      	str	r3, [r7, #20]
 800c862:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c866:	460b      	mov	r3, r1
 800c868:	4313      	orrs	r3, r2
 800c86a:	d011      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c86c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c870:	3328      	adds	r3, #40	@ 0x28
 800c872:	2100      	movs	r1, #0
 800c874:	4618      	mov	r0, r3
 800c876:	f001 f9f5 	bl	800dc64 <RCCEx_PLL3_Config>
 800c87a:	4603      	mov	r3, r0
 800c87c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800c880:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c884:	2b00      	cmp	r3, #0
 800c886:	d003      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c88c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	2100      	movs	r1, #0
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	f003 0310 	and.w	r3, r3, #16
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	d011      	beq.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8b0:	3328      	adds	r3, #40	@ 0x28
 800c8b2:	2101      	movs	r1, #1
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f001 f9d5 	bl	800dc64 <RCCEx_PLL3_Config>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c8c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d003      	beq.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c8d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d8:	2100      	movs	r1, #0
 800c8da:	6039      	str	r1, [r7, #0]
 800c8dc:	f003 0320 	and.w	r3, r3, #32
 800c8e0:	607b      	str	r3, [r7, #4]
 800c8e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	d011      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c8ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8f0:	3328      	adds	r3, #40	@ 0x28
 800c8f2:	2102      	movs	r1, #2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f001 f9b5 	bl	800dc64 <RCCEx_PLL3_Config>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c900:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c904:	2b00      	cmp	r3, #0
 800c906:	d003      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c908:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c90c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800c910:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800c914:	2b00      	cmp	r3, #0
 800c916:	d101      	bne.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c918:	2300      	movs	r3, #0
 800c91a:	e000      	b.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
}
 800c91e:	4618      	mov	r0, r3
 800c920:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c924:	46bd      	mov	sp, r7
 800c926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c92a:	bf00      	nop
 800c92c:	58024400 	.word	0x58024400

0800c930 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b090      	sub	sp, #64	@ 0x40
 800c934:	af00      	add	r7, sp, #0
 800c936:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c93a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c93e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c942:	430b      	orrs	r3, r1
 800c944:	f040 8094 	bne.w	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c948:	4b97      	ldr	r3, [pc, #604]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c94a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c94c:	f003 0307 	and.w	r3, r3, #7
 800c950:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c954:	2b04      	cmp	r3, #4
 800c956:	f200 8087 	bhi.w	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c95a:	a201      	add	r2, pc, #4	@ (adr r2, 800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c960:	0800c975 	.word	0x0800c975
 800c964:	0800c99d 	.word	0x0800c99d
 800c968:	0800c9c5 	.word	0x0800c9c5
 800c96c:	0800ca61 	.word	0x0800ca61
 800c970:	0800c9ed 	.word	0x0800c9ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c974:	4b8c      	ldr	r3, [pc, #560]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c97c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c980:	d108      	bne.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c986:	4618      	mov	r0, r3
 800c988:	f000 ff68 	bl	800d85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c990:	f000 bc97 	b.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c994:	2300      	movs	r3, #0
 800c996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c998:	f000 bc93 	b.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c99c:	4b82      	ldr	r3, [pc, #520]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9a8:	d108      	bne.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9aa:	f107 0318 	add.w	r3, r7, #24
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 fcac 	bl	800d30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b8:	f000 bc83 	b.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c0:	f000 bc7f 	b.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9c4:	4b78      	ldr	r3, [pc, #480]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c9cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9d0:	d108      	bne.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9d2:	f107 030c 	add.w	r3, r7, #12
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f000 fdec 	bl	800d5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9e0:	f000 bc6f 	b.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9e8:	f000 bc6b 	b.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9ec:	4b6e      	ldr	r3, [pc, #440]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c9f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9f6:	4b6c      	ldr	r3, [pc, #432]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f003 0304 	and.w	r3, r3, #4
 800c9fe:	2b04      	cmp	r3, #4
 800ca00:	d10c      	bne.n	800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ca02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d109      	bne.n	800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca08:	4b67      	ldr	r3, [pc, #412]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	08db      	lsrs	r3, r3, #3
 800ca0e:	f003 0303 	and.w	r3, r3, #3
 800ca12:	4a66      	ldr	r2, [pc, #408]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ca14:	fa22 f303 	lsr.w	r3, r2, r3
 800ca18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca1a:	e01f      	b.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca1c:	4b62      	ldr	r3, [pc, #392]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca28:	d106      	bne.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ca2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca30:	d102      	bne.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca32:	4b5f      	ldr	r3, [pc, #380]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ca34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca36:	e011      	b.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca38:	4b5b      	ldr	r3, [pc, #364]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca44:	d106      	bne.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ca46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca4c:	d102      	bne.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca4e:	4b59      	ldr	r3, [pc, #356]	@ (800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800ca50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca52:	e003      	b.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca54:	2300      	movs	r3, #0
 800ca56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ca58:	f000 bc33 	b.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ca5c:	f000 bc31 	b.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca60:	4b55      	ldr	r3, [pc, #340]	@ (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca64:	f000 bc2d 	b.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca6c:	f000 bc29 	b.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800ca70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca74:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800ca78:	430b      	orrs	r3, r1
 800ca7a:	f040 809f 	bne.w	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800ca7e:	4b4a      	ldr	r3, [pc, #296]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca82:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800ca86:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ca88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca8e:	d04d      	beq.n	800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ca90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca96:	f200 8084 	bhi.w	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9c:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca9e:	d07d      	beq.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800caa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa2:	2bc0      	cmp	r3, #192	@ 0xc0
 800caa4:	d87d      	bhi.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800caa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa8:	2b80      	cmp	r3, #128	@ 0x80
 800caaa:	d02d      	beq.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800caac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caae:	2b80      	cmp	r3, #128	@ 0x80
 800cab0:	d877      	bhi.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d003      	beq.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800cab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caba:	2b40      	cmp	r3, #64	@ 0x40
 800cabc:	d012      	beq.n	800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800cabe:	e070      	b.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cac0:	4b39      	ldr	r3, [pc, #228]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cac8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cacc:	d107      	bne.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 fec2 	bl	800d85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cadc:	e3f1      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cae2:	e3ee      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cae4:	4b30      	ldr	r3, [pc, #192]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800caec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800caf0:	d107      	bne.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caf2:	f107 0318 	add.w	r3, r7, #24
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 fc08 	bl	800d30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb00:	e3df      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb06:	e3dc      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb08:	4b27      	ldr	r3, [pc, #156]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb14:	d107      	bne.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb16:	f107 030c 	add.w	r3, r7, #12
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f000 fd4a 	bl	800d5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb24:	e3cd      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cb26:	2300      	movs	r3, #0
 800cb28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb2a:	e3ca      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb2c:	4b1e      	ldr	r3, [pc, #120]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cb34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb36:	4b1c      	ldr	r3, [pc, #112]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f003 0304 	and.w	r3, r3, #4
 800cb3e:	2b04      	cmp	r3, #4
 800cb40:	d10c      	bne.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800cb42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d109      	bne.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb48:	4b17      	ldr	r3, [pc, #92]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	08db      	lsrs	r3, r3, #3
 800cb4e:	f003 0303 	and.w	r3, r3, #3
 800cb52:	4a16      	ldr	r2, [pc, #88]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cb54:	fa22 f303 	lsr.w	r3, r2, r3
 800cb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb5a:	e01e      	b.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb5c:	4b12      	ldr	r3, [pc, #72]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb68:	d106      	bne.n	800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800cb6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb70:	d102      	bne.n	800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb72:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cb74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb76:	e010      	b.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb78:	4b0b      	ldr	r3, [pc, #44]	@ (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb84:	d106      	bne.n	800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800cb86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb8c:	d102      	bne.n	800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb8e:	4b09      	ldr	r3, [pc, #36]	@ (800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cb90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb92:	e002      	b.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb94:	2300      	movs	r3, #0
 800cb96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cb98:	e393      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cb9a:	e392      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb9c:	4b06      	ldr	r3, [pc, #24]	@ (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cba0:	e38f      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cba6:	e38c      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cba8:	58024400 	.word	0x58024400
 800cbac:	03d09000 	.word	0x03d09000
 800cbb0:	003d0900 	.word	0x003d0900
 800cbb4:	007a1200 	.word	0x007a1200
 800cbb8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800cbbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbc0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cbc4:	430b      	orrs	r3, r1
 800cbc6:	f040 809c 	bne.w	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800cbca:	4b9e      	ldr	r3, [pc, #632]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cbcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbce:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800cbd2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cbda:	d054      	beq.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cbe2:	f200 808b 	bhi.w	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cbec:	f000 8083 	beq.w	800ccf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cbf6:	f200 8081 	bhi.w	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc00:	d02f      	beq.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800cc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc08:	d878      	bhi.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d004      	beq.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800cc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc16:	d012      	beq.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800cc18:	e070      	b.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc1a:	4b8a      	ldr	r3, [pc, #552]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc26:	d107      	bne.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 fe15 	bl	800d85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc36:	e344      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc3c:	e341      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc3e:	4b81      	ldr	r3, [pc, #516]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc4a:	d107      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc4c:	f107 0318 	add.w	r3, r7, #24
 800cc50:	4618      	mov	r0, r3
 800cc52:	f000 fb5b 	bl	800d30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc5a:	e332      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc60:	e32f      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc62:	4b78      	ldr	r3, [pc, #480]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc6e:	d107      	bne.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc70:	f107 030c 	add.w	r3, r7, #12
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 fc9d 	bl	800d5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc7e:	e320      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc84:	e31d      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc86:	4b6f      	ldr	r3, [pc, #444]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cc8e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc90:	4b6c      	ldr	r3, [pc, #432]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f003 0304 	and.w	r3, r3, #4
 800cc98:	2b04      	cmp	r3, #4
 800cc9a:	d10c      	bne.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d109      	bne.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cca2:	4b68      	ldr	r3, [pc, #416]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	08db      	lsrs	r3, r3, #3
 800cca8:	f003 0303 	and.w	r3, r3, #3
 800ccac:	4a66      	ldr	r2, [pc, #408]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800ccae:	fa22 f303 	lsr.w	r3, r2, r3
 800ccb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccb4:	e01e      	b.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ccb6:	4b63      	ldr	r3, [pc, #396]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccc2:	d106      	bne.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ccc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccca:	d102      	bne.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cccc:	4b5f      	ldr	r3, [pc, #380]	@ (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800ccce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccd0:	e010      	b.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccd2:	4b5c      	ldr	r3, [pc, #368]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ccde:	d106      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800cce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cce6:	d102      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cce8:	4b59      	ldr	r3, [pc, #356]	@ (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ccea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccec:	e002      	b.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800ccf2:	e2e6      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ccf4:	e2e5      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ccf6:	4b57      	ldr	r3, [pc, #348]	@ (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccfa:	e2e2      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd00:	e2df      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cd02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd06:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800cd0a:	430b      	orrs	r3, r1
 800cd0c:	f040 80a7 	bne.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cd10:	4b4c      	ldr	r3, [pc, #304]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd14:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cd18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd20:	d055      	beq.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800cd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd28:	f200 8096 	bhi.w	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd32:	f000 8084 	beq.w	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800cd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd3c:	f200 808c 	bhi.w	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800cd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd46:	d030      	beq.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800cd48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd4e:	f200 8083 	bhi.w	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800cd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d004      	beq.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800cd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd5e:	d012      	beq.n	800cd86 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800cd60:	e07a      	b.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd62:	4b38      	ldr	r3, [pc, #224]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd6e:	d107      	bne.n	800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd74:	4618      	mov	r0, r3
 800cd76:	f000 fd71 	bl	800d85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd7e:	e2a0      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd84:	e29d      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd86:	4b2f      	ldr	r3, [pc, #188]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd92:	d107      	bne.n	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd94:	f107 0318 	add.w	r3, r7, #24
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 fab7 	bl	800d30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd9e:	69bb      	ldr	r3, [r7, #24]
 800cda0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda2:	e28e      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cda8:	e28b      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdaa:	4b26      	ldr	r3, [pc, #152]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cdb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cdb6:	d107      	bne.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdb8:	f107 030c 	add.w	r3, r7, #12
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 fbf9 	bl	800d5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdc6:	e27c      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdcc:	e279      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cdce:	4b1d      	ldr	r3, [pc, #116]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cdd6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cdd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f003 0304 	and.w	r3, r3, #4
 800cde0:	2b04      	cmp	r3, #4
 800cde2:	d10c      	bne.n	800cdfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800cde4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d109      	bne.n	800cdfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdea:	4b16      	ldr	r3, [pc, #88]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	08db      	lsrs	r3, r3, #3
 800cdf0:	f003 0303 	and.w	r3, r3, #3
 800cdf4:	4a14      	ldr	r2, [pc, #80]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800cdf6:	fa22 f303 	lsr.w	r3, r2, r3
 800cdfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdfc:	e01e      	b.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cdfe:	4b11      	ldr	r3, [pc, #68]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce0a:	d106      	bne.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ce0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce12:	d102      	bne.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce14:	4b0d      	ldr	r3, [pc, #52]	@ (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800ce16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce18:	e010      	b.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce26:	d106      	bne.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ce28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce2e:	d102      	bne.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce30:	4b07      	ldr	r3, [pc, #28]	@ (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ce32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce34:	e002      	b.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ce3a:	e242      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ce3c:	e241      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce3e:	4b05      	ldr	r3, [pc, #20]	@ (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce42:	e23e      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ce44:	58024400 	.word	0x58024400
 800ce48:	03d09000 	.word	0x03d09000
 800ce4c:	003d0900 	.word	0x003d0900
 800ce50:	007a1200 	.word	0x007a1200
 800ce54:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce5c:	e231      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ce5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce62:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ce66:	430b      	orrs	r3, r1
 800ce68:	f040 8085 	bne.w	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ce6c:	4b9c      	ldr	r3, [pc, #624]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce70:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ce74:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ce76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ce7c:	d06b      	beq.n	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ce84:	d874      	bhi.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ce86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce8c:	d056      	beq.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800ce8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce94:	d86c      	bhi.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ce96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ce9c:	d03b      	beq.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cea4:	d864      	bhi.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ceac:	d021      	beq.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800ceae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ceb4:	d85c      	bhi.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ceb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d004      	beq.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cec2:	d004      	beq.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800cec4:	e054      	b.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cec6:	f7fe fb5f 	bl	800b588 <HAL_RCC_GetPCLK1Freq>
 800ceca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cecc:	e1f9      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cece:	4b84      	ldr	r3, [pc, #528]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ced6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ceda:	d107      	bne.n	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cedc:	f107 0318 	add.w	r3, r7, #24
 800cee0:	4618      	mov	r0, r3
 800cee2:	f000 fa13 	bl	800d30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceea:	e1ea      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef0:	e1e7      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cef2:	4b7b      	ldr	r3, [pc, #492]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cefa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cefe:	d107      	bne.n	800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf00:	f107 030c 	add.w	r3, r7, #12
 800cf04:	4618      	mov	r0, r3
 800cf06:	f000 fb55 	bl	800d5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf0e:	e1d8      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cf10:	2300      	movs	r3, #0
 800cf12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf14:	e1d5      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf16:	4b72      	ldr	r3, [pc, #456]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f003 0304 	and.w	r3, r3, #4
 800cf1e:	2b04      	cmp	r3, #4
 800cf20:	d109      	bne.n	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf22:	4b6f      	ldr	r3, [pc, #444]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	08db      	lsrs	r3, r3, #3
 800cf28:	f003 0303 	and.w	r3, r3, #3
 800cf2c:	4a6d      	ldr	r2, [pc, #436]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cf2e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf34:	e1c5      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf3a:	e1c2      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf3c:	4b68      	ldr	r3, [pc, #416]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf48:	d102      	bne.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800cf4a:	4b67      	ldr	r3, [pc, #412]	@ (800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cf4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf4e:	e1b8      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf54:	e1b5      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf56:	4b62      	ldr	r3, [pc, #392]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf62:	d102      	bne.n	800cf6a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800cf64:	4b61      	ldr	r3, [pc, #388]	@ (800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800cf66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf68:	e1ab      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf6e:	e1a8      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf74:	e1a5      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cf76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf7a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800cf7e:	430b      	orrs	r3, r1
 800cf80:	d173      	bne.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cf82:	4b57      	ldr	r3, [pc, #348]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cf84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cf8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf92:	d02f      	beq.n	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800cf94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf9a:	d863      	bhi.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d004      	beq.n	800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfa8:	d012      	beq.n	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800cfaa:	e05b      	b.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfac:	4b4c      	ldr	r3, [pc, #304]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfb8:	d107      	bne.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfba:	f107 0318 	add.w	r3, r7, #24
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 f9a4 	bl	800d30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfc8:	e17b      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfce:	e178      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfd0:	4b43      	ldr	r3, [pc, #268]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfdc:	d107      	bne.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfde:	f107 030c 	add.w	r3, r7, #12
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 fae6 	bl	800d5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfec:	e169      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cff2:	e166      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cff4:	4b3a      	ldr	r3, [pc, #232]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cff8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cffc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cffe:	4b38      	ldr	r3, [pc, #224]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f003 0304 	and.w	r3, r3, #4
 800d006:	2b04      	cmp	r3, #4
 800d008:	d10c      	bne.n	800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800d00a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d109      	bne.n	800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d010:	4b33      	ldr	r3, [pc, #204]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	08db      	lsrs	r3, r3, #3
 800d016:	f003 0303 	and.w	r3, r3, #3
 800d01a:	4a32      	ldr	r2, [pc, #200]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d01c:	fa22 f303 	lsr.w	r3, r2, r3
 800d020:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d022:	e01e      	b.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d024:	4b2e      	ldr	r3, [pc, #184]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d02c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d030:	d106      	bne.n	800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800d032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d038:	d102      	bne.n	800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d03a:	4b2b      	ldr	r3, [pc, #172]	@ (800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800d03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d03e:	e010      	b.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d040:	4b27      	ldr	r3, [pc, #156]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d04c:	d106      	bne.n	800d05c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d054:	d102      	bne.n	800d05c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d056:	4b25      	ldr	r3, [pc, #148]	@ (800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800d058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d05a:	e002      	b.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d060:	e12f      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d062:	e12e      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d068:	e12b      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d06a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d06e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d072:	430b      	orrs	r3, r1
 800d074:	d13c      	bne.n	800d0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d076:	4b1a      	ldr	r3, [pc, #104]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d07a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d07e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d082:	2b00      	cmp	r3, #0
 800d084:	d004      	beq.n	800d090 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800d086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d08c:	d012      	beq.n	800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800d08e:	e023      	b.n	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d090:	4b13      	ldr	r3, [pc, #76]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d09c:	d107      	bne.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d09e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f000 fbda 	bl	800d85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0ac:	e109      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0b2:	e106      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0c0:	d107      	bne.n	800d0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0c2:	f107 0318 	add.w	r3, r7, #24
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f000 f920 	bl	800d30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0d0:	e0f7      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0d6:	e0f4      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0dc:	e0f1      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d0de:	bf00      	nop
 800d0e0:	58024400 	.word	0x58024400
 800d0e4:	03d09000 	.word	0x03d09000
 800d0e8:	003d0900 	.word	0x003d0900
 800d0ec:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d0f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0f4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d0f8:	430b      	orrs	r3, r1
 800d0fa:	f040 8091 	bne.w	800d220 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d0fe:	4b73      	ldr	r3, [pc, #460]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d102:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d106:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800d10e:	f000 8081 	beq.w	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800d112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d114:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800d118:	d87f      	bhi.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d120:	d06b      	beq.n	800d1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800d122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d124:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d128:	d877      	bhi.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d130:	d056      	beq.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800d132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d138:	d86f      	bhi.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d140:	d03b      	beq.n	800d1ba <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800d142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d144:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d148:	d867      	bhi.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d150:	d021      	beq.n	800d196 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800d152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d158:	d85f      	bhi.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d004      	beq.n	800d16a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d162:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d166:	d004      	beq.n	800d172 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800d168:	e057      	b.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d16a:	f000 f8b9 	bl	800d2e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d16e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d170:	e0a7      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d172:	4b56      	ldr	r3, [pc, #344]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d17a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d17e:	d107      	bne.n	800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d180:	f107 0318 	add.w	r3, r7, #24
 800d184:	4618      	mov	r0, r3
 800d186:	f000 f8c1 	bl	800d30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d18e:	e098      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d190:	2300      	movs	r3, #0
 800d192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d194:	e095      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d196:	4b4d      	ldr	r3, [pc, #308]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d19e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1a2:	d107      	bne.n	800d1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1a4:	f107 030c 	add.w	r3, r7, #12
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f000 fa03 	bl	800d5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1b2:	e086      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1b8:	e083      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1ba:	4b44      	ldr	r3, [pc, #272]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f003 0304 	and.w	r3, r3, #4
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d109      	bne.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1c6:	4b41      	ldr	r3, [pc, #260]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	08db      	lsrs	r3, r3, #3
 800d1cc:	f003 0303 	and.w	r3, r3, #3
 800d1d0:	4a3f      	ldr	r2, [pc, #252]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d1d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1d8:	e073      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1de:	e070      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d1e0:	4b3a      	ldr	r3, [pc, #232]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1ec:	d102      	bne.n	800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800d1ee:	4b39      	ldr	r3, [pc, #228]	@ (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800d1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1f2:	e066      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1f8:	e063      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d1fa:	4b34      	ldr	r3, [pc, #208]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d206:	d102      	bne.n	800d20e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800d208:	4b33      	ldr	r3, [pc, #204]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d20c:	e059      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d20e:	2300      	movs	r3, #0
 800d210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d212:	e056      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d214:	4b31      	ldr	r3, [pc, #196]	@ (800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800d216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d218:	e053      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d21e:	e050      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d220:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d224:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d228:	430b      	orrs	r3, r1
 800d22a:	d148      	bne.n	800d2be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d22c:	4b27      	ldr	r3, [pc, #156]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d22e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d230:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d234:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d23c:	d02a      	beq.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d244:	d838      	bhi.n	800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d004      	beq.n	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800d24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d24e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d252:	d00d      	beq.n	800d270 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800d254:	e030      	b.n	800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d256:	4b1d      	ldr	r3, [pc, #116]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d25e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d262:	d102      	bne.n	800d26a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800d264:	4b1c      	ldr	r3, [pc, #112]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d268:	e02b      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d26e:	e028      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d270:	4b16      	ldr	r3, [pc, #88]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d27c:	d107      	bne.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d27e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d282:	4618      	mov	r0, r3
 800d284:	f000 faea 	bl	800d85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d28c:	e019      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d292:	e016      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d294:	4b0d      	ldr	r3, [pc, #52]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d29c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2a0:	d107      	bne.n	800d2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2a2:	f107 0318 	add.w	r3, r7, #24
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 f830 	bl	800d30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2b0:	e007      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2b6:	e004      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2bc:	e001      	b.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3740      	adds	r7, #64	@ 0x40
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	58024400 	.word	0x58024400
 800d2d0:	03d09000 	.word	0x03d09000
 800d2d4:	003d0900 	.word	0x003d0900
 800d2d8:	007a1200 	.word	0x007a1200
 800d2dc:	00bb8000 	.word	0x00bb8000

0800d2e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800d2e4:	f7fe f920 	bl	800b528 <HAL_RCC_GetHCLKFreq>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	4b06      	ldr	r3, [pc, #24]	@ (800d304 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	091b      	lsrs	r3, r3, #4
 800d2f0:	f003 0307 	and.w	r3, r3, #7
 800d2f4:	4904      	ldr	r1, [pc, #16]	@ (800d308 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d2f6:	5ccb      	ldrb	r3, [r1, r3]
 800d2f8:	f003 031f 	and.w	r3, r3, #31
 800d2fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d300:	4618      	mov	r0, r3
 800d302:	bd80      	pop	{r7, pc}
 800d304:	58024400 	.word	0x58024400
 800d308:	080136e8 	.word	0x080136e8

0800d30c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b089      	sub	sp, #36	@ 0x24
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d314:	4ba1      	ldr	r3, [pc, #644]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d318:	f003 0303 	and.w	r3, r3, #3
 800d31c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d31e:	4b9f      	ldr	r3, [pc, #636]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d322:	0b1b      	lsrs	r3, r3, #12
 800d324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d328:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d32a:	4b9c      	ldr	r3, [pc, #624]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d32e:	091b      	lsrs	r3, r3, #4
 800d330:	f003 0301 	and.w	r3, r3, #1
 800d334:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d336:	4b99      	ldr	r3, [pc, #612]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d33a:	08db      	lsrs	r3, r3, #3
 800d33c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	fb02 f303 	mul.w	r3, r2, r3
 800d346:	ee07 3a90 	vmov	s15, r3
 800d34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d34e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	2b00      	cmp	r3, #0
 800d356:	f000 8111 	beq.w	800d57c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	f000 8083 	beq.w	800d468 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	2b02      	cmp	r3, #2
 800d366:	f200 80a1 	bhi.w	800d4ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d003      	beq.n	800d378 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d056      	beq.n	800d424 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d376:	e099      	b.n	800d4ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d378:	4b88      	ldr	r3, [pc, #544]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f003 0320 	and.w	r3, r3, #32
 800d380:	2b00      	cmp	r3, #0
 800d382:	d02d      	beq.n	800d3e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d384:	4b85      	ldr	r3, [pc, #532]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	08db      	lsrs	r3, r3, #3
 800d38a:	f003 0303 	and.w	r3, r3, #3
 800d38e:	4a84      	ldr	r2, [pc, #528]	@ (800d5a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d390:	fa22 f303 	lsr.w	r3, r2, r3
 800d394:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	ee07 3a90 	vmov	s15, r3
 800d39c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	ee07 3a90 	vmov	s15, r3
 800d3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ae:	4b7b      	ldr	r3, [pc, #492]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b6:	ee07 3a90 	vmov	s15, r3
 800d3ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d3de:	e087      	b.n	800d4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	ee07 3a90 	vmov	s15, r3
 800d3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d5a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3f2:	4b6a      	ldr	r3, [pc, #424]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3fa:	ee07 3a90 	vmov	s15, r3
 800d3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d402:	ed97 6a03 	vldr	s12, [r7, #12]
 800d406:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d41e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d422:	e065      	b.n	800d4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	ee07 3a90 	vmov	s15, r3
 800d42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d42e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d5ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d436:	4b59      	ldr	r3, [pc, #356]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d43e:	ee07 3a90 	vmov	s15, r3
 800d442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d446:	ed97 6a03 	vldr	s12, [r7, #12]
 800d44a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d466:	e043      	b.n	800d4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	ee07 3a90 	vmov	s15, r3
 800d46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d472:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d47a:	4b48      	ldr	r3, [pc, #288]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d47c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d482:	ee07 3a90 	vmov	s15, r3
 800d486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d48e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d49a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4aa:	e021      	b.n	800d4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	ee07 3a90 	vmov	s15, r3
 800d4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d5ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4be:	4b37      	ldr	r3, [pc, #220]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c6:	ee07 3a90 	vmov	s15, r3
 800d4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d4f0:	4b2a      	ldr	r3, [pc, #168]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4f4:	0a5b      	lsrs	r3, r3, #9
 800d4f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4fa:	ee07 3a90 	vmov	s15, r3
 800d4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d50a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d50e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d516:	ee17 2a90 	vmov	r2, s15
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d51e:	4b1f      	ldr	r3, [pc, #124]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d522:	0c1b      	lsrs	r3, r3, #16
 800d524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d528:	ee07 3a90 	vmov	s15, r3
 800d52c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d534:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d538:	edd7 6a07 	vldr	s13, [r7, #28]
 800d53c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d544:	ee17 2a90 	vmov	r2, s15
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d54c:	4b13      	ldr	r3, [pc, #76]	@ (800d59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d550:	0e1b      	lsrs	r3, r3, #24
 800d552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d556:	ee07 3a90 	vmov	s15, r3
 800d55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d562:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d566:	edd7 6a07 	vldr	s13, [r7, #28]
 800d56a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d56e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d572:	ee17 2a90 	vmov	r2, s15
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d57a:	e008      	b.n	800d58e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2200      	movs	r2, #0
 800d586:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	609a      	str	r2, [r3, #8]
}
 800d58e:	bf00      	nop
 800d590:	3724      	adds	r7, #36	@ 0x24
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	58024400 	.word	0x58024400
 800d5a0:	03d09000 	.word	0x03d09000
 800d5a4:	46000000 	.word	0x46000000
 800d5a8:	4c742400 	.word	0x4c742400
 800d5ac:	4a742400 	.word	0x4a742400
 800d5b0:	4af42400 	.word	0x4af42400

0800d5b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b089      	sub	sp, #36	@ 0x24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5bc:	4ba1      	ldr	r3, [pc, #644]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c0:	f003 0303 	and.w	r3, r3, #3
 800d5c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d5c6:	4b9f      	ldr	r3, [pc, #636]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ca:	0d1b      	lsrs	r3, r3, #20
 800d5cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d5d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d5d2:	4b9c      	ldr	r3, [pc, #624]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5d6:	0a1b      	lsrs	r3, r3, #8
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d5de:	4b99      	ldr	r3, [pc, #612]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5e2:	08db      	lsrs	r3, r3, #3
 800d5e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5e8:	693a      	ldr	r2, [r7, #16]
 800d5ea:	fb02 f303 	mul.w	r3, r2, r3
 800d5ee:	ee07 3a90 	vmov	s15, r3
 800d5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 8111 	beq.w	800d824 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d602:	69bb      	ldr	r3, [r7, #24]
 800d604:	2b02      	cmp	r3, #2
 800d606:	f000 8083 	beq.w	800d710 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	f200 80a1 	bhi.w	800d754 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d003      	beq.n	800d620 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d056      	beq.n	800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d61e:	e099      	b.n	800d754 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d620:	4b88      	ldr	r3, [pc, #544]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f003 0320 	and.w	r3, r3, #32
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d02d      	beq.n	800d688 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d62c:	4b85      	ldr	r3, [pc, #532]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	08db      	lsrs	r3, r3, #3
 800d632:	f003 0303 	and.w	r3, r3, #3
 800d636:	4a84      	ldr	r2, [pc, #528]	@ (800d848 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d638:	fa22 f303 	lsr.w	r3, r2, r3
 800d63c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	ee07 3a90 	vmov	s15, r3
 800d644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	ee07 3a90 	vmov	s15, r3
 800d64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d656:	4b7b      	ldr	r3, [pc, #492]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d65e:	ee07 3a90 	vmov	s15, r3
 800d662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d666:	ed97 6a03 	vldr	s12, [r7, #12]
 800d66a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d84c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d66e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d67a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d682:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d686:	e087      	b.n	800d798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	ee07 3a90 	vmov	s15, r3
 800d68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d692:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d850 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d69a:	4b6a      	ldr	r3, [pc, #424]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d69c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a2:	ee07 3a90 	vmov	s15, r3
 800d6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d84c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6ca:	e065      	b.n	800d798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	ee07 3a90 	vmov	s15, r3
 800d6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6de:	4b59      	ldr	r3, [pc, #356]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e6:	ee07 3a90 	vmov	s15, r3
 800d6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d84c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d70a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d70e:	e043      	b.n	800d798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	ee07 3a90 	vmov	s15, r3
 800d716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d858 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d722:	4b48      	ldr	r3, [pc, #288]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d72a:	ee07 3a90 	vmov	s15, r3
 800d72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d732:	ed97 6a03 	vldr	s12, [r7, #12]
 800d736:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d84c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d74e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d752:	e021      	b.n	800d798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	ee07 3a90 	vmov	s15, r3
 800d75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d75e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d766:	4b37      	ldr	r3, [pc, #220]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d76e:	ee07 3a90 	vmov	s15, r3
 800d772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d776:	ed97 6a03 	vldr	s12, [r7, #12]
 800d77a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d84c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d796:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d798:	4b2a      	ldr	r3, [pc, #168]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d79a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d79c:	0a5b      	lsrs	r3, r3, #9
 800d79e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7a2:	ee07 3a90 	vmov	s15, r3
 800d7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7be:	ee17 2a90 	vmov	r2, s15
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d7c6:	4b1f      	ldr	r3, [pc, #124]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7ca:	0c1b      	lsrs	r3, r3, #16
 800d7cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7d0:	ee07 3a90 	vmov	s15, r3
 800d7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7ec:	ee17 2a90 	vmov	r2, s15
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d7f4:	4b13      	ldr	r3, [pc, #76]	@ (800d844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7f8:	0e1b      	lsrs	r3, r3, #24
 800d7fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7fe:	ee07 3a90 	vmov	s15, r3
 800d802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d80a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d80e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d81a:	ee17 2a90 	vmov	r2, s15
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d822:	e008      	b.n	800d836 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	609a      	str	r2, [r3, #8]
}
 800d836:	bf00      	nop
 800d838:	3724      	adds	r7, #36	@ 0x24
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	58024400 	.word	0x58024400
 800d848:	03d09000 	.word	0x03d09000
 800d84c:	46000000 	.word	0x46000000
 800d850:	4c742400 	.word	0x4c742400
 800d854:	4a742400 	.word	0x4a742400
 800d858:	4af42400 	.word	0x4af42400

0800d85c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b089      	sub	sp, #36	@ 0x24
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d864:	4ba0      	ldr	r3, [pc, #640]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d868:	f003 0303 	and.w	r3, r3, #3
 800d86c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d86e:	4b9e      	ldr	r3, [pc, #632]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d872:	091b      	lsrs	r3, r3, #4
 800d874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d878:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d87a:	4b9b      	ldr	r3, [pc, #620]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d87e:	f003 0301 	and.w	r3, r3, #1
 800d882:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d884:	4b98      	ldr	r3, [pc, #608]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d888:	08db      	lsrs	r3, r3, #3
 800d88a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d88e:	693a      	ldr	r2, [r7, #16]
 800d890:	fb02 f303 	mul.w	r3, r2, r3
 800d894:	ee07 3a90 	vmov	s15, r3
 800d898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d89c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f000 8111 	beq.w	800daca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	2b02      	cmp	r3, #2
 800d8ac:	f000 8083 	beq.w	800d9b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	f200 80a1 	bhi.w	800d9fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d003      	beq.n	800d8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d056      	beq.n	800d972 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d8c4:	e099      	b.n	800d9fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8c6:	4b88      	ldr	r3, [pc, #544]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f003 0320 	and.w	r3, r3, #32
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d02d      	beq.n	800d92e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8d2:	4b85      	ldr	r3, [pc, #532]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	08db      	lsrs	r3, r3, #3
 800d8d8:	f003 0303 	and.w	r3, r3, #3
 800d8dc:	4a83      	ldr	r2, [pc, #524]	@ (800daec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d8de:	fa22 f303 	lsr.w	r3, r2, r3
 800d8e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	ee07 3a90 	vmov	s15, r3
 800d8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	ee07 3a90 	vmov	s15, r3
 800d8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8fc:	4b7a      	ldr	r3, [pc, #488]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d904:	ee07 3a90 	vmov	s15, r3
 800d908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d90c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d910:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800daf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d91c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d924:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d928:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d92c:	e087      	b.n	800da3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	ee07 3a90 	vmov	s15, r3
 800d934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d938:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800daf4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d93c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d940:	4b69      	ldr	r3, [pc, #420]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d948:	ee07 3a90 	vmov	s15, r3
 800d94c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d950:	ed97 6a03 	vldr	s12, [r7, #12]
 800d954:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800daf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d95c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d960:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d96c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d970:	e065      	b.n	800da3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	ee07 3a90 	vmov	s15, r3
 800d978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d97c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800daf8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d984:	4b58      	ldr	r3, [pc, #352]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98c:	ee07 3a90 	vmov	s15, r3
 800d990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d994:	ed97 6a03 	vldr	s12, [r7, #12]
 800d998:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800daf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d99c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9b4:	e043      	b.n	800da3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	ee07 3a90 	vmov	s15, r3
 800d9bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800dafc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d9c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9c8:	4b47      	ldr	r3, [pc, #284]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d0:	ee07 3a90 	vmov	s15, r3
 800d9d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800daf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9f8:	e021      	b.n	800da3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	ee07 3a90 	vmov	s15, r3
 800da00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da04:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800daf4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800da08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da0c:	4b36      	ldr	r3, [pc, #216]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da14:	ee07 3a90 	vmov	s15, r3
 800da18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800da20:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800daf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da3c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800da3e:	4b2a      	ldr	r3, [pc, #168]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da42:	0a5b      	lsrs	r3, r3, #9
 800da44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da48:	ee07 3a90 	vmov	s15, r3
 800da4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da58:	edd7 6a07 	vldr	s13, [r7, #28]
 800da5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da64:	ee17 2a90 	vmov	r2, s15
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800da6c:	4b1e      	ldr	r3, [pc, #120]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da70:	0c1b      	lsrs	r3, r3, #16
 800da72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da76:	ee07 3a90 	vmov	s15, r3
 800da7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da86:	edd7 6a07 	vldr	s13, [r7, #28]
 800da8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da92:	ee17 2a90 	vmov	r2, s15
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800da9a:	4b13      	ldr	r3, [pc, #76]	@ (800dae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da9e:	0e1b      	lsrs	r3, r3, #24
 800daa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800daa4:	ee07 3a90 	vmov	s15, r3
 800daa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dab4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dabc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dac0:	ee17 2a90 	vmov	r2, s15
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dac8:	e008      	b.n	800dadc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	609a      	str	r2, [r3, #8]
}
 800dadc:	bf00      	nop
 800dade:	3724      	adds	r7, #36	@ 0x24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	58024400 	.word	0x58024400
 800daec:	03d09000 	.word	0x03d09000
 800daf0:	46000000 	.word	0x46000000
 800daf4:	4c742400 	.word	0x4c742400
 800daf8:	4a742400 	.word	0x4a742400
 800dafc:	4af42400 	.word	0x4af42400

0800db00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800db0e:	4b53      	ldr	r3, [pc, #332]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800db10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db12:	f003 0303 	and.w	r3, r3, #3
 800db16:	2b03      	cmp	r3, #3
 800db18:	d101      	bne.n	800db1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800db1a:	2301      	movs	r3, #1
 800db1c:	e099      	b.n	800dc52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800db1e:	4b4f      	ldr	r3, [pc, #316]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a4e      	ldr	r2, [pc, #312]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800db24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db2a:	f7f5 f999 	bl	8002e60 <HAL_GetTick>
 800db2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db30:	e008      	b.n	800db44 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db32:	f7f5 f995 	bl	8002e60 <HAL_GetTick>
 800db36:	4602      	mov	r2, r0
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	1ad3      	subs	r3, r2, r3
 800db3c:	2b02      	cmp	r3, #2
 800db3e:	d901      	bls.n	800db44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db40:	2303      	movs	r3, #3
 800db42:	e086      	b.n	800dc52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db44:	4b45      	ldr	r3, [pc, #276]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1f0      	bne.n	800db32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db50:	4b42      	ldr	r3, [pc, #264]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800db52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db54:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	031b      	lsls	r3, r3, #12
 800db5e:	493f      	ldr	r1, [pc, #252]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800db60:	4313      	orrs	r3, r2
 800db62:	628b      	str	r3, [r1, #40]	@ 0x28
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	3b01      	subs	r3, #1
 800db6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	3b01      	subs	r3, #1
 800db74:	025b      	lsls	r3, r3, #9
 800db76:	b29b      	uxth	r3, r3
 800db78:	431a      	orrs	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	3b01      	subs	r3, #1
 800db80:	041b      	lsls	r3, r3, #16
 800db82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800db86:	431a      	orrs	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	691b      	ldr	r3, [r3, #16]
 800db8c:	3b01      	subs	r3, #1
 800db8e:	061b      	lsls	r3, r3, #24
 800db90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800db94:	4931      	ldr	r1, [pc, #196]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800db96:	4313      	orrs	r3, r2
 800db98:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800db9a:	4b30      	ldr	r3, [pc, #192]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800db9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	492d      	ldr	r1, [pc, #180]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dbac:	4b2b      	ldr	r3, [pc, #172]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbb0:	f023 0220 	bic.w	r2, r3, #32
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	699b      	ldr	r3, [r3, #24]
 800dbb8:	4928      	ldr	r1, [pc, #160]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dbbe:	4b27      	ldr	r3, [pc, #156]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc2:	4a26      	ldr	r2, [pc, #152]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dbc4:	f023 0310 	bic.w	r3, r3, #16
 800dbc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dbca:	4b24      	ldr	r3, [pc, #144]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dbcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbce:	4b24      	ldr	r3, [pc, #144]	@ (800dc60 <RCCEx_PLL2_Config+0x160>)
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	69d2      	ldr	r2, [r2, #28]
 800dbd6:	00d2      	lsls	r2, r2, #3
 800dbd8:	4920      	ldr	r1, [pc, #128]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dbde:	4b1f      	ldr	r3, [pc, #124]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dbe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbe2:	4a1e      	ldr	r2, [pc, #120]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dbe4:	f043 0310 	orr.w	r3, r3, #16
 800dbe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d106      	bne.n	800dbfe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dbf0:	4b1a      	ldr	r3, [pc, #104]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf4:	4a19      	ldr	r2, [pc, #100]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dbf6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dbfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dbfc:	e00f      	b.n	800dc1e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d106      	bne.n	800dc12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dc04:	4b15      	ldr	r3, [pc, #84]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dc06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc08:	4a14      	ldr	r2, [pc, #80]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dc0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dc10:	e005      	b.n	800dc1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dc12:	4b12      	ldr	r3, [pc, #72]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dc14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc16:	4a11      	ldr	r2, [pc, #68]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dc18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dc1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dc1e:	4b0f      	ldr	r3, [pc, #60]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4a0e      	ldr	r2, [pc, #56]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dc24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dc28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc2a:	f7f5 f919 	bl	8002e60 <HAL_GetTick>
 800dc2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc30:	e008      	b.n	800dc44 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc32:	f7f5 f915 	bl	8002e60 <HAL_GetTick>
 800dc36:	4602      	mov	r2, r0
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	1ad3      	subs	r3, r2, r3
 800dc3c:	2b02      	cmp	r3, #2
 800dc3e:	d901      	bls.n	800dc44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc40:	2303      	movs	r3, #3
 800dc42:	e006      	b.n	800dc52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc44:	4b05      	ldr	r3, [pc, #20]	@ (800dc5c <RCCEx_PLL2_Config+0x15c>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0f0      	beq.n	800dc32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	58024400 	.word	0x58024400
 800dc60:	ffff0007 	.word	0xffff0007

0800dc64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc72:	4b53      	ldr	r3, [pc, #332]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dc74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc76:	f003 0303 	and.w	r3, r3, #3
 800dc7a:	2b03      	cmp	r3, #3
 800dc7c:	d101      	bne.n	800dc82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e099      	b.n	800ddb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dc82:	4b4f      	ldr	r3, [pc, #316]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a4e      	ldr	r2, [pc, #312]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dc88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc8e:	f7f5 f8e7 	bl	8002e60 <HAL_GetTick>
 800dc92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc94:	e008      	b.n	800dca8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dc96:	f7f5 f8e3 	bl	8002e60 <HAL_GetTick>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	2b02      	cmp	r3, #2
 800dca2:	d901      	bls.n	800dca8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dca4:	2303      	movs	r3, #3
 800dca6:	e086      	b.n	800ddb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dca8:	4b45      	ldr	r3, [pc, #276]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d1f0      	bne.n	800dc96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dcb4:	4b42      	ldr	r3, [pc, #264]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcb8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	051b      	lsls	r3, r3, #20
 800dcc2:	493f      	ldr	r1, [pc, #252]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	628b      	str	r3, [r1, #40]	@ 0x28
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	3b01      	subs	r3, #1
 800dcce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	025b      	lsls	r3, r3, #9
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	431a      	orrs	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	3b01      	subs	r3, #1
 800dce4:	041b      	lsls	r3, r3, #16
 800dce6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dcea:	431a      	orrs	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	691b      	ldr	r3, [r3, #16]
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	061b      	lsls	r3, r3, #24
 800dcf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dcf8:	4931      	ldr	r1, [pc, #196]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dcfe:	4b30      	ldr	r3, [pc, #192]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	695b      	ldr	r3, [r3, #20]
 800dd0a:	492d      	ldr	r1, [pc, #180]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dd10:	4b2b      	ldr	r3, [pc, #172]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	699b      	ldr	r3, [r3, #24]
 800dd1c:	4928      	ldr	r1, [pc, #160]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dd22:	4b27      	ldr	r3, [pc, #156]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd26:	4a26      	ldr	r2, [pc, #152]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dd2e:	4b24      	ldr	r3, [pc, #144]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd32:	4b24      	ldr	r3, [pc, #144]	@ (800ddc4 <RCCEx_PLL3_Config+0x160>)
 800dd34:	4013      	ands	r3, r2
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	69d2      	ldr	r2, [r2, #28]
 800dd3a:	00d2      	lsls	r2, r2, #3
 800dd3c:	4920      	ldr	r1, [pc, #128]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dd42:	4b1f      	ldr	r3, [pc, #124]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd46:	4a1e      	ldr	r2, [pc, #120]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d106      	bne.n	800dd62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dd54:	4b1a      	ldr	r3, [pc, #104]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd58:	4a19      	ldr	r2, [pc, #100]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dd5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd60:	e00f      	b.n	800dd82 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d106      	bne.n	800dd76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dd68:	4b15      	ldr	r3, [pc, #84]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd6c:	4a14      	ldr	r2, [pc, #80]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dd72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd74:	e005      	b.n	800dd82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dd76:	4b12      	ldr	r3, [pc, #72]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd7a:	4a11      	ldr	r2, [pc, #68]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dd80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dd82:	4b0f      	ldr	r3, [pc, #60]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a0e      	ldr	r2, [pc, #56]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800dd88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd8e:	f7f5 f867 	bl	8002e60 <HAL_GetTick>
 800dd92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd94:	e008      	b.n	800dda8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd96:	f7f5 f863 	bl	8002e60 <HAL_GetTick>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d901      	bls.n	800dda8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dda4:	2303      	movs	r3, #3
 800dda6:	e006      	b.n	800ddb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dda8:	4b05      	ldr	r3, [pc, #20]	@ (800ddc0 <RCCEx_PLL3_Config+0x15c>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d0f0      	beq.n	800dd96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ddb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	58024400 	.word	0x58024400
 800ddc4:	ffff0007 	.word	0xffff0007

0800ddc8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d101      	bne.n	800ddda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e10f      	b.n	800dffa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a87      	ldr	r2, [pc, #540]	@ (800e004 <HAL_SPI_Init+0x23c>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d00f      	beq.n	800de0a <HAL_SPI_Init+0x42>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4a86      	ldr	r2, [pc, #536]	@ (800e008 <HAL_SPI_Init+0x240>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d00a      	beq.n	800de0a <HAL_SPI_Init+0x42>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a84      	ldr	r2, [pc, #528]	@ (800e00c <HAL_SPI_Init+0x244>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d005      	beq.n	800de0a <HAL_SPI_Init+0x42>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	2b0f      	cmp	r3, #15
 800de04:	d901      	bls.n	800de0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e0f7      	b.n	800dffa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f001 f8fc 	bl	800f008 <SPI_GetPacketSize>
 800de10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a7b      	ldr	r2, [pc, #492]	@ (800e004 <HAL_SPI_Init+0x23c>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d00c      	beq.n	800de36 <HAL_SPI_Init+0x6e>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a79      	ldr	r2, [pc, #484]	@ (800e008 <HAL_SPI_Init+0x240>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d007      	beq.n	800de36 <HAL_SPI_Init+0x6e>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a78      	ldr	r2, [pc, #480]	@ (800e00c <HAL_SPI_Init+0x244>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d002      	beq.n	800de36 <HAL_SPI_Init+0x6e>
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2b08      	cmp	r3, #8
 800de34:	d811      	bhi.n	800de5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de3a:	4a72      	ldr	r2, [pc, #456]	@ (800e004 <HAL_SPI_Init+0x23c>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d009      	beq.n	800de54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a70      	ldr	r2, [pc, #448]	@ (800e008 <HAL_SPI_Init+0x240>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d004      	beq.n	800de54 <HAL_SPI_Init+0x8c>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4a6f      	ldr	r2, [pc, #444]	@ (800e00c <HAL_SPI_Init+0x244>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d104      	bne.n	800de5e <HAL_SPI_Init+0x96>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2b10      	cmp	r3, #16
 800de58:	d901      	bls.n	800de5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e0cd      	b.n	800dffa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800de64:	b2db      	uxtb	r3, r3
 800de66:	2b00      	cmp	r3, #0
 800de68:	d106      	bne.n	800de78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7f4 fd18 	bl	80028a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2202      	movs	r2, #2
 800de7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f022 0201 	bic.w	r2, r2, #1
 800de8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800de9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	699b      	ldr	r3, [r3, #24]
 800dea0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dea4:	d119      	bne.n	800deda <HAL_SPI_Init+0x112>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800deae:	d103      	bne.n	800deb8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d008      	beq.n	800deca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10c      	bne.n	800deda <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dec4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dec8:	d107      	bne.n	800deda <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ded8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d00f      	beq.n	800df06 <HAL_SPI_Init+0x13e>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	2b06      	cmp	r3, #6
 800deec:	d90b      	bls.n	800df06 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	430a      	orrs	r2, r1
 800df02:	601a      	str	r2, [r3, #0]
 800df04:	e007      	b.n	800df16 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800df14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	69da      	ldr	r2, [r3, #28]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df1e:	431a      	orrs	r2, r3
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	431a      	orrs	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df28:	ea42 0103 	orr.w	r1, r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	68da      	ldr	r2, [r3, #12]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	430a      	orrs	r2, r1
 800df36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df40:	431a      	orrs	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df46:	431a      	orrs	r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	699b      	ldr	r3, [r3, #24]
 800df4c:	431a      	orrs	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	431a      	orrs	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	695b      	ldr	r3, [r3, #20]
 800df58:	431a      	orrs	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a1b      	ldr	r3, [r3, #32]
 800df5e:	431a      	orrs	r2, r3
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	431a      	orrs	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df6a:	431a      	orrs	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	431a      	orrs	r2, r3
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df76:	ea42 0103 	orr.w	r1, r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	430a      	orrs	r2, r1
 800df84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d113      	bne.n	800dfb6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dfa0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dfb4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f022 0201 	bic.w	r2, r2, #1
 800dfc4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00a      	beq.n	800dfe8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	430a      	orrs	r2, r1
 800dfe6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	40013000 	.word	0x40013000
 800e008:	40003800 	.word	0x40003800
 800e00c:	40003c00 	.word	0x40003c00

0800e010 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b088      	sub	sp, #32
 800e014:	af02      	add	r7, sp, #8
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	603b      	str	r3, [r7, #0]
 800e01c:	4613      	mov	r3, r2
 800e01e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3320      	adds	r3, #32
 800e026:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e028:	f7f4 ff1a 	bl	8002e60 <HAL_GetTick>
 800e02c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e034:	b2db      	uxtb	r3, r3
 800e036:	2b01      	cmp	r3, #1
 800e038:	d001      	beq.n	800e03e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800e03a:	2302      	movs	r3, #2
 800e03c:	e1d1      	b.n	800e3e2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <HAL_SPI_Transmit+0x3a>
 800e044:	88fb      	ldrh	r3, [r7, #6]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d101      	bne.n	800e04e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800e04a:	2301      	movs	r3, #1
 800e04c:	e1c9      	b.n	800e3e2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e054:	2b01      	cmp	r3, #1
 800e056:	d101      	bne.n	800e05c <HAL_SPI_Transmit+0x4c>
 800e058:	2302      	movs	r3, #2
 800e05a:	e1c2      	b.n	800e3e2 <HAL_SPI_Transmit+0x3d2>
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2201      	movs	r2, #1
 800e060:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2203      	movs	r2, #3
 800e068:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2200      	movs	r2, #0
 800e070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	88fa      	ldrh	r2, [r7, #6]
 800e07e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	88fa      	ldrh	r2, [r7, #6]
 800e086:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2200      	movs	r2, #0
 800e094:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2200      	movs	r2, #0
 800e09c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800e0b4:	d108      	bne.n	800e0c8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e0c4:	601a      	str	r2, [r3, #0]
 800e0c6:	e009      	b.n	800e0dc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e0da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	685a      	ldr	r2, [r3, #4]
 800e0e2:	4b96      	ldr	r3, [pc, #600]	@ (800e33c <HAL_SPI_Transmit+0x32c>)
 800e0e4:	4013      	ands	r3, r2
 800e0e6:	88f9      	ldrh	r1, [r7, #6]
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	6812      	ldr	r2, [r2, #0]
 800e0ec:	430b      	orrs	r3, r1
 800e0ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f042 0201 	orr.w	r2, r2, #1
 800e0fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e108:	d107      	bne.n	800e11a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	2b0f      	cmp	r3, #15
 800e120:	d947      	bls.n	800e1b2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e122:	e03f      	b.n	800e1a4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	695b      	ldr	r3, [r3, #20]
 800e12a:	f003 0302 	and.w	r3, r3, #2
 800e12e:	2b02      	cmp	r3, #2
 800e130:	d114      	bne.n	800e15c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	6812      	ldr	r2, [r2, #0]
 800e13c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e142:	1d1a      	adds	r2, r3, #4
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e14e:	b29b      	uxth	r3, r3
 800e150:	3b01      	subs	r3, #1
 800e152:	b29a      	uxth	r2, r3
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e15a:	e023      	b.n	800e1a4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e15c:	f7f4 fe80 	bl	8002e60 <HAL_GetTick>
 800e160:	4602      	mov	r2, r0
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	683a      	ldr	r2, [r7, #0]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d803      	bhi.n	800e174 <HAL_SPI_Transmit+0x164>
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e172:	d102      	bne.n	800e17a <HAL_SPI_Transmit+0x16a>
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d114      	bne.n	800e1a4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f000 fe76 	bl	800ee6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e186:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e1a0:	2303      	movs	r3, #3
 800e1a2:	e11e      	b.n	800e3e2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d1b9      	bne.n	800e124 <HAL_SPI_Transmit+0x114>
 800e1b0:	e0f1      	b.n	800e396 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	2b07      	cmp	r3, #7
 800e1b8:	f240 80e6 	bls.w	800e388 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e1bc:	e05d      	b.n	800e27a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	695b      	ldr	r3, [r3, #20]
 800e1c4:	f003 0302 	and.w	r3, r3, #2
 800e1c8:	2b02      	cmp	r3, #2
 800e1ca:	d132      	bne.n	800e232 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d918      	bls.n	800e20a <HAL_SPI_Transmit+0x1fa>
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d014      	beq.n	800e20a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	6812      	ldr	r2, [r2, #0]
 800e1ea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1f0:	1d1a      	adds	r2, r3, #4
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	3b02      	subs	r3, #2
 800e200:	b29a      	uxth	r2, r3
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e208:	e037      	b.n	800e27a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e20e:	881a      	ldrh	r2, [r3, #0]
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e218:	1c9a      	adds	r2, r3, #2
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e224:	b29b      	uxth	r3, r3
 800e226:	3b01      	subs	r3, #1
 800e228:	b29a      	uxth	r2, r3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e230:	e023      	b.n	800e27a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e232:	f7f4 fe15 	bl	8002e60 <HAL_GetTick>
 800e236:	4602      	mov	r2, r0
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	1ad3      	subs	r3, r2, r3
 800e23c:	683a      	ldr	r2, [r7, #0]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d803      	bhi.n	800e24a <HAL_SPI_Transmit+0x23a>
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e248:	d102      	bne.n	800e250 <HAL_SPI_Transmit+0x240>
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d114      	bne.n	800e27a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f000 fe0b 	bl	800ee6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e25c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2201      	movs	r2, #1
 800e26a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e276:	2303      	movs	r3, #3
 800e278:	e0b3      	b.n	800e3e2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e280:	b29b      	uxth	r3, r3
 800e282:	2b00      	cmp	r3, #0
 800e284:	d19b      	bne.n	800e1be <HAL_SPI_Transmit+0x1ae>
 800e286:	e086      	b.n	800e396 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	695b      	ldr	r3, [r3, #20]
 800e28e:	f003 0302 	and.w	r3, r3, #2
 800e292:	2b02      	cmp	r3, #2
 800e294:	d154      	bne.n	800e340 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	2b03      	cmp	r3, #3
 800e2a0:	d918      	bls.n	800e2d4 <HAL_SPI_Transmit+0x2c4>
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2a6:	2b40      	cmp	r3, #64	@ 0x40
 800e2a8:	d914      	bls.n	800e2d4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	6812      	ldr	r2, [r2, #0]
 800e2b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2ba:	1d1a      	adds	r2, r3, #4
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	3b04      	subs	r3, #4
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e2d2:	e059      	b.n	800e388 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d917      	bls.n	800e310 <HAL_SPI_Transmit+0x300>
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d013      	beq.n	800e310 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2ec:	881a      	ldrh	r2, [r3, #0]
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2f6:	1c9a      	adds	r2, r3, #2
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e302:	b29b      	uxth	r3, r3
 800e304:	3b02      	subs	r3, #2
 800e306:	b29a      	uxth	r2, r3
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e30e:	e03b      	b.n	800e388 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	3320      	adds	r3, #32
 800e31a:	7812      	ldrb	r2, [r2, #0]
 800e31c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e322:	1c5a      	adds	r2, r3, #1
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e32e:	b29b      	uxth	r3, r3
 800e330:	3b01      	subs	r3, #1
 800e332:	b29a      	uxth	r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e33a:	e025      	b.n	800e388 <HAL_SPI_Transmit+0x378>
 800e33c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e340:	f7f4 fd8e 	bl	8002e60 <HAL_GetTick>
 800e344:	4602      	mov	r2, r0
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d803      	bhi.n	800e358 <HAL_SPI_Transmit+0x348>
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e356:	d102      	bne.n	800e35e <HAL_SPI_Transmit+0x34e>
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d114      	bne.n	800e388 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f000 fd84 	bl	800ee6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e36a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2201      	movs	r2, #1
 800e378:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2200      	movs	r2, #0
 800e380:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e384:	2303      	movs	r3, #3
 800e386:	e02c      	b.n	800e3e2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e38e:	b29b      	uxth	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	f47f af79 	bne.w	800e288 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	2200      	movs	r2, #0
 800e39e:	2108      	movs	r1, #8
 800e3a0:	68f8      	ldr	r0, [r7, #12]
 800e3a2:	f000 fe03 	bl	800efac <SPI_WaitOnFlagUntilTimeout>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d007      	beq.n	800e3bc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3b2:	f043 0220 	orr.w	r2, r3, #32
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f000 fd55 	bl	800ee6c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e000      	b.n	800e3e2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800e3e0:	2300      	movs	r3, #0
  }
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3718      	adds	r7, #24
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop

0800e3ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b08e      	sub	sp, #56	@ 0x38
 800e3f0:	af02      	add	r7, sp, #8
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	3320      	adds	r3, #32
 800e400:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	3330      	adds	r3, #48	@ 0x30
 800e408:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e40e:	095b      	lsrs	r3, r3, #5
 800e410:	b29b      	uxth	r3, r3
 800e412:	3301      	adds	r3, #1
 800e414:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e416:	f7f4 fd23 	bl	8002e60 <HAL_GetTick>
 800e41a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800e41c:	887b      	ldrh	r3, [r7, #2]
 800e41e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800e420:	887b      	ldrh	r3, [r7, #2]
 800e422:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d001      	beq.n	800e434 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800e430:	2302      	movs	r3, #2
 800e432:	e310      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d005      	beq.n	800e446 <HAL_SPI_TransmitReceive+0x5a>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d002      	beq.n	800e446 <HAL_SPI_TransmitReceive+0x5a>
 800e440:	887b      	ldrh	r3, [r7, #2]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d101      	bne.n	800e44a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	e305      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e450:	2b01      	cmp	r3, #1
 800e452:	d101      	bne.n	800e458 <HAL_SPI_TransmitReceive+0x6c>
 800e454:	2302      	movs	r3, #2
 800e456:	e2fe      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x66a>
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2201      	movs	r2, #1
 800e45c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2205      	movs	r2, #5
 800e464:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	887a      	ldrh	r2, [r7, #2]
 800e47a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	887a      	ldrh	r2, [r7, #2]
 800e482:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	68ba      	ldr	r2, [r7, #8]
 800e48a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	887a      	ldrh	r2, [r7, #2]
 800e490:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	887a      	ldrh	r2, [r7, #2]
 800e498:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	68da      	ldr	r2, [r3, #12]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800e4b6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a70      	ldr	r2, [pc, #448]	@ (800e680 <HAL_SPI_TransmitReceive+0x294>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d009      	beq.n	800e4d6 <HAL_SPI_TransmitReceive+0xea>
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	4a6f      	ldr	r2, [pc, #444]	@ (800e684 <HAL_SPI_TransmitReceive+0x298>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d004      	beq.n	800e4d6 <HAL_SPI_TransmitReceive+0xea>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4a6d      	ldr	r2, [pc, #436]	@ (800e688 <HAL_SPI_TransmitReceive+0x29c>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d102      	bne.n	800e4dc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800e4d6:	2310      	movs	r3, #16
 800e4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e4da:	e001      	b.n	800e4e0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800e4dc:	2308      	movs	r3, #8
 800e4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	685a      	ldr	r2, [r3, #4]
 800e4e6:	4b69      	ldr	r3, [pc, #420]	@ (800e68c <HAL_SPI_TransmitReceive+0x2a0>)
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	8879      	ldrh	r1, [r7, #2]
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	6812      	ldr	r2, [r2, #0]
 800e4f0:	430b      	orrs	r3, r1
 800e4f2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f042 0201 	orr.w	r2, r2, #1
 800e502:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e50c:	d107      	bne.n	800e51e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e51c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	2b0f      	cmp	r3, #15
 800e524:	f240 80a2 	bls.w	800e66c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800e528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52a:	089b      	lsrs	r3, r3, #2
 800e52c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e52e:	e094      	b.n	800e65a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	f003 0302 	and.w	r3, r3, #2
 800e53a:	2b02      	cmp	r3, #2
 800e53c:	d120      	bne.n	800e580 <HAL_SPI_TransmitReceive+0x194>
 800e53e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e540:	2b00      	cmp	r3, #0
 800e542:	d01d      	beq.n	800e580 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e544:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e546:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e54a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d217      	bcs.n	800e580 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	6812      	ldr	r2, [r2, #0]
 800e55a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e560:	1d1a      	adds	r2, r3, #4
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	3b01      	subs	r3, #1
 800e570:	b29a      	uxth	r2, r3
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e57e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	695b      	ldr	r3, [r3, #20]
 800e586:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e588:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d065      	beq.n	800e65a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	695b      	ldr	r3, [r3, #20]
 800e594:	f003 0301 	and.w	r3, r3, #1
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d118      	bne.n	800e5ce <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e5a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e5a6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e5ac:	1d1a      	adds	r2, r3, #4
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	3b01      	subs	r3, #1
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e5ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e5cc:	e045      	b.n	800e65a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e5ce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e5d0:	8bfb      	ldrh	r3, [r7, #30]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d21d      	bcs.n	800e612 <HAL_SPI_TransmitReceive+0x226>
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d018      	beq.n	800e612 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e5e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e5ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e5f0:	1d1a      	adds	r2, r3, #4
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	3b01      	subs	r3, #1
 800e600:	b29a      	uxth	r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e60e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e610:	e023      	b.n	800e65a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e612:	f7f4 fc25 	bl	8002e60 <HAL_GetTick>
 800e616:	4602      	mov	r2, r0
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e61e:	429a      	cmp	r2, r3
 800e620:	d803      	bhi.n	800e62a <HAL_SPI_TransmitReceive+0x23e>
 800e622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e628:	d102      	bne.n	800e630 <HAL_SPI_TransmitReceive+0x244>
 800e62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d114      	bne.n	800e65a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f000 fc1b 	bl	800ee6c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e63c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2200      	movs	r2, #0
 800e652:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e656:	2303      	movs	r3, #3
 800e658:	e1fd      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e65a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f47f af67 	bne.w	800e530 <HAL_SPI_TransmitReceive+0x144>
 800e662:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e664:	2b00      	cmp	r3, #0
 800e666:	f47f af63 	bne.w	800e530 <HAL_SPI_TransmitReceive+0x144>
 800e66a:	e1ce      	b.n	800ea0a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	2b07      	cmp	r3, #7
 800e672:	f240 81c2 	bls.w	800e9fa <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800e676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e678:	085b      	lsrs	r3, r3, #1
 800e67a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e67c:	e0c9      	b.n	800e812 <HAL_SPI_TransmitReceive+0x426>
 800e67e:	bf00      	nop
 800e680:	40013000 	.word	0x40013000
 800e684:	40003800 	.word	0x40003800
 800e688:	40003c00 	.word	0x40003c00
 800e68c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	695b      	ldr	r3, [r3, #20]
 800e696:	f003 0302 	and.w	r3, r3, #2
 800e69a:	2b02      	cmp	r3, #2
 800e69c:	d11f      	bne.n	800e6de <HAL_SPI_TransmitReceive+0x2f2>
 800e69e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d01c      	beq.n	800e6de <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e6a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e6a6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6aa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d216      	bcs.n	800e6de <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e6b4:	881a      	ldrh	r2, [r3, #0]
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e6be:	1c9a      	adds	r2, r3, #2
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e6dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	695b      	ldr	r3, [r3, #20]
 800e6e4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e6e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f000 8092 	beq.w	800e812 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	695b      	ldr	r3, [r3, #20]
 800e6f4:	f003 0301 	and.w	r3, r3, #1
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d118      	bne.n	800e72e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e700:	6a3a      	ldr	r2, [r7, #32]
 800e702:	8812      	ldrh	r2, [r2, #0]
 800e704:	b292      	uxth	r2, r2
 800e706:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e70c:	1c9a      	adds	r2, r3, #2
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e718:	b29b      	uxth	r3, r3
 800e71a:	3b01      	subs	r3, #1
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e72a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e72c:	e071      	b.n	800e812 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e72e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e730:	8bfb      	ldrh	r3, [r7, #30]
 800e732:	429a      	cmp	r2, r3
 800e734:	d228      	bcs.n	800e788 <HAL_SPI_TransmitReceive+0x39c>
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d023      	beq.n	800e788 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e744:	6a3a      	ldr	r2, [r7, #32]
 800e746:	8812      	ldrh	r2, [r2, #0]
 800e748:	b292      	uxth	r2, r2
 800e74a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e750:	1c9a      	adds	r2, r3, #2
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e75a:	6a3a      	ldr	r2, [r7, #32]
 800e75c:	8812      	ldrh	r2, [r2, #0]
 800e75e:	b292      	uxth	r2, r2
 800e760:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e766:	1c9a      	adds	r2, r3, #2
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e772:	b29b      	uxth	r3, r3
 800e774:	3b02      	subs	r3, #2
 800e776:	b29a      	uxth	r2, r3
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e784:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e786:	e044      	b.n	800e812 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e788:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d11d      	bne.n	800e7ca <HAL_SPI_TransmitReceive+0x3de>
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e794:	2b00      	cmp	r3, #0
 800e796:	d018      	beq.n	800e7ca <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e79c:	6a3a      	ldr	r2, [r7, #32]
 800e79e:	8812      	ldrh	r2, [r2, #0]
 800e7a0:	b292      	uxth	r2, r2
 800e7a2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e7a8:	1c9a      	adds	r2, r3, #2
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	3b01      	subs	r3, #1
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e7c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e7c8:	e023      	b.n	800e812 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7ca:	f7f4 fb49 	bl	8002e60 <HAL_GetTick>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	1ad3      	subs	r3, r2, r3
 800e7d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d803      	bhi.n	800e7e2 <HAL_SPI_TransmitReceive+0x3f6>
 800e7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e0:	d102      	bne.n	800e7e8 <HAL_SPI_TransmitReceive+0x3fc>
 800e7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d114      	bne.n	800e812 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f000 fb3f 	bl	800ee6c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2201      	movs	r2, #1
 800e802:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2200      	movs	r2, #0
 800e80a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e80e:	2303      	movs	r3, #3
 800e810:	e121      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e812:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e814:	2b00      	cmp	r3, #0
 800e816:	f47f af3b 	bne.w	800e690 <HAL_SPI_TransmitReceive+0x2a4>
 800e81a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f47f af37 	bne.w	800e690 <HAL_SPI_TransmitReceive+0x2a4>
 800e822:	e0f2      	b.n	800ea0a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	695b      	ldr	r3, [r3, #20]
 800e82a:	f003 0302 	and.w	r3, r3, #2
 800e82e:	2b02      	cmp	r3, #2
 800e830:	d121      	bne.n	800e876 <HAL_SPI_TransmitReceive+0x48a>
 800e832:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e834:	2b00      	cmp	r3, #0
 800e836:	d01e      	beq.n	800e876 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e838:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e83a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e83e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e840:	429a      	cmp	r2, r3
 800e842:	d218      	bcs.n	800e876 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3320      	adds	r3, #32
 800e84e:	7812      	ldrb	r2, [r2, #0]
 800e850:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e856:	1c5a      	adds	r2, r3, #1
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e862:	b29b      	uxth	r3, r3
 800e864:	3b01      	subs	r3, #1
 800e866:	b29a      	uxth	r2, r3
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e874:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	695b      	ldr	r3, [r3, #20]
 800e87c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e87e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 80ba 	beq.w	800e9fa <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	695b      	ldr	r3, [r3, #20]
 800e88c:	f003 0301 	and.w	r3, r3, #1
 800e890:	2b01      	cmp	r3, #1
 800e892:	d11b      	bne.n	800e8cc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8a0:	7812      	ldrb	r2, [r2, #0]
 800e8a2:	b2d2      	uxtb	r2, r2
 800e8a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8aa:	1c5a      	adds	r2, r3, #1
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	b29a      	uxth	r2, r3
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e8c8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e8ca:	e096      	b.n	800e9fa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e8cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e8ce:	8bfb      	ldrh	r3, [r7, #30]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d24a      	bcs.n	800e96a <HAL_SPI_TransmitReceive+0x57e>
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d045      	beq.n	800e96a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8ea:	7812      	ldrb	r2, [r2, #0]
 800e8ec:	b2d2      	uxtb	r2, r2
 800e8ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8f4:	1c5a      	adds	r2, r3, #1
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e906:	7812      	ldrb	r2, [r2, #0]
 800e908:	b2d2      	uxtb	r2, r2
 800e90a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e910:	1c5a      	adds	r2, r3, #1
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e922:	7812      	ldrb	r2, [r2, #0]
 800e924:	b2d2      	uxtb	r2, r2
 800e926:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e92c:	1c5a      	adds	r2, r3, #1
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e93e:	7812      	ldrb	r2, [r2, #0]
 800e940:	b2d2      	uxtb	r2, r2
 800e942:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e948:	1c5a      	adds	r2, r3, #1
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e954:	b29b      	uxth	r3, r3
 800e956:	3b04      	subs	r3, #4
 800e958:	b29a      	uxth	r2, r3
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e966:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e968:	e047      	b.n	800e9fa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e96a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e96c:	2b03      	cmp	r3, #3
 800e96e:	d820      	bhi.n	800e9b2 <HAL_SPI_TransmitReceive+0x5c6>
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800e976:	2b00      	cmp	r3, #0
 800e978:	d01b      	beq.n	800e9b2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e986:	7812      	ldrb	r2, [r2, #0]
 800e988:	b2d2      	uxtb	r2, r2
 800e98a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e990:	1c5a      	adds	r2, r3, #1
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e9ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e9b0:	e023      	b.n	800e9fa <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9b2:	f7f4 fa55 	bl	8002e60 <HAL_GetTick>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	1ad3      	subs	r3, r2, r3
 800e9bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d803      	bhi.n	800e9ca <HAL_SPI_TransmitReceive+0x5de>
 800e9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c8:	d102      	bne.n	800e9d0 <HAL_SPI_TransmitReceive+0x5e4>
 800e9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d114      	bne.n	800e9fa <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f000 fa4b 	bl	800ee6c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e9f6:	2303      	movs	r3, #3
 800e9f8:	e02d      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e9fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	f47f af11 	bne.w	800e824 <HAL_SPI_TransmitReceive+0x438>
 800ea02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f47f af0d 	bne.w	800e824 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea10:	2200      	movs	r2, #0
 800ea12:	2108      	movs	r1, #8
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f000 fac9 	bl	800efac <SPI_WaitOnFlagUntilTimeout>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d007      	beq.n	800ea30 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea26:	f043 0220 	orr.w	r2, r3, #32
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f000 fa1b 	bl	800ee6c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2200      	movs	r2, #0
 800ea42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d001      	beq.n	800ea54 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800ea50:	2301      	movs	r3, #1
 800ea52:	e000      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800ea54:	2300      	movs	r3, #0
  }
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3730      	adds	r7, #48	@ 0x30
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop

0800ea60 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b08a      	sub	sp, #40	@ 0x28
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	695b      	ldr	r3, [r3, #20]
 800ea76:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800ea78:	6a3a      	ldr	r2, [r7, #32]
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	4013      	ands	r3, r2
 800ea7e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ea92:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	3330      	adds	r3, #48	@ 0x30
 800ea9a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d010      	beq.n	800eac8 <HAL_SPI_IRQHandler+0x68>
 800eaa6:	6a3b      	ldr	r3, [r7, #32]
 800eaa8:	f003 0308 	and.w	r3, r3, #8
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d00b      	beq.n	800eac8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	699a      	ldr	r2, [r3, #24]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eabe:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 f9af 	bl	800ee24 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800eac6:	e192      	b.n	800edee <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d113      	bne.n	800eafa <HAL_SPI_IRQHandler+0x9a>
 800ead2:	69bb      	ldr	r3, [r7, #24]
 800ead4:	f003 0320 	and.w	r3, r3, #32
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10e      	bne.n	800eafa <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d009      	beq.n	800eafa <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	4798      	blx	r3
    hspi->RxISR(hspi);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	4798      	blx	r3
    handled = 1UL;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10f      	bne.n	800eb24 <HAL_SPI_IRQHandler+0xc4>
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	f003 0301 	and.w	r3, r3, #1
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00a      	beq.n	800eb24 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d105      	bne.n	800eb24 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	4798      	blx	r3
    handled = 1UL;
 800eb20:	2301      	movs	r3, #1
 800eb22:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	f003 0320 	and.w	r3, r3, #32
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d10f      	bne.n	800eb4e <HAL_SPI_IRQHandler+0xee>
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	f003 0302 	and.w	r3, r3, #2
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00a      	beq.n	800eb4e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d105      	bne.n	800eb4e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	4798      	blx	r3
    handled = 1UL;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f040 8147 	bne.w	800ede4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800eb56:	69bb      	ldr	r3, [r7, #24]
 800eb58:	f003 0308 	and.w	r3, r3, #8
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f000 808b 	beq.w	800ec78 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	699a      	ldr	r2, [r3, #24]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f042 0208 	orr.w	r2, r2, #8
 800eb70:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	699a      	ldr	r2, [r3, #24]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f042 0210 	orr.w	r2, r2, #16
 800eb80:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	699a      	ldr	r2, [r3, #24]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eb90:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	691a      	ldr	r2, [r3, #16]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f022 0208 	bic.w	r2, r2, #8
 800eba0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d13d      	bne.n	800ec2c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ebb0:	e036      	b.n	800ec20 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	2b0f      	cmp	r3, #15
 800ebb8:	d90b      	bls.n	800ebd2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebc2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ebc4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebca:	1d1a      	adds	r2, r3, #4
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	665a      	str	r2, [r3, #100]	@ 0x64
 800ebd0:	e01d      	b.n	800ec0e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	2b07      	cmp	r3, #7
 800ebd8:	d90b      	bls.n	800ebf2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	8812      	ldrh	r2, [r2, #0]
 800ebe2:	b292      	uxth	r2, r2
 800ebe4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebea:	1c9a      	adds	r2, r3, #2
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	665a      	str	r2, [r3, #100]	@ 0x64
 800ebf0:	e00d      	b.n	800ec0e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebfe:	7812      	ldrb	r2, [r2, #0]
 800ec00:	b2d2      	uxtb	r2, r2
 800ec02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec08:	1c5a      	adds	r2, r3, #1
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	3b01      	subs	r3, #1
 800ec18:	b29a      	uxth	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1c2      	bne.n	800ebb2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 f91d 	bl	800ee6c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d003      	beq.n	800ec4c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 f8e3 	bl	800ee10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ec4a:	e0d0      	b.n	800edee <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ec4c:	7cfb      	ldrb	r3, [r7, #19]
 800ec4e:	2b05      	cmp	r3, #5
 800ec50:	d103      	bne.n	800ec5a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7f1 fc4e 	bl	80004f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ec58:	e0c6      	b.n	800ede8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ec5a:	7cfb      	ldrb	r3, [r7, #19]
 800ec5c:	2b04      	cmp	r3, #4
 800ec5e:	d103      	bne.n	800ec68 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f8cb 	bl	800edfc <HAL_SPI_RxCpltCallback>
    return;
 800ec66:	e0bf      	b.n	800ede8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ec68:	7cfb      	ldrb	r3, [r7, #19]
 800ec6a:	2b03      	cmp	r3, #3
 800ec6c:	f040 80bc 	bne.w	800ede8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7f1 fc2f 	bl	80004d4 <HAL_SPI_TxCpltCallback>
    return;
 800ec76:	e0b7      	b.n	800ede8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f000 80b5 	beq.w	800edee <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00f      	beq.n	800ecae <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec94:	f043 0204 	orr.w	r2, r3, #4
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	699a      	ldr	r2, [r3, #24]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ecac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00f      	beq.n	800ecd8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ecbe:	f043 0201 	orr.w	r2, r3, #1
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	699a      	ldr	r2, [r3, #24]
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ecd6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00f      	beq.n	800ed02 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ece8:	f043 0208 	orr.w	r2, r3, #8
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	699a      	ldr	r2, [r3, #24]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ed00:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	f003 0320 	and.w	r3, r3, #32
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d00f      	beq.n	800ed2c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	699a      	ldr	r2, [r3, #24]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f042 0220 	orr.w	r2, r2, #32
 800ed2a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d05a      	beq.n	800edec <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f022 0201 	bic.w	r2, r2, #1
 800ed44:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	6919      	ldr	r1, [r3, #16]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	4b28      	ldr	r3, [pc, #160]	@ (800edf4 <HAL_SPI_IRQHandler+0x394>)
 800ed52:	400b      	ands	r3, r1
 800ed54:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ed5c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ed60:	d138      	bne.n	800edd4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	689a      	ldr	r2, [r3, #8]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ed70:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d013      	beq.n	800eda2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed7e:	4a1e      	ldr	r2, [pc, #120]	@ (800edf8 <HAL_SPI_IRQHandler+0x398>)
 800ed80:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7f6 fd54 	bl	8005834 <HAL_DMA_Abort_IT>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d007      	beq.n	800eda2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed98:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d020      	beq.n	800edec <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800edae:	4a12      	ldr	r2, [pc, #72]	@ (800edf8 <HAL_SPI_IRQHandler+0x398>)
 800edb0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7f6 fd3c 	bl	8005834 <HAL_DMA_Abort_IT>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d014      	beq.n	800edec <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800edc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800edd2:	e00b      	b.n	800edec <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2201      	movs	r2, #1
 800edd8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 f817 	bl	800ee10 <HAL_SPI_ErrorCallback>
    return;
 800ede2:	e003      	b.n	800edec <HAL_SPI_IRQHandler+0x38c>
    return;
 800ede4:	bf00      	nop
 800ede6:	e002      	b.n	800edee <HAL_SPI_IRQHandler+0x38e>
    return;
 800ede8:	bf00      	nop
 800edea:	e000      	b.n	800edee <HAL_SPI_IRQHandler+0x38e>
    return;
 800edec:	bf00      	nop
  }
}
 800edee:	3728      	adds	r7, #40	@ 0x28
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	fffffc94 	.word	0xfffffc94
 800edf8:	0800ee39 	.word	0x0800ee39

0800edfc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ee04:	bf00      	nop
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ee18:	bf00      	nop
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800ee2c:	bf00      	nop
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2200      	movs	r2, #0
 800ee52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f7ff ffd6 	bl	800ee10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ee64:	bf00      	nop
 800ee66:	3710      	adds	r7, #16
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b085      	sub	sp, #20
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	695b      	ldr	r3, [r3, #20]
 800ee7a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	699a      	ldr	r2, [r3, #24]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f042 0208 	orr.w	r2, r2, #8
 800ee8a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	699a      	ldr	r2, [r3, #24]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f042 0210 	orr.w	r2, r2, #16
 800ee9a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f022 0201 	bic.w	r2, r2, #1
 800eeaa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	6919      	ldr	r1, [r3, #16]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	4b3c      	ldr	r3, [pc, #240]	@ (800efa8 <SPI_CloseTransfer+0x13c>)
 800eeb8:	400b      	ands	r3, r1
 800eeba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	689a      	ldr	r2, [r3, #8]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800eeca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	2b04      	cmp	r3, #4
 800eed6:	d014      	beq.n	800ef02 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f003 0320 	and.w	r3, r3, #32
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00f      	beq.n	800ef02 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eee8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	699a      	ldr	r2, [r3, #24]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f042 0220 	orr.w	r2, r2, #32
 800ef00:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	d014      	beq.n	800ef38 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00f      	beq.n	800ef38 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef1e:	f043 0204 	orr.w	r2, r3, #4
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	699a      	ldr	r2, [r3, #24]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ef36:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00f      	beq.n	800ef62 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef48:	f043 0201 	orr.w	r2, r3, #1
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	699a      	ldr	r2, [r3, #24]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ef60:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d00f      	beq.n	800ef8c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef72:	f043 0208 	orr.w	r2, r3, #8
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	699a      	ldr	r2, [r3, #24]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ef8a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ef9c:	bf00      	nop
 800ef9e:	3714      	adds	r7, #20
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr
 800efa8:	fffffc90 	.word	0xfffffc90

0800efac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	60b9      	str	r1, [r7, #8]
 800efb6:	603b      	str	r3, [r7, #0]
 800efb8:	4613      	mov	r3, r2
 800efba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800efbc:	e010      	b.n	800efe0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efbe:	f7f3 ff4f 	bl	8002e60 <HAL_GetTick>
 800efc2:	4602      	mov	r2, r0
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	683a      	ldr	r2, [r7, #0]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d803      	bhi.n	800efd6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd4:	d102      	bne.n	800efdc <SPI_WaitOnFlagUntilTimeout+0x30>
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d101      	bne.n	800efe0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800efdc:	2303      	movs	r3, #3
 800efde:	e00f      	b.n	800f000 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	695a      	ldr	r2, [r3, #20]
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	4013      	ands	r3, r2
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	429a      	cmp	r2, r3
 800efee:	bf0c      	ite	eq
 800eff0:	2301      	moveq	r3, #1
 800eff2:	2300      	movne	r3, #0
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	461a      	mov	r2, r3
 800eff8:	79fb      	ldrb	r3, [r7, #7]
 800effa:	429a      	cmp	r2, r3
 800effc:	d0df      	beq.n	800efbe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800effe:	2300      	movs	r3, #0
}
 800f000:	4618      	mov	r0, r3
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f014:	095b      	lsrs	r3, r3, #5
 800f016:	3301      	adds	r3, #1
 800f018:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	3301      	adds	r3, #1
 800f020:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	3307      	adds	r3, #7
 800f026:	08db      	lsrs	r3, r3, #3
 800f028:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f032:	4618      	mov	r0, r3
 800f034:	3714      	adds	r7, #20
 800f036:	46bd      	mov	sp, r7
 800f038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03c:	4770      	bx	lr
	...

0800f040 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f040:	b084      	sub	sp, #16
 800f042:	b580      	push	{r7, lr}
 800f044:	b084      	sub	sp, #16
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]
 800f04a:	f107 001c 	add.w	r0, r7, #28
 800f04e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f052:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f056:	2b01      	cmp	r3, #1
 800f058:	d121      	bne.n	800f09e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f05e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	68da      	ldr	r2, [r3, #12]
 800f06a:	4b2c      	ldr	r3, [pc, #176]	@ (800f11c <USB_CoreInit+0xdc>)
 800f06c:	4013      	ands	r3, r2
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f07e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f082:	2b01      	cmp	r3, #1
 800f084:	d105      	bne.n	800f092 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f001 fafa 	bl	801068c <USB_CoreReset>
 800f098:	4603      	mov	r3, r0
 800f09a:	73fb      	strb	r3, [r7, #15]
 800f09c:	e01b      	b.n	800f0d6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f001 faee 	bl	801068c <USB_CoreReset>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f0b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d106      	bne.n	800f0ca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	639a      	str	r2, [r3, #56]	@ 0x38
 800f0c8:	e005      	b.n	800f0d6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f0d6:	7fbb      	ldrb	r3, [r7, #30]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d116      	bne.n	800f10a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f120 <USB_CoreInit+0xe0>)
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	f043 0206 	orr.w	r2, r3, #6
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	f043 0220 	orr.w	r2, r3, #32
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f116:	b004      	add	sp, #16
 800f118:	4770      	bx	lr
 800f11a:	bf00      	nop
 800f11c:	ffbdffbf 	.word	0xffbdffbf
 800f120:	03ee0000 	.word	0x03ee0000

0800f124 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f124:	b480      	push	{r7}
 800f126:	b087      	sub	sp, #28
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	4613      	mov	r3, r2
 800f130:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f132:	79fb      	ldrb	r3, [r7, #7]
 800f134:	2b02      	cmp	r3, #2
 800f136:	d165      	bne.n	800f204 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	4a41      	ldr	r2, [pc, #260]	@ (800f240 <USB_SetTurnaroundTime+0x11c>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d906      	bls.n	800f14e <USB_SetTurnaroundTime+0x2a>
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	4a40      	ldr	r2, [pc, #256]	@ (800f244 <USB_SetTurnaroundTime+0x120>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d202      	bcs.n	800f14e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f148:	230f      	movs	r3, #15
 800f14a:	617b      	str	r3, [r7, #20]
 800f14c:	e062      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	4a3c      	ldr	r2, [pc, #240]	@ (800f244 <USB_SetTurnaroundTime+0x120>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d306      	bcc.n	800f164 <USB_SetTurnaroundTime+0x40>
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	4a3b      	ldr	r2, [pc, #236]	@ (800f248 <USB_SetTurnaroundTime+0x124>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d202      	bcs.n	800f164 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f15e:	230e      	movs	r3, #14
 800f160:	617b      	str	r3, [r7, #20]
 800f162:	e057      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	4a38      	ldr	r2, [pc, #224]	@ (800f248 <USB_SetTurnaroundTime+0x124>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d306      	bcc.n	800f17a <USB_SetTurnaroundTime+0x56>
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	4a37      	ldr	r2, [pc, #220]	@ (800f24c <USB_SetTurnaroundTime+0x128>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d202      	bcs.n	800f17a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f174:	230d      	movs	r3, #13
 800f176:	617b      	str	r3, [r7, #20]
 800f178:	e04c      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	4a33      	ldr	r2, [pc, #204]	@ (800f24c <USB_SetTurnaroundTime+0x128>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d306      	bcc.n	800f190 <USB_SetTurnaroundTime+0x6c>
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	4a32      	ldr	r2, [pc, #200]	@ (800f250 <USB_SetTurnaroundTime+0x12c>)
 800f186:	4293      	cmp	r3, r2
 800f188:	d802      	bhi.n	800f190 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f18a:	230c      	movs	r3, #12
 800f18c:	617b      	str	r3, [r7, #20]
 800f18e:	e041      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	4a2f      	ldr	r2, [pc, #188]	@ (800f250 <USB_SetTurnaroundTime+0x12c>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d906      	bls.n	800f1a6 <USB_SetTurnaroundTime+0x82>
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	4a2e      	ldr	r2, [pc, #184]	@ (800f254 <USB_SetTurnaroundTime+0x130>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d802      	bhi.n	800f1a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f1a0:	230b      	movs	r3, #11
 800f1a2:	617b      	str	r3, [r7, #20]
 800f1a4:	e036      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	4a2a      	ldr	r2, [pc, #168]	@ (800f254 <USB_SetTurnaroundTime+0x130>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d906      	bls.n	800f1bc <USB_SetTurnaroundTime+0x98>
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	4a29      	ldr	r2, [pc, #164]	@ (800f258 <USB_SetTurnaroundTime+0x134>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d802      	bhi.n	800f1bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f1b6:	230a      	movs	r3, #10
 800f1b8:	617b      	str	r3, [r7, #20]
 800f1ba:	e02b      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	4a26      	ldr	r2, [pc, #152]	@ (800f258 <USB_SetTurnaroundTime+0x134>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d906      	bls.n	800f1d2 <USB_SetTurnaroundTime+0xae>
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	4a25      	ldr	r2, [pc, #148]	@ (800f25c <USB_SetTurnaroundTime+0x138>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d202      	bcs.n	800f1d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f1cc:	2309      	movs	r3, #9
 800f1ce:	617b      	str	r3, [r7, #20]
 800f1d0:	e020      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	4a21      	ldr	r2, [pc, #132]	@ (800f25c <USB_SetTurnaroundTime+0x138>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d306      	bcc.n	800f1e8 <USB_SetTurnaroundTime+0xc4>
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	4a20      	ldr	r2, [pc, #128]	@ (800f260 <USB_SetTurnaroundTime+0x13c>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d802      	bhi.n	800f1e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f1e2:	2308      	movs	r3, #8
 800f1e4:	617b      	str	r3, [r7, #20]
 800f1e6:	e015      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	4a1d      	ldr	r2, [pc, #116]	@ (800f260 <USB_SetTurnaroundTime+0x13c>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d906      	bls.n	800f1fe <USB_SetTurnaroundTime+0xda>
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	4a1c      	ldr	r2, [pc, #112]	@ (800f264 <USB_SetTurnaroundTime+0x140>)
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d202      	bcs.n	800f1fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f1f8:	2307      	movs	r3, #7
 800f1fa:	617b      	str	r3, [r7, #20]
 800f1fc:	e00a      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f1fe:	2306      	movs	r3, #6
 800f200:	617b      	str	r3, [r7, #20]
 800f202:	e007      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f204:	79fb      	ldrb	r3, [r7, #7]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d102      	bne.n	800f210 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f20a:	2309      	movs	r3, #9
 800f20c:	617b      	str	r3, [r7, #20]
 800f20e:	e001      	b.n	800f214 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f210:	2309      	movs	r3, #9
 800f212:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	68da      	ldr	r2, [r3, #12]
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	029b      	lsls	r3, r3, #10
 800f228:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f22c:	431a      	orrs	r2, r3
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f232:	2300      	movs	r3, #0
}
 800f234:	4618      	mov	r0, r3
 800f236:	371c      	adds	r7, #28
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	00d8acbf 	.word	0x00d8acbf
 800f244:	00e4e1c0 	.word	0x00e4e1c0
 800f248:	00f42400 	.word	0x00f42400
 800f24c:	01067380 	.word	0x01067380
 800f250:	011a499f 	.word	0x011a499f
 800f254:	01312cff 	.word	0x01312cff
 800f258:	014ca43f 	.word	0x014ca43f
 800f25c:	016e3600 	.word	0x016e3600
 800f260:	01a6ab1f 	.word	0x01a6ab1f
 800f264:	01e84800 	.word	0x01e84800

0800f268 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	f043 0201 	orr.w	r2, r3, #1
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	370c      	adds	r7, #12
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f28a:	b480      	push	{r7}
 800f28c:	b083      	sub	sp, #12
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	689b      	ldr	r3, [r3, #8]
 800f296:	f023 0201 	bic.w	r2, r3, #1
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f29e:	2300      	movs	r3, #0
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f2c8:	78fb      	ldrb	r3, [r7, #3]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d115      	bne.n	800f2fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	68db      	ldr	r3, [r3, #12]
 800f2d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f2da:	200a      	movs	r0, #10
 800f2dc:	f7f3 fdcc 	bl	8002e78 <HAL_Delay>
      ms += 10U;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	330a      	adds	r3, #10
 800f2e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f001 f93f 	bl	801056a <USB_GetMode>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d01e      	beq.n	800f330 <USB_SetCurrentMode+0x84>
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2bc7      	cmp	r3, #199	@ 0xc7
 800f2f6:	d9f0      	bls.n	800f2da <USB_SetCurrentMode+0x2e>
 800f2f8:	e01a      	b.n	800f330 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f2fa:	78fb      	ldrb	r3, [r7, #3]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d115      	bne.n	800f32c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	68db      	ldr	r3, [r3, #12]
 800f304:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f30c:	200a      	movs	r0, #10
 800f30e:	f7f3 fdb3 	bl	8002e78 <HAL_Delay>
      ms += 10U;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	330a      	adds	r3, #10
 800f316:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f001 f926 	bl	801056a <USB_GetMode>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d005      	beq.n	800f330 <USB_SetCurrentMode+0x84>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2bc7      	cmp	r3, #199	@ 0xc7
 800f328:	d9f0      	bls.n	800f30c <USB_SetCurrentMode+0x60>
 800f32a:	e001      	b.n	800f330 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f32c:	2301      	movs	r3, #1
 800f32e:	e005      	b.n	800f33c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2bc8      	cmp	r3, #200	@ 0xc8
 800f334:	d101      	bne.n	800f33a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f336:	2301      	movs	r3, #1
 800f338:	e000      	b.n	800f33c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f33a:	2300      	movs	r3, #0
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3710      	adds	r7, #16
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f344:	b084      	sub	sp, #16
 800f346:	b580      	push	{r7, lr}
 800f348:	b086      	sub	sp, #24
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
 800f34e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f356:	2300      	movs	r3, #0
 800f358:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f35e:	2300      	movs	r3, #0
 800f360:	613b      	str	r3, [r7, #16]
 800f362:	e009      	b.n	800f378 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	3340      	adds	r3, #64	@ 0x40
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	4413      	add	r3, r2
 800f36e:	2200      	movs	r2, #0
 800f370:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	3301      	adds	r3, #1
 800f376:	613b      	str	r3, [r7, #16]
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	2b0e      	cmp	r3, #14
 800f37c:	d9f2      	bls.n	800f364 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f37e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f382:	2b00      	cmp	r3, #0
 800f384:	d11c      	bne.n	800f3c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f394:	f043 0302 	orr.w	r3, r3, #2
 800f398:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f39e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	601a      	str	r2, [r3, #0]
 800f3be:	e005      	b.n	800f3cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f3d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d10d      	bne.n	800f3fc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d104      	bne.n	800f3f2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 f968 	bl	800f6c0 <USB_SetDevSpeed>
 800f3f0:	e008      	b.n	800f404 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f3f2:	2101      	movs	r1, #1
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 f963 	bl	800f6c0 <USB_SetDevSpeed>
 800f3fa:	e003      	b.n	800f404 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f3fc:	2103      	movs	r1, #3
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f95e 	bl	800f6c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f404:	2110      	movs	r1, #16
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 f8fa 	bl	800f600 <USB_FlushTxFifo>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d001      	beq.n	800f416 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f412:	2301      	movs	r3, #1
 800f414:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 f924 	bl	800f664 <USB_FlushRxFifo>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d001      	beq.n	800f426 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f422:	2301      	movs	r3, #1
 800f424:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f42c:	461a      	mov	r2, r3
 800f42e:	2300      	movs	r3, #0
 800f430:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f438:	461a      	mov	r2, r3
 800f43a:	2300      	movs	r3, #0
 800f43c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f444:	461a      	mov	r2, r3
 800f446:	2300      	movs	r3, #0
 800f448:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f44a:	2300      	movs	r3, #0
 800f44c:	613b      	str	r3, [r7, #16]
 800f44e:	e043      	b.n	800f4d8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	015a      	lsls	r2, r3, #5
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	4413      	add	r3, r2
 800f458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f466:	d118      	bne.n	800f49a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d10a      	bne.n	800f484 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	015a      	lsls	r2, r3, #5
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	4413      	add	r3, r2
 800f476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f47a:	461a      	mov	r2, r3
 800f47c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f480:	6013      	str	r3, [r2, #0]
 800f482:	e013      	b.n	800f4ac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	015a      	lsls	r2, r3, #5
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	4413      	add	r3, r2
 800f48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f490:	461a      	mov	r2, r3
 800f492:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f496:	6013      	str	r3, [r2, #0]
 800f498:	e008      	b.n	800f4ac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	015a      	lsls	r2, r3, #5
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	015a      	lsls	r2, r3, #5
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	4413      	add	r3, r2
 800f4b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	015a      	lsls	r2, r3, #5
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f4d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	613b      	str	r3, [r7, #16]
 800f4d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f4dc:	461a      	mov	r2, r3
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d3b5      	bcc.n	800f450 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	613b      	str	r3, [r7, #16]
 800f4e8:	e043      	b.n	800f572 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	015a      	lsls	r2, r3, #5
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f4fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f500:	d118      	bne.n	800f534 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10a      	bne.n	800f51e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	015a      	lsls	r2, r3, #5
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	4413      	add	r3, r2
 800f510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f514:	461a      	mov	r2, r3
 800f516:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f51a:	6013      	str	r3, [r2, #0]
 800f51c:	e013      	b.n	800f546 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	015a      	lsls	r2, r3, #5
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	4413      	add	r3, r2
 800f526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f52a:	461a      	mov	r2, r3
 800f52c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f530:	6013      	str	r3, [r2, #0]
 800f532:	e008      	b.n	800f546 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	015a      	lsls	r2, r3, #5
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	4413      	add	r3, r2
 800f53c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f540:	461a      	mov	r2, r3
 800f542:	2300      	movs	r3, #0
 800f544:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	015a      	lsls	r2, r3, #5
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	4413      	add	r3, r2
 800f54e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f552:	461a      	mov	r2, r3
 800f554:	2300      	movs	r3, #0
 800f556:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	015a      	lsls	r2, r3, #5
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	4413      	add	r3, r2
 800f560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f564:	461a      	mov	r2, r3
 800f566:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f56a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	3301      	adds	r3, #1
 800f570:	613b      	str	r3, [r7, #16]
 800f572:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f576:	461a      	mov	r2, r3
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d3b5      	bcc.n	800f4ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f584:	691b      	ldr	r3, [r3, #16]
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f58c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f590:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2200      	movs	r2, #0
 800f596:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f59e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f5a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d105      	bne.n	800f5b4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	699b      	ldr	r3, [r3, #24]
 800f5ac:	f043 0210 	orr.w	r2, r3, #16
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	699a      	ldr	r2, [r3, #24]
 800f5b8:	4b0f      	ldr	r3, [pc, #60]	@ (800f5f8 <USB_DevInit+0x2b4>)
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f5c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d005      	beq.n	800f5d4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	699b      	ldr	r3, [r3, #24]
 800f5cc:	f043 0208 	orr.w	r2, r3, #8
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f5d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d105      	bne.n	800f5e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	699a      	ldr	r2, [r3, #24]
 800f5e0:	4b06      	ldr	r3, [pc, #24]	@ (800f5fc <USB_DevInit+0x2b8>)
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3718      	adds	r7, #24
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5f4:	b004      	add	sp, #16
 800f5f6:	4770      	bx	lr
 800f5f8:	803c3800 	.word	0x803c3800
 800f5fc:	40000004 	.word	0x40000004

0800f600 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f600:	b480      	push	{r7}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f60a:	2300      	movs	r3, #0
 800f60c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	3301      	adds	r3, #1
 800f612:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f61a:	d901      	bls.n	800f620 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f61c:	2303      	movs	r3, #3
 800f61e:	e01b      	b.n	800f658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	691b      	ldr	r3, [r3, #16]
 800f624:	2b00      	cmp	r3, #0
 800f626:	daf2      	bge.n	800f60e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f628:	2300      	movs	r3, #0
 800f62a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	019b      	lsls	r3, r3, #6
 800f630:	f043 0220 	orr.w	r2, r3, #32
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	3301      	adds	r3, #1
 800f63c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f644:	d901      	bls.n	800f64a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f646:	2303      	movs	r3, #3
 800f648:	e006      	b.n	800f658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	691b      	ldr	r3, [r3, #16]
 800f64e:	f003 0320 	and.w	r3, r3, #32
 800f652:	2b20      	cmp	r3, #32
 800f654:	d0f0      	beq.n	800f638 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3714      	adds	r7, #20
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f66c:	2300      	movs	r3, #0
 800f66e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	3301      	adds	r3, #1
 800f674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f67c:	d901      	bls.n	800f682 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f67e:	2303      	movs	r3, #3
 800f680:	e018      	b.n	800f6b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	691b      	ldr	r3, [r3, #16]
 800f686:	2b00      	cmp	r3, #0
 800f688:	daf2      	bge.n	800f670 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f68a:	2300      	movs	r3, #0
 800f68c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2210      	movs	r2, #16
 800f692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	3301      	adds	r3, #1
 800f698:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f6a0:	d901      	bls.n	800f6a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f6a2:	2303      	movs	r3, #3
 800f6a4:	e006      	b.n	800f6b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	691b      	ldr	r3, [r3, #16]
 800f6aa:	f003 0310 	and.w	r3, r3, #16
 800f6ae:	2b10      	cmp	r3, #16
 800f6b0:	d0f0      	beq.n	800f694 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3714      	adds	r7, #20
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b085      	sub	sp, #20
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	78fb      	ldrb	r3, [r7, #3]
 800f6da:	68f9      	ldr	r1, [r7, #12]
 800f6dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f6e0:	4313      	orrs	r3, r2
 800f6e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f6e4:	2300      	movs	r3, #0
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3714      	adds	r7, #20
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800f6f2:	b480      	push	{r7}
 800f6f4:	b087      	sub	sp, #28
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f704:	689b      	ldr	r3, [r3, #8]
 800f706:	f003 0306 	and.w	r3, r3, #6
 800f70a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d102      	bne.n	800f718 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f712:	2300      	movs	r3, #0
 800f714:	75fb      	strb	r3, [r7, #23]
 800f716:	e00a      	b.n	800f72e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2b02      	cmp	r3, #2
 800f71c:	d002      	beq.n	800f724 <USB_GetDevSpeed+0x32>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2b06      	cmp	r3, #6
 800f722:	d102      	bne.n	800f72a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f724:	2302      	movs	r3, #2
 800f726:	75fb      	strb	r3, [r7, #23]
 800f728:	e001      	b.n	800f72e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f72a:	230f      	movs	r3, #15
 800f72c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f72e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f730:	4618      	mov	r0, r3
 800f732:	371c      	adds	r7, #28
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr

0800f73c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b085      	sub	sp, #20
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	785b      	ldrb	r3, [r3, #1]
 800f754:	2b01      	cmp	r3, #1
 800f756:	d139      	bne.n	800f7cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f75e:	69da      	ldr	r2, [r3, #28]
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	f003 030f 	and.w	r3, r3, #15
 800f768:	2101      	movs	r1, #1
 800f76a:	fa01 f303 	lsl.w	r3, r1, r3
 800f76e:	b29b      	uxth	r3, r3
 800f770:	68f9      	ldr	r1, [r7, #12]
 800f772:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f776:	4313      	orrs	r3, r2
 800f778:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	015a      	lsls	r2, r3, #5
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	4413      	add	r3, r2
 800f782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d153      	bne.n	800f838 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	015a      	lsls	r2, r3, #5
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	4413      	add	r3, r2
 800f798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	689b      	ldr	r3, [r3, #8]
 800f7a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	791b      	ldrb	r3, [r3, #4]
 800f7aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f7ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	059b      	lsls	r3, r3, #22
 800f7b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f7b4:	431a      	orrs	r2, r3
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	0159      	lsls	r1, r3, #5
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	440b      	add	r3, r1
 800f7be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	4b20      	ldr	r3, [pc, #128]	@ (800f848 <USB_ActivateEndpoint+0x10c>)
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	600b      	str	r3, [r1, #0]
 800f7ca:	e035      	b.n	800f838 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f7d2:	69da      	ldr	r2, [r3, #28]
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	f003 030f 	and.w	r3, r3, #15
 800f7dc:	2101      	movs	r1, #1
 800f7de:	fa01 f303 	lsl.w	r3, r1, r3
 800f7e2:	041b      	lsls	r3, r3, #16
 800f7e4:	68f9      	ldr	r1, [r7, #12]
 800f7e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f7ea:	4313      	orrs	r3, r2
 800f7ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	015a      	lsls	r2, r3, #5
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f800:	2b00      	cmp	r3, #0
 800f802:	d119      	bne.n	800f838 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	015a      	lsls	r2, r3, #5
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	4413      	add	r3, r2
 800f80c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	689b      	ldr	r3, [r3, #8]
 800f816:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	791b      	ldrb	r3, [r3, #4]
 800f81e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f820:	430b      	orrs	r3, r1
 800f822:	431a      	orrs	r2, r3
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	0159      	lsls	r1, r3, #5
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	440b      	add	r3, r1
 800f82c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f830:	4619      	mov	r1, r3
 800f832:	4b05      	ldr	r3, [pc, #20]	@ (800f848 <USB_ActivateEndpoint+0x10c>)
 800f834:	4313      	orrs	r3, r2
 800f836:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f838:	2300      	movs	r3, #0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3714      	adds	r7, #20
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr
 800f846:	bf00      	nop
 800f848:	10008000 	.word	0x10008000

0800f84c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b085      	sub	sp, #20
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	785b      	ldrb	r3, [r3, #1]
 800f864:	2b01      	cmp	r3, #1
 800f866:	d161      	bne.n	800f92c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	015a      	lsls	r2, r3, #5
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	4413      	add	r3, r2
 800f870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f87a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f87e:	d11f      	bne.n	800f8c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	015a      	lsls	r2, r3, #5
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	4413      	add	r3, r2
 800f888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	0151      	lsls	r1, r2, #5
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	440a      	add	r2, r1
 800f896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f89a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f89e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	015a      	lsls	r2, r3, #5
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	68ba      	ldr	r2, [r7, #8]
 800f8b0:	0151      	lsls	r1, r2, #5
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	440a      	add	r2, r1
 800f8b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f8ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f8be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	f003 030f 	and.w	r3, r3, #15
 800f8d0:	2101      	movs	r1, #1
 800f8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	43db      	mvns	r3, r3
 800f8da:	68f9      	ldr	r1, [r7, #12]
 800f8dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f8e0:	4013      	ands	r3, r2
 800f8e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8ea:	69da      	ldr	r2, [r3, #28]
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	f003 030f 	and.w	r3, r3, #15
 800f8f4:	2101      	movs	r1, #1
 800f8f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	43db      	mvns	r3, r3
 800f8fe:	68f9      	ldr	r1, [r7, #12]
 800f900:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f904:	4013      	ands	r3, r2
 800f906:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	015a      	lsls	r2, r3, #5
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	4413      	add	r3, r2
 800f910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	0159      	lsls	r1, r3, #5
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	440b      	add	r3, r1
 800f91e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f922:	4619      	mov	r1, r3
 800f924:	4b35      	ldr	r3, [pc, #212]	@ (800f9fc <USB_DeactivateEndpoint+0x1b0>)
 800f926:	4013      	ands	r3, r2
 800f928:	600b      	str	r3, [r1, #0]
 800f92a:	e060      	b.n	800f9ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	015a      	lsls	r2, r3, #5
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	4413      	add	r3, r2
 800f934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f93e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f942:	d11f      	bne.n	800f984 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	015a      	lsls	r2, r3, #5
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	4413      	add	r3, r2
 800f94c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	68ba      	ldr	r2, [r7, #8]
 800f954:	0151      	lsls	r1, r2, #5
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	440a      	add	r2, r1
 800f95a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f95e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f962:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	015a      	lsls	r2, r3, #5
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	4413      	add	r3, r2
 800f96c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	68ba      	ldr	r2, [r7, #8]
 800f974:	0151      	lsls	r1, r2, #5
 800f976:	68fa      	ldr	r2, [r7, #12]
 800f978:	440a      	add	r2, r1
 800f97a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f97e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f982:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f98a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	f003 030f 	and.w	r3, r3, #15
 800f994:	2101      	movs	r1, #1
 800f996:	fa01 f303 	lsl.w	r3, r1, r3
 800f99a:	041b      	lsls	r3, r3, #16
 800f99c:	43db      	mvns	r3, r3
 800f99e:	68f9      	ldr	r1, [r7, #12]
 800f9a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f9a4:	4013      	ands	r3, r2
 800f9a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f9ae:	69da      	ldr	r2, [r3, #28]
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	f003 030f 	and.w	r3, r3, #15
 800f9b8:	2101      	movs	r1, #1
 800f9ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f9be:	041b      	lsls	r3, r3, #16
 800f9c0:	43db      	mvns	r3, r3
 800f9c2:	68f9      	ldr	r1, [r7, #12]
 800f9c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f9c8:	4013      	ands	r3, r2
 800f9ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	015a      	lsls	r2, r3, #5
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	0159      	lsls	r1, r3, #5
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	440b      	add	r3, r1
 800f9e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	4b05      	ldr	r3, [pc, #20]	@ (800fa00 <USB_DeactivateEndpoint+0x1b4>)
 800f9ea:	4013      	ands	r3, r2
 800f9ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3714      	adds	r7, #20
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr
 800f9fc:	ec337800 	.word	0xec337800
 800fa00:	eff37800 	.word	0xeff37800

0800fa04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08a      	sub	sp, #40	@ 0x28
 800fa08:	af02      	add	r7, sp, #8
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	4613      	mov	r3, r2
 800fa10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	785b      	ldrb	r3, [r3, #1]
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	f040 8185 	bne.w	800fd30 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	691b      	ldr	r3, [r3, #16]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d132      	bne.n	800fa94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	015a      	lsls	r2, r3, #5
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	4413      	add	r3, r2
 800fa36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa3a:	691a      	ldr	r2, [r3, #16]
 800fa3c:	69bb      	ldr	r3, [r7, #24]
 800fa3e:	0159      	lsls	r1, r3, #5
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	440b      	add	r3, r1
 800fa44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4ba7      	ldr	r3, [pc, #668]	@ (800fce8 <USB_EPStartXfer+0x2e4>)
 800fa4c:	4013      	ands	r3, r2
 800fa4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa50:	69bb      	ldr	r3, [r7, #24]
 800fa52:	015a      	lsls	r2, r3, #5
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	4413      	add	r3, r2
 800fa58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	69ba      	ldr	r2, [r7, #24]
 800fa60:	0151      	lsls	r1, r2, #5
 800fa62:	69fa      	ldr	r2, [r7, #28]
 800fa64:	440a      	add	r2, r1
 800fa66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fa6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fa6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	015a      	lsls	r2, r3, #5
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	4413      	add	r3, r2
 800fa78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa7c:	691a      	ldr	r2, [r3, #16]
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	0159      	lsls	r1, r3, #5
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	440b      	add	r3, r1
 800fa86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	4b97      	ldr	r3, [pc, #604]	@ (800fcec <USB_EPStartXfer+0x2e8>)
 800fa8e:	4013      	ands	r3, r2
 800fa90:	610b      	str	r3, [r1, #16]
 800fa92:	e097      	b.n	800fbc4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa94:	69bb      	ldr	r3, [r7, #24]
 800fa96:	015a      	lsls	r2, r3, #5
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	4413      	add	r3, r2
 800fa9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800faa0:	691a      	ldr	r2, [r3, #16]
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	0159      	lsls	r1, r3, #5
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	440b      	add	r3, r1
 800faaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800faae:	4619      	mov	r1, r3
 800fab0:	4b8e      	ldr	r3, [pc, #568]	@ (800fcec <USB_EPStartXfer+0x2e8>)
 800fab2:	4013      	ands	r3, r2
 800fab4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	015a      	lsls	r2, r3, #5
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	4413      	add	r3, r2
 800fabe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fac2:	691a      	ldr	r2, [r3, #16]
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	0159      	lsls	r1, r3, #5
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	440b      	add	r3, r1
 800facc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fad0:	4619      	mov	r1, r3
 800fad2:	4b85      	ldr	r3, [pc, #532]	@ (800fce8 <USB_EPStartXfer+0x2e4>)
 800fad4:	4013      	ands	r3, r2
 800fad6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800fad8:	69bb      	ldr	r3, [r7, #24]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d11a      	bne.n	800fb14 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	691a      	ldr	r2, [r3, #16]
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d903      	bls.n	800faf2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	689a      	ldr	r2, [r3, #8]
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	015a      	lsls	r2, r3, #5
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	4413      	add	r3, r2
 800fafa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fafe:	691b      	ldr	r3, [r3, #16]
 800fb00:	69ba      	ldr	r2, [r7, #24]
 800fb02:	0151      	lsls	r1, r2, #5
 800fb04:	69fa      	ldr	r2, [r7, #28]
 800fb06:	440a      	add	r2, r1
 800fb08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fb0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fb10:	6113      	str	r3, [r2, #16]
 800fb12:	e044      	b.n	800fb9e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	691a      	ldr	r2, [r3, #16]
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	1e5a      	subs	r2, r3, #1
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	689b      	ldr	r3, [r3, #8]
 800fb24:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb28:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	015a      	lsls	r2, r3, #5
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	4413      	add	r3, r2
 800fb32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb36:	691a      	ldr	r2, [r3, #16]
 800fb38:	8afb      	ldrh	r3, [r7, #22]
 800fb3a:	04d9      	lsls	r1, r3, #19
 800fb3c:	4b6c      	ldr	r3, [pc, #432]	@ (800fcf0 <USB_EPStartXfer+0x2ec>)
 800fb3e:	400b      	ands	r3, r1
 800fb40:	69b9      	ldr	r1, [r7, #24]
 800fb42:	0148      	lsls	r0, r1, #5
 800fb44:	69f9      	ldr	r1, [r7, #28]
 800fb46:	4401      	add	r1, r0
 800fb48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	791b      	ldrb	r3, [r3, #4]
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d122      	bne.n	800fb9e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	015a      	lsls	r2, r3, #5
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	4413      	add	r3, r2
 800fb60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb64:	691b      	ldr	r3, [r3, #16]
 800fb66:	69ba      	ldr	r2, [r7, #24]
 800fb68:	0151      	lsls	r1, r2, #5
 800fb6a:	69fa      	ldr	r2, [r7, #28]
 800fb6c:	440a      	add	r2, r1
 800fb6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fb72:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800fb76:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	015a      	lsls	r2, r3, #5
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	4413      	add	r3, r2
 800fb80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb84:	691a      	ldr	r2, [r3, #16]
 800fb86:	8afb      	ldrh	r3, [r7, #22]
 800fb88:	075b      	lsls	r3, r3, #29
 800fb8a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800fb8e:	69b9      	ldr	r1, [r7, #24]
 800fb90:	0148      	lsls	r0, r1, #5
 800fb92:	69f9      	ldr	r1, [r7, #28]
 800fb94:	4401      	add	r1, r0
 800fb96:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fb9e:	69bb      	ldr	r3, [r7, #24]
 800fba0:	015a      	lsls	r2, r3, #5
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	4413      	add	r3, r2
 800fba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbaa:	691a      	ldr	r2, [r3, #16]
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	691b      	ldr	r3, [r3, #16]
 800fbb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fbb4:	69b9      	ldr	r1, [r7, #24]
 800fbb6:	0148      	lsls	r0, r1, #5
 800fbb8:	69f9      	ldr	r1, [r7, #28]
 800fbba:	4401      	add	r1, r0
 800fbbc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d14b      	bne.n	800fc62 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	69db      	ldr	r3, [r3, #28]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d009      	beq.n	800fbe6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fbd2:	69bb      	ldr	r3, [r7, #24]
 800fbd4:	015a      	lsls	r2, r3, #5
 800fbd6:	69fb      	ldr	r3, [r7, #28]
 800fbd8:	4413      	add	r3, r2
 800fbda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbde:	461a      	mov	r2, r3
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	69db      	ldr	r3, [r3, #28]
 800fbe4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	791b      	ldrb	r3, [r3, #4]
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d128      	bne.n	800fc40 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d110      	bne.n	800fc20 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	015a      	lsls	r2, r3, #5
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	4413      	add	r3, r2
 800fc06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	69ba      	ldr	r2, [r7, #24]
 800fc0e:	0151      	lsls	r1, r2, #5
 800fc10:	69fa      	ldr	r2, [r7, #28]
 800fc12:	440a      	add	r2, r1
 800fc14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fc1c:	6013      	str	r3, [r2, #0]
 800fc1e:	e00f      	b.n	800fc40 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	015a      	lsls	r2, r3, #5
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	4413      	add	r3, r2
 800fc28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	69ba      	ldr	r2, [r7, #24]
 800fc30:	0151      	lsls	r1, r2, #5
 800fc32:	69fa      	ldr	r2, [r7, #28]
 800fc34:	440a      	add	r2, r1
 800fc36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fc3e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	015a      	lsls	r2, r3, #5
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	4413      	add	r3, r2
 800fc48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	69ba      	ldr	r2, [r7, #24]
 800fc50:	0151      	lsls	r1, r2, #5
 800fc52:	69fa      	ldr	r2, [r7, #28]
 800fc54:	440a      	add	r2, r1
 800fc56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fc5e:	6013      	str	r3, [r2, #0]
 800fc60:	e169      	b.n	800ff36 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	015a      	lsls	r2, r3, #5
 800fc66:	69fb      	ldr	r3, [r7, #28]
 800fc68:	4413      	add	r3, r2
 800fc6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	69ba      	ldr	r2, [r7, #24]
 800fc72:	0151      	lsls	r1, r2, #5
 800fc74:	69fa      	ldr	r2, [r7, #28]
 800fc76:	440a      	add	r2, r1
 800fc78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc7c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fc80:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	791b      	ldrb	r3, [r3, #4]
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d015      	beq.n	800fcb6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	691b      	ldr	r3, [r3, #16]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	f000 8151 	beq.w	800ff36 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	f003 030f 	and.w	r3, r3, #15
 800fca4:	2101      	movs	r1, #1
 800fca6:	fa01 f303 	lsl.w	r3, r1, r3
 800fcaa:	69f9      	ldr	r1, [r7, #28]
 800fcac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	634b      	str	r3, [r1, #52]	@ 0x34
 800fcb4:	e13f      	b.n	800ff36 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d116      	bne.n	800fcf4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fcc6:	69bb      	ldr	r3, [r7, #24]
 800fcc8:	015a      	lsls	r2, r3, #5
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	4413      	add	r3, r2
 800fcce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	69ba      	ldr	r2, [r7, #24]
 800fcd6:	0151      	lsls	r1, r2, #5
 800fcd8:	69fa      	ldr	r2, [r7, #28]
 800fcda:	440a      	add	r2, r1
 800fcdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fce0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fce4:	6013      	str	r3, [r2, #0]
 800fce6:	e015      	b.n	800fd14 <USB_EPStartXfer+0x310>
 800fce8:	e007ffff 	.word	0xe007ffff
 800fcec:	fff80000 	.word	0xfff80000
 800fcf0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fcf4:	69bb      	ldr	r3, [r7, #24]
 800fcf6:	015a      	lsls	r2, r3, #5
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	4413      	add	r3, r2
 800fcfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	69ba      	ldr	r2, [r7, #24]
 800fd04:	0151      	lsls	r1, r2, #5
 800fd06:	69fa      	ldr	r2, [r7, #28]
 800fd08:	440a      	add	r2, r1
 800fd0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fd12:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	68d9      	ldr	r1, [r3, #12]
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	781a      	ldrb	r2, [r3, #0]
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	691b      	ldr	r3, [r3, #16]
 800fd20:	b298      	uxth	r0, r3
 800fd22:	79fb      	ldrb	r3, [r7, #7]
 800fd24:	9300      	str	r3, [sp, #0]
 800fd26:	4603      	mov	r3, r0
 800fd28:	68f8      	ldr	r0, [r7, #12]
 800fd2a:	f000 f9b9 	bl	80100a0 <USB_WritePacket>
 800fd2e:	e102      	b.n	800ff36 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	015a      	lsls	r2, r3, #5
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	4413      	add	r3, r2
 800fd38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd3c:	691a      	ldr	r2, [r3, #16]
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	0159      	lsls	r1, r3, #5
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	440b      	add	r3, r1
 800fd46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	4b7c      	ldr	r3, [pc, #496]	@ (800ff40 <USB_EPStartXfer+0x53c>)
 800fd4e:	4013      	ands	r3, r2
 800fd50:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	015a      	lsls	r2, r3, #5
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	4413      	add	r3, r2
 800fd5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd5e:	691a      	ldr	r2, [r3, #16]
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	0159      	lsls	r1, r3, #5
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	440b      	add	r3, r1
 800fd68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	4b75      	ldr	r3, [pc, #468]	@ (800ff44 <USB_EPStartXfer+0x540>)
 800fd70:	4013      	ands	r3, r2
 800fd72:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800fd74:	69bb      	ldr	r3, [r7, #24]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d12f      	bne.n	800fdda <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	691b      	ldr	r3, [r3, #16]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d003      	beq.n	800fd8a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	689a      	ldr	r2, [r3, #8]
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	689a      	ldr	r2, [r3, #8]
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	015a      	lsls	r2, r3, #5
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	4413      	add	r3, r2
 800fd9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd9e:	691a      	ldr	r2, [r3, #16]
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	6a1b      	ldr	r3, [r3, #32]
 800fda4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fda8:	69b9      	ldr	r1, [r7, #24]
 800fdaa:	0148      	lsls	r0, r1, #5
 800fdac:	69f9      	ldr	r1, [r7, #28]
 800fdae:	4401      	add	r1, r0
 800fdb0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fdb8:	69bb      	ldr	r3, [r7, #24]
 800fdba:	015a      	lsls	r2, r3, #5
 800fdbc:	69fb      	ldr	r3, [r7, #28]
 800fdbe:	4413      	add	r3, r2
 800fdc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	69ba      	ldr	r2, [r7, #24]
 800fdc8:	0151      	lsls	r1, r2, #5
 800fdca:	69fa      	ldr	r2, [r7, #28]
 800fdcc:	440a      	add	r2, r1
 800fdce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fdd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fdd6:	6113      	str	r3, [r2, #16]
 800fdd8:	e05f      	b.n	800fe9a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	691b      	ldr	r3, [r3, #16]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d123      	bne.n	800fe2a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	015a      	lsls	r2, r3, #5
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	4413      	add	r3, r2
 800fdea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdee:	691a      	ldr	r2, [r3, #16]
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdf8:	69b9      	ldr	r1, [r7, #24]
 800fdfa:	0148      	lsls	r0, r1, #5
 800fdfc:	69f9      	ldr	r1, [r7, #28]
 800fdfe:	4401      	add	r1, r0
 800fe00:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fe04:	4313      	orrs	r3, r2
 800fe06:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	015a      	lsls	r2, r3, #5
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	4413      	add	r3, r2
 800fe10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe14:	691b      	ldr	r3, [r3, #16]
 800fe16:	69ba      	ldr	r2, [r7, #24]
 800fe18:	0151      	lsls	r1, r2, #5
 800fe1a:	69fa      	ldr	r2, [r7, #28]
 800fe1c:	440a      	add	r2, r1
 800fe1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fe22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fe26:	6113      	str	r3, [r2, #16]
 800fe28:	e037      	b.n	800fe9a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	691a      	ldr	r2, [r3, #16]
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	689b      	ldr	r3, [r3, #8]
 800fe32:	4413      	add	r3, r2
 800fe34:	1e5a      	subs	r2, r3, #1
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe3e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	689b      	ldr	r3, [r3, #8]
 800fe44:	8afa      	ldrh	r2, [r7, #22]
 800fe46:	fb03 f202 	mul.w	r2, r3, r2
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	015a      	lsls	r2, r3, #5
 800fe52:	69fb      	ldr	r3, [r7, #28]
 800fe54:	4413      	add	r3, r2
 800fe56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe5a:	691a      	ldr	r2, [r3, #16]
 800fe5c:	8afb      	ldrh	r3, [r7, #22]
 800fe5e:	04d9      	lsls	r1, r3, #19
 800fe60:	4b39      	ldr	r3, [pc, #228]	@ (800ff48 <USB_EPStartXfer+0x544>)
 800fe62:	400b      	ands	r3, r1
 800fe64:	69b9      	ldr	r1, [r7, #24]
 800fe66:	0148      	lsls	r0, r1, #5
 800fe68:	69f9      	ldr	r1, [r7, #28]
 800fe6a:	4401      	add	r1, r0
 800fe6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fe70:	4313      	orrs	r3, r2
 800fe72:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	015a      	lsls	r2, r3, #5
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe80:	691a      	ldr	r2, [r3, #16]
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	6a1b      	ldr	r3, [r3, #32]
 800fe86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe8a:	69b9      	ldr	r1, [r7, #24]
 800fe8c:	0148      	lsls	r0, r1, #5
 800fe8e:	69f9      	ldr	r1, [r7, #28]
 800fe90:	4401      	add	r1, r0
 800fe92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fe96:	4313      	orrs	r3, r2
 800fe98:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800fe9a:	79fb      	ldrb	r3, [r7, #7]
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d10d      	bne.n	800febc <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d009      	beq.n	800febc <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	68d9      	ldr	r1, [r3, #12]
 800feac:	69bb      	ldr	r3, [r7, #24]
 800feae:	015a      	lsls	r2, r3, #5
 800feb0:	69fb      	ldr	r3, [r7, #28]
 800feb2:	4413      	add	r3, r2
 800feb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800feb8:	460a      	mov	r2, r1
 800feba:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	791b      	ldrb	r3, [r3, #4]
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d128      	bne.n	800ff16 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d110      	bne.n	800fef6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fed4:	69bb      	ldr	r3, [r7, #24]
 800fed6:	015a      	lsls	r2, r3, #5
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	4413      	add	r3, r2
 800fedc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	69ba      	ldr	r2, [r7, #24]
 800fee4:	0151      	lsls	r1, r2, #5
 800fee6:	69fa      	ldr	r2, [r7, #28]
 800fee8:	440a      	add	r2, r1
 800feea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800feee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fef2:	6013      	str	r3, [r2, #0]
 800fef4:	e00f      	b.n	800ff16 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	015a      	lsls	r2, r3, #5
 800fefa:	69fb      	ldr	r3, [r7, #28]
 800fefc:	4413      	add	r3, r2
 800fefe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	69ba      	ldr	r2, [r7, #24]
 800ff06:	0151      	lsls	r1, r2, #5
 800ff08:	69fa      	ldr	r2, [r7, #28]
 800ff0a:	440a      	add	r2, r1
 800ff0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ff10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ff14:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	015a      	lsls	r2, r3, #5
 800ff1a:	69fb      	ldr	r3, [r7, #28]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	69ba      	ldr	r2, [r7, #24]
 800ff26:	0151      	lsls	r1, r2, #5
 800ff28:	69fa      	ldr	r2, [r7, #28]
 800ff2a:	440a      	add	r2, r1
 800ff2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ff30:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ff34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3720      	adds	r7, #32
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	fff80000 	.word	0xfff80000
 800ff44:	e007ffff 	.word	0xe007ffff
 800ff48:	1ff80000 	.word	0x1ff80000

0800ff4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b087      	sub	sp, #28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ff56:	2300      	movs	r3, #0
 800ff58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	785b      	ldrb	r3, [r3, #1]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d14a      	bne.n	8010000 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	015a      	lsls	r2, r3, #5
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	4413      	add	r3, r2
 800ff74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ff7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ff82:	f040 8086 	bne.w	8010092 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	015a      	lsls	r2, r3, #5
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	4413      	add	r3, r2
 800ff90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	683a      	ldr	r2, [r7, #0]
 800ff98:	7812      	ldrb	r2, [r2, #0]
 800ff9a:	0151      	lsls	r1, r2, #5
 800ff9c:	693a      	ldr	r2, [r7, #16]
 800ff9e:	440a      	add	r2, r1
 800ffa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffa4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ffa8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	015a      	lsls	r2, r3, #5
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	683a      	ldr	r2, [r7, #0]
 800ffbc:	7812      	ldrb	r2, [r2, #0]
 800ffbe:	0151      	lsls	r1, r2, #5
 800ffc0:	693a      	ldr	r2, [r7, #16]
 800ffc2:	440a      	add	r2, r1
 800ffc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ffcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d902      	bls.n	800ffe4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	75fb      	strb	r3, [r7, #23]
          break;
 800ffe2:	e056      	b.n	8010092 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	015a      	lsls	r2, r3, #5
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	4413      	add	r3, r2
 800ffee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fffc:	d0e7      	beq.n	800ffce <USB_EPStopXfer+0x82>
 800fffe:	e048      	b.n	8010092 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	015a      	lsls	r2, r3, #5
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	4413      	add	r3, r2
 801000a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010018:	d13b      	bne.n	8010092 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	015a      	lsls	r2, r3, #5
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	4413      	add	r3, r2
 8010024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	683a      	ldr	r2, [r7, #0]
 801002c:	7812      	ldrb	r2, [r2, #0]
 801002e:	0151      	lsls	r1, r2, #5
 8010030:	693a      	ldr	r2, [r7, #16]
 8010032:	440a      	add	r2, r1
 8010034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010038:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801003c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	015a      	lsls	r2, r3, #5
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	4413      	add	r3, r2
 8010048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	683a      	ldr	r2, [r7, #0]
 8010050:	7812      	ldrb	r2, [r2, #0]
 8010052:	0151      	lsls	r1, r2, #5
 8010054:	693a      	ldr	r2, [r7, #16]
 8010056:	440a      	add	r2, r1
 8010058:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801005c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010060:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	3301      	adds	r3, #1
 8010066:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801006e:	4293      	cmp	r3, r2
 8010070:	d902      	bls.n	8010078 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010072:	2301      	movs	r3, #1
 8010074:	75fb      	strb	r3, [r7, #23]
          break;
 8010076:	e00c      	b.n	8010092 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	015a      	lsls	r2, r3, #5
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	4413      	add	r3, r2
 8010082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801008c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010090:	d0e7      	beq.n	8010062 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010092:	7dfb      	ldrb	r3, [r7, #23]
}
 8010094:	4618      	mov	r0, r3
 8010096:	371c      	adds	r7, #28
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr

080100a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b089      	sub	sp, #36	@ 0x24
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	4611      	mov	r1, r2
 80100ac:	461a      	mov	r2, r3
 80100ae:	460b      	mov	r3, r1
 80100b0:	71fb      	strb	r3, [r7, #7]
 80100b2:	4613      	mov	r3, r2
 80100b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80100be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d123      	bne.n	801010e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80100c6:	88bb      	ldrh	r3, [r7, #4]
 80100c8:	3303      	adds	r3, #3
 80100ca:	089b      	lsrs	r3, r3, #2
 80100cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80100ce:	2300      	movs	r3, #0
 80100d0:	61bb      	str	r3, [r7, #24]
 80100d2:	e018      	b.n	8010106 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80100d4:	79fb      	ldrb	r3, [r7, #7]
 80100d6:	031a      	lsls	r2, r3, #12
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	4413      	add	r3, r2
 80100dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80100e0:	461a      	mov	r2, r3
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	3301      	adds	r3, #1
 80100ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80100ee:	69fb      	ldr	r3, [r7, #28]
 80100f0:	3301      	adds	r3, #1
 80100f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	3301      	adds	r3, #1
 80100f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	3301      	adds	r3, #1
 80100fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	3301      	adds	r3, #1
 8010104:	61bb      	str	r3, [r7, #24]
 8010106:	69ba      	ldr	r2, [r7, #24]
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	429a      	cmp	r2, r3
 801010c:	d3e2      	bcc.n	80100d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801010e:	2300      	movs	r3, #0
}
 8010110:	4618      	mov	r0, r3
 8010112:	3724      	adds	r7, #36	@ 0x24
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801011c:	b480      	push	{r7}
 801011e:	b08b      	sub	sp, #44	@ 0x2c
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	4613      	mov	r3, r2
 8010128:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010132:	88fb      	ldrh	r3, [r7, #6]
 8010134:	089b      	lsrs	r3, r3, #2
 8010136:	b29b      	uxth	r3, r3
 8010138:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801013a:	88fb      	ldrh	r3, [r7, #6]
 801013c:	f003 0303 	and.w	r3, r3, #3
 8010140:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010142:	2300      	movs	r3, #0
 8010144:	623b      	str	r3, [r7, #32]
 8010146:	e014      	b.n	8010172 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010152:	601a      	str	r2, [r3, #0]
    pDest++;
 8010154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010156:	3301      	adds	r3, #1
 8010158:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801015a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801015c:	3301      	adds	r3, #1
 801015e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010162:	3301      	adds	r3, #1
 8010164:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010168:	3301      	adds	r3, #1
 801016a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801016c:	6a3b      	ldr	r3, [r7, #32]
 801016e:	3301      	adds	r3, #1
 8010170:	623b      	str	r3, [r7, #32]
 8010172:	6a3a      	ldr	r2, [r7, #32]
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	429a      	cmp	r2, r3
 8010178:	d3e6      	bcc.n	8010148 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801017a:	8bfb      	ldrh	r3, [r7, #30]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d01e      	beq.n	80101be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010180:	2300      	movs	r3, #0
 8010182:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010184:	69bb      	ldr	r3, [r7, #24]
 8010186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801018a:	461a      	mov	r2, r3
 801018c:	f107 0310 	add.w	r3, r7, #16
 8010190:	6812      	ldr	r2, [r2, #0]
 8010192:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010194:	693a      	ldr	r2, [r7, #16]
 8010196:	6a3b      	ldr	r3, [r7, #32]
 8010198:	b2db      	uxtb	r3, r3
 801019a:	00db      	lsls	r3, r3, #3
 801019c:	fa22 f303 	lsr.w	r3, r2, r3
 80101a0:	b2da      	uxtb	r2, r3
 80101a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a4:	701a      	strb	r2, [r3, #0]
      i++;
 80101a6:	6a3b      	ldr	r3, [r7, #32]
 80101a8:	3301      	adds	r3, #1
 80101aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80101ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ae:	3301      	adds	r3, #1
 80101b0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80101b2:	8bfb      	ldrh	r3, [r7, #30]
 80101b4:	3b01      	subs	r3, #1
 80101b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80101b8:	8bfb      	ldrh	r3, [r7, #30]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d1ea      	bne.n	8010194 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80101be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	372c      	adds	r7, #44	@ 0x2c
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr

080101cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b085      	sub	sp, #20
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	785b      	ldrb	r3, [r3, #1]
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d12c      	bne.n	8010242 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	015a      	lsls	r2, r3, #5
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	4413      	add	r3, r2
 80101f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	db12      	blt.n	8010220 <USB_EPSetStall+0x54>
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00f      	beq.n	8010220 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	015a      	lsls	r2, r3, #5
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	4413      	add	r3, r2
 8010208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	0151      	lsls	r1, r2, #5
 8010212:	68fa      	ldr	r2, [r7, #12]
 8010214:	440a      	add	r2, r1
 8010216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801021a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801021e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	015a      	lsls	r2, r3, #5
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	4413      	add	r3, r2
 8010228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	0151      	lsls	r1, r2, #5
 8010232:	68fa      	ldr	r2, [r7, #12]
 8010234:	440a      	add	r2, r1
 8010236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801023a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801023e:	6013      	str	r3, [r2, #0]
 8010240:	e02b      	b.n	801029a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	015a      	lsls	r2, r3, #5
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	4413      	add	r3, r2
 801024a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	db12      	blt.n	801027a <USB_EPSetStall+0xae>
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00f      	beq.n	801027a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	015a      	lsls	r2, r3, #5
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	4413      	add	r3, r2
 8010262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	68ba      	ldr	r2, [r7, #8]
 801026a:	0151      	lsls	r1, r2, #5
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	440a      	add	r2, r1
 8010270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010274:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010278:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	015a      	lsls	r2, r3, #5
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	4413      	add	r3, r2
 8010282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	68ba      	ldr	r2, [r7, #8]
 801028a:	0151      	lsls	r1, r2, #5
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	440a      	add	r2, r1
 8010290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010294:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010298:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3714      	adds	r7, #20
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	785b      	ldrb	r3, [r3, #1]
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d128      	bne.n	8010316 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	015a      	lsls	r2, r3, #5
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	4413      	add	r3, r2
 80102cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	68ba      	ldr	r2, [r7, #8]
 80102d4:	0151      	lsls	r1, r2, #5
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	440a      	add	r2, r1
 80102da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80102de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80102e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	791b      	ldrb	r3, [r3, #4]
 80102e8:	2b03      	cmp	r3, #3
 80102ea:	d003      	beq.n	80102f4 <USB_EPClearStall+0x4c>
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	791b      	ldrb	r3, [r3, #4]
 80102f0:	2b02      	cmp	r3, #2
 80102f2:	d138      	bne.n	8010366 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	015a      	lsls	r2, r3, #5
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	4413      	add	r3, r2
 80102fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	68ba      	ldr	r2, [r7, #8]
 8010304:	0151      	lsls	r1, r2, #5
 8010306:	68fa      	ldr	r2, [r7, #12]
 8010308:	440a      	add	r2, r1
 801030a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801030e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010312:	6013      	str	r3, [r2, #0]
 8010314:	e027      	b.n	8010366 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	015a      	lsls	r2, r3, #5
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	4413      	add	r3, r2
 801031e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	68ba      	ldr	r2, [r7, #8]
 8010326:	0151      	lsls	r1, r2, #5
 8010328:	68fa      	ldr	r2, [r7, #12]
 801032a:	440a      	add	r2, r1
 801032c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010330:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010334:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	791b      	ldrb	r3, [r3, #4]
 801033a:	2b03      	cmp	r3, #3
 801033c:	d003      	beq.n	8010346 <USB_EPClearStall+0x9e>
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	791b      	ldrb	r3, [r3, #4]
 8010342:	2b02      	cmp	r3, #2
 8010344:	d10f      	bne.n	8010366 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	015a      	lsls	r2, r3, #5
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	4413      	add	r3, r2
 801034e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	0151      	lsls	r1, r2, #5
 8010358:	68fa      	ldr	r2, [r7, #12]
 801035a:	440a      	add	r2, r1
 801035c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010364:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010366:	2300      	movs	r3, #0
}
 8010368:	4618      	mov	r0, r3
 801036a:	3714      	adds	r7, #20
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr

08010374 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	460b      	mov	r3, r1
 801037e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	68fa      	ldr	r2, [r7, #12]
 801038e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010392:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010396:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801039e:	681a      	ldr	r2, [r3, #0]
 80103a0:	78fb      	ldrb	r3, [r7, #3]
 80103a2:	011b      	lsls	r3, r3, #4
 80103a4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80103a8:	68f9      	ldr	r1, [r7, #12]
 80103aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80103ae:	4313      	orrs	r3, r2
 80103b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80103b2:	2300      	movs	r3, #0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3714      	adds	r7, #20
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr

080103c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80103c0:	b480      	push	{r7}
 80103c2:	b085      	sub	sp, #20
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	68fa      	ldr	r2, [r7, #12]
 80103d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80103da:	f023 0303 	bic.w	r3, r3, #3
 80103de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	68fa      	ldr	r2, [r7, #12]
 80103ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80103ee:	f023 0302 	bic.w	r3, r3, #2
 80103f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80103f4:	2300      	movs	r3, #0
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3714      	adds	r7, #20
 80103fa:	46bd      	mov	sp, r7
 80103fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010400:	4770      	bx	lr

08010402 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010402:	b480      	push	{r7}
 8010404:	b085      	sub	sp, #20
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	68fa      	ldr	r2, [r7, #12]
 8010418:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801041c:	f023 0303 	bic.w	r3, r3, #3
 8010420:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010430:	f043 0302 	orr.w	r3, r3, #2
 8010434:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010436:	2300      	movs	r3, #0
}
 8010438:	4618      	mov	r0, r3
 801043a:	3714      	adds	r7, #20
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010444:	b480      	push	{r7}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	695b      	ldr	r3, [r3, #20]
 8010450:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	699b      	ldr	r3, [r3, #24]
 8010456:	68fa      	ldr	r2, [r7, #12]
 8010458:	4013      	ands	r3, r2
 801045a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801045c:	68fb      	ldr	r3, [r7, #12]
}
 801045e:	4618      	mov	r0, r3
 8010460:	3714      	adds	r7, #20
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr

0801046a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801046a:	b480      	push	{r7}
 801046c:	b085      	sub	sp, #20
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801047c:	699b      	ldr	r3, [r3, #24]
 801047e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010486:	69db      	ldr	r3, [r3, #28]
 8010488:	68ba      	ldr	r2, [r7, #8]
 801048a:	4013      	ands	r3, r2
 801048c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	0c1b      	lsrs	r3, r3, #16
}
 8010492:	4618      	mov	r0, r3
 8010494:	3714      	adds	r7, #20
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801049e:	b480      	push	{r7}
 80104a0:	b085      	sub	sp, #20
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104b0:	699b      	ldr	r3, [r3, #24]
 80104b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104ba:	69db      	ldr	r3, [r3, #28]
 80104bc:	68ba      	ldr	r2, [r7, #8]
 80104be:	4013      	ands	r3, r2
 80104c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	b29b      	uxth	r3, r3
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3714      	adds	r7, #20
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr

080104d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80104d2:	b480      	push	{r7}
 80104d4:	b085      	sub	sp, #20
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	460b      	mov	r3, r1
 80104dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80104e2:	78fb      	ldrb	r3, [r7, #3]
 80104e4:	015a      	lsls	r2, r3, #5
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	4413      	add	r3, r2
 80104ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104ee:	689b      	ldr	r3, [r3, #8]
 80104f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104f8:	695b      	ldr	r3, [r3, #20]
 80104fa:	68ba      	ldr	r2, [r7, #8]
 80104fc:	4013      	ands	r3, r2
 80104fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010500:	68bb      	ldr	r3, [r7, #8]
}
 8010502:	4618      	mov	r0, r3
 8010504:	3714      	adds	r7, #20
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr

0801050e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801050e:	b480      	push	{r7}
 8010510:	b087      	sub	sp, #28
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
 8010516:	460b      	mov	r3, r1
 8010518:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010524:	691b      	ldr	r3, [r3, #16]
 8010526:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801052e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010530:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010532:	78fb      	ldrb	r3, [r7, #3]
 8010534:	f003 030f 	and.w	r3, r3, #15
 8010538:	68fa      	ldr	r2, [r7, #12]
 801053a:	fa22 f303 	lsr.w	r3, r2, r3
 801053e:	01db      	lsls	r3, r3, #7
 8010540:	b2db      	uxtb	r3, r3
 8010542:	693a      	ldr	r2, [r7, #16]
 8010544:	4313      	orrs	r3, r2
 8010546:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010548:	78fb      	ldrb	r3, [r7, #3]
 801054a:	015a      	lsls	r2, r3, #5
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	4413      	add	r3, r2
 8010550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	693a      	ldr	r2, [r7, #16]
 8010558:	4013      	ands	r3, r2
 801055a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801055c:	68bb      	ldr	r3, [r7, #8]
}
 801055e:	4618      	mov	r0, r3
 8010560:	371c      	adds	r7, #28
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr

0801056a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801056a:	b480      	push	{r7}
 801056c:	b083      	sub	sp, #12
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	695b      	ldr	r3, [r3, #20]
 8010576:	f003 0301 	and.w	r3, r3, #1
}
 801057a:	4618      	mov	r0, r3
 801057c:	370c      	adds	r7, #12
 801057e:	46bd      	mov	sp, r7
 8010580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010584:	4770      	bx	lr
	...

08010588 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010588:	b480      	push	{r7}
 801058a:	b085      	sub	sp, #20
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105a2:	4619      	mov	r1, r3
 80105a4:	4b09      	ldr	r3, [pc, #36]	@ (80105cc <USB_ActivateSetup+0x44>)
 80105a6:	4013      	ands	r3, r2
 80105a8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80105b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80105bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3714      	adds	r7, #20
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr
 80105cc:	fffff800 	.word	0xfffff800

080105d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b087      	sub	sp, #28
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	460b      	mov	r3, r1
 80105da:	607a      	str	r2, [r7, #4]
 80105dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	333c      	adds	r3, #60	@ 0x3c
 80105e6:	3304      	adds	r3, #4
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	4a26      	ldr	r2, [pc, #152]	@ (8010688 <USB_EP0_OutStart+0xb8>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d90a      	bls.n	801060a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010604:	d101      	bne.n	801060a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010606:	2300      	movs	r3, #0
 8010608:	e037      	b.n	801067a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010610:	461a      	mov	r2, r3
 8010612:	2300      	movs	r3, #0
 8010614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801061c:	691b      	ldr	r3, [r3, #16]
 801061e:	697a      	ldr	r2, [r7, #20]
 8010620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010624:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010628:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010630:	691b      	ldr	r3, [r3, #16]
 8010632:	697a      	ldr	r2, [r7, #20]
 8010634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010638:	f043 0318 	orr.w	r3, r3, #24
 801063c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	697a      	ldr	r2, [r7, #20]
 8010648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801064c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010650:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010652:	7afb      	ldrb	r3, [r7, #11]
 8010654:	2b01      	cmp	r3, #1
 8010656:	d10f      	bne.n	8010678 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801065e:	461a      	mov	r2, r3
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	697a      	ldr	r2, [r7, #20]
 801066e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010672:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8010676:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010678:	2300      	movs	r3, #0
}
 801067a:	4618      	mov	r0, r3
 801067c:	371c      	adds	r7, #28
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	4f54300a 	.word	0x4f54300a

0801068c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801068c:	b480      	push	{r7}
 801068e:	b085      	sub	sp, #20
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010694:	2300      	movs	r3, #0
 8010696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	3301      	adds	r3, #1
 801069c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80106a4:	d901      	bls.n	80106aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80106a6:	2303      	movs	r3, #3
 80106a8:	e01b      	b.n	80106e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	691b      	ldr	r3, [r3, #16]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	daf2      	bge.n	8010698 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80106b2:	2300      	movs	r3, #0
 80106b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	691b      	ldr	r3, [r3, #16]
 80106ba:	f043 0201 	orr.w	r2, r3, #1
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	3301      	adds	r3, #1
 80106c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80106ce:	d901      	bls.n	80106d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80106d0:	2303      	movs	r3, #3
 80106d2:	e006      	b.n	80106e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	691b      	ldr	r3, [r3, #16]
 80106d8:	f003 0301 	and.w	r3, r3, #1
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d0f0      	beq.n	80106c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80106e0:	2300      	movs	r3, #0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3714      	adds	r7, #20
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr
	...

080106f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	460b      	mov	r3, r1
 80106fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80106fc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010700:	f002 fd2c 	bl	801315c <USBD_static_malloc>
 8010704:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d109      	bne.n	8010720 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	32b0      	adds	r2, #176	@ 0xb0
 8010716:	2100      	movs	r1, #0
 8010718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801071c:	2302      	movs	r3, #2
 801071e:	e0d4      	b.n	80108ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010720:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010724:	2100      	movs	r1, #0
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	f002 fd5c 	bl	80131e4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	32b0      	adds	r2, #176	@ 0xb0
 8010736:	68f9      	ldr	r1, [r7, #12]
 8010738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	32b0      	adds	r2, #176	@ 0xb0
 8010746:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	7c1b      	ldrb	r3, [r3, #16]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d138      	bne.n	80107ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010758:	4b5e      	ldr	r3, [pc, #376]	@ (80108d4 <USBD_CDC_Init+0x1e4>)
 801075a:	7819      	ldrb	r1, [r3, #0]
 801075c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010760:	2202      	movs	r2, #2
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f002 fbd7 	bl	8012f16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010768:	4b5a      	ldr	r3, [pc, #360]	@ (80108d4 <USBD_CDC_Init+0x1e4>)
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	f003 020f 	and.w	r2, r3, #15
 8010770:	6879      	ldr	r1, [r7, #4]
 8010772:	4613      	mov	r3, r2
 8010774:	009b      	lsls	r3, r3, #2
 8010776:	4413      	add	r3, r2
 8010778:	009b      	lsls	r3, r3, #2
 801077a:	440b      	add	r3, r1
 801077c:	3324      	adds	r3, #36	@ 0x24
 801077e:	2201      	movs	r2, #1
 8010780:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010782:	4b55      	ldr	r3, [pc, #340]	@ (80108d8 <USBD_CDC_Init+0x1e8>)
 8010784:	7819      	ldrb	r1, [r3, #0]
 8010786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801078a:	2202      	movs	r2, #2
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f002 fbc2 	bl	8012f16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010792:	4b51      	ldr	r3, [pc, #324]	@ (80108d8 <USBD_CDC_Init+0x1e8>)
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	f003 020f 	and.w	r2, r3, #15
 801079a:	6879      	ldr	r1, [r7, #4]
 801079c:	4613      	mov	r3, r2
 801079e:	009b      	lsls	r3, r3, #2
 80107a0:	4413      	add	r3, r2
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	440b      	add	r3, r1
 80107a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80107aa:	2201      	movs	r2, #1
 80107ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80107ae:	4b4b      	ldr	r3, [pc, #300]	@ (80108dc <USBD_CDC_Init+0x1ec>)
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	f003 020f 	and.w	r2, r3, #15
 80107b6:	6879      	ldr	r1, [r7, #4]
 80107b8:	4613      	mov	r3, r2
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	4413      	add	r3, r2
 80107be:	009b      	lsls	r3, r3, #2
 80107c0:	440b      	add	r3, r1
 80107c2:	3326      	adds	r3, #38	@ 0x26
 80107c4:	2210      	movs	r2, #16
 80107c6:	801a      	strh	r2, [r3, #0]
 80107c8:	e035      	b.n	8010836 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80107ca:	4b42      	ldr	r3, [pc, #264]	@ (80108d4 <USBD_CDC_Init+0x1e4>)
 80107cc:	7819      	ldrb	r1, [r3, #0]
 80107ce:	2340      	movs	r3, #64	@ 0x40
 80107d0:	2202      	movs	r2, #2
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f002 fb9f 	bl	8012f16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80107d8:	4b3e      	ldr	r3, [pc, #248]	@ (80108d4 <USBD_CDC_Init+0x1e4>)
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	f003 020f 	and.w	r2, r3, #15
 80107e0:	6879      	ldr	r1, [r7, #4]
 80107e2:	4613      	mov	r3, r2
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	4413      	add	r3, r2
 80107e8:	009b      	lsls	r3, r3, #2
 80107ea:	440b      	add	r3, r1
 80107ec:	3324      	adds	r3, #36	@ 0x24
 80107ee:	2201      	movs	r2, #1
 80107f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80107f2:	4b39      	ldr	r3, [pc, #228]	@ (80108d8 <USBD_CDC_Init+0x1e8>)
 80107f4:	7819      	ldrb	r1, [r3, #0]
 80107f6:	2340      	movs	r3, #64	@ 0x40
 80107f8:	2202      	movs	r2, #2
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f002 fb8b 	bl	8012f16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010800:	4b35      	ldr	r3, [pc, #212]	@ (80108d8 <USBD_CDC_Init+0x1e8>)
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	f003 020f 	and.w	r2, r3, #15
 8010808:	6879      	ldr	r1, [r7, #4]
 801080a:	4613      	mov	r3, r2
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	4413      	add	r3, r2
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	440b      	add	r3, r1
 8010814:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010818:	2201      	movs	r2, #1
 801081a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801081c:	4b2f      	ldr	r3, [pc, #188]	@ (80108dc <USBD_CDC_Init+0x1ec>)
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	f003 020f 	and.w	r2, r3, #15
 8010824:	6879      	ldr	r1, [r7, #4]
 8010826:	4613      	mov	r3, r2
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	4413      	add	r3, r2
 801082c:	009b      	lsls	r3, r3, #2
 801082e:	440b      	add	r3, r1
 8010830:	3326      	adds	r3, #38	@ 0x26
 8010832:	2210      	movs	r2, #16
 8010834:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010836:	4b29      	ldr	r3, [pc, #164]	@ (80108dc <USBD_CDC_Init+0x1ec>)
 8010838:	7819      	ldrb	r1, [r3, #0]
 801083a:	2308      	movs	r3, #8
 801083c:	2203      	movs	r2, #3
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f002 fb69 	bl	8012f16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010844:	4b25      	ldr	r3, [pc, #148]	@ (80108dc <USBD_CDC_Init+0x1ec>)
 8010846:	781b      	ldrb	r3, [r3, #0]
 8010848:	f003 020f 	and.w	r2, r3, #15
 801084c:	6879      	ldr	r1, [r7, #4]
 801084e:	4613      	mov	r3, r2
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	4413      	add	r3, r2
 8010854:	009b      	lsls	r3, r3, #2
 8010856:	440b      	add	r3, r1
 8010858:	3324      	adds	r3, #36	@ 0x24
 801085a:	2201      	movs	r2, #1
 801085c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2200      	movs	r2, #0
 8010862:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801086c:	687a      	ldr	r2, [r7, #4]
 801086e:	33b0      	adds	r3, #176	@ 0xb0
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	4413      	add	r3, r2
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2200      	movs	r2, #0
 801087e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2200      	movs	r2, #0
 8010886:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010890:	2b00      	cmp	r3, #0
 8010892:	d101      	bne.n	8010898 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010894:	2302      	movs	r3, #2
 8010896:	e018      	b.n	80108ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	7c1b      	ldrb	r3, [r3, #16]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d10a      	bne.n	80108b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80108a0:	4b0d      	ldr	r3, [pc, #52]	@ (80108d8 <USBD_CDC_Init+0x1e8>)
 80108a2:	7819      	ldrb	r1, [r3, #0]
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80108aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f002 fc20 	bl	80130f4 <USBD_LL_PrepareReceive>
 80108b4:	e008      	b.n	80108c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80108b6:	4b08      	ldr	r3, [pc, #32]	@ (80108d8 <USBD_CDC_Init+0x1e8>)
 80108b8:	7819      	ldrb	r1, [r3, #0]
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80108c0:	2340      	movs	r3, #64	@ 0x40
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f002 fc16 	bl	80130f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80108c8:	2300      	movs	r3, #0
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
 80108d2:	bf00      	nop
 80108d4:	2400009b 	.word	0x2400009b
 80108d8:	2400009c 	.word	0x2400009c
 80108dc:	2400009d 	.word	0x2400009d

080108e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	460b      	mov	r3, r1
 80108ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80108ec:	4b3a      	ldr	r3, [pc, #232]	@ (80109d8 <USBD_CDC_DeInit+0xf8>)
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	4619      	mov	r1, r3
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f002 fb35 	bl	8012f62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80108f8:	4b37      	ldr	r3, [pc, #220]	@ (80109d8 <USBD_CDC_DeInit+0xf8>)
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	f003 020f 	and.w	r2, r3, #15
 8010900:	6879      	ldr	r1, [r7, #4]
 8010902:	4613      	mov	r3, r2
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	4413      	add	r3, r2
 8010908:	009b      	lsls	r3, r3, #2
 801090a:	440b      	add	r3, r1
 801090c:	3324      	adds	r3, #36	@ 0x24
 801090e:	2200      	movs	r2, #0
 8010910:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010912:	4b32      	ldr	r3, [pc, #200]	@ (80109dc <USBD_CDC_DeInit+0xfc>)
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	4619      	mov	r1, r3
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f002 fb22 	bl	8012f62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801091e:	4b2f      	ldr	r3, [pc, #188]	@ (80109dc <USBD_CDC_DeInit+0xfc>)
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	f003 020f 	and.w	r2, r3, #15
 8010926:	6879      	ldr	r1, [r7, #4]
 8010928:	4613      	mov	r3, r2
 801092a:	009b      	lsls	r3, r3, #2
 801092c:	4413      	add	r3, r2
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	440b      	add	r3, r1
 8010932:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010936:	2200      	movs	r2, #0
 8010938:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801093a:	4b29      	ldr	r3, [pc, #164]	@ (80109e0 <USBD_CDC_DeInit+0x100>)
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	4619      	mov	r1, r3
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f002 fb0e 	bl	8012f62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010946:	4b26      	ldr	r3, [pc, #152]	@ (80109e0 <USBD_CDC_DeInit+0x100>)
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	f003 020f 	and.w	r2, r3, #15
 801094e:	6879      	ldr	r1, [r7, #4]
 8010950:	4613      	mov	r3, r2
 8010952:	009b      	lsls	r3, r3, #2
 8010954:	4413      	add	r3, r2
 8010956:	009b      	lsls	r3, r3, #2
 8010958:	440b      	add	r3, r1
 801095a:	3324      	adds	r3, #36	@ 0x24
 801095c:	2200      	movs	r2, #0
 801095e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010960:	4b1f      	ldr	r3, [pc, #124]	@ (80109e0 <USBD_CDC_DeInit+0x100>)
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	f003 020f 	and.w	r2, r3, #15
 8010968:	6879      	ldr	r1, [r7, #4]
 801096a:	4613      	mov	r3, r2
 801096c:	009b      	lsls	r3, r3, #2
 801096e:	4413      	add	r3, r2
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	440b      	add	r3, r1
 8010974:	3326      	adds	r3, #38	@ 0x26
 8010976:	2200      	movs	r2, #0
 8010978:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	32b0      	adds	r2, #176	@ 0xb0
 8010984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d01f      	beq.n	80109cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010992:	687a      	ldr	r2, [r7, #4]
 8010994:	33b0      	adds	r3, #176	@ 0xb0
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	4413      	add	r3, r2
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	32b0      	adds	r2, #176	@ 0xb0
 80109aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109ae:	4618      	mov	r0, r3
 80109b0:	f002 fbe2 	bl	8013178 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	32b0      	adds	r2, #176	@ 0xb0
 80109be:	2100      	movs	r1, #0
 80109c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2200      	movs	r2, #0
 80109c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80109cc:	2300      	movs	r3, #0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	2400009b 	.word	0x2400009b
 80109dc:	2400009c 	.word	0x2400009c
 80109e0:	2400009d 	.word	0x2400009d

080109e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b086      	sub	sp, #24
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	32b0      	adds	r2, #176	@ 0xb0
 80109f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80109fe:	2300      	movs	r3, #0
 8010a00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010a02:	2300      	movs	r3, #0
 8010a04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a06:	2300      	movs	r3, #0
 8010a08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d101      	bne.n	8010a14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010a10:	2303      	movs	r3, #3
 8010a12:	e0bf      	b.n	8010b94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d050      	beq.n	8010ac2 <USBD_CDC_Setup+0xde>
 8010a20:	2b20      	cmp	r3, #32
 8010a22:	f040 80af 	bne.w	8010b84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	88db      	ldrh	r3, [r3, #6]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d03a      	beq.n	8010aa4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	b25b      	sxtb	r3, r3
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	da1b      	bge.n	8010a70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	33b0      	adds	r3, #176	@ 0xb0
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	685b      	ldr	r3, [r3, #4]
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	683a      	ldr	r2, [r7, #0]
 8010a4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010a4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010a50:	683a      	ldr	r2, [r7, #0]
 8010a52:	88d2      	ldrh	r2, [r2, #6]
 8010a54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	88db      	ldrh	r3, [r3, #6]
 8010a5a:	2b07      	cmp	r3, #7
 8010a5c:	bf28      	it	cs
 8010a5e:	2307      	movcs	r3, #7
 8010a60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	89fa      	ldrh	r2, [r7, #14]
 8010a66:	4619      	mov	r1, r3
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f001 fdbd 	bl	80125e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010a6e:	e090      	b.n	8010b92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	785a      	ldrb	r2, [r3, #1]
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	88db      	ldrh	r3, [r3, #6]
 8010a7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8010a80:	d803      	bhi.n	8010a8a <USBD_CDC_Setup+0xa6>
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	88db      	ldrh	r3, [r3, #6]
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	e000      	b.n	8010a8c <USBD_CDC_Setup+0xa8>
 8010a8a:	2240      	movs	r2, #64	@ 0x40
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010a92:	6939      	ldr	r1, [r7, #16]
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f001 fdcf 	bl	8012640 <USBD_CtlPrepareRx>
      break;
 8010aa2:	e076      	b.n	8010b92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010aaa:	687a      	ldr	r2, [r7, #4]
 8010aac:	33b0      	adds	r3, #176	@ 0xb0
 8010aae:	009b      	lsls	r3, r3, #2
 8010ab0:	4413      	add	r3, r2
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	689b      	ldr	r3, [r3, #8]
 8010ab6:	683a      	ldr	r2, [r7, #0]
 8010ab8:	7850      	ldrb	r0, [r2, #1]
 8010aba:	2200      	movs	r2, #0
 8010abc:	6839      	ldr	r1, [r7, #0]
 8010abe:	4798      	blx	r3
      break;
 8010ac0:	e067      	b.n	8010b92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	785b      	ldrb	r3, [r3, #1]
 8010ac6:	2b0b      	cmp	r3, #11
 8010ac8:	d851      	bhi.n	8010b6e <USBD_CDC_Setup+0x18a>
 8010aca:	a201      	add	r2, pc, #4	@ (adr r2, 8010ad0 <USBD_CDC_Setup+0xec>)
 8010acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ad0:	08010b01 	.word	0x08010b01
 8010ad4:	08010b7d 	.word	0x08010b7d
 8010ad8:	08010b6f 	.word	0x08010b6f
 8010adc:	08010b6f 	.word	0x08010b6f
 8010ae0:	08010b6f 	.word	0x08010b6f
 8010ae4:	08010b6f 	.word	0x08010b6f
 8010ae8:	08010b6f 	.word	0x08010b6f
 8010aec:	08010b6f 	.word	0x08010b6f
 8010af0:	08010b6f 	.word	0x08010b6f
 8010af4:	08010b6f 	.word	0x08010b6f
 8010af8:	08010b2b 	.word	0x08010b2b
 8010afc:	08010b55 	.word	0x08010b55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	2b03      	cmp	r3, #3
 8010b0a:	d107      	bne.n	8010b1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010b0c:	f107 030a 	add.w	r3, r7, #10
 8010b10:	2202      	movs	r2, #2
 8010b12:	4619      	mov	r1, r3
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f001 fd67 	bl	80125e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b1a:	e032      	b.n	8010b82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010b1c:	6839      	ldr	r1, [r7, #0]
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f001 fce5 	bl	80124ee <USBD_CtlError>
            ret = USBD_FAIL;
 8010b24:	2303      	movs	r3, #3
 8010b26:	75fb      	strb	r3, [r7, #23]
          break;
 8010b28:	e02b      	b.n	8010b82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b30:	b2db      	uxtb	r3, r3
 8010b32:	2b03      	cmp	r3, #3
 8010b34:	d107      	bne.n	8010b46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010b36:	f107 030d 	add.w	r3, r7, #13
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f001 fd52 	bl	80125e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b44:	e01d      	b.n	8010b82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010b46:	6839      	ldr	r1, [r7, #0]
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f001 fcd0 	bl	80124ee <USBD_CtlError>
            ret = USBD_FAIL;
 8010b4e:	2303      	movs	r3, #3
 8010b50:	75fb      	strb	r3, [r7, #23]
          break;
 8010b52:	e016      	b.n	8010b82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	2b03      	cmp	r3, #3
 8010b5e:	d00f      	beq.n	8010b80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010b60:	6839      	ldr	r1, [r7, #0]
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f001 fcc3 	bl	80124ee <USBD_CtlError>
            ret = USBD_FAIL;
 8010b68:	2303      	movs	r3, #3
 8010b6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010b6c:	e008      	b.n	8010b80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010b6e:	6839      	ldr	r1, [r7, #0]
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f001 fcbc 	bl	80124ee <USBD_CtlError>
          ret = USBD_FAIL;
 8010b76:	2303      	movs	r3, #3
 8010b78:	75fb      	strb	r3, [r7, #23]
          break;
 8010b7a:	e002      	b.n	8010b82 <USBD_CDC_Setup+0x19e>
          break;
 8010b7c:	bf00      	nop
 8010b7e:	e008      	b.n	8010b92 <USBD_CDC_Setup+0x1ae>
          break;
 8010b80:	bf00      	nop
      }
      break;
 8010b82:	e006      	b.n	8010b92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010b84:	6839      	ldr	r1, [r7, #0]
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f001 fcb1 	bl	80124ee <USBD_CtlError>
      ret = USBD_FAIL;
 8010b8c:	2303      	movs	r3, #3
 8010b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8010b90:	bf00      	nop
  }

  return (uint8_t)ret;
 8010b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3718      	adds	r7, #24
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010bae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	32b0      	adds	r2, #176	@ 0xb0
 8010bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d101      	bne.n	8010bc6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010bc2:	2303      	movs	r3, #3
 8010bc4:	e065      	b.n	8010c92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	32b0      	adds	r2, #176	@ 0xb0
 8010bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bd4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010bd6:	78fb      	ldrb	r3, [r7, #3]
 8010bd8:	f003 020f 	and.w	r2, r3, #15
 8010bdc:	6879      	ldr	r1, [r7, #4]
 8010bde:	4613      	mov	r3, r2
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	4413      	add	r3, r2
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	440b      	add	r3, r1
 8010be8:	3318      	adds	r3, #24
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d02f      	beq.n	8010c50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010bf0:	78fb      	ldrb	r3, [r7, #3]
 8010bf2:	f003 020f 	and.w	r2, r3, #15
 8010bf6:	6879      	ldr	r1, [r7, #4]
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	4413      	add	r3, r2
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	440b      	add	r3, r1
 8010c02:	3318      	adds	r3, #24
 8010c04:	681a      	ldr	r2, [r3, #0]
 8010c06:	78fb      	ldrb	r3, [r7, #3]
 8010c08:	f003 010f 	and.w	r1, r3, #15
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	460b      	mov	r3, r1
 8010c10:	00db      	lsls	r3, r3, #3
 8010c12:	440b      	add	r3, r1
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	4403      	add	r3, r0
 8010c18:	331c      	adds	r3, #28
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010c20:	fb01 f303 	mul.w	r3, r1, r3
 8010c24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d112      	bne.n	8010c50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010c2a:	78fb      	ldrb	r3, [r7, #3]
 8010c2c:	f003 020f 	and.w	r2, r3, #15
 8010c30:	6879      	ldr	r1, [r7, #4]
 8010c32:	4613      	mov	r3, r2
 8010c34:	009b      	lsls	r3, r3, #2
 8010c36:	4413      	add	r3, r2
 8010c38:	009b      	lsls	r3, r3, #2
 8010c3a:	440b      	add	r3, r1
 8010c3c:	3318      	adds	r3, #24
 8010c3e:	2200      	movs	r2, #0
 8010c40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010c42:	78f9      	ldrb	r1, [r7, #3]
 8010c44:	2300      	movs	r3, #0
 8010c46:	2200      	movs	r2, #0
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f002 fa32 	bl	80130b2 <USBD_LL_Transmit>
 8010c4e:	e01f      	b.n	8010c90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	2200      	movs	r2, #0
 8010c54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c5e:	687a      	ldr	r2, [r7, #4]
 8010c60:	33b0      	adds	r3, #176	@ 0xb0
 8010c62:	009b      	lsls	r3, r3, #2
 8010c64:	4413      	add	r3, r2
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	691b      	ldr	r3, [r3, #16]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d010      	beq.n	8010c90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	33b0      	adds	r3, #176	@ 0xb0
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	4413      	add	r3, r2
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	691b      	ldr	r3, [r3, #16]
 8010c80:	68ba      	ldr	r2, [r7, #8]
 8010c82:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010c8c:	78fa      	ldrb	r2, [r7, #3]
 8010c8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010c90:	2300      	movs	r3, #0
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3710      	adds	r7, #16
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}

08010c9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010c9a:	b580      	push	{r7, lr}
 8010c9c:	b084      	sub	sp, #16
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	32b0      	adds	r2, #176	@ 0xb0
 8010cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	32b0      	adds	r2, #176	@ 0xb0
 8010cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d101      	bne.n	8010ccc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010cc8:	2303      	movs	r3, #3
 8010cca:	e01a      	b.n	8010d02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010ccc:	78fb      	ldrb	r3, [r7, #3]
 8010cce:	4619      	mov	r1, r3
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f002 fa30 	bl	8013136 <USBD_LL_GetRxDataSize>
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	33b0      	adds	r3, #176	@ 0xb0
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	4413      	add	r3, r2
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	68fa      	ldr	r2, [r7, #12]
 8010cf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010cf6:	68fa      	ldr	r2, [r7, #12]
 8010cf8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010cfc:	4611      	mov	r1, r2
 8010cfe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010d00:	2300      	movs	r3, #0
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b084      	sub	sp, #16
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	32b0      	adds	r2, #176	@ 0xb0
 8010d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d101      	bne.n	8010d2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010d28:	2303      	movs	r3, #3
 8010d2a:	e024      	b.n	8010d76 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010d32:	687a      	ldr	r2, [r7, #4]
 8010d34:	33b0      	adds	r3, #176	@ 0xb0
 8010d36:	009b      	lsls	r3, r3, #2
 8010d38:	4413      	add	r3, r2
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d019      	beq.n	8010d74 <USBD_CDC_EP0_RxReady+0x6a>
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010d46:	2bff      	cmp	r3, #255	@ 0xff
 8010d48:	d014      	beq.n	8010d74 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	33b0      	adds	r3, #176	@ 0xb0
 8010d54:	009b      	lsls	r3, r3, #2
 8010d56:	4413      	add	r3, r2
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	68fa      	ldr	r2, [r7, #12]
 8010d5e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010d62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010d64:	68fa      	ldr	r2, [r7, #12]
 8010d66:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010d6a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	22ff      	movs	r2, #255	@ 0xff
 8010d70:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010d74:	2300      	movs	r3, #0
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	3710      	adds	r7, #16
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
	...

08010d80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b086      	sub	sp, #24
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010d88:	2182      	movs	r1, #130	@ 0x82
 8010d8a:	4818      	ldr	r0, [pc, #96]	@ (8010dec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010d8c:	f000 fd4f 	bl	801182e <USBD_GetEpDesc>
 8010d90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010d92:	2101      	movs	r1, #1
 8010d94:	4815      	ldr	r0, [pc, #84]	@ (8010dec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010d96:	f000 fd4a 	bl	801182e <USBD_GetEpDesc>
 8010d9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010d9c:	2181      	movs	r1, #129	@ 0x81
 8010d9e:	4813      	ldr	r0, [pc, #76]	@ (8010dec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010da0:	f000 fd45 	bl	801182e <USBD_GetEpDesc>
 8010da4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d002      	beq.n	8010db2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	2210      	movs	r2, #16
 8010db0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d006      	beq.n	8010dc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010dc0:	711a      	strb	r2, [r3, #4]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d006      	beq.n	8010dda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010dd4:	711a      	strb	r2, [r3, #4]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2243      	movs	r2, #67	@ 0x43
 8010dde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010de0:	4b02      	ldr	r3, [pc, #8]	@ (8010dec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3718      	adds	r7, #24
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	24000058 	.word	0x24000058

08010df0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b086      	sub	sp, #24
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010df8:	2182      	movs	r1, #130	@ 0x82
 8010dfa:	4818      	ldr	r0, [pc, #96]	@ (8010e5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010dfc:	f000 fd17 	bl	801182e <USBD_GetEpDesc>
 8010e00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010e02:	2101      	movs	r1, #1
 8010e04:	4815      	ldr	r0, [pc, #84]	@ (8010e5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010e06:	f000 fd12 	bl	801182e <USBD_GetEpDesc>
 8010e0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010e0c:	2181      	movs	r1, #129	@ 0x81
 8010e0e:	4813      	ldr	r0, [pc, #76]	@ (8010e5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010e10:	f000 fd0d 	bl	801182e <USBD_GetEpDesc>
 8010e14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d002      	beq.n	8010e22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	2210      	movs	r2, #16
 8010e20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d006      	beq.n	8010e36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	711a      	strb	r2, [r3, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f042 0202 	orr.w	r2, r2, #2
 8010e34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d006      	beq.n	8010e4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	711a      	strb	r2, [r3, #4]
 8010e42:	2200      	movs	r2, #0
 8010e44:	f042 0202 	orr.w	r2, r2, #2
 8010e48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2243      	movs	r2, #67	@ 0x43
 8010e4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010e50:	4b02      	ldr	r3, [pc, #8]	@ (8010e5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	24000058 	.word	0x24000058

08010e60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b086      	sub	sp, #24
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010e68:	2182      	movs	r1, #130	@ 0x82
 8010e6a:	4818      	ldr	r0, [pc, #96]	@ (8010ecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010e6c:	f000 fcdf 	bl	801182e <USBD_GetEpDesc>
 8010e70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010e72:	2101      	movs	r1, #1
 8010e74:	4815      	ldr	r0, [pc, #84]	@ (8010ecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010e76:	f000 fcda 	bl	801182e <USBD_GetEpDesc>
 8010e7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010e7c:	2181      	movs	r1, #129	@ 0x81
 8010e7e:	4813      	ldr	r0, [pc, #76]	@ (8010ecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010e80:	f000 fcd5 	bl	801182e <USBD_GetEpDesc>
 8010e84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	2210      	movs	r2, #16
 8010e90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d006      	beq.n	8010ea6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010ea0:	711a      	strb	r2, [r3, #4]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d006      	beq.n	8010eba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010eb4:	711a      	strb	r2, [r3, #4]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2243      	movs	r2, #67	@ 0x43
 8010ebe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010ec0:	4b02      	ldr	r3, [pc, #8]	@ (8010ecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3718      	adds	r7, #24
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	24000058 	.word	0x24000058

08010ed0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	220a      	movs	r2, #10
 8010edc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010ede:	4b03      	ldr	r3, [pc, #12]	@ (8010eec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	24000014 	.word	0x24000014

08010ef0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d101      	bne.n	8010f04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010f00:	2303      	movs	r3, #3
 8010f02:	e009      	b.n	8010f18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010f0a:	687a      	ldr	r2, [r7, #4]
 8010f0c:	33b0      	adds	r3, #176	@ 0xb0
 8010f0e:	009b      	lsls	r3, r3, #2
 8010f10:	4413      	add	r3, r2
 8010f12:	683a      	ldr	r2, [r7, #0]
 8010f14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010f16:	2300      	movs	r3, #0
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b087      	sub	sp, #28
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	60f8      	str	r0, [r7, #12]
 8010f2c:	60b9      	str	r1, [r7, #8]
 8010f2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	32b0      	adds	r2, #176	@ 0xb0
 8010f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f3e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d101      	bne.n	8010f4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010f46:	2303      	movs	r3, #3
 8010f48:	e008      	b.n	8010f5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	68ba      	ldr	r2, [r7, #8]
 8010f4e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010f5a:	2300      	movs	r3, #0
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	371c      	adds	r7, #28
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	32b0      	adds	r2, #176	@ 0xb0
 8010f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d101      	bne.n	8010f8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010f88:	2303      	movs	r3, #3
 8010f8a:	e004      	b.n	8010f96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	683a      	ldr	r2, [r7, #0]
 8010f90:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010f94:	2300      	movs	r3, #0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3714      	adds	r7, #20
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr
	...

08010fa4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	32b0      	adds	r2, #176	@ 0xb0
 8010fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010fc6:	2303      	movs	r3, #3
 8010fc8:	e025      	b.n	8011016 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d11f      	bne.n	8011014 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010fdc:	4b10      	ldr	r3, [pc, #64]	@ (8011020 <USBD_CDC_TransmitPacket+0x7c>)
 8010fde:	781b      	ldrb	r3, [r3, #0]
 8010fe0:	f003 020f 	and.w	r2, r3, #15
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	4613      	mov	r3, r2
 8010fee:	009b      	lsls	r3, r3, #2
 8010ff0:	4413      	add	r3, r2
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	4403      	add	r3, r0
 8010ff6:	3318      	adds	r3, #24
 8010ff8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010ffa:	4b09      	ldr	r3, [pc, #36]	@ (8011020 <USBD_CDC_TransmitPacket+0x7c>)
 8010ffc:	7819      	ldrb	r1, [r3, #0]
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f002 f851 	bl	80130b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011010:	2300      	movs	r3, #0
 8011012:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011014:	7bfb      	ldrb	r3, [r7, #15]
}
 8011016:	4618      	mov	r0, r3
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	2400009b 	.word	0x2400009b

08011024 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	32b0      	adds	r2, #176	@ 0xb0
 8011036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801103a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	32b0      	adds	r2, #176	@ 0xb0
 8011046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d101      	bne.n	8011052 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801104e:	2303      	movs	r3, #3
 8011050:	e018      	b.n	8011084 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	7c1b      	ldrb	r3, [r3, #16]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d10a      	bne.n	8011070 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801105a:	4b0c      	ldr	r3, [pc, #48]	@ (801108c <USBD_CDC_ReceivePacket+0x68>)
 801105c:	7819      	ldrb	r1, [r3, #0]
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011064:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f002 f843 	bl	80130f4 <USBD_LL_PrepareReceive>
 801106e:	e008      	b.n	8011082 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011070:	4b06      	ldr	r3, [pc, #24]	@ (801108c <USBD_CDC_ReceivePacket+0x68>)
 8011072:	7819      	ldrb	r1, [r3, #0]
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801107a:	2340      	movs	r3, #64	@ 0x40
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f002 f839 	bl	80130f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011082:	2300      	movs	r3, #0
}
 8011084:	4618      	mov	r0, r3
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	2400009c 	.word	0x2400009c

08011090 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b086      	sub	sp, #24
 8011094:	af00      	add	r7, sp, #0
 8011096:	60f8      	str	r0, [r7, #12]
 8011098:	60b9      	str	r1, [r7, #8]
 801109a:	4613      	mov	r3, r2
 801109c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d101      	bne.n	80110a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80110a4:	2303      	movs	r3, #3
 80110a6:	e01f      	b.n	80110e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2200      	movs	r2, #0
 80110ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2200      	movs	r2, #0
 80110b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2200      	movs	r2, #0
 80110bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d003      	beq.n	80110ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	68ba      	ldr	r2, [r7, #8]
 80110ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2201      	movs	r2, #1
 80110d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	79fa      	ldrb	r2, [r7, #7]
 80110da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	f001 fead 	bl	8012e3c <USBD_LL_Init>
 80110e2:	4603      	mov	r3, r0
 80110e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80110e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3718      	adds	r7, #24
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80110fa:	2300      	movs	r3, #0
 80110fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d101      	bne.n	8011108 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011104:	2303      	movs	r3, #3
 8011106:	e025      	b.n	8011154 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	683a      	ldr	r2, [r7, #0]
 801110c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	32ae      	adds	r2, #174	@ 0xae
 801111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801111e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011120:	2b00      	cmp	r3, #0
 8011122:	d00f      	beq.n	8011144 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	32ae      	adds	r2, #174	@ 0xae
 801112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011134:	f107 020e 	add.w	r2, r7, #14
 8011138:	4610      	mov	r0, r2
 801113a:	4798      	blx	r3
 801113c:	4602      	mov	r2, r0
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801114a:	1c5a      	adds	r2, r3, #1
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011152:	2300      	movs	r3, #0
}
 8011154:	4618      	mov	r0, r3
 8011156:	3710      	adds	r7, #16
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}

0801115c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f001 febb 	bl	8012ee0 <USBD_LL_Start>
 801116a:	4603      	mov	r3, r0
}
 801116c:	4618      	mov	r0, r3
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011174:	b480      	push	{r7}
 8011176:	b083      	sub	sp, #12
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801117c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801117e:	4618      	mov	r0, r3
 8011180:	370c      	adds	r7, #12
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr

0801118a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b084      	sub	sp, #16
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
 8011192:	460b      	mov	r3, r1
 8011194:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011196:	2300      	movs	r3, #0
 8011198:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d009      	beq.n	80111b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	78fa      	ldrb	r2, [r7, #3]
 80111ae:	4611      	mov	r1, r2
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	4798      	blx	r3
 80111b4:	4603      	mov	r3, r0
 80111b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80111b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3710      	adds	r7, #16
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}

080111c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80111c2:	b580      	push	{r7, lr}
 80111c4:	b084      	sub	sp, #16
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	6078      	str	r0, [r7, #4]
 80111ca:	460b      	mov	r3, r1
 80111cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80111ce:	2300      	movs	r3, #0
 80111d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	78fa      	ldrb	r2, [r7, #3]
 80111dc:	4611      	mov	r1, r2
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	4798      	blx	r3
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d001      	beq.n	80111ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80111e8:	2303      	movs	r3, #3
 80111ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80111ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3710      	adds	r7, #16
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}

080111f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80111f6:	b580      	push	{r7, lr}
 80111f8:	b084      	sub	sp, #16
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
 80111fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011206:	6839      	ldr	r1, [r7, #0]
 8011208:	4618      	mov	r0, r3
 801120a:	f001 f936 	bl	801247a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2201      	movs	r2, #1
 8011212:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801121c:	461a      	mov	r2, r3
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801122a:	f003 031f 	and.w	r3, r3, #31
 801122e:	2b02      	cmp	r3, #2
 8011230:	d01a      	beq.n	8011268 <USBD_LL_SetupStage+0x72>
 8011232:	2b02      	cmp	r3, #2
 8011234:	d822      	bhi.n	801127c <USBD_LL_SetupStage+0x86>
 8011236:	2b00      	cmp	r3, #0
 8011238:	d002      	beq.n	8011240 <USBD_LL_SetupStage+0x4a>
 801123a:	2b01      	cmp	r3, #1
 801123c:	d00a      	beq.n	8011254 <USBD_LL_SetupStage+0x5e>
 801123e:	e01d      	b.n	801127c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011246:	4619      	mov	r1, r3
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fb63 	bl	8011914 <USBD_StdDevReq>
 801124e:	4603      	mov	r3, r0
 8011250:	73fb      	strb	r3, [r7, #15]
      break;
 8011252:	e020      	b.n	8011296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801125a:	4619      	mov	r1, r3
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 fbcb 	bl	80119f8 <USBD_StdItfReq>
 8011262:	4603      	mov	r3, r0
 8011264:	73fb      	strb	r3, [r7, #15]
      break;
 8011266:	e016      	b.n	8011296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801126e:	4619      	mov	r1, r3
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f000 fc2d 	bl	8011ad0 <USBD_StdEPReq>
 8011276:	4603      	mov	r3, r0
 8011278:	73fb      	strb	r3, [r7, #15]
      break;
 801127a:	e00c      	b.n	8011296 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011282:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011286:	b2db      	uxtb	r3, r3
 8011288:	4619      	mov	r1, r3
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f001 fe88 	bl	8012fa0 <USBD_LL_StallEP>
 8011290:	4603      	mov	r3, r0
 8011292:	73fb      	strb	r3, [r7, #15]
      break;
 8011294:	bf00      	nop
  }

  return ret;
 8011296:	7bfb      	ldrb	r3, [r7, #15]
}
 8011298:	4618      	mov	r0, r3
 801129a:	3710      	adds	r7, #16
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b086      	sub	sp, #24
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	460b      	mov	r3, r1
 80112aa:	607a      	str	r2, [r7, #4]
 80112ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80112ae:	2300      	movs	r3, #0
 80112b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80112b2:	7afb      	ldrb	r3, [r7, #11]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d16e      	bne.n	8011396 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80112be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80112c6:	2b03      	cmp	r3, #3
 80112c8:	f040 8098 	bne.w	80113fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	689a      	ldr	r2, [r3, #8]
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d913      	bls.n	8011300 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	689a      	ldr	r2, [r3, #8]
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	1ad2      	subs	r2, r2, r3
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	68da      	ldr	r2, [r3, #12]
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	689b      	ldr	r3, [r3, #8]
 80112ee:	4293      	cmp	r3, r2
 80112f0:	bf28      	it	cs
 80112f2:	4613      	movcs	r3, r2
 80112f4:	461a      	mov	r2, r3
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	68f8      	ldr	r0, [r7, #12]
 80112fa:	f001 f9be 	bl	801267a <USBD_CtlContinueRx>
 80112fe:	e07d      	b.n	80113fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011306:	f003 031f 	and.w	r3, r3, #31
 801130a:	2b02      	cmp	r3, #2
 801130c:	d014      	beq.n	8011338 <USBD_LL_DataOutStage+0x98>
 801130e:	2b02      	cmp	r3, #2
 8011310:	d81d      	bhi.n	801134e <USBD_LL_DataOutStage+0xae>
 8011312:	2b00      	cmp	r3, #0
 8011314:	d002      	beq.n	801131c <USBD_LL_DataOutStage+0x7c>
 8011316:	2b01      	cmp	r3, #1
 8011318:	d003      	beq.n	8011322 <USBD_LL_DataOutStage+0x82>
 801131a:	e018      	b.n	801134e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801131c:	2300      	movs	r3, #0
 801131e:	75bb      	strb	r3, [r7, #22]
            break;
 8011320:	e018      	b.n	8011354 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011328:	b2db      	uxtb	r3, r3
 801132a:	4619      	mov	r1, r3
 801132c:	68f8      	ldr	r0, [r7, #12]
 801132e:	f000 fa64 	bl	80117fa <USBD_CoreFindIF>
 8011332:	4603      	mov	r3, r0
 8011334:	75bb      	strb	r3, [r7, #22]
            break;
 8011336:	e00d      	b.n	8011354 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801133e:	b2db      	uxtb	r3, r3
 8011340:	4619      	mov	r1, r3
 8011342:	68f8      	ldr	r0, [r7, #12]
 8011344:	f000 fa66 	bl	8011814 <USBD_CoreFindEP>
 8011348:	4603      	mov	r3, r0
 801134a:	75bb      	strb	r3, [r7, #22]
            break;
 801134c:	e002      	b.n	8011354 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801134e:	2300      	movs	r3, #0
 8011350:	75bb      	strb	r3, [r7, #22]
            break;
 8011352:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011354:	7dbb      	ldrb	r3, [r7, #22]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d119      	bne.n	801138e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011360:	b2db      	uxtb	r3, r3
 8011362:	2b03      	cmp	r3, #3
 8011364:	d113      	bne.n	801138e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011366:	7dba      	ldrb	r2, [r7, #22]
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	32ae      	adds	r2, #174	@ 0xae
 801136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011370:	691b      	ldr	r3, [r3, #16]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d00b      	beq.n	801138e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011376:	7dba      	ldrb	r2, [r7, #22]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801137e:	7dba      	ldrb	r2, [r7, #22]
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	32ae      	adds	r2, #174	@ 0xae
 8011384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011388:	691b      	ldr	r3, [r3, #16]
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801138e:	68f8      	ldr	r0, [r7, #12]
 8011390:	f001 f984 	bl	801269c <USBD_CtlSendStatus>
 8011394:	e032      	b.n	80113fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011396:	7afb      	ldrb	r3, [r7, #11]
 8011398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801139c:	b2db      	uxtb	r3, r3
 801139e:	4619      	mov	r1, r3
 80113a0:	68f8      	ldr	r0, [r7, #12]
 80113a2:	f000 fa37 	bl	8011814 <USBD_CoreFindEP>
 80113a6:	4603      	mov	r3, r0
 80113a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80113aa:	7dbb      	ldrb	r3, [r7, #22]
 80113ac:	2bff      	cmp	r3, #255	@ 0xff
 80113ae:	d025      	beq.n	80113fc <USBD_LL_DataOutStage+0x15c>
 80113b0:	7dbb      	ldrb	r3, [r7, #22]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d122      	bne.n	80113fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113bc:	b2db      	uxtb	r3, r3
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d117      	bne.n	80113f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80113c2:	7dba      	ldrb	r2, [r7, #22]
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	32ae      	adds	r2, #174	@ 0xae
 80113c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113cc:	699b      	ldr	r3, [r3, #24]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00f      	beq.n	80113f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80113d2:	7dba      	ldrb	r2, [r7, #22]
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80113da:	7dba      	ldrb	r2, [r7, #22]
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	32ae      	adds	r2, #174	@ 0xae
 80113e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113e4:	699b      	ldr	r3, [r3, #24]
 80113e6:	7afa      	ldrb	r2, [r7, #11]
 80113e8:	4611      	mov	r1, r2
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	4798      	blx	r3
 80113ee:	4603      	mov	r3, r0
 80113f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80113f2:	7dfb      	ldrb	r3, [r7, #23]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d001      	beq.n	80113fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80113f8:	7dfb      	ldrb	r3, [r7, #23]
 80113fa:	e000      	b.n	80113fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80113fc:	2300      	movs	r3, #0
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3718      	adds	r7, #24
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}

08011406 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011406:	b580      	push	{r7, lr}
 8011408:	b086      	sub	sp, #24
 801140a:	af00      	add	r7, sp, #0
 801140c:	60f8      	str	r0, [r7, #12]
 801140e:	460b      	mov	r3, r1
 8011410:	607a      	str	r2, [r7, #4]
 8011412:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011414:	7afb      	ldrb	r3, [r7, #11]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d16f      	bne.n	80114fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	3314      	adds	r3, #20
 801141e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011426:	2b02      	cmp	r3, #2
 8011428:	d15a      	bne.n	80114e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	689a      	ldr	r2, [r3, #8]
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	68db      	ldr	r3, [r3, #12]
 8011432:	429a      	cmp	r2, r3
 8011434:	d914      	bls.n	8011460 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	689a      	ldr	r2, [r3, #8]
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	1ad2      	subs	r2, r2, r3
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	689b      	ldr	r3, [r3, #8]
 8011448:	461a      	mov	r2, r3
 801144a:	6879      	ldr	r1, [r7, #4]
 801144c:	68f8      	ldr	r0, [r7, #12]
 801144e:	f001 f8e6 	bl	801261e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011452:	2300      	movs	r3, #0
 8011454:	2200      	movs	r2, #0
 8011456:	2100      	movs	r1, #0
 8011458:	68f8      	ldr	r0, [r7, #12]
 801145a:	f001 fe4b 	bl	80130f4 <USBD_LL_PrepareReceive>
 801145e:	e03f      	b.n	80114e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	68da      	ldr	r2, [r3, #12]
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	689b      	ldr	r3, [r3, #8]
 8011468:	429a      	cmp	r2, r3
 801146a:	d11c      	bne.n	80114a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	685a      	ldr	r2, [r3, #4]
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011474:	429a      	cmp	r2, r3
 8011476:	d316      	bcc.n	80114a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	685a      	ldr	r2, [r3, #4]
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011482:	429a      	cmp	r2, r3
 8011484:	d20f      	bcs.n	80114a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011486:	2200      	movs	r2, #0
 8011488:	2100      	movs	r1, #0
 801148a:	68f8      	ldr	r0, [r7, #12]
 801148c:	f001 f8c7 	bl	801261e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2200      	movs	r2, #0
 8011494:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011498:	2300      	movs	r3, #0
 801149a:	2200      	movs	r2, #0
 801149c:	2100      	movs	r1, #0
 801149e:	68f8      	ldr	r0, [r7, #12]
 80114a0:	f001 fe28 	bl	80130f4 <USBD_LL_PrepareReceive>
 80114a4:	e01c      	b.n	80114e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	2b03      	cmp	r3, #3
 80114b0:	d10f      	bne.n	80114d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d009      	beq.n	80114d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	2200      	movs	r2, #0
 80114c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	68f8      	ldr	r0, [r7, #12]
 80114d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80114d2:	2180      	movs	r1, #128	@ 0x80
 80114d4:	68f8      	ldr	r0, [r7, #12]
 80114d6:	f001 fd63 	bl	8012fa0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	f001 f8f1 	bl	80126c2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d03a      	beq.n	8011560 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80114ea:	68f8      	ldr	r0, [r7, #12]
 80114ec:	f7ff fe42 	bl	8011174 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2200      	movs	r2, #0
 80114f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80114f8:	e032      	b.n	8011560 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80114fa:	7afb      	ldrb	r3, [r7, #11]
 80114fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011500:	b2db      	uxtb	r3, r3
 8011502:	4619      	mov	r1, r3
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	f000 f985 	bl	8011814 <USBD_CoreFindEP>
 801150a:	4603      	mov	r3, r0
 801150c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801150e:	7dfb      	ldrb	r3, [r7, #23]
 8011510:	2bff      	cmp	r3, #255	@ 0xff
 8011512:	d025      	beq.n	8011560 <USBD_LL_DataInStage+0x15a>
 8011514:	7dfb      	ldrb	r3, [r7, #23]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d122      	bne.n	8011560 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011520:	b2db      	uxtb	r3, r3
 8011522:	2b03      	cmp	r3, #3
 8011524:	d11c      	bne.n	8011560 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011526:	7dfa      	ldrb	r2, [r7, #23]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	32ae      	adds	r2, #174	@ 0xae
 801152c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011530:	695b      	ldr	r3, [r3, #20]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d014      	beq.n	8011560 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011536:	7dfa      	ldrb	r2, [r7, #23]
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801153e:	7dfa      	ldrb	r2, [r7, #23]
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	32ae      	adds	r2, #174	@ 0xae
 8011544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011548:	695b      	ldr	r3, [r3, #20]
 801154a:	7afa      	ldrb	r2, [r7, #11]
 801154c:	4611      	mov	r1, r2
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	4798      	blx	r3
 8011552:	4603      	mov	r3, r0
 8011554:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011556:	7dbb      	ldrb	r3, [r7, #22]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d001      	beq.n	8011560 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801155c:	7dbb      	ldrb	r3, [r7, #22]
 801155e:	e000      	b.n	8011562 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011560:	2300      	movs	r3, #0
}
 8011562:	4618      	mov	r0, r3
 8011564:	3718      	adds	r7, #24
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b084      	sub	sp, #16
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011572:	2300      	movs	r3, #0
 8011574:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2201      	movs	r2, #1
 801157a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2200      	movs	r2, #0
 8011582:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2200      	movs	r2, #0
 801158a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2200      	movs	r2, #0
 8011590:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2200      	movs	r2, #0
 8011598:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d014      	beq.n	80115d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00e      	beq.n	80115d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115b8:	685b      	ldr	r3, [r3, #4]
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	6852      	ldr	r2, [r2, #4]
 80115be:	b2d2      	uxtb	r2, r2
 80115c0:	4611      	mov	r1, r2
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	4798      	blx	r3
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d001      	beq.n	80115d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80115cc:	2303      	movs	r3, #3
 80115ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80115d0:	2340      	movs	r3, #64	@ 0x40
 80115d2:	2200      	movs	r2, #0
 80115d4:	2100      	movs	r1, #0
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f001 fc9d 	bl	8012f16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2201      	movs	r2, #1
 80115e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2240      	movs	r2, #64	@ 0x40
 80115e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80115ec:	2340      	movs	r3, #64	@ 0x40
 80115ee:	2200      	movs	r2, #0
 80115f0:	2180      	movs	r1, #128	@ 0x80
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f001 fc8f 	bl	8012f16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2201      	movs	r2, #1
 80115fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2240      	movs	r2, #64	@ 0x40
 8011602:	621a      	str	r2, [r3, #32]

  return ret;
 8011604:	7bfb      	ldrb	r3, [r7, #15]
}
 8011606:	4618      	mov	r0, r3
 8011608:	3710      	adds	r7, #16
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}

0801160e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801160e:	b480      	push	{r7}
 8011610:	b083      	sub	sp, #12
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
 8011616:	460b      	mov	r3, r1
 8011618:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	78fa      	ldrb	r2, [r7, #3]
 801161e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011620:	2300      	movs	r3, #0
}
 8011622:	4618      	mov	r0, r3
 8011624:	370c      	adds	r7, #12
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr

0801162e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801162e:	b480      	push	{r7}
 8011630:	b083      	sub	sp, #12
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801163c:	b2db      	uxtb	r3, r3
 801163e:	2b04      	cmp	r3, #4
 8011640:	d006      	beq.n	8011650 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011648:	b2da      	uxtb	r2, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2204      	movs	r2, #4
 8011654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011658:	2300      	movs	r3, #0
}
 801165a:	4618      	mov	r0, r3
 801165c:	370c      	adds	r7, #12
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr

08011666 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011666:	b480      	push	{r7}
 8011668:	b083      	sub	sp, #12
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011674:	b2db      	uxtb	r3, r3
 8011676:	2b04      	cmp	r3, #4
 8011678:	d106      	bne.n	8011688 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011680:	b2da      	uxtb	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011688:	2300      	movs	r3, #0
}
 801168a:	4618      	mov	r0, r3
 801168c:	370c      	adds	r7, #12
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr

08011696 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011696:	b580      	push	{r7, lr}
 8011698:	b082      	sub	sp, #8
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	2b03      	cmp	r3, #3
 80116a8:	d110      	bne.n	80116cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d00b      	beq.n	80116cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116ba:	69db      	ldr	r3, [r3, #28]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d005      	beq.n	80116cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116c6:	69db      	ldr	r3, [r3, #28]
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80116cc:	2300      	movs	r3, #0
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80116d6:	b580      	push	{r7, lr}
 80116d8:	b082      	sub	sp, #8
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
 80116de:	460b      	mov	r3, r1
 80116e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	32ae      	adds	r2, #174	@ 0xae
 80116ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d101      	bne.n	80116f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80116f4:	2303      	movs	r3, #3
 80116f6:	e01c      	b.n	8011732 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	2b03      	cmp	r3, #3
 8011702:	d115      	bne.n	8011730 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	32ae      	adds	r2, #174	@ 0xae
 801170e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011712:	6a1b      	ldr	r3, [r3, #32]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00b      	beq.n	8011730 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	32ae      	adds	r2, #174	@ 0xae
 8011722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011726:	6a1b      	ldr	r3, [r3, #32]
 8011728:	78fa      	ldrb	r2, [r7, #3]
 801172a:	4611      	mov	r1, r2
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011730:	2300      	movs	r3, #0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}

0801173a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801173a:	b580      	push	{r7, lr}
 801173c:	b082      	sub	sp, #8
 801173e:	af00      	add	r7, sp, #0
 8011740:	6078      	str	r0, [r7, #4]
 8011742:	460b      	mov	r3, r1
 8011744:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	32ae      	adds	r2, #174	@ 0xae
 8011750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d101      	bne.n	801175c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011758:	2303      	movs	r3, #3
 801175a:	e01c      	b.n	8011796 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011762:	b2db      	uxtb	r3, r3
 8011764:	2b03      	cmp	r3, #3
 8011766:	d115      	bne.n	8011794 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	32ae      	adds	r2, #174	@ 0xae
 8011772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011778:	2b00      	cmp	r3, #0
 801177a:	d00b      	beq.n	8011794 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	32ae      	adds	r2, #174	@ 0xae
 8011786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801178c:	78fa      	ldrb	r2, [r7, #3]
 801178e:	4611      	mov	r1, r2
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011794:	2300      	movs	r3, #0
}
 8011796:	4618      	mov	r0, r3
 8011798:	3708      	adds	r7, #8
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801179e:	b480      	push	{r7}
 80117a0:	b083      	sub	sp, #12
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80117a6:	2300      	movs	r3, #0
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	370c      	adds	r7, #12
 80117ac:	46bd      	mov	sp, r7
 80117ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b2:	4770      	bx	lr

080117b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80117bc:	2300      	movs	r3, #0
 80117be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2201      	movs	r2, #1
 80117c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00e      	beq.n	80117f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	6852      	ldr	r2, [r2, #4]
 80117de:	b2d2      	uxtb	r2, r2
 80117e0:	4611      	mov	r1, r2
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	4798      	blx	r3
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d001      	beq.n	80117f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80117ec:	2303      	movs	r3, #3
 80117ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80117f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}

080117fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80117fa:	b480      	push	{r7}
 80117fc:	b083      	sub	sp, #12
 80117fe:	af00      	add	r7, sp, #0
 8011800:	6078      	str	r0, [r7, #4]
 8011802:	460b      	mov	r3, r1
 8011804:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011806:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011808:	4618      	mov	r0, r3
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	460b      	mov	r3, r1
 801181e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011820:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011822:	4618      	mov	r0, r3
 8011824:	370c      	adds	r7, #12
 8011826:	46bd      	mov	sp, r7
 8011828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182c:	4770      	bx	lr

0801182e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801182e:	b580      	push	{r7, lr}
 8011830:	b086      	sub	sp, #24
 8011832:	af00      	add	r7, sp, #0
 8011834:	6078      	str	r0, [r7, #4]
 8011836:	460b      	mov	r3, r1
 8011838:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011842:	2300      	movs	r3, #0
 8011844:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	885b      	ldrh	r3, [r3, #2]
 801184a:	b29b      	uxth	r3, r3
 801184c:	68fa      	ldr	r2, [r7, #12]
 801184e:	7812      	ldrb	r2, [r2, #0]
 8011850:	4293      	cmp	r3, r2
 8011852:	d91f      	bls.n	8011894 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801185a:	e013      	b.n	8011884 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801185c:	f107 030a 	add.w	r3, r7, #10
 8011860:	4619      	mov	r1, r3
 8011862:	6978      	ldr	r0, [r7, #20]
 8011864:	f000 f81b 	bl	801189e <USBD_GetNextDesc>
 8011868:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	785b      	ldrb	r3, [r3, #1]
 801186e:	2b05      	cmp	r3, #5
 8011870:	d108      	bne.n	8011884 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	789b      	ldrb	r3, [r3, #2]
 801187a:	78fa      	ldrb	r2, [r7, #3]
 801187c:	429a      	cmp	r2, r3
 801187e:	d008      	beq.n	8011892 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011880:	2300      	movs	r3, #0
 8011882:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	885b      	ldrh	r3, [r3, #2]
 8011888:	b29a      	uxth	r2, r3
 801188a:	897b      	ldrh	r3, [r7, #10]
 801188c:	429a      	cmp	r2, r3
 801188e:	d8e5      	bhi.n	801185c <USBD_GetEpDesc+0x2e>
 8011890:	e000      	b.n	8011894 <USBD_GetEpDesc+0x66>
          break;
 8011892:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011894:	693b      	ldr	r3, [r7, #16]
}
 8011896:	4618      	mov	r0, r3
 8011898:	3718      	adds	r7, #24
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}

0801189e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801189e:	b480      	push	{r7}
 80118a0:	b085      	sub	sp, #20
 80118a2:	af00      	add	r7, sp, #0
 80118a4:	6078      	str	r0, [r7, #4]
 80118a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	881b      	ldrh	r3, [r3, #0]
 80118b0:	68fa      	ldr	r2, [r7, #12]
 80118b2:	7812      	ldrb	r2, [r2, #0]
 80118b4:	4413      	add	r3, r2
 80118b6:	b29a      	uxth	r2, r3
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	461a      	mov	r2, r3
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	4413      	add	r3, r2
 80118c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80118c8:	68fb      	ldr	r3, [r7, #12]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3714      	adds	r7, #20
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr

080118d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80118d6:	b480      	push	{r7}
 80118d8:	b087      	sub	sp, #28
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	3301      	adds	r3, #1
 80118ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80118f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80118f8:	021b      	lsls	r3, r3, #8
 80118fa:	b21a      	sxth	r2, r3
 80118fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011900:	4313      	orrs	r3, r2
 8011902:	b21b      	sxth	r3, r3
 8011904:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011906:	89fb      	ldrh	r3, [r7, #14]
}
 8011908:	4618      	mov	r0, r3
 801190a:	371c      	adds	r7, #28
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr

08011914 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801191e:	2300      	movs	r3, #0
 8011920:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801192a:	2b40      	cmp	r3, #64	@ 0x40
 801192c:	d005      	beq.n	801193a <USBD_StdDevReq+0x26>
 801192e:	2b40      	cmp	r3, #64	@ 0x40
 8011930:	d857      	bhi.n	80119e2 <USBD_StdDevReq+0xce>
 8011932:	2b00      	cmp	r3, #0
 8011934:	d00f      	beq.n	8011956 <USBD_StdDevReq+0x42>
 8011936:	2b20      	cmp	r3, #32
 8011938:	d153      	bne.n	80119e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	32ae      	adds	r2, #174	@ 0xae
 8011944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011948:	689b      	ldr	r3, [r3, #8]
 801194a:	6839      	ldr	r1, [r7, #0]
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	4798      	blx	r3
 8011950:	4603      	mov	r3, r0
 8011952:	73fb      	strb	r3, [r7, #15]
      break;
 8011954:	e04a      	b.n	80119ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	785b      	ldrb	r3, [r3, #1]
 801195a:	2b09      	cmp	r3, #9
 801195c:	d83b      	bhi.n	80119d6 <USBD_StdDevReq+0xc2>
 801195e:	a201      	add	r2, pc, #4	@ (adr r2, 8011964 <USBD_StdDevReq+0x50>)
 8011960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011964:	080119b9 	.word	0x080119b9
 8011968:	080119cd 	.word	0x080119cd
 801196c:	080119d7 	.word	0x080119d7
 8011970:	080119c3 	.word	0x080119c3
 8011974:	080119d7 	.word	0x080119d7
 8011978:	08011997 	.word	0x08011997
 801197c:	0801198d 	.word	0x0801198d
 8011980:	080119d7 	.word	0x080119d7
 8011984:	080119af 	.word	0x080119af
 8011988:	080119a1 	.word	0x080119a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801198c:	6839      	ldr	r1, [r7, #0]
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 fa3c 	bl	8011e0c <USBD_GetDescriptor>
          break;
 8011994:	e024      	b.n	80119e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011996:	6839      	ldr	r1, [r7, #0]
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f000 fbcb 	bl	8012134 <USBD_SetAddress>
          break;
 801199e:	e01f      	b.n	80119e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80119a0:	6839      	ldr	r1, [r7, #0]
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 fc0a 	bl	80121bc <USBD_SetConfig>
 80119a8:	4603      	mov	r3, r0
 80119aa:	73fb      	strb	r3, [r7, #15]
          break;
 80119ac:	e018      	b.n	80119e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80119ae:	6839      	ldr	r1, [r7, #0]
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f000 fcad 	bl	8012310 <USBD_GetConfig>
          break;
 80119b6:	e013      	b.n	80119e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80119b8:	6839      	ldr	r1, [r7, #0]
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f000 fcde 	bl	801237c <USBD_GetStatus>
          break;
 80119c0:	e00e      	b.n	80119e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80119c2:	6839      	ldr	r1, [r7, #0]
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f000 fd0d 	bl	80123e4 <USBD_SetFeature>
          break;
 80119ca:	e009      	b.n	80119e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80119cc:	6839      	ldr	r1, [r7, #0]
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f000 fd31 	bl	8012436 <USBD_ClrFeature>
          break;
 80119d4:	e004      	b.n	80119e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80119d6:	6839      	ldr	r1, [r7, #0]
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f000 fd88 	bl	80124ee <USBD_CtlError>
          break;
 80119de:	bf00      	nop
      }
      break;
 80119e0:	e004      	b.n	80119ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80119e2:	6839      	ldr	r1, [r7, #0]
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f000 fd82 	bl	80124ee <USBD_CtlError>
      break;
 80119ea:	bf00      	nop
  }

  return ret;
 80119ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3710      	adds	r7, #16
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop

080119f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a02:	2300      	movs	r3, #0
 8011a04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011a0e:	2b40      	cmp	r3, #64	@ 0x40
 8011a10:	d005      	beq.n	8011a1e <USBD_StdItfReq+0x26>
 8011a12:	2b40      	cmp	r3, #64	@ 0x40
 8011a14:	d852      	bhi.n	8011abc <USBD_StdItfReq+0xc4>
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d001      	beq.n	8011a1e <USBD_StdItfReq+0x26>
 8011a1a:	2b20      	cmp	r3, #32
 8011a1c:	d14e      	bne.n	8011abc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a24:	b2db      	uxtb	r3, r3
 8011a26:	3b01      	subs	r3, #1
 8011a28:	2b02      	cmp	r3, #2
 8011a2a:	d840      	bhi.n	8011aae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	889b      	ldrh	r3, [r3, #4]
 8011a30:	b2db      	uxtb	r3, r3
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d836      	bhi.n	8011aa4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	889b      	ldrh	r3, [r3, #4]
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f7ff fedb 	bl	80117fa <USBD_CoreFindIF>
 8011a44:	4603      	mov	r3, r0
 8011a46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011a48:	7bbb      	ldrb	r3, [r7, #14]
 8011a4a:	2bff      	cmp	r3, #255	@ 0xff
 8011a4c:	d01d      	beq.n	8011a8a <USBD_StdItfReq+0x92>
 8011a4e:	7bbb      	ldrb	r3, [r7, #14]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d11a      	bne.n	8011a8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011a54:	7bba      	ldrb	r2, [r7, #14]
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	32ae      	adds	r2, #174	@ 0xae
 8011a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a5e:	689b      	ldr	r3, [r3, #8]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d00f      	beq.n	8011a84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011a64:	7bba      	ldrb	r2, [r7, #14]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011a6c:	7bba      	ldrb	r2, [r7, #14]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	32ae      	adds	r2, #174	@ 0xae
 8011a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a76:	689b      	ldr	r3, [r3, #8]
 8011a78:	6839      	ldr	r1, [r7, #0]
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	4798      	blx	r3
 8011a7e:	4603      	mov	r3, r0
 8011a80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011a82:	e004      	b.n	8011a8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011a84:	2303      	movs	r3, #3
 8011a86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011a88:	e001      	b.n	8011a8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011a8a:	2303      	movs	r3, #3
 8011a8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	88db      	ldrh	r3, [r3, #6]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d110      	bne.n	8011ab8 <USBD_StdItfReq+0xc0>
 8011a96:	7bfb      	ldrb	r3, [r7, #15]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d10d      	bne.n	8011ab8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f000 fdfd 	bl	801269c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011aa2:	e009      	b.n	8011ab8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011aa4:	6839      	ldr	r1, [r7, #0]
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 fd21 	bl	80124ee <USBD_CtlError>
          break;
 8011aac:	e004      	b.n	8011ab8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011aae:	6839      	ldr	r1, [r7, #0]
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f000 fd1c 	bl	80124ee <USBD_CtlError>
          break;
 8011ab6:	e000      	b.n	8011aba <USBD_StdItfReq+0xc2>
          break;
 8011ab8:	bf00      	nop
      }
      break;
 8011aba:	e004      	b.n	8011ac6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011abc:	6839      	ldr	r1, [r7, #0]
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f000 fd15 	bl	80124ee <USBD_CtlError>
      break;
 8011ac4:	bf00      	nop
  }

  return ret;
 8011ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3710      	adds	r7, #16
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011ada:	2300      	movs	r3, #0
 8011adc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	889b      	ldrh	r3, [r3, #4]
 8011ae2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011aec:	2b40      	cmp	r3, #64	@ 0x40
 8011aee:	d007      	beq.n	8011b00 <USBD_StdEPReq+0x30>
 8011af0:	2b40      	cmp	r3, #64	@ 0x40
 8011af2:	f200 817f 	bhi.w	8011df4 <USBD_StdEPReq+0x324>
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d02a      	beq.n	8011b50 <USBD_StdEPReq+0x80>
 8011afa:	2b20      	cmp	r3, #32
 8011afc:	f040 817a 	bne.w	8011df4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011b00:	7bbb      	ldrb	r3, [r7, #14]
 8011b02:	4619      	mov	r1, r3
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f7ff fe85 	bl	8011814 <USBD_CoreFindEP>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011b0e:	7b7b      	ldrb	r3, [r7, #13]
 8011b10:	2bff      	cmp	r3, #255	@ 0xff
 8011b12:	f000 8174 	beq.w	8011dfe <USBD_StdEPReq+0x32e>
 8011b16:	7b7b      	ldrb	r3, [r7, #13]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	f040 8170 	bne.w	8011dfe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011b1e:	7b7a      	ldrb	r2, [r7, #13]
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011b26:	7b7a      	ldrb	r2, [r7, #13]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	32ae      	adds	r2, #174	@ 0xae
 8011b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b30:	689b      	ldr	r3, [r3, #8]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	f000 8163 	beq.w	8011dfe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011b38:	7b7a      	ldrb	r2, [r7, #13]
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	32ae      	adds	r2, #174	@ 0xae
 8011b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b42:	689b      	ldr	r3, [r3, #8]
 8011b44:	6839      	ldr	r1, [r7, #0]
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	4798      	blx	r3
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011b4e:	e156      	b.n	8011dfe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	785b      	ldrb	r3, [r3, #1]
 8011b54:	2b03      	cmp	r3, #3
 8011b56:	d008      	beq.n	8011b6a <USBD_StdEPReq+0x9a>
 8011b58:	2b03      	cmp	r3, #3
 8011b5a:	f300 8145 	bgt.w	8011de8 <USBD_StdEPReq+0x318>
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	f000 809b 	beq.w	8011c9a <USBD_StdEPReq+0x1ca>
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d03c      	beq.n	8011be2 <USBD_StdEPReq+0x112>
 8011b68:	e13e      	b.n	8011de8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	2b02      	cmp	r3, #2
 8011b74:	d002      	beq.n	8011b7c <USBD_StdEPReq+0xac>
 8011b76:	2b03      	cmp	r3, #3
 8011b78:	d016      	beq.n	8011ba8 <USBD_StdEPReq+0xd8>
 8011b7a:	e02c      	b.n	8011bd6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b7c:	7bbb      	ldrb	r3, [r7, #14]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d00d      	beq.n	8011b9e <USBD_StdEPReq+0xce>
 8011b82:	7bbb      	ldrb	r3, [r7, #14]
 8011b84:	2b80      	cmp	r3, #128	@ 0x80
 8011b86:	d00a      	beq.n	8011b9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011b88:	7bbb      	ldrb	r3, [r7, #14]
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f001 fa07 	bl	8012fa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b92:	2180      	movs	r1, #128	@ 0x80
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f001 fa03 	bl	8012fa0 <USBD_LL_StallEP>
 8011b9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011b9c:	e020      	b.n	8011be0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011b9e:	6839      	ldr	r1, [r7, #0]
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f000 fca4 	bl	80124ee <USBD_CtlError>
              break;
 8011ba6:	e01b      	b.n	8011be0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	885b      	ldrh	r3, [r3, #2]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d10e      	bne.n	8011bce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011bb0:	7bbb      	ldrb	r3, [r7, #14]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d00b      	beq.n	8011bce <USBD_StdEPReq+0xfe>
 8011bb6:	7bbb      	ldrb	r3, [r7, #14]
 8011bb8:	2b80      	cmp	r3, #128	@ 0x80
 8011bba:	d008      	beq.n	8011bce <USBD_StdEPReq+0xfe>
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	88db      	ldrh	r3, [r3, #6]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d104      	bne.n	8011bce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011bc4:	7bbb      	ldrb	r3, [r7, #14]
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f001 f9e9 	bl	8012fa0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f000 fd64 	bl	801269c <USBD_CtlSendStatus>

              break;
 8011bd4:	e004      	b.n	8011be0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011bd6:	6839      	ldr	r1, [r7, #0]
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f000 fc88 	bl	80124ee <USBD_CtlError>
              break;
 8011bde:	bf00      	nop
          }
          break;
 8011be0:	e107      	b.n	8011df2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	2b02      	cmp	r3, #2
 8011bec:	d002      	beq.n	8011bf4 <USBD_StdEPReq+0x124>
 8011bee:	2b03      	cmp	r3, #3
 8011bf0:	d016      	beq.n	8011c20 <USBD_StdEPReq+0x150>
 8011bf2:	e04b      	b.n	8011c8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011bf4:	7bbb      	ldrb	r3, [r7, #14]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d00d      	beq.n	8011c16 <USBD_StdEPReq+0x146>
 8011bfa:	7bbb      	ldrb	r3, [r7, #14]
 8011bfc:	2b80      	cmp	r3, #128	@ 0x80
 8011bfe:	d00a      	beq.n	8011c16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c00:	7bbb      	ldrb	r3, [r7, #14]
 8011c02:	4619      	mov	r1, r3
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f001 f9cb 	bl	8012fa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c0a:	2180      	movs	r1, #128	@ 0x80
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f001 f9c7 	bl	8012fa0 <USBD_LL_StallEP>
 8011c12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c14:	e040      	b.n	8011c98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011c16:	6839      	ldr	r1, [r7, #0]
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f000 fc68 	bl	80124ee <USBD_CtlError>
              break;
 8011c1e:	e03b      	b.n	8011c98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	885b      	ldrh	r3, [r3, #2]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d136      	bne.n	8011c96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011c28:	7bbb      	ldrb	r3, [r7, #14]
 8011c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d004      	beq.n	8011c3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011c32:	7bbb      	ldrb	r3, [r7, #14]
 8011c34:	4619      	mov	r1, r3
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f001 f9d1 	bl	8012fde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f000 fd2d 	bl	801269c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011c42:	7bbb      	ldrb	r3, [r7, #14]
 8011c44:	4619      	mov	r1, r3
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7ff fde4 	bl	8011814 <USBD_CoreFindEP>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011c50:	7b7b      	ldrb	r3, [r7, #13]
 8011c52:	2bff      	cmp	r3, #255	@ 0xff
 8011c54:	d01f      	beq.n	8011c96 <USBD_StdEPReq+0x1c6>
 8011c56:	7b7b      	ldrb	r3, [r7, #13]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d11c      	bne.n	8011c96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011c5c:	7b7a      	ldrb	r2, [r7, #13]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011c64:	7b7a      	ldrb	r2, [r7, #13]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	32ae      	adds	r2, #174	@ 0xae
 8011c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d010      	beq.n	8011c96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011c74:	7b7a      	ldrb	r2, [r7, #13]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	32ae      	adds	r2, #174	@ 0xae
 8011c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c7e:	689b      	ldr	r3, [r3, #8]
 8011c80:	6839      	ldr	r1, [r7, #0]
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	4798      	blx	r3
 8011c86:	4603      	mov	r3, r0
 8011c88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011c8a:	e004      	b.n	8011c96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011c8c:	6839      	ldr	r1, [r7, #0]
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f000 fc2d 	bl	80124ee <USBD_CtlError>
              break;
 8011c94:	e000      	b.n	8011c98 <USBD_StdEPReq+0x1c8>
              break;
 8011c96:	bf00      	nop
          }
          break;
 8011c98:	e0ab      	b.n	8011df2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	2b02      	cmp	r3, #2
 8011ca4:	d002      	beq.n	8011cac <USBD_StdEPReq+0x1dc>
 8011ca6:	2b03      	cmp	r3, #3
 8011ca8:	d032      	beq.n	8011d10 <USBD_StdEPReq+0x240>
 8011caa:	e097      	b.n	8011ddc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011cac:	7bbb      	ldrb	r3, [r7, #14]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d007      	beq.n	8011cc2 <USBD_StdEPReq+0x1f2>
 8011cb2:	7bbb      	ldrb	r3, [r7, #14]
 8011cb4:	2b80      	cmp	r3, #128	@ 0x80
 8011cb6:	d004      	beq.n	8011cc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011cb8:	6839      	ldr	r1, [r7, #0]
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 fc17 	bl	80124ee <USBD_CtlError>
                break;
 8011cc0:	e091      	b.n	8011de6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011cc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	da0b      	bge.n	8011ce2 <USBD_StdEPReq+0x212>
 8011cca:	7bbb      	ldrb	r3, [r7, #14]
 8011ccc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011cd0:	4613      	mov	r3, r2
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	4413      	add	r3, r2
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	3310      	adds	r3, #16
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	4413      	add	r3, r2
 8011cde:	3304      	adds	r3, #4
 8011ce0:	e00b      	b.n	8011cfa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011ce2:	7bbb      	ldrb	r3, [r7, #14]
 8011ce4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ce8:	4613      	mov	r3, r2
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	4413      	add	r3, r2
 8011cee:	009b      	lsls	r3, r3, #2
 8011cf0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	4413      	add	r3, r2
 8011cf8:	3304      	adds	r3, #4
 8011cfa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	2202      	movs	r2, #2
 8011d06:	4619      	mov	r1, r3
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f000 fc6d 	bl	80125e8 <USBD_CtlSendData>
              break;
 8011d0e:	e06a      	b.n	8011de6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	da11      	bge.n	8011d3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011d18:	7bbb      	ldrb	r3, [r7, #14]
 8011d1a:	f003 020f 	and.w	r2, r3, #15
 8011d1e:	6879      	ldr	r1, [r7, #4]
 8011d20:	4613      	mov	r3, r2
 8011d22:	009b      	lsls	r3, r3, #2
 8011d24:	4413      	add	r3, r2
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	440b      	add	r3, r1
 8011d2a:	3324      	adds	r3, #36	@ 0x24
 8011d2c:	881b      	ldrh	r3, [r3, #0]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d117      	bne.n	8011d62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011d32:	6839      	ldr	r1, [r7, #0]
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f000 fbda 	bl	80124ee <USBD_CtlError>
                  break;
 8011d3a:	e054      	b.n	8011de6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011d3c:	7bbb      	ldrb	r3, [r7, #14]
 8011d3e:	f003 020f 	and.w	r2, r3, #15
 8011d42:	6879      	ldr	r1, [r7, #4]
 8011d44:	4613      	mov	r3, r2
 8011d46:	009b      	lsls	r3, r3, #2
 8011d48:	4413      	add	r3, r2
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	440b      	add	r3, r1
 8011d4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011d52:	881b      	ldrh	r3, [r3, #0]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d104      	bne.n	8011d62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011d58:	6839      	ldr	r1, [r7, #0]
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f000 fbc7 	bl	80124ee <USBD_CtlError>
                  break;
 8011d60:	e041      	b.n	8011de6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	da0b      	bge.n	8011d82 <USBD_StdEPReq+0x2b2>
 8011d6a:	7bbb      	ldrb	r3, [r7, #14]
 8011d6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011d70:	4613      	mov	r3, r2
 8011d72:	009b      	lsls	r3, r3, #2
 8011d74:	4413      	add	r3, r2
 8011d76:	009b      	lsls	r3, r3, #2
 8011d78:	3310      	adds	r3, #16
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	3304      	adds	r3, #4
 8011d80:	e00b      	b.n	8011d9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011d82:	7bbb      	ldrb	r3, [r7, #14]
 8011d84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d88:	4613      	mov	r3, r2
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	4413      	add	r3, r2
 8011d8e:	009b      	lsls	r3, r3, #2
 8011d90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011d94:	687a      	ldr	r2, [r7, #4]
 8011d96:	4413      	add	r3, r2
 8011d98:	3304      	adds	r3, #4
 8011d9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011d9c:	7bbb      	ldrb	r3, [r7, #14]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d002      	beq.n	8011da8 <USBD_StdEPReq+0x2d8>
 8011da2:	7bbb      	ldrb	r3, [r7, #14]
 8011da4:	2b80      	cmp	r3, #128	@ 0x80
 8011da6:	d103      	bne.n	8011db0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	2200      	movs	r2, #0
 8011dac:	601a      	str	r2, [r3, #0]
 8011dae:	e00e      	b.n	8011dce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011db0:	7bbb      	ldrb	r3, [r7, #14]
 8011db2:	4619      	mov	r1, r3
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f001 f931 	bl	801301c <USBD_LL_IsStallEP>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d003      	beq.n	8011dc8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	601a      	str	r2, [r3, #0]
 8011dc6:	e002      	b.n	8011dce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	2202      	movs	r2, #2
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f000 fc07 	bl	80125e8 <USBD_CtlSendData>
              break;
 8011dda:	e004      	b.n	8011de6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011ddc:	6839      	ldr	r1, [r7, #0]
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f000 fb85 	bl	80124ee <USBD_CtlError>
              break;
 8011de4:	bf00      	nop
          }
          break;
 8011de6:	e004      	b.n	8011df2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011de8:	6839      	ldr	r1, [r7, #0]
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 fb7f 	bl	80124ee <USBD_CtlError>
          break;
 8011df0:	bf00      	nop
      }
      break;
 8011df2:	e005      	b.n	8011e00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011df4:	6839      	ldr	r1, [r7, #0]
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f000 fb79 	bl	80124ee <USBD_CtlError>
      break;
 8011dfc:	e000      	b.n	8011e00 <USBD_StdEPReq+0x330>
      break;
 8011dfe:	bf00      	nop
  }

  return ret;
 8011e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3710      	adds	r7, #16
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
	...

08011e0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011e16:	2300      	movs	r3, #0
 8011e18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	885b      	ldrh	r3, [r3, #2]
 8011e26:	0a1b      	lsrs	r3, r3, #8
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	3b01      	subs	r3, #1
 8011e2c:	2b0e      	cmp	r3, #14
 8011e2e:	f200 8152 	bhi.w	80120d6 <USBD_GetDescriptor+0x2ca>
 8011e32:	a201      	add	r2, pc, #4	@ (adr r2, 8011e38 <USBD_GetDescriptor+0x2c>)
 8011e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e38:	08011ea9 	.word	0x08011ea9
 8011e3c:	08011ec1 	.word	0x08011ec1
 8011e40:	08011f01 	.word	0x08011f01
 8011e44:	080120d7 	.word	0x080120d7
 8011e48:	080120d7 	.word	0x080120d7
 8011e4c:	08012077 	.word	0x08012077
 8011e50:	080120a3 	.word	0x080120a3
 8011e54:	080120d7 	.word	0x080120d7
 8011e58:	080120d7 	.word	0x080120d7
 8011e5c:	080120d7 	.word	0x080120d7
 8011e60:	080120d7 	.word	0x080120d7
 8011e64:	080120d7 	.word	0x080120d7
 8011e68:	080120d7 	.word	0x080120d7
 8011e6c:	080120d7 	.word	0x080120d7
 8011e70:	08011e75 	.word	0x08011e75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011e7a:	69db      	ldr	r3, [r3, #28]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00b      	beq.n	8011e98 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011e86:	69db      	ldr	r3, [r3, #28]
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	7c12      	ldrb	r2, [r2, #16]
 8011e8c:	f107 0108 	add.w	r1, r7, #8
 8011e90:	4610      	mov	r0, r2
 8011e92:	4798      	blx	r3
 8011e94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e96:	e126      	b.n	80120e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011e98:	6839      	ldr	r1, [r7, #0]
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 fb27 	bl	80124ee <USBD_CtlError>
        err++;
 8011ea0:	7afb      	ldrb	r3, [r7, #11]
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	72fb      	strb	r3, [r7, #11]
      break;
 8011ea6:	e11e      	b.n	80120e6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	7c12      	ldrb	r2, [r2, #16]
 8011eb4:	f107 0108 	add.w	r1, r7, #8
 8011eb8:	4610      	mov	r0, r2
 8011eba:	4798      	blx	r3
 8011ebc:	60f8      	str	r0, [r7, #12]
      break;
 8011ebe:	e112      	b.n	80120e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	7c1b      	ldrb	r3, [r3, #16]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d10d      	bne.n	8011ee4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ed0:	f107 0208 	add.w	r2, r7, #8
 8011ed4:	4610      	mov	r0, r2
 8011ed6:	4798      	blx	r3
 8011ed8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	3301      	adds	r3, #1
 8011ede:	2202      	movs	r2, #2
 8011ee0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011ee2:	e100      	b.n	80120e6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011eec:	f107 0208 	add.w	r2, r7, #8
 8011ef0:	4610      	mov	r0, r2
 8011ef2:	4798      	blx	r3
 8011ef4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	3301      	adds	r3, #1
 8011efa:	2202      	movs	r2, #2
 8011efc:	701a      	strb	r2, [r3, #0]
      break;
 8011efe:	e0f2      	b.n	80120e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	885b      	ldrh	r3, [r3, #2]
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	2b05      	cmp	r3, #5
 8011f08:	f200 80ac 	bhi.w	8012064 <USBD_GetDescriptor+0x258>
 8011f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8011f14 <USBD_GetDescriptor+0x108>)
 8011f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f12:	bf00      	nop
 8011f14:	08011f2d 	.word	0x08011f2d
 8011f18:	08011f61 	.word	0x08011f61
 8011f1c:	08011f95 	.word	0x08011f95
 8011f20:	08011fc9 	.word	0x08011fc9
 8011f24:	08011ffd 	.word	0x08011ffd
 8011f28:	08012031 	.word	0x08012031
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00b      	beq.n	8011f50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	687a      	ldr	r2, [r7, #4]
 8011f42:	7c12      	ldrb	r2, [r2, #16]
 8011f44:	f107 0108 	add.w	r1, r7, #8
 8011f48:	4610      	mov	r0, r2
 8011f4a:	4798      	blx	r3
 8011f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f4e:	e091      	b.n	8012074 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011f50:	6839      	ldr	r1, [r7, #0]
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f000 facb 	bl	80124ee <USBD_CtlError>
            err++;
 8011f58:	7afb      	ldrb	r3, [r7, #11]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8011f5e:	e089      	b.n	8012074 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f66:	689b      	ldr	r3, [r3, #8]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d00b      	beq.n	8011f84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f72:	689b      	ldr	r3, [r3, #8]
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	7c12      	ldrb	r2, [r2, #16]
 8011f78:	f107 0108 	add.w	r1, r7, #8
 8011f7c:	4610      	mov	r0, r2
 8011f7e:	4798      	blx	r3
 8011f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f82:	e077      	b.n	8012074 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011f84:	6839      	ldr	r1, [r7, #0]
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 fab1 	bl	80124ee <USBD_CtlError>
            err++;
 8011f8c:	7afb      	ldrb	r3, [r7, #11]
 8011f8e:	3301      	adds	r3, #1
 8011f90:	72fb      	strb	r3, [r7, #11]
          break;
 8011f92:	e06f      	b.n	8012074 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d00b      	beq.n	8011fb8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fa6:	68db      	ldr	r3, [r3, #12]
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	7c12      	ldrb	r2, [r2, #16]
 8011fac:	f107 0108 	add.w	r1, r7, #8
 8011fb0:	4610      	mov	r0, r2
 8011fb2:	4798      	blx	r3
 8011fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011fb6:	e05d      	b.n	8012074 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011fb8:	6839      	ldr	r1, [r7, #0]
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 fa97 	bl	80124ee <USBD_CtlError>
            err++;
 8011fc0:	7afb      	ldrb	r3, [r7, #11]
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8011fc6:	e055      	b.n	8012074 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fce:	691b      	ldr	r3, [r3, #16]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00b      	beq.n	8011fec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fda:	691b      	ldr	r3, [r3, #16]
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	7c12      	ldrb	r2, [r2, #16]
 8011fe0:	f107 0108 	add.w	r1, r7, #8
 8011fe4:	4610      	mov	r0, r2
 8011fe6:	4798      	blx	r3
 8011fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011fea:	e043      	b.n	8012074 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011fec:	6839      	ldr	r1, [r7, #0]
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f000 fa7d 	bl	80124ee <USBD_CtlError>
            err++;
 8011ff4:	7afb      	ldrb	r3, [r7, #11]
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8011ffa:	e03b      	b.n	8012074 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012002:	695b      	ldr	r3, [r3, #20]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d00b      	beq.n	8012020 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801200e:	695b      	ldr	r3, [r3, #20]
 8012010:	687a      	ldr	r2, [r7, #4]
 8012012:	7c12      	ldrb	r2, [r2, #16]
 8012014:	f107 0108 	add.w	r1, r7, #8
 8012018:	4610      	mov	r0, r2
 801201a:	4798      	blx	r3
 801201c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801201e:	e029      	b.n	8012074 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012020:	6839      	ldr	r1, [r7, #0]
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f000 fa63 	bl	80124ee <USBD_CtlError>
            err++;
 8012028:	7afb      	ldrb	r3, [r7, #11]
 801202a:	3301      	adds	r3, #1
 801202c:	72fb      	strb	r3, [r7, #11]
          break;
 801202e:	e021      	b.n	8012074 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012036:	699b      	ldr	r3, [r3, #24]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d00b      	beq.n	8012054 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012042:	699b      	ldr	r3, [r3, #24]
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	7c12      	ldrb	r2, [r2, #16]
 8012048:	f107 0108 	add.w	r1, r7, #8
 801204c:	4610      	mov	r0, r2
 801204e:	4798      	blx	r3
 8012050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012052:	e00f      	b.n	8012074 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012054:	6839      	ldr	r1, [r7, #0]
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f000 fa49 	bl	80124ee <USBD_CtlError>
            err++;
 801205c:	7afb      	ldrb	r3, [r7, #11]
 801205e:	3301      	adds	r3, #1
 8012060:	72fb      	strb	r3, [r7, #11]
          break;
 8012062:	e007      	b.n	8012074 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012064:	6839      	ldr	r1, [r7, #0]
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 fa41 	bl	80124ee <USBD_CtlError>
          err++;
 801206c:	7afb      	ldrb	r3, [r7, #11]
 801206e:	3301      	adds	r3, #1
 8012070:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012072:	bf00      	nop
      }
      break;
 8012074:	e037      	b.n	80120e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	7c1b      	ldrb	r3, [r3, #16]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d109      	bne.n	8012092 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012086:	f107 0208 	add.w	r2, r7, #8
 801208a:	4610      	mov	r0, r2
 801208c:	4798      	blx	r3
 801208e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012090:	e029      	b.n	80120e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012092:	6839      	ldr	r1, [r7, #0]
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f000 fa2a 	bl	80124ee <USBD_CtlError>
        err++;
 801209a:	7afb      	ldrb	r3, [r7, #11]
 801209c:	3301      	adds	r3, #1
 801209e:	72fb      	strb	r3, [r7, #11]
      break;
 80120a0:	e021      	b.n	80120e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	7c1b      	ldrb	r3, [r3, #16]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d10d      	bne.n	80120c6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120b2:	f107 0208 	add.w	r2, r7, #8
 80120b6:	4610      	mov	r0, r2
 80120b8:	4798      	blx	r3
 80120ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	3301      	adds	r3, #1
 80120c0:	2207      	movs	r2, #7
 80120c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80120c4:	e00f      	b.n	80120e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80120c6:	6839      	ldr	r1, [r7, #0]
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 fa10 	bl	80124ee <USBD_CtlError>
        err++;
 80120ce:	7afb      	ldrb	r3, [r7, #11]
 80120d0:	3301      	adds	r3, #1
 80120d2:	72fb      	strb	r3, [r7, #11]
      break;
 80120d4:	e007      	b.n	80120e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80120d6:	6839      	ldr	r1, [r7, #0]
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f000 fa08 	bl	80124ee <USBD_CtlError>
      err++;
 80120de:	7afb      	ldrb	r3, [r7, #11]
 80120e0:	3301      	adds	r3, #1
 80120e2:	72fb      	strb	r3, [r7, #11]
      break;
 80120e4:	bf00      	nop
  }

  if (err != 0U)
 80120e6:	7afb      	ldrb	r3, [r7, #11]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d11e      	bne.n	801212a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	88db      	ldrh	r3, [r3, #6]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d016      	beq.n	8012122 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80120f4:	893b      	ldrh	r3, [r7, #8]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d00e      	beq.n	8012118 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	88da      	ldrh	r2, [r3, #6]
 80120fe:	893b      	ldrh	r3, [r7, #8]
 8012100:	4293      	cmp	r3, r2
 8012102:	bf28      	it	cs
 8012104:	4613      	movcs	r3, r2
 8012106:	b29b      	uxth	r3, r3
 8012108:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801210a:	893b      	ldrh	r3, [r7, #8]
 801210c:	461a      	mov	r2, r3
 801210e:	68f9      	ldr	r1, [r7, #12]
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 fa69 	bl	80125e8 <USBD_CtlSendData>
 8012116:	e009      	b.n	801212c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012118:	6839      	ldr	r1, [r7, #0]
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f000 f9e7 	bl	80124ee <USBD_CtlError>
 8012120:	e004      	b.n	801212c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f000 faba 	bl	801269c <USBD_CtlSendStatus>
 8012128:	e000      	b.n	801212c <USBD_GetDescriptor+0x320>
    return;
 801212a:	bf00      	nop
  }
}
 801212c:	3710      	adds	r7, #16
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop

08012134 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	889b      	ldrh	r3, [r3, #4]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d131      	bne.n	80121aa <USBD_SetAddress+0x76>
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	88db      	ldrh	r3, [r3, #6]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d12d      	bne.n	80121aa <USBD_SetAddress+0x76>
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	885b      	ldrh	r3, [r3, #2]
 8012152:	2b7f      	cmp	r3, #127	@ 0x7f
 8012154:	d829      	bhi.n	80121aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	885b      	ldrh	r3, [r3, #2]
 801215a:	b2db      	uxtb	r3, r3
 801215c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012160:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012168:	b2db      	uxtb	r3, r3
 801216a:	2b03      	cmp	r3, #3
 801216c:	d104      	bne.n	8012178 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801216e:	6839      	ldr	r1, [r7, #0]
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f000 f9bc 	bl	80124ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012176:	e01d      	b.n	80121b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	7bfa      	ldrb	r2, [r7, #15]
 801217c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012180:	7bfb      	ldrb	r3, [r7, #15]
 8012182:	4619      	mov	r1, r3
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 ff75 	bl	8013074 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f000 fa86 	bl	801269c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012190:	7bfb      	ldrb	r3, [r7, #15]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d004      	beq.n	80121a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2202      	movs	r2, #2
 801219a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801219e:	e009      	b.n	80121b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2201      	movs	r2, #1
 80121a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121a8:	e004      	b.n	80121b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80121aa:	6839      	ldr	r1, [r7, #0]
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f000 f99e 	bl	80124ee <USBD_CtlError>
  }
}
 80121b2:	bf00      	nop
 80121b4:	bf00      	nop
 80121b6:	3710      	adds	r7, #16
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80121c6:	2300      	movs	r3, #0
 80121c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	885b      	ldrh	r3, [r3, #2]
 80121ce:	b2da      	uxtb	r2, r3
 80121d0:	4b4e      	ldr	r3, [pc, #312]	@ (801230c <USBD_SetConfig+0x150>)
 80121d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80121d4:	4b4d      	ldr	r3, [pc, #308]	@ (801230c <USBD_SetConfig+0x150>)
 80121d6:	781b      	ldrb	r3, [r3, #0]
 80121d8:	2b01      	cmp	r3, #1
 80121da:	d905      	bls.n	80121e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80121dc:	6839      	ldr	r1, [r7, #0]
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f000 f985 	bl	80124ee <USBD_CtlError>
    return USBD_FAIL;
 80121e4:	2303      	movs	r3, #3
 80121e6:	e08c      	b.n	8012302 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121ee:	b2db      	uxtb	r3, r3
 80121f0:	2b02      	cmp	r3, #2
 80121f2:	d002      	beq.n	80121fa <USBD_SetConfig+0x3e>
 80121f4:	2b03      	cmp	r3, #3
 80121f6:	d029      	beq.n	801224c <USBD_SetConfig+0x90>
 80121f8:	e075      	b.n	80122e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80121fa:	4b44      	ldr	r3, [pc, #272]	@ (801230c <USBD_SetConfig+0x150>)
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d020      	beq.n	8012244 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012202:	4b42      	ldr	r3, [pc, #264]	@ (801230c <USBD_SetConfig+0x150>)
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	461a      	mov	r2, r3
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801220c:	4b3f      	ldr	r3, [pc, #252]	@ (801230c <USBD_SetConfig+0x150>)
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	4619      	mov	r1, r3
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f7fe ffb9 	bl	801118a <USBD_SetClassConfig>
 8012218:	4603      	mov	r3, r0
 801221a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801221c:	7bfb      	ldrb	r3, [r7, #15]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d008      	beq.n	8012234 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012222:	6839      	ldr	r1, [r7, #0]
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f000 f962 	bl	80124ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2202      	movs	r2, #2
 801222e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012232:	e065      	b.n	8012300 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 fa31 	bl	801269c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2203      	movs	r2, #3
 801223e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012242:	e05d      	b.n	8012300 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f000 fa29 	bl	801269c <USBD_CtlSendStatus>
      break;
 801224a:	e059      	b.n	8012300 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801224c:	4b2f      	ldr	r3, [pc, #188]	@ (801230c <USBD_SetConfig+0x150>)
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d112      	bne.n	801227a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2202      	movs	r2, #2
 8012258:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801225c:	4b2b      	ldr	r3, [pc, #172]	@ (801230c <USBD_SetConfig+0x150>)
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	461a      	mov	r2, r3
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012266:	4b29      	ldr	r3, [pc, #164]	@ (801230c <USBD_SetConfig+0x150>)
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	4619      	mov	r1, r3
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f7fe ffa8 	bl	80111c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f000 fa12 	bl	801269c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012278:	e042      	b.n	8012300 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801227a:	4b24      	ldr	r3, [pc, #144]	@ (801230c <USBD_SetConfig+0x150>)
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	461a      	mov	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	429a      	cmp	r2, r3
 8012286:	d02a      	beq.n	80122de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	685b      	ldr	r3, [r3, #4]
 801228c:	b2db      	uxtb	r3, r3
 801228e:	4619      	mov	r1, r3
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7fe ff96 	bl	80111c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012296:	4b1d      	ldr	r3, [pc, #116]	@ (801230c <USBD_SetConfig+0x150>)
 8012298:	781b      	ldrb	r3, [r3, #0]
 801229a:	461a      	mov	r2, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80122a0:	4b1a      	ldr	r3, [pc, #104]	@ (801230c <USBD_SetConfig+0x150>)
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	4619      	mov	r1, r3
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f7fe ff6f 	bl	801118a <USBD_SetClassConfig>
 80122ac:	4603      	mov	r3, r0
 80122ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80122b0:	7bfb      	ldrb	r3, [r7, #15]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d00f      	beq.n	80122d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80122b6:	6839      	ldr	r1, [r7, #0]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 f918 	bl	80124ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	b2db      	uxtb	r3, r3
 80122c4:	4619      	mov	r1, r3
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f7fe ff7b 	bl	80111c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2202      	movs	r2, #2
 80122d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80122d4:	e014      	b.n	8012300 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 f9e0 	bl	801269c <USBD_CtlSendStatus>
      break;
 80122dc:	e010      	b.n	8012300 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 f9dc 	bl	801269c <USBD_CtlSendStatus>
      break;
 80122e4:	e00c      	b.n	8012300 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80122e6:	6839      	ldr	r1, [r7, #0]
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f000 f900 	bl	80124ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80122ee:	4b07      	ldr	r3, [pc, #28]	@ (801230c <USBD_SetConfig+0x150>)
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	4619      	mov	r1, r3
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f7fe ff64 	bl	80111c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80122fa:	2303      	movs	r3, #3
 80122fc:	73fb      	strb	r3, [r7, #15]
      break;
 80122fe:	bf00      	nop
  }

  return ret;
 8012300:	7bfb      	ldrb	r3, [r7, #15]
}
 8012302:	4618      	mov	r0, r3
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	240004d0 	.word	0x240004d0

08012310 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	88db      	ldrh	r3, [r3, #6]
 801231e:	2b01      	cmp	r3, #1
 8012320:	d004      	beq.n	801232c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012322:	6839      	ldr	r1, [r7, #0]
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f000 f8e2 	bl	80124ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801232a:	e023      	b.n	8012374 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012332:	b2db      	uxtb	r3, r3
 8012334:	2b02      	cmp	r3, #2
 8012336:	dc02      	bgt.n	801233e <USBD_GetConfig+0x2e>
 8012338:	2b00      	cmp	r3, #0
 801233a:	dc03      	bgt.n	8012344 <USBD_GetConfig+0x34>
 801233c:	e015      	b.n	801236a <USBD_GetConfig+0x5a>
 801233e:	2b03      	cmp	r3, #3
 8012340:	d00b      	beq.n	801235a <USBD_GetConfig+0x4a>
 8012342:	e012      	b.n	801236a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2200      	movs	r2, #0
 8012348:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	3308      	adds	r3, #8
 801234e:	2201      	movs	r2, #1
 8012350:	4619      	mov	r1, r3
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 f948 	bl	80125e8 <USBD_CtlSendData>
        break;
 8012358:	e00c      	b.n	8012374 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	3304      	adds	r3, #4
 801235e:	2201      	movs	r2, #1
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 f940 	bl	80125e8 <USBD_CtlSendData>
        break;
 8012368:	e004      	b.n	8012374 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801236a:	6839      	ldr	r1, [r7, #0]
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f000 f8be 	bl	80124ee <USBD_CtlError>
        break;
 8012372:	bf00      	nop
}
 8012374:	bf00      	nop
 8012376:	3708      	adds	r7, #8
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801238c:	b2db      	uxtb	r3, r3
 801238e:	3b01      	subs	r3, #1
 8012390:	2b02      	cmp	r3, #2
 8012392:	d81e      	bhi.n	80123d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	88db      	ldrh	r3, [r3, #6]
 8012398:	2b02      	cmp	r3, #2
 801239a:	d004      	beq.n	80123a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801239c:	6839      	ldr	r1, [r7, #0]
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f000 f8a5 	bl	80124ee <USBD_CtlError>
        break;
 80123a4:	e01a      	b.n	80123dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2201      	movs	r2, #1
 80123aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d005      	beq.n	80123c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	68db      	ldr	r3, [r3, #12]
 80123ba:	f043 0202 	orr.w	r2, r3, #2
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	330c      	adds	r3, #12
 80123c6:	2202      	movs	r2, #2
 80123c8:	4619      	mov	r1, r3
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 f90c 	bl	80125e8 <USBD_CtlSendData>
      break;
 80123d0:	e004      	b.n	80123dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80123d2:	6839      	ldr	r1, [r7, #0]
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 f88a 	bl	80124ee <USBD_CtlError>
      break;
 80123da:	bf00      	nop
  }
}
 80123dc:	bf00      	nop
 80123de:	3708      	adds	r7, #8
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b082      	sub	sp, #8
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	885b      	ldrh	r3, [r3, #2]
 80123f2:	2b01      	cmp	r3, #1
 80123f4:	d107      	bne.n	8012406 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2201      	movs	r2, #1
 80123fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 f94c 	bl	801269c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012404:	e013      	b.n	801242e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	885b      	ldrh	r3, [r3, #2]
 801240a:	2b02      	cmp	r3, #2
 801240c:	d10b      	bne.n	8012426 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	889b      	ldrh	r3, [r3, #4]
 8012412:	0a1b      	lsrs	r3, r3, #8
 8012414:	b29b      	uxth	r3, r3
 8012416:	b2da      	uxtb	r2, r3
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f000 f93c 	bl	801269c <USBD_CtlSendStatus>
}
 8012424:	e003      	b.n	801242e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012426:	6839      	ldr	r1, [r7, #0]
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f000 f860 	bl	80124ee <USBD_CtlError>
}
 801242e:	bf00      	nop
 8012430:	3708      	adds	r7, #8
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}

08012436 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012436:	b580      	push	{r7, lr}
 8012438:	b082      	sub	sp, #8
 801243a:	af00      	add	r7, sp, #0
 801243c:	6078      	str	r0, [r7, #4]
 801243e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012446:	b2db      	uxtb	r3, r3
 8012448:	3b01      	subs	r3, #1
 801244a:	2b02      	cmp	r3, #2
 801244c:	d80b      	bhi.n	8012466 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	885b      	ldrh	r3, [r3, #2]
 8012452:	2b01      	cmp	r3, #1
 8012454:	d10c      	bne.n	8012470 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2200      	movs	r2, #0
 801245a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f000 f91c 	bl	801269c <USBD_CtlSendStatus>
      }
      break;
 8012464:	e004      	b.n	8012470 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012466:	6839      	ldr	r1, [r7, #0]
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f000 f840 	bl	80124ee <USBD_CtlError>
      break;
 801246e:	e000      	b.n	8012472 <USBD_ClrFeature+0x3c>
      break;
 8012470:	bf00      	nop
  }
}
 8012472:	bf00      	nop
 8012474:	3708      	adds	r7, #8
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}

0801247a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801247a:	b580      	push	{r7, lr}
 801247c:	b084      	sub	sp, #16
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
 8012482:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	781a      	ldrb	r2, [r3, #0]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	3301      	adds	r3, #1
 8012494:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	781a      	ldrb	r2, [r3, #0]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	3301      	adds	r3, #1
 80124a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80124a4:	68f8      	ldr	r0, [r7, #12]
 80124a6:	f7ff fa16 	bl	80118d6 <SWAPBYTE>
 80124aa:	4603      	mov	r3, r0
 80124ac:	461a      	mov	r2, r3
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	3301      	adds	r3, #1
 80124b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	3301      	adds	r3, #1
 80124bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f7ff fa09 	bl	80118d6 <SWAPBYTE>
 80124c4:	4603      	mov	r3, r0
 80124c6:	461a      	mov	r2, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	3301      	adds	r3, #1
 80124d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	3301      	adds	r3, #1
 80124d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80124d8:	68f8      	ldr	r0, [r7, #12]
 80124da:	f7ff f9fc 	bl	80118d6 <SWAPBYTE>
 80124de:	4603      	mov	r3, r0
 80124e0:	461a      	mov	r2, r3
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	80da      	strh	r2, [r3, #6]
}
 80124e6:	bf00      	nop
 80124e8:	3710      	adds	r7, #16
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b082      	sub	sp, #8
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
 80124f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80124f8:	2180      	movs	r1, #128	@ 0x80
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f000 fd50 	bl	8012fa0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012500:	2100      	movs	r1, #0
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f000 fd4c 	bl	8012fa0 <USBD_LL_StallEP>
}
 8012508:	bf00      	nop
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b086      	sub	sp, #24
 8012514:	af00      	add	r7, sp, #0
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801251c:	2300      	movs	r3, #0
 801251e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d042      	beq.n	80125ac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801252a:	6938      	ldr	r0, [r7, #16]
 801252c:	f000 f842 	bl	80125b4 <USBD_GetLen>
 8012530:	4603      	mov	r3, r0
 8012532:	3301      	adds	r3, #1
 8012534:	005b      	lsls	r3, r3, #1
 8012536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801253a:	d808      	bhi.n	801254e <USBD_GetString+0x3e>
 801253c:	6938      	ldr	r0, [r7, #16]
 801253e:	f000 f839 	bl	80125b4 <USBD_GetLen>
 8012542:	4603      	mov	r3, r0
 8012544:	3301      	adds	r3, #1
 8012546:	b29b      	uxth	r3, r3
 8012548:	005b      	lsls	r3, r3, #1
 801254a:	b29a      	uxth	r2, r3
 801254c:	e001      	b.n	8012552 <USBD_GetString+0x42>
 801254e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012556:	7dfb      	ldrb	r3, [r7, #23]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	4413      	add	r3, r2
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	7812      	ldrb	r2, [r2, #0]
 8012560:	701a      	strb	r2, [r3, #0]
  idx++;
 8012562:	7dfb      	ldrb	r3, [r7, #23]
 8012564:	3301      	adds	r3, #1
 8012566:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012568:	7dfb      	ldrb	r3, [r7, #23]
 801256a:	68ba      	ldr	r2, [r7, #8]
 801256c:	4413      	add	r3, r2
 801256e:	2203      	movs	r2, #3
 8012570:	701a      	strb	r2, [r3, #0]
  idx++;
 8012572:	7dfb      	ldrb	r3, [r7, #23]
 8012574:	3301      	adds	r3, #1
 8012576:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012578:	e013      	b.n	80125a2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801257a:	7dfb      	ldrb	r3, [r7, #23]
 801257c:	68ba      	ldr	r2, [r7, #8]
 801257e:	4413      	add	r3, r2
 8012580:	693a      	ldr	r2, [r7, #16]
 8012582:	7812      	ldrb	r2, [r2, #0]
 8012584:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	3301      	adds	r3, #1
 801258a:	613b      	str	r3, [r7, #16]
    idx++;
 801258c:	7dfb      	ldrb	r3, [r7, #23]
 801258e:	3301      	adds	r3, #1
 8012590:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012592:	7dfb      	ldrb	r3, [r7, #23]
 8012594:	68ba      	ldr	r2, [r7, #8]
 8012596:	4413      	add	r3, r2
 8012598:	2200      	movs	r2, #0
 801259a:	701a      	strb	r2, [r3, #0]
    idx++;
 801259c:	7dfb      	ldrb	r3, [r7, #23]
 801259e:	3301      	adds	r3, #1
 80125a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d1e7      	bne.n	801257a <USBD_GetString+0x6a>
 80125aa:	e000      	b.n	80125ae <USBD_GetString+0x9e>
    return;
 80125ac:	bf00      	nop
  }
}
 80125ae:	3718      	adds	r7, #24
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}

080125b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80125b4:	b480      	push	{r7}
 80125b6:	b085      	sub	sp, #20
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80125bc:	2300      	movs	r3, #0
 80125be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80125c4:	e005      	b.n	80125d2 <USBD_GetLen+0x1e>
  {
    len++;
 80125c6:	7bfb      	ldrb	r3, [r7, #15]
 80125c8:	3301      	adds	r3, #1
 80125ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	3301      	adds	r3, #1
 80125d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1f5      	bne.n	80125c6 <USBD_GetLen+0x12>
  }

  return len;
 80125da:	7bfb      	ldrb	r3, [r7, #15]
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3714      	adds	r7, #20
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr

080125e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	60f8      	str	r0, [r7, #12]
 80125f0:	60b9      	str	r1, [r7, #8]
 80125f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2202      	movs	r2, #2
 80125f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	68ba      	ldr	r2, [r7, #8]
 801260c:	2100      	movs	r1, #0
 801260e:	68f8      	ldr	r0, [r7, #12]
 8012610:	f000 fd4f 	bl	80130b2 <USBD_LL_Transmit>

  return USBD_OK;
 8012614:	2300      	movs	r3, #0
}
 8012616:	4618      	mov	r0, r3
 8012618:	3710      	adds	r7, #16
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}

0801261e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801261e:	b580      	push	{r7, lr}
 8012620:	b084      	sub	sp, #16
 8012622:	af00      	add	r7, sp, #0
 8012624:	60f8      	str	r0, [r7, #12]
 8012626:	60b9      	str	r1, [r7, #8]
 8012628:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	68ba      	ldr	r2, [r7, #8]
 801262e:	2100      	movs	r1, #0
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f000 fd3e 	bl	80130b2 <USBD_LL_Transmit>

  return USBD_OK;
 8012636:	2300      	movs	r3, #0
}
 8012638:	4618      	mov	r0, r3
 801263a:	3710      	adds	r7, #16
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	60b9      	str	r1, [r7, #8]
 801264a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2203      	movs	r2, #3
 8012650:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	687a      	ldr	r2, [r7, #4]
 8012658:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	68ba      	ldr	r2, [r7, #8]
 8012668:	2100      	movs	r1, #0
 801266a:	68f8      	ldr	r0, [r7, #12]
 801266c:	f000 fd42 	bl	80130f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012670:	2300      	movs	r3, #0
}
 8012672:	4618      	mov	r0, r3
 8012674:	3710      	adds	r7, #16
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}

0801267a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801267a:	b580      	push	{r7, lr}
 801267c:	b084      	sub	sp, #16
 801267e:	af00      	add	r7, sp, #0
 8012680:	60f8      	str	r0, [r7, #12]
 8012682:	60b9      	str	r1, [r7, #8]
 8012684:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	68ba      	ldr	r2, [r7, #8]
 801268a:	2100      	movs	r1, #0
 801268c:	68f8      	ldr	r0, [r7, #12]
 801268e:	f000 fd31 	bl	80130f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012692:	2300      	movs	r3, #0
}
 8012694:	4618      	mov	r0, r3
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2204      	movs	r2, #4
 80126a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80126ac:	2300      	movs	r3, #0
 80126ae:	2200      	movs	r2, #0
 80126b0:	2100      	movs	r1, #0
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f000 fcfd 	bl	80130b2 <USBD_LL_Transmit>

  return USBD_OK;
 80126b8:	2300      	movs	r3, #0
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}

080126c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80126c2:	b580      	push	{r7, lr}
 80126c4:	b082      	sub	sp, #8
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2205      	movs	r2, #5
 80126ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80126d2:	2300      	movs	r3, #0
 80126d4:	2200      	movs	r2, #0
 80126d6:	2100      	movs	r1, #0
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 fd0b 	bl	80130f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80126de:	2300      	movs	r3, #0
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80126ec:	2201      	movs	r2, #1
 80126ee:	4913      	ldr	r1, [pc, #76]	@ (801273c <MX_USB_DEVICE_Init+0x54>)
 80126f0:	4813      	ldr	r0, [pc, #76]	@ (8012740 <MX_USB_DEVICE_Init+0x58>)
 80126f2:	f7fe fccd 	bl	8011090 <USBD_Init>
 80126f6:	4603      	mov	r3, r0
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d001      	beq.n	8012700 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80126fc:	f7ee fd22 	bl	8001144 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8012700:	4910      	ldr	r1, [pc, #64]	@ (8012744 <MX_USB_DEVICE_Init+0x5c>)
 8012702:	480f      	ldr	r0, [pc, #60]	@ (8012740 <MX_USB_DEVICE_Init+0x58>)
 8012704:	f7fe fcf4 	bl	80110f0 <USBD_RegisterClass>
 8012708:	4603      	mov	r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	d001      	beq.n	8012712 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801270e:	f7ee fd19 	bl	8001144 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8012712:	490d      	ldr	r1, [pc, #52]	@ (8012748 <MX_USB_DEVICE_Init+0x60>)
 8012714:	480a      	ldr	r0, [pc, #40]	@ (8012740 <MX_USB_DEVICE_Init+0x58>)
 8012716:	f7fe fbeb 	bl	8010ef0 <USBD_CDC_RegisterInterface>
 801271a:	4603      	mov	r3, r0
 801271c:	2b00      	cmp	r3, #0
 801271e:	d001      	beq.n	8012724 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012720:	f7ee fd10 	bl	8001144 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8012724:	4806      	ldr	r0, [pc, #24]	@ (8012740 <MX_USB_DEVICE_Init+0x58>)
 8012726:	f7fe fd19 	bl	801115c <USBD_Start>
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d001      	beq.n	8012734 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012730:	f7ee fd08 	bl	8001144 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012734:	f7f7 ff1c 	bl	800a570 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012738:	bf00      	nop
 801273a:	bd80      	pop	{r7, pc}
 801273c:	240000b4 	.word	0x240000b4
 8012740:	240004d4 	.word	0x240004d4
 8012744:	24000020 	.word	0x24000020
 8012748:	240000a0 	.word	0x240000a0

0801274c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8012750:	2200      	movs	r2, #0
 8012752:	4905      	ldr	r1, [pc, #20]	@ (8012768 <CDC_Init_HS+0x1c>)
 8012754:	4805      	ldr	r0, [pc, #20]	@ (801276c <CDC_Init_HS+0x20>)
 8012756:	f7fe fbe5 	bl	8010f24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801275a:	4905      	ldr	r1, [pc, #20]	@ (8012770 <CDC_Init_HS+0x24>)
 801275c:	4803      	ldr	r0, [pc, #12]	@ (801276c <CDC_Init_HS+0x20>)
 801275e:	f7fe fc03 	bl	8010f68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012762:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012764:	4618      	mov	r0, r3
 8012766:	bd80      	pop	{r7, pc}
 8012768:	24000fb0 	.word	0x24000fb0
 801276c:	240004d4 	.word	0x240004d4
 8012770:	240007b0 	.word	0x240007b0

08012774 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8012774:	b480      	push	{r7}
 8012776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012778:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801277a:	4618      	mov	r0, r3
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr

08012784 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012784:	b480      	push	{r7}
 8012786:	b083      	sub	sp, #12
 8012788:	af00      	add	r7, sp, #0
 801278a:	4603      	mov	r3, r0
 801278c:	6039      	str	r1, [r7, #0]
 801278e:	71fb      	strb	r3, [r7, #7]
 8012790:	4613      	mov	r3, r2
 8012792:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8012794:	79fb      	ldrb	r3, [r7, #7]
 8012796:	2b23      	cmp	r3, #35	@ 0x23
 8012798:	d84a      	bhi.n	8012830 <CDC_Control_HS+0xac>
 801279a:	a201      	add	r2, pc, #4	@ (adr r2, 80127a0 <CDC_Control_HS+0x1c>)
 801279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127a0:	08012831 	.word	0x08012831
 80127a4:	08012831 	.word	0x08012831
 80127a8:	08012831 	.word	0x08012831
 80127ac:	08012831 	.word	0x08012831
 80127b0:	08012831 	.word	0x08012831
 80127b4:	08012831 	.word	0x08012831
 80127b8:	08012831 	.word	0x08012831
 80127bc:	08012831 	.word	0x08012831
 80127c0:	08012831 	.word	0x08012831
 80127c4:	08012831 	.word	0x08012831
 80127c8:	08012831 	.word	0x08012831
 80127cc:	08012831 	.word	0x08012831
 80127d0:	08012831 	.word	0x08012831
 80127d4:	08012831 	.word	0x08012831
 80127d8:	08012831 	.word	0x08012831
 80127dc:	08012831 	.word	0x08012831
 80127e0:	08012831 	.word	0x08012831
 80127e4:	08012831 	.word	0x08012831
 80127e8:	08012831 	.word	0x08012831
 80127ec:	08012831 	.word	0x08012831
 80127f0:	08012831 	.word	0x08012831
 80127f4:	08012831 	.word	0x08012831
 80127f8:	08012831 	.word	0x08012831
 80127fc:	08012831 	.word	0x08012831
 8012800:	08012831 	.word	0x08012831
 8012804:	08012831 	.word	0x08012831
 8012808:	08012831 	.word	0x08012831
 801280c:	08012831 	.word	0x08012831
 8012810:	08012831 	.word	0x08012831
 8012814:	08012831 	.word	0x08012831
 8012818:	08012831 	.word	0x08012831
 801281c:	08012831 	.word	0x08012831
 8012820:	08012831 	.word	0x08012831
 8012824:	08012831 	.word	0x08012831
 8012828:	08012831 	.word	0x08012831
 801282c:	08012831 	.word	0x08012831
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012830:	bf00      	nop
  }

  return (USBD_OK);
 8012832:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8012834:	4618      	mov	r0, r3
 8012836:	370c      	adds	r7, #12
 8012838:	46bd      	mov	sp, r7
 801283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283e:	4770      	bx	lr

08012840 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801284a:	6879      	ldr	r1, [r7, #4]
 801284c:	480b      	ldr	r0, [pc, #44]	@ (801287c <CDC_Receive_HS+0x3c>)
 801284e:	f7fe fb8b 	bl	8010f68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8012852:	480a      	ldr	r0, [pc, #40]	@ (801287c <CDC_Receive_HS+0x3c>)
 8012854:	f7fe fbe6 	bl	8011024 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferHS, *Len);
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	4619      	mov	r1, r3
 801285e:	4808      	ldr	r0, [pc, #32]	@ (8012880 <CDC_Receive_HS+0x40>)
 8012860:	f7ed ffa0 	bl	80007a4 <USB_CDC_RxHandler>
  memset(UserRxBufferHS, '\0', *Len);
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	461a      	mov	r2, r3
 801286a:	2100      	movs	r1, #0
 801286c:	4804      	ldr	r0, [pc, #16]	@ (8012880 <CDC_Receive_HS+0x40>)
 801286e:	f000 fcb9 	bl	80131e4 <memset>
  return (USBD_OK);
 8012872:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8012874:	4618      	mov	r0, r3
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}
 801287c:	240004d4 	.word	0x240004d4
 8012880:	240007b0 	.word	0x240007b0

08012884 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b084      	sub	sp, #16
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	460b      	mov	r3, r1
 801288e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012890:	2300      	movs	r3, #0
 8012892:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8012894:	4b0d      	ldr	r3, [pc, #52]	@ (80128cc <CDC_Transmit_HS+0x48>)
 8012896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801289a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d001      	beq.n	80128aa <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80128a6:	2301      	movs	r3, #1
 80128a8:	e00b      	b.n	80128c2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80128aa:	887b      	ldrh	r3, [r7, #2]
 80128ac:	461a      	mov	r2, r3
 80128ae:	6879      	ldr	r1, [r7, #4]
 80128b0:	4806      	ldr	r0, [pc, #24]	@ (80128cc <CDC_Transmit_HS+0x48>)
 80128b2:	f7fe fb37 	bl	8010f24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80128b6:	4805      	ldr	r0, [pc, #20]	@ (80128cc <CDC_Transmit_HS+0x48>)
 80128b8:	f7fe fb74 	bl	8010fa4 <USBD_CDC_TransmitPacket>
 80128bc:	4603      	mov	r3, r0
 80128be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80128c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3710      	adds	r7, #16
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	240004d4 	.word	0x240004d4

080128d0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80128d0:	b480      	push	{r7}
 80128d2:	b087      	sub	sp, #28
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	4613      	mov	r3, r2
 80128dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80128de:	2300      	movs	r3, #0
 80128e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80128e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	371c      	adds	r7, #28
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr
	...

080128f4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	4603      	mov	r3, r0
 80128fc:	6039      	str	r1, [r7, #0]
 80128fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	2212      	movs	r2, #18
 8012904:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8012906:	4b03      	ldr	r3, [pc, #12]	@ (8012914 <USBD_HS_DeviceDescriptor+0x20>)
}
 8012908:	4618      	mov	r0, r3
 801290a:	370c      	adds	r7, #12
 801290c:	46bd      	mov	sp, r7
 801290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012912:	4770      	bx	lr
 8012914:	240000d4 	.word	0x240000d4

08012918 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	4603      	mov	r3, r0
 8012920:	6039      	str	r1, [r7, #0]
 8012922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	2204      	movs	r2, #4
 8012928:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801292a:	4b03      	ldr	r3, [pc, #12]	@ (8012938 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801292c:	4618      	mov	r0, r3
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr
 8012938:	240000e8 	.word	0x240000e8

0801293c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	4603      	mov	r3, r0
 8012944:	6039      	str	r1, [r7, #0]
 8012946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012948:	79fb      	ldrb	r3, [r7, #7]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d105      	bne.n	801295a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801294e:	683a      	ldr	r2, [r7, #0]
 8012950:	4907      	ldr	r1, [pc, #28]	@ (8012970 <USBD_HS_ProductStrDescriptor+0x34>)
 8012952:	4808      	ldr	r0, [pc, #32]	@ (8012974 <USBD_HS_ProductStrDescriptor+0x38>)
 8012954:	f7ff fddc 	bl	8012510 <USBD_GetString>
 8012958:	e004      	b.n	8012964 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801295a:	683a      	ldr	r2, [r7, #0]
 801295c:	4904      	ldr	r1, [pc, #16]	@ (8012970 <USBD_HS_ProductStrDescriptor+0x34>)
 801295e:	4805      	ldr	r0, [pc, #20]	@ (8012974 <USBD_HS_ProductStrDescriptor+0x38>)
 8012960:	f7ff fdd6 	bl	8012510 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012964:	4b02      	ldr	r3, [pc, #8]	@ (8012970 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8012966:	4618      	mov	r0, r3
 8012968:	3708      	adds	r7, #8
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	240017b0 	.word	0x240017b0
 8012974:	080136a0 	.word	0x080136a0

08012978 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	4603      	mov	r3, r0
 8012980:	6039      	str	r1, [r7, #0]
 8012982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012984:	683a      	ldr	r2, [r7, #0]
 8012986:	4904      	ldr	r1, [pc, #16]	@ (8012998 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8012988:	4804      	ldr	r0, [pc, #16]	@ (801299c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801298a:	f7ff fdc1 	bl	8012510 <USBD_GetString>
  return USBD_StrDesc;
 801298e:	4b02      	ldr	r3, [pc, #8]	@ (8012998 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012990:	4618      	mov	r0, r3
 8012992:	3708      	adds	r7, #8
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}
 8012998:	240017b0 	.word	0x240017b0
 801299c:	080136b8 	.word	0x080136b8

080129a0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b082      	sub	sp, #8
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	4603      	mov	r3, r0
 80129a8:	6039      	str	r1, [r7, #0]
 80129aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	221a      	movs	r2, #26
 80129b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80129b2:	f000 f843 	bl	8012a3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80129b6:	4b02      	ldr	r3, [pc, #8]	@ (80129c0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3708      	adds	r7, #8
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	240000ec 	.word	0x240000ec

080129c4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	4603      	mov	r3, r0
 80129cc:	6039      	str	r1, [r7, #0]
 80129ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80129d0:	79fb      	ldrb	r3, [r7, #7]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d105      	bne.n	80129e2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80129d6:	683a      	ldr	r2, [r7, #0]
 80129d8:	4907      	ldr	r1, [pc, #28]	@ (80129f8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80129da:	4808      	ldr	r0, [pc, #32]	@ (80129fc <USBD_HS_ConfigStrDescriptor+0x38>)
 80129dc:	f7ff fd98 	bl	8012510 <USBD_GetString>
 80129e0:	e004      	b.n	80129ec <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	4904      	ldr	r1, [pc, #16]	@ (80129f8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80129e6:	4805      	ldr	r0, [pc, #20]	@ (80129fc <USBD_HS_ConfigStrDescriptor+0x38>)
 80129e8:	f7ff fd92 	bl	8012510 <USBD_GetString>
  }
  return USBD_StrDesc;
 80129ec:	4b02      	ldr	r3, [pc, #8]	@ (80129f8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3708      	adds	r7, #8
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	240017b0 	.word	0x240017b0
 80129fc:	080136cc 	.word	0x080136cc

08012a00 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	4603      	mov	r3, r0
 8012a08:	6039      	str	r1, [r7, #0]
 8012a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012a0c:	79fb      	ldrb	r3, [r7, #7]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d105      	bne.n	8012a1e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012a12:	683a      	ldr	r2, [r7, #0]
 8012a14:	4907      	ldr	r1, [pc, #28]	@ (8012a34 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012a16:	4808      	ldr	r0, [pc, #32]	@ (8012a38 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012a18:	f7ff fd7a 	bl	8012510 <USBD_GetString>
 8012a1c:	e004      	b.n	8012a28 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012a1e:	683a      	ldr	r2, [r7, #0]
 8012a20:	4904      	ldr	r1, [pc, #16]	@ (8012a34 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012a22:	4805      	ldr	r0, [pc, #20]	@ (8012a38 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012a24:	f7ff fd74 	bl	8012510 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a28:	4b02      	ldr	r3, [pc, #8]	@ (8012a34 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3708      	adds	r7, #8
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}
 8012a32:	bf00      	nop
 8012a34:	240017b0 	.word	0x240017b0
 8012a38:	080136d8 	.word	0x080136d8

08012a3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012a42:	4b0f      	ldr	r3, [pc, #60]	@ (8012a80 <Get_SerialNum+0x44>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012a48:	4b0e      	ldr	r3, [pc, #56]	@ (8012a84 <Get_SerialNum+0x48>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8012a88 <Get_SerialNum+0x4c>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	4413      	add	r3, r2
 8012a5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d009      	beq.n	8012a76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012a62:	2208      	movs	r2, #8
 8012a64:	4909      	ldr	r1, [pc, #36]	@ (8012a8c <Get_SerialNum+0x50>)
 8012a66:	68f8      	ldr	r0, [r7, #12]
 8012a68:	f000 f814 	bl	8012a94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012a6c:	2204      	movs	r2, #4
 8012a6e:	4908      	ldr	r1, [pc, #32]	@ (8012a90 <Get_SerialNum+0x54>)
 8012a70:	68b8      	ldr	r0, [r7, #8]
 8012a72:	f000 f80f 	bl	8012a94 <IntToUnicode>
  }
}
 8012a76:	bf00      	nop
 8012a78:	3710      	adds	r7, #16
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	08fff800 	.word	0x08fff800
 8012a84:	08fff804 	.word	0x08fff804
 8012a88:	08fff808 	.word	0x08fff808
 8012a8c:	240000ee 	.word	0x240000ee
 8012a90:	240000fe 	.word	0x240000fe

08012a94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012a94:	b480      	push	{r7}
 8012a96:	b087      	sub	sp, #28
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	60f8      	str	r0, [r7, #12]
 8012a9c:	60b9      	str	r1, [r7, #8]
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	75fb      	strb	r3, [r7, #23]
 8012aaa:	e027      	b.n	8012afc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	0f1b      	lsrs	r3, r3, #28
 8012ab0:	2b09      	cmp	r3, #9
 8012ab2:	d80b      	bhi.n	8012acc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	0f1b      	lsrs	r3, r3, #28
 8012ab8:	b2da      	uxtb	r2, r3
 8012aba:	7dfb      	ldrb	r3, [r7, #23]
 8012abc:	005b      	lsls	r3, r3, #1
 8012abe:	4619      	mov	r1, r3
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	440b      	add	r3, r1
 8012ac4:	3230      	adds	r2, #48	@ 0x30
 8012ac6:	b2d2      	uxtb	r2, r2
 8012ac8:	701a      	strb	r2, [r3, #0]
 8012aca:	e00a      	b.n	8012ae2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	0f1b      	lsrs	r3, r3, #28
 8012ad0:	b2da      	uxtb	r2, r3
 8012ad2:	7dfb      	ldrb	r3, [r7, #23]
 8012ad4:	005b      	lsls	r3, r3, #1
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	440b      	add	r3, r1
 8012adc:	3237      	adds	r2, #55	@ 0x37
 8012ade:	b2d2      	uxtb	r2, r2
 8012ae0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	011b      	lsls	r3, r3, #4
 8012ae6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012ae8:	7dfb      	ldrb	r3, [r7, #23]
 8012aea:	005b      	lsls	r3, r3, #1
 8012aec:	3301      	adds	r3, #1
 8012aee:	68ba      	ldr	r2, [r7, #8]
 8012af0:	4413      	add	r3, r2
 8012af2:	2200      	movs	r2, #0
 8012af4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012af6:	7dfb      	ldrb	r3, [r7, #23]
 8012af8:	3301      	adds	r3, #1
 8012afa:	75fb      	strb	r3, [r7, #23]
 8012afc:	7dfa      	ldrb	r2, [r7, #23]
 8012afe:	79fb      	ldrb	r3, [r7, #7]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d3d3      	bcc.n	8012aac <IntToUnicode+0x18>
  }
}
 8012b04:	bf00      	nop
 8012b06:	bf00      	nop
 8012b08:	371c      	adds	r7, #28
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b10:	4770      	bx	lr
	...

08012b14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b0ba      	sub	sp, #232	@ 0xe8
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012b20:	2200      	movs	r2, #0
 8012b22:	601a      	str	r2, [r3, #0]
 8012b24:	605a      	str	r2, [r3, #4]
 8012b26:	609a      	str	r2, [r3, #8]
 8012b28:	60da      	str	r2, [r3, #12]
 8012b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012b2c:	f107 0310 	add.w	r3, r7, #16
 8012b30:	22c0      	movs	r2, #192	@ 0xc0
 8012b32:	2100      	movs	r1, #0
 8012b34:	4618      	mov	r0, r3
 8012b36:	f000 fb55 	bl	80131e4 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	4a43      	ldr	r2, [pc, #268]	@ (8012c4c <HAL_PCD_MspInit+0x138>)
 8012b40:	4293      	cmp	r3, r2
 8012b42:	d17f      	bne.n	8012c44 <HAL_PCD_MspInit+0x130>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012b44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8012b48:	f04f 0300 	mov.w	r3, #0
 8012b4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8012b50:	2301      	movs	r3, #1
 8012b52:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8012b54:	2312      	movs	r3, #18
 8012b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8012b58:	2302      	movs	r3, #2
 8012b5a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8012b5c:	2303      	movs	r3, #3
 8012b5e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 128;
 8012b60:	2380      	movs	r3, #128	@ 0x80
 8012b62:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8012b64:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8012b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8012b72:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8012b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012b7a:	f107 0310 	add.w	r3, r7, #16
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7f8 fd18 	bl	800b5b4 <HAL_RCCEx_PeriphCLKConfig>
 8012b84:	4603      	mov	r3, r0
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d001      	beq.n	8012b8e <HAL_PCD_MspInit+0x7a>
    {
      Error_Handler();
 8012b8a:	f7ee fadb 	bl	8001144 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012b8e:	f7f7 fcef 	bl	800a570 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012b92:	4b2f      	ldr	r3, [pc, #188]	@ (8012c50 <HAL_PCD_MspInit+0x13c>)
 8012b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8012b98:	4a2d      	ldr	r2, [pc, #180]	@ (8012c50 <HAL_PCD_MspInit+0x13c>)
 8012b9a:	f043 0301 	orr.w	r3, r3, #1
 8012b9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8012ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8012c50 <HAL_PCD_MspInit+0x13c>)
 8012ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8012ba8:	f003 0301 	and.w	r3, r3, #1
 8012bac:	60fb      	str	r3, [r7, #12]
 8012bae:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012bb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012bb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012bc4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012bc8:	4619      	mov	r1, r3
 8012bca:	4822      	ldr	r0, [pc, #136]	@ (8012c54 <HAL_PCD_MspInit+0x140>)
 8012bcc:	f7f5 f8aa 	bl	8007d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012bd0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012bd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bd8:	2302      	movs	r3, #2
 8012bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bde:	2300      	movs	r3, #0
 8012be0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012be4:	2300      	movs	r3, #0
 8012be6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012bea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012bee:	4619      	mov	r1, r3
 8012bf0:	4818      	ldr	r0, [pc, #96]	@ (8012c54 <HAL_PCD_MspInit+0x140>)
 8012bf2:	f7f5 f897 	bl	8007d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012bf6:	4b16      	ldr	r3, [pc, #88]	@ (8012c50 <HAL_PCD_MspInit+0x13c>)
 8012bf8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8012bfc:	4a14      	ldr	r2, [pc, #80]	@ (8012c50 <HAL_PCD_MspInit+0x13c>)
 8012bfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012c02:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8012c06:	4b12      	ldr	r3, [pc, #72]	@ (8012c50 <HAL_PCD_MspInit+0x13c>)
 8012c08:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8012c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012c10:	60bb      	str	r3, [r7, #8]
 8012c12:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8012c14:	2200      	movs	r2, #0
 8012c16:	2100      	movs	r1, #0
 8012c18:	204a      	movs	r0, #74	@ 0x4a
 8012c1a:	f7f1 f952 	bl	8003ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8012c1e:	204a      	movs	r0, #74	@ 0x4a
 8012c20:	f7f1 f969 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8012c24:	2200      	movs	r2, #0
 8012c26:	2100      	movs	r1, #0
 8012c28:	204b      	movs	r0, #75	@ 0x4b
 8012c2a:	f7f1 f94a 	bl	8003ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8012c2e:	204b      	movs	r0, #75	@ 0x4b
 8012c30:	f7f1 f961 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012c34:	2200      	movs	r2, #0
 8012c36:	2100      	movs	r1, #0
 8012c38:	204d      	movs	r0, #77	@ 0x4d
 8012c3a:	f7f1 f942 	bl	8003ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012c3e:	204d      	movs	r0, #77	@ 0x4d
 8012c40:	f7f1 f959 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012c44:	bf00      	nop
 8012c46:	37e8      	adds	r7, #232	@ 0xe8
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	40040000 	.word	0x40040000
 8012c50:	58024400 	.word	0x58024400
 8012c54:	58020000 	.word	0x58020000

08012c58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	4610      	mov	r0, r2
 8012c70:	f7fe fac1 	bl	80111f6 <USBD_LL_SetupStage>
}
 8012c74:	bf00      	nop
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}

08012c7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	460b      	mov	r3, r1
 8012c86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012c8e:	78fa      	ldrb	r2, [r7, #3]
 8012c90:	6879      	ldr	r1, [r7, #4]
 8012c92:	4613      	mov	r3, r2
 8012c94:	00db      	lsls	r3, r3, #3
 8012c96:	4413      	add	r3, r2
 8012c98:	009b      	lsls	r3, r3, #2
 8012c9a:	440b      	add	r3, r1
 8012c9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	78fb      	ldrb	r3, [r7, #3]
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	f7fe fafb 	bl	80112a0 <USBD_LL_DataOutStage>
}
 8012caa:	bf00      	nop
 8012cac:	3708      	adds	r7, #8
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}

08012cb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cb2:	b580      	push	{r7, lr}
 8012cb4:	b082      	sub	sp, #8
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6078      	str	r0, [r7, #4]
 8012cba:	460b      	mov	r3, r1
 8012cbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012cc4:	78fa      	ldrb	r2, [r7, #3]
 8012cc6:	6879      	ldr	r1, [r7, #4]
 8012cc8:	4613      	mov	r3, r2
 8012cca:	00db      	lsls	r3, r3, #3
 8012ccc:	4413      	add	r3, r2
 8012cce:	009b      	lsls	r3, r3, #2
 8012cd0:	440b      	add	r3, r1
 8012cd2:	3320      	adds	r3, #32
 8012cd4:	681a      	ldr	r2, [r3, #0]
 8012cd6:	78fb      	ldrb	r3, [r7, #3]
 8012cd8:	4619      	mov	r1, r3
 8012cda:	f7fe fb94 	bl	8011406 <USBD_LL_DataInStage>
}
 8012cde:	bf00      	nop
 8012ce0:	3708      	adds	r7, #8
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b082      	sub	sp, #8
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7fe fcce 	bl	8011696 <USBD_LL_SOF>
}
 8012cfa:	bf00      	nop
 8012cfc:	3708      	adds	r7, #8
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}

08012d02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d02:	b580      	push	{r7, lr}
 8012d04:	b084      	sub	sp, #16
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	79db      	ldrb	r3, [r3, #7]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d102      	bne.n	8012d1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012d16:	2300      	movs	r3, #0
 8012d18:	73fb      	strb	r3, [r7, #15]
 8012d1a:	e008      	b.n	8012d2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	79db      	ldrb	r3, [r3, #7]
 8012d20:	2b02      	cmp	r3, #2
 8012d22:	d102      	bne.n	8012d2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012d24:	2301      	movs	r3, #1
 8012d26:	73fb      	strb	r3, [r7, #15]
 8012d28:	e001      	b.n	8012d2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012d2a:	f7ee fa0b 	bl	8001144 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d34:	7bfa      	ldrb	r2, [r7, #15]
 8012d36:	4611      	mov	r1, r2
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7fe fc68 	bl	801160e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7fe fc10 	bl	801156a <USBD_LL_Reset>
}
 8012d4a:	bf00      	nop
 8012d4c:	3710      	adds	r7, #16
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
	...

08012d54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b082      	sub	sp, #8
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7fe fc63 	bl	801162e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	687a      	ldr	r2, [r7, #4]
 8012d74:	6812      	ldr	r2, [r2, #0]
 8012d76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012d7a:	f043 0301 	orr.w	r3, r3, #1
 8012d7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	7adb      	ldrb	r3, [r3, #11]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d005      	beq.n	8012d94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012d88:	4b04      	ldr	r3, [pc, #16]	@ (8012d9c <HAL_PCD_SuspendCallback+0x48>)
 8012d8a:	691b      	ldr	r3, [r3, #16]
 8012d8c:	4a03      	ldr	r2, [pc, #12]	@ (8012d9c <HAL_PCD_SuspendCallback+0x48>)
 8012d8e:	f043 0306 	orr.w	r3, r3, #6
 8012d92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012d94:	bf00      	nop
 8012d96:	3708      	adds	r7, #8
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	e000ed00 	.word	0xe000ed00

08012da0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7fe fc59 	bl	8011666 <USBD_LL_Resume>
}
 8012db4:	bf00      	nop
 8012db6:	3708      	adds	r7, #8
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}

08012dbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	460b      	mov	r3, r1
 8012dc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012dce:	78fa      	ldrb	r2, [r7, #3]
 8012dd0:	4611      	mov	r1, r2
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fe fcb1 	bl	801173a <USBD_LL_IsoOUTIncomplete>
}
 8012dd8:	bf00      	nop
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	460b      	mov	r3, r1
 8012dea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012df2:	78fa      	ldrb	r2, [r7, #3]
 8012df4:	4611      	mov	r1, r2
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7fe fc6d 	bl	80116d6 <USBD_LL_IsoINIncomplete>
}
 8012dfc:	bf00      	nop
 8012dfe:	3708      	adds	r7, #8
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}

08012e04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7fe fcc3 	bl	801179e <USBD_LL_DevConnected>
}
 8012e18:	bf00      	nop
 8012e1a:	3708      	adds	r7, #8
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}

08012e20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7fe fcc0 	bl	80117b4 <USBD_LL_DevDisconnected>
}
 8012e34:	bf00      	nop
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}

08012e3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b082      	sub	sp, #8
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	2b01      	cmp	r3, #1
 8012e4a:	d140      	bne.n	8012ece <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8012e4c:	4a22      	ldr	r2, [pc, #136]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	4a20      	ldr	r2, [pc, #128]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e58:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8012e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8012edc <USBD_LL_Init+0xa0>)
 8012e60:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8012e62:	4b1d      	ldr	r3, [pc, #116]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e64:	2209      	movs	r2, #9
 8012e66:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8012e68:	4b1b      	ldr	r3, [pc, #108]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e6a:	2202      	movs	r2, #2
 8012e6c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8012e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e70:	2200      	movs	r2, #0
 8012e72:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8012e74:	4b18      	ldr	r3, [pc, #96]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e76:	2202      	movs	r2, #2
 8012e78:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8012e7a:	4b17      	ldr	r3, [pc, #92]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8012e80:	4b15      	ldr	r3, [pc, #84]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e82:	2200      	movs	r2, #0
 8012e84:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8012e86:	4b14      	ldr	r3, [pc, #80]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e88:	2200      	movs	r2, #0
 8012e8a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8012e8c:	4b12      	ldr	r3, [pc, #72]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e8e:	2201      	movs	r2, #1
 8012e90:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8012e92:	4b11      	ldr	r3, [pc, #68]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e94:	2200      	movs	r2, #0
 8012e96:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8012e98:	4b0f      	ldr	r3, [pc, #60]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8012e9e:	480e      	ldr	r0, [pc, #56]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012ea0:	f7f6 f88b 	bl	8008fba <HAL_PCD_Init>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d001      	beq.n	8012eae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012eaa:	f7ee f94b 	bl	8001144 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8012eae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012eb2:	4809      	ldr	r0, [pc, #36]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012eb4:	f7f7 fae1 	bl	800a47a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8012eb8:	2280      	movs	r2, #128	@ 0x80
 8012eba:	2100      	movs	r1, #0
 8012ebc:	4806      	ldr	r0, [pc, #24]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012ebe:	f7f7 fa95 	bl	800a3ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8012ec2:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8012ec6:	2101      	movs	r1, #1
 8012ec8:	4803      	ldr	r0, [pc, #12]	@ (8012ed8 <USBD_LL_Init+0x9c>)
 8012eca:	f7f7 fa8f 	bl	800a3ec <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8012ece:	2300      	movs	r3, #0
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3708      	adds	r7, #8
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	240019b0 	.word	0x240019b0
 8012edc:	40040000 	.word	0x40040000

08012ee0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012eec:	2300      	movs	r3, #0
 8012eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7f6 f96b 	bl	80091d2 <HAL_PCD_Start>
 8012efc:	4603      	mov	r3, r0
 8012efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f00:	7bfb      	ldrb	r3, [r7, #15]
 8012f02:	4618      	mov	r0, r3
 8012f04:	f000 f942 	bl	801318c <USBD_Get_USB_Status>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3710      	adds	r7, #16
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}

08012f16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012f16:	b580      	push	{r7, lr}
 8012f18:	b084      	sub	sp, #16
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	6078      	str	r0, [r7, #4]
 8012f1e:	4608      	mov	r0, r1
 8012f20:	4611      	mov	r1, r2
 8012f22:	461a      	mov	r2, r3
 8012f24:	4603      	mov	r3, r0
 8012f26:	70fb      	strb	r3, [r7, #3]
 8012f28:	460b      	mov	r3, r1
 8012f2a:	70bb      	strb	r3, [r7, #2]
 8012f2c:	4613      	mov	r3, r2
 8012f2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f30:	2300      	movs	r3, #0
 8012f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f34:	2300      	movs	r3, #0
 8012f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012f3e:	78bb      	ldrb	r3, [r7, #2]
 8012f40:	883a      	ldrh	r2, [r7, #0]
 8012f42:	78f9      	ldrb	r1, [r7, #3]
 8012f44:	f7f6 fe6c 	bl	8009c20 <HAL_PCD_EP_Open>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f4c:	7bfb      	ldrb	r3, [r7, #15]
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f000 f91c 	bl	801318c <USBD_Get_USB_Status>
 8012f54:	4603      	mov	r3, r0
 8012f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3710      	adds	r7, #16
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}

08012f62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012f62:	b580      	push	{r7, lr}
 8012f64:	b084      	sub	sp, #16
 8012f66:	af00      	add	r7, sp, #0
 8012f68:	6078      	str	r0, [r7, #4]
 8012f6a:	460b      	mov	r3, r1
 8012f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f72:	2300      	movs	r3, #0
 8012f74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012f7c:	78fa      	ldrb	r2, [r7, #3]
 8012f7e:	4611      	mov	r1, r2
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7f6 feb7 	bl	8009cf4 <HAL_PCD_EP_Close>
 8012f86:	4603      	mov	r3, r0
 8012f88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f8a:	7bfb      	ldrb	r3, [r7, #15]
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f000 f8fd 	bl	801318c <USBD_Get_USB_Status>
 8012f92:	4603      	mov	r3, r0
 8012f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3710      	adds	r7, #16
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	460b      	mov	r3, r1
 8012faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fac:	2300      	movs	r3, #0
 8012fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012fba:	78fa      	ldrb	r2, [r7, #3]
 8012fbc:	4611      	mov	r1, r2
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f7f6 ff6f 	bl	8009ea2 <HAL_PCD_EP_SetStall>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fc8:	7bfb      	ldrb	r3, [r7, #15]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f000 f8de 	bl	801318c <USBD_Get_USB_Status>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3710      	adds	r7, #16
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}

08012fde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012fde:	b580      	push	{r7, lr}
 8012fe0:	b084      	sub	sp, #16
 8012fe2:	af00      	add	r7, sp, #0
 8012fe4:	6078      	str	r0, [r7, #4]
 8012fe6:	460b      	mov	r3, r1
 8012fe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fea:	2300      	movs	r3, #0
 8012fec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012ff8:	78fa      	ldrb	r2, [r7, #3]
 8012ffa:	4611      	mov	r1, r2
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7f6 ffb3 	bl	8009f68 <HAL_PCD_EP_ClrStall>
 8013002:	4603      	mov	r3, r0
 8013004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013006:	7bfb      	ldrb	r3, [r7, #15]
 8013008:	4618      	mov	r0, r3
 801300a:	f000 f8bf 	bl	801318c <USBD_Get_USB_Status>
 801300e:	4603      	mov	r3, r0
 8013010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013012:	7bbb      	ldrb	r3, [r7, #14]
}
 8013014:	4618      	mov	r0, r3
 8013016:	3710      	adds	r7, #16
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}

0801301c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801301c:	b480      	push	{r7}
 801301e:	b085      	sub	sp, #20
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	460b      	mov	r3, r1
 8013026:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801302e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013034:	2b00      	cmp	r3, #0
 8013036:	da0b      	bge.n	8013050 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013038:	78fb      	ldrb	r3, [r7, #3]
 801303a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801303e:	68f9      	ldr	r1, [r7, #12]
 8013040:	4613      	mov	r3, r2
 8013042:	00db      	lsls	r3, r3, #3
 8013044:	4413      	add	r3, r2
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	440b      	add	r3, r1
 801304a:	3316      	adds	r3, #22
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	e00b      	b.n	8013068 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013050:	78fb      	ldrb	r3, [r7, #3]
 8013052:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013056:	68f9      	ldr	r1, [r7, #12]
 8013058:	4613      	mov	r3, r2
 801305a:	00db      	lsls	r3, r3, #3
 801305c:	4413      	add	r3, r2
 801305e:	009b      	lsls	r3, r3, #2
 8013060:	440b      	add	r3, r1
 8013062:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8013066:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013068:	4618      	mov	r0, r3
 801306a:	3714      	adds	r7, #20
 801306c:	46bd      	mov	sp, r7
 801306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013072:	4770      	bx	lr

08013074 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b084      	sub	sp, #16
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	460b      	mov	r3, r1
 801307e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013080:	2300      	movs	r3, #0
 8013082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013084:	2300      	movs	r3, #0
 8013086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801308e:	78fa      	ldrb	r2, [r7, #3]
 8013090:	4611      	mov	r1, r2
 8013092:	4618      	mov	r0, r3
 8013094:	f7f6 fda0 	bl	8009bd8 <HAL_PCD_SetAddress>
 8013098:	4603      	mov	r3, r0
 801309a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801309c:	7bfb      	ldrb	r3, [r7, #15]
 801309e:	4618      	mov	r0, r3
 80130a0:	f000 f874 	bl	801318c <USBD_Get_USB_Status>
 80130a4:	4603      	mov	r3, r0
 80130a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3710      	adds	r7, #16
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}

080130b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80130b2:	b580      	push	{r7, lr}
 80130b4:	b086      	sub	sp, #24
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	60f8      	str	r0, [r7, #12]
 80130ba:	607a      	str	r2, [r7, #4]
 80130bc:	603b      	str	r3, [r7, #0]
 80130be:	460b      	mov	r3, r1
 80130c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130c2:	2300      	movs	r3, #0
 80130c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130c6:	2300      	movs	r3, #0
 80130c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80130d0:	7af9      	ldrb	r1, [r7, #11]
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	687a      	ldr	r2, [r7, #4]
 80130d6:	f7f6 feaa 	bl	8009e2e <HAL_PCD_EP_Transmit>
 80130da:	4603      	mov	r3, r0
 80130dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80130de:	7dfb      	ldrb	r3, [r7, #23]
 80130e0:	4618      	mov	r0, r3
 80130e2:	f000 f853 	bl	801318c <USBD_Get_USB_Status>
 80130e6:	4603      	mov	r3, r0
 80130e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80130ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3718      	adds	r7, #24
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}

080130f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b086      	sub	sp, #24
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	60f8      	str	r0, [r7, #12]
 80130fc:	607a      	str	r2, [r7, #4]
 80130fe:	603b      	str	r3, [r7, #0]
 8013100:	460b      	mov	r3, r1
 8013102:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013104:	2300      	movs	r3, #0
 8013106:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013108:	2300      	movs	r3, #0
 801310a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013112:	7af9      	ldrb	r1, [r7, #11]
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	f7f6 fe36 	bl	8009d88 <HAL_PCD_EP_Receive>
 801311c:	4603      	mov	r3, r0
 801311e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013120:	7dfb      	ldrb	r3, [r7, #23]
 8013122:	4618      	mov	r0, r3
 8013124:	f000 f832 	bl	801318c <USBD_Get_USB_Status>
 8013128:	4603      	mov	r3, r0
 801312a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801312c:	7dbb      	ldrb	r3, [r7, #22]
}
 801312e:	4618      	mov	r0, r3
 8013130:	3718      	adds	r7, #24
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}

08013136 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013136:	b580      	push	{r7, lr}
 8013138:	b082      	sub	sp, #8
 801313a:	af00      	add	r7, sp, #0
 801313c:	6078      	str	r0, [r7, #4]
 801313e:	460b      	mov	r3, r1
 8013140:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013148:	78fa      	ldrb	r2, [r7, #3]
 801314a:	4611      	mov	r1, r2
 801314c:	4618      	mov	r0, r3
 801314e:	f7f6 fe56 	bl	8009dfe <HAL_PCD_EP_GetRxCount>
 8013152:	4603      	mov	r3, r0
}
 8013154:	4618      	mov	r0, r3
 8013156:	3708      	adds	r7, #8
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013164:	4b03      	ldr	r3, [pc, #12]	@ (8013174 <USBD_static_malloc+0x18>)
}
 8013166:	4618      	mov	r0, r3
 8013168:	370c      	adds	r7, #12
 801316a:	46bd      	mov	sp, r7
 801316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013170:	4770      	bx	lr
 8013172:	bf00      	nop
 8013174:	24001e94 	.word	0x24001e94

08013178 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013178:	b480      	push	{r7}
 801317a:	b083      	sub	sp, #12
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013180:	bf00      	nop
 8013182:	370c      	adds	r7, #12
 8013184:	46bd      	mov	sp, r7
 8013186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318a:	4770      	bx	lr

0801318c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801318c:	b480      	push	{r7}
 801318e:	b085      	sub	sp, #20
 8013190:	af00      	add	r7, sp, #0
 8013192:	4603      	mov	r3, r0
 8013194:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013196:	2300      	movs	r3, #0
 8013198:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801319a:	79fb      	ldrb	r3, [r7, #7]
 801319c:	2b03      	cmp	r3, #3
 801319e:	d817      	bhi.n	80131d0 <USBD_Get_USB_Status+0x44>
 80131a0:	a201      	add	r2, pc, #4	@ (adr r2, 80131a8 <USBD_Get_USB_Status+0x1c>)
 80131a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a6:	bf00      	nop
 80131a8:	080131b9 	.word	0x080131b9
 80131ac:	080131bf 	.word	0x080131bf
 80131b0:	080131c5 	.word	0x080131c5
 80131b4:	080131cb 	.word	0x080131cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80131b8:	2300      	movs	r3, #0
 80131ba:	73fb      	strb	r3, [r7, #15]
    break;
 80131bc:	e00b      	b.n	80131d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80131be:	2303      	movs	r3, #3
 80131c0:	73fb      	strb	r3, [r7, #15]
    break;
 80131c2:	e008      	b.n	80131d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80131c4:	2301      	movs	r3, #1
 80131c6:	73fb      	strb	r3, [r7, #15]
    break;
 80131c8:	e005      	b.n	80131d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80131ca:	2303      	movs	r3, #3
 80131cc:	73fb      	strb	r3, [r7, #15]
    break;
 80131ce:	e002      	b.n	80131d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80131d0:	2303      	movs	r3, #3
 80131d2:	73fb      	strb	r3, [r7, #15]
    break;
 80131d4:	bf00      	nop
  }
  return usb_status;
 80131d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3714      	adds	r7, #20
 80131dc:	46bd      	mov	sp, r7
 80131de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e2:	4770      	bx	lr

080131e4 <memset>:
 80131e4:	4402      	add	r2, r0
 80131e6:	4603      	mov	r3, r0
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d100      	bne.n	80131ee <memset+0xa>
 80131ec:	4770      	bx	lr
 80131ee:	f803 1b01 	strb.w	r1, [r3], #1
 80131f2:	e7f9      	b.n	80131e8 <memset+0x4>

080131f4 <__libc_init_array>:
 80131f4:	b570      	push	{r4, r5, r6, lr}
 80131f6:	4d0d      	ldr	r5, [pc, #52]	@ (801322c <__libc_init_array+0x38>)
 80131f8:	4c0d      	ldr	r4, [pc, #52]	@ (8013230 <__libc_init_array+0x3c>)
 80131fa:	1b64      	subs	r4, r4, r5
 80131fc:	10a4      	asrs	r4, r4, #2
 80131fe:	2600      	movs	r6, #0
 8013200:	42a6      	cmp	r6, r4
 8013202:	d109      	bne.n	8013218 <__libc_init_array+0x24>
 8013204:	4d0b      	ldr	r5, [pc, #44]	@ (8013234 <__libc_init_array+0x40>)
 8013206:	4c0c      	ldr	r4, [pc, #48]	@ (8013238 <__libc_init_array+0x44>)
 8013208:	f000 f826 	bl	8013258 <_init>
 801320c:	1b64      	subs	r4, r4, r5
 801320e:	10a4      	asrs	r4, r4, #2
 8013210:	2600      	movs	r6, #0
 8013212:	42a6      	cmp	r6, r4
 8013214:	d105      	bne.n	8013222 <__libc_init_array+0x2e>
 8013216:	bd70      	pop	{r4, r5, r6, pc}
 8013218:	f855 3b04 	ldr.w	r3, [r5], #4
 801321c:	4798      	blx	r3
 801321e:	3601      	adds	r6, #1
 8013220:	e7ee      	b.n	8013200 <__libc_init_array+0xc>
 8013222:	f855 3b04 	ldr.w	r3, [r5], #4
 8013226:	4798      	blx	r3
 8013228:	3601      	adds	r6, #1
 801322a:	e7f2      	b.n	8013212 <__libc_init_array+0x1e>
 801322c:	08013700 	.word	0x08013700
 8013230:	08013700 	.word	0x08013700
 8013234:	08013700 	.word	0x08013700
 8013238:	08013704 	.word	0x08013704

0801323c <memcpy>:
 801323c:	440a      	add	r2, r1
 801323e:	4291      	cmp	r1, r2
 8013240:	f100 33ff 	add.w	r3, r0, #4294967295
 8013244:	d100      	bne.n	8013248 <memcpy+0xc>
 8013246:	4770      	bx	lr
 8013248:	b510      	push	{r4, lr}
 801324a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801324e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013252:	4291      	cmp	r1, r2
 8013254:	d1f9      	bne.n	801324a <memcpy+0xe>
 8013256:	bd10      	pop	{r4, pc}

08013258 <_init>:
 8013258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801325a:	bf00      	nop
 801325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801325e:	bc08      	pop	{r3}
 8013260:	469e      	mov	lr, r3
 8013262:	4770      	bx	lr

08013264 <_fini>:
 8013264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013266:	bf00      	nop
 8013268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801326a:	bc08      	pop	{r3}
 801326c:	469e      	mov	lr, r3
 801326e:	4770      	bx	lr
