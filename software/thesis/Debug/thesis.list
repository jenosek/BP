
thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105f4  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080108a0  080108a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010a34  08010a34  00011a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08010a38  08010a38  00011a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000104  24000000  08010a3c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001fac  24000104  08010b40  00012104  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240020b0  08010b40  000130b0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00012104  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022ba7  00000000  00000000  00012132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004b1c  00000000  00000000  00034cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001b58  00000000  00000000  000397f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000014bf  00000000  00000000  0003b350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036978  00000000  00000000  0003c80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00026086  00000000  00000000  00073187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001505ca  00000000  00000000  0009920d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e97d7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007364  00000000  00000000  001e981c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000054  00000000  00000000  001f0b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000104 	.word	0x24000104
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08010888 	.word	0x08010888

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000108 	.word	0x24000108
 80002e8:	08010888 	.word	0x08010888

080002ec <I2C_write>:
#include "comms.h"


// I2C
void I2C_write(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af04      	add	r7, sp, #16
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	72fb      	strb	r3, [r7, #11]
 80002fa:	4613      	mov	r3, r2
 80002fc:	72bb      	strb	r3, [r7, #10]
	*status = HAL_I2C_Mem_Write(&hi2c2, dev_adress, reg_adress, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	b299      	uxth	r1, r3
 8000302:	7abb      	ldrb	r3, [r7, #10]
 8000304:	b29a      	uxth	r2, r3
 8000306:	2364      	movs	r3, #100	@ 0x64
 8000308:	9302      	str	r3, [sp, #8]
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2301      	movs	r3, #1
 8000314:	4805      	ldr	r0, [pc, #20]	@ (800032c <I2C_write+0x40>)
 8000316:	f005 fd45 	bl	8005da4 <HAL_I2C_Mem_Write>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	240002f4 	.word	0x240002f4

08000330 <I2C_read>:

void I2C_read(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af02      	add	r7, sp, #8
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	460b      	mov	r3, r1
 800033c:	72fb      	strb	r3, [r7, #11]
 800033e:	4613      	mov	r3, r2
 8000340:	72bb      	strb	r3, [r7, #10]
	dev_adress += 1;
 8000342:	7afb      	ldrb	r3, [r7, #11]
 8000344:	3301      	adds	r3, #1
 8000346:	72fb      	strb	r3, [r7, #11]
	*status = HAL_I2C_Master_Transmit(&hi2c2, dev_adress, &reg_adress, 1, 500);
 8000348:	7afb      	ldrb	r3, [r7, #11]
 800034a:	b299      	uxth	r1, r3
 800034c:	f107 020a 	add.w	r2, r7, #10
 8000350:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2301      	movs	r3, #1
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <I2C_read+0x60>)
 800035a:	f005 fb15 	bl	8005988 <HAL_I2C_Master_Transmit>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	701a      	strb	r2, [r3, #0]
	*status |= HAL_I2C_Master_Receive(&hi2c2, dev_adress, data, 1, 100);
 8000366:	7afb      	ldrb	r3, [r7, #11]
 8000368:	b299      	uxth	r1, r3
 800036a:	2364      	movs	r3, #100	@ 0x64
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2301      	movs	r3, #1
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4807      	ldr	r0, [pc, #28]	@ (8000390 <I2C_read+0x60>)
 8000374:	f005 fc20 	bl	8005bb8 <HAL_I2C_Master_Receive>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b2da      	uxtb	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	701a      	strb	r2, [r3, #0]
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	240002f4 	.word	0x240002f4

08000394 <HAL_SPI_TxCpltCallback>:

// SPI

// DMA callbacks, when SPI finishes
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 800039c:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <HAL_SPI_TxCpltCallback+0x1c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	24000120 	.word	0x24000120

080003b4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	24000120 	.word	0x24000120

080003d4 <SPI_check_CTS>:

void SPI_check_CTS(HAL_StatusTypeDef* status) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af02      	add	r7, sp, #8
 80003da:	6078      	str	r0, [r7, #4]
	uint8_t attempt = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]
	// Wait until Clear To Send (CTS) signal appears
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80003e0:	e00c      	b.n	80003fc <SPI_check_CTS+0x28>
		attempt++;
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	3301      	adds	r3, #1
 80003e6:	73fb      	strb	r3, [r7, #15]
		if (attempt > 10) {
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	2b0a      	cmp	r3, #10
 80003ec:	d903      	bls.n	80003f6 <SPI_check_CTS+0x22>
			*status = 0x3; // Timeout
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2203      	movs	r2, #3
 80003f2:	701a      	strb	r2, [r3, #0]
 80003f4:	e01d      	b.n	8000432 <SPI_check_CTS+0x5e>
			return;
		}
		HAL_Delay(100);
 80003f6:	2064      	movs	r0, #100	@ 0x64
 80003f8:	f001 fec2 	bl	8002180 <HAL_Delay>
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80003fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000400:	480d      	ldr	r0, [pc, #52]	@ (8000438 <SPI_check_CTS+0x64>)
 8000402:	f005 f9f3 	bl	80057ec <HAL_GPIO_ReadPin>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0ea      	beq.n	80003e2 <SPI_check_CTS+0xe>
	}


	// Clear CTS once found, so it can function properly - use GET_INT_STATUS command with three zero bytes
	uint8_t data[] = {0x20, 0, 0, 0};
 800040c:	2320      	movs	r3, #32
 800040e:	60bb      	str	r3, [r7, #8]
	*status |= HAL_SPI_TransmitReceive(&hspi4, data, data_buffer, 8, 100);
 8000410:	f107 0108 	add.w	r1, r7, #8
 8000414:	2364      	movs	r3, #100	@ 0x64
 8000416:	9300      	str	r3, [sp, #0]
 8000418:	2308      	movs	r3, #8
 800041a:	4a08      	ldr	r2, [pc, #32]	@ (800043c <SPI_check_CTS+0x68>)
 800041c:	4808      	ldr	r0, [pc, #32]	@ (8000440 <SPI_check_CTS+0x6c>)
 800041e:	f00b fb7f 	bl	800bb20 <HAL_SPI_TransmitReceive>
 8000422:	4603      	mov	r3, r0
 8000424:	461a      	mov	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	4313      	orrs	r3, r2
 800042c:	b2da      	uxtb	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	701a      	strb	r2, [r3, #0]

	// SI is now ready to receive data
	// NOTE: response should be read, however, I have not found any description on interrupt mapping in received structure
}
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	58021000 	.word	0x58021000
 800043c:	24000124 	.word	0x24000124
 8000440:	24000348 	.word	0x24000348

08000444 <SPI_write>:

void SPI_write(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
	// Transmit data array
	SPI_check_CTS(status);
 8000450:	68f8      	ldr	r0, [r7, #12]
 8000452:	f7ff ffbf 	bl	80003d4 <SPI_check_CTS>
	*status |= HAL_SPI_Transmit(&hspi4, data, *size, 100);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	461a      	mov	r2, r3
 800045c:	2364      	movs	r3, #100	@ 0x64
 800045e:	68b9      	ldr	r1, [r7, #8]
 8000460:	4807      	ldr	r0, [pc, #28]	@ (8000480 <SPI_write+0x3c>)
 8000462:	f00b f96f 	bl	800b744 <HAL_SPI_Transmit>
 8000466:	4603      	mov	r3, r0
 8000468:	461a      	mov	r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	4313      	orrs	r3, r2
 8000470:	b2da      	uxtb	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	701a      	strb	r2, [r3, #0]
	return;
 8000476:	bf00      	nop
}
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	24000348 	.word	0x24000348

08000484 <SPI_read>:

// SPI functions
void SPI_read(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af02      	add	r7, sp, #8
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
	// Receive data array of given size defined by provided array
	// Maximum data length provided by SI chip is 16 bytes (-> max. 16 messages)
	// Repetitive reading (from 1st byte) is possible, but it has not been implemented yet


	SPI_check_CTS(status);
 8000490:	68f8      	ldr	r0, [r7, #12]
 8000492:	f7ff ff9f 	bl	80003d4 <SPI_check_CTS>

	// Duplicate data array with command and zeros (use static buffer)
	data_buffer[0] = data[0];
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	781a      	ldrb	r2, [r3, #0]
 800049a:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <SPI_read+0x48>)
 800049c:	701a      	strb	r2, [r3, #0]


	// When reading data, don't forget to ignore the first byte
	*status |= HAL_SPI_TransmitReceive(&hspi4, data_buffer, data, *size, 70);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	461a      	mov	r2, r3
 80004a4:	2346      	movs	r3, #70	@ 0x46
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	4613      	mov	r3, r2
 80004aa:	68ba      	ldr	r2, [r7, #8]
 80004ac:	4907      	ldr	r1, [pc, #28]	@ (80004cc <SPI_read+0x48>)
 80004ae:	4808      	ldr	r0, [pc, #32]	@ (80004d0 <SPI_read+0x4c>)
 80004b0:	f00b fb36 	bl	800bb20 <HAL_SPI_TransmitReceive>
 80004b4:	4603      	mov	r3, r0
 80004b6:	461a      	mov	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4313      	orrs	r3, r2
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	701a      	strb	r2, [r3, #0]
}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	24000124 	.word	0x24000124
 80004d0:	24000348 	.word	0x24000348

080004d4 <PowerReset>:
	}
	strcpy(IDs[1], temp);
	return;
}

void PowerReset(HAL_StatusTypeDef* status) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers to default state
	I2C_read(status, USB_C_CONTROLLER, RESET, &reg_val);
 80004dc:	f107 030f 	add.w	r3, r7, #15
 80004e0:	220c      	movs	r2, #12
 80004e2:	2144      	movs	r1, #68	@ 0x44
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ff23 	bl	8000330 <I2C_read>
	reg_val++;
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	3301      	adds	r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, RESET, &reg_val);
 80004f2:	f107 030f 	add.w	r3, r7, #15
 80004f6:	220c      	movs	r2, #12
 80004f8:	2144      	movs	r1, #68	@ 0x44
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f7ff fef6 	bl	80002ec <I2C_write>
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <PowerInit>:


void PowerInit(HAL_StatusTypeDef* status) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers
	PowerReset(status);
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f7ff ffdf 	bl	80004d4 <PowerReset>

	// Set device as SINK (Disable SRC/SNK toggle and poll CC lines only)
	// CONTROL2:(MODE, TOGGLE)
	I2C_read(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 8000516:	f107 030f 	add.w	r3, r7, #15
 800051a:	2208      	movs	r2, #8
 800051c:	2144      	movs	r1, #68	@ 0x44
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f7ff ff06 	bl	8000330 <I2C_read>
	reg_val |= ((1<<2) | 1);
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	f043 0305 	orr.w	r3, r3, #5
 800052a:	b2db      	uxtb	r3, r3
 800052c:	73fb      	strb	r3, [r7, #15]
	reg_val &= ~(1<<1);
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	f023 0302 	bic.w	r3, r3, #2
 8000534:	b2db      	uxtb	r3, r3
 8000536:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 8000538:	f107 030f 	add.w	r3, r7, #15
 800053c:	2208      	movs	r2, #8
 800053e:	2144      	movs	r1, #68	@ 0x44
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff fed3 	bl	80002ec <I2C_write>


	// Initially, set current to USB default  (recommended by doc.)
	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 8000546:	f107 030f 	add.w	r3, r7, #15
 800054a:	2206      	movs	r2, #6
 800054c:	2144      	movs	r1, #68	@ 0x44
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f7ff feee 	bl	8000330 <I2C_read>
	reg_val &= ~(1<<3);
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	f023 0308 	bic.w	r3, r3, #8
 800055a:	b2db      	uxtb	r3, r3
 800055c:	73fb      	strb	r3, [r7, #15]
	reg_val |= (1 << 2);
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	b2db      	uxtb	r3, r3
 8000566:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 8000568:	f107 030f 	add.w	r3, r7, #15
 800056c:	2206      	movs	r2, #6
 800056e:	2144      	movs	r1, #68	@ 0x44
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff febb 	bl	80002ec <I2C_write>

	// Disable current source(s) at CC lines
	I2C_read(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 8000576:	f107 030f 	add.w	r3, r7, #15
 800057a:	2202      	movs	r2, #2
 800057c:	2144      	movs	r1, #68	@ 0x44
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f7ff fed6 	bl	8000330 <I2C_read>
	reg_val &= ~((1 << 5) | (1 << 4));
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800058a:	b2db      	uxtb	r3, r3
 800058c:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 800058e:	f107 030f 	add.w	r3, r7, #15
 8000592:	2202      	movs	r2, #2
 8000594:	2144      	movs	r1, #68	@ 0x44
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff fea8 	bl	80002ec <I2C_write>

	// Mask interrupt for current level request
	reg_val = 0xFE;
 800059c:	23fe      	movs	r3, #254	@ 0xfe
 800059e:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASK, &reg_val);
 80005a0:	f107 030f 	add.w	r3, r7, #15
 80005a4:	220a      	movs	r2, #10
 80005a6:	2144      	movs	r1, #68	@ 0x44
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fe9f 	bl	80002ec <I2C_write>

	// Mask interrupt for toggle status
	reg_val = 0xBF;
 80005ae:	23bf      	movs	r3, #191	@ 0xbf
 80005b0:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKA, &reg_val);
 80005b2:	f107 030f 	add.w	r3, r7, #15
 80005b6:	220e      	movs	r2, #14
 80005b8:	2144      	movs	r1, #68	@ 0x44
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff fe96 	bl	80002ec <I2C_write>

	// Mask interrupt for GoodCRC acknowledge (BMC is not used)
	reg_val = 0x01;
 80005c0:	2301      	movs	r3, #1
 80005c2:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKB, &reg_val);
 80005c4:	f107 030f 	add.w	r3, r7, #15
 80005c8:	220f      	movs	r2, #15
 80005ca:	2144      	movs	r1, #68	@ 0x44
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff fe8d 	bl	80002ec <I2C_write>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <PowerIncreaseCurrent>:

void PowerIncreaseCurrent(HAL_StatusTypeDef* status) {
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80005e2:	f107 030f 	add.w	r3, r7, #15
 80005e6:	2206      	movs	r2, #6
 80005e8:	2144      	movs	r1, #68	@ 0x44
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f7ff fea0 	bl	8000330 <I2C_read>
	reg_val |= ((1<<3) | (1<<2));
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	f043 030c 	orr.w	r3, r3, #12
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80005fa:	f107 030f 	add.w	r3, r7, #15
 80005fe:	2206      	movs	r2, #6
 8000600:	2144      	movs	r1, #68	@ 0x44
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff fe72 	bl	80002ec <I2C_write>

	return;
 8000608:	bf00      	nop
}
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000614:	f000 fb84 	bl	8000d20 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f001 fd20 	bl	800205c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f820 	bl	8000660 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000620:	f000 f89c 	bl	800075c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 fa94 	bl	8000b50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000628:	f000 fa62 	bl	8000af0 <MX_DMA_Init>
  MX_DCMI_Init();
 800062c:	f000 f996 	bl	800095c <MX_DCMI_Init>
  MX_I2C2_Init();
 8000630:	f000 f9c8 	bl	80009c4 <MX_I2C2_Init>
  MX_ADC1_Init();
 8000634:	f000 f8b2 	bl	800079c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000638:	f000 f92a 	bl	8000890 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 800063c:	f00f fbae 	bl	800fd9c <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8000640:	f000 fa00 	bl	8000a44 <MX_SPI4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setup(&status, &error_index);
 8000644:	4904      	ldr	r1, [pc, #16]	@ (8000658 <main+0x48>)
 8000646:	4805      	ldr	r0, [pc, #20]	@ (800065c <main+0x4c>)
 8000648:	f000 ff90 	bl	800156c <setup>
  get_radio_hw_info(&status, &error_index);
 800064c:	4902      	ldr	r1, [pc, #8]	@ (8000658 <main+0x48>)
 800064e:	4803      	ldr	r0, [pc, #12]	@ (800065c <main+0x4c>)
 8000650:	f001 f828 	bl	80016a4 <get_radio_hw_info>
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <main+0x44>
 8000658:	240004c1 	.word	0x240004c1
 800065c:	240004c0 	.word	0x240004c0

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	@ 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066a:	224c      	movs	r2, #76	@ 0x4c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f010 f8de 	bl	8010830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2220      	movs	r2, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f010 f8d8 	bl	8010830 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000680:	4b34      	ldr	r3, [pc, #208]	@ (8000754 <SystemClock_Config+0xf4>)
 8000682:	f04f 32ff 	mov.w	r2, #4294967295
 8000686:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800068a:	2002      	movs	r0, #2
 800068c:	f007 fad0 	bl	8007c30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b30      	ldr	r3, [pc, #192]	@ (8000758 <SystemClock_Config+0xf8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a2f      	ldr	r2, [pc, #188]	@ (8000758 <SystemClock_Config+0xf8>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <SystemClock_Config+0xf8>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ac:	bf00      	nop
 80006ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <SystemClock_Config+0xf8>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ba:	d1f8      	bne.n	80006ae <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006bc:	2303      	movs	r3, #3
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006ca:	2340      	movs	r3, #64	@ 0x40
 80006cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 80006da:	2346      	movs	r3, #70	@ 0x46
 80006dc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e2:	2303      	movs	r3, #3
 80006e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ea:	230c      	movs	r3, #12
 80006ec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fa:	4618      	mov	r0, r3
 80006fc:	f007 fae2 	bl	8007cc4 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000706:	f000 fb37 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	233f      	movs	r3, #63	@ 0x3f
 800070c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2303      	movs	r3, #3
 8000710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800071a:	2340      	movs	r3, #64	@ 0x40
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800071e:	2340      	movs	r3, #64	@ 0x40
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000726:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000728:	2340      	movs	r3, #64	@ 0x40
 800072a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2106      	movs	r1, #6
 8000730:	4618      	mov	r0, r3
 8000732:	f007 fef9 	bl	8008528 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800073c:	f000 fb1c 	bl	8000d78 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000740:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000744:	2100      	movs	r1, #0
 8000746:	2000      	movs	r0, #0
 8000748:	f008 f8a4 	bl	8008894 <HAL_RCC_MCOConfig>
}
 800074c:	bf00      	nop
 800074e:	3770      	adds	r7, #112	@ 0x70
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	58024400 	.word	0x58024400
 8000758:	58024800 	.word	0x58024800

0800075c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b0b0      	sub	sp, #192	@ 0xc0
 8000760:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000762:	463b      	mov	r3, r7
 8000764:	22c0      	movs	r2, #192	@ 0xc0
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f010 f861 	bl	8010830 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800076e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 800077a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800077e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4618      	mov	r0, r3
 8000784:	f008 fab0 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <PeriphCommonClock_Config+0x36>
  {
    Error_Handler();
 800078e:	f000 faf3 	bl	8000d78 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	37c0      	adds	r7, #192	@ 0xc0
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007c2:	4a31      	ldr	r2, [pc, #196]	@ (8000888 <MX_ADC1_Init+0xec>)
 80007c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007dc:	2204      	movs	r2, #4
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e0:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e6:	4b27      	ldr	r3, [pc, #156]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f2:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <MX_ADC1_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_ADC1_Init+0xe8>)
 8000806:	2200      	movs	r2, #0
 8000808:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_ADC1_Init+0xe8>)
 800080c:	2200      	movs	r2, #0
 800080e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_ADC1_Init+0xe8>)
 8000812:	2200      	movs	r2, #0
 8000814:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_ADC1_Init+0xe8>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081e:	4819      	ldr	r0, [pc, #100]	@ (8000884 <MX_ADC1_Init+0xe8>)
 8000820:	f001 fe90 	bl	8002544 <HAL_ADC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800082a:	f000 faa5 	bl	8000d78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4812      	ldr	r0, [pc, #72]	@ (8000884 <MX_ADC1_Init+0xe8>)
 800083a:	f002 fb4f 	bl	8002edc <HAL_ADCEx_MultiModeConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000844:	f000 fa98 	bl	8000d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_ADC1_Init+0xf0>)
 800084a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084c:	2306      	movs	r3, #6
 800084e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000854:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000858:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085a:	2304      	movs	r3, #4
 800085c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_ADC1_Init+0xe8>)
 800086c:	f001 ffc4 	bl	80027f8 <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000876:	f000 fa7f 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	@ 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	24000164 	.word	0x24000164
 8000888:	40022000 	.word	0x40022000
 800088c:	25b00200 	.word	0x25b00200

08000890 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
 80008a4:	615a      	str	r2, [r3, #20]
 80008a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008a8:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008aa:	4a2a      	ldr	r2, [pc, #168]	@ (8000954 <MX_ADC2_Init+0xc4>)
 80008ac:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80008ae:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008b4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008b6:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008bc:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c2:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008c4:	2204      	movs	r2, #4
 80008c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_ADC2_Init+0xc0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_ADC2_Init+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000906:	4812      	ldr	r0, [pc, #72]	@ (8000950 <MX_ADC2_Init+0xc0>)
 8000908:	f001 fe1c 	bl	8002544 <HAL_ADC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000912:	f000 fa31 	bl	8000d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <MX_ADC2_Init+0xc8>)
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091a:	2306      	movs	r3, #6
 800091c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000922:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000926:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000928:	2304      	movs	r3, #4
 800092a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_ADC2_Init+0xc0>)
 800093a:	f001 ff5d 	bl	80027f8 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000944:	f000 fa18 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	240001c8 	.word	0x240001c8
 8000954:	40022100 	.word	0x40022100
 8000958:	21800100 	.word	0x21800100

0800095c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000960:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <MX_DCMI_Init+0x60>)
 8000962:	4a17      	ldr	r2, [pc, #92]	@ (80009c0 <MX_DCMI_Init+0x64>)
 8000964:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_DCMI_Init+0x60>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <MX_DCMI_Init+0x60>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_DCMI_Init+0x60>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000978:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <MX_DCMI_Init+0x60>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_DCMI_Init+0x60>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000984:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <MX_DCMI_Init+0x60>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_DCMI_Init+0x60>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MX_DCMI_Init+0x60>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_DCMI_Init+0x60>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <MX_DCMI_Init+0x60>)
 800099e:	2200      	movs	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_DCMI_Init+0x60>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_DCMI_Init+0x60>)
 80009aa:	f002 fcbb 	bl	8003324 <HAL_DCMI_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80009b4:	f000 f9e0 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2400022c 	.word	0x2400022c
 80009c0:	48020000 	.word	0x48020000

080009c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_I2C2_Init+0x74>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	@ (8000a3c <MX_I2C2_Init+0x78>)
 80009cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_I2C2_Init+0x74>)
 80009d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a40 <MX_I2C2_Init+0x7c>)
 80009d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_I2C2_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_I2C2_Init+0x74>)
 80009dc:	2201      	movs	r2, #1
 80009de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_I2C2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_I2C2_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_I2C2_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_I2C2_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_I2C2_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009fe:	480e      	ldr	r0, [pc, #56]	@ (8000a38 <MX_I2C2_Init+0x74>)
 8000a00:	f004 ff26 	bl	8005850 <HAL_I2C_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a0a:	f000 f9b5 	bl	8000d78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <MX_I2C2_Init+0x74>)
 8000a12:	f005 fdd5 	bl	80065c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 f9ac 	bl	8000d78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_I2C2_Init+0x74>)
 8000a24:	f005 fe17 	bl	8006656 <HAL_I2CEx_ConfigDigitalFilter>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 f9a3 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	240002f4 	.word	0x240002f4
 8000a3c:	40005800 	.word	0x40005800
 8000a40:	20b0ccff 	.word	0x20b0ccff

08000a44 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a48:	4b27      	ldr	r3, [pc, #156]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a4a:	4a28      	ldr	r2, [pc, #160]	@ (8000aec <MX_SPI4_Init+0xa8>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a50:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a54:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a5e:	2207      	movs	r2, #7
 8000a60:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a62:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a70:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000a74:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_SPI4_Init+0xa4>)
 8000ad4:	f00a fd12 	bl	800b4fc <HAL_SPI_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000ade:	f000 f94b 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	24000348 	.word	0x24000348
 8000aec:	40013400 	.word	0x40013400

08000af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_DMA_Init+0x5c>)
 8000af8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000afc:	4a13      	ldr	r2, [pc, #76]	@ (8000b4c <MX_DMA_Init+0x5c>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_DMA_Init+0x5c>)
 8000b08:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	200b      	movs	r0, #11
 8000b1a:	f002 fb56 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b1e:	200b      	movs	r0, #11
 8000b20:	f002 fb6d 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	200c      	movs	r0, #12
 8000b2a:	f002 fb4e 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b2e:	200c      	movs	r0, #12
 8000b30:	f002 fb65 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	200d      	movs	r0, #13
 8000b3a:	f002 fb46 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b3e:	200d      	movs	r0, #13
 8000b40:	f002 fb5d 	bl	80031fe <HAL_NVIC_EnableIRQ>

}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	@ 0x30
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	4b69      	ldr	r3, [pc, #420]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000b68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b6c:	4a67      	ldr	r2, [pc, #412]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b76:	4b65      	ldr	r3, [pc, #404]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000b78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b61      	ldr	r3, [pc, #388]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b8a:	4a60      	ldr	r2, [pc, #384]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b94:	4b5d      	ldr	r3, [pc, #372]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000b96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba8:	4a58      	ldr	r2, [pc, #352]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bb2:	4b56      	ldr	r3, [pc, #344]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000bb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b52      	ldr	r3, [pc, #328]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000bc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bc6:	4a51      	ldr	r2, [pc, #324]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000bd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bde:	4b4b      	ldr	r3, [pc, #300]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000be0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000be4:	4a49      	ldr	r2, [pc, #292]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bee:	4b47      	ldr	r3, [pc, #284]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000bf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfc:	4b43      	ldr	r3, [pc, #268]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000bfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c02:	4a42      	ldr	r2, [pc, #264]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d0c <MX_GPIO_Init+0x1bc>)
 8000c0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_3V3_GPIO_Port, DCMI_3V3_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c20:	483b      	ldr	r0, [pc, #236]	@ (8000d10 <MX_GPIO_Init+0x1c0>)
 8000c22:	f004 fdfb 	bl	800581c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c2c:	4839      	ldr	r0, [pc, #228]	@ (8000d14 <MX_GPIO_Init+0x1c4>)
 8000c2e:	f004 fdf5 	bl	800581c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DCMI_RST_Pin|DCMI_PWDN_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000c38:	4837      	ldr	r0, [pc, #220]	@ (8000d18 <MX_GPIO_Init+0x1c8>)
 8000c3a:	f004 fdef 	bl	800581c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_N_Pin */
  GPIO_InitStruct.Pin = INT_N_Pin;
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4832      	ldr	r0, [pc, #200]	@ (8000d1c <MX_GPIO_Init+0x1cc>)
 8000c52:	f004 fc1b 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT__Pin */
  GPIO_InitStruct.Pin = FLT__Pin;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(FLT__GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	482a      	ldr	r0, [pc, #168]	@ (8000d14 <MX_GPIO_Init+0x1c4>)
 8000c6a:	f004 fc0f 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pins : COMMAND_DONE_Pin nIRQ_Pin */
  GPIO_InitStruct.Pin = COMMAND_DONE_Pin|nIRQ_Pin;
 8000c6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4823      	ldr	r0, [pc, #140]	@ (8000d10 <MX_GPIO_Init+0x1c0>)
 8000c84:	f004 fc02 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_3V3_Pin */
  GPIO_InitStruct.Pin = DCMI_3V3_Pin;
 8000c88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DCMI_3V3_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	481b      	ldr	r0, [pc, #108]	@ (8000d10 <MX_GPIO_Init+0x1c0>)
 8000ca2:	f004 fbf3 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDN_Pin */
  GPIO_InitStruct.Pin = SDN_Pin;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SDN_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4815      	ldr	r0, [pc, #84]	@ (8000d14 <MX_GPIO_Init+0x1c4>)
 8000cc0:	f004 fbe4 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_RST_Pin DCMI_PWDN_Pin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin|DCMI_PWDN_Pin;
 8000cc4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480e      	ldr	r0, [pc, #56]	@ (8000d18 <MX_GPIO_Init+0x1c8>)
 8000cde:	f004 fbd5 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_MCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_MCLK_Pin;
 8000ce2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DCMI_MCLK_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4807      	ldr	r0, [pc, #28]	@ (8000d1c <MX_GPIO_Init+0x1cc>)
 8000d00:	f004 fbc4 	bl	800548c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d04:	bf00      	nop
 8000d06:	3730      	adds	r7, #48	@ 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	58021000 	.word	0x58021000
 8000d14:	58020400 	.word	0x58020400
 8000d18:	58020c00 	.word	0x58020c00
 8000d1c:	58020000 	.word	0x58020000

08000d20 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d32:	f002 fa7f 	bl	8003234 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d36:	2301      	movs	r3, #1
 8000d38:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d42:	231f      	movs	r3, #31
 8000d44:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d46:	2387      	movs	r3, #135	@ 0x87
 8000d48:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d56:	2301      	movs	r3, #1
 8000d58:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d62:	463b      	mov	r3, r7
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fa9d 	bl	80032a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d6a:	2004      	movs	r0, #4
 8000d6c:	f002 fa7a 	bl	8003264 <HAL_MPU_Enable>

}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <Error_Handler+0x8>

08000d84 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3320      	adds	r3, #32
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	701a      	strb	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <radio_power_up>:
#include "radio.h"

void radio_power_up(HAL_StatusTypeDef* status) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2108      	movs	r1, #8
 8000db0:	4831      	ldr	r0, [pc, #196]	@ (8000e78 <radio_power_up+0xd4>)
 8000db2:	f004 fd33 	bl	800581c <HAL_GPIO_WritePin>
	uint8_t NOP = 0x00;
 8000db6:	2300      	movs	r3, #0
 8000db8:	75bb      	strb	r3, [r7, #22]
	uint8_t data[] = {RF_POWER_UP};
 8000dba:	4a30      	ldr	r2, [pc, #192]	@ (8000e7c <radio_power_up+0xd8>)
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc4:	6018      	str	r0, [r3, #0]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	8019      	strh	r1, [r3, #0]
 8000dca:	3302      	adds	r3, #2
 8000dcc:	0c0a      	lsrs	r2, r1, #16
 8000dce:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	757b      	strb	r3, [r7, #21]
	uint8_t attempt = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f001 f9d1 	bl	8002180 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de4:	4826      	ldr	r0, [pc, #152]	@ (8000e80 <radio_power_up+0xdc>)
 8000de6:	f004 fd19 	bl	800581c <HAL_GPIO_WritePin>
			}
		}
	}
	*/
	// Wait until Clear To Send (CTS) signal appears
			while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 8000dea:	e009      	b.n	8000e00 <radio_power_up+0x5c>
				attempt++;
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	3301      	adds	r3, #1
 8000df0:	75fb      	strb	r3, [r7, #23]
				if (attempt > 30) {
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
 8000df4:	2b1e      	cmp	r3, #30
 8000df6:	d903      	bls.n	8000e00 <radio_power_up+0x5c>
					*status = 0x3; // Timeout
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e037      	b.n	8000e70 <radio_power_up+0xcc>
			while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 8000e00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e04:	481f      	ldr	r0, [pc, #124]	@ (8000e84 <radio_power_up+0xe0>)
 8000e06:	f004 fcf1 	bl	80057ec <HAL_GPIO_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0ed      	beq.n	8000dec <radio_power_up+0x48>
					return;
				}
			}

			// Check if the SPI is enabled
			  if((SPI4->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <radio_power_up+0xe4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d005      	beq.n	8000e28 <radio_power_up+0x84>
			  {
			      // If disabled, I enable it
			      SET_BIT(SPI4->CR1, SPI_CR1_SPE);
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <radio_power_up+0xe4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <radio_power_up+0xe4>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]
			  }

			  while (!(SPI4->SR & SPI_SR_TXC));
 8000e28:	bf00      	nop
 8000e2a:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <radio_power_up+0xe4>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f9      	beq.n	8000e2a <radio_power_up+0x86>
			  // Send bytes over the SPI
			  LL_SPI_TransmitData8(SPI4,0x00);
 8000e36:	2100      	movs	r1, #0
 8000e38:	4813      	ldr	r0, [pc, #76]	@ (8000e88 <radio_power_up+0xe4>)
 8000e3a:	f7ff ffa3 	bl	8000d84 <LL_SPI_TransmitData8>
			  // Wait until the transmission is complete
			  while (!(SPI4->SR & SPI_SR_TXC));
 8000e3e:	bf00      	nop
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <radio_power_up+0xe4>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f9      	beq.n	8000e40 <radio_power_up+0x9c>

			  // Disable SPI
			  CLEAR_BIT(SPI4->CR1, SPI_CR1_SPE);
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <radio_power_up+0xe4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <radio_power_up+0xe4>)
 8000e52:	f023 0301 	bic.w	r3, r3, #1
 8000e56:	6013      	str	r3, [r2, #0]

	//*status = HAL_SPI_Transmit(&hspi4, &NOP, 1, 10);
	*status = HAL_SPI_Transmit(&hspi4, data, size, 50);
 8000e58:	7d7b      	ldrb	r3, [r7, #21]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	f107 010c 	add.w	r1, r7, #12
 8000e60:	2332      	movs	r3, #50	@ 0x32
 8000e62:	480a      	ldr	r0, [pc, #40]	@ (8000e8c <radio_power_up+0xe8>)
 8000e64:	f00a fc6e 	bl	800b744 <HAL_SPI_Transmit>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	701a      	strb	r2, [r3, #0]
}
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	58020000 	.word	0x58020000
 8000e7c:	080108a0 	.word	0x080108a0
 8000e80:	58020400 	.word	0x58020400
 8000e84:	58021000 	.word	0x58021000
 8000e88:	40013400 	.word	0x40013400
 8000e8c:	24000348 	.word	0x24000348

08000e90 <radio_pins>:

void radio_pins(HAL_StatusTypeDef* status) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GPIO_PIN_CFG};
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <radio_pins+0x34>)
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8000eaa:	f107 020f 	add.w	r2, r7, #15
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff fac5 	bl	8000444 <SPI_write>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	080108a8 	.word	0x080108a8

08000ec8 <radio_TCXO>:

void radio_TCXO(HAL_StatusTypeDef* status) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_XO_TUNE_2};
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <radio_TCXO+0x2c>)
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	82bb      	strh	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8000ed8:	2306      	movs	r3, #6
 8000eda:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8000edc:	f107 020f 	add.w	r2, r7, #15
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff faac 	bl	8000444 <SPI_write>
}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	00020011 	.word	0x00020011

08000ef8 <radio_global>:

void radio_global(HAL_StatusTypeDef* status) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_CONFIG_1};
 8000f00:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <radio_global+0x34>)
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f0a:	6018      	str	r0, [r3, #0]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8000f10:	2305      	movs	r3, #5
 8000f12:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8000f14:	f107 020f 	add.w	r2, r7, #15
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fa90 	bl	8000444 <SPI_write>
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	080108b0 	.word	0x080108b0

08000f30 <radio_interrupts>:

void radio_interrupts(HAL_StatusTypeDef* status) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_INT_CTL_ENABLE_1};
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <radio_interrupts+0x2c>)
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	753b      	strb	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8000f40:	2305      	movs	r3, #5
 8000f42:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8000f44:	f107 020f 	add.w	r2, r7, #15
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff fa78 	bl	8000444 <SPI_write>
}
 8000f54:	bf00      	nop
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	00010111 	.word	0x00010111

08000f60 <radio_fast_registers>:

void radio_fast_registers(HAL_StatusTypeDef* status) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FRR_CTL_A_MODE_4};
 8000f68:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <radio_fast_registers+0x34>)
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f72:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8000f76:	2308      	movs	r3, #8
 8000f78:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8000f7a:	f107 020f 	add.w	r2, r7, #15
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fa5d 	bl	8000444 <SPI_write>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	080108b8 	.word	0x080108b8

08000f98 <radio_Tx>:

void radio_Tx(HAL_StatusTypeDef* status) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PREAMBLE_TX_LENGTH_9};
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <radio_Tx+0x30>)
 8000fa2:	f107 0410 	add.w	r4, r7, #16
 8000fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa8:	c407      	stmia	r4!, {r0, r1, r2}
 8000faa:	7023      	strb	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8000fac:	230d      	movs	r3, #13
 8000fae:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8000fb0:	f107 020f 	add.w	r2, r7, #15
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fa42 	bl	8000444 <SPI_write>
}
 8000fc0:	bf00      	nop
 8000fc2:	3724      	adds	r7, #36	@ 0x24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	080108c0 	.word	0x080108c0

08000fcc <radio_sync>:

void radio_sync(HAL_StatusTypeDef* status) {
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNC_CONFIG_10};
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <radio_sync+0x30>)
 8000fd6:	f107 0410 	add.w	r4, r7, #16
 8000fda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fdc:	c407      	stmia	r4!, {r0, r1, r2}
 8000fde:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8000fe0:	230e      	movs	r3, #14
 8000fe2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8000fe4:	f107 020f 	add.w	r2, r7, #15
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fa28 	bl	8000444 <SPI_write>
}
 8000ff4:	bf00      	nop
 8000ff6:	3724      	adds	r7, #36	@ 0x24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	080108d0 	.word	0x080108d0

08001000 <radio_packet_CRC>:

void radio_packet_CRC(HAL_StatusTypeDef* status) {
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b089      	sub	sp, #36	@ 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_CONFIG_12};
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <radio_packet_CRC+0x30>)
 800100a:	f107 0410 	add.w	r4, r7, #16
 800100e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001014:	2310      	movs	r3, #16
 8001016:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001018:	f107 020f 	add.w	r2, r7, #15
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fa0e 	bl	8000444 <SPI_write>
}
 8001028:	bf00      	nop
 800102a:	3724      	adds	r7, #36	@ 0x24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	080108e0 	.word	0x080108e0

08001034 <radio_Rx_thr>:

void radio_Rx_thr(HAL_StatusTypeDef* status) {
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_THRESHOLD_12};
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <radio_Rx_thr+0x30>)
 800103e:	f107 0410 	add.w	r4, r7, #16
 8001042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001048:	2310      	movs	r3, #16
 800104a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800104c:	f107 020f 	add.w	r2, r7, #15
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff f9f4 	bl	8000444 <SPI_write>
}
 800105c:	bf00      	nop
 800105e:	3724      	adds	r7, #36	@ 0x24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	080108f0 	.word	0x080108f0

08001068 <radio_Rx_CRC_1>:

void radio_Rx_CRC_1(HAL_StatusTypeDef* status) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_FIELD_3_CRC_CONFIG_12};
 8001070:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <radio_Rx_CRC_1+0x34>)
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 8001080:	2310      	movs	r3, #16
 8001082:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001084:	f107 020f 	add.w	r2, r7, #15
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff f9d8 	bl	8000444 <SPI_write>
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	180c1211 	.word	0x180c1211

080010a0 <radio_Rx_CRC_2>:

void radio_Rx_CRC_2(HAL_StatusTypeDef* status) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_1_CRC_CONFIG_12};
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <radio_Rx_CRC_2+0x34>)
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 80010b8:	2310      	movs	r3, #16
 80010ba:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80010bc:	f107 020f 	add.w	r2, r7, #15
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff f9bc 	bl	8000444 <SPI_write>
}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	240c1211 	.word	0x240c1211

080010d8 <radio_Rx_CRC_3>:

void radio_Rx_CRC_3(HAL_StatusTypeDef* status) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_4_CRC_CONFIG_5};
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <radio_Rx_CRC_3+0x34>)
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	711a      	strb	r2, [r3, #4]
	uint8_t size = sizeof(data);
 80010ee:	2309      	movs	r3, #9
 80010f0:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 80010f2:	f107 020b 	add.w	r2, r7, #11
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff f9a1 	bl	8000444 <SPI_write>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	30051211 	.word	0x30051211

08001110 <radio_Rx_CRC_seed>:

void radio_Rx_CRC_seed(HAL_StatusTypeDef* status) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_SEED_31_24_4};
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <radio_Rx_CRC_seed+0x2c>)
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001120:	2308      	movs	r3, #8
 8001122:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001124:	f107 020f 	add.w	r2, r7, #15
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff f988 	bl	8000444 <SPI_write>
}
 8001134:	bf00      	nop
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	36041211 	.word	0x36041211

08001140 <radio_mod>:

void radio_mod(HAL_StatusTypeDef* status) {
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_MOD_TYPE_12};
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <radio_mod+0x30>)
 800114a:	f107 0410 	add.w	r4, r7, #16
 800114e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001154:	2310      	movs	r3, #16
 8001156:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001158:	f107 020f 	add.w	r2, r7, #15
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff f96e 	bl	8000444 <SPI_write>
}
 8001168:	bf00      	nop
 800116a:	3724      	adds	r7, #36	@ 0x24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	08010900 	.word	0x08010900

08001174 <radio_freq_dev>:

void radio_freq_dev(HAL_StatusTypeDef* status) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_FREQ_DEV_0_1};
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <radio_freq_dev+0x34>)
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001186:	6018      	str	r0, [r3, #0]
 8001188:	3304      	adds	r3, #4
 800118a:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 800118c:	2305      	movs	r3, #5
 800118e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001190:	f107 020f 	add.w	r2, r7, #15
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4619      	mov	r1, r3
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff f952 	bl	8000444 <SPI_write>
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	08010910 	.word	0x08010910

080011ac <radio_Tx_ramp>:

void radio_Tx_ramp(HAL_StatusTypeDef* status) {
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_TX_RAMP_DELAY_12};
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <radio_Tx_ramp+0x30>)
 80011b6:	f107 0410 	add.w	r4, r7, #16
 80011ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80011c0:	2310      	movs	r3, #16
 80011c2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80011c4:	f107 020f 	add.w	r2, r7, #15
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff f938 	bl	8000444 <SPI_write>
}
 80011d4:	bf00      	nop
 80011d6:	3724      	adds	r7, #36	@ 0x24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	08010918 	.word	0x08010918

080011e0 <radio_NCO_offset>:

void radio_NCO_offset(HAL_StatusTypeDef* status) {
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_BCR_NCO_OFFSET_2_12};
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <radio_NCO_offset+0x30>)
 80011ea:	f107 0410 	add.w	r4, r7, #16
 80011ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80011f4:	2310      	movs	r3, #16
 80011f6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80011f8:	f107 020f 	add.w	r2, r7, #15
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff f91e 	bl	8000444 <SPI_write>
}
 8001208:	bf00      	nop
 800120a:	3724      	adds	r7, #36	@ 0x24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	08010928 	.word	0x08010928

08001214 <radio_AFC>:

void radio_AFC(HAL_StatusTypeDef* status) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AFC_LIMITER_1_3};
 800121c:	4a0c      	ldr	r2, [pc, #48]	@ (8001250 <radio_AFC+0x3c>)
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001226:	6018      	str	r0, [r3, #0]
 8001228:	3304      	adds	r3, #4
 800122a:	8019      	strh	r1, [r3, #0]
 800122c:	3302      	adds	r3, #2
 800122e:	0c0a      	lsrs	r2, r1, #16
 8001230:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001232:	2307      	movs	r3, #7
 8001234:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001236:	f107 020f 	add.w	r2, r7, #15
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4619      	mov	r1, r3
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff f8ff 	bl	8000444 <SPI_write>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	08010938 	.word	0x08010938

08001254 <radio_AGC_1>:

void radio_AGC_1(HAL_StatusTypeDef* status) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_CONTROL_1};
 800125c:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <radio_AGC_1+0x34>)
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001266:	6018      	str	r0, [r3, #0]
 8001268:	3304      	adds	r3, #4
 800126a:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 800126c:	2305      	movs	r3, #5
 800126e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001270:	f107 020f 	add.w	r2, r7, #15
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff f8e2 	bl	8000444 <SPI_write>
}
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	08010940 	.word	0x08010940

0800128c <radio_AGC_2>:

void radio_AGC_2(HAL_StatusTypeDef* status) {
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_WINDOW_SIZE_12};
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <radio_AGC_2+0x30>)
 8001296:	f107 0410 	add.w	r4, r7, #16
 800129a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800129c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80012a0:	2310      	movs	r3, #16
 80012a2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80012a4:	f107 020f 	add.w	r2, r7, #15
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f8c8 	bl	8000444 <SPI_write>
}
 80012b4:	bf00      	nop
 80012b6:	3724      	adds	r7, #36	@ 0x24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	08010948 	.word	0x08010948

080012c0 <radio_RAW>:

void radio_RAW(HAL_StatusTypeDef* status) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b089      	sub	sp, #36	@ 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_CONTROL_10};
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <radio_RAW+0x30>)
 80012ca:	f107 0410 	add.w	r4, r7, #16
 80012ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d0:	c407      	stmia	r4!, {r0, r1, r2}
 80012d2:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 80012d4:	230e      	movs	r3, #14
 80012d6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80012d8:	f107 020f 	add.w	r2, r7, #15
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff f8ae 	bl	8000444 <SPI_write>
}
 80012e8:	bf00      	nop
 80012ea:	3724      	adds	r7, #36	@ 0x24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd90      	pop	{r4, r7, pc}
 80012f0:	08010958 	.word	0x08010958

080012f4 <radio_search_period>:

void radio_search_period(HAL_StatusTypeDef* status) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_SEARCH2_2};
 80012fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <radio_search_period+0x34>)
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001306:	6018      	str	r0, [r3, #0]
 8001308:	3304      	adds	r3, #4
 800130a:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 800130c:	2306      	movs	r3, #6
 800130e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001310:	f107 020f 	add.w	r2, r7, #15
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff f892 	bl	8000444 <SPI_write>
}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	08010968 	.word	0x08010968

0800132c <radio_GFSK_thr>:

void radio_GFSK_thr(HAL_StatusTypeDef* status) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_SPIKE_DET_2};
 8001334:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <radio_GFSK_thr+0x34>)
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800133e:	6018      	str	r0, [r3, #0]
 8001340:	3304      	adds	r3, #4
 8001342:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001344:	2306      	movs	r3, #6
 8001346:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001348:	f107 020f 	add.w	r2, r7, #15
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff f876 	bl	8000444 <SPI_write>
}
 8001358:	bf00      	nop
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	08010970 	.word	0x08010970

08001364 <radio_RSSI_thr>:

void radio_RSSI_thr(HAL_StatusTypeDef* status) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RSSI_MUTE_1};
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <radio_RSSI_thr+0x2c>)
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	2300      	movs	r3, #0
 8001372:	753b      	strb	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001374:	2305      	movs	r3, #5
 8001376:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001378:	f107 020f 	add.w	r2, r7, #15
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f85e 	bl	8000444 <SPI_write>
}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	57012011 	.word	0x57012011

08001394 <radio_RSSI_att>:

void radio_RSSI_att(HAL_StatusTypeDef* status) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_DSA_CTRL1_5};
 800139c:	4a09      	ldr	r2, [pc, #36]	@ (80013c4 <radio_RSSI_att+0x30>)
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80013a4:	c303      	stmia	r3!, {r0, r1}
 80013a6:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 80013a8:	2309      	movs	r3, #9
 80013aa:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 80013ac:	f107 020b 	add.w	r2, r7, #11
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff f844 	bl	8000444 <SPI_write>
}
 80013bc:	bf00      	nop
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	08010978 	.word	0x08010978

080013c8 <radio_Rx_filter_1>:

void radio_Rx_filter_1(HAL_StatusTypeDef* status) {
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b089      	sub	sp, #36	@ 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12};
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <radio_Rx_filter_1+0x30>)
 80013d2:	f107 0410 	add.w	r4, r7, #16
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80013dc:	2310      	movs	r3, #16
 80013de:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80013e0:	f107 020f 	add.w	r2, r7, #15
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff f82a 	bl	8000444 <SPI_write>
}
 80013f0:	bf00      	nop
 80013f2:	3724      	adds	r7, #36	@ 0x24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}
 80013f8:	08010984 	.word	0x08010984

080013fc <radio_Rx_filter_2>:

void radio_Rx_filter_2(HAL_StatusTypeDef* status) {
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12};
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <radio_Rx_filter_2+0x30>)
 8001406:	f107 0410 	add.w	r4, r7, #16
 800140a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800140c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001410:	2310      	movs	r3, #16
 8001412:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001414:	f107 020f 	add.w	r2, r7, #15
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff f810 	bl	8000444 <SPI_write>
}
 8001424:	bf00      	nop
 8001426:	3724      	adds	r7, #36	@ 0x24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd90      	pop	{r4, r7, pc}
 800142c:	08010994 	.word	0x08010994

08001430 <radio_Rx_filter_3>:

void radio_Rx_filter_3(HAL_StatusTypeDef* status) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b089      	sub	sp, #36	@ 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12};
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <radio_Rx_filter_3+0x30>)
 800143a:	f107 0410 	add.w	r4, r7, #16
 800143e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001444:	2310      	movs	r3, #16
 8001446:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001448:	f107 020f 	add.w	r2, r7, #15
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7fe fff6 	bl	8000444 <SPI_write>
}
 8001458:	bf00      	nop
 800145a:	3724      	adds	r7, #36	@ 0x24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	080109a4 	.word	0x080109a4

08001464 <radio_PA_1>:

void radio_PA_1(HAL_StatusTypeDef* status) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PA_MODE_4};
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <radio_PA_1+0x34>)
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001476:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 800147a:	2308      	movs	r3, #8
 800147c:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800147e:	f107 020f 	add.w	r2, r7, #15
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7fe ffdb 	bl	8000444 <SPI_write>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	080109b4 	.word	0x080109b4

0800149c <radio_PA_2>:

void radio_PA_2(HAL_StatusTypeDef* status) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNTH_PFDCP_CPFF_7};
 80014a4:	4a0b      	ldr	r2, [pc, #44]	@ (80014d4 <radio_PA_2+0x38>)
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ac:	c303      	stmia	r3!, {r0, r1}
 80014ae:	801a      	strh	r2, [r3, #0]
 80014b0:	3302      	adds	r3, #2
 80014b2:	0c12      	lsrs	r2, r2, #16
 80014b4:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 80014b6:	230b      	movs	r3, #11
 80014b8:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 80014ba:	f107 020b 	add.w	r2, r7, #11
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	4619      	mov	r1, r3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7fe ffbd 	bl	8000444 <SPI_write>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	080109bc 	.word	0x080109bc

080014d8 <radio_masks>:

void radio_masks(HAL_StatusTypeDef* status) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MATCH_VALUE_1_12};
 80014e0:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <radio_masks+0x34>)
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 80014f0:	2310      	movs	r3, #16
 80014f2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80014f4:	f107 020f 	add.w	r2, r7, #15
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7fe ffa0 	bl	8000444 <SPI_write>
}
 8001504:	bf00      	nop
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	000c3011 	.word	0x000c3011

08001510 <radio_PLL>:

void radio_PLL(HAL_StatusTypeDef* status) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FREQ_CONTROL_INTE_8};
 8001518:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <radio_PLL+0x30>)
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001520:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t size = sizeof(data);
 8001524:	230c      	movs	r3, #12
 8001526:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001528:	f107 020b 	add.w	r2, r7, #11
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7fe ff86 	bl	8000444 <SPI_write>
}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	080109c8 	.word	0x080109c8

08001544 <radio_mode_Rx>:

// Modes
void radio_mode_Rx(HAL_StatusTypeDef* status) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	// Enable Rx and then enter ready mode
	uint8_t data = {0x32, 0, 0, 0, 60, 0, 0, 8, 8};
 800154c:	2332      	movs	r3, #50	@ 0x32
 800154e:	73fb      	strb	r3, [r7, #15]
	uint8_t size = sizeof(data);
 8001550:	2301      	movs	r3, #1
 8001552:	73bb      	strb	r3, [r7, #14]
	SPI_write(status, data, &size);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	4619      	mov	r1, r3
 8001558:	f107 030e 	add.w	r3, r7, #14
 800155c:	461a      	mov	r2, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7fe ff70 	bl	8000444 <SPI_write>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <setup>:
#include <routines.h>

void setup(HAL_StatusTypeDef* status, fault_flag* error_index) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]

	/// Issue POWER_UP command - wake transceiver up
		radio_power_up(status);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fc14 	bl	8000da4 <radio_power_up>
		if (*status != 0) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <setup+0x20>
			*error_index = RADIO_PWUP;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2204      	movs	r2, #4
 8001588:	701a      	strb	r2, [r3, #0]
			return;
 800158a:	e088      	b.n	800169e <setup+0x132>
		}

	// USB-C
	PowerInit(status);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7fe ffbb 	bl	8000508 <PowerInit>

	/// Check for errors, if non are found -> increase supply current
	if (*status == 0) {
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d107      	bne.n	80015aa <setup+0x3e>
		PowerIncreaseCurrent(status);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff f81d 	bl	80005da <PowerIncreaseCurrent>
		*error_index = POWER_INIT;
		return;
	}

	/// Check for error
	if (*status != 0) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <setup+0x4e>
 80015a8:	e003      	b.n	80015b2 <setup+0x46>
		*error_index = POWER_INIT;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
		return;
 80015b0:	e075      	b.n	800169e <setup+0x132>
		*error_index = POWER_INC;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2202      	movs	r2, #2
 80015b6:	701a      	strb	r2, [r3, #0]
		return;
 80015b8:	e071      	b.n	800169e <setup+0x132>

	*/


	/// Issue radio setup
	radio_pins(status);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fc68 	bl	8000e90 <radio_pins>
	radio_TCXO(status);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fc81 	bl	8000ec8 <radio_TCXO>
	radio_global(status);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fc96 	bl	8000ef8 <radio_global>
	radio_interrupts(status);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fcaf 	bl	8000f30 <radio_interrupts>
	radio_fast_registers(status);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fcc4 	bl	8000f60 <radio_fast_registers>
	radio_Tx(status);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fcdd 	bl	8000f98 <radio_Tx>
	radio_sync(status);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fcf4 	bl	8000fcc <radio_sync>
	radio_packet_CRC(status);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fd0b 	bl	8001000 <radio_packet_CRC>
	radio_Rx_thr(status);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fd22 	bl	8001034 <radio_Rx_thr>
	radio_Rx_CRC_1(status);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fd39 	bl	8001068 <radio_Rx_CRC_1>
	radio_Rx_CRC_2(status);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fd52 	bl	80010a0 <radio_Rx_CRC_2>
	radio_Rx_CRC_3(status);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fd6b 	bl	80010d8 <radio_Rx_CRC_3>
	radio_Rx_CRC_seed(status);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fd84 	bl	8001110 <radio_Rx_CRC_seed>
	radio_mod(status);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fd99 	bl	8001140 <radio_mod>
	radio_freq_dev(status);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fdb0 	bl	8001174 <radio_freq_dev>
	radio_Tx_ramp(status);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fdc9 	bl	80011ac <radio_Tx_ramp>
	radio_NCO_offset(status);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fde0 	bl	80011e0 <radio_NCO_offset>
	radio_AFC(status);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fdf7 	bl	8001214 <radio_AFC>
	radio_AGC_1(status);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fe14 	bl	8001254 <radio_AGC_1>
	radio_AGC_2(status);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fe2d 	bl	800128c <radio_AGC_2>
	radio_RAW(status);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fe44 	bl	80012c0 <radio_RAW>
	radio_search_period(status);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fe5b 	bl	80012f4 <radio_search_period>
	radio_GFSK_thr(status);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fe74 	bl	800132c <radio_GFSK_thr>
	radio_RSSI_thr(status);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff fe8d 	bl	8001364 <radio_RSSI_thr>
	radio_RSSI_att(status);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fea2 	bl	8001394 <radio_RSSI_att>
	radio_Rx_filter_1(status);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff feb9 	bl	80013c8 <radio_Rx_filter_1>
	radio_Rx_filter_2(status);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fed0 	bl	80013fc <radio_Rx_filter_2>
	radio_Rx_filter_3(status);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff fee7 	bl	8001430 <radio_Rx_filter_3>
	radio_PA_1(status);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fefe 	bl	8001464 <radio_PA_1>
	radio_PA_2(status);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff17 	bl	800149c <radio_PA_2>
	radio_masks(status);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ff32 	bl	80014d8 <radio_masks>
	radio_PLL(status);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff4b 	bl	8001510 <radio_PLL>

	// Check for errors
	if (*status != 0) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <setup+0x11e>
		*error_index = RADIO_SETUP;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2205      	movs	r2, #5
 8001686:	701a      	strb	r2, [r3, #0]
		return;
 8001688:	e009      	b.n	800169e <setup+0x132>
	}

	// Init. radio into receive mode
	radio_mode_Rx(status);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff5a 	bl	8001544 <radio_mode_Rx>
	if (*status != 0) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <setup+0x132>
		*error_index = RADIO_SET_RX;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2206      	movs	r2, #6
 800169c:	701a      	strb	r2, [r3, #0]
	}

}
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <get_radio_hw_info>:

void get_radio_hw_info(HAL_StatusTypeDef* status, fault_flag* error_index) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	uint8_t array[11] = {0};
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t size = 11;
 80016bc:	230b      	movs	r3, #11
 80016be:	72fb      	strb	r3, [r7, #11]
	array[0] = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	733b      	strb	r3, [r7, #12]
	SPI_read(status, array, &size);
 80016c4:	f107 020b 	add.w	r2, r7, #11
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7fe fed8 	bl	8000484 <SPI_read>
	if (*status != 0) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <get_radio_hw_info+0x3e>
		*error_index = RADIO_HW_INFO;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2207      	movs	r2, #7
 80016e0:	701a      	strb	r2, [r3, #0]
	}
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_MspInit+0x30>)
 80016f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80016f8:	4a08      	ldr	r2, [pc, #32]	@ (800171c <HAL_MspInit+0x30>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_MspInit+0x30>)
 8001704:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	58024400 	.word	0x58024400

08001720 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0be      	sub	sp, #248	@ 0xf8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	22c0      	movs	r2, #192	@ 0xc0
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f00f f875 	bl	8010830 <memset>
  if(hadc->Instance==ADC1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6f      	ldr	r2, [pc, #444]	@ (8001908 <HAL_ADC_MspInit+0x1e8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	f040 8087 	bne.w	8001860 <HAL_ADC_MspInit+0x140>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001752:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800175e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001762:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	4618      	mov	r0, r3
 800176c:	f007 fabc 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8001776:	f7ff faff 	bl	8000d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800177a:	4b64      	ldr	r3, [pc, #400]	@ (800190c <HAL_ADC_MspInit+0x1ec>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a62      	ldr	r2, [pc, #392]	@ (800190c <HAL_ADC_MspInit+0x1ec>)
 8001782:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001784:	4b61      	ldr	r3, [pc, #388]	@ (800190c <HAL_ADC_MspInit+0x1ec>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d10e      	bne.n	80017aa <HAL_ADC_MspInit+0x8a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800178c:	4b60      	ldr	r3, [pc, #384]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 800178e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001792:	4a5f      	ldr	r2, [pc, #380]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 8001794:	f043 0320 	orr.w	r3, r3, #32
 8001798:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800179c:	4b5c      	ldr	r3, [pc, #368]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 800179e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80017a2:	f003 0320 	and.w	r3, r3, #32
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b59      	ldr	r3, [pc, #356]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80017ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017b0:	4a57      	ldr	r2, [pc, #348]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017ba:	4b55      	ldr	r3, [pc, #340]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80017bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c8:	4b51      	ldr	r3, [pc, #324]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80017ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017ce:	4a50      	ldr	r2, [pc, #320]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80017da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80017e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017ec:	4a48      	ldr	r2, [pc, #288]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017f6:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80017f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INN16
    PC4     ------> ADC1_INP4
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = NTC_2__Pin|NTC_2_A1_Pin;
 8001804:	2303      	movs	r3, #3
 8001806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180a:	2303      	movs	r3, #3
 800180c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800181a:	4619      	mov	r1, r3
 800181c:	483d      	ldr	r0, [pc, #244]	@ (8001914 <HAL_ADC_MspInit+0x1f4>)
 800181e:	f003 fe35 	bl	800548c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CC1_Pin;
 8001822:	2310      	movs	r3, #16
 8001824:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001828:	2303      	movs	r3, #3
 800182a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC1_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001838:	4619      	mov	r1, r3
 800183a:	4837      	ldr	r0, [pc, #220]	@ (8001918 <HAL_ADC_MspInit+0x1f8>)
 800183c:	f003 fe26 	bl	800548c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VBUS_Pin;
 8001840:	2301      	movs	r3, #1
 8001842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001846:	2303      	movs	r3, #3
 8001848:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ADC_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001856:	4619      	mov	r1, r3
 8001858:	4830      	ldr	r0, [pc, #192]	@ (800191c <HAL_ADC_MspInit+0x1fc>)
 800185a:	f003 fe17 	bl	800548c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 800185e:	e04e      	b.n	80018fe <HAL_ADC_MspInit+0x1de>
  else if(hadc->Instance==ADC2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a2e      	ldr	r2, [pc, #184]	@ (8001920 <HAL_ADC_MspInit+0x200>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d149      	bne.n	80018fe <HAL_ADC_MspInit+0x1de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800186a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001876:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800187a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	4618      	mov	r0, r3
 8001884:	f007 fa30 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_ADC_MspInit+0x172>
      Error_Handler();
 800188e:	f7ff fa73 	bl	8000d78 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <HAL_ADC_MspInit+0x1ec>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	4a1c      	ldr	r2, [pc, #112]	@ (800190c <HAL_ADC_MspInit+0x1ec>)
 800189a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800189c:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <HAL_ADC_MspInit+0x1ec>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10e      	bne.n	80018c2 <HAL_ADC_MspInit+0x1a2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80018a6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80018aa:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80018ac:	f043 0320 	orr.w	r3, r3, #32
 80018b0:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80018b4:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80018b6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80018c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018c8:	4a11      	ldr	r2, [pc, #68]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_ADC_MspInit+0x1f0>)
 80018d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CC2_Pin;
 80018e0:	2320      	movs	r3, #32
 80018e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e6:	2303      	movs	r3, #3
 80018e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC2_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	@ (8001918 <HAL_ADC_MspInit+0x1f8>)
 80018fa:	f003 fdc7 	bl	800548c <HAL_GPIO_Init>
}
 80018fe:	bf00      	nop
 8001900:	37f8      	adds	r7, #248	@ 0xf8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40022000 	.word	0x40022000
 800190c:	240004c4 	.word	0x240004c4
 8001910:	58024400 	.word	0x58024400
 8001914:	58020000 	.word	0x58020000
 8001918:	58020800 	.word	0x58020800
 800191c:	58020400 	.word	0x58020400
 8001920:	40022100 	.word	0x40022100

08001924 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	@ 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6a      	ldr	r2, [pc, #424]	@ (8001aec <HAL_DCMI_MspInit+0x1c8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	f040 80ce 	bne.w	8001ae4 <HAL_DCMI_MspInit+0x1c0>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001948:	4b69      	ldr	r3, [pc, #420]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 800194a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800194e:	4a68      	ldr	r2, [pc, #416]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
 8001958:	4b65      	ldr	r3, [pc, #404]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 800195a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b62      	ldr	r3, [pc, #392]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 8001968:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800196c:	4a60      	ldr	r2, [pc, #384]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001976:	4b5e      	ldr	r3, [pc, #376]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 8001978:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001984:	4b5a      	ldr	r3, [pc, #360]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 8001986:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800198a:	4a59      	ldr	r2, [pc, #356]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001994:	4b56      	ldr	r3, [pc, #344]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 8001996:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a2:	4b53      	ldr	r3, [pc, #332]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 80019a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019a8:	4a51      	ldr	r2, [pc, #324]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019b2:	4b4f      	ldr	r3, [pc, #316]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 80019b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	4b4b      	ldr	r3, [pc, #300]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 80019c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019c6:	4a4a      	ldr	r2, [pc, #296]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019d0:	4b47      	ldr	r3, [pc, #284]	@ (8001af0 <HAL_DCMI_MspInit+0x1cc>)
 80019d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80019de:	2350      	movs	r3, #80	@ 0x50
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019ee:	230d      	movs	r3, #13
 80019f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	483e      	ldr	r0, [pc, #248]	@ (8001af4 <HAL_DCMI_MspInit+0x1d0>)
 80019fa:	f003 fd47 	bl	800548c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80019fe:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8001a02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a10:	230d      	movs	r3, #13
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4837      	ldr	r0, [pc, #220]	@ (8001af8 <HAL_DCMI_MspInit+0x1d4>)
 8001a1c:	f003 fd36 	bl	800548c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a20:	2308      	movs	r3, #8
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a30:	230d      	movs	r3, #13
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4830      	ldr	r0, [pc, #192]	@ (8001afc <HAL_DCMI_MspInit+0x1d8>)
 8001a3c:	f003 fd26 	bl	800548c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a40:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a52:	230d      	movs	r3, #13
 8001a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4828      	ldr	r0, [pc, #160]	@ (8001b00 <HAL_DCMI_MspInit+0x1dc>)
 8001a5e:	f003 fd15 	bl	800548c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001a62:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001a64:	4a28      	ldr	r2, [pc, #160]	@ (8001b08 <HAL_DCMI_MspInit+0x1e4>)
 8001a66:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8001a68:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001a6a:	224b      	movs	r2, #75	@ 0x4b
 8001a6c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a6e:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a74:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001a7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a80:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a82:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001a84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a88:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001a8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a90:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001a94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a98:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001ab8:	4812      	ldr	r0, [pc, #72]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001aba:	f001 fd75 	bl	80035a8 <HAL_DMA_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_DCMI_MspInit+0x1a4>
    {
      Error_Handler();
 8001ac4:	f7ff f958 	bl	8000d78 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001acc:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ace:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <HAL_DCMI_MspInit+0x1e0>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	204e      	movs	r0, #78	@ 0x4e
 8001ada:	f001 fb76 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8001ade:	204e      	movs	r0, #78	@ 0x4e
 8001ae0:	f001 fb8d 	bl	80031fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3730      	adds	r7, #48	@ 0x30
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	48020000 	.word	0x48020000
 8001af0:	58024400 	.word	0x58024400
 8001af4:	58020000 	.word	0x58020000
 8001af8:	58020800 	.word	0x58020800
 8001afc:	58020c00 	.word	0x58020c00
 8001b00:	58020400 	.word	0x58020400
 8001b04:	2400027c 	.word	0x2400027c
 8001b08:	40020010 	.word	0x40020010

08001b0c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0ba      	sub	sp, #232	@ 0xe8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	22c0      	movs	r2, #192	@ 0xc0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00e fe7f 	bl	8010830 <memset>
  if(hi2c->Instance==I2C2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a27      	ldr	r2, [pc, #156]	@ (8001bd4 <HAL_I2C_MspInit+0xc8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d146      	bne.n	8001bca <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b3c:	f04f 0208 	mov.w	r2, #8
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	4618      	mov	r0, r3
 8001b54:	f007 f8c8 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b5e:	f7ff f90b 	bl	8000d78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd8 <HAL_I2C_MspInit+0xcc>)
 8001b64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b68:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd8 <HAL_I2C_MspInit+0xcc>)
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_I2C_MspInit+0xcc>)
 8001b74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b88:	2312      	movs	r3, #18
 8001b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <HAL_I2C_MspInit+0xd0>)
 8001ba8:	f003 fc70 	bl	800548c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bac:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <HAL_I2C_MspInit+0xcc>)
 8001bae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <HAL_I2C_MspInit+0xcc>)
 8001bb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bb8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_I2C_MspInit+0xcc>)
 8001bbe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001bca:	bf00      	nop
 8001bcc:	37e8      	adds	r7, #232	@ 0xe8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40005800 	.word	0x40005800
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	58020400 	.word	0x58020400

08001be0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0ba      	sub	sp, #232	@ 0xe8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	22c0      	movs	r2, #192	@ 0xc0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00e fe15 	bl	8010830 <memset>
  if(hspi->Instance==SPI4)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a63      	ldr	r2, [pc, #396]	@ (8001d98 <HAL_SPI_MspInit+0x1b8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	f040 80bf 	bne.w	8001d90 <HAL_SPI_MspInit+0x1b0>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001c12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSE;
 8001c1e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001c22:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f007 f85d 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001c34:	f7ff f8a0 	bl	8000d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c38:	4b58      	ldr	r3, [pc, #352]	@ (8001d9c <HAL_SPI_MspInit+0x1bc>)
 8001c3a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001c3e:	4a57      	ldr	r2, [pc, #348]	@ (8001d9c <HAL_SPI_MspInit+0x1bc>)
 8001c40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c44:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001c48:	4b54      	ldr	r3, [pc, #336]	@ (8001d9c <HAL_SPI_MspInit+0x1bc>)
 8001c4a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c56:	4b51      	ldr	r3, [pc, #324]	@ (8001d9c <HAL_SPI_MspInit+0x1bc>)
 8001c58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c5c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d9c <HAL_SPI_MspInit+0x1bc>)
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c66:	4b4d      	ldr	r3, [pc, #308]	@ (8001d9c <HAL_SPI_MspInit+0x1bc>)
 8001c68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_nSEL_Pin;
 8001c74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c8e:	2305      	movs	r3, #5
 8001c90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(SPI4_nSEL_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4841      	ldr	r0, [pc, #260]	@ (8001da0 <HAL_SPI_MspInit+0x1c0>)
 8001c9c:	f003 fbf6 	bl	800548c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001ca0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001cba:	2305      	movs	r3, #5
 8001cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4836      	ldr	r0, [pc, #216]	@ (8001da0 <HAL_SPI_MspInit+0x1c0>)
 8001cc8:	f003 fbe0 	bl	800548c <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream1;
 8001ccc:	4b35      	ldr	r3, [pc, #212]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001cce:	4a36      	ldr	r2, [pc, #216]	@ (8001da8 <HAL_SPI_MspInit+0x1c8>)
 8001cd0:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001cd2:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001cd4:	2254      	movs	r2, #84	@ 0x54
 8001cd6:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001cda:	2240      	movs	r2, #64	@ 0x40
 8001cdc:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cde:	4b31      	ldr	r3, [pc, #196]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001ce6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cea:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cfe:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d04:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001d0a:	4826      	ldr	r0, [pc, #152]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001d0c:	f001 fc4c 	bl	80035a8 <HAL_DMA_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_SPI_MspInit+0x13a>
    {
      Error_Handler();
 8001d16:	f7ff f82f 	bl	8000d78 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001d1e:	679a      	str	r2, [r3, #120]	@ 0x78
 8001d20:	4a20      	ldr	r2, [pc, #128]	@ (8001da4 <HAL_SPI_MspInit+0x1c4>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream2;
 8001d26:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d28:	4a21      	ldr	r2, [pc, #132]	@ (8001db0 <HAL_SPI_MspInit+0x1d0>)
 8001d2a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d2e:	2253      	movs	r2, #83	@ 0x53
 8001d30:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d32:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d44:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001d52:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001d64:	4811      	ldr	r0, [pc, #68]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d66:	f001 fc1f 	bl	80035a8 <HAL_DMA_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_SPI_MspInit+0x194>
    {
      Error_Handler();
 8001d70:	f7ff f802 	bl	8000d78 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d78:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001dac <HAL_SPI_MspInit+0x1cc>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2054      	movs	r0, #84	@ 0x54
 8001d86:	f001 fa20 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001d8a:	2054      	movs	r0, #84	@ 0x54
 8001d8c:	f001 fa37 	bl	80031fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001d90:	bf00      	nop
 8001d92:	37e8      	adds	r7, #232	@ 0xe8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40013400 	.word	0x40013400
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	58021000 	.word	0x58021000
 8001da4:	240003d0 	.word	0x240003d0
 8001da8:	40020028 	.word	0x40020028
 8001dac:	24000448 	.word	0x24000448
 8001db0:	40020040 	.word	0x40020040

08001db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <NMI_Handler+0x4>

08001dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0a:	f000 f999 	bl	8002140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001e18:	4802      	ldr	r0, [pc, #8]	@ (8001e24 <DMA1_Stream0_IRQHandler+0x10>)
 8001e1a:	f002 f999 	bl	8004150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2400027c 	.word	0x2400027c

08001e28 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001e2c:	4802      	ldr	r0, [pc, #8]	@ (8001e38 <DMA1_Stream1_IRQHandler+0x10>)
 8001e2e:	f002 f98f 	bl	8004150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	240003d0 	.word	0x240003d0

08001e3c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001e40:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <DMA1_Stream2_IRQHandler+0x10>)
 8001e42:	f002 f985 	bl	8004150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	24000448 	.word	0x24000448

08001e50 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001e54:	4802      	ldr	r0, [pc, #8]	@ (8001e60 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8001e56:	f004 fd8b 	bl	8006970 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	240019ac 	.word	0x240019ac

08001e64 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8001e6a:	f004 fd81 	bl	8006970 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	240019ac 	.word	0x240019ac

08001e78 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <OTG_HS_IRQHandler+0x10>)
 8001e7e:	f004 fd77 	bl	8006970 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	240019ac 	.word	0x240019ac

08001e8c <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <DCMI_PSSI_IRQHandler+0x10>)
 8001e92:	f001 fac1 	bl	8003418 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2400022c 	.word	0x2400022c

08001ea0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <SPI4_IRQHandler+0x10>)
 8001ea6:	f00a f975 	bl	800c194 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	24000348 	.word	0x24000348

08001eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <SystemInit+0x100>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8001fb4 <SystemInit+0x100>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb8 <SystemInit+0x104>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d807      	bhi.n	8001ee4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ed4:	4b38      	ldr	r3, [pc, #224]	@ (8001fb8 <SystemInit+0x104>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 030f 	bic.w	r3, r3, #15
 8001edc:	4a36      	ldr	r2, [pc, #216]	@ (8001fb8 <SystemInit+0x104>)
 8001ede:	f043 0303 	orr.w	r3, r3, #3
 8001ee2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ee4:	4b35      	ldr	r3, [pc, #212]	@ (8001fbc <SystemInit+0x108>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a34      	ldr	r2, [pc, #208]	@ (8001fbc <SystemInit+0x108>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ef0:	4b32      	ldr	r3, [pc, #200]	@ (8001fbc <SystemInit+0x108>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ef6:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <SystemInit+0x108>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4930      	ldr	r1, [pc, #192]	@ (8001fbc <SystemInit+0x108>)
 8001efc:	4b30      	ldr	r3, [pc, #192]	@ (8001fc0 <SystemInit+0x10c>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f02:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb8 <SystemInit+0x104>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <SystemInit+0x104>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 030f 	bic.w	r3, r3, #15
 8001f16:	4a28      	ldr	r2, [pc, #160]	@ (8001fb8 <SystemInit+0x104>)
 8001f18:	f043 0303 	orr.w	r3, r3, #3
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <SystemInit+0x108>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001f24:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <SystemInit+0x108>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001f2a:	4b24      	ldr	r3, [pc, #144]	@ (8001fbc <SystemInit+0x108>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f30:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <SystemInit+0x108>)
 8001f32:	4a24      	ldr	r2, [pc, #144]	@ (8001fc4 <SystemInit+0x110>)
 8001f34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f36:	4b21      	ldr	r3, [pc, #132]	@ (8001fbc <SystemInit+0x108>)
 8001f38:	4a23      	ldr	r2, [pc, #140]	@ (8001fc8 <SystemInit+0x114>)
 8001f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <SystemInit+0x108>)
 8001f3e:	4a23      	ldr	r2, [pc, #140]	@ (8001fcc <SystemInit+0x118>)
 8001f40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	@ (8001fbc <SystemInit+0x108>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <SystemInit+0x108>)
 8001f4a:	4a20      	ldr	r2, [pc, #128]	@ (8001fcc <SystemInit+0x118>)
 8001f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <SystemInit+0x108>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <SystemInit+0x108>)
 8001f56:	4a1d      	ldr	r2, [pc, #116]	@ (8001fcc <SystemInit+0x118>)
 8001f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f5a:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <SystemInit+0x108>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f60:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <SystemInit+0x108>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a15      	ldr	r2, [pc, #84]	@ (8001fbc <SystemInit+0x108>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <SystemInit+0x108>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001f72:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <SystemInit+0x108>)
 8001f74:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001f78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d113      	bne.n	8001fa8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <SystemInit+0x108>)
 8001f82:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001f86:	4a0d      	ldr	r2, [pc, #52]	@ (8001fbc <SystemInit+0x108>)
 8001f88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f8c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <SystemInit+0x11c>)
 8001f92:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001f96:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <SystemInit+0x108>)
 8001f9a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001f9e:	4a07      	ldr	r2, [pc, #28]	@ (8001fbc <SystemInit+0x108>)
 8001fa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fa4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00
 8001fb8:	52002000 	.word	0x52002000
 8001fbc:	58024400 	.word	0x58024400
 8001fc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001fc4:	02020200 	.word	0x02020200
 8001fc8:	01ff0000 	.word	0x01ff0000
 8001fcc:	01010280 	.word	0x01010280
 8001fd0:	52004000 	.word	0x52004000

08001fd4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <ExitRun0Mode+0x2c>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a08      	ldr	r2, [pc, #32]	@ (8002000 <ExitRun0Mode+0x2c>)
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001fe4:	bf00      	nop
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <ExitRun0Mode+0x2c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f9      	beq.n	8001fe6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	58024800 	.word	0x58024800

08002004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002004:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002040 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002008:	f7ff ffe4 	bl	8001fd4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800200c:	f7ff ff52 	bl	8001eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002010:	480c      	ldr	r0, [pc, #48]	@ (8002044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002012:	490d      	ldr	r1, [pc, #52]	@ (8002048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002018:	e002      	b.n	8002020 <LoopCopyDataInit>

0800201a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800201c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201e:	3304      	adds	r3, #4

08002020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002024:	d3f9      	bcc.n	800201a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002026:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002028:	4c0a      	ldr	r4, [pc, #40]	@ (8002054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800202c:	e001      	b.n	8002032 <LoopFillZerobss>

0800202e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002030:	3204      	adds	r2, #4

08002032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002034:	d3fb      	bcc.n	800202e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002036:	f00e fc03 	bl	8010840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7fe fae9 	bl	8000610 <main>
  bx  lr
 800203e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002040:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002044:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002048:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 800204c:	08010a3c 	.word	0x08010a3c
  ldr r2, =_sbss
 8002050:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8002054:	240020b0 	.word	0x240020b0

08002058 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002062:	2003      	movs	r0, #3
 8002064:	f001 f8a6 	bl	80031b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002068:	f006 fc7e 	bl	8008968 <HAL_RCC_GetSysClockFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <HAL_Init+0x68>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	4913      	ldr	r1, [pc, #76]	@ (80020c8 <HAL_Init+0x6c>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002086:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <HAL_Init+0x68>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <HAL_Init+0x6c>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	4a0b      	ldr	r2, [pc, #44]	@ (80020cc <HAL_Init+0x70>)
 800209e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020a0:	4a0b      	ldr	r2, [pc, #44]	@ (80020d0 <HAL_Init+0x74>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020a6:	200f      	movs	r0, #15
 80020a8:	f000 f814 	bl	80020d4 <HAL_InitTick>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e002      	b.n	80020bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020b6:	f7ff fb19 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	58024400 	.word	0x58024400
 80020c8:	08010a1c 	.word	0x08010a1c
 80020cc:	24000004 	.word	0x24000004
 80020d0:	24000000 	.word	0x24000000

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020dc:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_InitTick+0x60>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e021      	b.n	800212c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <HAL_InitTick+0x64>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_InitTick+0x60>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	f001 f88b 	bl	800321a <HAL_SYSTICK_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00e      	b.n	800212c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d80a      	bhi.n	800212a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f001 f855 	bl	80031ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002120:	4a06      	ldr	r2, [pc, #24]	@ (800213c <HAL_InitTick+0x68>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2400000c 	.word	0x2400000c
 8002138:	24000000 	.word	0x24000000
 800213c:	24000008 	.word	0x24000008

08002140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_IncTick+0x20>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_IncTick+0x24>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_IncTick+0x24>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	2400000c 	.word	0x2400000c
 8002164:	240004c8 	.word	0x240004c8

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	240004c8 	.word	0x240004c8

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d005      	beq.n	80021a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_Delay+0x44>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021a6:	bf00      	nop
 80021a8:	f7ff ffde 	bl	8002168 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d8f7      	bhi.n	80021a8 <HAL_Delay+0x28>
  {
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2400000c 	.word	0x2400000c

080021c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	609a      	str	r2, [r3, #8]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	609a      	str	r2, [r3, #8]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002240:	2b00      	cmp	r3, #0
 8002242:	d107      	bne.n	8002254 <LL_ADC_SetChannelPreselection+0x24>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	2201      	movs	r2, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	e015      	b.n	8002280 <LL_ADC_SetChannelPreselection+0x50>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800226a:	2320      	movs	r3, #32
 800226c:	e003      	b.n	8002276 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2201      	movs	r2, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	69d2      	ldr	r2, [r2, #28]
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002296:	b480      	push	{r7}
 8002298:	b087      	sub	sp, #28
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3360      	adds	r3, #96	@ 0x60
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	430b      	orrs	r3, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	611a      	str	r2, [r3, #16]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3360      	adds	r3, #96	@ 0x60
 8002318:	461a      	mov	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	431a      	orrs	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	601a      	str	r2, [r3, #0]
  }
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800233e:	b480      	push	{r7}
 8002340:	b087      	sub	sp, #28
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3330      	adds	r3, #48	@ 0x30
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	4413      	add	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	211f      	movs	r1, #31
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	401a      	ands	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	f003 011f 	and.w	r1, r3, #31
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	431a      	orrs	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002396:	b480      	push	{r7}
 8002398:	b087      	sub	sp, #28
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3314      	adds	r3, #20
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	0e5b      	lsrs	r3, r3, #25
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	4413      	add	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	0d1b      	lsrs	r3, r3, #20
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2107      	movs	r1, #7
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	401a      	ands	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	0d1b      	lsrs	r3, r3, #20
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	431a      	orrs	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0318 	and.w	r3, r3, #24
 800240e:	4908      	ldr	r1, [pc, #32]	@ (8002430 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002410:	40d9      	lsrs	r1, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	400b      	ands	r3, r1
 8002416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800241a:	431a      	orrs	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	000fffff 	.word	0x000fffff

08002434 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002442:	4013      	ands	r3, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6093      	str	r3, [r2, #8]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	5fffffc0 	.word	0x5fffffc0

08002458 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800246c:	d101      	bne.n	8002472 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800248e:	4013      	ands	r3, r2
 8002490:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	6fffffc0 	.word	0x6fffffc0

080024a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <LL_ADC_IsEnabled+0x18>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <LL_ADC_IsEnabled+0x1a>
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b04      	cmp	r3, #4
 8002508:	d101      	bne.n	800250e <LL_ADC_REG_IsConversionOngoing+0x18>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b08      	cmp	r3, #8
 800252e:	d101      	bne.n	8002534 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e138      	b.n	80027d0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff f8d7 	bl	8001720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff67 	bl	8002458 <LL_ADC_IsDeepPowerDownEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff4d 	bl	8002434 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff82 	bl	80024a8 <LL_ADC_IsInternalRegulatorEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d114      	bne.n	80025d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff66 	bl	8002480 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025b4:	4b88      	ldr	r3, [pc, #544]	@ (80027d8 <HAL_ADC_Init+0x294>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	4a88      	ldr	r2, [pc, #544]	@ (80027dc <HAL_ADC_Init+0x298>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	3301      	adds	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025c6:	e002      	b.n	80025ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f9      	bne.n	80025c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff65 	bl	80024a8 <LL_ADC_IsInternalRegulatorEnabled>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10d      	bne.n	8002600 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	f043 0210 	orr.w	r2, r3, #16
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff76 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 800260a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 80d2 	bne.w	80027be <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 80ce 	bne.w	80027be <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002626:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff4a 	bl	80024d0 <LL_ADC_IsEnabled>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d110      	bne.n	8002664 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002642:	4867      	ldr	r0, [pc, #412]	@ (80027e0 <HAL_ADC_Init+0x29c>)
 8002644:	f7ff ff44 	bl	80024d0 <LL_ADC_IsEnabled>
 8002648:	4604      	mov	r4, r0
 800264a:	4866      	ldr	r0, [pc, #408]	@ (80027e4 <HAL_ADC_Init+0x2a0>)
 800264c:	f7ff ff40 	bl	80024d0 <LL_ADC_IsEnabled>
 8002650:	4603      	mov	r3, r0
 8002652:	4323      	orrs	r3, r4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4619      	mov	r1, r3
 800265e:	4862      	ldr	r0, [pc, #392]	@ (80027e8 <HAL_ADC_Init+0x2a4>)
 8002660:	f7ff fdb2 	bl	80021c8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	7d5b      	ldrb	r3, [r3, #21]
 8002668:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800266e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002674:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7f1b      	ldrb	r3, [r3, #28]
 800267a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7f1b      	ldrb	r3, [r3, #28]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d106      	bne.n	8002696 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	3b01      	subs	r3, #1
 800268e:	045b      	lsls	r3, r3, #17
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	4b4c      	ldr	r3, [pc, #304]	@ (80027ec <HAL_ADC_Init+0x2a8>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	69b9      	ldr	r1, [r7, #24]
 80026c2:	430b      	orrs	r3, r1
 80026c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff13 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 80026d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff20 	bl	800251c <LL_ADC_INJ_IsConversionOngoing>
 80026dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d14a      	bne.n	800277a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d147      	bne.n	800277a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7d1b      	ldrb	r3, [r3, #20]
 80026ee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	4b3c      	ldr	r3, [pc, #240]	@ (80027f0 <HAL_ADC_Init+0x2ac>)
 8002700:	4013      	ands	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	69b9      	ldr	r1, [r7, #24]
 8002708:	430b      	orrs	r3, r1
 800270a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002712:	2b01      	cmp	r3, #1
 8002714:	d11b      	bne.n	800274e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	4b34      	ldr	r3, [pc, #208]	@ (80027f4 <HAL_ADC_Init+0x2b0>)
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800272a:	3a01      	subs	r2, #1
 800272c:	0411      	lsls	r1, r2, #16
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002738:	4311      	orrs	r1, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800273e:	430a      	orrs	r2, r1
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	611a      	str	r2, [r3, #16]
 800274c:	e007      	b.n	800275e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fabd 	bl	8002cf4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10c      	bne.n	800279c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	f023 010f 	bic.w	r1, r3, #15
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	1e5a      	subs	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	631a      	str	r2, [r3, #48]	@ 0x30
 800279a:	e007      	b.n	80027ac <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 020f 	bic.w	r2, r2, #15
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b0:	f023 0303 	bic.w	r3, r3, #3
 80027b4:	f043 0201 	orr.w	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80027bc:	e007      	b.n	80027ce <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c2:	f043 0210 	orr.w	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3724      	adds	r7, #36	@ 0x24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd90      	pop	{r4, r7, pc}
 80027d8:	24000000 	.word	0x24000000
 80027dc:	053e2d63 	.word	0x053e2d63
 80027e0:	40022000 	.word	0x40022000
 80027e4:	40022100 	.word	0x40022100
 80027e8:	40022300 	.word	0x40022300
 80027ec:	fff0c003 	.word	0xfff0c003
 80027f0:	ffffbffc 	.word	0xffffbffc
 80027f4:	fc00f81e 	.word	0xfc00f81e

080027f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b08d      	sub	sp, #52	@ 0x34
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a5b      	ldr	r2, [pc, #364]	@ (8002980 <HAL_ADC_ConfigChannel+0x188>)
 8002812:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x2a>
 800281e:	2302      	movs	r3, #2
 8002820:	e263      	b.n	8002cea <HAL_ADC_ConfigChannel+0x4f2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fe61 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 8248 	bne.w	8002ccc <HAL_ADC_ConfigChannel+0x4d4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db2c      	blt.n	800289e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800284c:	2b00      	cmp	r3, #0
 800284e:	d108      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x6a>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2201      	movs	r2, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	e016      	b.n	8002890 <HAL_ADC_ConfigChannel+0x98>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	613b      	str	r3, [r7, #16]
  return result;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800287a:	2320      	movs	r3, #32
 800287c:	e003      	b.n	8002886 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	2201      	movs	r2, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	69d1      	ldr	r1, [r2, #28]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	430b      	orrs	r3, r1
 800289c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f7ff fd47 	bl	800233e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fe1e 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 80028ba:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fe2b 	bl	800251c <LL_ADC_INJ_IsConversionOngoing>
 80028c6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 80a2 	bne.w	8002a14 <HAL_ADC_ConfigChannel+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 809e 	bne.w	8002a14 <HAL_ADC_ConfigChannel+0x21c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	461a      	mov	r2, r3
 80028e6:	f7ff fd56 	bl	8002396 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x118>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	e00a      	b.n	8002926 <HAL_ADC_ConfigChannel+0x12e>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d029      	beq.n	8002984 <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6919      	ldr	r1, [r3, #16]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	f7ff fcaa 	bl	8002296 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	7e5b      	ldrb	r3, [r3, #25]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d102      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x160>
 8002952:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002956:	e000      	b.n	800295a <HAL_ADC_ConfigChannel+0x162>
 8002958:	2300      	movs	r3, #0
 800295a:	461a      	mov	r2, r3
 800295c:	f7ff fcd4 	bl	8002308 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6919      	ldr	r1, [r3, #16]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	7e1b      	ldrb	r3, [r3, #24]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d102      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x17e>
 8002970:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002974:	e000      	b.n	8002978 <HAL_ADC_ConfigChannel+0x180>
 8002976:	2300      	movs	r3, #0
 8002978:	461a      	mov	r2, r3
 800297a:	f7ff fcac 	bl	80022d6 <LL_ADC_SetDataRightShift>
 800297e:	e049      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x21c>
 8002980:	47ff0000 	.word	0x47ff0000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	069b      	lsls	r3, r3, #26
 8002994:	429a      	cmp	r2, r3
 8002996:	d107      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1b0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029a6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	069b      	lsls	r3, r3, #26
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d107      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1d4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029ca:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	429a      	cmp	r2, r3
 80029de:	d107      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1f8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029ee:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	069b      	lsls	r3, r3, #26
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d107      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x21c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a12:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fd59 	bl	80024d0 <LL_ADC_IsEnabled>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f040 815c 	bne.w	8002cde <HAL_ADC_ConfigChannel+0x4e6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6819      	ldr	r1, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f7ff fcda 	bl	80023ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a89      	ldr	r2, [pc, #548]	@ (8002c64 <HAL_ADC_ConfigChannel+0x46c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	f040 809a 	bne.w	8002b78 <HAL_ADC_ConfigChannel+0x380>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4986      	ldr	r1, [pc, #536]	@ (8002c68 <HAL_ADC_ConfigChannel+0x470>)
 8002a4e:	428b      	cmp	r3, r1
 8002a50:	d147      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x2ea>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4985      	ldr	r1, [pc, #532]	@ (8002c6c <HAL_ADC_ConfigChannel+0x474>)
 8002a58:	428b      	cmp	r3, r1
 8002a5a:	d040      	beq.n	8002ade <HAL_ADC_ConfigChannel+0x2e6>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4983      	ldr	r1, [pc, #524]	@ (8002c70 <HAL_ADC_ConfigChannel+0x478>)
 8002a62:	428b      	cmp	r3, r1
 8002a64:	d039      	beq.n	8002ada <HAL_ADC_ConfigChannel+0x2e2>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4982      	ldr	r1, [pc, #520]	@ (8002c74 <HAL_ADC_ConfigChannel+0x47c>)
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	d032      	beq.n	8002ad6 <HAL_ADC_ConfigChannel+0x2de>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4980      	ldr	r1, [pc, #512]	@ (8002c78 <HAL_ADC_ConfigChannel+0x480>)
 8002a76:	428b      	cmp	r3, r1
 8002a78:	d02b      	beq.n	8002ad2 <HAL_ADC_ConfigChannel+0x2da>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	497f      	ldr	r1, [pc, #508]	@ (8002c7c <HAL_ADC_ConfigChannel+0x484>)
 8002a80:	428b      	cmp	r3, r1
 8002a82:	d024      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x2d6>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	497d      	ldr	r1, [pc, #500]	@ (8002c80 <HAL_ADC_ConfigChannel+0x488>)
 8002a8a:	428b      	cmp	r3, r1
 8002a8c:	d01d      	beq.n	8002aca <HAL_ADC_ConfigChannel+0x2d2>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	497c      	ldr	r1, [pc, #496]	@ (8002c84 <HAL_ADC_ConfigChannel+0x48c>)
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d016      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x2ce>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	497a      	ldr	r1, [pc, #488]	@ (8002c88 <HAL_ADC_ConfigChannel+0x490>)
 8002a9e:	428b      	cmp	r3, r1
 8002aa0:	d00f      	beq.n	8002ac2 <HAL_ADC_ConfigChannel+0x2ca>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4979      	ldr	r1, [pc, #484]	@ (8002c8c <HAL_ADC_ConfigChannel+0x494>)
 8002aa8:	428b      	cmp	r3, r1
 8002aaa:	d008      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x2c6>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4977      	ldr	r1, [pc, #476]	@ (8002c90 <HAL_ADC_ConfigChannel+0x498>)
 8002ab2:	428b      	cmp	r3, r1
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x2c2>
 8002ab6:	4b77      	ldr	r3, [pc, #476]	@ (8002c94 <HAL_ADC_ConfigChannel+0x49c>)
 8002ab8:	e05a      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002aba:	2300      	movs	r3, #0
 8002abc:	e058      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002abe:	4b76      	ldr	r3, [pc, #472]	@ (8002c98 <HAL_ADC_ConfigChannel+0x4a0>)
 8002ac0:	e056      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002ac2:	4b76      	ldr	r3, [pc, #472]	@ (8002c9c <HAL_ADC_ConfigChannel+0x4a4>)
 8002ac4:	e054      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002ac6:	4b70      	ldr	r3, [pc, #448]	@ (8002c88 <HAL_ADC_ConfigChannel+0x490>)
 8002ac8:	e052      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002aca:	4b6e      	ldr	r3, [pc, #440]	@ (8002c84 <HAL_ADC_ConfigChannel+0x48c>)
 8002acc:	e050      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002ace:	4b74      	ldr	r3, [pc, #464]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x4a8>)
 8002ad0:	e04e      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002ad2:	4b74      	ldr	r3, [pc, #464]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x4ac>)
 8002ad4:	e04c      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002ad6:	4b74      	ldr	r3, [pc, #464]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002ad8:	e04a      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002ada:	4b74      	ldr	r3, [pc, #464]	@ (8002cac <HAL_ADC_ConfigChannel+0x4b4>)
 8002adc:	e048      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e046      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4972      	ldr	r1, [pc, #456]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x4b8>)
 8002ae8:	428b      	cmp	r3, r1
 8002aea:	d140      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x376>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	495e      	ldr	r1, [pc, #376]	@ (8002c6c <HAL_ADC_ConfigChannel+0x474>)
 8002af2:	428b      	cmp	r3, r1
 8002af4:	d039      	beq.n	8002b6a <HAL_ADC_ConfigChannel+0x372>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	495d      	ldr	r1, [pc, #372]	@ (8002c70 <HAL_ADC_ConfigChannel+0x478>)
 8002afc:	428b      	cmp	r3, r1
 8002afe:	d032      	beq.n	8002b66 <HAL_ADC_ConfigChannel+0x36e>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	495b      	ldr	r1, [pc, #364]	@ (8002c74 <HAL_ADC_ConfigChannel+0x47c>)
 8002b06:	428b      	cmp	r3, r1
 8002b08:	d02b      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x36a>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	495a      	ldr	r1, [pc, #360]	@ (8002c78 <HAL_ADC_ConfigChannel+0x480>)
 8002b10:	428b      	cmp	r3, r1
 8002b12:	d024      	beq.n	8002b5e <HAL_ADC_ConfigChannel+0x366>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4958      	ldr	r1, [pc, #352]	@ (8002c7c <HAL_ADC_ConfigChannel+0x484>)
 8002b1a:	428b      	cmp	r3, r1
 8002b1c:	d01d      	beq.n	8002b5a <HAL_ADC_ConfigChannel+0x362>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4957      	ldr	r1, [pc, #348]	@ (8002c80 <HAL_ADC_ConfigChannel+0x488>)
 8002b24:	428b      	cmp	r3, r1
 8002b26:	d016      	beq.n	8002b56 <HAL_ADC_ConfigChannel+0x35e>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4955      	ldr	r1, [pc, #340]	@ (8002c84 <HAL_ADC_ConfigChannel+0x48c>)
 8002b2e:	428b      	cmp	r3, r1
 8002b30:	d00f      	beq.n	8002b52 <HAL_ADC_ConfigChannel+0x35a>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4954      	ldr	r1, [pc, #336]	@ (8002c88 <HAL_ADC_ConfigChannel+0x490>)
 8002b38:	428b      	cmp	r3, r1
 8002b3a:	d008      	beq.n	8002b4e <HAL_ADC_ConfigChannel+0x356>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4953      	ldr	r1, [pc, #332]	@ (8002c90 <HAL_ADC_ConfigChannel+0x498>)
 8002b42:	428b      	cmp	r3, r1
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x352>
 8002b46:	4b53      	ldr	r3, [pc, #332]	@ (8002c94 <HAL_ADC_ConfigChannel+0x49c>)
 8002b48:	e012      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e010      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002b4e:	4b53      	ldr	r3, [pc, #332]	@ (8002c9c <HAL_ADC_ConfigChannel+0x4a4>)
 8002b50:	e00e      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002b52:	4b4d      	ldr	r3, [pc, #308]	@ (8002c88 <HAL_ADC_ConfigChannel+0x490>)
 8002b54:	e00c      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002b56:	4b4b      	ldr	r3, [pc, #300]	@ (8002c84 <HAL_ADC_ConfigChannel+0x48c>)
 8002b58:	e00a      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002b5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x4a8>)
 8002b5c:	e008      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002b5e:	4b51      	ldr	r3, [pc, #324]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x4ac>)
 8002b60:	e006      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002b62:	4b51      	ldr	r3, [pc, #324]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002b64:	e004      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002b66:	4b51      	ldr	r3, [pc, #324]	@ (8002cac <HAL_ADC_ConfigChannel+0x4b4>)
 8002b68:	e002      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x378>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f7ff fb5c 	bl	8002230 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f280 80ae 	bge.w	8002cde <HAL_ADC_ConfigChannel+0x4e6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b82:	484c      	ldr	r0, [pc, #304]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x4bc>)
 8002b84:	f7ff fb46 	bl	8002214 <LL_ADC_GetCommonPathInternalCh>
 8002b88:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b8a:	4837      	ldr	r0, [pc, #220]	@ (8002c68 <HAL_ADC_ConfigChannel+0x470>)
 8002b8c:	f7ff fca0 	bl	80024d0 <LL_ADC_IsEnabled>
 8002b90:	4604      	mov	r4, r0
 8002b92:	4847      	ldr	r0, [pc, #284]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x4b8>)
 8002b94:	f7ff fc9c 	bl	80024d0 <LL_ADC_IsEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4323      	orrs	r3, r4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d156      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x456>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a44      	ldr	r2, [pc, #272]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d123      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x3fa>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d11e      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x3fa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a3d      	ldr	r2, [pc, #244]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x4b8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f040 808f 	bne.w	8002cde <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	483a      	ldr	r0, [pc, #232]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x4bc>)
 8002bca:	f7ff fb10 	bl	80021ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bce:	4b3b      	ldr	r3, [pc, #236]	@ (8002cbc <HAL_ADC_ConfigChannel+0x4c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x4c8>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	3301      	adds	r3, #1
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002be2:	e002      	b.n	8002bea <HAL_ADC_ConfigChannel+0x3f2>
              {
                wait_loop_index--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f9      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf0:	e075      	b.n	8002cde <HAL_ADC_ConfigChannel+0x4e6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a33      	ldr	r2, [pc, #204]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x4cc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d111      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x428>
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10c      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x428>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a29      	ldr	r2, [pc, #164]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x4b8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d166      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c16:	4619      	mov	r1, r3
 8002c18:	4826      	ldr	r0, [pc, #152]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x4bc>)
 8002c1a:	f7ff fae8 	bl	80021ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c1e:	e05e      	b.n	8002cde <HAL_ADC_ConfigChannel+0x4e6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a28      	ldr	r2, [pc, #160]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x4d0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d159      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x4e6>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d154      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x4b8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d14f      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c44:	4619      	mov	r1, r3
 8002c46:	481b      	ldr	r0, [pc, #108]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x4bc>)
 8002c48:	f7ff fad1 	bl	80021ee <LL_ADC_SetCommonPathInternalCh>
 8002c4c:	e047      	b.n	8002cde <HAL_ADC_ConfigChannel+0x4e6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c52:	f043 0220 	orr.w	r2, r3, #32
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002c60:	e03d      	b.n	8002cde <HAL_ADC_ConfigChannel+0x4e6>
 8002c62:	bf00      	nop
 8002c64:	47ff0000 	.word	0x47ff0000
 8002c68:	40022000 	.word	0x40022000
 8002c6c:	04300002 	.word	0x04300002
 8002c70:	08600004 	.word	0x08600004
 8002c74:	0c900008 	.word	0x0c900008
 8002c78:	10c00010 	.word	0x10c00010
 8002c7c:	14f00020 	.word	0x14f00020
 8002c80:	2a000400 	.word	0x2a000400
 8002c84:	2e300800 	.word	0x2e300800
 8002c88:	32601000 	.word	0x32601000
 8002c8c:	43210000 	.word	0x43210000
 8002c90:	4b840000 	.word	0x4b840000
 8002c94:	4fb80000 	.word	0x4fb80000
 8002c98:	47520000 	.word	0x47520000
 8002c9c:	36902000 	.word	0x36902000
 8002ca0:	25b00200 	.word	0x25b00200
 8002ca4:	21800100 	.word	0x21800100
 8002ca8:	1d500080 	.word	0x1d500080
 8002cac:	19200040 	.word	0x19200040
 8002cb0:	40022100 	.word	0x40022100
 8002cb4:	40022300 	.word	0x40022300
 8002cb8:	cb840000 	.word	0xcb840000
 8002cbc:	24000000 	.word	0x24000000
 8002cc0:	053e2d63 	.word	0x053e2d63
 8002cc4:	bac04000 	.word	0xbac04000
 8002cc8:	cfb80000 	.word	0xcfb80000
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3734      	adds	r7, #52	@ 0x34
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	bf00      	nop

08002cf4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002cfc:	4b60      	ldr	r3, [pc, #384]	@ (8002e80 <ADC_ConfigureBoostMode+0x18c>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01c      	beq.n	8002d42 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d08:	f005 ffa8 	bl	8008c5c <HAL_RCC_GetHCLKFreq>
 8002d0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d16:	d010      	beq.n	8002d3a <ADC_ConfigureBoostMode+0x46>
 8002d18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d1c:	d873      	bhi.n	8002e06 <ADC_ConfigureBoostMode+0x112>
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d22:	d002      	beq.n	8002d2a <ADC_ConfigureBoostMode+0x36>
 8002d24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d28:	d16d      	bne.n	8002e06 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0c1b      	lsrs	r3, r3, #16
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	60fb      	str	r3, [r7, #12]
        break;
 8002d38:	e068      	b.n	8002e0c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	60fb      	str	r3, [r7, #12]
        break;
 8002d40:	e064      	b.n	8002e0c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d42:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	f007 f98b 	bl	800a064 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d4e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d58:	d051      	beq.n	8002dfe <ADC_ConfigureBoostMode+0x10a>
 8002d5a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d5e:	d854      	bhi.n	8002e0a <ADC_ConfigureBoostMode+0x116>
 8002d60:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d64:	d047      	beq.n	8002df6 <ADC_ConfigureBoostMode+0x102>
 8002d66:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d6a:	d84e      	bhi.n	8002e0a <ADC_ConfigureBoostMode+0x116>
 8002d6c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d70:	d03d      	beq.n	8002dee <ADC_ConfigureBoostMode+0xfa>
 8002d72:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d76:	d848      	bhi.n	8002e0a <ADC_ConfigureBoostMode+0x116>
 8002d78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d7c:	d033      	beq.n	8002de6 <ADC_ConfigureBoostMode+0xf2>
 8002d7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d82:	d842      	bhi.n	8002e0a <ADC_ConfigureBoostMode+0x116>
 8002d84:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d88:	d029      	beq.n	8002dde <ADC_ConfigureBoostMode+0xea>
 8002d8a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d8e:	d83c      	bhi.n	8002e0a <ADC_ConfigureBoostMode+0x116>
 8002d90:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d94:	d01a      	beq.n	8002dcc <ADC_ConfigureBoostMode+0xd8>
 8002d96:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d9a:	d836      	bhi.n	8002e0a <ADC_ConfigureBoostMode+0x116>
 8002d9c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002da0:	d014      	beq.n	8002dcc <ADC_ConfigureBoostMode+0xd8>
 8002da2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002da6:	d830      	bhi.n	8002e0a <ADC_ConfigureBoostMode+0x116>
 8002da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dac:	d00e      	beq.n	8002dcc <ADC_ConfigureBoostMode+0xd8>
 8002dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002db2:	d82a      	bhi.n	8002e0a <ADC_ConfigureBoostMode+0x116>
 8002db4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002db8:	d008      	beq.n	8002dcc <ADC_ConfigureBoostMode+0xd8>
 8002dba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002dbe:	d824      	bhi.n	8002e0a <ADC_ConfigureBoostMode+0x116>
 8002dc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dc4:	d002      	beq.n	8002dcc <ADC_ConfigureBoostMode+0xd8>
 8002dc6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002dca:	d11e      	bne.n	8002e0a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	0c9b      	lsrs	r3, r3, #18
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dda:	60fb      	str	r3, [r7, #12]
        break;
 8002ddc:	e016      	b.n	8002e0c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	60fb      	str	r3, [r7, #12]
        break;
 8002de4:	e012      	b.n	8002e0c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	60fb      	str	r3, [r7, #12]
        break;
 8002dec:	e00e      	b.n	8002e0c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	099b      	lsrs	r3, r3, #6
 8002df2:	60fb      	str	r3, [r7, #12]
        break;
 8002df4:	e00a      	b.n	8002e0c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	09db      	lsrs	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]
        break;
 8002dfc:	e006      	b.n	8002e0c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	60fb      	str	r3, [r7, #12]
        break;
 8002e04:	e002      	b.n	8002e0c <ADC_ConfigureBoostMode+0x118>
        break;
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002e0a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a1b      	ldr	r2, [pc, #108]	@ (8002e84 <ADC_ConfigureBoostMode+0x190>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d808      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002e28:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e2a:	e025      	b.n	8002e78 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a16      	ldr	r2, [pc, #88]	@ (8002e88 <ADC_ConfigureBoostMode+0x194>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d80a      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	e016      	b.n	8002e78 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e8c <ADC_ConfigureBoostMode+0x198>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d80a      	bhi.n	8002e68 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e64:	609a      	str	r2, [r3, #8]
}
 8002e66:	e007      	b.n	8002e78 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002e76:	609a      	str	r2, [r3, #8]
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40022300 	.word	0x40022300
 8002e84:	005f5e10 	.word	0x005f5e10
 8002e88:	00bebc20 	.word	0x00bebc20
 8002e8c:	017d7840 	.word	0x017d7840

08002e90 <LL_ADC_IsEnabled>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <LL_ADC_IsEnabled+0x18>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <LL_ADC_IsEnabled+0x1a>
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d101      	bne.n	8002ece <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b09f      	sub	sp, #124	@ 0x7c
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e080      	b.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d102      	bne.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f14:	4b3c      	ldr	r3, [pc, #240]	@ (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	e001      	b.n	8002f1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e05f      	b.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ffb9 	bl	8002eb6 <LL_ADC_REG_IsConversionOngoing>
 8002f44:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ffb3 	bl	8002eb6 <LL_ADC_REG_IsConversionOngoing>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d141      	bne.n	8002fda <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d13e      	bne.n	8002fda <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800300c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f78:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f7a:	4822      	ldr	r0, [pc, #136]	@ (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f7c:	f7ff ff88 	bl	8002e90 <LL_ADC_IsEnabled>
 8002f80:	4604      	mov	r4, r0
 8002f82:	4821      	ldr	r0, [pc, #132]	@ (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f84:	f7ff ff84 	bl	8002e90 <LL_ADC_IsEnabled>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4323      	orrs	r3, r4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d12e      	bne.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4b1e      	ldr	r3, [pc, #120]	@ (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	6811      	ldr	r1, [r2, #0]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	6892      	ldr	r2, [r2, #8]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa8:	e021      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fb4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb6:	4813      	ldr	r0, [pc, #76]	@ (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002fb8:	f7ff ff6a 	bl	8002e90 <LL_ADC_IsEnabled>
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	4812      	ldr	r0, [pc, #72]	@ (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002fc0:	f7ff ff66 	bl	8002e90 <LL_ADC_IsEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4323      	orrs	r3, r4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d110      	bne.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fd6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd8:	e009      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	f043 0220 	orr.w	r2, r3, #32
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002fec:	e000      	b.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fee:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ff8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	377c      	adds	r7, #124	@ 0x7c
 8003000:	46bd      	mov	sp, r7
 8003002:	bd90      	pop	{r4, r7, pc}
 8003004:	40022000 	.word	0x40022000
 8003008:	40022100 	.word	0x40022100
 800300c:	40022300 	.word	0x40022300
 8003010:	fffff0e0 	.word	0xfffff0e0

08003014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003030:	4013      	ands	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	4313      	orrs	r3, r2
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	@ (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	05fa0000 	.word	0x05fa0000

0800305c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <__NVIC_GetPriorityGrouping+0x18>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 0307 	and.w	r3, r3, #7
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db0b      	blt.n	80030a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4907      	ldr	r1, [pc, #28]	@ (80030b0 <__NVIC_EnableIRQ+0x38>)
 8003092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	@ (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	@ (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	@ 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
         );
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	@ 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003180:	d301      	bcc.n	8003186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003182:	2301      	movs	r3, #1
 8003184:	e00f      	b.n	80031a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003186:	4a0a      	ldr	r2, [pc, #40]	@ (80031b0 <SysTick_Config+0x40>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318e:	210f      	movs	r1, #15
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	f7ff ff8e 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <SysTick_Config+0x40>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319e:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <SysTick_Config+0x40>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	e000e010 	.word	0xe000e010

080031b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff29 	bl	8003014 <__NVIC_SetPriorityGrouping>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031d8:	f7ff ff40 	bl	800305c <__NVIC_GetPriorityGrouping>
 80031dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	6978      	ldr	r0, [r7, #20]
 80031e4:	f7ff ff90 	bl	8003108 <NVIC_EncodePriority>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff5f 	bl	80030b4 <__NVIC_SetPriority>
}
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff33 	bl	8003078 <__NVIC_EnableIRQ>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffa4 	bl	8003170 <SysTick_Config>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003238:	f3bf 8f5f 	dmb	sy
}
 800323c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800323e:	4b07      	ldr	r3, [pc, #28]	@ (800325c <HAL_MPU_Disable+0x28>)
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	4a06      	ldr	r2, [pc, #24]	@ (800325c <HAL_MPU_Disable+0x28>)
 8003244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003248:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800324a:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <HAL_MPU_Disable+0x2c>)
 800324c:	2200      	movs	r2, #0
 800324e:	605a      	str	r2, [r3, #4]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000ed00 	.word	0xe000ed00
 8003260:	e000ed90 	.word	0xe000ed90

08003264 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800326c:	4a0b      	ldr	r2, [pc, #44]	@ (800329c <HAL_MPU_Enable+0x38>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_MPU_Enable+0x3c>)
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	4a09      	ldr	r2, [pc, #36]	@ (80032a0 <HAL_MPU_Enable+0x3c>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003280:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003282:	f3bf 8f4f 	dsb	sy
}
 8003286:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003288:	f3bf 8f6f 	isb	sy
}
 800328c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000ed90 	.word	0xe000ed90
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	785a      	ldrb	r2, [r3, #1]
 80032b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_MPU_ConfigRegion+0x7c>)
 80032b2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80032b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <HAL_MPU_ConfigRegion+0x7c>)
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	4a19      	ldr	r2, [pc, #100]	@ (8003320 <HAL_MPU_ConfigRegion+0x7c>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80032c0:	4a17      	ldr	r2, [pc, #92]	@ (8003320 <HAL_MPU_ConfigRegion+0x7c>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7b1b      	ldrb	r3, [r3, #12]
 80032cc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7adb      	ldrb	r3, [r3, #11]
 80032d2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	7a9b      	ldrb	r3, [r3, #10]
 80032da:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7b5b      	ldrb	r3, [r3, #13]
 80032e2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7b9b      	ldrb	r3, [r3, #14]
 80032ea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7bdb      	ldrb	r3, [r3, #15]
 80032f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7a5b      	ldrb	r3, [r3, #9]
 80032fa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7a1b      	ldrb	r3, [r3, #8]
 8003302:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003304:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	7812      	ldrb	r2, [r2, #0]
 800330a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800330c:	4a04      	ldr	r2, [pc, #16]	@ (8003320 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800330e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003310:	6113      	str	r3, [r2, #16]
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000ed90 	.word	0xe000ed90

08003324 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e069      	b.n	800340a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fe faee 	bl	8001924 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b2a      	ldr	r3, [pc, #168]	@ (8003414 <HAL_DCMI_Init+0xf0>)
 800336a:	400b      	ands	r3, r1
 800336c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003382:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800338e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800339a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80033a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80033b2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d112      	bne.n	80033ea <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7f1b      	ldrb	r3, [r3, #28]
 80033c8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7f5b      	ldrb	r3, [r3, #29]
 80033ce:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80033d0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7f9b      	ldrb	r3, [r3, #30]
 80033d6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80033d8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7fdb      	ldrb	r3, [r3, #31]
 80033e0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80033e6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80033e8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 021e 	orr.w	r2, r2, #30
 80033f8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	ffe0f007 	.word	0xffe0f007

08003418 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d016      	beq.n	8003460 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2204      	movs	r2, #4
 8003438:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343e:	f043 0202 	orr.w	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2204      	movs	r2, #4
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003452:	4a31      	ldr	r2, [pc, #196]	@ (8003518 <HAL_DCMI_IRQHandler+0x100>)
 8003454:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fc32 	bl	8003cc4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d016      	beq.n	8003498 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2202      	movs	r2, #2
 8003470:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2204      	movs	r2, #4
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348a:	4a23      	ldr	r2, [pc, #140]	@ (8003518 <HAL_DCMI_IRQHandler+0x100>)
 800348c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fc16 	bl	8003cc4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2210      	movs	r2, #16
 80034a8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f840 	bl	8003530 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2208      	movs	r2, #8
 80034c0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f83e 	bl	8003544 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01d      	beq.n	800350e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d107      	bne.n	80034f0 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 021e 	bic.w	r2, r2, #30
 80034ee:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2201      	movs	r2, #1
 8003506:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f825 	bl	8003558 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	0800356d 	.word	0x0800356d

0800351c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800357e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003580:	2b02      	cmp	r3, #2
 8003582:	d009      	beq.n	8003598 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003590:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7ff ffbf 	bl	800351c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80035b0:	f7fe fdda 	bl	8002168 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e37d      	b.n	8003cbc <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a66      	ldr	r2, [pc, #408]	@ (8003760 <HAL_DMA_Init+0x1b8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d04a      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a65      	ldr	r2, [pc, #404]	@ (8003764 <HAL_DMA_Init+0x1bc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d045      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a63      	ldr	r2, [pc, #396]	@ (8003768 <HAL_DMA_Init+0x1c0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d040      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a62      	ldr	r2, [pc, #392]	@ (800376c <HAL_DMA_Init+0x1c4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d03b      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a60      	ldr	r2, [pc, #384]	@ (8003770 <HAL_DMA_Init+0x1c8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d036      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003774 <HAL_DMA_Init+0x1cc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d031      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5d      	ldr	r2, [pc, #372]	@ (8003778 <HAL_DMA_Init+0x1d0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d02c      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a5c      	ldr	r2, [pc, #368]	@ (800377c <HAL_DMA_Init+0x1d4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d027      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a5a      	ldr	r2, [pc, #360]	@ (8003780 <HAL_DMA_Init+0x1d8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d022      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a59      	ldr	r2, [pc, #356]	@ (8003784 <HAL_DMA_Init+0x1dc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d01d      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a57      	ldr	r2, [pc, #348]	@ (8003788 <HAL_DMA_Init+0x1e0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d018      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a56      	ldr	r2, [pc, #344]	@ (800378c <HAL_DMA_Init+0x1e4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d013      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a54      	ldr	r2, [pc, #336]	@ (8003790 <HAL_DMA_Init+0x1e8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00e      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a53      	ldr	r2, [pc, #332]	@ (8003794 <HAL_DMA_Init+0x1ec>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d009      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a51      	ldr	r2, [pc, #324]	@ (8003798 <HAL_DMA_Init+0x1f0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_DMA_Init+0xb8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a50      	ldr	r2, [pc, #320]	@ (800379c <HAL_DMA_Init+0x1f4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d101      	bne.n	8003664 <HAL_DMA_Init+0xbc>
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <HAL_DMA_Init+0xbe>
 8003664:	2300      	movs	r3, #0
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 813c 	beq.w	80038e4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a37      	ldr	r2, [pc, #220]	@ (8003760 <HAL_DMA_Init+0x1b8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d04a      	beq.n	800371c <HAL_DMA_Init+0x174>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a36      	ldr	r2, [pc, #216]	@ (8003764 <HAL_DMA_Init+0x1bc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d045      	beq.n	800371c <HAL_DMA_Init+0x174>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a34      	ldr	r2, [pc, #208]	@ (8003768 <HAL_DMA_Init+0x1c0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d040      	beq.n	800371c <HAL_DMA_Init+0x174>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a33      	ldr	r2, [pc, #204]	@ (800376c <HAL_DMA_Init+0x1c4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d03b      	beq.n	800371c <HAL_DMA_Init+0x174>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a31      	ldr	r2, [pc, #196]	@ (8003770 <HAL_DMA_Init+0x1c8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d036      	beq.n	800371c <HAL_DMA_Init+0x174>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a30      	ldr	r2, [pc, #192]	@ (8003774 <HAL_DMA_Init+0x1cc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d031      	beq.n	800371c <HAL_DMA_Init+0x174>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003778 <HAL_DMA_Init+0x1d0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02c      	beq.n	800371c <HAL_DMA_Init+0x174>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2d      	ldr	r2, [pc, #180]	@ (800377c <HAL_DMA_Init+0x1d4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d027      	beq.n	800371c <HAL_DMA_Init+0x174>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003780 <HAL_DMA_Init+0x1d8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d022      	beq.n	800371c <HAL_DMA_Init+0x174>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2a      	ldr	r2, [pc, #168]	@ (8003784 <HAL_DMA_Init+0x1dc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d01d      	beq.n	800371c <HAL_DMA_Init+0x174>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a28      	ldr	r2, [pc, #160]	@ (8003788 <HAL_DMA_Init+0x1e0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d018      	beq.n	800371c <HAL_DMA_Init+0x174>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a27      	ldr	r2, [pc, #156]	@ (800378c <HAL_DMA_Init+0x1e4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d013      	beq.n	800371c <HAL_DMA_Init+0x174>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a25      	ldr	r2, [pc, #148]	@ (8003790 <HAL_DMA_Init+0x1e8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_DMA_Init+0x174>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a24      	ldr	r2, [pc, #144]	@ (8003794 <HAL_DMA_Init+0x1ec>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_DMA_Init+0x174>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a22      	ldr	r2, [pc, #136]	@ (8003798 <HAL_DMA_Init+0x1f0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_DMA_Init+0x174>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a21      	ldr	r2, [pc, #132]	@ (800379c <HAL_DMA_Init+0x1f4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d108      	bne.n	800372e <HAL_DMA_Init+0x186>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e007      	b.n	800373e <HAL_DMA_Init+0x196>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800373e:	e02f      	b.n	80037a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003740:	f7fe fd12 	bl	8002168 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b05      	cmp	r3, #5
 800374c:	d928      	bls.n	80037a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2203      	movs	r2, #3
 8003758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e2ad      	b.n	8003cbc <HAL_DMA_Init+0x714>
 8003760:	40020010 	.word	0x40020010
 8003764:	40020028 	.word	0x40020028
 8003768:	40020040 	.word	0x40020040
 800376c:	40020058 	.word	0x40020058
 8003770:	40020070 	.word	0x40020070
 8003774:	40020088 	.word	0x40020088
 8003778:	400200a0 	.word	0x400200a0
 800377c:	400200b8 	.word	0x400200b8
 8003780:	40020410 	.word	0x40020410
 8003784:	40020428 	.word	0x40020428
 8003788:	40020440 	.word	0x40020440
 800378c:	40020458 	.word	0x40020458
 8003790:	40020470 	.word	0x40020470
 8003794:	40020488 	.word	0x40020488
 8003798:	400204a0 	.word	0x400204a0
 800379c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1c8      	bne.n	8003740 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4b73      	ldr	r3, [pc, #460]	@ (8003988 <HAL_DMA_Init+0x3e0>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80037c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d107      	bne.n	8003804 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	4313      	orrs	r3, r2
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b28      	cmp	r3, #40	@ 0x28
 800380a:	d903      	bls.n	8003814 <HAL_DMA_Init+0x26c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b2e      	cmp	r3, #46	@ 0x2e
 8003812:	d91f      	bls.n	8003854 <HAL_DMA_Init+0x2ac>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b3e      	cmp	r3, #62	@ 0x3e
 800381a:	d903      	bls.n	8003824 <HAL_DMA_Init+0x27c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b42      	cmp	r3, #66	@ 0x42
 8003822:	d917      	bls.n	8003854 <HAL_DMA_Init+0x2ac>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b46      	cmp	r3, #70	@ 0x46
 800382a:	d903      	bls.n	8003834 <HAL_DMA_Init+0x28c>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b48      	cmp	r3, #72	@ 0x48
 8003832:	d90f      	bls.n	8003854 <HAL_DMA_Init+0x2ac>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b4e      	cmp	r3, #78	@ 0x4e
 800383a:	d903      	bls.n	8003844 <HAL_DMA_Init+0x29c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b52      	cmp	r3, #82	@ 0x52
 8003842:	d907      	bls.n	8003854 <HAL_DMA_Init+0x2ac>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b73      	cmp	r3, #115	@ 0x73
 800384a:	d905      	bls.n	8003858 <HAL_DMA_Init+0x2b0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b77      	cmp	r3, #119	@ 0x77
 8003852:	d801      	bhi.n	8003858 <HAL_DMA_Init+0x2b0>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_DMA_Init+0x2b2>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003864:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 0307 	bic.w	r3, r3, #7
 800387c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	2b04      	cmp	r3, #4
 800388e:	d117      	bne.n	80038c0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00e      	beq.n	80038c0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f001 fc68 	bl	8005178 <DMA_CheckFifoParam>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2240      	movs	r2, #64	@ 0x40
 80038b2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e1fd      	b.n	8003cbc <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f001 fba3 	bl	8005014 <DMA_CalcBaseAndBitshift>
 80038ce:	4603      	mov	r3, r0
 80038d0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	223f      	movs	r2, #63	@ 0x3f
 80038dc:	409a      	lsls	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	e0fd      	b.n	8003ae0 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a28      	ldr	r2, [pc, #160]	@ (800398c <HAL_DMA_Init+0x3e4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d04a      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a27      	ldr	r2, [pc, #156]	@ (8003990 <HAL_DMA_Init+0x3e8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d045      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a25      	ldr	r2, [pc, #148]	@ (8003994 <HAL_DMA_Init+0x3ec>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d040      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a24      	ldr	r2, [pc, #144]	@ (8003998 <HAL_DMA_Init+0x3f0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d03b      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a22      	ldr	r2, [pc, #136]	@ (800399c <HAL_DMA_Init+0x3f4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d036      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a21      	ldr	r2, [pc, #132]	@ (80039a0 <HAL_DMA_Init+0x3f8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d031      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1f      	ldr	r2, [pc, #124]	@ (80039a4 <HAL_DMA_Init+0x3fc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d02c      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1e      	ldr	r2, [pc, #120]	@ (80039a8 <HAL_DMA_Init+0x400>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d027      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1c      	ldr	r2, [pc, #112]	@ (80039ac <HAL_DMA_Init+0x404>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d022      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1b      	ldr	r2, [pc, #108]	@ (80039b0 <HAL_DMA_Init+0x408>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d01d      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a19      	ldr	r2, [pc, #100]	@ (80039b4 <HAL_DMA_Init+0x40c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d018      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a18      	ldr	r2, [pc, #96]	@ (80039b8 <HAL_DMA_Init+0x410>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a16      	ldr	r2, [pc, #88]	@ (80039bc <HAL_DMA_Init+0x414>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a15      	ldr	r2, [pc, #84]	@ (80039c0 <HAL_DMA_Init+0x418>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d009      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <HAL_DMA_Init+0x41c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_DMA_Init+0x3dc>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a12      	ldr	r2, [pc, #72]	@ (80039c8 <HAL_DMA_Init+0x420>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d123      	bne.n	80039cc <HAL_DMA_Init+0x424>
 8003984:	2301      	movs	r3, #1
 8003986:	e022      	b.n	80039ce <HAL_DMA_Init+0x426>
 8003988:	fe10803f 	.word	0xfe10803f
 800398c:	48022c08 	.word	0x48022c08
 8003990:	48022c1c 	.word	0x48022c1c
 8003994:	48022c30 	.word	0x48022c30
 8003998:	48022c44 	.word	0x48022c44
 800399c:	48022c58 	.word	0x48022c58
 80039a0:	48022c6c 	.word	0x48022c6c
 80039a4:	48022c80 	.word	0x48022c80
 80039a8:	48022c94 	.word	0x48022c94
 80039ac:	58025408 	.word	0x58025408
 80039b0:	5802541c 	.word	0x5802541c
 80039b4:	58025430 	.word	0x58025430
 80039b8:	58025444 	.word	0x58025444
 80039bc:	58025458 	.word	0x58025458
 80039c0:	5802546c 	.word	0x5802546c
 80039c4:	58025480 	.word	0x58025480
 80039c8:	58025494 	.word	0x58025494
 80039cc:	2300      	movs	r3, #0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d07d      	beq.n	8003ace <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7f      	ldr	r2, [pc, #508]	@ (8003bd4 <HAL_DMA_Init+0x62c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d021      	beq.n	8003a20 <HAL_DMA_Init+0x478>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a7d      	ldr	r2, [pc, #500]	@ (8003bd8 <HAL_DMA_Init+0x630>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01c      	beq.n	8003a20 <HAL_DMA_Init+0x478>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7c      	ldr	r2, [pc, #496]	@ (8003bdc <HAL_DMA_Init+0x634>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d017      	beq.n	8003a20 <HAL_DMA_Init+0x478>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a7a      	ldr	r2, [pc, #488]	@ (8003be0 <HAL_DMA_Init+0x638>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d012      	beq.n	8003a20 <HAL_DMA_Init+0x478>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a79      	ldr	r2, [pc, #484]	@ (8003be4 <HAL_DMA_Init+0x63c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00d      	beq.n	8003a20 <HAL_DMA_Init+0x478>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a77      	ldr	r2, [pc, #476]	@ (8003be8 <HAL_DMA_Init+0x640>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d008      	beq.n	8003a20 <HAL_DMA_Init+0x478>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a76      	ldr	r2, [pc, #472]	@ (8003bec <HAL_DMA_Init+0x644>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <HAL_DMA_Init+0x478>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a74      	ldr	r2, [pc, #464]	@ (8003bf0 <HAL_DMA_Init+0x648>)
 8003a1e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003bf4 <HAL_DMA_Init+0x64c>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b40      	cmp	r3, #64	@ 0x40
 8003a46:	d008      	beq.n	8003a5a <HAL_DMA_Init+0x4b2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b80      	cmp	r3, #128	@ 0x80
 8003a4e:	d102      	bne.n	8003a56 <HAL_DMA_Init+0x4ae>
 8003a50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a54:	e002      	b.n	8003a5c <HAL_DMA_Init+0x4b4>
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <HAL_DMA_Init+0x4b4>
 8003a5a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68d2      	ldr	r2, [r2, #12]
 8003a60:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a62:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a6a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a72:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a7a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a82:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a8a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4b55      	ldr	r3, [pc, #340]	@ (8003bf8 <HAL_DMA_Init+0x650>)
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a55      	ldr	r2, [pc, #340]	@ (8003bfc <HAL_DMA_Init+0x654>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	009a      	lsls	r2, r3, #2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f001 faae 	bl	8005014 <DMA_CalcBaseAndBitshift>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	e008      	b.n	8003ae0 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2240      	movs	r2, #64	@ 0x40
 8003ad2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0ed      	b.n	8003cbc <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a46      	ldr	r2, [pc, #280]	@ (8003c00 <HAL_DMA_Init+0x658>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d072      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a45      	ldr	r2, [pc, #276]	@ (8003c04 <HAL_DMA_Init+0x65c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d06d      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a43      	ldr	r2, [pc, #268]	@ (8003c08 <HAL_DMA_Init+0x660>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d068      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a42      	ldr	r2, [pc, #264]	@ (8003c0c <HAL_DMA_Init+0x664>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d063      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a40      	ldr	r2, [pc, #256]	@ (8003c10 <HAL_DMA_Init+0x668>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d05e      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3f      	ldr	r2, [pc, #252]	@ (8003c14 <HAL_DMA_Init+0x66c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d059      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a3d      	ldr	r2, [pc, #244]	@ (8003c18 <HAL_DMA_Init+0x670>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d054      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c1c <HAL_DMA_Init+0x674>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04f      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3a      	ldr	r2, [pc, #232]	@ (8003c20 <HAL_DMA_Init+0x678>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d04a      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a39      	ldr	r2, [pc, #228]	@ (8003c24 <HAL_DMA_Init+0x67c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d045      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a37      	ldr	r2, [pc, #220]	@ (8003c28 <HAL_DMA_Init+0x680>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d040      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a36      	ldr	r2, [pc, #216]	@ (8003c2c <HAL_DMA_Init+0x684>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d03b      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a34      	ldr	r2, [pc, #208]	@ (8003c30 <HAL_DMA_Init+0x688>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d036      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a33      	ldr	r2, [pc, #204]	@ (8003c34 <HAL_DMA_Init+0x68c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d031      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a31      	ldr	r2, [pc, #196]	@ (8003c38 <HAL_DMA_Init+0x690>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02c      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a30      	ldr	r2, [pc, #192]	@ (8003c3c <HAL_DMA_Init+0x694>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d027      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a13      	ldr	r2, [pc, #76]	@ (8003bd4 <HAL_DMA_Init+0x62c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d022      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a12      	ldr	r2, [pc, #72]	@ (8003bd8 <HAL_DMA_Init+0x630>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d01d      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a10      	ldr	r2, [pc, #64]	@ (8003bdc <HAL_DMA_Init+0x634>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d018      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8003be0 <HAL_DMA_Init+0x638>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0d      	ldr	r2, [pc, #52]	@ (8003be4 <HAL_DMA_Init+0x63c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8003be8 <HAL_DMA_Init+0x640>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <HAL_DMA_Init+0x644>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_DMA_Init+0x628>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a09      	ldr	r2, [pc, #36]	@ (8003bf0 <HAL_DMA_Init+0x648>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d137      	bne.n	8003c40 <HAL_DMA_Init+0x698>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e036      	b.n	8003c42 <HAL_DMA_Init+0x69a>
 8003bd4:	58025408 	.word	0x58025408
 8003bd8:	5802541c 	.word	0x5802541c
 8003bdc:	58025430 	.word	0x58025430
 8003be0:	58025444 	.word	0x58025444
 8003be4:	58025458 	.word	0x58025458
 8003be8:	5802546c 	.word	0x5802546c
 8003bec:	58025480 	.word	0x58025480
 8003bf0:	58025494 	.word	0x58025494
 8003bf4:	fffe000f 	.word	0xfffe000f
 8003bf8:	a7fdabf8 	.word	0xa7fdabf8
 8003bfc:	cccccccd 	.word	0xcccccccd
 8003c00:	40020010 	.word	0x40020010
 8003c04:	40020028 	.word	0x40020028
 8003c08:	40020040 	.word	0x40020040
 8003c0c:	40020058 	.word	0x40020058
 8003c10:	40020070 	.word	0x40020070
 8003c14:	40020088 	.word	0x40020088
 8003c18:	400200a0 	.word	0x400200a0
 8003c1c:	400200b8 	.word	0x400200b8
 8003c20:	40020410 	.word	0x40020410
 8003c24:	40020428 	.word	0x40020428
 8003c28:	40020440 	.word	0x40020440
 8003c2c:	40020458 	.word	0x40020458
 8003c30:	40020470 	.word	0x40020470
 8003c34:	40020488 	.word	0x40020488
 8003c38:	400204a0 	.word	0x400204a0
 8003c3c:	400204b8 	.word	0x400204b8
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d032      	beq.n	8003cac <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f001 fb12 	bl	8005270 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b80      	cmp	r3, #128	@ 0x80
 8003c52:	d102      	bne.n	8003c5a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c6e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d010      	beq.n	8003c9a <HAL_DMA_Init+0x6f2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d80c      	bhi.n	8003c9a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f001 fb8f 	bl	80053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	e008      	b.n	8003cac <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e237      	b.n	8004146 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d004      	beq.n	8003cec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2280      	movs	r2, #128	@ 0x80
 8003ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e22c      	b.n	8004146 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a5c      	ldr	r2, [pc, #368]	@ (8003e64 <HAL_DMA_Abort_IT+0x1a0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d04a      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a5b      	ldr	r2, [pc, #364]	@ (8003e68 <HAL_DMA_Abort_IT+0x1a4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d045      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a59      	ldr	r2, [pc, #356]	@ (8003e6c <HAL_DMA_Abort_IT+0x1a8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d040      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a58      	ldr	r2, [pc, #352]	@ (8003e70 <HAL_DMA_Abort_IT+0x1ac>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d03b      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a56      	ldr	r2, [pc, #344]	@ (8003e74 <HAL_DMA_Abort_IT+0x1b0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d036      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a55      	ldr	r2, [pc, #340]	@ (8003e78 <HAL_DMA_Abort_IT+0x1b4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d031      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a53      	ldr	r2, [pc, #332]	@ (8003e7c <HAL_DMA_Abort_IT+0x1b8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d02c      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a52      	ldr	r2, [pc, #328]	@ (8003e80 <HAL_DMA_Abort_IT+0x1bc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d027      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a50      	ldr	r2, [pc, #320]	@ (8003e84 <HAL_DMA_Abort_IT+0x1c0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d022      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a4f      	ldr	r2, [pc, #316]	@ (8003e88 <HAL_DMA_Abort_IT+0x1c4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d01d      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a4d      	ldr	r2, [pc, #308]	@ (8003e8c <HAL_DMA_Abort_IT+0x1c8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d018      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8003e90 <HAL_DMA_Abort_IT+0x1cc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d013      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a4a      	ldr	r2, [pc, #296]	@ (8003e94 <HAL_DMA_Abort_IT+0x1d0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00e      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a49      	ldr	r2, [pc, #292]	@ (8003e98 <HAL_DMA_Abort_IT+0x1d4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d009      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a47      	ldr	r2, [pc, #284]	@ (8003e9c <HAL_DMA_Abort_IT+0x1d8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a46      	ldr	r2, [pc, #280]	@ (8003ea0 <HAL_DMA_Abort_IT+0x1dc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_DMA_Abort_IT+0xcc>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <HAL_DMA_Abort_IT+0xce>
 8003d90:	2300      	movs	r3, #0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8086 	beq.w	8003ea4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2f      	ldr	r2, [pc, #188]	@ (8003e64 <HAL_DMA_Abort_IT+0x1a0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d04a      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2e      	ldr	r2, [pc, #184]	@ (8003e68 <HAL_DMA_Abort_IT+0x1a4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d045      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e6c <HAL_DMA_Abort_IT+0x1a8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d040      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8003e70 <HAL_DMA_Abort_IT+0x1ac>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d03b      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	@ (8003e74 <HAL_DMA_Abort_IT+0x1b0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d036      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a28      	ldr	r2, [pc, #160]	@ (8003e78 <HAL_DMA_Abort_IT+0x1b4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d031      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a26      	ldr	r2, [pc, #152]	@ (8003e7c <HAL_DMA_Abort_IT+0x1b8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d02c      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a25      	ldr	r2, [pc, #148]	@ (8003e80 <HAL_DMA_Abort_IT+0x1bc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d027      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a23      	ldr	r2, [pc, #140]	@ (8003e84 <HAL_DMA_Abort_IT+0x1c0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d022      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <HAL_DMA_Abort_IT+0x1c4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d01d      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a20      	ldr	r2, [pc, #128]	@ (8003e8c <HAL_DMA_Abort_IT+0x1c8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d018      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1f      	ldr	r2, [pc, #124]	@ (8003e90 <HAL_DMA_Abort_IT+0x1cc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e94 <HAL_DMA_Abort_IT+0x1d0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1c      	ldr	r2, [pc, #112]	@ (8003e98 <HAL_DMA_Abort_IT+0x1d4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1a      	ldr	r2, [pc, #104]	@ (8003e9c <HAL_DMA_Abort_IT+0x1d8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x17c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a19      	ldr	r2, [pc, #100]	@ (8003ea0 <HAL_DMA_Abort_IT+0x1dc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d108      	bne.n	8003e52 <HAL_DMA_Abort_IT+0x18e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e178      	b.n	8004144 <HAL_DMA_Abort_IT+0x480>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e16f      	b.n	8004144 <HAL_DMA_Abort_IT+0x480>
 8003e64:	40020010 	.word	0x40020010
 8003e68:	40020028 	.word	0x40020028
 8003e6c:	40020040 	.word	0x40020040
 8003e70:	40020058 	.word	0x40020058
 8003e74:	40020070 	.word	0x40020070
 8003e78:	40020088 	.word	0x40020088
 8003e7c:	400200a0 	.word	0x400200a0
 8003e80:	400200b8 	.word	0x400200b8
 8003e84:	40020410 	.word	0x40020410
 8003e88:	40020428 	.word	0x40020428
 8003e8c:	40020440 	.word	0x40020440
 8003e90:	40020458 	.word	0x40020458
 8003e94:	40020470 	.word	0x40020470
 8003e98:	40020488 	.word	0x40020488
 8003e9c:	400204a0 	.word	0x400204a0
 8003ea0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 020e 	bic.w	r2, r2, #14
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a6c      	ldr	r2, [pc, #432]	@ (800406c <HAL_DMA_Abort_IT+0x3a8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d04a      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a6b      	ldr	r2, [pc, #428]	@ (8004070 <HAL_DMA_Abort_IT+0x3ac>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d045      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a69      	ldr	r2, [pc, #420]	@ (8004074 <HAL_DMA_Abort_IT+0x3b0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d040      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a68      	ldr	r2, [pc, #416]	@ (8004078 <HAL_DMA_Abort_IT+0x3b4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d03b      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a66      	ldr	r2, [pc, #408]	@ (800407c <HAL_DMA_Abort_IT+0x3b8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d036      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a65      	ldr	r2, [pc, #404]	@ (8004080 <HAL_DMA_Abort_IT+0x3bc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d031      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a63      	ldr	r2, [pc, #396]	@ (8004084 <HAL_DMA_Abort_IT+0x3c0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d02c      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a62      	ldr	r2, [pc, #392]	@ (8004088 <HAL_DMA_Abort_IT+0x3c4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d027      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a60      	ldr	r2, [pc, #384]	@ (800408c <HAL_DMA_Abort_IT+0x3c8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d022      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5f      	ldr	r2, [pc, #380]	@ (8004090 <HAL_DMA_Abort_IT+0x3cc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d01d      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5d      	ldr	r2, [pc, #372]	@ (8004094 <HAL_DMA_Abort_IT+0x3d0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d018      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a5c      	ldr	r2, [pc, #368]	@ (8004098 <HAL_DMA_Abort_IT+0x3d4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d013      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a5a      	ldr	r2, [pc, #360]	@ (800409c <HAL_DMA_Abort_IT+0x3d8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a59      	ldr	r2, [pc, #356]	@ (80040a0 <HAL_DMA_Abort_IT+0x3dc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a57      	ldr	r2, [pc, #348]	@ (80040a4 <HAL_DMA_Abort_IT+0x3e0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x290>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a56      	ldr	r2, [pc, #344]	@ (80040a8 <HAL_DMA_Abort_IT+0x3e4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d108      	bne.n	8003f66 <HAL_DMA_Abort_IT+0x2a2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e007      	b.n	8003f76 <HAL_DMA_Abort_IT+0x2b2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a3c      	ldr	r2, [pc, #240]	@ (800406c <HAL_DMA_Abort_IT+0x3a8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d072      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a3a      	ldr	r2, [pc, #232]	@ (8004070 <HAL_DMA_Abort_IT+0x3ac>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d06d      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a39      	ldr	r2, [pc, #228]	@ (8004074 <HAL_DMA_Abort_IT+0x3b0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d068      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a37      	ldr	r2, [pc, #220]	@ (8004078 <HAL_DMA_Abort_IT+0x3b4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d063      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a36      	ldr	r2, [pc, #216]	@ (800407c <HAL_DMA_Abort_IT+0x3b8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d05e      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a34      	ldr	r2, [pc, #208]	@ (8004080 <HAL_DMA_Abort_IT+0x3bc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d059      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a33      	ldr	r2, [pc, #204]	@ (8004084 <HAL_DMA_Abort_IT+0x3c0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d054      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a31      	ldr	r2, [pc, #196]	@ (8004088 <HAL_DMA_Abort_IT+0x3c4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d04f      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a30      	ldr	r2, [pc, #192]	@ (800408c <HAL_DMA_Abort_IT+0x3c8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d04a      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004090 <HAL_DMA_Abort_IT+0x3cc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d045      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2d      	ldr	r2, [pc, #180]	@ (8004094 <HAL_DMA_Abort_IT+0x3d0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d040      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8004098 <HAL_DMA_Abort_IT+0x3d4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d03b      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800409c <HAL_DMA_Abort_IT+0x3d8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d036      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a28      	ldr	r2, [pc, #160]	@ (80040a0 <HAL_DMA_Abort_IT+0x3dc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d031      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a27      	ldr	r2, [pc, #156]	@ (80040a4 <HAL_DMA_Abort_IT+0x3e0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d02c      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a25      	ldr	r2, [pc, #148]	@ (80040a8 <HAL_DMA_Abort_IT+0x3e4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d027      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a24      	ldr	r2, [pc, #144]	@ (80040ac <HAL_DMA_Abort_IT+0x3e8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d022      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a22      	ldr	r2, [pc, #136]	@ (80040b0 <HAL_DMA_Abort_IT+0x3ec>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01d      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a21      	ldr	r2, [pc, #132]	@ (80040b4 <HAL_DMA_Abort_IT+0x3f0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d018      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1f      	ldr	r2, [pc, #124]	@ (80040b8 <HAL_DMA_Abort_IT+0x3f4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1e      	ldr	r2, [pc, #120]	@ (80040bc <HAL_DMA_Abort_IT+0x3f8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1c      	ldr	r2, [pc, #112]	@ (80040c0 <HAL_DMA_Abort_IT+0x3fc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d009      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1b      	ldr	r2, [pc, #108]	@ (80040c4 <HAL_DMA_Abort_IT+0x400>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_DMA_Abort_IT+0x3a2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a19      	ldr	r2, [pc, #100]	@ (80040c8 <HAL_DMA_Abort_IT+0x404>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d132      	bne.n	80040cc <HAL_DMA_Abort_IT+0x408>
 8004066:	2301      	movs	r3, #1
 8004068:	e031      	b.n	80040ce <HAL_DMA_Abort_IT+0x40a>
 800406a:	bf00      	nop
 800406c:	40020010 	.word	0x40020010
 8004070:	40020028 	.word	0x40020028
 8004074:	40020040 	.word	0x40020040
 8004078:	40020058 	.word	0x40020058
 800407c:	40020070 	.word	0x40020070
 8004080:	40020088 	.word	0x40020088
 8004084:	400200a0 	.word	0x400200a0
 8004088:	400200b8 	.word	0x400200b8
 800408c:	40020410 	.word	0x40020410
 8004090:	40020428 	.word	0x40020428
 8004094:	40020440 	.word	0x40020440
 8004098:	40020458 	.word	0x40020458
 800409c:	40020470 	.word	0x40020470
 80040a0:	40020488 	.word	0x40020488
 80040a4:	400204a0 	.word	0x400204a0
 80040a8:	400204b8 	.word	0x400204b8
 80040ac:	58025408 	.word	0x58025408
 80040b0:	5802541c 	.word	0x5802541c
 80040b4:	58025430 	.word	0x58025430
 80040b8:	58025444 	.word	0x58025444
 80040bc:	58025458 	.word	0x58025458
 80040c0:	5802546c 	.word	0x5802546c
 80040c4:	58025480 	.word	0x58025480
 80040c8:	58025494 	.word	0x58025494
 80040cc:	2300      	movs	r3, #0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d028      	beq.n	8004124 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2201      	movs	r2, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004100:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004118:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004122:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop

08004150 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	@ 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800415c:	4b67      	ldr	r3, [pc, #412]	@ (80042fc <HAL_DMA_IRQHandler+0x1ac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a67      	ldr	r2, [pc, #412]	@ (8004300 <HAL_DMA_IRQHandler+0x1b0>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004174:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a5f      	ldr	r2, [pc, #380]	@ (8004304 <HAL_DMA_IRQHandler+0x1b4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d04a      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a5d      	ldr	r2, [pc, #372]	@ (8004308 <HAL_DMA_IRQHandler+0x1b8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d045      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a5c      	ldr	r2, [pc, #368]	@ (800430c <HAL_DMA_IRQHandler+0x1bc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d040      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004310 <HAL_DMA_IRQHandler+0x1c0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d03b      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a59      	ldr	r2, [pc, #356]	@ (8004314 <HAL_DMA_IRQHandler+0x1c4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d036      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a57      	ldr	r2, [pc, #348]	@ (8004318 <HAL_DMA_IRQHandler+0x1c8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d031      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a56      	ldr	r2, [pc, #344]	@ (800431c <HAL_DMA_IRQHandler+0x1cc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d02c      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a54      	ldr	r2, [pc, #336]	@ (8004320 <HAL_DMA_IRQHandler+0x1d0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d027      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a53      	ldr	r2, [pc, #332]	@ (8004324 <HAL_DMA_IRQHandler+0x1d4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d022      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a51      	ldr	r2, [pc, #324]	@ (8004328 <HAL_DMA_IRQHandler+0x1d8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01d      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a50      	ldr	r2, [pc, #320]	@ (800432c <HAL_DMA_IRQHandler+0x1dc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d018      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4e      	ldr	r2, [pc, #312]	@ (8004330 <HAL_DMA_IRQHandler+0x1e0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a4d      	ldr	r2, [pc, #308]	@ (8004334 <HAL_DMA_IRQHandler+0x1e4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a4b      	ldr	r2, [pc, #300]	@ (8004338 <HAL_DMA_IRQHandler+0x1e8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a4a      	ldr	r2, [pc, #296]	@ (800433c <HAL_DMA_IRQHandler+0x1ec>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a48      	ldr	r2, [pc, #288]	@ (8004340 <HAL_DMA_IRQHandler+0x1f0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_DMA_IRQHandler+0xd6>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_DMA_IRQHandler+0xd8>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 842b 	beq.w	8004a84 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2208      	movs	r2, #8
 8004238:	409a      	lsls	r2, r3
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80a2 	beq.w	8004388 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2e      	ldr	r2, [pc, #184]	@ (8004304 <HAL_DMA_IRQHandler+0x1b4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d04a      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2d      	ldr	r2, [pc, #180]	@ (8004308 <HAL_DMA_IRQHandler+0x1b8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d045      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2b      	ldr	r2, [pc, #172]	@ (800430c <HAL_DMA_IRQHandler+0x1bc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d040      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2a      	ldr	r2, [pc, #168]	@ (8004310 <HAL_DMA_IRQHandler+0x1c0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d03b      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a28      	ldr	r2, [pc, #160]	@ (8004314 <HAL_DMA_IRQHandler+0x1c4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d036      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a27      	ldr	r2, [pc, #156]	@ (8004318 <HAL_DMA_IRQHandler+0x1c8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d031      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a25      	ldr	r2, [pc, #148]	@ (800431c <HAL_DMA_IRQHandler+0x1cc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02c      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a24      	ldr	r2, [pc, #144]	@ (8004320 <HAL_DMA_IRQHandler+0x1d0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d027      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a22      	ldr	r2, [pc, #136]	@ (8004324 <HAL_DMA_IRQHandler+0x1d4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a21      	ldr	r2, [pc, #132]	@ (8004328 <HAL_DMA_IRQHandler+0x1d8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d01d      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1f      	ldr	r2, [pc, #124]	@ (800432c <HAL_DMA_IRQHandler+0x1dc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004330 <HAL_DMA_IRQHandler+0x1e0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004334 <HAL_DMA_IRQHandler+0x1e4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004338 <HAL_DMA_IRQHandler+0x1e8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a19      	ldr	r2, [pc, #100]	@ (800433c <HAL_DMA_IRQHandler+0x1ec>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a18      	ldr	r2, [pc, #96]	@ (8004340 <HAL_DMA_IRQHandler+0x1f0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d12f      	bne.n	8004344 <HAL_DMA_IRQHandler+0x1f4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bf14      	ite	ne
 80042f2:	2301      	movne	r3, #1
 80042f4:	2300      	moveq	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	e02e      	b.n	8004358 <HAL_DMA_IRQHandler+0x208>
 80042fa:	bf00      	nop
 80042fc:	24000000 	.word	0x24000000
 8004300:	1b4e81b5 	.word	0x1b4e81b5
 8004304:	40020010 	.word	0x40020010
 8004308:	40020028 	.word	0x40020028
 800430c:	40020040 	.word	0x40020040
 8004310:	40020058 	.word	0x40020058
 8004314:	40020070 	.word	0x40020070
 8004318:	40020088 	.word	0x40020088
 800431c:	400200a0 	.word	0x400200a0
 8004320:	400200b8 	.word	0x400200b8
 8004324:	40020410 	.word	0x40020410
 8004328:	40020428 	.word	0x40020428
 800432c:	40020440 	.word	0x40020440
 8004330:	40020458 	.word	0x40020458
 8004334:	40020470 	.word	0x40020470
 8004338:	40020488 	.word	0x40020488
 800433c:	400204a0 	.word	0x400204a0
 8004340:	400204b8 	.word	0x400204b8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	bf14      	ite	ne
 8004352:	2301      	movne	r3, #1
 8004354:	2300      	moveq	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0204 	bic.w	r2, r2, #4
 800436a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2208      	movs	r2, #8
 8004376:	409a      	lsls	r2, r3
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004380:	f043 0201 	orr.w	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d06e      	beq.n	800447c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a69      	ldr	r2, [pc, #420]	@ (8004548 <HAL_DMA_IRQHandler+0x3f8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d04a      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a67      	ldr	r2, [pc, #412]	@ (800454c <HAL_DMA_IRQHandler+0x3fc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d045      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a66      	ldr	r2, [pc, #408]	@ (8004550 <HAL_DMA_IRQHandler+0x400>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d040      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a64      	ldr	r2, [pc, #400]	@ (8004554 <HAL_DMA_IRQHandler+0x404>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d03b      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a63      	ldr	r2, [pc, #396]	@ (8004558 <HAL_DMA_IRQHandler+0x408>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d036      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a61      	ldr	r2, [pc, #388]	@ (800455c <HAL_DMA_IRQHandler+0x40c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d031      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a60      	ldr	r2, [pc, #384]	@ (8004560 <HAL_DMA_IRQHandler+0x410>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d02c      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004564 <HAL_DMA_IRQHandler+0x414>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d027      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a5d      	ldr	r2, [pc, #372]	@ (8004568 <HAL_DMA_IRQHandler+0x418>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5b      	ldr	r2, [pc, #364]	@ (800456c <HAL_DMA_IRQHandler+0x41c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01d      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5a      	ldr	r2, [pc, #360]	@ (8004570 <HAL_DMA_IRQHandler+0x420>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a58      	ldr	r2, [pc, #352]	@ (8004574 <HAL_DMA_IRQHandler+0x424>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a57      	ldr	r2, [pc, #348]	@ (8004578 <HAL_DMA_IRQHandler+0x428>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a55      	ldr	r2, [pc, #340]	@ (800457c <HAL_DMA_IRQHandler+0x42c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a54      	ldr	r2, [pc, #336]	@ (8004580 <HAL_DMA_IRQHandler+0x430>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a52      	ldr	r2, [pc, #328]	@ (8004584 <HAL_DMA_IRQHandler+0x434>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10a      	bne.n	8004454 <HAL_DMA_IRQHandler+0x304>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e003      	b.n	800445c <HAL_DMA_IRQHandler+0x30c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00d      	beq.n	800447c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2201      	movs	r2, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	f043 0202 	orr.w	r2, r3, #2
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2204      	movs	r2, #4
 8004486:	409a      	lsls	r2, r3
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 808f 	beq.w	80045b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2c      	ldr	r2, [pc, #176]	@ (8004548 <HAL_DMA_IRQHandler+0x3f8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d04a      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2a      	ldr	r2, [pc, #168]	@ (800454c <HAL_DMA_IRQHandler+0x3fc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d045      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a29      	ldr	r2, [pc, #164]	@ (8004550 <HAL_DMA_IRQHandler+0x400>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d040      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a27      	ldr	r2, [pc, #156]	@ (8004554 <HAL_DMA_IRQHandler+0x404>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d03b      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a26      	ldr	r2, [pc, #152]	@ (8004558 <HAL_DMA_IRQHandler+0x408>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d036      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a24      	ldr	r2, [pc, #144]	@ (800455c <HAL_DMA_IRQHandler+0x40c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d031      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a23      	ldr	r2, [pc, #140]	@ (8004560 <HAL_DMA_IRQHandler+0x410>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d02c      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a21      	ldr	r2, [pc, #132]	@ (8004564 <HAL_DMA_IRQHandler+0x414>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d027      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a20      	ldr	r2, [pc, #128]	@ (8004568 <HAL_DMA_IRQHandler+0x418>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d022      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1e      	ldr	r2, [pc, #120]	@ (800456c <HAL_DMA_IRQHandler+0x41c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01d      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004570 <HAL_DMA_IRQHandler+0x420>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d018      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1b      	ldr	r2, [pc, #108]	@ (8004574 <HAL_DMA_IRQHandler+0x424>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1a      	ldr	r2, [pc, #104]	@ (8004578 <HAL_DMA_IRQHandler+0x428>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a18      	ldr	r2, [pc, #96]	@ (800457c <HAL_DMA_IRQHandler+0x42c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a17      	ldr	r2, [pc, #92]	@ (8004580 <HAL_DMA_IRQHandler+0x430>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a15      	ldr	r2, [pc, #84]	@ (8004584 <HAL_DMA_IRQHandler+0x434>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d12a      	bne.n	8004588 <HAL_DMA_IRQHandler+0x438>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e023      	b.n	8004590 <HAL_DMA_IRQHandler+0x440>
 8004548:	40020010 	.word	0x40020010
 800454c:	40020028 	.word	0x40020028
 8004550:	40020040 	.word	0x40020040
 8004554:	40020058 	.word	0x40020058
 8004558:	40020070 	.word	0x40020070
 800455c:	40020088 	.word	0x40020088
 8004560:	400200a0 	.word	0x400200a0
 8004564:	400200b8 	.word	0x400200b8
 8004568:	40020410 	.word	0x40020410
 800456c:	40020428 	.word	0x40020428
 8004570:	40020440 	.word	0x40020440
 8004574:	40020458 	.word	0x40020458
 8004578:	40020470 	.word	0x40020470
 800457c:	40020488 	.word	0x40020488
 8004580:	400204a0 	.word	0x400204a0
 8004584:	400204b8 	.word	0x400204b8
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	2204      	movs	r2, #4
 800459e:	409a      	lsls	r2, r3
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a8:	f043 0204 	orr.w	r2, r3, #4
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	2210      	movs	r2, #16
 80045ba:	409a      	lsls	r2, r3
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a6 	beq.w	8004712 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a85      	ldr	r2, [pc, #532]	@ (80047e0 <HAL_DMA_IRQHandler+0x690>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d04a      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a83      	ldr	r2, [pc, #524]	@ (80047e4 <HAL_DMA_IRQHandler+0x694>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d045      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a82      	ldr	r2, [pc, #520]	@ (80047e8 <HAL_DMA_IRQHandler+0x698>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d040      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a80      	ldr	r2, [pc, #512]	@ (80047ec <HAL_DMA_IRQHandler+0x69c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d03b      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a7f      	ldr	r2, [pc, #508]	@ (80047f0 <HAL_DMA_IRQHandler+0x6a0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d036      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a7d      	ldr	r2, [pc, #500]	@ (80047f4 <HAL_DMA_IRQHandler+0x6a4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d031      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a7c      	ldr	r2, [pc, #496]	@ (80047f8 <HAL_DMA_IRQHandler+0x6a8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d02c      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a7a      	ldr	r2, [pc, #488]	@ (80047fc <HAL_DMA_IRQHandler+0x6ac>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d027      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a79      	ldr	r2, [pc, #484]	@ (8004800 <HAL_DMA_IRQHandler+0x6b0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d022      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a77      	ldr	r2, [pc, #476]	@ (8004804 <HAL_DMA_IRQHandler+0x6b4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01d      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a76      	ldr	r2, [pc, #472]	@ (8004808 <HAL_DMA_IRQHandler+0x6b8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d018      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a74      	ldr	r2, [pc, #464]	@ (800480c <HAL_DMA_IRQHandler+0x6bc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a73      	ldr	r2, [pc, #460]	@ (8004810 <HAL_DMA_IRQHandler+0x6c0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a71      	ldr	r2, [pc, #452]	@ (8004814 <HAL_DMA_IRQHandler+0x6c4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a70      	ldr	r2, [pc, #448]	@ (8004818 <HAL_DMA_IRQHandler+0x6c8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a6e      	ldr	r2, [pc, #440]	@ (800481c <HAL_DMA_IRQHandler+0x6cc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d10a      	bne.n	800467c <HAL_DMA_IRQHandler+0x52c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e009      	b.n	8004690 <HAL_DMA_IRQHandler+0x540>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf14      	ite	ne
 800468a:	2301      	movne	r3, #1
 800468c:	2300      	moveq	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d03e      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	2210      	movs	r2, #16
 800469e:	409a      	lsls	r2, r3
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d018      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d108      	bne.n	80046d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d024      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
 80046d0:	e01f      	b.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01b      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
 80046e2:	e016      	b.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0208 	bic.w	r2, r2, #8
 8004700:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2220      	movs	r2, #32
 800471c:	409a      	lsls	r2, r3
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8110 	beq.w	8004948 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2c      	ldr	r2, [pc, #176]	@ (80047e0 <HAL_DMA_IRQHandler+0x690>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d04a      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2b      	ldr	r2, [pc, #172]	@ (80047e4 <HAL_DMA_IRQHandler+0x694>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d045      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a29      	ldr	r2, [pc, #164]	@ (80047e8 <HAL_DMA_IRQHandler+0x698>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d040      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a28      	ldr	r2, [pc, #160]	@ (80047ec <HAL_DMA_IRQHandler+0x69c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d03b      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a26      	ldr	r2, [pc, #152]	@ (80047f0 <HAL_DMA_IRQHandler+0x6a0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d036      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a25      	ldr	r2, [pc, #148]	@ (80047f4 <HAL_DMA_IRQHandler+0x6a4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d031      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a23      	ldr	r2, [pc, #140]	@ (80047f8 <HAL_DMA_IRQHandler+0x6a8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d02c      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a22      	ldr	r2, [pc, #136]	@ (80047fc <HAL_DMA_IRQHandler+0x6ac>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d027      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a20      	ldr	r2, [pc, #128]	@ (8004800 <HAL_DMA_IRQHandler+0x6b0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d022      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1f      	ldr	r2, [pc, #124]	@ (8004804 <HAL_DMA_IRQHandler+0x6b4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d01d      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1d      	ldr	r2, [pc, #116]	@ (8004808 <HAL_DMA_IRQHandler+0x6b8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1c      	ldr	r2, [pc, #112]	@ (800480c <HAL_DMA_IRQHandler+0x6bc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004810 <HAL_DMA_IRQHandler+0x6c0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a19      	ldr	r2, [pc, #100]	@ (8004814 <HAL_DMA_IRQHandler+0x6c4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a17      	ldr	r2, [pc, #92]	@ (8004818 <HAL_DMA_IRQHandler+0x6c8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a16      	ldr	r2, [pc, #88]	@ (800481c <HAL_DMA_IRQHandler+0x6cc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d12b      	bne.n	8004820 <HAL_DMA_IRQHandler+0x6d0>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf14      	ite	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	2300      	moveq	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e02a      	b.n	8004834 <HAL_DMA_IRQHandler+0x6e4>
 80047de:	bf00      	nop
 80047e0:	40020010 	.word	0x40020010
 80047e4:	40020028 	.word	0x40020028
 80047e8:	40020040 	.word	0x40020040
 80047ec:	40020058 	.word	0x40020058
 80047f0:	40020070 	.word	0x40020070
 80047f4:	40020088 	.word	0x40020088
 80047f8:	400200a0 	.word	0x400200a0
 80047fc:	400200b8 	.word	0x400200b8
 8004800:	40020410 	.word	0x40020410
 8004804:	40020428 	.word	0x40020428
 8004808:	40020440 	.word	0x40020440
 800480c:	40020458 	.word	0x40020458
 8004810:	40020470 	.word	0x40020470
 8004814:	40020488 	.word	0x40020488
 8004818:	400204a0 	.word	0x400204a0
 800481c:	400204b8 	.word	0x400204b8
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8087 	beq.w	8004948 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2220      	movs	r2, #32
 8004844:	409a      	lsls	r2, r3
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b04      	cmp	r3, #4
 8004854:	d139      	bne.n	80048ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0216 	bic.w	r2, r2, #22
 8004864:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004874:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d103      	bne.n	8004886 <HAL_DMA_IRQHandler+0x736>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0208 	bic.w	r2, r2, #8
 8004894:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	223f      	movs	r2, #63	@ 0x3f
 80048a0:	409a      	lsls	r2, r3
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8382 	beq.w	8004fc4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3
          }
          return;
 80048c8:	e37c      	b.n	8004fc4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d018      	beq.n	800490a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d108      	bne.n	80048f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d02c      	beq.n	8004948 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	4798      	blx	r3
 80048f6:	e027      	b.n	8004948 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d023      	beq.n	8004948 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4798      	blx	r3
 8004908:	e01e      	b.n	8004948 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10f      	bne.n	8004938 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0210 	bic.w	r2, r2, #16
 8004926:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 833e 	beq.w	8004fce <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8088 	beq.w	8004a70 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2204      	movs	r2, #4
 8004964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a89      	ldr	r2, [pc, #548]	@ (8004b94 <HAL_DMA_IRQHandler+0xa44>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d04a      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a88      	ldr	r2, [pc, #544]	@ (8004b98 <HAL_DMA_IRQHandler+0xa48>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d045      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a86      	ldr	r2, [pc, #536]	@ (8004b9c <HAL_DMA_IRQHandler+0xa4c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d040      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a85      	ldr	r2, [pc, #532]	@ (8004ba0 <HAL_DMA_IRQHandler+0xa50>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d03b      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a83      	ldr	r2, [pc, #524]	@ (8004ba4 <HAL_DMA_IRQHandler+0xa54>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d036      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a82      	ldr	r2, [pc, #520]	@ (8004ba8 <HAL_DMA_IRQHandler+0xa58>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d031      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a80      	ldr	r2, [pc, #512]	@ (8004bac <HAL_DMA_IRQHandler+0xa5c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02c      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a7f      	ldr	r2, [pc, #508]	@ (8004bb0 <HAL_DMA_IRQHandler+0xa60>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d027      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a7d      	ldr	r2, [pc, #500]	@ (8004bb4 <HAL_DMA_IRQHandler+0xa64>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d022      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a7c      	ldr	r2, [pc, #496]	@ (8004bb8 <HAL_DMA_IRQHandler+0xa68>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d01d      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a7a      	ldr	r2, [pc, #488]	@ (8004bbc <HAL_DMA_IRQHandler+0xa6c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d018      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a79      	ldr	r2, [pc, #484]	@ (8004bc0 <HAL_DMA_IRQHandler+0xa70>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a77      	ldr	r2, [pc, #476]	@ (8004bc4 <HAL_DMA_IRQHandler+0xa74>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a76      	ldr	r2, [pc, #472]	@ (8004bc8 <HAL_DMA_IRQHandler+0xa78>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a74      	ldr	r2, [pc, #464]	@ (8004bcc <HAL_DMA_IRQHandler+0xa7c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a73      	ldr	r2, [pc, #460]	@ (8004bd0 <HAL_DMA_IRQHandler+0xa80>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d108      	bne.n	8004a1a <HAL_DMA_IRQHandler+0x8ca>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	e007      	b.n	8004a2a <HAL_DMA_IRQHandler+0x8da>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d307      	bcc.n	8004a46 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f2      	bne.n	8004a2a <HAL_DMA_IRQHandler+0x8da>
 8004a44:	e000      	b.n	8004a48 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a46:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2203      	movs	r2, #3
 8004a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004a5e:	e003      	b.n	8004a68 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 82aa 	beq.w	8004fce <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
 8004a82:	e2a4      	b.n	8004fce <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a52      	ldr	r2, [pc, #328]	@ (8004bd4 <HAL_DMA_IRQHandler+0xa84>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d04a      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a51      	ldr	r2, [pc, #324]	@ (8004bd8 <HAL_DMA_IRQHandler+0xa88>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d045      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a4f      	ldr	r2, [pc, #316]	@ (8004bdc <HAL_DMA_IRQHandler+0xa8c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d040      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8004be0 <HAL_DMA_IRQHandler+0xa90>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d03b      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8004be4 <HAL_DMA_IRQHandler+0xa94>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d036      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a4b      	ldr	r2, [pc, #300]	@ (8004be8 <HAL_DMA_IRQHandler+0xa98>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d031      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a49      	ldr	r2, [pc, #292]	@ (8004bec <HAL_DMA_IRQHandler+0xa9c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02c      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a48      	ldr	r2, [pc, #288]	@ (8004bf0 <HAL_DMA_IRQHandler+0xaa0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d027      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a46      	ldr	r2, [pc, #280]	@ (8004bf4 <HAL_DMA_IRQHandler+0xaa4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a45      	ldr	r2, [pc, #276]	@ (8004bf8 <HAL_DMA_IRQHandler+0xaa8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d01d      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a43      	ldr	r2, [pc, #268]	@ (8004bfc <HAL_DMA_IRQHandler+0xaac>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a42      	ldr	r2, [pc, #264]	@ (8004c00 <HAL_DMA_IRQHandler+0xab0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a40      	ldr	r2, [pc, #256]	@ (8004c04 <HAL_DMA_IRQHandler+0xab4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c08 <HAL_DMA_IRQHandler+0xab8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a3d      	ldr	r2, [pc, #244]	@ (8004c0c <HAL_DMA_IRQHandler+0xabc>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x9d4>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c10 <HAL_DMA_IRQHandler+0xac0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <HAL_DMA_IRQHandler+0x9d8>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <HAL_DMA_IRQHandler+0x9da>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 824f 	beq.w	8004fce <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	2204      	movs	r2, #4
 8004b42:	409a      	lsls	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80dd 	beq.w	8004d08 <HAL_DMA_IRQHandler+0xbb8>
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80d7 	beq.w	8004d08 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	2204      	movs	r2, #4
 8004b64:	409a      	lsls	r2, r3
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d059      	beq.n	8004c28 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d14a      	bne.n	8004c14 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 8220 	beq.w	8004fc8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b90:	e21a      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xe78>
 8004b92:	bf00      	nop
 8004b94:	40020010 	.word	0x40020010
 8004b98:	40020028 	.word	0x40020028
 8004b9c:	40020040 	.word	0x40020040
 8004ba0:	40020058 	.word	0x40020058
 8004ba4:	40020070 	.word	0x40020070
 8004ba8:	40020088 	.word	0x40020088
 8004bac:	400200a0 	.word	0x400200a0
 8004bb0:	400200b8 	.word	0x400200b8
 8004bb4:	40020410 	.word	0x40020410
 8004bb8:	40020428 	.word	0x40020428
 8004bbc:	40020440 	.word	0x40020440
 8004bc0:	40020458 	.word	0x40020458
 8004bc4:	40020470 	.word	0x40020470
 8004bc8:	40020488 	.word	0x40020488
 8004bcc:	400204a0 	.word	0x400204a0
 8004bd0:	400204b8 	.word	0x400204b8
 8004bd4:	48022c08 	.word	0x48022c08
 8004bd8:	48022c1c 	.word	0x48022c1c
 8004bdc:	48022c30 	.word	0x48022c30
 8004be0:	48022c44 	.word	0x48022c44
 8004be4:	48022c58 	.word	0x48022c58
 8004be8:	48022c6c 	.word	0x48022c6c
 8004bec:	48022c80 	.word	0x48022c80
 8004bf0:	48022c94 	.word	0x48022c94
 8004bf4:	58025408 	.word	0x58025408
 8004bf8:	5802541c 	.word	0x5802541c
 8004bfc:	58025430 	.word	0x58025430
 8004c00:	58025444 	.word	0x58025444
 8004c04:	58025458 	.word	0x58025458
 8004c08:	5802546c 	.word	0x5802546c
 8004c0c:	58025480 	.word	0x58025480
 8004c10:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 81d5 	beq.w	8004fc8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c26:	e1cf      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d160      	bne.n	8004cf4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a7f      	ldr	r2, [pc, #508]	@ (8004e34 <HAL_DMA_IRQHandler+0xce4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d04a      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a7d      	ldr	r2, [pc, #500]	@ (8004e38 <HAL_DMA_IRQHandler+0xce8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d045      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e3c <HAL_DMA_IRQHandler+0xcec>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d040      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a7a      	ldr	r2, [pc, #488]	@ (8004e40 <HAL_DMA_IRQHandler+0xcf0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d03b      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a79      	ldr	r2, [pc, #484]	@ (8004e44 <HAL_DMA_IRQHandler+0xcf4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d036      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a77      	ldr	r2, [pc, #476]	@ (8004e48 <HAL_DMA_IRQHandler+0xcf8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d031      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a76      	ldr	r2, [pc, #472]	@ (8004e4c <HAL_DMA_IRQHandler+0xcfc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d02c      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a74      	ldr	r2, [pc, #464]	@ (8004e50 <HAL_DMA_IRQHandler+0xd00>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d027      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a73      	ldr	r2, [pc, #460]	@ (8004e54 <HAL_DMA_IRQHandler+0xd04>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d022      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a71      	ldr	r2, [pc, #452]	@ (8004e58 <HAL_DMA_IRQHandler+0xd08>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01d      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a70      	ldr	r2, [pc, #448]	@ (8004e5c <HAL_DMA_IRQHandler+0xd0c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e60 <HAL_DMA_IRQHandler+0xd10>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a6d      	ldr	r2, [pc, #436]	@ (8004e64 <HAL_DMA_IRQHandler+0xd14>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8004e68 <HAL_DMA_IRQHandler+0xd18>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a6a      	ldr	r2, [pc, #424]	@ (8004e6c <HAL_DMA_IRQHandler+0xd1c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xb82>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a68      	ldr	r2, [pc, #416]	@ (8004e70 <HAL_DMA_IRQHandler+0xd20>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d108      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0xb94>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0208 	bic.w	r2, r2, #8
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e007      	b.n	8004cf4 <HAL_DMA_IRQHandler+0xba4>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0204 	bic.w	r2, r2, #4
 8004cf2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8165 	beq.w	8004fc8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d06:	e15f      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	2202      	movs	r2, #2
 8004d12:	409a      	lsls	r2, r3
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80c5 	beq.w	8004ea8 <HAL_DMA_IRQHandler+0xd58>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80bf 	beq.w	8004ea8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2202      	movs	r2, #2
 8004d34:	409a      	lsls	r2, r3
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d018      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 813a 	beq.w	8004fcc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d60:	e134      	b.n	8004fcc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8130 	beq.w	8004fcc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d74:	e12a      	b.n	8004fcc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 8089 	bne.w	8004e94 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2b      	ldr	r2, [pc, #172]	@ (8004e34 <HAL_DMA_IRQHandler+0xce4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d04a      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a29      	ldr	r2, [pc, #164]	@ (8004e38 <HAL_DMA_IRQHandler+0xce8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d045      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a28      	ldr	r2, [pc, #160]	@ (8004e3c <HAL_DMA_IRQHandler+0xcec>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d040      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a26      	ldr	r2, [pc, #152]	@ (8004e40 <HAL_DMA_IRQHandler+0xcf0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d03b      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a25      	ldr	r2, [pc, #148]	@ (8004e44 <HAL_DMA_IRQHandler+0xcf4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d036      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a23      	ldr	r2, [pc, #140]	@ (8004e48 <HAL_DMA_IRQHandler+0xcf8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d031      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a22      	ldr	r2, [pc, #136]	@ (8004e4c <HAL_DMA_IRQHandler+0xcfc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d02c      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a20      	ldr	r2, [pc, #128]	@ (8004e50 <HAL_DMA_IRQHandler+0xd00>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d027      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e54 <HAL_DMA_IRQHandler+0xd04>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d022      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <HAL_DMA_IRQHandler+0xd08>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01d      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1c      	ldr	r2, [pc, #112]	@ (8004e5c <HAL_DMA_IRQHandler+0xd0c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d018      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e60 <HAL_DMA_IRQHandler+0xd10>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a19      	ldr	r2, [pc, #100]	@ (8004e64 <HAL_DMA_IRQHandler+0xd14>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a17      	ldr	r2, [pc, #92]	@ (8004e68 <HAL_DMA_IRQHandler+0xd18>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a16      	ldr	r2, [pc, #88]	@ (8004e6c <HAL_DMA_IRQHandler+0xd1c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xcd2>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a14      	ldr	r2, [pc, #80]	@ (8004e70 <HAL_DMA_IRQHandler+0xd20>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d128      	bne.n	8004e74 <HAL_DMA_IRQHandler+0xd24>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0214 	bic.w	r2, r2, #20
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	e027      	b.n	8004e84 <HAL_DMA_IRQHandler+0xd34>
 8004e34:	40020010 	.word	0x40020010
 8004e38:	40020028 	.word	0x40020028
 8004e3c:	40020040 	.word	0x40020040
 8004e40:	40020058 	.word	0x40020058
 8004e44:	40020070 	.word	0x40020070
 8004e48:	40020088 	.word	0x40020088
 8004e4c:	400200a0 	.word	0x400200a0
 8004e50:	400200b8 	.word	0x400200b8
 8004e54:	40020410 	.word	0x40020410
 8004e58:	40020428 	.word	0x40020428
 8004e5c:	40020440 	.word	0x40020440
 8004e60:	40020458 	.word	0x40020458
 8004e64:	40020470 	.word	0x40020470
 8004e68:	40020488 	.word	0x40020488
 8004e6c:	400204a0 	.word	0x400204a0
 8004e70:	400204b8 	.word	0x400204b8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 020a 	bic.w	r2, r2, #10
 8004e82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8097 	beq.w	8004fcc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ea6:	e091      	b.n	8004fcc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8088 	beq.w	8004fce <HAL_DMA_IRQHandler+0xe7e>
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8082 	beq.w	8004fce <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a41      	ldr	r2, [pc, #260]	@ (8004fd4 <HAL_DMA_IRQHandler+0xe84>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d04a      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3f      	ldr	r2, [pc, #252]	@ (8004fd8 <HAL_DMA_IRQHandler+0xe88>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d045      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8004fdc <HAL_DMA_IRQHandler+0xe8c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d040      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a3c      	ldr	r2, [pc, #240]	@ (8004fe0 <HAL_DMA_IRQHandler+0xe90>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d03b      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8004fe4 <HAL_DMA_IRQHandler+0xe94>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d036      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a39      	ldr	r2, [pc, #228]	@ (8004fe8 <HAL_DMA_IRQHandler+0xe98>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d031      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a38      	ldr	r2, [pc, #224]	@ (8004fec <HAL_DMA_IRQHandler+0xe9c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d02c      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a36      	ldr	r2, [pc, #216]	@ (8004ff0 <HAL_DMA_IRQHandler+0xea0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d027      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a35      	ldr	r2, [pc, #212]	@ (8004ff4 <HAL_DMA_IRQHandler+0xea4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d022      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a33      	ldr	r2, [pc, #204]	@ (8004ff8 <HAL_DMA_IRQHandler+0xea8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01d      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a32      	ldr	r2, [pc, #200]	@ (8004ffc <HAL_DMA_IRQHandler+0xeac>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d018      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a30      	ldr	r2, [pc, #192]	@ (8005000 <HAL_DMA_IRQHandler+0xeb0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2f      	ldr	r2, [pc, #188]	@ (8005004 <HAL_DMA_IRQHandler+0xeb4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a2d      	ldr	r2, [pc, #180]	@ (8005008 <HAL_DMA_IRQHandler+0xeb8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800500c <HAL_DMA_IRQHandler+0xebc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xe1a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2a      	ldr	r2, [pc, #168]	@ (8005010 <HAL_DMA_IRQHandler+0xec0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d108      	bne.n	8004f7c <HAL_DMA_IRQHandler+0xe2c>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 021c 	bic.w	r2, r2, #28
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e007      	b.n	8004f8c <HAL_DMA_IRQHandler+0xe3c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 020e 	bic.w	r2, r2, #14
 8004f8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2201      	movs	r2, #1
 8004f96:	409a      	lsls	r2, r3
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	4798      	blx	r3
 8004fc2:	e004      	b.n	8004fce <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004fc4:	bf00      	nop
 8004fc6:	e002      	b.n	8004fce <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fc8:	bf00      	nop
 8004fca:	e000      	b.n	8004fce <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fcc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004fce:	3728      	adds	r7, #40	@ 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40020010 	.word	0x40020010
 8004fd8:	40020028 	.word	0x40020028
 8004fdc:	40020040 	.word	0x40020040
 8004fe0:	40020058 	.word	0x40020058
 8004fe4:	40020070 	.word	0x40020070
 8004fe8:	40020088 	.word	0x40020088
 8004fec:	400200a0 	.word	0x400200a0
 8004ff0:	400200b8 	.word	0x400200b8
 8004ff4:	40020410 	.word	0x40020410
 8004ff8:	40020428 	.word	0x40020428
 8004ffc:	40020440 	.word	0x40020440
 8005000:	40020458 	.word	0x40020458
 8005004:	40020470 	.word	0x40020470
 8005008:	40020488 	.word	0x40020488
 800500c:	400204a0 	.word	0x400204a0
 8005010:	400204b8 	.word	0x400204b8

08005014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a42      	ldr	r2, [pc, #264]	@ (800512c <DMA_CalcBaseAndBitshift+0x118>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d04a      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a41      	ldr	r2, [pc, #260]	@ (8005130 <DMA_CalcBaseAndBitshift+0x11c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d045      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a3f      	ldr	r2, [pc, #252]	@ (8005134 <DMA_CalcBaseAndBitshift+0x120>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d040      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a3e      	ldr	r2, [pc, #248]	@ (8005138 <DMA_CalcBaseAndBitshift+0x124>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d03b      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3c      	ldr	r2, [pc, #240]	@ (800513c <DMA_CalcBaseAndBitshift+0x128>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d036      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a3b      	ldr	r2, [pc, #236]	@ (8005140 <DMA_CalcBaseAndBitshift+0x12c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d031      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a39      	ldr	r2, [pc, #228]	@ (8005144 <DMA_CalcBaseAndBitshift+0x130>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d02c      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a38      	ldr	r2, [pc, #224]	@ (8005148 <DMA_CalcBaseAndBitshift+0x134>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d027      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a36      	ldr	r2, [pc, #216]	@ (800514c <DMA_CalcBaseAndBitshift+0x138>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a35      	ldr	r2, [pc, #212]	@ (8005150 <DMA_CalcBaseAndBitshift+0x13c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d01d      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a33      	ldr	r2, [pc, #204]	@ (8005154 <DMA_CalcBaseAndBitshift+0x140>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a32      	ldr	r2, [pc, #200]	@ (8005158 <DMA_CalcBaseAndBitshift+0x144>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a30      	ldr	r2, [pc, #192]	@ (800515c <DMA_CalcBaseAndBitshift+0x148>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005160 <DMA_CalcBaseAndBitshift+0x14c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005164 <DMA_CalcBaseAndBitshift+0x150>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005168 <DMA_CalcBaseAndBitshift+0x154>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <DMA_CalcBaseAndBitshift+0xac>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <DMA_CalcBaseAndBitshift+0xae>
 80050c0:	2300      	movs	r3, #0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d024      	beq.n	8005110 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	3b10      	subs	r3, #16
 80050ce:	4a27      	ldr	r2, [pc, #156]	@ (800516c <DMA_CalcBaseAndBitshift+0x158>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	4a24      	ldr	r2, [pc, #144]	@ (8005170 <DMA_CalcBaseAndBitshift+0x15c>)
 80050e0:	5cd3      	ldrb	r3, [r2, r3]
 80050e2:	461a      	mov	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d908      	bls.n	8005100 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005174 <DMA_CalcBaseAndBitshift+0x160>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	1d1a      	adds	r2, r3, #4
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80050fe:	e00d      	b.n	800511c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	4b1b      	ldr	r3, [pc, #108]	@ (8005174 <DMA_CalcBaseAndBitshift+0x160>)
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6593      	str	r3, [r2, #88]	@ 0x58
 800510e:	e005      	b.n	800511c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40020010 	.word	0x40020010
 8005130:	40020028 	.word	0x40020028
 8005134:	40020040 	.word	0x40020040
 8005138:	40020058 	.word	0x40020058
 800513c:	40020070 	.word	0x40020070
 8005140:	40020088 	.word	0x40020088
 8005144:	400200a0 	.word	0x400200a0
 8005148:	400200b8 	.word	0x400200b8
 800514c:	40020410 	.word	0x40020410
 8005150:	40020428 	.word	0x40020428
 8005154:	40020440 	.word	0x40020440
 8005158:	40020458 	.word	0x40020458
 800515c:	40020470 	.word	0x40020470
 8005160:	40020488 	.word	0x40020488
 8005164:	400204a0 	.word	0x400204a0
 8005168:	400204b8 	.word	0x400204b8
 800516c:	aaaaaaab 	.word	0xaaaaaaab
 8005170:	08010a2c 	.word	0x08010a2c
 8005174:	fffffc00 	.word	0xfffffc00

08005178 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d120      	bne.n	80051ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	2b03      	cmp	r3, #3
 8005192:	d858      	bhi.n	8005246 <DMA_CheckFifoParam+0xce>
 8005194:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <DMA_CheckFifoParam+0x24>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051ad 	.word	0x080051ad
 80051a0:	080051bf 	.word	0x080051bf
 80051a4:	080051ad 	.word	0x080051ad
 80051a8:	08005247 	.word	0x08005247
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d048      	beq.n	800524a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051bc:	e045      	b.n	800524a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051c6:	d142      	bne.n	800524e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051cc:	e03f      	b.n	800524e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051d6:	d123      	bne.n	8005220 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d838      	bhi.n	8005252 <DMA_CheckFifoParam+0xda>
 80051e0:	a201      	add	r2, pc, #4	@ (adr r2, 80051e8 <DMA_CheckFifoParam+0x70>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	080051ff 	.word	0x080051ff
 80051f0:	080051f9 	.word	0x080051f9
 80051f4:	08005211 	.word	0x08005211
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
        break;
 80051fc:	e030      	b.n	8005260 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d025      	beq.n	8005256 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800520e:	e022      	b.n	8005256 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005218:	d11f      	bne.n	800525a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800521e:	e01c      	b.n	800525a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	2b02      	cmp	r3, #2
 8005226:	d902      	bls.n	800522e <DMA_CheckFifoParam+0xb6>
 8005228:	2b03      	cmp	r3, #3
 800522a:	d003      	beq.n	8005234 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800522c:	e018      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
        break;
 8005232:	e015      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
    break;
 8005244:	e00b      	b.n	800525e <DMA_CheckFifoParam+0xe6>
        break;
 8005246:	bf00      	nop
 8005248:	e00a      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        break;
 800524a:	bf00      	nop
 800524c:	e008      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        break;
 800524e:	bf00      	nop
 8005250:	e006      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        break;
 8005252:	bf00      	nop
 8005254:	e004      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        break;
 8005256:	bf00      	nop
 8005258:	e002      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        break;
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
    break;
 800525e:	bf00      	nop
    }
  }

  return status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop

08005270 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a38      	ldr	r2, [pc, #224]	@ (8005364 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d022      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a36      	ldr	r2, [pc, #216]	@ (8005368 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a35      	ldr	r2, [pc, #212]	@ (800536c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a33      	ldr	r2, [pc, #204]	@ (8005370 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a32      	ldr	r2, [pc, #200]	@ (8005374 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a30      	ldr	r2, [pc, #192]	@ (8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2f      	ldr	r2, [pc, #188]	@ (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01a      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	3b08      	subs	r3, #8
 80052e0:	4a28      	ldr	r2, [pc, #160]	@ (8005384 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	091b      	lsrs	r3, r3, #4
 80052e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4b26      	ldr	r3, [pc, #152]	@ (8005388 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	461a      	mov	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a24      	ldr	r2, [pc, #144]	@ (800538c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80052fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2201      	movs	r2, #1
 8005306:	409a      	lsls	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800530c:	e024      	b.n	8005358 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	3b10      	subs	r3, #16
 8005316:	4a1e      	ldr	r2, [pc, #120]	@ (8005390 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a1c      	ldr	r2, [pc, #112]	@ (8005394 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d806      	bhi.n	8005336 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a1b      	ldr	r2, [pc, #108]	@ (8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d902      	bls.n	8005336 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3308      	adds	r3, #8
 8005334:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4b18      	ldr	r3, [pc, #96]	@ (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	461a      	mov	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a16      	ldr	r2, [pc, #88]	@ (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005348:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2201      	movs	r2, #1
 8005352:	409a      	lsls	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	58025408 	.word	0x58025408
 8005368:	5802541c 	.word	0x5802541c
 800536c:	58025430 	.word	0x58025430
 8005370:	58025444 	.word	0x58025444
 8005374:	58025458 	.word	0x58025458
 8005378:	5802546c 	.word	0x5802546c
 800537c:	58025480 	.word	0x58025480
 8005380:	58025494 	.word	0x58025494
 8005384:	cccccccd 	.word	0xcccccccd
 8005388:	16009600 	.word	0x16009600
 800538c:	58025880 	.word	0x58025880
 8005390:	aaaaaaab 	.word	0xaaaaaaab
 8005394:	400204b8 	.word	0x400204b8
 8005398:	4002040f 	.word	0x4002040f
 800539c:	10008200 	.word	0x10008200
 80053a0:	40020880 	.word	0x40020880

080053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04a      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d847      	bhi.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a25      	ldr	r2, [pc, #148]	@ (800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d022      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a24      	ldr	r2, [pc, #144]	@ (8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d01d      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a22      	ldr	r2, [pc, #136]	@ (8005464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d018      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a21      	ldr	r2, [pc, #132]	@ (8005468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	@ (800546c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00e      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d009      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1c      	ldr	r2, [pc, #112]	@ (8005474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1b      	ldr	r2, [pc, #108]	@ (8005478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d101      	bne.n	8005414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005414:	2300      	movs	r3, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4b17      	ldr	r3, [pc, #92]	@ (800547c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800542c:	671a      	str	r2, [r3, #112]	@ 0x70
 800542e:	e009      	b.n	8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4b14      	ldr	r3, [pc, #80]	@ (8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	461a      	mov	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a11      	ldr	r2, [pc, #68]	@ (8005488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005442:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3b01      	subs	r3, #1
 8005448:	2201      	movs	r2, #1
 800544a:	409a      	lsls	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	58025408 	.word	0x58025408
 8005460:	5802541c 	.word	0x5802541c
 8005464:	58025430 	.word	0x58025430
 8005468:	58025444 	.word	0x58025444
 800546c:	58025458 	.word	0x58025458
 8005470:	5802546c 	.word	0x5802546c
 8005474:	58025480 	.word	0x58025480
 8005478:	58025494 	.word	0x58025494
 800547c:	1600963f 	.word	0x1600963f
 8005480:	58025940 	.word	0x58025940
 8005484:	1000823f 	.word	0x1000823f
 8005488:	40020940 	.word	0x40020940

0800548c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	@ 0x24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800549a:	4b89      	ldr	r3, [pc, #548]	@ (80056c0 <HAL_GPIO_Init+0x234>)
 800549c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800549e:	e194      	b.n	80057ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	2101      	movs	r1, #1
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	4013      	ands	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8186 	beq.w	80057c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d005      	beq.n	80054d0 <HAL_GPIO_Init+0x44>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d130      	bne.n	8005532 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	2203      	movs	r2, #3
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005506:	2201      	movs	r2, #1
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4013      	ands	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	091b      	lsrs	r3, r3, #4
 800551c:	f003 0201 	and.w	r2, r3, #1
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4313      	orrs	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b03      	cmp	r3, #3
 800553c:	d017      	beq.n	800556e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	2203      	movs	r2, #3
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d123      	bne.n	80055c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	08da      	lsrs	r2, r3, #3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3208      	adds	r2, #8
 8005582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	220f      	movs	r2, #15
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43db      	mvns	r3, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4013      	ands	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	08da      	lsrs	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3208      	adds	r2, #8
 80055bc:	69b9      	ldr	r1, [r7, #24]
 80055be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	2203      	movs	r2, #3
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	43db      	mvns	r3, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4013      	ands	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f003 0203 	and.w	r2, r3, #3
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 80e0 	beq.w	80057c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005604:	4b2f      	ldr	r3, [pc, #188]	@ (80056c4 <HAL_GPIO_Init+0x238>)
 8005606:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800560a:	4a2e      	ldr	r2, [pc, #184]	@ (80056c4 <HAL_GPIO_Init+0x238>)
 800560c:	f043 0302 	orr.w	r3, r3, #2
 8005610:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005614:	4b2b      	ldr	r3, [pc, #172]	@ (80056c4 <HAL_GPIO_Init+0x238>)
 8005616:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005622:	4a29      	ldr	r2, [pc, #164]	@ (80056c8 <HAL_GPIO_Init+0x23c>)
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	089b      	lsrs	r3, r3, #2
 8005628:	3302      	adds	r3, #2
 800562a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	220f      	movs	r2, #15
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	43db      	mvns	r3, r3
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	4013      	ands	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a20      	ldr	r2, [pc, #128]	@ (80056cc <HAL_GPIO_Init+0x240>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d052      	beq.n	80056f4 <HAL_GPIO_Init+0x268>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1f      	ldr	r2, [pc, #124]	@ (80056d0 <HAL_GPIO_Init+0x244>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d031      	beq.n	80056ba <HAL_GPIO_Init+0x22e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1e      	ldr	r2, [pc, #120]	@ (80056d4 <HAL_GPIO_Init+0x248>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02b      	beq.n	80056b6 <HAL_GPIO_Init+0x22a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a1d      	ldr	r2, [pc, #116]	@ (80056d8 <HAL_GPIO_Init+0x24c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d025      	beq.n	80056b2 <HAL_GPIO_Init+0x226>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1c      	ldr	r2, [pc, #112]	@ (80056dc <HAL_GPIO_Init+0x250>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01f      	beq.n	80056ae <HAL_GPIO_Init+0x222>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1b      	ldr	r2, [pc, #108]	@ (80056e0 <HAL_GPIO_Init+0x254>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d019      	beq.n	80056aa <HAL_GPIO_Init+0x21e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a1a      	ldr	r2, [pc, #104]	@ (80056e4 <HAL_GPIO_Init+0x258>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_GPIO_Init+0x21a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a19      	ldr	r2, [pc, #100]	@ (80056e8 <HAL_GPIO_Init+0x25c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00d      	beq.n	80056a2 <HAL_GPIO_Init+0x216>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a18      	ldr	r2, [pc, #96]	@ (80056ec <HAL_GPIO_Init+0x260>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d007      	beq.n	800569e <HAL_GPIO_Init+0x212>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a17      	ldr	r2, [pc, #92]	@ (80056f0 <HAL_GPIO_Init+0x264>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <HAL_GPIO_Init+0x20e>
 8005696:	2309      	movs	r3, #9
 8005698:	e02d      	b.n	80056f6 <HAL_GPIO_Init+0x26a>
 800569a:	230a      	movs	r3, #10
 800569c:	e02b      	b.n	80056f6 <HAL_GPIO_Init+0x26a>
 800569e:	2308      	movs	r3, #8
 80056a0:	e029      	b.n	80056f6 <HAL_GPIO_Init+0x26a>
 80056a2:	2307      	movs	r3, #7
 80056a4:	e027      	b.n	80056f6 <HAL_GPIO_Init+0x26a>
 80056a6:	2306      	movs	r3, #6
 80056a8:	e025      	b.n	80056f6 <HAL_GPIO_Init+0x26a>
 80056aa:	2305      	movs	r3, #5
 80056ac:	e023      	b.n	80056f6 <HAL_GPIO_Init+0x26a>
 80056ae:	2304      	movs	r3, #4
 80056b0:	e021      	b.n	80056f6 <HAL_GPIO_Init+0x26a>
 80056b2:	2303      	movs	r3, #3
 80056b4:	e01f      	b.n	80056f6 <HAL_GPIO_Init+0x26a>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e01d      	b.n	80056f6 <HAL_GPIO_Init+0x26a>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e01b      	b.n	80056f6 <HAL_GPIO_Init+0x26a>
 80056be:	bf00      	nop
 80056c0:	58000080 	.word	0x58000080
 80056c4:	58024400 	.word	0x58024400
 80056c8:	58000400 	.word	0x58000400
 80056cc:	58020000 	.word	0x58020000
 80056d0:	58020400 	.word	0x58020400
 80056d4:	58020800 	.word	0x58020800
 80056d8:	58020c00 	.word	0x58020c00
 80056dc:	58021000 	.word	0x58021000
 80056e0:	58021400 	.word	0x58021400
 80056e4:	58021800 	.word	0x58021800
 80056e8:	58021c00 	.word	0x58021c00
 80056ec:	58022000 	.word	0x58022000
 80056f0:	58022400 	.word	0x58022400
 80056f4:	2300      	movs	r3, #0
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	f002 0203 	and.w	r2, r2, #3
 80056fc:	0092      	lsls	r2, r2, #2
 80056fe:	4093      	lsls	r3, r2
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005706:	4938      	ldr	r1, [pc, #224]	@ (80057e8 <HAL_GPIO_Init+0x35c>)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	089b      	lsrs	r3, r3, #2
 800570c:	3302      	adds	r3, #2
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	43db      	mvns	r3, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4013      	ands	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800573a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	43db      	mvns	r3, r3
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4013      	ands	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	43db      	mvns	r3, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4013      	ands	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	3301      	adds	r3, #1
 80057c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f47f ae63 	bne.w	80054a0 <HAL_GPIO_Init+0x14>
  }
}
 80057da:	bf00      	nop
 80057dc:	bf00      	nop
 80057de:	3724      	adds	r7, #36	@ 0x24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	58000400 	.word	0x58000400

080057ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	887b      	ldrh	r3, [r7, #2]
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	e001      	b.n	800580e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800580a:	2300      	movs	r3, #0
 800580c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	807b      	strh	r3, [r7, #2]
 8005828:	4613      	mov	r3, r2
 800582a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800582c:	787b      	ldrb	r3, [r7, #1]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005832:	887a      	ldrh	r2, [r7, #2]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005838:	e003      	b.n	8005842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800583a:	887b      	ldrh	r3, [r7, #2]
 800583c:	041a      	lsls	r2, r3, #16
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	619a      	str	r2, [r3, #24]
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e08b      	b.n	800597a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc f948 	bl	8001b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	@ 0x24
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d107      	bne.n	80058ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	e006      	b.n	80058d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80058d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d108      	bne.n	80058f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ee:	605a      	str	r2, [r3, #4]
 80058f0:	e007      	b.n	8005902 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6859      	ldr	r1, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b1d      	ldr	r3, [pc, #116]	@ (8005984 <HAL_I2C_Init+0x134>)
 800590e:	430b      	orrs	r3, r1
 8005910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69d9      	ldr	r1, [r3, #28]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	02008000 	.word	0x02008000

08005988 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	461a      	mov	r2, r3
 8005994:	460b      	mov	r3, r1
 8005996:	817b      	strh	r3, [r7, #10]
 8005998:	4613      	mov	r3, r2
 800599a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	f040 80fd 	bne.w	8005ba4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_I2C_Master_Transmit+0x30>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e0f6      	b.n	8005ba6 <HAL_I2C_Master_Transmit+0x21e>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059c0:	f7fc fbd2 	bl	8002168 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	2319      	movs	r3, #25
 80059cc:	2201      	movs	r2, #1
 80059ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 fb72 	bl	80060bc <I2C_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e0e1      	b.n	8005ba6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2221      	movs	r2, #33	@ 0x21
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2210      	movs	r2, #16
 80059ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	893a      	ldrh	r2, [r7, #8]
 8005a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2bff      	cmp	r3, #255	@ 0xff
 8005a12:	d906      	bls.n	8005a22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	22ff      	movs	r2, #255	@ 0xff
 8005a18:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005a1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e007      	b.n	8005a32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005a2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d024      	beq.n	8005a84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3e:	781a      	ldrb	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	3301      	adds	r3, #1
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	8979      	ldrh	r1, [r7, #10]
 8005a76:	4b4e      	ldr	r3, [pc, #312]	@ (8005bb0 <HAL_I2C_Master_Transmit+0x228>)
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 fd6d 	bl	800655c <I2C_TransferConfig>
 8005a82:	e066      	b.n	8005b52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	8979      	ldrh	r1, [r7, #10]
 8005a8c:	4b48      	ldr	r3, [pc, #288]	@ (8005bb0 <HAL_I2C_Master_Transmit+0x228>)
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fd62 	bl	800655c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005a98:	e05b      	b.n	8005b52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	6a39      	ldr	r1, [r7, #32]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fb65 	bl	800616e <I2C_WaitOnTXISFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e07b      	b.n	8005ba6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	781a      	ldrb	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d034      	beq.n	8005b52 <HAL_I2C_Master_Transmit+0x1ca>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d130      	bne.n	8005b52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	2200      	movs	r2, #0
 8005af8:	2180      	movs	r1, #128	@ 0x80
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 fade 	bl	80060bc <I2C_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e04d      	b.n	8005ba6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2bff      	cmp	r3, #255	@ 0xff
 8005b12:	d90e      	bls.n	8005b32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	22ff      	movs	r2, #255	@ 0xff
 8005b18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	8979      	ldrh	r1, [r7, #10]
 8005b22:	2300      	movs	r3, #0
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fd16 	bl	800655c <I2C_TransferConfig>
 8005b30:	e00f      	b.n	8005b52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	8979      	ldrh	r1, [r7, #10]
 8005b44:	2300      	movs	r3, #0
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fd05 	bl	800655c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d19e      	bne.n	8005a9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	6a39      	ldr	r1, [r7, #32]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fb4b 	bl	80061fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e01a      	b.n	8005ba6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2220      	movs	r2, #32
 8005b76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb4 <HAL_I2C_Master_Transmit+0x22c>)
 8005b84:	400b      	ands	r3, r1
 8005b86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e000      	b.n	8005ba6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
  }
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	80002000 	.word	0x80002000
 8005bb4:	fe00e800 	.word	0xfe00e800

08005bb8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	817b      	strh	r3, [r7, #10]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	f040 80db 	bne.w	8005d90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_I2C_Master_Receive+0x30>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e0d4      	b.n	8005d92 <HAL_I2C_Master_Receive+0x1da>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bf0:	f7fc faba 	bl	8002168 <HAL_GetTick>
 8005bf4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	2319      	movs	r3, #25
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fa5a 	bl	80060bc <I2C_WaitOnFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e0bf      	b.n	8005d92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2222      	movs	r2, #34	@ 0x22
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	893a      	ldrh	r2, [r7, #8]
 8005c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2bff      	cmp	r3, #255	@ 0xff
 8005c42:	d90e      	bls.n	8005c62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	22ff      	movs	r2, #255	@ 0xff
 8005c48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	8979      	ldrh	r1, [r7, #10]
 8005c52:	4b52      	ldr	r3, [pc, #328]	@ (8005d9c <HAL_I2C_Master_Receive+0x1e4>)
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fc7e 	bl	800655c <I2C_TransferConfig>
 8005c60:	e06d      	b.n	8005d3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	8979      	ldrh	r1, [r7, #10]
 8005c74:	4b49      	ldr	r3, [pc, #292]	@ (8005d9c <HAL_I2C_Master_Receive+0x1e4>)
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fc6d 	bl	800655c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005c82:	e05c      	b.n	8005d3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	6a39      	ldr	r1, [r7, #32]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fafb 	bl	8006284 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e07c      	b.n	8005d92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d034      	beq.n	8005d3e <HAL_I2C_Master_Receive+0x186>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d130      	bne.n	8005d3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2180      	movs	r1, #128	@ 0x80
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f9e8 	bl	80060bc <I2C_WaitOnFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e04d      	b.n	8005d92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2bff      	cmp	r3, #255	@ 0xff
 8005cfe:	d90e      	bls.n	8005d1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	22ff      	movs	r2, #255	@ 0xff
 8005d04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	8979      	ldrh	r1, [r7, #10]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 fc20 	bl	800655c <I2C_TransferConfig>
 8005d1c:	e00f      	b.n	8005d3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	8979      	ldrh	r1, [r7, #10]
 8005d30:	2300      	movs	r3, #0
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fc0f 	bl	800655c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d19d      	bne.n	8005c84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	6a39      	ldr	r1, [r7, #32]
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 fa55 	bl	80061fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e01a      	b.n	8005d92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2220      	movs	r2, #32
 8005d62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005da0 <HAL_I2C_Master_Receive+0x1e8>)
 8005d70:	400b      	ands	r3, r1
 8005d72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
  }
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	80002400 	.word	0x80002400
 8005da0:	fe00e800 	.word	0xfe00e800

08005da4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	4608      	mov	r0, r1
 8005dae:	4611      	mov	r1, r2
 8005db0:	461a      	mov	r2, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	817b      	strh	r3, [r7, #10]
 8005db6:	460b      	mov	r3, r1
 8005db8:	813b      	strh	r3, [r7, #8]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	f040 80f9 	bne.w	8005fbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_I2C_Mem_Write+0x34>
 8005dd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d105      	bne.n	8005de4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0ed      	b.n	8005fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_I2C_Mem_Write+0x4e>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e0e6      	b.n	8005fc0 <HAL_I2C_Mem_Write+0x21c>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dfa:	f7fc f9b5 	bl	8002168 <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2319      	movs	r3, #25
 8005e06:	2201      	movs	r2, #1
 8005e08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f955 	bl	80060bc <I2C_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0d1      	b.n	8005fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2221      	movs	r2, #33	@ 0x21
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2240      	movs	r2, #64	@ 0x40
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a3a      	ldr	r2, [r7, #32]
 8005e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e44:	88f8      	ldrh	r0, [r7, #6]
 8005e46:	893a      	ldrh	r2, [r7, #8]
 8005e48:	8979      	ldrh	r1, [r7, #10]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	4603      	mov	r3, r0
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f8b9 	bl	8005fcc <I2C_RequestMemoryWrite>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0a9      	b.n	8005fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2bff      	cmp	r3, #255	@ 0xff
 8005e74:	d90e      	bls.n	8005e94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	22ff      	movs	r2, #255	@ 0xff
 8005e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	8979      	ldrh	r1, [r7, #10]
 8005e84:	2300      	movs	r3, #0
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 fb65 	bl	800655c <I2C_TransferConfig>
 8005e92:	e00f      	b.n	8005eb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	8979      	ldrh	r1, [r7, #10]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fb54 	bl	800655c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f958 	bl	800616e <I2C_WaitOnTXISFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e07b      	b.n	8005fc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	781a      	ldrb	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d034      	beq.n	8005f6c <HAL_I2C_Mem_Write+0x1c8>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d130      	bne.n	8005f6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	2200      	movs	r2, #0
 8005f12:	2180      	movs	r1, #128	@ 0x80
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f8d1 	bl	80060bc <I2C_WaitOnFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e04d      	b.n	8005fc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2bff      	cmp	r3, #255	@ 0xff
 8005f2c:	d90e      	bls.n	8005f4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	22ff      	movs	r2, #255	@ 0xff
 8005f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	8979      	ldrh	r1, [r7, #10]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fb09 	bl	800655c <I2C_TransferConfig>
 8005f4a:	e00f      	b.n	8005f6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	8979      	ldrh	r1, [r7, #10]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 faf8 	bl	800655c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d19e      	bne.n	8005eb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f93e 	bl	80061fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e01a      	b.n	8005fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc8 <HAL_I2C_Mem_Write+0x224>)
 8005f9e:	400b      	ands	r3, r1
 8005fa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e000      	b.n	8005fc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005fbe:	2302      	movs	r3, #2
  }
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	fe00e800 	.word	0xfe00e800

08005fcc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	817b      	strh	r3, [r7, #10]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	813b      	strh	r3, [r7, #8]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	8979      	ldrh	r1, [r7, #10]
 8005fec:	4b20      	ldr	r3, [pc, #128]	@ (8006070 <I2C_RequestMemoryWrite+0xa4>)
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fab1 	bl	800655c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	69b9      	ldr	r1, [r7, #24]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 f8b5 	bl	800616e <I2C_WaitOnTXISFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e02c      	b.n	8006068 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d105      	bne.n	8006020 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006014:	893b      	ldrh	r3, [r7, #8]
 8006016:	b2da      	uxtb	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	629a      	str	r2, [r3, #40]	@ 0x28
 800601e:	e015      	b.n	800604c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006020:	893b      	ldrh	r3, [r7, #8]
 8006022:	0a1b      	lsrs	r3, r3, #8
 8006024:	b29b      	uxth	r3, r3
 8006026:	b2da      	uxtb	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	69b9      	ldr	r1, [r7, #24]
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f89b 	bl	800616e <I2C_WaitOnTXISFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e012      	b.n	8006068 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006042:	893b      	ldrh	r3, [r7, #8]
 8006044:	b2da      	uxtb	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2200      	movs	r2, #0
 8006054:	2180      	movs	r1, #128	@ 0x80
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f830 	bl	80060bc <I2C_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	80002000 	.word	0x80002000

08006074 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b02      	cmp	r3, #2
 8006088:	d103      	bne.n	8006092 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b01      	cmp	r3, #1
 800609e:	d007      	beq.n	80060b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	619a      	str	r2, [r3, #24]
  }
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	4613      	mov	r3, r2
 80060ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060cc:	e03b      	b.n	8006146 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f962 	bl	800639c <I2C_IsErrorOccurred>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e041      	b.n	8006166 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d02d      	beq.n	8006146 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fc f83d 	bl	8002168 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <I2C_WaitOnFlagUntilTimeout+0x44>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d122      	bne.n	8006146 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	4013      	ands	r3, r2
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	bf0c      	ite	eq
 8006110:	2301      	moveq	r3, #1
 8006112:	2300      	movne	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	429a      	cmp	r2, r3
 800611c:	d113      	bne.n	8006146 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006122:	f043 0220 	orr.w	r2, r3, #32
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e00f      	b.n	8006166 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699a      	ldr	r2, [r3, #24]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4013      	ands	r3, r2
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	429a      	cmp	r2, r3
 8006154:	bf0c      	ite	eq
 8006156:	2301      	moveq	r3, #1
 8006158:	2300      	movne	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	429a      	cmp	r2, r3
 8006162:	d0b4      	beq.n	80060ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800617a:	e033      	b.n	80061e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 f90b 	bl	800639c <I2C_IsErrorOccurred>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e031      	b.n	80061f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d025      	beq.n	80061e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006198:	f7fb ffe6 	bl	8002168 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d302      	bcc.n	80061ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d11a      	bne.n	80061e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d013      	beq.n	80061e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e007      	b.n	80061f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d1c4      	bne.n	800617c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006208:	e02f      	b.n	800626a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f8c4 	bl	800639c <I2C_IsErrorOccurred>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e02d      	b.n	800627a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621e:	f7fb ffa3 	bl	8002168 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	429a      	cmp	r2, r3
 800622c:	d302      	bcc.n	8006234 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d11a      	bne.n	800626a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b20      	cmp	r3, #32
 8006240:	d013      	beq.n	800626a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	f043 0220 	orr.w	r2, r3, #32
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e007      	b.n	800627a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b20      	cmp	r3, #32
 8006276:	d1c8      	bne.n	800620a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006294:	e071      	b.n	800637a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f87e 	bl	800639c <I2C_IsErrorOccurred>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d13b      	bne.n	8006330 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d138      	bne.n	8006330 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d105      	bne.n	80062d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b10      	cmp	r3, #16
 80062e4:	d121      	bne.n	800632a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2210      	movs	r2, #16
 80062ec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2204      	movs	r2, #4
 80062f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2220      	movs	r2, #32
 80062fa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6859      	ldr	r1, [r3, #4]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b24      	ldr	r3, [pc, #144]	@ (8006398 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006308:	400b      	ands	r3, r1
 800630a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]
 8006328:	e002      	b.n	8006330 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006330:	f7fb ff1a 	bl	8002168 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	429a      	cmp	r2, r3
 800633e:	d302      	bcc.n	8006346 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d119      	bne.n	800637a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d116      	bne.n	800637a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b04      	cmp	r3, #4
 8006358:	d00f      	beq.n	800637a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635e:	f043 0220 	orr.w	r2, r3, #32
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d002      	beq.n	800638e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006388:	7dfb      	ldrb	r3, [r7, #23]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d083      	beq.n	8006296 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800638e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	fe00e800 	.word	0xfe00e800

0800639c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	@ 0x28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d068      	beq.n	800649a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2210      	movs	r2, #16
 80063ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063d0:	e049      	b.n	8006466 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d045      	beq.n	8006466 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063da:	f7fb fec5 	bl	8002168 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d302      	bcc.n	80063f0 <I2C_IsErrorOccurred+0x54>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d13a      	bne.n	8006466 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006402:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800640e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006412:	d121      	bne.n	8006458 <I2C_IsErrorOccurred+0xbc>
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800641a:	d01d      	beq.n	8006458 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800641c:	7cfb      	ldrb	r3, [r7, #19]
 800641e:	2b20      	cmp	r3, #32
 8006420:	d01a      	beq.n	8006458 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006430:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006432:	f7fb fe99 	bl	8002168 <HAL_GetTick>
 8006436:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006438:	e00e      	b.n	8006458 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800643a:	f7fb fe95 	bl	8002168 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b19      	cmp	r3, #25
 8006446:	d907      	bls.n	8006458 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	f043 0320 	orr.w	r3, r3, #32
 800644e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006456:	e006      	b.n	8006466 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b20      	cmp	r3, #32
 8006464:	d1e9      	bne.n	800643a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b20      	cmp	r3, #32
 8006472:	d003      	beq.n	800647c <I2C_IsErrorOccurred+0xe0>
 8006474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0aa      	beq.n	80063d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800647c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006480:	2b00      	cmp	r3, #0
 8006482:	d103      	bne.n	800648c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2220      	movs	r2, #32
 800648a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	f043 0304 	orr.w	r3, r3, #4
 8006492:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	f043 0308 	orr.w	r3, r3, #8
 80064d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	f043 0302 	orr.w	r3, r3, #2
 80064f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006500:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01c      	beq.n	800654a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff fdaf 	bl	8006074 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6859      	ldr	r1, [r3, #4]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	4b0d      	ldr	r3, [pc, #52]	@ (8006558 <I2C_IsErrorOccurred+0x1bc>)
 8006522:	400b      	ands	r3, r1
 8006524:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	431a      	orrs	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800654a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800654e:	4618      	mov	r0, r3
 8006550:	3728      	adds	r7, #40	@ 0x28
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	fe00e800 	.word	0xfe00e800

0800655c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	607b      	str	r3, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	817b      	strh	r3, [r7, #10]
 800656a:	4613      	mov	r3, r2
 800656c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800656e:	897b      	ldrh	r3, [r7, #10]
 8006570:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006574:	7a7b      	ldrb	r3, [r7, #9]
 8006576:	041b      	lsls	r3, r3, #16
 8006578:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800657c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	4313      	orrs	r3, r2
 8006586:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800658a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	0d5b      	lsrs	r3, r3, #21
 8006596:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800659a:	4b08      	ldr	r3, [pc, #32]	@ (80065bc <I2C_TransferConfig+0x60>)
 800659c:	430b      	orrs	r3, r1
 800659e:	43db      	mvns	r3, r3
 80065a0:	ea02 0103 	and.w	r1, r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	03ff63ff 	.word	0x03ff63ff

080065c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d138      	bne.n	8006648 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e032      	b.n	800664a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2224      	movs	r2, #36	@ 0x24
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006612:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6819      	ldr	r1, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	e000      	b.n	800664a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006648:	2302      	movs	r3, #2
  }
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b20      	cmp	r3, #32
 800666a:	d139      	bne.n	80066e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006676:	2302      	movs	r3, #2
 8006678:	e033      	b.n	80066e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2224      	movs	r2, #36	@ 0x24
 8006686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0201 	bic.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80066a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	021b      	lsls	r3, r3, #8
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	e000      	b.n	80066e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
  }
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b086      	sub	sp, #24
 80066f2:	af02      	add	r7, sp, #8
 80066f4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0fe      	b.n	80068fe <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d106      	bne.n	800671a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f009 fd23 	bl	8010160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2203      	movs	r2, #3
 800671e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f006 f949 	bl	800c9be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	7c1a      	ldrb	r2, [r3, #16]
 8006734:	f88d 2000 	strb.w	r2, [sp]
 8006738:	3304      	adds	r3, #4
 800673a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800673c:	f006 f81a 	bl	800c774 <USB_CoreInit>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e0d5      	b.n	80068fe <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2100      	movs	r1, #0
 8006758:	4618      	mov	r0, r3
 800675a:	f006 f941 	bl	800c9e0 <USB_SetCurrentMode>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0c6      	b.n	80068fe <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006770:	2300      	movs	r3, #0
 8006772:	73fb      	strb	r3, [r7, #15]
 8006774:	e04a      	b.n	800680c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006776:	7bfa      	ldrb	r2, [r7, #15]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3315      	adds	r3, #21
 8006786:	2201      	movs	r2, #1
 8006788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800678a:	7bfa      	ldrb	r2, [r7, #15]
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	3314      	adds	r3, #20
 800679a:	7bfa      	ldrb	r2, [r7, #15]
 800679c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800679e:	7bfa      	ldrb	r2, [r7, #15]
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	b298      	uxth	r0, r3
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	332e      	adds	r3, #46	@ 0x2e
 80067b2:	4602      	mov	r2, r0
 80067b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80067b6:	7bfa      	ldrb	r2, [r7, #15]
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	3318      	adds	r3, #24
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80067ca:	7bfa      	ldrb	r2, [r7, #15]
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	331c      	adds	r3, #28
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067de:	7bfa      	ldrb	r2, [r7, #15]
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	440b      	add	r3, r1
 80067ec:	3320      	adds	r3, #32
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067f2:	7bfa      	ldrb	r2, [r7, #15]
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	3324      	adds	r3, #36	@ 0x24
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	3301      	adds	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	791b      	ldrb	r3, [r3, #4]
 8006810:	7bfa      	ldrb	r2, [r7, #15]
 8006812:	429a      	cmp	r2, r3
 8006814:	d3af      	bcc.n	8006776 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
 800681a:	e044      	b.n	80068a6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800681c:	7bfa      	ldrb	r2, [r7, #15]
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800682e:	2200      	movs	r2, #0
 8006830:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006832:	7bfa      	ldrb	r2, [r7, #15]
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006844:	7bfa      	ldrb	r2, [r7, #15]
 8006846:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006848:	7bfa      	ldrb	r2, [r7, #15]
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800685e:	7bfa      	ldrb	r2, [r7, #15]
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006874:	7bfa      	ldrb	r2, [r7, #15]
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800688a:	7bfa      	ldrb	r2, [r7, #15]
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	440b      	add	r3, r1
 8006898:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	3301      	adds	r3, #1
 80068a4:	73fb      	strb	r3, [r7, #15]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	791b      	ldrb	r3, [r3, #4]
 80068aa:	7bfa      	ldrb	r2, [r7, #15]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d3b5      	bcc.n	800681c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	7c1a      	ldrb	r2, [r3, #16]
 80068b8:	f88d 2000 	strb.w	r2, [sp]
 80068bc:	3304      	adds	r3, #4
 80068be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068c0:	f006 f8da 	bl	800ca78 <USB_DevInit>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e013      	b.n	80068fe <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	7b1b      	ldrb	r3, [r3, #12]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d102      	bne.n	80068f2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 f96f 	bl	8007bd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f007 f91d 	bl	800db36 <USB_DevDisconnect>

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_PCD_Start+0x1c>
 800691e:	2302      	movs	r3, #2
 8006920:	e022      	b.n	8006968 <HAL_PCD_Start+0x62>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800693a:	2b01      	cmp	r3, #1
 800693c:	d105      	bne.n	800694a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006942:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f006 f824 	bl	800c99c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4618      	mov	r0, r3
 800695a:	f007 f8cb 	bl	800daf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b08d      	sub	sp, #52	@ 0x34
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4618      	mov	r0, r3
 8006988:	f007 f989 	bl	800dc9e <USB_GetMode>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 84b9 	bne.w	8007306 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f007 f8ed 	bl	800db78 <USB_ReadInterrupts>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 84af 	beq.w	8007304 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f007 f8da 	bl	800db78 <USB_ReadInterrupts>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d107      	bne.n	80069de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695a      	ldr	r2, [r3, #20]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f002 0202 	and.w	r2, r2, #2
 80069dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f007 f8c8 	bl	800db78 <USB_ReadInterrupts>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	2b10      	cmp	r3, #16
 80069f0:	d161      	bne.n	8006ab6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0210 	bic.w	r2, r2, #16
 8006a00:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f003 020f 	and.w	r2, r3, #15
 8006a0e:	4613      	mov	r3, r2
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3304      	adds	r3, #4
 8006a20:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006a28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a2c:	d124      	bne.n	8006a78 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d035      	beq.n	8006aa6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	091b      	lsrs	r3, r3, #4
 8006a42:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6a38      	ldr	r0, [r7, #32]
 8006a4e:	f006 feff 	bl	800d850 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a5e:	441a      	add	r2, r3
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	091b      	lsrs	r3, r3, #4
 8006a6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a70:	441a      	add	r2, r3
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	615a      	str	r2, [r3, #20]
 8006a76:	e016      	b.n	8006aa6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006a7e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a82:	d110      	bne.n	8006aa6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6a38      	ldr	r0, [r7, #32]
 8006a90:	f006 fede 	bl	800d850 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	695a      	ldr	r2, [r3, #20]
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	091b      	lsrs	r3, r3, #4
 8006a9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aa0:	441a      	add	r2, r3
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699a      	ldr	r2, [r3, #24]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0210 	orr.w	r2, r2, #16
 8006ab4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f007 f85c 	bl	800db78 <USB_ReadInterrupts>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ac6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006aca:	f040 80a7 	bne.w	8006c1c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f007 f861 	bl	800db9e <USB_ReadDevAllOutEpInterrupt>
 8006adc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006ade:	e099      	b.n	8006c14 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 808e 	beq.w	8006c08 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	4611      	mov	r1, r2
 8006af6:	4618      	mov	r0, r3
 8006af8:	f007 f885 	bl	800dc06 <USB_ReadDevOutEPInterrupt>
 8006afc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00c      	beq.n	8006b22 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b14:	461a      	mov	r2, r3
 8006b16:	2301      	movs	r3, #1
 8006b18:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006b1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fed1 	bl	80078c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b38:	461a      	mov	r2, r3
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006b3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 ffa7 	bl	8007a94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	2310      	movs	r3, #16
 8006b60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d030      	beq.n	8006bce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b74:	2b80      	cmp	r3, #128	@ 0x80
 8006b76:	d109      	bne.n	8006b8c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	69fa      	ldr	r2, [r7, #28]
 8006b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b8a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8e:	4613      	mov	r3, r2
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	78db      	ldrb	r3, [r3, #3]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d108      	bne.n	8006bbc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2200      	movs	r2, #0
 8006bae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f009 fc26 	bl	8010408 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc8:	461a      	mov	r2, r3
 8006bca:	2302      	movs	r3, #2
 8006bcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be4:	461a      	mov	r2, r3
 8006be6:	2320      	movs	r3, #32
 8006be8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c00:	461a      	mov	r2, r3
 8006c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c06:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f47f af62 	bne.w	8006ae0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f006 ffa9 	bl	800db78 <USB_ReadInterrupts>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c30:	f040 80db 	bne.w	8006dea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f006 ffca 	bl	800dbd2 <USB_ReadDevAllInEpInterrupt>
 8006c3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006c44:	e0cd      	b.n	8006de2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80c2 	beq.w	8006dd6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f006 fff0 	bl	800dc42 <USB_ReadDevInEPInterrupt>
 8006c62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d057      	beq.n	8006d1e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	2201      	movs	r2, #1
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	43db      	mvns	r3, r3
 8006c88:	69f9      	ldr	r1, [r7, #28]
 8006c8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c8e:	4013      	ands	r3, r2
 8006c90:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	799b      	ldrb	r3, [r3, #6]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d132      	bne.n	8006d12 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	440b      	add	r3, r1
 8006cba:	3320      	adds	r3, #32
 8006cbc:	6819      	ldr	r1, [r3, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4403      	add	r3, r0
 8006ccc:	331c      	adds	r3, #28
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4419      	add	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4403      	add	r3, r0
 8006ce0:	3320      	adds	r3, #32
 8006ce2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d113      	bne.n	8006d12 <HAL_PCD_IRQHandler+0x3a2>
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cee:	4613      	mov	r3, r2
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	3324      	adds	r3, #36	@ 0x24
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d108      	bne.n	8006d12 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	f006 fff9 	bl	800dd04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f009 faf0 	bl	80102fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d34:	461a      	mov	r2, r3
 8006d36:	2308      	movs	r3, #8
 8006d38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d50:	461a      	mov	r2, r3
 8006d52:	2310      	movs	r3, #16
 8006d54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	2340      	movs	r3, #64	@ 0x40
 8006d70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d023      	beq.n	8006dc4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006d7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d7e:	6a38      	ldr	r0, [r7, #32]
 8006d80:	f005 ffd8 	bl	800cd34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d86:	4613      	mov	r3, r2
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	3310      	adds	r3, #16
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	4413      	add	r3, r2
 8006d94:	3304      	adds	r3, #4
 8006d96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	78db      	ldrb	r3, [r3, #3]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d108      	bne.n	8006db2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2200      	movs	r2, #0
 8006da4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f009 fb3d 	bl	801042c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006dce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fcea 	bl	80077aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd8:	3301      	adds	r3, #1
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f47f af2e 	bne.w	8006c46 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f006 fec2 	bl	800db78 <USB_ReadInterrupts>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dfe:	d122      	bne.n	8006e46 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e0e:	f023 0301 	bic.w	r3, r3, #1
 8006e12:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d108      	bne.n	8006e30 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e26:	2100      	movs	r1, #0
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fef5 	bl	8007c18 <HAL_PCDEx_LPM_Callback>
 8006e2e:	e002      	b.n	8006e36 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f009 fadb 	bl	80103ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	695a      	ldr	r2, [r3, #20]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f006 fe94 	bl	800db78 <USB_ReadInterrupts>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e5a:	d112      	bne.n	8006e82 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d102      	bne.n	8006e72 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f009 fa97 	bl	80103a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f006 fe76 	bl	800db78 <USB_ReadInterrupts>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e96:	d121      	bne.n	8006edc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695a      	ldr	r2, [r3, #20]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006ea6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d111      	bne.n	8006ed6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec0:	089b      	lsrs	r3, r3, #2
 8006ec2:	f003 020f 	and.w	r2, r3, #15
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006ecc:	2101      	movs	r1, #1
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fea2 	bl	8007c18 <HAL_PCDEx_LPM_Callback>
 8006ed4:	e002      	b.n	8006edc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f009 fa62 	bl	80103a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f006 fe49 	bl	800db78 <USB_ReadInterrupts>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef0:	f040 80b7 	bne.w	8007062 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f02:	f023 0301 	bic.w	r3, r3, #1
 8006f06:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2110      	movs	r1, #16
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f005 ff10 	bl	800cd34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f18:	e046      	b.n	8006fa8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f26:	461a      	mov	r2, r3
 8006f28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f2c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f7c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	69fa      	ldr	r2, [r7, #28]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006fa0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	791b      	ldrb	r3, [r3, #4]
 8006fac:	461a      	mov	r2, r3
 8006fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d3b2      	bcc.n	8006f1a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fc2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006fc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	7bdb      	ldrb	r3, [r3, #15]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d016      	beq.n	8006ffe <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fe0:	f043 030b 	orr.w	r3, r3, #11
 8006fe4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ff6:	f043 030b 	orr.w	r3, r3, #11
 8006ffa:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ffc:	e015      	b.n	800702a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007004:	695a      	ldr	r2, [r3, #20]
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800700c:	4619      	mov	r1, r3
 800700e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007012:	4313      	orrs	r3, r2
 8007014:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007024:	f043 030b 	orr.w	r3, r3, #11
 8007028:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007038:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800703c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800704c:	461a      	mov	r2, r3
 800704e:	f006 fe59 	bl	800dd04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	695a      	ldr	r2, [r3, #20]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007060:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f006 fd86 	bl	800db78 <USB_ReadInterrupts>
 800706c:	4603      	mov	r3, r0
 800706e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007076:	d123      	bne.n	80070c0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f006 fe1d 	bl	800dcbc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f005 fecd 	bl	800ce26 <USB_GetDevSpeed>
 800708c:	4603      	mov	r3, r0
 800708e:	461a      	mov	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681c      	ldr	r4, [r3, #0]
 8007098:	f001 fde0 	bl	8008c5c <HAL_RCC_GetHCLKFreq>
 800709c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070a2:	461a      	mov	r2, r3
 80070a4:	4620      	mov	r0, r4
 80070a6:	f005 fbd7 	bl	800c858 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f009 f94f 	bl	801034e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695a      	ldr	r2, [r3, #20]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80070be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f006 fd57 	bl	800db78 <USB_ReadInterrupts>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f003 0308 	and.w	r3, r3, #8
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d10a      	bne.n	80070ea <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f009 f92c 	bl	8010332 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	695a      	ldr	r2, [r3, #20]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f002 0208 	and.w	r2, r2, #8
 80070e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f006 fd42 	bl	800db78 <USB_ReadInterrupts>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070fa:	2b80      	cmp	r3, #128	@ 0x80
 80070fc:	d123      	bne.n	8007146 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800710a:	2301      	movs	r3, #1
 800710c:	627b      	str	r3, [r7, #36]	@ 0x24
 800710e:	e014      	b.n	800713a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007114:	4613      	mov	r3, r2
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d105      	bne.n	8007134 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	b2db      	uxtb	r3, r3
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fb0a 	bl	8007748 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	3301      	adds	r3, #1
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	791b      	ldrb	r3, [r3, #4]
 800713e:	461a      	mov	r2, r3
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	4293      	cmp	r3, r2
 8007144:	d3e4      	bcc.n	8007110 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f006 fd14 	bl	800db78 <USB_ReadInterrupts>
 8007150:	4603      	mov	r3, r0
 8007152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800715a:	d13c      	bne.n	80071d6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800715c:	2301      	movs	r3, #1
 800715e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007160:	e02b      	b.n	80071ba <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007176:	4613      	mov	r3, r2
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	440b      	add	r3, r1
 8007180:	3318      	adds	r3, #24
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d115      	bne.n	80071b4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007188:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800718a:	2b00      	cmp	r3, #0
 800718c:	da12      	bge.n	80071b4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007192:	4613      	mov	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	3317      	adds	r3, #23
 800719e:	2201      	movs	r2, #1
 80071a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 faca 	bl	8007748 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	3301      	adds	r3, #1
 80071b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	791b      	ldrb	r3, [r3, #4]
 80071be:	461a      	mov	r2, r3
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d3cd      	bcc.n	8007162 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695a      	ldr	r2, [r3, #20]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80071d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f006 fccc 	bl	800db78 <USB_ReadInterrupts>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071ea:	d156      	bne.n	800729a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071ec:	2301      	movs	r3, #1
 80071ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80071f0:	e045      	b.n	800727e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007206:	4613      	mov	r3, r2
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	440b      	add	r3, r1
 8007210:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d12e      	bne.n	8007278 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800721a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800721c:	2b00      	cmp	r3, #0
 800721e:	da2b      	bge.n	8007278 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	0c1a      	lsrs	r2, r3, #16
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800722a:	4053      	eors	r3, r2
 800722c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007230:	2b00      	cmp	r3, #0
 8007232:	d121      	bne.n	8007278 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007234:	6879      	ldr	r1, [r7, #4]
 8007236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007238:	4613      	mov	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007270:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007274:	6053      	str	r3, [r2, #4]
            break;
 8007276:	e008      	b.n	800728a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727a:	3301      	adds	r3, #1
 800727c:	627b      	str	r3, [r7, #36]	@ 0x24
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	791b      	ldrb	r3, [r3, #4]
 8007282:	461a      	mov	r2, r3
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	4293      	cmp	r3, r2
 8007288:	d3b3      	bcc.n	80071f2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695a      	ldr	r2, [r3, #20]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f006 fc6a 	bl	800db78 <USB_ReadInterrupts>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80072aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ae:	d10a      	bne.n	80072c6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f009 f8cd 	bl	8010450 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695a      	ldr	r2, [r3, #20]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80072c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f006 fc54 	bl	800db78 <USB_ReadInterrupts>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d115      	bne.n	8007306 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f009 f8bd 	bl	801046c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6859      	ldr	r1, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
 8007302:	e000      	b.n	8007306 <HAL_PCD_IRQHandler+0x996>
      return;
 8007304:	bf00      	nop
    }
  }
}
 8007306:	3734      	adds	r7, #52	@ 0x34
 8007308:	46bd      	mov	sp, r7
 800730a:	bd90      	pop	{r4, r7, pc}

0800730c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_PCD_SetAddress+0x1a>
 8007322:	2302      	movs	r3, #2
 8007324:	e012      	b.n	800734c <HAL_PCD_SetAddress+0x40>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	78fa      	ldrb	r2, [r7, #3]
 8007332:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	78fa      	ldrb	r2, [r7, #3]
 800733a:	4611      	mov	r1, r2
 800733c:	4618      	mov	r0, r3
 800733e:	f006 fbb3 	bl	800daa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	4608      	mov	r0, r1
 800735e:	4611      	mov	r1, r2
 8007360:	461a      	mov	r2, r3
 8007362:	4603      	mov	r3, r0
 8007364:	70fb      	strb	r3, [r7, #3]
 8007366:	460b      	mov	r3, r1
 8007368:	803b      	strh	r3, [r7, #0]
 800736a:	4613      	mov	r3, r2
 800736c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007372:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007376:	2b00      	cmp	r3, #0
 8007378:	da0f      	bge.n	800739a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	f003 020f 	and.w	r2, r3, #15
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	3310      	adds	r3, #16
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	4413      	add	r3, r2
 800738e:	3304      	adds	r3, #4
 8007390:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	705a      	strb	r2, [r3, #1]
 8007398:	e00f      	b.n	80073ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	f003 020f 	and.w	r2, r3, #15
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	4413      	add	r3, r2
 80073b0:	3304      	adds	r3, #4
 80073b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80073c6:	883b      	ldrh	r3, [r7, #0]
 80073c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	78ba      	ldrb	r2, [r7, #2]
 80073d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d004      	beq.n	80073e8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80073e8:	78bb      	ldrb	r3, [r7, #2]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d102      	bne.n	80073f4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d101      	bne.n	8007402 <HAL_PCD_EP_Open+0xae>
 80073fe:	2302      	movs	r3, #2
 8007400:	e00e      	b.n	8007420 <HAL_PCD_EP_Open+0xcc>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68f9      	ldr	r1, [r7, #12]
 8007410:	4618      	mov	r0, r3
 8007412:	f005 fd2d 	bl	800ce70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800741e:	7afb      	ldrb	r3, [r7, #11]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007438:	2b00      	cmp	r3, #0
 800743a:	da0f      	bge.n	800745c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	f003 020f 	and.w	r2, r3, #15
 8007442:	4613      	mov	r3, r2
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	3310      	adds	r3, #16
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	4413      	add	r3, r2
 8007450:	3304      	adds	r3, #4
 8007452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2201      	movs	r2, #1
 8007458:	705a      	strb	r2, [r3, #1]
 800745a:	e00f      	b.n	800747c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	f003 020f 	and.w	r2, r3, #15
 8007462:	4613      	mov	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	4413      	add	r3, r2
 8007472:	3304      	adds	r3, #4
 8007474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	b2da      	uxtb	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_PCD_EP_Close+0x6e>
 8007492:	2302      	movs	r3, #2
 8007494:	e00e      	b.n	80074b4 <HAL_PCD_EP_Close+0x8c>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f005 fd6b 	bl	800cf80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	607a      	str	r2, [r7, #4]
 80074c6:	603b      	str	r3, [r7, #0]
 80074c8:	460b      	mov	r3, r1
 80074ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	f003 020f 	and.w	r2, r3, #15
 80074d2:	4613      	mov	r3, r2
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	3304      	adds	r3, #4
 80074e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2200      	movs	r2, #0
 80074f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2200      	movs	r2, #0
 80074fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	f003 030f 	and.w	r3, r3, #15
 8007504:	b2da      	uxtb	r2, r3
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	799b      	ldrb	r3, [r3, #6]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d102      	bne.n	8007518 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	799b      	ldrb	r3, [r3, #6]
 8007520:	461a      	mov	r2, r3
 8007522:	6979      	ldr	r1, [r7, #20]
 8007524:	f005 fe08 	bl	800d138 <USB_EPStartXfer>

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	f003 020f 	and.w	r2, r3, #15
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	4613      	mov	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007554:	681b      	ldr	r3, [r3, #0]
}
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	460b      	mov	r3, r1
 8007570:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007572:	7afb      	ldrb	r3, [r7, #11]
 8007574:	f003 020f 	and.w	r2, r3, #15
 8007578:	4613      	mov	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	3310      	adds	r3, #16
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	3304      	adds	r3, #4
 8007588:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2200      	movs	r2, #0
 800759a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2201      	movs	r2, #1
 80075a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075a2:	7afb      	ldrb	r3, [r7, #11]
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	799b      	ldrb	r3, [r3, #6]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d102      	bne.n	80075bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	799b      	ldrb	r3, [r3, #6]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6979      	ldr	r1, [r7, #20]
 80075c8:	f005 fdb6 	bl	800d138 <USB_EPStartXfer>

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7912      	ldrb	r2, [r2, #4]
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d901      	bls.n	80075f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e04f      	b.n	8007694 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da0f      	bge.n	800761c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	f003 020f 	and.w	r2, r3, #15
 8007602:	4613      	mov	r3, r2
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	3310      	adds	r3, #16
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4413      	add	r3, r2
 8007610:	3304      	adds	r3, #4
 8007612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	705a      	strb	r2, [r3, #1]
 800761a:	e00d      	b.n	8007638 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800761c:	78fa      	ldrb	r2, [r7, #3]
 800761e:	4613      	mov	r3, r2
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	3304      	adds	r3, #4
 8007630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	b2da      	uxtb	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_PCD_EP_SetStall+0x82>
 8007654:	2302      	movs	r3, #2
 8007656:	e01d      	b.n	8007694 <HAL_PCD_EP_SetStall+0xbe>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68f9      	ldr	r1, [r7, #12]
 8007666:	4618      	mov	r0, r3
 8007668:	f006 f94a 	bl	800d900 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	7999      	ldrb	r1, [r3, #6]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007684:	461a      	mov	r2, r3
 8007686:	f006 fb3d 	bl	800dd04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	7912      	ldrb	r2, [r2, #4]
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e042      	b.n	8007740 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	da0f      	bge.n	80076e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	f003 020f 	and.w	r2, r3, #15
 80076c8:	4613      	mov	r3, r2
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	3310      	adds	r3, #16
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	4413      	add	r3, r2
 80076d6:	3304      	adds	r3, #4
 80076d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	705a      	strb	r2, [r3, #1]
 80076e0:	e00f      	b.n	8007702 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	f003 020f 	and.w	r2, r3, #15
 80076e8:	4613      	mov	r3, r2
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	4413      	add	r3, r2
 80076f8:	3304      	adds	r3, #4
 80076fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	b2da      	uxtb	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_PCD_EP_ClrStall+0x86>
 800771e:	2302      	movs	r3, #2
 8007720:	e00e      	b.n	8007740 <HAL_PCD_EP_ClrStall+0xa4>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68f9      	ldr	r1, [r7, #12]
 8007730:	4618      	mov	r0, r3
 8007732:	f006 f953 	bl	800d9dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007758:	2b00      	cmp	r3, #0
 800775a:	da0c      	bge.n	8007776 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	f003 020f 	and.w	r2, r3, #15
 8007762:	4613      	mov	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	3310      	adds	r3, #16
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4413      	add	r3, r2
 8007770:	3304      	adds	r3, #4
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e00c      	b.n	8007790 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	f003 020f 	and.w	r2, r3, #15
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4413      	add	r3, r2
 800778c:	3304      	adds	r3, #4
 800778e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68f9      	ldr	r1, [r7, #12]
 8007796:	4618      	mov	r0, r3
 8007798:	f005 ff72 	bl	800d680 <USB_EPStopXfer>
 800779c:	4603      	mov	r3, r0
 800779e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80077a0:	7afb      	ldrb	r3, [r7, #11]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b08a      	sub	sp, #40	@ 0x28
 80077ae:	af02      	add	r7, sp, #8
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4613      	mov	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	3310      	adds	r3, #16
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	4413      	add	r3, r2
 80077ce:	3304      	adds	r3, #4
 80077d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	695a      	ldr	r2, [r3, #20]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d901      	bls.n	80077e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e06b      	b.n	80078ba <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d902      	bls.n	80077fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	3303      	adds	r3, #3
 8007802:	089b      	lsrs	r3, r3, #2
 8007804:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007806:	e02a      	b.n	800785e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	691a      	ldr	r2, [r3, #16]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	429a      	cmp	r2, r3
 800781c:	d902      	bls.n	8007824 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	3303      	adds	r3, #3
 8007828:	089b      	lsrs	r3, r3, #2
 800782a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68d9      	ldr	r1, [r3, #12]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	b2da      	uxtb	r2, r3
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4603      	mov	r3, r0
 8007840:	6978      	ldr	r0, [r7, #20]
 8007842:	f005 ffc7 	bl	800d7d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	441a      	add	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	441a      	add	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	429a      	cmp	r2, r3
 8007872:	d809      	bhi.n	8007888 <PCD_WriteEmptyTxFifo+0xde>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	695a      	ldr	r2, [r3, #20]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800787c:	429a      	cmp	r2, r3
 800787e:	d203      	bcs.n	8007888 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1bf      	bne.n	8007808 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	429a      	cmp	r2, r3
 8007892:	d811      	bhi.n	80078b8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	2201      	movs	r2, #1
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	43db      	mvns	r3, r3
 80078ae:	6939      	ldr	r1, [r7, #16]
 80078b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078b4:	4013      	ands	r3, r2
 80078b6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	333c      	adds	r3, #60	@ 0x3c
 80078dc:	3304      	adds	r3, #4
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	799b      	ldrb	r3, [r3, #6]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d17b      	bne.n	80079f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b00      	cmp	r3, #0
 8007902:	d015      	beq.n	8007930 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	4a61      	ldr	r2, [pc, #388]	@ (8007a8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	f240 80b9 	bls.w	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 80b3 	beq.w	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007926:	461a      	mov	r2, r3
 8007928:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800792c:	6093      	str	r3, [r2, #8]
 800792e:	e0a7      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d009      	beq.n	800794e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007946:	461a      	mov	r2, r3
 8007948:	2320      	movs	r3, #32
 800794a:	6093      	str	r3, [r2, #8]
 800794c:	e098      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 8093 	bne.w	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	4a4b      	ldr	r2, [pc, #300]	@ (8007a8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d90f      	bls.n	8007982 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007978:	461a      	mov	r2, r3
 800797a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800797e:	6093      	str	r3, [r2, #8]
 8007980:	e07e      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4613      	mov	r3, r2
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	3304      	adds	r3, #4
 8007996:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a1a      	ldr	r2, [r3, #32]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	0159      	lsls	r1, r3, #5
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	440b      	add	r3, r1
 80079a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ae:	1ad2      	subs	r2, r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d114      	bne.n	80079e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d109      	bne.n	80079d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80079cc:	461a      	mov	r2, r3
 80079ce:	2101      	movs	r1, #1
 80079d0:	f006 f998 	bl	800dd04 <USB_EP0_OutStart>
 80079d4:	e006      	b.n	80079e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	441a      	add	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f008 fc6c 	bl	80102c8 <HAL_PCD_DataOutStageCallback>
 80079f0:	e046      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	4a26      	ldr	r2, [pc, #152]	@ (8007a90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d124      	bne.n	8007a44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a10:	461a      	mov	r2, r3
 8007a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a16:	6093      	str	r3, [r2, #8]
 8007a18:	e032      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a30:	461a      	mov	r2, r3
 8007a32:	2320      	movs	r3, #32
 8007a34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f008 fc43 	bl	80102c8 <HAL_PCD_DataOutStageCallback>
 8007a42:	e01d      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d114      	bne.n	8007a74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d108      	bne.n	8007a74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2100      	movs	r1, #0
 8007a70:	f006 f948 	bl	800dd04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f008 fc24 	bl	80102c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	4f54300a 	.word	0x4f54300a
 8007a90:	4f54310a 	.word	0x4f54310a

08007a94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	333c      	adds	r3, #60	@ 0x3c
 8007aac:	3304      	adds	r3, #4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4a15      	ldr	r2, [pc, #84]	@ (8007b1c <PCD_EP_OutSetupPacket_int+0x88>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d90e      	bls.n	8007ae8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d009      	beq.n	8007ae8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ae6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f008 fbdb 	bl	80102a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	@ (8007b1c <PCD_EP_OutSetupPacket_int+0x88>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d90c      	bls.n	8007b10 <PCD_EP_OutSetupPacket_int+0x7c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	799b      	ldrb	r3, [r3, #6]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d108      	bne.n	8007b10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	f006 f8fa 	bl	800dd04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	4f54300a 	.word	0x4f54300a

08007b20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007b3e:	883b      	ldrh	r3, [r7, #0]
 8007b40:	0419      	lsls	r1, r3, #16
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b4c:	e028      	b.n	8007ba0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b54:	0c1b      	lsrs	r3, r3, #16
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	4413      	add	r3, r2
 8007b5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]
 8007b60:	e00d      	b.n	8007b7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	3340      	adds	r3, #64	@ 0x40
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	0c1b      	lsrs	r3, r3, #16
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	4413      	add	r3, r2
 8007b76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	73fb      	strb	r3, [r7, #15]
 8007b7e:	7bfa      	ldrb	r2, [r7, #15]
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d3ec      	bcc.n	8007b62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007b88:	883b      	ldrh	r3, [r7, #0]
 8007b8a:	0418      	lsls	r0, r3, #16
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6819      	ldr	r1, [r3, #0]
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	4302      	orrs	r2, r0
 8007b98:	3340      	adds	r3, #64	@ 0x40
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	887a      	ldrh	r2, [r7, #2]
 8007bc0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bfe:	4b05      	ldr	r3, [pc, #20]	@ (8007c14 <HAL_PCDEx_ActivateLPM+0x44>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	10000003 	.word	0x10000003

08007c18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c38:	4b19      	ldr	r3, [pc, #100]	@ (8007ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d00a      	beq.n	8007c5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c44:	4b16      	ldr	r3, [pc, #88]	@ (8007ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d001      	beq.n	8007c56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e01f      	b.n	8007c96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e01d      	b.n	8007c96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c5a:	4b11      	ldr	r3, [pc, #68]	@ (8007ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f023 0207 	bic.w	r2, r3, #7
 8007c62:	490f      	ldr	r1, [pc, #60]	@ (8007ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c6a:	f7fa fa7d 	bl	8002168 <HAL_GetTick>
 8007c6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c70:	e009      	b.n	8007c86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c72:	f7fa fa79 	bl	8002168 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c80:	d901      	bls.n	8007c86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e007      	b.n	8007c96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c86:	4b06      	ldr	r3, [pc, #24]	@ (8007ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c92:	d1ee      	bne.n	8007c72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	58024800 	.word	0x58024800

08007ca4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007ca8:	4b05      	ldr	r3, [pc, #20]	@ (8007cc0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	4a04      	ldr	r2, [pc, #16]	@ (8007cc0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cb2:	60d3      	str	r3, [r2, #12]
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	58024800 	.word	0x58024800

08007cc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08c      	sub	sp, #48	@ 0x30
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f000 bc1f 	b.w	8008516 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80b3 	beq.w	8007e4c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ce6:	4b95      	ldr	r3, [pc, #596]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cf0:	4b92      	ldr	r3, [pc, #584]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf8:	2b10      	cmp	r3, #16
 8007cfa:	d007      	beq.n	8007d0c <HAL_RCC_OscConfig+0x48>
 8007cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfe:	2b18      	cmp	r3, #24
 8007d00:	d112      	bne.n	8007d28 <HAL_RCC_OscConfig+0x64>
 8007d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d10d      	bne.n	8007d28 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d0c:	4b8b      	ldr	r3, [pc, #556]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 8098 	beq.w	8007e4a <HAL_RCC_OscConfig+0x186>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f040 8093 	bne.w	8007e4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e3f6      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d30:	d106      	bne.n	8007d40 <HAL_RCC_OscConfig+0x7c>
 8007d32:	4b82      	ldr	r3, [pc, #520]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a81      	ldr	r2, [pc, #516]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	e058      	b.n	8007df2 <HAL_RCC_OscConfig+0x12e>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d112      	bne.n	8007d6e <HAL_RCC_OscConfig+0xaa>
 8007d48:	4b7c      	ldr	r3, [pc, #496]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a7b      	ldr	r2, [pc, #492]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	4b79      	ldr	r3, [pc, #484]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a78      	ldr	r2, [pc, #480]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d5a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	4b76      	ldr	r3, [pc, #472]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a75      	ldr	r2, [pc, #468]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	e041      	b.n	8007df2 <HAL_RCC_OscConfig+0x12e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d76:	d112      	bne.n	8007d9e <HAL_RCC_OscConfig+0xda>
 8007d78:	4b70      	ldr	r3, [pc, #448]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a6f      	ldr	r2, [pc, #444]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	4b6d      	ldr	r3, [pc, #436]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a6c      	ldr	r2, [pc, #432]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d8a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	4b6a      	ldr	r3, [pc, #424]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a69      	ldr	r2, [pc, #420]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	e029      	b.n	8007df2 <HAL_RCC_OscConfig+0x12e>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007da6:	d112      	bne.n	8007dce <HAL_RCC_OscConfig+0x10a>
 8007da8:	4b64      	ldr	r3, [pc, #400]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a63      	ldr	r2, [pc, #396]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	4b61      	ldr	r3, [pc, #388]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a60      	ldr	r2, [pc, #384]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	e011      	b.n	8007df2 <HAL_RCC_OscConfig+0x12e>
 8007dce:	4b5b      	ldr	r3, [pc, #364]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	4b58      	ldr	r3, [pc, #352]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a57      	ldr	r2, [pc, #348]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007de0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	4b55      	ldr	r3, [pc, #340]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a54      	ldr	r2, [pc, #336]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007dec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007df0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d013      	beq.n	8007e22 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfa:	f7fa f9b5 	bl	8002168 <HAL_GetTick>
 8007dfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e00:	e008      	b.n	8007e14 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e02:	f7fa f9b1 	bl	8002168 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	2b64      	cmp	r3, #100	@ 0x64
 8007e0e:	d901      	bls.n	8007e14 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e380      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e14:	4b49      	ldr	r3, [pc, #292]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0f0      	beq.n	8007e02 <HAL_RCC_OscConfig+0x13e>
 8007e20:	e014      	b.n	8007e4c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e22:	f7fa f9a1 	bl	8002168 <HAL_GetTick>
 8007e26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e28:	e008      	b.n	8007e3c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e2a:	f7fa f99d 	bl	8002168 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	2b64      	cmp	r3, #100	@ 0x64
 8007e36:	d901      	bls.n	8007e3c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e36c      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1f0      	bne.n	8007e2a <HAL_RCC_OscConfig+0x166>
 8007e48:	e000      	b.n	8007e4c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0302 	and.w	r3, r3, #2
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 808c 	beq.w	8007f72 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e5a:	4b38      	ldr	r3, [pc, #224]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e62:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e64:	4b35      	ldr	r3, [pc, #212]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e68:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d007      	beq.n	8007e80 <HAL_RCC_OscConfig+0x1bc>
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	2b18      	cmp	r3, #24
 8007e74:	d137      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x222>
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	f003 0303 	and.w	r3, r3, #3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d132      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e80:	4b2e      	ldr	r3, [pc, #184]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_RCC_OscConfig+0x1d4>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e33e      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e98:	4b28      	ldr	r3, [pc, #160]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f023 0219 	bic.w	r2, r3, #25
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	4925      	ldr	r1, [pc, #148]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eaa:	f7fa f95d 	bl	8002168 <HAL_GetTick>
 8007eae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eb0:	e008      	b.n	8007ec4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eb2:	f7fa f959 	bl	8002168 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d901      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e328      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d0f0      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	061b      	lsls	r3, r3, #24
 8007ede:	4917      	ldr	r1, [pc, #92]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ee4:	e045      	b.n	8007f72 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d028      	beq.n	8007f40 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007eee:	4b13      	ldr	r3, [pc, #76]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f023 0219 	bic.w	r2, r3, #25
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	4910      	ldr	r1, [pc, #64]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f00:	f7fa f932 	bl	8002168 <HAL_GetTick>
 8007f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f08:	f7fa f92e 	bl	8002168 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e2fd      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f1a:	4b08      	ldr	r3, [pc, #32]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0f0      	beq.n	8007f08 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f26:	4b05      	ldr	r3, [pc, #20]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	061b      	lsls	r3, r3, #24
 8007f34:	4901      	ldr	r1, [pc, #4]	@ (8007f3c <HAL_RCC_OscConfig+0x278>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	604b      	str	r3, [r1, #4]
 8007f3a:	e01a      	b.n	8007f72 <HAL_RCC_OscConfig+0x2ae>
 8007f3c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f40:	4b97      	ldr	r3, [pc, #604]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a96      	ldr	r2, [pc, #600]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8007f46:	f023 0301 	bic.w	r3, r3, #1
 8007f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4c:	f7fa f90c 	bl	8002168 <HAL_GetTick>
 8007f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f52:	e008      	b.n	8007f66 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f54:	f7fa f908 	bl	8002168 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d901      	bls.n	8007f66 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e2d7      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f66:	4b8e      	ldr	r3, [pc, #568]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0304 	and.w	r3, r3, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1f0      	bne.n	8007f54 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0310 	and.w	r3, r3, #16
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d06a      	beq.n	8008054 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f7e:	4b88      	ldr	r3, [pc, #544]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f88:	4b85      	ldr	r3, [pc, #532]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	d007      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x2e0>
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	2b18      	cmp	r3, #24
 8007f98:	d11b      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x30e>
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f003 0303 	and.w	r3, r3, #3
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d116      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d005      	beq.n	8007fbc <HAL_RCC_OscConfig+0x2f8>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	2b80      	cmp	r3, #128	@ 0x80
 8007fb6:	d001      	beq.n	8007fbc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e2ac      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fbc:	4b78      	ldr	r3, [pc, #480]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	061b      	lsls	r3, r3, #24
 8007fca:	4975      	ldr	r1, [pc, #468]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fd0:	e040      	b.n	8008054 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d023      	beq.n	8008022 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007fda:	4b71      	ldr	r3, [pc, #452]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a70      	ldr	r2, [pc, #448]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8007fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe6:	f7fa f8bf 	bl	8002168 <HAL_GetTick>
 8007fea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fec:	e008      	b.n	8008000 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007fee:	f7fa f8bb 	bl	8002168 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e28a      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008000:	4b67      	ldr	r3, [pc, #412]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0f0      	beq.n	8007fee <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800800c:	4b64      	ldr	r3, [pc, #400]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a1b      	ldr	r3, [r3, #32]
 8008018:	061b      	lsls	r3, r3, #24
 800801a:	4961      	ldr	r1, [pc, #388]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 800801c:	4313      	orrs	r3, r2
 800801e:	60cb      	str	r3, [r1, #12]
 8008020:	e018      	b.n	8008054 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008022:	4b5f      	ldr	r3, [pc, #380]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a5e      	ldr	r2, [pc, #376]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8008028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800802c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802e:	f7fa f89b 	bl	8002168 <HAL_GetTick>
 8008032:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008034:	e008      	b.n	8008048 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008036:	f7fa f897 	bl	8002168 <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	2b02      	cmp	r3, #2
 8008042:	d901      	bls.n	8008048 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e266      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008048:	4b55      	ldr	r3, [pc, #340]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1f0      	bne.n	8008036 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0308 	and.w	r3, r3, #8
 800805c:	2b00      	cmp	r3, #0
 800805e:	d036      	beq.n	80080ce <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d019      	beq.n	800809c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008068:	4b4d      	ldr	r3, [pc, #308]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 800806a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800806c:	4a4c      	ldr	r2, [pc, #304]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 800806e:	f043 0301 	orr.w	r3, r3, #1
 8008072:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008074:	f7fa f878 	bl	8002168 <HAL_GetTick>
 8008078:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800807a:	e008      	b.n	800808e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800807c:	f7fa f874 	bl	8002168 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d901      	bls.n	800808e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e243      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800808e:	4b44      	ldr	r3, [pc, #272]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8008090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0f0      	beq.n	800807c <HAL_RCC_OscConfig+0x3b8>
 800809a:	e018      	b.n	80080ce <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800809c:	4b40      	ldr	r3, [pc, #256]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 800809e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080a0:	4a3f      	ldr	r2, [pc, #252]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 80080a2:	f023 0301 	bic.w	r3, r3, #1
 80080a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a8:	f7fa f85e 	bl	8002168 <HAL_GetTick>
 80080ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080ae:	e008      	b.n	80080c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080b0:	f7fa f85a 	bl	8002168 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e229      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080c2:	4b37      	ldr	r3, [pc, #220]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 80080c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1f0      	bne.n	80080b0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d036      	beq.n	8008148 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d019      	beq.n	8008116 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080e2:	4b2f      	ldr	r3, [pc, #188]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a2e      	ldr	r2, [pc, #184]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 80080e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80080ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080ee:	f7fa f83b 	bl	8002168 <HAL_GetTick>
 80080f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080f4:	e008      	b.n	8008108 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080f6:	f7fa f837 	bl	8002168 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d901      	bls.n	8008108 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e206      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008108:	4b25      	ldr	r3, [pc, #148]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0f0      	beq.n	80080f6 <HAL_RCC_OscConfig+0x432>
 8008114:	e018      	b.n	8008148 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008116:	4b22      	ldr	r3, [pc, #136]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a21      	ldr	r2, [pc, #132]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 800811c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008120:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008122:	f7fa f821 	bl	8002168 <HAL_GetTick>
 8008126:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008128:	e008      	b.n	800813c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800812a:	f7fa f81d 	bl	8002168 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	2b02      	cmp	r3, #2
 8008136:	d901      	bls.n	800813c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e1ec      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800813c:	4b18      	ldr	r3, [pc, #96]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1f0      	bne.n	800812a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 80af 	beq.w	80082b4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008156:	4b13      	ldr	r3, [pc, #76]	@ (80081a4 <HAL_RCC_OscConfig+0x4e0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a12      	ldr	r2, [pc, #72]	@ (80081a4 <HAL_RCC_OscConfig+0x4e0>)
 800815c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008160:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008162:	f7fa f801 	bl	8002168 <HAL_GetTick>
 8008166:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008168:	e008      	b.n	800817c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800816a:	f7f9 fffd 	bl	8002168 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	2b64      	cmp	r3, #100	@ 0x64
 8008176:	d901      	bls.n	800817c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e1cc      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800817c:	4b09      	ldr	r3, [pc, #36]	@ (80081a4 <HAL_RCC_OscConfig+0x4e0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0f0      	beq.n	800816a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d10b      	bne.n	80081a8 <HAL_RCC_OscConfig+0x4e4>
 8008190:	4b03      	ldr	r3, [pc, #12]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8008192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008194:	4a02      	ldr	r2, [pc, #8]	@ (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8008196:	f043 0301 	orr.w	r3, r3, #1
 800819a:	6713      	str	r3, [r2, #112]	@ 0x70
 800819c:	e05b      	b.n	8008256 <HAL_RCC_OscConfig+0x592>
 800819e:	bf00      	nop
 80081a0:	58024400 	.word	0x58024400
 80081a4:	58024800 	.word	0x58024800
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d112      	bne.n	80081d6 <HAL_RCC_OscConfig+0x512>
 80081b0:	4b9d      	ldr	r3, [pc, #628]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081b4:	4a9c      	ldr	r2, [pc, #624]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081b6:	f023 0301 	bic.w	r3, r3, #1
 80081ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80081bc:	4b9a      	ldr	r3, [pc, #616]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c0:	4a99      	ldr	r2, [pc, #612]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80081c8:	4b97      	ldr	r3, [pc, #604]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081cc:	4a96      	ldr	r2, [pc, #600]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081ce:	f023 0304 	bic.w	r3, r3, #4
 80081d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80081d4:	e03f      	b.n	8008256 <HAL_RCC_OscConfig+0x592>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b05      	cmp	r3, #5
 80081dc:	d112      	bne.n	8008204 <HAL_RCC_OscConfig+0x540>
 80081de:	4b92      	ldr	r3, [pc, #584]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e2:	4a91      	ldr	r2, [pc, #580]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081e4:	f043 0304 	orr.w	r3, r3, #4
 80081e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80081ea:	4b8f      	ldr	r3, [pc, #572]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ee:	4a8e      	ldr	r2, [pc, #568]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80081f6:	4b8c      	ldr	r3, [pc, #560]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081fa:	4a8b      	ldr	r2, [pc, #556]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80081fc:	f043 0301 	orr.w	r3, r3, #1
 8008200:	6713      	str	r3, [r2, #112]	@ 0x70
 8008202:	e028      	b.n	8008256 <HAL_RCC_OscConfig+0x592>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b85      	cmp	r3, #133	@ 0x85
 800820a:	d112      	bne.n	8008232 <HAL_RCC_OscConfig+0x56e>
 800820c:	4b86      	ldr	r3, [pc, #536]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800820e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008210:	4a85      	ldr	r2, [pc, #532]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008212:	f043 0304 	orr.w	r3, r3, #4
 8008216:	6713      	str	r3, [r2, #112]	@ 0x70
 8008218:	4b83      	ldr	r3, [pc, #524]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800821a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821c:	4a82      	ldr	r2, [pc, #520]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800821e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008222:	6713      	str	r3, [r2, #112]	@ 0x70
 8008224:	4b80      	ldr	r3, [pc, #512]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008228:	4a7f      	ldr	r2, [pc, #508]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800822a:	f043 0301 	orr.w	r3, r3, #1
 800822e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008230:	e011      	b.n	8008256 <HAL_RCC_OscConfig+0x592>
 8008232:	4b7d      	ldr	r3, [pc, #500]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008236:	4a7c      	ldr	r2, [pc, #496]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008238:	f023 0301 	bic.w	r3, r3, #1
 800823c:	6713      	str	r3, [r2, #112]	@ 0x70
 800823e:	4b7a      	ldr	r3, [pc, #488]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008242:	4a79      	ldr	r2, [pc, #484]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008244:	f023 0304 	bic.w	r3, r3, #4
 8008248:	6713      	str	r3, [r2, #112]	@ 0x70
 800824a:	4b77      	ldr	r3, [pc, #476]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824e:	4a76      	ldr	r2, [pc, #472]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008254:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d015      	beq.n	800828a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800825e:	f7f9 ff83 	bl	8002168 <HAL_GetTick>
 8008262:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008264:	e00a      	b.n	800827c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008266:	f7f9 ff7f 	bl	8002168 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008274:	4293      	cmp	r3, r2
 8008276:	d901      	bls.n	800827c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e14c      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800827c:	4b6a      	ldr	r3, [pc, #424]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800827e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0ee      	beq.n	8008266 <HAL_RCC_OscConfig+0x5a2>
 8008288:	e014      	b.n	80082b4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800828a:	f7f9 ff6d 	bl	8002168 <HAL_GetTick>
 800828e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008290:	e00a      	b.n	80082a8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008292:	f7f9 ff69 	bl	8002168 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d901      	bls.n	80082a8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e136      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082a8:	4b5f      	ldr	r3, [pc, #380]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80082aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1ee      	bne.n	8008292 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 812b 	beq.w	8008514 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082be:	4b5a      	ldr	r3, [pc, #360]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082c6:	2b18      	cmp	r3, #24
 80082c8:	f000 80bb 	beq.w	8008442 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	f040 8095 	bne.w	8008400 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082d6:	4b54      	ldr	r3, [pc, #336]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a53      	ldr	r2, [pc, #332]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80082dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e2:	f7f9 ff41 	bl	8002168 <HAL_GetTick>
 80082e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082e8:	e008      	b.n	80082fc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ea:	f7f9 ff3d 	bl	8002168 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d901      	bls.n	80082fc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e10c      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082fc:	4b4a      	ldr	r3, [pc, #296]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1f0      	bne.n	80082ea <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008308:	4b47      	ldr	r3, [pc, #284]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800830a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800830c:	4b47      	ldr	r3, [pc, #284]	@ (800842c <HAL_RCC_OscConfig+0x768>)
 800830e:	4013      	ands	r3, r2
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008318:	0112      	lsls	r2, r2, #4
 800831a:	430a      	orrs	r2, r1
 800831c:	4942      	ldr	r1, [pc, #264]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800831e:	4313      	orrs	r3, r2
 8008320:	628b      	str	r3, [r1, #40]	@ 0x28
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008326:	3b01      	subs	r3, #1
 8008328:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008330:	3b01      	subs	r3, #1
 8008332:	025b      	lsls	r3, r3, #9
 8008334:	b29b      	uxth	r3, r3
 8008336:	431a      	orrs	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833c:	3b01      	subs	r3, #1
 800833e:	041b      	lsls	r3, r3, #16
 8008340:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800834a:	3b01      	subs	r3, #1
 800834c:	061b      	lsls	r3, r3, #24
 800834e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008352:	4935      	ldr	r1, [pc, #212]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008354:	4313      	orrs	r3, r2
 8008356:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008358:	4b33      	ldr	r3, [pc, #204]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800835a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835c:	4a32      	ldr	r2, [pc, #200]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800835e:	f023 0301 	bic.w	r3, r3, #1
 8008362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008364:	4b30      	ldr	r3, [pc, #192]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008368:	4b31      	ldr	r3, [pc, #196]	@ (8008430 <HAL_RCC_OscConfig+0x76c>)
 800836a:	4013      	ands	r3, r2
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008370:	00d2      	lsls	r2, r2, #3
 8008372:	492d      	ldr	r1, [pc, #180]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008374:	4313      	orrs	r3, r2
 8008376:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008378:	4b2b      	ldr	r3, [pc, #172]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800837a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837c:	f023 020c 	bic.w	r2, r3, #12
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008384:	4928      	ldr	r1, [pc, #160]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008386:	4313      	orrs	r3, r2
 8008388:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800838a:	4b27      	ldr	r3, [pc, #156]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838e:	f023 0202 	bic.w	r2, r3, #2
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008396:	4924      	ldr	r1, [pc, #144]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008398:	4313      	orrs	r3, r2
 800839a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800839c:	4b22      	ldr	r3, [pc, #136]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 800839e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a0:	4a21      	ldr	r2, [pc, #132]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80083a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80083aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ac:	4a1e      	ldr	r2, [pc, #120]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80083ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80083ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80083c0:	4b19      	ldr	r3, [pc, #100]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c4:	4a18      	ldr	r2, [pc, #96]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80083c6:	f043 0301 	orr.w	r3, r3, #1
 80083ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083cc:	4b16      	ldr	r3, [pc, #88]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a15      	ldr	r2, [pc, #84]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80083d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d8:	f7f9 fec6 	bl	8002168 <HAL_GetTick>
 80083dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083de:	e008      	b.n	80083f2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083e0:	f7f9 fec2 	bl	8002168 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e091      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0f0      	beq.n	80083e0 <HAL_RCC_OscConfig+0x71c>
 80083fe:	e089      	b.n	8008514 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008400:	4b09      	ldr	r3, [pc, #36]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a08      	ldr	r2, [pc, #32]	@ (8008428 <HAL_RCC_OscConfig+0x764>)
 8008406:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800840a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840c:	f7f9 feac 	bl	8002168 <HAL_GetTick>
 8008410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008412:	e00f      	b.n	8008434 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008414:	f7f9 fea8 	bl	8002168 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	2b02      	cmp	r3, #2
 8008420:	d908      	bls.n	8008434 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e077      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
 8008426:	bf00      	nop
 8008428:	58024400 	.word	0x58024400
 800842c:	fffffc0c 	.word	0xfffffc0c
 8008430:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008434:	4b3a      	ldr	r3, [pc, #232]	@ (8008520 <HAL_RCC_OscConfig+0x85c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e9      	bne.n	8008414 <HAL_RCC_OscConfig+0x750>
 8008440:	e068      	b.n	8008514 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008442:	4b37      	ldr	r3, [pc, #220]	@ (8008520 <HAL_RCC_OscConfig+0x85c>)
 8008444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008446:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008448:	4b35      	ldr	r3, [pc, #212]	@ (8008520 <HAL_RCC_OscConfig+0x85c>)
 800844a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008452:	2b01      	cmp	r3, #1
 8008454:	d031      	beq.n	80084ba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f003 0203 	and.w	r2, r3, #3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008460:	429a      	cmp	r2, r3
 8008462:	d12a      	bne.n	80084ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	091b      	lsrs	r3, r3, #4
 8008468:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008470:	429a      	cmp	r2, r3
 8008472:	d122      	bne.n	80084ba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008480:	429a      	cmp	r2, r3
 8008482:	d11a      	bne.n	80084ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	0a5b      	lsrs	r3, r3, #9
 8008488:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008490:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008492:	429a      	cmp	r2, r3
 8008494:	d111      	bne.n	80084ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	0c1b      	lsrs	r3, r3, #16
 800849a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d108      	bne.n	80084ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	0e1b      	lsrs	r3, r3, #24
 80084ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d001      	beq.n	80084be <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e02b      	b.n	8008516 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80084be:	4b18      	ldr	r3, [pc, #96]	@ (8008520 <HAL_RCC_OscConfig+0x85c>)
 80084c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084c2:	08db      	lsrs	r3, r3, #3
 80084c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084c8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d01f      	beq.n	8008514 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80084d4:	4b12      	ldr	r3, [pc, #72]	@ (8008520 <HAL_RCC_OscConfig+0x85c>)
 80084d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d8:	4a11      	ldr	r2, [pc, #68]	@ (8008520 <HAL_RCC_OscConfig+0x85c>)
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084e0:	f7f9 fe42 	bl	8002168 <HAL_GetTick>
 80084e4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80084e6:	bf00      	nop
 80084e8:	f7f9 fe3e 	bl	8002168 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d0f9      	beq.n	80084e8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008520 <HAL_RCC_OscConfig+0x85c>)
 80084f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008524 <HAL_RCC_OscConfig+0x860>)
 80084fa:	4013      	ands	r3, r2
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008500:	00d2      	lsls	r2, r2, #3
 8008502:	4907      	ldr	r1, [pc, #28]	@ (8008520 <HAL_RCC_OscConfig+0x85c>)
 8008504:	4313      	orrs	r3, r2
 8008506:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008508:	4b05      	ldr	r3, [pc, #20]	@ (8008520 <HAL_RCC_OscConfig+0x85c>)
 800850a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850c:	4a04      	ldr	r2, [pc, #16]	@ (8008520 <HAL_RCC_OscConfig+0x85c>)
 800850e:	f043 0301 	orr.w	r3, r3, #1
 8008512:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3730      	adds	r7, #48	@ 0x30
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	58024400 	.word	0x58024400
 8008524:	ffff0007 	.word	0xffff0007

08008528 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e19c      	b.n	8008876 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800853c:	4b8a      	ldr	r3, [pc, #552]	@ (8008768 <HAL_RCC_ClockConfig+0x240>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 030f 	and.w	r3, r3, #15
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d910      	bls.n	800856c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800854a:	4b87      	ldr	r3, [pc, #540]	@ (8008768 <HAL_RCC_ClockConfig+0x240>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f023 020f 	bic.w	r2, r3, #15
 8008552:	4985      	ldr	r1, [pc, #532]	@ (8008768 <HAL_RCC_ClockConfig+0x240>)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	4313      	orrs	r3, r2
 8008558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800855a:	4b83      	ldr	r3, [pc, #524]	@ (8008768 <HAL_RCC_ClockConfig+0x240>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d001      	beq.n	800856c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e184      	b.n	8008876 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b00      	cmp	r3, #0
 8008576:	d010      	beq.n	800859a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	4b7b      	ldr	r3, [pc, #492]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008584:	429a      	cmp	r2, r3
 8008586:	d908      	bls.n	800859a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008588:	4b78      	ldr	r3, [pc, #480]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	4975      	ldr	r1, [pc, #468]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 8008596:	4313      	orrs	r3, r2
 8008598:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d010      	beq.n	80085c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695a      	ldr	r2, [r3, #20]
 80085aa:	4b70      	ldr	r3, [pc, #448]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d908      	bls.n	80085c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085b6:	4b6d      	ldr	r3, [pc, #436]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	496a      	ldr	r1, [pc, #424]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0310 	and.w	r3, r3, #16
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d010      	beq.n	80085f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	699a      	ldr	r2, [r3, #24]
 80085d8:	4b64      	ldr	r3, [pc, #400]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d908      	bls.n	80085f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085e4:	4b61      	ldr	r3, [pc, #388]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	495e      	ldr	r1, [pc, #376]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d010      	beq.n	8008624 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	69da      	ldr	r2, [r3, #28]
 8008606:	4b59      	ldr	r3, [pc, #356]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800860e:	429a      	cmp	r2, r3
 8008610:	d908      	bls.n	8008624 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008612:	4b56      	ldr	r3, [pc, #344]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	4953      	ldr	r1, [pc, #332]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 8008620:	4313      	orrs	r3, r2
 8008622:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d010      	beq.n	8008652 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	4b4d      	ldr	r3, [pc, #308]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	f003 030f 	and.w	r3, r3, #15
 800863c:	429a      	cmp	r2, r3
 800863e:	d908      	bls.n	8008652 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008640:	4b4a      	ldr	r3, [pc, #296]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	f023 020f 	bic.w	r2, r3, #15
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	4947      	ldr	r1, [pc, #284]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 800864e:	4313      	orrs	r3, r2
 8008650:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d055      	beq.n	800870a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800865e:	4b43      	ldr	r3, [pc, #268]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	4940      	ldr	r1, [pc, #256]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 800866c:	4313      	orrs	r3, r2
 800866e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d107      	bne.n	8008688 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008678:	4b3c      	ldr	r3, [pc, #240]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d121      	bne.n	80086c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e0f6      	b.n	8008876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b03      	cmp	r3, #3
 800868e:	d107      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008690:	4b36      	ldr	r3, [pc, #216]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d115      	bne.n	80086c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e0ea      	b.n	8008876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d107      	bne.n	80086b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086a8:	4b30      	ldr	r3, [pc, #192]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d109      	bne.n	80086c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e0de      	b.n	8008876 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086b8:	4b2c      	ldr	r3, [pc, #176]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e0d6      	b.n	8008876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086c8:	4b28      	ldr	r3, [pc, #160]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	f023 0207 	bic.w	r2, r3, #7
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4925      	ldr	r1, [pc, #148]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086da:	f7f9 fd45 	bl	8002168 <HAL_GetTick>
 80086de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086e0:	e00a      	b.n	80086f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086e2:	f7f9 fd41 	bl	8002168 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d901      	bls.n	80086f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e0be      	b.n	8008876 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086f8:	4b1c      	ldr	r3, [pc, #112]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	429a      	cmp	r2, r3
 8008708:	d1eb      	bne.n	80086e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d010      	beq.n	8008738 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	4b14      	ldr	r3, [pc, #80]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	429a      	cmp	r2, r3
 8008724:	d208      	bcs.n	8008738 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008726:	4b11      	ldr	r3, [pc, #68]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	f023 020f 	bic.w	r2, r3, #15
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	490e      	ldr	r1, [pc, #56]	@ (800876c <HAL_RCC_ClockConfig+0x244>)
 8008734:	4313      	orrs	r3, r2
 8008736:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008738:	4b0b      	ldr	r3, [pc, #44]	@ (8008768 <HAL_RCC_ClockConfig+0x240>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d214      	bcs.n	8008770 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008746:	4b08      	ldr	r3, [pc, #32]	@ (8008768 <HAL_RCC_ClockConfig+0x240>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f023 020f 	bic.w	r2, r3, #15
 800874e:	4906      	ldr	r1, [pc, #24]	@ (8008768 <HAL_RCC_ClockConfig+0x240>)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	4313      	orrs	r3, r2
 8008754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008756:	4b04      	ldr	r3, [pc, #16]	@ (8008768 <HAL_RCC_ClockConfig+0x240>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d005      	beq.n	8008770 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e086      	b.n	8008876 <HAL_RCC_ClockConfig+0x34e>
 8008768:	52002000 	.word	0x52002000
 800876c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0304 	and.w	r3, r3, #4
 8008778:	2b00      	cmp	r3, #0
 800877a:	d010      	beq.n	800879e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691a      	ldr	r2, [r3, #16]
 8008780:	4b3f      	ldr	r3, [pc, #252]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008788:	429a      	cmp	r2, r3
 800878a:	d208      	bcs.n	800879e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800878c:	4b3c      	ldr	r3, [pc, #240]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	4939      	ldr	r1, [pc, #228]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 800879a:	4313      	orrs	r3, r2
 800879c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0308 	and.w	r3, r3, #8
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d010      	beq.n	80087cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	695a      	ldr	r2, [r3, #20]
 80087ae:	4b34      	ldr	r3, [pc, #208]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d208      	bcs.n	80087cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087ba:	4b31      	ldr	r3, [pc, #196]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	492e      	ldr	r1, [pc, #184]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0310 	and.w	r3, r3, #16
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d010      	beq.n	80087fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699a      	ldr	r2, [r3, #24]
 80087dc:	4b28      	ldr	r3, [pc, #160]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d208      	bcs.n	80087fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087e8:	4b25      	ldr	r3, [pc, #148]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	4922      	ldr	r1, [pc, #136]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d010      	beq.n	8008828 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69da      	ldr	r2, [r3, #28]
 800880a:	4b1d      	ldr	r3, [pc, #116]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008812:	429a      	cmp	r2, r3
 8008814:	d208      	bcs.n	8008828 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008816:	4b1a      	ldr	r3, [pc, #104]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	4917      	ldr	r1, [pc, #92]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 8008824:	4313      	orrs	r3, r2
 8008826:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008828:	f000 f89e 	bl	8008968 <HAL_RCC_GetSysClockFreq>
 800882c:	4602      	mov	r2, r0
 800882e:	4b14      	ldr	r3, [pc, #80]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	0a1b      	lsrs	r3, r3, #8
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	4912      	ldr	r1, [pc, #72]	@ (8008884 <HAL_RCC_ClockConfig+0x35c>)
 800883a:	5ccb      	ldrb	r3, [r1, r3]
 800883c:	f003 031f 	and.w	r3, r3, #31
 8008840:	fa22 f303 	lsr.w	r3, r2, r3
 8008844:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008846:	4b0e      	ldr	r3, [pc, #56]	@ (8008880 <HAL_RCC_ClockConfig+0x358>)
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	f003 030f 	and.w	r3, r3, #15
 800884e:	4a0d      	ldr	r2, [pc, #52]	@ (8008884 <HAL_RCC_ClockConfig+0x35c>)
 8008850:	5cd3      	ldrb	r3, [r2, r3]
 8008852:	f003 031f 	and.w	r3, r3, #31
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
 800885c:	4a0a      	ldr	r2, [pc, #40]	@ (8008888 <HAL_RCC_ClockConfig+0x360>)
 800885e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008860:	4a0a      	ldr	r2, [pc, #40]	@ (800888c <HAL_RCC_ClockConfig+0x364>)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008866:	4b0a      	ldr	r3, [pc, #40]	@ (8008890 <HAL_RCC_ClockConfig+0x368>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f7f9 fc32 	bl	80020d4 <HAL_InitTick>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008874:	7bfb      	ldrb	r3, [r7, #15]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	58024400 	.word	0x58024400
 8008884:	08010a1c 	.word	0x08010a1c
 8008888:	24000004 	.word	0x24000004
 800888c:	24000000 	.word	0x24000000
 8008890:	24000008 	.word	0x24000008

08008894 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b08c      	sub	sp, #48	@ 0x30
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d12a      	bne.n	80088fc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80088a6:	4b2d      	ldr	r3, [pc, #180]	@ (800895c <HAL_RCC_MCOConfig+0xc8>)
 80088a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80088ac:	4a2b      	ldr	r2, [pc, #172]	@ (800895c <HAL_RCC_MCOConfig+0xc8>)
 80088ae:	f043 0301 	orr.w	r3, r3, #1
 80088b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80088b6:	4b29      	ldr	r3, [pc, #164]	@ (800895c <HAL_RCC_MCOConfig+0xc8>)
 80088b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80088c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80088c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ca:	2302      	movs	r3, #2
 80088cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ce:	2303      	movs	r3, #3
 80088d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d2:	2300      	movs	r3, #0
 80088d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80088d6:	2300      	movs	r3, #0
 80088d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80088da:	f107 031c 	add.w	r3, r7, #28
 80088de:	4619      	mov	r1, r3
 80088e0:	481f      	ldr	r0, [pc, #124]	@ (8008960 <HAL_RCC_MCOConfig+0xcc>)
 80088e2:	f7fc fdd3 	bl	800548c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80088e6:	4b1d      	ldr	r3, [pc, #116]	@ (800895c <HAL_RCC_MCOConfig+0xc8>)
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	430b      	orrs	r3, r1
 80088f4:	4919      	ldr	r1, [pc, #100]	@ (800895c <HAL_RCC_MCOConfig+0xc8>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80088fa:	e02a      	b.n	8008952 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80088fc:	4b17      	ldr	r3, [pc, #92]	@ (800895c <HAL_RCC_MCOConfig+0xc8>)
 80088fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008902:	4a16      	ldr	r2, [pc, #88]	@ (800895c <HAL_RCC_MCOConfig+0xc8>)
 8008904:	f043 0304 	orr.w	r3, r3, #4
 8008908:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800890c:	4b13      	ldr	r3, [pc, #76]	@ (800895c <HAL_RCC_MCOConfig+0xc8>)
 800890e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008912:	f003 0304 	and.w	r3, r3, #4
 8008916:	617b      	str	r3, [r7, #20]
 8008918:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800891a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800891e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008920:	2302      	movs	r3, #2
 8008922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008924:	2303      	movs	r3, #3
 8008926:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008928:	2300      	movs	r3, #0
 800892a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800892c:	2300      	movs	r3, #0
 800892e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008930:	f107 031c 	add.w	r3, r7, #28
 8008934:	4619      	mov	r1, r3
 8008936:	480b      	ldr	r0, [pc, #44]	@ (8008964 <HAL_RCC_MCOConfig+0xd0>)
 8008938:	f7fc fda8 	bl	800548c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800893c:	4b07      	ldr	r3, [pc, #28]	@ (800895c <HAL_RCC_MCOConfig+0xc8>)
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	01d9      	lsls	r1, r3, #7
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	430b      	orrs	r3, r1
 800894c:	4903      	ldr	r1, [pc, #12]	@ (800895c <HAL_RCC_MCOConfig+0xc8>)
 800894e:	4313      	orrs	r3, r2
 8008950:	610b      	str	r3, [r1, #16]
}
 8008952:	bf00      	nop
 8008954:	3730      	adds	r7, #48	@ 0x30
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	58024400 	.word	0x58024400
 8008960:	58020000 	.word	0x58020000
 8008964:	58020800 	.word	0x58020800

08008968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008968:	b480      	push	{r7}
 800896a:	b089      	sub	sp, #36	@ 0x24
 800896c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800896e:	4bb3      	ldr	r3, [pc, #716]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008976:	2b18      	cmp	r3, #24
 8008978:	f200 8155 	bhi.w	8008c26 <HAL_RCC_GetSysClockFreq+0x2be>
 800897c:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <HAL_RCC_GetSysClockFreq+0x1c>)
 800897e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008982:	bf00      	nop
 8008984:	080089e9 	.word	0x080089e9
 8008988:	08008c27 	.word	0x08008c27
 800898c:	08008c27 	.word	0x08008c27
 8008990:	08008c27 	.word	0x08008c27
 8008994:	08008c27 	.word	0x08008c27
 8008998:	08008c27 	.word	0x08008c27
 800899c:	08008c27 	.word	0x08008c27
 80089a0:	08008c27 	.word	0x08008c27
 80089a4:	08008a0f 	.word	0x08008a0f
 80089a8:	08008c27 	.word	0x08008c27
 80089ac:	08008c27 	.word	0x08008c27
 80089b0:	08008c27 	.word	0x08008c27
 80089b4:	08008c27 	.word	0x08008c27
 80089b8:	08008c27 	.word	0x08008c27
 80089bc:	08008c27 	.word	0x08008c27
 80089c0:	08008c27 	.word	0x08008c27
 80089c4:	08008a15 	.word	0x08008a15
 80089c8:	08008c27 	.word	0x08008c27
 80089cc:	08008c27 	.word	0x08008c27
 80089d0:	08008c27 	.word	0x08008c27
 80089d4:	08008c27 	.word	0x08008c27
 80089d8:	08008c27 	.word	0x08008c27
 80089dc:	08008c27 	.word	0x08008c27
 80089e0:	08008c27 	.word	0x08008c27
 80089e4:	08008a1b 	.word	0x08008a1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089e8:	4b94      	ldr	r3, [pc, #592]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d009      	beq.n	8008a08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089f4:	4b91      	ldr	r3, [pc, #580]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	08db      	lsrs	r3, r3, #3
 80089fa:	f003 0303 	and.w	r3, r3, #3
 80089fe:	4a90      	ldr	r2, [pc, #576]	@ (8008c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a00:	fa22 f303 	lsr.w	r3, r2, r3
 8008a04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008a06:	e111      	b.n	8008c2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a08:	4b8d      	ldr	r3, [pc, #564]	@ (8008c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a0a:	61bb      	str	r3, [r7, #24]
      break;
 8008a0c:	e10e      	b.n	8008c2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008a0e:	4b8d      	ldr	r3, [pc, #564]	@ (8008c44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a10:	61bb      	str	r3, [r7, #24]
      break;
 8008a12:	e10b      	b.n	8008c2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008a14:	4b8c      	ldr	r3, [pc, #560]	@ (8008c48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008a16:	61bb      	str	r3, [r7, #24]
      break;
 8008a18:	e108      	b.n	8008c2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a1a:	4b88      	ldr	r3, [pc, #544]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a24:	4b85      	ldr	r3, [pc, #532]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a28:	091b      	lsrs	r3, r3, #4
 8008a2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a2e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a30:	4b82      	ldr	r3, [pc, #520]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a3a:	4b80      	ldr	r3, [pc, #512]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a3e:	08db      	lsrs	r3, r3, #3
 8008a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 80e1 	beq.w	8008c20 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	f000 8083 	beq.w	8008b6c <HAL_RCC_GetSysClockFreq+0x204>
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	f200 80a1 	bhi.w	8008bb0 <HAL_RCC_GetSysClockFreq+0x248>
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <HAL_RCC_GetSysClockFreq+0x114>
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d056      	beq.n	8008b28 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a7a:	e099      	b.n	8008bb0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d02d      	beq.n	8008ae4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a88:	4b6c      	ldr	r3, [pc, #432]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	08db      	lsrs	r3, r3, #3
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	4a6b      	ldr	r2, [pc, #428]	@ (8008c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a94:	fa22 f303 	lsr.w	r3, r2, r3
 8008a98:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	ee07 3a90 	vmov	s15, r3
 8008aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ab2:	4b62      	ldr	r3, [pc, #392]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ac6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ade:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008ae2:	e087      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008c50 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af6:	4b51      	ldr	r3, [pc, #324]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b0a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b26:	e065      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b32:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008c54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b3a:	4b40      	ldr	r3, [pc, #256]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b4e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b6a:	e043      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b76:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008c58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b92:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008baa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bae:	e021      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008c54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bd6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bf2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008bf4:	4b11      	ldr	r3, [pc, #68]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf8:	0a5b      	lsrs	r3, r3, #9
 8008bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bfe:	3301      	adds	r3, #1
 8008c00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	ee07 3a90 	vmov	s15, r3
 8008c08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c18:	ee17 3a90 	vmov	r3, s15
 8008c1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008c1e:	e005      	b.n	8008c2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008c20:	2300      	movs	r3, #0
 8008c22:	61bb      	str	r3, [r7, #24]
      break;
 8008c24:	e002      	b.n	8008c2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008c26:	4b07      	ldr	r3, [pc, #28]	@ (8008c44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c28:	61bb      	str	r3, [r7, #24]
      break;
 8008c2a:	bf00      	nop
  }

  return sysclockfreq;
 8008c2c:	69bb      	ldr	r3, [r7, #24]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3724      	adds	r7, #36	@ 0x24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	58024400 	.word	0x58024400
 8008c40:	03d09000 	.word	0x03d09000
 8008c44:	003d0900 	.word	0x003d0900
 8008c48:	007a1200 	.word	0x007a1200
 8008c4c:	46000000 	.word	0x46000000
 8008c50:	4c742400 	.word	0x4c742400
 8008c54:	4a742400 	.word	0x4a742400
 8008c58:	4af42400 	.word	0x4af42400

08008c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8008c62:	f7ff fe81 	bl	8008968 <HAL_RCC_GetSysClockFreq>
 8008c66:	4602      	mov	r2, r0
 8008c68:	4b10      	ldr	r3, [pc, #64]	@ (8008cac <HAL_RCC_GetHCLKFreq+0x50>)
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	0a1b      	lsrs	r3, r3, #8
 8008c6e:	f003 030f 	and.w	r3, r3, #15
 8008c72:	490f      	ldr	r1, [pc, #60]	@ (8008cb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c74:	5ccb      	ldrb	r3, [r1, r3]
 8008c76:	f003 031f 	and.w	r3, r3, #31
 8008c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008c80:	4b0a      	ldr	r3, [pc, #40]	@ (8008cac <HAL_RCC_GetHCLKFreq+0x50>)
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	f003 030f 	and.w	r3, r3, #15
 8008c88:	4a09      	ldr	r2, [pc, #36]	@ (8008cb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c8a:	5cd3      	ldrb	r3, [r2, r3]
 8008c8c:	f003 031f 	and.w	r3, r3, #31
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	fa22 f303 	lsr.w	r3, r2, r3
 8008c96:	4a07      	ldr	r2, [pc, #28]	@ (8008cb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c9a:	4a07      	ldr	r2, [pc, #28]	@ (8008cb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008ca0:	4b04      	ldr	r3, [pc, #16]	@ (8008cb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	58024400 	.word	0x58024400
 8008cb0:	08010a1c 	.word	0x08010a1c
 8008cb4:	24000004 	.word	0x24000004
 8008cb8:	24000000 	.word	0x24000000

08008cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8008cc0:	f7ff ffcc 	bl	8008c5c <HAL_RCC_GetHCLKFreq>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	4b06      	ldr	r3, [pc, #24]	@ (8008ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	091b      	lsrs	r3, r3, #4
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	4904      	ldr	r1, [pc, #16]	@ (8008ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cd2:	5ccb      	ldrb	r3, [r1, r3]
 8008cd4:	f003 031f 	and.w	r3, r3, #31
 8008cd8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	08010a1c 	.word	0x08010a1c

08008ce8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cec:	b0c8      	sub	sp, #288	@ 0x120
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008d0c:	2500      	movs	r5, #0
 8008d0e:	ea54 0305 	orrs.w	r3, r4, r5
 8008d12:	d049      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d1e:	d02f      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008d20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d24:	d828      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d2a:	d01a      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008d2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d30:	d822      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d3a:	d007      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d3c:	e01c      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d3e:	4ba7      	ldr	r3, [pc, #668]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d42:	4aa6      	ldr	r2, [pc, #664]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d4a:	e01a      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d50:	3308      	adds	r3, #8
 8008d52:	2102      	movs	r1, #2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f002 fa6d 	bl	800b234 <RCCEx_PLL2_Config>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d60:	e00f      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d66:	3328      	adds	r3, #40	@ 0x28
 8008d68:	2102      	movs	r1, #2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f002 fb14 	bl	800b398 <RCCEx_PLL3_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d76:	e004      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d7e:	e000      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d8a:	4b94      	ldr	r3, [pc, #592]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d98:	4a90      	ldr	r2, [pc, #576]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d9e:	e003      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008da4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008db4:	f04f 0900 	mov.w	r9, #0
 8008db8:	ea58 0309 	orrs.w	r3, r8, r9
 8008dbc:	d047      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d82a      	bhi.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008de5 	.word	0x08008de5
 8008dd4:	08008df3 	.word	0x08008df3
 8008dd8:	08008e09 	.word	0x08008e09
 8008ddc:	08008e27 	.word	0x08008e27
 8008de0:	08008e27 	.word	0x08008e27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de4:	4b7d      	ldr	r3, [pc, #500]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de8:	4a7c      	ldr	r2, [pc, #496]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008df0:	e01a      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df6:	3308      	adds	r3, #8
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f002 fa1a 	bl	800b234 <RCCEx_PLL2_Config>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e06:	e00f      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e0c:	3328      	adds	r3, #40	@ 0x28
 8008e0e:	2100      	movs	r1, #0
 8008e10:	4618      	mov	r0, r3
 8008e12:	f002 fac1 	bl	800b398 <RCCEx_PLL3_Config>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e1c:	e004      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e24:	e000      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10a      	bne.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e30:	4b6a      	ldr	r3, [pc, #424]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e34:	f023 0107 	bic.w	r1, r3, #7
 8008e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3e:	4a67      	ldr	r2, [pc, #412]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e40:	430b      	orrs	r3, r1
 8008e42:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e44:	e003      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008e5a:	f04f 0b00 	mov.w	fp, #0
 8008e5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e62:	d054      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8008e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008e6e:	d036      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008e70:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008e74:	d82f      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e7a:	d032      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e80:	d829      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e84:	d02f      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8008e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e88:	d825      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008e8a:	2b80      	cmp	r3, #128	@ 0x80
 8008e8c:	d018      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008e8e:	2b80      	cmp	r3, #128	@ 0x80
 8008e90:	d821      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008e96:	2b40      	cmp	r3, #64	@ 0x40
 8008e98:	d007      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8008e9a:	e01c      	b.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008ea8:	e01e      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eae:	3308      	adds	r3, #8
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f002 f9be 	bl	800b234 <RCCEx_PLL2_Config>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008ebe:	e013      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec4:	3328      	adds	r3, #40	@ 0x28
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f002 fa65 	bl	800b398 <RCCEx_PLL3_Config>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008ed4:	e008      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008edc:	e004      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008ede:	bf00      	nop
 8008ee0:	e002      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008ee2:	bf00      	nop
 8008ee4:	e000      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008efe:	4a37      	ldr	r2, [pc, #220]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f00:	430b      	orrs	r3, r1
 8008f02:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f04:	e003      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008f1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	d05c      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f34:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008f38:	d03b      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008f3a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008f3e:	d834      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f44:	d037      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f4a:	d82e      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008f4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f50:	d033      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f52:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f56:	d828      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f5c:	d01a      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f62:	d822      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d003      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6c:	d007      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008f6e:	e01c      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f70:	4b1a      	ldr	r3, [pc, #104]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f74:	4a19      	ldr	r2, [pc, #100]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008f7c:	e01e      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f82:	3308      	adds	r3, #8
 8008f84:	2100      	movs	r1, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f002 f954 	bl	800b234 <RCCEx_PLL2_Config>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008f92:	e013      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f98:	3328      	adds	r3, #40	@ 0x28
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f002 f9fb 	bl	800b398 <RCCEx_PLL3_Config>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008fa8:	e008      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008fb0:	e004      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008fb2:	bf00      	nop
 8008fb4:	e002      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008fb6:	bf00      	nop
 8008fb8:	e000      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10d      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008fc4:	4b05      	ldr	r3, [pc, #20]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fc8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fd2:	4a02      	ldr	r2, [pc, #8]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fd4:	430b      	orrs	r3, r1
 8008fd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fd8:	e006      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008fda:	bf00      	nop
 8008fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fe4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008ffe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009002:	460b      	mov	r3, r1
 8009004:	4313      	orrs	r3, r2
 8009006:	d03a      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800900c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800900e:	2b30      	cmp	r3, #48	@ 0x30
 8009010:	d01f      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8009012:	2b30      	cmp	r3, #48	@ 0x30
 8009014:	d819      	bhi.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8009016:	2b20      	cmp	r3, #32
 8009018:	d00c      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800901a:	2b20      	cmp	r3, #32
 800901c:	d815      	bhi.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d019      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009022:	2b10      	cmp	r3, #16
 8009024:	d111      	bne.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009026:	4bae      	ldr	r3, [pc, #696]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902a:	4aad      	ldr	r2, [pc, #692]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800902c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009030:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009032:	e011      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009038:	3308      	adds	r3, #8
 800903a:	2102      	movs	r1, #2
 800903c:	4618      	mov	r0, r3
 800903e:	f002 f8f9 	bl	800b234 <RCCEx_PLL2_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009048:	e006      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009050:	e002      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8009052:	bf00      	nop
 8009054:	e000      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8009056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009058:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009060:	4b9f      	ldr	r3, [pc, #636]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009064:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800906c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800906e:	4a9c      	ldr	r2, [pc, #624]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009070:	430b      	orrs	r3, r1
 8009072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009074:	e003      	b.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009076:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800907a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800907e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800908a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800908e:	2300      	movs	r3, #0
 8009090:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009094:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009098:	460b      	mov	r3, r1
 800909a:	4313      	orrs	r3, r2
 800909c:	d051      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800909e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090a8:	d035      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80090aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090ae:	d82e      	bhi.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80090b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090b4:	d031      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80090b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090ba:	d828      	bhi.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80090bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090c0:	d01a      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80090c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090c6:	d822      	bhi.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80090cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090d0:	d007      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80090d2:	e01c      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d4:	4b82      	ldr	r3, [pc, #520]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d8:	4a81      	ldr	r2, [pc, #516]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090e0:	e01c      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e6:	3308      	adds	r3, #8
 80090e8:	2100      	movs	r1, #0
 80090ea:	4618      	mov	r0, r3
 80090ec:	f002 f8a2 	bl	800b234 <RCCEx_PLL2_Config>
 80090f0:	4603      	mov	r3, r0
 80090f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090f6:	e011      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090fc:	3328      	adds	r3, #40	@ 0x28
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f002 f949 	bl	800b398 <RCCEx_PLL3_Config>
 8009106:	4603      	mov	r3, r0
 8009108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800910c:	e006      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009114:	e002      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8009116:	bf00      	nop
 8009118:	e000      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800911a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800911c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009124:	4b6e      	ldr	r3, [pc, #440]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009128:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800912c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009132:	4a6b      	ldr	r2, [pc, #428]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009134:	430b      	orrs	r3, r1
 8009136:	6513      	str	r3, [r2, #80]	@ 0x50
 8009138:	e003      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800913e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800914e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009152:	2300      	movs	r3, #0
 8009154:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009158:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800915c:	460b      	mov	r3, r1
 800915e:	4313      	orrs	r3, r2
 8009160:	d053      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009166:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800916c:	d033      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800916e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009172:	d82c      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009174:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009178:	d02f      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800917a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800917e:	d826      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009180:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009184:	d02b      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009186:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800918a:	d820      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800918c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009190:	d012      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009196:	d81a      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d022      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800919c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091a0:	d115      	bne.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091a6:	3308      	adds	r3, #8
 80091a8:	2101      	movs	r1, #1
 80091aa:	4618      	mov	r0, r3
 80091ac:	f002 f842 	bl	800b234 <RCCEx_PLL2_Config>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091b6:	e015      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091bc:	3328      	adds	r3, #40	@ 0x28
 80091be:	2101      	movs	r1, #1
 80091c0:	4618      	mov	r0, r3
 80091c2:	f002 f8e9 	bl	800b398 <RCCEx_PLL3_Config>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091cc:	e00a      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80091d4:	e006      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80091d6:	bf00      	nop
 80091d8:	e004      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80091da:	bf00      	nop
 80091dc:	e002      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80091de:	bf00      	nop
 80091e0:	e000      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80091e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10a      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091ec:	4b3c      	ldr	r3, [pc, #240]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80091f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091fa:	4a39      	ldr	r2, [pc, #228]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091fc:	430b      	orrs	r3, r1
 80091fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8009200:	e003      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009202:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009206:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800920a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009216:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800921a:	2300      	movs	r3, #0
 800921c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009220:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009224:	460b      	mov	r3, r1
 8009226:	4313      	orrs	r3, r2
 8009228:	d060      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800922a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800922e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009232:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009236:	d039      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8009238:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800923c:	d832      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800923e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009242:	d035      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009248:	d82c      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800924a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800924e:	d031      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009254:	d826      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009256:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800925a:	d02d      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800925c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009260:	d820      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009266:	d012      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800926c:	d81a      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d024      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009276:	d115      	bne.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800927c:	3308      	adds	r3, #8
 800927e:	2101      	movs	r1, #1
 8009280:	4618      	mov	r0, r3
 8009282:	f001 ffd7 	bl	800b234 <RCCEx_PLL2_Config>
 8009286:	4603      	mov	r3, r0
 8009288:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800928c:	e017      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800928e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009292:	3328      	adds	r3, #40	@ 0x28
 8009294:	2101      	movs	r1, #1
 8009296:	4618      	mov	r0, r3
 8009298:	f002 f87e 	bl	800b398 <RCCEx_PLL3_Config>
 800929c:	4603      	mov	r3, r0
 800929e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80092a2:	e00c      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092aa:	e008      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092ac:	bf00      	nop
 80092ae:	e006      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092b0:	bf00      	nop
 80092b2:	e004      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092b4:	bf00      	nop
 80092b6:	e002      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092b8:	bf00      	nop
 80092ba:	e000      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10e      	bne.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80092c6:	4b06      	ldr	r3, [pc, #24]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80092ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80092d6:	4a02      	ldr	r2, [pc, #8]	@ (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092d8:	430b      	orrs	r3, r1
 80092da:	6593      	str	r3, [r2, #88]	@ 0x58
 80092dc:	e006      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 80092de:	bf00      	nop
 80092e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80092f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092fc:	2300      	movs	r3, #0
 80092fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009306:	460b      	mov	r3, r1
 8009308:	4313      	orrs	r3, r2
 800930a:	d037      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800930c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009310:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009316:	d00e      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800931c:	d816      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800931e:	2b00      	cmp	r3, #0
 8009320:	d018      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009322:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009326:	d111      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009328:	4bc4      	ldr	r3, [pc, #784]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800932a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932c:	4ac3      	ldr	r2, [pc, #780]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800932e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009332:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009334:	e00f      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800933a:	3308      	adds	r3, #8
 800933c:	2101      	movs	r1, #1
 800933e:	4618      	mov	r0, r3
 8009340:	f001 ff78 	bl	800b234 <RCCEx_PLL2_Config>
 8009344:	4603      	mov	r3, r0
 8009346:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800934a:	e004      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009352:	e000      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009356:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800935e:	4bb7      	ldr	r3, [pc, #732]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009362:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800936a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800936c:	4ab3      	ldr	r2, [pc, #716]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800936e:	430b      	orrs	r3, r1
 8009370:	6513      	str	r3, [r2, #80]	@ 0x50
 8009372:	e003      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009374:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009378:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800937c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800938c:	2300      	movs	r3, #0
 800938e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009392:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009396:	460b      	mov	r3, r1
 8009398:	4313      	orrs	r3, r2
 800939a:	d039      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800939c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d81c      	bhi.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80093a6:	a201      	add	r2, pc, #4	@ (adr r2, 80093ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80093a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ac:	080093e9 	.word	0x080093e9
 80093b0:	080093bd 	.word	0x080093bd
 80093b4:	080093cb 	.word	0x080093cb
 80093b8:	080093e9 	.word	0x080093e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093bc:	4b9f      	ldr	r3, [pc, #636]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c0:	4a9e      	ldr	r2, [pc, #632]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093c8:	e00f      	b.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093ce:	3308      	adds	r3, #8
 80093d0:	2102      	movs	r1, #2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f001 ff2e 	bl	800b234 <RCCEx_PLL2_Config>
 80093d8:	4603      	mov	r3, r0
 80093da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093de:	e004      	b.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80093e6:	e000      	b.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80093e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093f2:	4b92      	ldr	r3, [pc, #584]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093f6:	f023 0103 	bic.w	r1, r3, #3
 80093fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009400:	4a8e      	ldr	r2, [pc, #568]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009402:	430b      	orrs	r3, r1
 8009404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009406:	e003      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009408:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800940c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800941c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009420:	2300      	movs	r3, #0
 8009422:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009426:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800942a:	460b      	mov	r3, r1
 800942c:	4313      	orrs	r3, r2
 800942e:	f000 8099 	beq.w	8009564 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009432:	4b83      	ldr	r3, [pc, #524]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a82      	ldr	r2, [pc, #520]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800943c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800943e:	f7f8 fe93 	bl	8002168 <HAL_GetTick>
 8009442:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009446:	e00b      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009448:	f7f8 fe8e 	bl	8002168 <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	2b64      	cmp	r3, #100	@ 0x64
 8009456:	d903      	bls.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800945e:	e005      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009460:	4b77      	ldr	r3, [pc, #476]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0ed      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800946c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009470:	2b00      	cmp	r3, #0
 8009472:	d173      	bne.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009474:	4b71      	ldr	r3, [pc, #452]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009476:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009480:	4053      	eors	r3, r2
 8009482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009486:	2b00      	cmp	r3, #0
 8009488:	d015      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800948a:	4b6c      	ldr	r3, [pc, #432]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800948c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800948e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009492:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009496:	4b69      	ldr	r3, [pc, #420]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800949a:	4a68      	ldr	r2, [pc, #416]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800949c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094a0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80094a2:	4b66      	ldr	r3, [pc, #408]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094a6:	4a65      	ldr	r2, [pc, #404]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094ac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80094ae:	4a63      	ldr	r2, [pc, #396]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80094b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094c2:	d118      	bne.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c4:	f7f8 fe50 	bl	8002168 <HAL_GetTick>
 80094c8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094cc:	e00d      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ce:	f7f8 fe4b 	bl	8002168 <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80094d8:	1ad2      	subs	r2, r2, r3
 80094da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80094de:	429a      	cmp	r2, r3
 80094e0:	d903      	bls.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80094e8:	e005      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094ea:	4b54      	ldr	r3, [pc, #336]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0eb      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80094f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d129      	bne.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800950a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800950e:	d10e      	bne.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009510:	4b4a      	ldr	r3, [pc, #296]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800951c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009520:	091a      	lsrs	r2, r3, #4
 8009522:	4b48      	ldr	r3, [pc, #288]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009524:	4013      	ands	r3, r2
 8009526:	4a45      	ldr	r2, [pc, #276]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009528:	430b      	orrs	r3, r1
 800952a:	6113      	str	r3, [r2, #16]
 800952c:	e005      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800952e:	4b43      	ldr	r3, [pc, #268]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	4a42      	ldr	r2, [pc, #264]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009534:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009538:	6113      	str	r3, [r2, #16]
 800953a:	4b40      	ldr	r3, [pc, #256]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800953c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800953e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009542:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800954a:	4a3c      	ldr	r2, [pc, #240]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800954c:	430b      	orrs	r3, r1
 800954e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009550:	e008      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009552:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009556:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800955a:	e003      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800955c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009560:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956c:	f002 0301 	and.w	r3, r2, #1
 8009570:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009574:	2300      	movs	r3, #0
 8009576:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800957a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800957e:	460b      	mov	r3, r1
 8009580:	4313      	orrs	r3, r2
 8009582:	f000 8090 	beq.w	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800958a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800958e:	2b28      	cmp	r3, #40	@ 0x28
 8009590:	d870      	bhi.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009592:	a201      	add	r2, pc, #4	@ (adr r2, 8009598 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009598:	0800967d 	.word	0x0800967d
 800959c:	08009675 	.word	0x08009675
 80095a0:	08009675 	.word	0x08009675
 80095a4:	08009675 	.word	0x08009675
 80095a8:	08009675 	.word	0x08009675
 80095ac:	08009675 	.word	0x08009675
 80095b0:	08009675 	.word	0x08009675
 80095b4:	08009675 	.word	0x08009675
 80095b8:	08009649 	.word	0x08009649
 80095bc:	08009675 	.word	0x08009675
 80095c0:	08009675 	.word	0x08009675
 80095c4:	08009675 	.word	0x08009675
 80095c8:	08009675 	.word	0x08009675
 80095cc:	08009675 	.word	0x08009675
 80095d0:	08009675 	.word	0x08009675
 80095d4:	08009675 	.word	0x08009675
 80095d8:	0800965f 	.word	0x0800965f
 80095dc:	08009675 	.word	0x08009675
 80095e0:	08009675 	.word	0x08009675
 80095e4:	08009675 	.word	0x08009675
 80095e8:	08009675 	.word	0x08009675
 80095ec:	08009675 	.word	0x08009675
 80095f0:	08009675 	.word	0x08009675
 80095f4:	08009675 	.word	0x08009675
 80095f8:	0800967d 	.word	0x0800967d
 80095fc:	08009675 	.word	0x08009675
 8009600:	08009675 	.word	0x08009675
 8009604:	08009675 	.word	0x08009675
 8009608:	08009675 	.word	0x08009675
 800960c:	08009675 	.word	0x08009675
 8009610:	08009675 	.word	0x08009675
 8009614:	08009675 	.word	0x08009675
 8009618:	0800967d 	.word	0x0800967d
 800961c:	08009675 	.word	0x08009675
 8009620:	08009675 	.word	0x08009675
 8009624:	08009675 	.word	0x08009675
 8009628:	08009675 	.word	0x08009675
 800962c:	08009675 	.word	0x08009675
 8009630:	08009675 	.word	0x08009675
 8009634:	08009675 	.word	0x08009675
 8009638:	0800967d 	.word	0x0800967d
 800963c:	58024400 	.word	0x58024400
 8009640:	58024800 	.word	0x58024800
 8009644:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800964c:	3308      	adds	r3, #8
 800964e:	2101      	movs	r1, #1
 8009650:	4618      	mov	r0, r3
 8009652:	f001 fdef 	bl	800b234 <RCCEx_PLL2_Config>
 8009656:	4603      	mov	r3, r0
 8009658:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800965c:	e00f      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800965e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009662:	3328      	adds	r3, #40	@ 0x28
 8009664:	2101      	movs	r1, #1
 8009666:	4618      	mov	r0, r3
 8009668:	f001 fe96 	bl	800b398 <RCCEx_PLL3_Config>
 800966c:	4603      	mov	r3, r0
 800966e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009672:	e004      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800967a:	e000      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800967c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800967e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009686:	4bc0      	ldr	r3, [pc, #768]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800968a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800968e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009696:	4abc      	ldr	r2, [pc, #752]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009698:	430b      	orrs	r3, r1
 800969a:	6553      	str	r3, [r2, #84]	@ 0x54
 800969c:	e003      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f002 0302 	and.w	r3, r2, #2
 80096b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096b6:	2300      	movs	r3, #0
 80096b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80096bc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80096c0:	460b      	mov	r3, r1
 80096c2:	4313      	orrs	r3, r2
 80096c4:	d043      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80096c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ce:	2b05      	cmp	r3, #5
 80096d0:	d824      	bhi.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80096d2:	a201      	add	r2, pc, #4	@ (adr r2, 80096d8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80096d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d8:	08009725 	.word	0x08009725
 80096dc:	080096f1 	.word	0x080096f1
 80096e0:	08009707 	.word	0x08009707
 80096e4:	08009725 	.word	0x08009725
 80096e8:	08009725 	.word	0x08009725
 80096ec:	08009725 	.word	0x08009725
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096f4:	3308      	adds	r3, #8
 80096f6:	2101      	movs	r1, #1
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 fd9b 	bl	800b234 <RCCEx_PLL2_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009704:	e00f      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800970a:	3328      	adds	r3, #40	@ 0x28
 800970c:	2101      	movs	r1, #1
 800970e:	4618      	mov	r0, r3
 8009710:	f001 fe42 	bl	800b398 <RCCEx_PLL3_Config>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800971a:	e004      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009722:	e000      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009726:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10b      	bne.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800972e:	4b96      	ldr	r3, [pc, #600]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009732:	f023 0107 	bic.w	r1, r3, #7
 8009736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800973e:	4a92      	ldr	r2, [pc, #584]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009740:	430b      	orrs	r3, r1
 8009742:	6553      	str	r3, [r2, #84]	@ 0x54
 8009744:	e003      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009746:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800974a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800974e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f002 0304 	and.w	r3, r2, #4
 800975a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800975e:	2300      	movs	r3, #0
 8009760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009764:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009768:	460b      	mov	r3, r1
 800976a:	4313      	orrs	r3, r2
 800976c:	d043      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800976e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009772:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009776:	2b05      	cmp	r3, #5
 8009778:	d824      	bhi.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800977a:	a201      	add	r2, pc, #4	@ (adr r2, 8009780 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	080097cd 	.word	0x080097cd
 8009784:	08009799 	.word	0x08009799
 8009788:	080097af 	.word	0x080097af
 800978c:	080097cd 	.word	0x080097cd
 8009790:	080097cd 	.word	0x080097cd
 8009794:	080097cd 	.word	0x080097cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800979c:	3308      	adds	r3, #8
 800979e:	2101      	movs	r1, #1
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 fd47 	bl	800b234 <RCCEx_PLL2_Config>
 80097a6:	4603      	mov	r3, r0
 80097a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80097ac:	e00f      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097b2:	3328      	adds	r3, #40	@ 0x28
 80097b4:	2101      	movs	r1, #1
 80097b6:	4618      	mov	r0, r3
 80097b8:	f001 fdee 	bl	800b398 <RCCEx_PLL3_Config>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80097c2:	e004      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097ca:	e000      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80097cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10b      	bne.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097d6:	4b6c      	ldr	r3, [pc, #432]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097da:	f023 0107 	bic.w	r1, r3, #7
 80097de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097e6:	4a68      	ldr	r2, [pc, #416]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097e8:	430b      	orrs	r3, r1
 80097ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80097ec:	e003      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f002 0320 	and.w	r3, r2, #32
 8009802:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009806:	2300      	movs	r3, #0
 8009808:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800980c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009810:	460b      	mov	r3, r1
 8009812:	4313      	orrs	r3, r2
 8009814:	d055      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800981a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800981e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009822:	d033      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009828:	d82c      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800982a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800982e:	d02f      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009834:	d826      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009836:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800983a:	d02b      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800983c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009840:	d820      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009846:	d012      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800984c:	d81a      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d022      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009856:	d115      	bne.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800985c:	3308      	adds	r3, #8
 800985e:	2100      	movs	r1, #0
 8009860:	4618      	mov	r0, r3
 8009862:	f001 fce7 	bl	800b234 <RCCEx_PLL2_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800986c:	e015      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800986e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009872:	3328      	adds	r3, #40	@ 0x28
 8009874:	2102      	movs	r1, #2
 8009876:	4618      	mov	r0, r3
 8009878:	f001 fd8e 	bl	800b398 <RCCEx_PLL3_Config>
 800987c:	4603      	mov	r3, r0
 800987e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009882:	e00a      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800988a:	e006      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800988c:	bf00      	nop
 800988e:	e004      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009890:	bf00      	nop
 8009892:	e002      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009894:	bf00      	nop
 8009896:	e000      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800989a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10b      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098a2:	4b39      	ldr	r3, [pc, #228]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80098aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098b2:	4a35      	ldr	r2, [pc, #212]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098b4:	430b      	orrs	r3, r1
 80098b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80098b8:	e003      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80098ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098d2:	2300      	movs	r3, #0
 80098d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80098dc:	460b      	mov	r3, r1
 80098de:	4313      	orrs	r3, r2
 80098e0:	d058      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80098e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098ee:	d033      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098f4:	d82c      	bhi.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80098f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098fa:	d02f      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80098fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009900:	d826      	bhi.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009902:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009906:	d02b      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009908:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800990c:	d820      	bhi.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800990e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009912:	d012      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009918:	d81a      	bhi.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d022      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800991e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009922:	d115      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009928:	3308      	adds	r3, #8
 800992a:	2100      	movs	r1, #0
 800992c:	4618      	mov	r0, r3
 800992e:	f001 fc81 	bl	800b234 <RCCEx_PLL2_Config>
 8009932:	4603      	mov	r3, r0
 8009934:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009938:	e015      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800993a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800993e:	3328      	adds	r3, #40	@ 0x28
 8009940:	2102      	movs	r1, #2
 8009942:	4618      	mov	r0, r3
 8009944:	f001 fd28 	bl	800b398 <RCCEx_PLL3_Config>
 8009948:	4603      	mov	r3, r0
 800994a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800994e:	e00a      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009956:	e006      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009958:	bf00      	nop
 800995a:	e004      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800995c:	bf00      	nop
 800995e:	e002      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009960:	bf00      	nop
 8009962:	e000      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009966:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10e      	bne.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800996e:	4b06      	ldr	r3, [pc, #24]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009972:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800997a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800997e:	4a02      	ldr	r2, [pc, #8]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009980:	430b      	orrs	r3, r1
 8009982:	6593      	str	r3, [r2, #88]	@ 0x58
 8009984:	e006      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009986:	bf00      	nop
 8009988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009990:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80099a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099a4:	2300      	movs	r3, #0
 80099a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80099aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80099ae:	460b      	mov	r3, r1
 80099b0:	4313      	orrs	r3, r2
 80099b2:	d055      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80099b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80099bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80099c0:	d033      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80099c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80099c6:	d82c      	bhi.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80099c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099cc:	d02f      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80099ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099d2:	d826      	bhi.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80099d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80099d8:	d02b      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80099da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80099de:	d820      	bhi.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80099e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099e4:	d012      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80099e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099ea:	d81a      	bhi.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d022      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80099f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099f4:	d115      	bne.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099fa:	3308      	adds	r3, #8
 80099fc:	2100      	movs	r1, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f001 fc18 	bl	800b234 <RCCEx_PLL2_Config>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009a0a:	e015      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a10:	3328      	adds	r3, #40	@ 0x28
 8009a12:	2102      	movs	r1, #2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f001 fcbf 	bl	800b398 <RCCEx_PLL3_Config>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009a20:	e00a      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009a28:	e006      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009a2a:	bf00      	nop
 8009a2c:	e004      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009a2e:	bf00      	nop
 8009a30:	e002      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009a32:	bf00      	nop
 8009a34:	e000      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10b      	bne.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a40:	4ba1      	ldr	r3, [pc, #644]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a44:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009a50:	4a9d      	ldr	r2, [pc, #628]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a52:	430b      	orrs	r3, r1
 8009a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a56:	e003      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	f002 0308 	and.w	r3, r2, #8
 8009a6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a70:	2300      	movs	r3, #0
 8009a72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	d01e      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a8c:	d10c      	bne.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a92:	3328      	adds	r3, #40	@ 0x28
 8009a94:	2102      	movs	r1, #2
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 fc7e 	bl	800b398 <RCCEx_PLL3_Config>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009aa8:	4b87      	ldr	r3, [pc, #540]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ab8:	4a83      	ldr	r2, [pc, #524]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009aba:	430b      	orrs	r3, r1
 8009abc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f002 0310 	and.w	r3, r2, #16
 8009aca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ad4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4313      	orrs	r3, r2
 8009adc:	d01e      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ae2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aea:	d10c      	bne.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af0:	3328      	adds	r3, #40	@ 0x28
 8009af2:	2102      	movs	r1, #2
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 fc4f 	bl	800b398 <RCCEx_PLL3_Config>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b06:	4b70      	ldr	r3, [pc, #448]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b16:	4a6c      	ldr	r2, [pc, #432]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009b18:	430b      	orrs	r3, r1
 8009b1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009b36:	460b      	mov	r3, r1
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	d03e      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009b44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b48:	d022      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8009b4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b4e:	d81b      	bhi.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8009b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b58:	d00b      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8009b5a:	e015      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b60:	3308      	adds	r3, #8
 8009b62:	2100      	movs	r1, #0
 8009b64:	4618      	mov	r0, r3
 8009b66:	f001 fb65 	bl	800b234 <RCCEx_PLL2_Config>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b70:	e00f      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b76:	3328      	adds	r3, #40	@ 0x28
 8009b78:	2102      	movs	r1, #2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 fc0c 	bl	800b398 <RCCEx_PLL3_Config>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b86:	e004      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b8e:	e000      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10b      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009baa:	4a47      	ldr	r2, [pc, #284]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009bac:	430b      	orrs	r3, r1
 8009bae:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bb0:	e003      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009bc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009bc8:	2300      	movs	r3, #0
 8009bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009bcc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	d03b      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009be2:	d01f      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8009be4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009be8:	d818      	bhi.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bee:	d003      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8009bf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bf4:	d007      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8009bf6:	e011      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bf8:	4b33      	ldr	r3, [pc, #204]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfc:	4a32      	ldr	r2, [pc, #200]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009c04:	e00f      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c0a:	3328      	adds	r3, #40	@ 0x28
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f001 fbc2 	bl	800b398 <RCCEx_PLL3_Config>
 8009c14:	4603      	mov	r3, r0
 8009c16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8009c1a:	e004      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009c22:	e000      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8009c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10b      	bne.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c2e:	4b26      	ldr	r3, [pc, #152]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c3e:	4a22      	ldr	r2, [pc, #136]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009c40:	430b      	orrs	r3, r1
 8009c42:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c44:	e003      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009c5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009c64:	460b      	mov	r3, r1
 8009c66:	4313      	orrs	r3, r2
 8009c68:	d034      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d003      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8009c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c78:	d007      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8009c7a:	e011      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c7c:	4b12      	ldr	r3, [pc, #72]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c80:	4a11      	ldr	r2, [pc, #68]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c88:	e00e      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c8e:	3308      	adds	r3, #8
 8009c90:	2102      	movs	r1, #2
 8009c92:	4618      	mov	r0, r3
 8009c94:	f001 face 	bl	800b234 <RCCEx_PLL2_Config>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c9e:	e003      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ca8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10d      	bne.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009cb0:	4b05      	ldr	r3, [pc, #20]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cb4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cbe:	4a02      	ldr	r2, [pc, #8]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009cc0:	430b      	orrs	r3, r1
 8009cc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009cc4:	e006      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8009cc6:	bf00      	nop
 8009cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cd0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ce6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009cea:	460b      	mov	r3, r1
 8009cec:	4313      	orrs	r3, r2
 8009cee:	d00c      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cf4:	3328      	adds	r3, #40	@ 0x28
 8009cf6:	2102      	movs	r1, #2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 fb4d 	bl	800b398 <RCCEx_PLL3_Config>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009d16:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d18:	2300      	movs	r3, #0
 8009d1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009d20:	460b      	mov	r3, r1
 8009d22:	4313      	orrs	r3, r2
 8009d24:	d038      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d32:	d018      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8009d34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d38:	d811      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d3e:	d014      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8009d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d44:	d80b      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d011      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8009d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d4e:	d106      	bne.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d50:	4bc3      	ldr	r3, [pc, #780]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d54:	4ac2      	ldr	r2, [pc, #776]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d5c:	e008      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009d64:	e004      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009d66:	bf00      	nop
 8009d68:	e002      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009d6a:	bf00      	nop
 8009d6c:	e000      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10b      	bne.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d78:	4bb9      	ldr	r3, [pc, #740]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d88:	4ab5      	ldr	r2, [pc, #724]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009d8a:	430b      	orrs	r3, r1
 8009d8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d8e:	e003      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009da4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009da6:	2300      	movs	r3, #0
 8009da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009daa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009dae:	460b      	mov	r3, r1
 8009db0:	4313      	orrs	r3, r2
 8009db2:	d009      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009db4:	4baa      	ldr	r3, [pc, #680]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009db8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009dc2:	4aa7      	ldr	r2, [pc, #668]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009dc4:	430b      	orrs	r3, r1
 8009dc6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009dd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009dde:	460b      	mov	r3, r1
 8009de0:	4313      	orrs	r3, r2
 8009de2:	d009      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009de4:	4b9e      	ldr	r3, [pc, #632]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009df2:	4a9b      	ldr	r2, [pc, #620]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009df4:	430b      	orrs	r3, r1
 8009df6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e06:	2300      	movs	r3, #0
 8009e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e0a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4313      	orrs	r3, r2
 8009e12:	d009      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009e14:	4b92      	ldr	r3, [pc, #584]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e18:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e22:	4a8f      	ldr	r2, [pc, #572]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009e24:	430b      	orrs	r3, r1
 8009e26:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009e34:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e36:	2300      	movs	r3, #0
 8009e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e3a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4313      	orrs	r3, r2
 8009e42:	d00e      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e44:	4b86      	ldr	r3, [pc, #536]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	4a85      	ldr	r2, [pc, #532]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009e4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009e4e:	6113      	str	r3, [r2, #16]
 8009e50:	4b83      	ldr	r3, [pc, #524]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009e52:	6919      	ldr	r1, [r3, #16]
 8009e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009e5c:	4a80      	ldr	r2, [pc, #512]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009e5e:	430b      	orrs	r3, r1
 8009e60:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e70:	2300      	movs	r3, #0
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e74:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	d009      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e7e:	4b78      	ldr	r3, [pc, #480]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e8c:	4a74      	ldr	r2, [pc, #464]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009e8e:	430b      	orrs	r3, r1
 8009e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	d00a      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009eae:	4b6c      	ldr	r3, [pc, #432]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eb2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ebe:	4a68      	ldr	r2, [pc, #416]	@ (800a060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009ec0:	430b      	orrs	r3, r1
 8009ec2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	2100      	movs	r1, #0
 8009ece:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ed6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009eda:	460b      	mov	r3, r1
 8009edc:	4313      	orrs	r3, r2
 8009ede:	d011      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f001 f9a3 	bl	800b234 <RCCEx_PLL2_Config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d003      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6239      	str	r1, [r7, #32]
 8009f10:	f003 0302 	and.w	r3, r3, #2
 8009f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	d011      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f24:	3308      	adds	r3, #8
 8009f26:	2101      	movs	r1, #1
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 f983 	bl	800b234 <RCCEx_PLL2_Config>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009f34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d003      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	61b9      	str	r1, [r7, #24]
 8009f50:	f003 0304 	and.w	r3, r3, #4
 8009f54:	61fb      	str	r3, [r7, #28]
 8009f56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	d011      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f64:	3308      	adds	r3, #8
 8009f66:	2102      	movs	r1, #2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f001 f963 	bl	800b234 <RCCEx_PLL2_Config>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009f74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	6139      	str	r1, [r7, #16]
 8009f90:	f003 0308 	and.w	r3, r3, #8
 8009f94:	617b      	str	r3, [r7, #20]
 8009f96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	d011      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fa4:	3328      	adds	r3, #40	@ 0x28
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f001 f9f5 	bl	800b398 <RCCEx_PLL3_Config>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009fc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	2100      	movs	r1, #0
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	d011      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fe4:	3328      	adds	r3, #40	@ 0x28
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 f9d5 	bl	800b398 <RCCEx_PLL3_Config>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009ff4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a000:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	2100      	movs	r1, #0
 800a00e:	6039      	str	r1, [r7, #0]
 800a010:	f003 0320 	and.w	r3, r3, #32
 800a014:	607b      	str	r3, [r7, #4]
 800a016:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a01a:	460b      	mov	r3, r1
 800a01c:	4313      	orrs	r3, r2
 800a01e:	d011      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a024:	3328      	adds	r3, #40	@ 0x28
 800a026:	2102      	movs	r1, #2
 800a028:	4618      	mov	r0, r3
 800a02a:	f001 f9b5 	bl	800b398 <RCCEx_PLL3_Config>
 800a02e:	4603      	mov	r3, r0
 800a030:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a034:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a03c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a040:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a044:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	e000      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
}
 800a052:	4618      	mov	r0, r3
 800a054:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a058:	46bd      	mov	sp, r7
 800a05a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a05e:	bf00      	nop
 800a060:	58024400 	.word	0x58024400

0800a064 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b090      	sub	sp, #64	@ 0x40
 800a068:	af00      	add	r7, sp, #0
 800a06a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a06e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a072:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a076:	430b      	orrs	r3, r1
 800a078:	f040 8094 	bne.w	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a07c:	4b97      	ldr	r3, [pc, #604]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a07e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a080:	f003 0307 	and.w	r3, r3, #7
 800a084:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a088:	2b04      	cmp	r3, #4
 800a08a:	f200 8087 	bhi.w	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a08e:	a201      	add	r2, pc, #4	@ (adr r2, 800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a094:	0800a0a9 	.word	0x0800a0a9
 800a098:	0800a0d1 	.word	0x0800a0d1
 800a09c:	0800a0f9 	.word	0x0800a0f9
 800a0a0:	0800a195 	.word	0x0800a195
 800a0a4:	0800a121 	.word	0x0800a121
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0a8:	4b8c      	ldr	r3, [pc, #560]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0b4:	d108      	bne.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 ff68 	bl	800af90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c4:	f000 bc97 	b.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0cc:	f000 bc93 	b.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0d0:	4b82      	ldr	r3, [pc, #520]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0dc:	d108      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0de:	f107 0318 	add.w	r3, r7, #24
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 fcac 	bl	800aa40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ec:	f000 bc83 	b.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f4:	f000 bc7f 	b.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0f8:	4b78      	ldr	r3, [pc, #480]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a104:	d108      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a106:	f107 030c 	add.w	r3, r7, #12
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 fdec 	bl	800ace8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a114:	f000 bc6f 	b.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a11c:	f000 bc6b 	b.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a120:	4b6e      	ldr	r3, [pc, #440]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a124:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a128:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a12a:	4b6c      	ldr	r3, [pc, #432]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	2b04      	cmp	r3, #4
 800a134:	d10c      	bne.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d109      	bne.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a13c:	4b67      	ldr	r3, [pc, #412]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	08db      	lsrs	r3, r3, #3
 800a142:	f003 0303 	and.w	r3, r3, #3
 800a146:	4a66      	ldr	r2, [pc, #408]	@ (800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a148:	fa22 f303 	lsr.w	r3, r2, r3
 800a14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a14e:	e01f      	b.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a150:	4b62      	ldr	r3, [pc, #392]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a15c:	d106      	bne.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a160:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a164:	d102      	bne.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a166:	4b5f      	ldr	r3, [pc, #380]	@ (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a168:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a16a:	e011      	b.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a16c:	4b5b      	ldr	r3, [pc, #364]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a174:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a178:	d106      	bne.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a17a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a180:	d102      	bne.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a182:	4b59      	ldr	r3, [pc, #356]	@ (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a186:	e003      	b.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a18c:	f000 bc33 	b.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a190:	f000 bc31 	b.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a194:	4b55      	ldr	r3, [pc, #340]	@ (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a198:	f000 bc2d 	b.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a0:	f000 bc29 	b.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800a1a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1a8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	f040 809f 	bne.w	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800a1b2:	4b4a      	ldr	r3, [pc, #296]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a1ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1c2:	d04d      	beq.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1ca:	f200 8084 	bhi.w	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d0:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1d2:	d07d      	beq.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1d8:	d87d      	bhi.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	2b80      	cmp	r3, #128	@ 0x80
 800a1de:	d02d      	beq.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	2b80      	cmp	r3, #128	@ 0x80
 800a1e4:	d877      	bhi.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ee:	2b40      	cmp	r3, #64	@ 0x40
 800a1f0:	d012      	beq.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a1f2:	e070      	b.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1f4:	4b39      	ldr	r3, [pc, #228]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a200:	d107      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fec2 	bl	800af90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a210:	e3f1      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a216:	e3ee      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a218:	4b30      	ldr	r3, [pc, #192]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a220:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a224:	d107      	bne.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a226:	f107 0318 	add.w	r3, r7, #24
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 fc08 	bl	800aa40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a234:	e3df      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a23a:	e3dc      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a23c:	4b27      	ldr	r3, [pc, #156]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a248:	d107      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a24a:	f107 030c 	add.w	r3, r7, #12
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 fd4a 	bl	800ace8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a258:	e3cd      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a25e:	e3ca      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a260:	4b1e      	ldr	r3, [pc, #120]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a264:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a268:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a26a:	4b1c      	ldr	r3, [pc, #112]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0304 	and.w	r3, r3, #4
 800a272:	2b04      	cmp	r3, #4
 800a274:	d10c      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800a276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d109      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a27c:	4b17      	ldr	r3, [pc, #92]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	08db      	lsrs	r3, r3, #3
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	4a16      	ldr	r2, [pc, #88]	@ (800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a288:	fa22 f303 	lsr.w	r3, r2, r3
 800a28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a28e:	e01e      	b.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a290:	4b12      	ldr	r3, [pc, #72]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a29c:	d106      	bne.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800a29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2a4:	d102      	bne.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2aa:	e010      	b.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2b8:	d106      	bne.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2c0:	d102      	bne.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2c2:	4b09      	ldr	r3, [pc, #36]	@ (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2c6:	e002      	b.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a2cc:	e393      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a2ce:	e392      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2d0:	4b06      	ldr	r3, [pc, #24]	@ (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d4:	e38f      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2da:	e38c      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a2dc:	58024400 	.word	0x58024400
 800a2e0:	03d09000 	.word	0x03d09000
 800a2e4:	003d0900 	.word	0x003d0900
 800a2e8:	007a1200 	.word	0x007a1200
 800a2ec:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800a2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	f040 809c 	bne.w	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800a2fe:	4b9e      	ldr	r3, [pc, #632]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a302:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a306:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a30e:	d054      	beq.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800a310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a312:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a316:	f200 808b 	bhi.w	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a320:	f000 8083 	beq.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800a324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a326:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a32a:	f200 8081 	bhi.w	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a334:	d02f      	beq.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800a336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a33c:	d878      	bhi.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	2b00      	cmp	r3, #0
 800a342:	d004      	beq.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800a344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a34a:	d012      	beq.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800a34c:	e070      	b.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a34e:	4b8a      	ldr	r3, [pc, #552]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a356:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a35a:	d107      	bne.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a35c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a360:	4618      	mov	r0, r3
 800a362:	f000 fe15 	bl	800af90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a36a:	e344      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a370:	e341      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a372:	4b81      	ldr	r3, [pc, #516]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a37a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a37e:	d107      	bne.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a380:	f107 0318 	add.w	r3, r7, #24
 800a384:	4618      	mov	r0, r3
 800a386:	f000 fb5b 	bl	800aa40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38e:	e332      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a394:	e32f      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a396:	4b78      	ldr	r3, [pc, #480]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a39e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a2:	d107      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3a4:	f107 030c 	add.w	r3, r7, #12
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fc9d 	bl	800ace8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3b2:	e320      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3b8:	e31d      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3ba:	4b6f      	ldr	r3, [pc, #444]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a3bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3c4:	4b6c      	ldr	r3, [pc, #432]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	2b04      	cmp	r3, #4
 800a3ce:	d10c      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800a3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d109      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3d6:	4b68      	ldr	r3, [pc, #416]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	08db      	lsrs	r3, r3, #3
 800a3dc:	f003 0303 	and.w	r3, r3, #3
 800a3e0:	4a66      	ldr	r2, [pc, #408]	@ (800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800a3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3e8:	e01e      	b.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3ea:	4b63      	ldr	r3, [pc, #396]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3f6:	d106      	bne.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3fe:	d102      	bne.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a400:	4b5f      	ldr	r3, [pc, #380]	@ (800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800a402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a404:	e010      	b.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a406:	4b5c      	ldr	r3, [pc, #368]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a40e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a412:	d106      	bne.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a41a:	d102      	bne.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a41c:	4b59      	ldr	r3, [pc, #356]	@ (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a420:	e002      	b.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800a426:	e2e6      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a428:	e2e5      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a42a:	4b57      	ldr	r3, [pc, #348]	@ (800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a42e:	e2e2      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800a430:	2300      	movs	r3, #0
 800a432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a434:	e2df      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a43a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a43e:	430b      	orrs	r3, r1
 800a440:	f040 80a7 	bne.w	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a444:	4b4c      	ldr	r3, [pc, #304]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a448:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a44c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a450:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a454:	d055      	beq.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800a456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a45c:	f200 8096 	bhi.w	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800a460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a462:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a466:	f000 8084 	beq.w	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800a46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a470:	f200 808c 	bhi.w	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800a474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a476:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a47a:	d030      	beq.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800a47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a482:	f200 8083 	bhi.w	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800a486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d004      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a492:	d012      	beq.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800a494:	e07a      	b.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a496:	4b38      	ldr	r3, [pc, #224]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a49e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4a2:	d107      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 fd71 	bl	800af90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4b2:	e2a0      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b8:	e29d      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4ba:	4b2f      	ldr	r3, [pc, #188]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4c6:	d107      	bne.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4c8:	f107 0318 	add.w	r3, r7, #24
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 fab7 	bl	800aa40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d6:	e28e      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4dc:	e28b      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4de:	4b26      	ldr	r3, [pc, #152]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4ea:	d107      	bne.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4ec:	f107 030c 	add.w	r3, r7, #12
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 fbf9 	bl	800ace8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4fa:	e27c      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a500:	e279      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a502:	4b1d      	ldr	r3, [pc, #116]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a506:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a50a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a50c:	4b1a      	ldr	r3, [pc, #104]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	2b04      	cmp	r3, #4
 800a516:	d10c      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800a518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d109      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a51e:	4b16      	ldr	r3, [pc, #88]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	08db      	lsrs	r3, r3, #3
 800a524:	f003 0303 	and.w	r3, r3, #3
 800a528:	4a14      	ldr	r2, [pc, #80]	@ (800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800a52a:	fa22 f303 	lsr.w	r3, r2, r3
 800a52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a530:	e01e      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a532:	4b11      	ldr	r3, [pc, #68]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a53a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a53e:	d106      	bne.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a546:	d102      	bne.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a548:	4b0d      	ldr	r3, [pc, #52]	@ (800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800a54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a54c:	e010      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a54e:	4b0a      	ldr	r3, [pc, #40]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a556:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a55a:	d106      	bne.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a562:	d102      	bne.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a564:	4b07      	ldr	r3, [pc, #28]	@ (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a568:	e002      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a56e:	e242      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a570:	e241      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a572:	4b05      	ldr	r3, [pc, #20]	@ (800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a576:	e23e      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a578:	58024400 	.word	0x58024400
 800a57c:	03d09000 	.word	0x03d09000
 800a580:	003d0900 	.word	0x003d0900
 800a584:	007a1200 	.word	0x007a1200
 800a588:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a58c:	2300      	movs	r3, #0
 800a58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a590:	e231      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a592:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a596:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a59a:	430b      	orrs	r3, r1
 800a59c:	f040 8085 	bne.w	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a5a0:	4b9c      	ldr	r3, [pc, #624]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a5a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5a4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a5a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a5b0:	d06b      	beq.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a5b8:	d874      	bhi.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5c0:	d056      	beq.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5c8:	d86c      	bhi.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5d0:	d03b      	beq.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800a5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5d8:	d864      	bhi.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800a5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e0:	d021      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e8:	d85c      	bhi.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d004      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5f6:	d004      	beq.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800a5f8:	e054      	b.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a5fa:	f7fe fb5f 	bl	8008cbc <HAL_RCC_GetPCLK1Freq>
 800a5fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a600:	e1f9      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a602:	4b84      	ldr	r3, [pc, #528]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a60a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a60e:	d107      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a610:	f107 0318 	add.w	r3, r7, #24
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fa13 	bl	800aa40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61e:	e1ea      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a624:	e1e7      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a626:	4b7b      	ldr	r3, [pc, #492]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a62e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a632:	d107      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a634:	f107 030c 	add.w	r3, r7, #12
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fb55 	bl	800ace8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a642:	e1d8      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a648:	e1d5      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a64a:	4b72      	ldr	r3, [pc, #456]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b04      	cmp	r3, #4
 800a654:	d109      	bne.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a656:	4b6f      	ldr	r3, [pc, #444]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	08db      	lsrs	r3, r3, #3
 800a65c:	f003 0303 	and.w	r3, r3, #3
 800a660:	4a6d      	ldr	r2, [pc, #436]	@ (800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a662:	fa22 f303 	lsr.w	r3, r2, r3
 800a666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a668:	e1c5      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66e:	e1c2      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a670:	4b68      	ldr	r3, [pc, #416]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a67c:	d102      	bne.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800a67e:	4b67      	ldr	r3, [pc, #412]	@ (800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a682:	e1b8      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a684:	2300      	movs	r3, #0
 800a686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a688:	e1b5      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a68a:	4b62      	ldr	r3, [pc, #392]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a696:	d102      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800a698:	4b61      	ldr	r3, [pc, #388]	@ (800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800a69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a69c:	e1ab      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a2:	e1a8      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a8:	e1a5      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a6aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ae:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a6b2:	430b      	orrs	r3, r1
 800a6b4:	d173      	bne.n	800a79e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a6b6:	4b57      	ldr	r3, [pc, #348]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a6b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a6be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6c6:	d02f      	beq.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6ce:	d863      	bhi.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d004      	beq.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6dc:	d012      	beq.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800a6de:	e05b      	b.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6e0:	4b4c      	ldr	r3, [pc, #304]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6ec:	d107      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ee:	f107 0318 	add.w	r3, r7, #24
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 f9a4 	bl	800aa40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6fc:	e17b      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a702:	e178      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a704:	4b43      	ldr	r3, [pc, #268]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a70c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a710:	d107      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a712:	f107 030c 	add.w	r3, r7, #12
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fae6 	bl	800ace8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a720:	e169      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a726:	e166      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a728:	4b3a      	ldr	r3, [pc, #232]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a72a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a72c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a730:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a732:	4b38      	ldr	r3, [pc, #224]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0304 	and.w	r3, r3, #4
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d10c      	bne.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800a73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a740:	2b00      	cmp	r3, #0
 800a742:	d109      	bne.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a744:	4b33      	ldr	r3, [pc, #204]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	08db      	lsrs	r3, r3, #3
 800a74a:	f003 0303 	and.w	r3, r3, #3
 800a74e:	4a32      	ldr	r2, [pc, #200]	@ (800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a750:	fa22 f303 	lsr.w	r3, r2, r3
 800a754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a756:	e01e      	b.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a758:	4b2e      	ldr	r3, [pc, #184]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a764:	d106      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800a766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a76c:	d102      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a76e:	4b2b      	ldr	r3, [pc, #172]	@ (800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a772:	e010      	b.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a774:	4b27      	ldr	r3, [pc, #156]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a77c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a780:	d106      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a788:	d102      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a78a:	4b25      	ldr	r3, [pc, #148]	@ (800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800a78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a78e:	e002      	b.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a794:	e12f      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a796:	e12e      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800a798:	2300      	movs	r3, #0
 800a79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a79c:	e12b      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a79e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a7a6:	430b      	orrs	r3, r1
 800a7a8:	d13c      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a7aa:	4b1a      	ldr	r3, [pc, #104]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a7ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d004      	beq.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7c0:	d012      	beq.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800a7c2:	e023      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7c4:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7d0:	d107      	bne.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 fbda 	bl	800af90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e0:	e109      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e6:	e106      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7f4:	d107      	bne.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7f6:	f107 0318 	add.w	r3, r7, #24
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 f920 	bl	800aa40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a804:	e0f7      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80a:	e0f4      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a810:	e0f1      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a812:	bf00      	nop
 800a814:	58024400 	.word	0x58024400
 800a818:	03d09000 	.word	0x03d09000
 800a81c:	003d0900 	.word	0x003d0900
 800a820:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a824:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a828:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a82c:	430b      	orrs	r3, r1
 800a82e:	f040 8091 	bne.w	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a832:	4b73      	ldr	r3, [pc, #460]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a836:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a83a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a842:	f000 8081 	beq.w	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a848:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a84c:	d87f      	bhi.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800a84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a854:	d06b      	beq.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a85c:	d877      	bhi.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800a85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a864:	d056      	beq.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a86c:	d86f      	bhi.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800a86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a870:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a874:	d03b      	beq.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a878:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a87c:	d867      	bhi.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800a87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a884:	d021      	beq.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a88c:	d85f      	bhi.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800a88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a890:	2b00      	cmp	r3, #0
 800a892:	d004      	beq.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a89a:	d004      	beq.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a89c:	e057      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a89e:	f000 f8b9 	bl	800aa14 <HAL_RCCEx_GetD3PCLK1Freq>
 800a8a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8a4:	e0a7      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8a6:	4b56      	ldr	r3, [pc, #344]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8b2:	d107      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b4:	f107 0318 	add.w	r3, r7, #24
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 f8c1 	bl	800aa40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c2:	e098      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c8:	e095      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8ca:	4b4d      	ldr	r3, [pc, #308]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8d6:	d107      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8d8:	f107 030c 	add.w	r3, r7, #12
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fa03 	bl	800ace8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e6:	e086      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ec:	e083      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8ee:	4b44      	ldr	r3, [pc, #272]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0304 	and.w	r3, r3, #4
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	d109      	bne.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8fa:	4b41      	ldr	r3, [pc, #260]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	08db      	lsrs	r3, r3, #3
 800a900:	f003 0303 	and.w	r3, r3, #3
 800a904:	4a3f      	ldr	r2, [pc, #252]	@ (800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a906:	fa22 f303 	lsr.w	r3, r2, r3
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a90c:	e073      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a912:	e070      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a914:	4b3a      	ldr	r3, [pc, #232]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a91c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a920:	d102      	bne.n	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800a922:	4b39      	ldr	r3, [pc, #228]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800a924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a926:	e066      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a92c:	e063      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a92e:	4b34      	ldr	r3, [pc, #208]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a93a:	d102      	bne.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800a93c:	4b33      	ldr	r3, [pc, #204]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a940:	e059      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a946:	e056      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a948:	4b31      	ldr	r3, [pc, #196]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800a94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a94c:	e053      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a952:	e050      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a954:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a958:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a95c:	430b      	orrs	r3, r1
 800a95e:	d148      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a960:	4b27      	ldr	r3, [pc, #156]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a964:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a968:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a970:	d02a      	beq.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800a972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a978:	d838      	bhi.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d004      	beq.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800a980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a986:	d00d      	beq.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800a988:	e030      	b.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a98a:	4b1d      	ldr	r3, [pc, #116]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a996:	d102      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800a998:	4b1c      	ldr	r3, [pc, #112]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800a99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a99c:	e02b      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a2:	e028      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9a4:	4b16      	ldr	r3, [pc, #88]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9b0:	d107      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 faea 	bl	800af90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c0:	e019      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c6:	e016      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9c8:	4b0d      	ldr	r3, [pc, #52]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9d4:	d107      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9d6:	f107 0318 	add.w	r3, r7, #24
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f830 	bl	800aa40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e4:	e007      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ea:	e004      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f0:	e001      	b.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a9f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3740      	adds	r7, #64	@ 0x40
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	58024400 	.word	0x58024400
 800aa04:	03d09000 	.word	0x03d09000
 800aa08:	003d0900 	.word	0x003d0900
 800aa0c:	007a1200 	.word	0x007a1200
 800aa10:	00bb8000 	.word	0x00bb8000

0800aa14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800aa18:	f7fe f920 	bl	8008c5c <HAL_RCC_GetHCLKFreq>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	4b06      	ldr	r3, [pc, #24]	@ (800aa38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	091b      	lsrs	r3, r3, #4
 800aa24:	f003 0307 	and.w	r3, r3, #7
 800aa28:	4904      	ldr	r1, [pc, #16]	@ (800aa3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa2a:	5ccb      	ldrb	r3, [r1, r3]
 800aa2c:	f003 031f 	and.w	r3, r3, #31
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	58024400 	.word	0x58024400
 800aa3c:	08010a1c 	.word	0x08010a1c

0800aa40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b089      	sub	sp, #36	@ 0x24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa48:	4ba1      	ldr	r3, [pc, #644]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa4c:	f003 0303 	and.w	r3, r3, #3
 800aa50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aa52:	4b9f      	ldr	r3, [pc, #636]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa56:	0b1b      	lsrs	r3, r3, #12
 800aa58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa5e:	4b9c      	ldr	r3, [pc, #624]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa62:	091b      	lsrs	r3, r3, #4
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa6a:	4b99      	ldr	r3, [pc, #612]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa6e:	08db      	lsrs	r3, r3, #3
 800aa70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	fb02 f303 	mul.w	r3, r2, r3
 800aa7a:	ee07 3a90 	vmov	s15, r3
 800aa7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 8111 	beq.w	800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	f000 8083 	beq.w	800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	f200 80a1 	bhi.w	800abe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d003      	beq.n	800aaac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d056      	beq.n	800ab58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aaaa:	e099      	b.n	800abe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaac:	4b88      	ldr	r3, [pc, #544]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0320 	and.w	r3, r3, #32
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d02d      	beq.n	800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aab8:	4b85      	ldr	r3, [pc, #532]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	08db      	lsrs	r3, r3, #3
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	4a84      	ldr	r2, [pc, #528]	@ (800acd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aac4:	fa22 f303 	lsr.w	r3, r2, r3
 800aac8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	ee07 3a90 	vmov	s15, r3
 800aad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae2:	4b7b      	ldr	r3, [pc, #492]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800acd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab12:	e087      	b.n	800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab26:	4b6a      	ldr	r3, [pc, #424]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab2e:	ee07 3a90 	vmov	s15, r3
 800ab32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800acd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab56:	e065      	b.n	800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ace0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab6a:	4b59      	ldr	r3, [pc, #356]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800acd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab9a:	e043      	b.n	800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	ee07 3a90 	vmov	s15, r3
 800aba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800abaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abae:	4b48      	ldr	r3, [pc, #288]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800abc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800acd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abde:	e021      	b.n	800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ace0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf2:	4b37      	ldr	r3, [pc, #220]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800acd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ac24:	4b2a      	ldr	r3, [pc, #168]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac28:	0a5b      	lsrs	r3, r3, #9
 800ac2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac2e:	ee07 3a90 	vmov	s15, r3
 800ac32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac4a:	ee17 2a90 	vmov	r2, s15
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ac52:	4b1f      	ldr	r3, [pc, #124]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac56:	0c1b      	lsrs	r3, r3, #16
 800ac58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac5c:	ee07 3a90 	vmov	s15, r3
 800ac60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac78:	ee17 2a90 	vmov	r2, s15
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac80:	4b13      	ldr	r3, [pc, #76]	@ (800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac84:	0e1b      	lsrs	r3, r3, #24
 800ac86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac8a:	ee07 3a90 	vmov	s15, r3
 800ac8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aca6:	ee17 2a90 	vmov	r2, s15
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800acae:	e008      	b.n	800acc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	609a      	str	r2, [r3, #8]
}
 800acc2:	bf00      	nop
 800acc4:	3724      	adds	r7, #36	@ 0x24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	58024400 	.word	0x58024400
 800acd4:	03d09000 	.word	0x03d09000
 800acd8:	46000000 	.word	0x46000000
 800acdc:	4c742400 	.word	0x4c742400
 800ace0:	4a742400 	.word	0x4a742400
 800ace4:	4af42400 	.word	0x4af42400

0800ace8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ace8:	b480      	push	{r7}
 800acea:	b089      	sub	sp, #36	@ 0x24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acf0:	4ba1      	ldr	r3, [pc, #644]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf4:	f003 0303 	and.w	r3, r3, #3
 800acf8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800acfa:	4b9f      	ldr	r3, [pc, #636]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acfe:	0d1b      	lsrs	r3, r3, #20
 800ad00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ad06:	4b9c      	ldr	r3, [pc, #624]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0a:	0a1b      	lsrs	r3, r3, #8
 800ad0c:	f003 0301 	and.w	r3, r3, #1
 800ad10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ad12:	4b99      	ldr	r3, [pc, #612]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad16:	08db      	lsrs	r3, r3, #3
 800ad18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	fb02 f303 	mul.w	r3, r2, r3
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 8111 	beq.w	800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	f000 8083 	beq.w	800ae44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	f200 80a1 	bhi.w	800ae88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d056      	beq.n	800ae00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad52:	e099      	b.n	800ae88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad54:	4b88      	ldr	r3, [pc, #544]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d02d      	beq.n	800adbc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad60:	4b85      	ldr	r3, [pc, #532]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	08db      	lsrs	r3, r3, #3
 800ad66:	f003 0303 	and.w	r3, r3, #3
 800ad6a:	4a84      	ldr	r2, [pc, #528]	@ (800af7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	ee07 3a90 	vmov	s15, r3
 800ad78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8a:	4b7b      	ldr	r3, [pc, #492]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ada2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800adba:	e087      	b.n	800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800adca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adce:	4b6a      	ldr	r3, [pc, #424]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add6:	ee07 3a90 	vmov	s15, r3
 800adda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adde:	ed97 6a03 	vldr	s12, [r7, #12]
 800ade2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ade6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adfe:	e065      	b.n	800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae12:	4b59      	ldr	r3, [pc, #356]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae42:	e043      	b.n	800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	ee07 3a90 	vmov	s15, r3
 800ae4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae56:	4b48      	ldr	r3, [pc, #288]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5e:	ee07 3a90 	vmov	s15, r3
 800ae62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae86:	e021      	b.n	800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae9a:	4b37      	ldr	r3, [pc, #220]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea2:	ee07 3a90 	vmov	s15, r3
 800aea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aecc:	4b2a      	ldr	r3, [pc, #168]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed0:	0a5b      	lsrs	r3, r3, #9
 800aed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aee6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aef2:	ee17 2a90 	vmov	r2, s15
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aefa:	4b1f      	ldr	r3, [pc, #124]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aefc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefe:	0c1b      	lsrs	r3, r3, #16
 800af00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af04:	ee07 3a90 	vmov	s15, r3
 800af08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af14:	edd7 6a07 	vldr	s13, [r7, #28]
 800af18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af20:	ee17 2a90 	vmov	r2, s15
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800af28:	4b13      	ldr	r3, [pc, #76]	@ (800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af2c:	0e1b      	lsrs	r3, r3, #24
 800af2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af42:	edd7 6a07 	vldr	s13, [r7, #28]
 800af46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af4e:	ee17 2a90 	vmov	r2, s15
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af56:	e008      	b.n	800af6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	609a      	str	r2, [r3, #8]
}
 800af6a:	bf00      	nop
 800af6c:	3724      	adds	r7, #36	@ 0x24
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	58024400 	.word	0x58024400
 800af7c:	03d09000 	.word	0x03d09000
 800af80:	46000000 	.word	0x46000000
 800af84:	4c742400 	.word	0x4c742400
 800af88:	4a742400 	.word	0x4a742400
 800af8c:	4af42400 	.word	0x4af42400

0800af90 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af90:	b480      	push	{r7}
 800af92:	b089      	sub	sp, #36	@ 0x24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af98:	4ba0      	ldr	r3, [pc, #640]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af9c:	f003 0303 	and.w	r3, r3, #3
 800afa0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800afa2:	4b9e      	ldr	r3, [pc, #632]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa6:	091b      	lsrs	r3, r3, #4
 800afa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800afae:	4b9b      	ldr	r3, [pc, #620]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800afb8:	4b98      	ldr	r3, [pc, #608]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afbc:	08db      	lsrs	r3, r3, #3
 800afbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	fb02 f303 	mul.w	r3, r2, r3
 800afc8:	ee07 3a90 	vmov	s15, r3
 800afcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f000 8111 	beq.w	800b1fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	f000 8083 	beq.w	800b0ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	f200 80a1 	bhi.w	800b12e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d056      	beq.n	800b0a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aff8:	e099      	b.n	800b12e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800affa:	4b88      	ldr	r3, [pc, #544]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b00      	cmp	r3, #0
 800b004:	d02d      	beq.n	800b062 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b006:	4b85      	ldr	r3, [pc, #532]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	08db      	lsrs	r3, r3, #3
 800b00c:	f003 0303 	and.w	r3, r3, #3
 800b010:	4a83      	ldr	r2, [pc, #524]	@ (800b220 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b012:	fa22 f303 	lsr.w	r3, r2, r3
 800b016:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	ee07 3a90 	vmov	s15, r3
 800b01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	ee07 3a90 	vmov	s15, r3
 800b028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b030:	4b7a      	ldr	r3, [pc, #488]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b038:	ee07 3a90 	vmov	s15, r3
 800b03c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b040:	ed97 6a03 	vldr	s12, [r7, #12]
 800b044:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b224 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b050:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b060:	e087      	b.n	800b172 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	ee07 3a90 	vmov	s15, r3
 800b068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b074:	4b69      	ldr	r3, [pc, #420]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07c:	ee07 3a90 	vmov	s15, r3
 800b080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b084:	ed97 6a03 	vldr	s12, [r7, #12]
 800b088:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b224 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b08c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b094:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0a4:	e065      	b.n	800b172 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	ee07 3a90 	vmov	s15, r3
 800b0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b22c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b0b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0b8:	4b58      	ldr	r3, [pc, #352]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c0:	ee07 3a90 	vmov	s15, r3
 800b0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0cc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b224 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0e8:	e043      	b.n	800b172 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	ee07 3a90 	vmov	s15, r3
 800b0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b230 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b0f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fc:	4b47      	ldr	r3, [pc, #284]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b104:	ee07 3a90 	vmov	s15, r3
 800b108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b110:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b224 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b124:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b128:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b12c:	e021      	b.n	800b172 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	ee07 3a90 	vmov	s15, r3
 800b134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b138:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b13c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b140:	4b36      	ldr	r3, [pc, #216]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b148:	ee07 3a90 	vmov	s15, r3
 800b14c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b150:	ed97 6a03 	vldr	s12, [r7, #12]
 800b154:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b224 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b15c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b160:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b170:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b172:	4b2a      	ldr	r3, [pc, #168]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b176:	0a5b      	lsrs	r3, r3, #9
 800b178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b17c:	ee07 3a90 	vmov	s15, r3
 800b180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b184:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b188:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b18c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b198:	ee17 2a90 	vmov	r2, s15
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b1a0:	4b1e      	ldr	r3, [pc, #120]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a4:	0c1b      	lsrs	r3, r3, #16
 800b1a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c6:	ee17 2a90 	vmov	r2, s15
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b1ce:	4b13      	ldr	r3, [pc, #76]	@ (800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d2:	0e1b      	lsrs	r3, r3, #24
 800b1d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1d8:	ee07 3a90 	vmov	s15, r3
 800b1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1f4:	ee17 2a90 	vmov	r2, s15
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b1fc:	e008      	b.n	800b210 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	609a      	str	r2, [r3, #8]
}
 800b210:	bf00      	nop
 800b212:	3724      	adds	r7, #36	@ 0x24
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	58024400 	.word	0x58024400
 800b220:	03d09000 	.word	0x03d09000
 800b224:	46000000 	.word	0x46000000
 800b228:	4c742400 	.word	0x4c742400
 800b22c:	4a742400 	.word	0x4a742400
 800b230:	4af42400 	.word	0x4af42400

0800b234 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b242:	4b53      	ldr	r3, [pc, #332]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b246:	f003 0303 	and.w	r3, r3, #3
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d101      	bne.n	800b252 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e099      	b.n	800b386 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b252:	4b4f      	ldr	r3, [pc, #316]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a4e      	ldr	r2, [pc, #312]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b258:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b25c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b25e:	f7f6 ff83 	bl	8002168 <HAL_GetTick>
 800b262:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b264:	e008      	b.n	800b278 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b266:	f7f6 ff7f 	bl	8002168 <HAL_GetTick>
 800b26a:	4602      	mov	r2, r0
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	2b02      	cmp	r3, #2
 800b272:	d901      	bls.n	800b278 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b274:	2303      	movs	r3, #3
 800b276:	e086      	b.n	800b386 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b278:	4b45      	ldr	r3, [pc, #276]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1f0      	bne.n	800b266 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b284:	4b42      	ldr	r3, [pc, #264]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b288:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	031b      	lsls	r3, r3, #12
 800b292:	493f      	ldr	r1, [pc, #252]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b294:	4313      	orrs	r3, r2
 800b296:	628b      	str	r3, [r1, #40]	@ 0x28
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	025b      	lsls	r3, r3, #9
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	431a      	orrs	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	041b      	lsls	r3, r3, #16
 800b2b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b2ba:	431a      	orrs	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	061b      	lsls	r3, r3, #24
 800b2c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b2c8:	4931      	ldr	r1, [pc, #196]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b2ce:	4b30      	ldr	r3, [pc, #192]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	492d      	ldr	r1, [pc, #180]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b2e0:	4b2b      	ldr	r3, [pc, #172]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e4:	f023 0220 	bic.w	r2, r3, #32
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	4928      	ldr	r1, [pc, #160]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2f2:	4b27      	ldr	r3, [pc, #156]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f6:	4a26      	ldr	r2, [pc, #152]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b2f8:	f023 0310 	bic.w	r3, r3, #16
 800b2fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2fe:	4b24      	ldr	r3, [pc, #144]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b300:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b302:	4b24      	ldr	r3, [pc, #144]	@ (800b394 <RCCEx_PLL2_Config+0x160>)
 800b304:	4013      	ands	r3, r2
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	69d2      	ldr	r2, [r2, #28]
 800b30a:	00d2      	lsls	r2, r2, #3
 800b30c:	4920      	ldr	r1, [pc, #128]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b312:	4b1f      	ldr	r3, [pc, #124]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b316:	4a1e      	ldr	r2, [pc, #120]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b318:	f043 0310 	orr.w	r3, r3, #16
 800b31c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d106      	bne.n	800b332 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b324:	4b1a      	ldr	r3, [pc, #104]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b328:	4a19      	ldr	r2, [pc, #100]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b32a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b32e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b330:	e00f      	b.n	800b352 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d106      	bne.n	800b346 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b338:	4b15      	ldr	r3, [pc, #84]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33c:	4a14      	ldr	r2, [pc, #80]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b33e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b342:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b344:	e005      	b.n	800b352 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b346:	4b12      	ldr	r3, [pc, #72]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34a:	4a11      	ldr	r2, [pc, #68]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b34c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b350:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b352:	4b0f      	ldr	r3, [pc, #60]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a0e      	ldr	r2, [pc, #56]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b358:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b35c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b35e:	f7f6 ff03 	bl	8002168 <HAL_GetTick>
 800b362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b364:	e008      	b.n	800b378 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b366:	f7f6 feff 	bl	8002168 <HAL_GetTick>
 800b36a:	4602      	mov	r2, r0
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	2b02      	cmp	r3, #2
 800b372:	d901      	bls.n	800b378 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b374:	2303      	movs	r3, #3
 800b376:	e006      	b.n	800b386 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b378:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <RCCEx_PLL2_Config+0x15c>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d0f0      	beq.n	800b366 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b384:	7bfb      	ldrb	r3, [r7, #15]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	58024400 	.word	0x58024400
 800b394:	ffff0007 	.word	0xffff0007

0800b398 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3a6:	4b53      	ldr	r3, [pc, #332]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3aa:	f003 0303 	and.w	r3, r3, #3
 800b3ae:	2b03      	cmp	r3, #3
 800b3b0:	d101      	bne.n	800b3b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e099      	b.n	800b4ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b3b6:	4b4f      	ldr	r3, [pc, #316]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a4e      	ldr	r2, [pc, #312]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b3bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3c2:	f7f6 fed1 	bl	8002168 <HAL_GetTick>
 800b3c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3c8:	e008      	b.n	800b3dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3ca:	f7f6 fecd 	bl	8002168 <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	d901      	bls.n	800b3dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e086      	b.n	800b4ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3dc:	4b45      	ldr	r3, [pc, #276]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1f0      	bne.n	800b3ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b3e8:	4b42      	ldr	r3, [pc, #264]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	051b      	lsls	r3, r3, #20
 800b3f6:	493f      	ldr	r1, [pc, #252]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	628b      	str	r3, [r1, #40]	@ 0x28
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	3b01      	subs	r3, #1
 800b402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	3b01      	subs	r3, #1
 800b40c:	025b      	lsls	r3, r3, #9
 800b40e:	b29b      	uxth	r3, r3
 800b410:	431a      	orrs	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	3b01      	subs	r3, #1
 800b418:	041b      	lsls	r3, r3, #16
 800b41a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b41e:	431a      	orrs	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	3b01      	subs	r3, #1
 800b426:	061b      	lsls	r3, r3, #24
 800b428:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b42c:	4931      	ldr	r1, [pc, #196]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b432:	4b30      	ldr	r3, [pc, #192]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b436:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	492d      	ldr	r1, [pc, #180]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b440:	4313      	orrs	r3, r2
 800b442:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b444:	4b2b      	ldr	r3, [pc, #172]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b448:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	699b      	ldr	r3, [r3, #24]
 800b450:	4928      	ldr	r1, [pc, #160]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b452:	4313      	orrs	r3, r2
 800b454:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b456:	4b27      	ldr	r3, [pc, #156]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b45a:	4a26      	ldr	r2, [pc, #152]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b45c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b462:	4b24      	ldr	r3, [pc, #144]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b466:	4b24      	ldr	r3, [pc, #144]	@ (800b4f8 <RCCEx_PLL3_Config+0x160>)
 800b468:	4013      	ands	r3, r2
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	69d2      	ldr	r2, [r2, #28]
 800b46e:	00d2      	lsls	r2, r2, #3
 800b470:	4920      	ldr	r1, [pc, #128]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b472:	4313      	orrs	r3, r2
 800b474:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b476:	4b1f      	ldr	r3, [pc, #124]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b47a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b47c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d106      	bne.n	800b496 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b488:	4b1a      	ldr	r3, [pc, #104]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48c:	4a19      	ldr	r2, [pc, #100]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b48e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b494:	e00f      	b.n	800b4b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d106      	bne.n	800b4aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b49c:	4b15      	ldr	r3, [pc, #84]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a0:	4a14      	ldr	r2, [pc, #80]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b4a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b4a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b4a8:	e005      	b.n	800b4b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b4aa:	4b12      	ldr	r3, [pc, #72]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ae:	4a11      	ldr	r2, [pc, #68]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b4b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b4b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a0e      	ldr	r2, [pc, #56]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b4bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4c2:	f7f6 fe51 	bl	8002168 <HAL_GetTick>
 800b4c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4c8:	e008      	b.n	800b4dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4ca:	f7f6 fe4d 	bl	8002168 <HAL_GetTick>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	1ad3      	subs	r3, r2, r3
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d901      	bls.n	800b4dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4d8:	2303      	movs	r3, #3
 800b4da:	e006      	b.n	800b4ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4dc:	4b05      	ldr	r3, [pc, #20]	@ (800b4f4 <RCCEx_PLL3_Config+0x15c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d0f0      	beq.n	800b4ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	58024400 	.word	0x58024400
 800b4f8:	ffff0007 	.word	0xffff0007

0800b4fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d101      	bne.n	800b50e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e10f      	b.n	800b72e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a87      	ldr	r2, [pc, #540]	@ (800b738 <HAL_SPI_Init+0x23c>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d00f      	beq.n	800b53e <HAL_SPI_Init+0x42>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a86      	ldr	r2, [pc, #536]	@ (800b73c <HAL_SPI_Init+0x240>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d00a      	beq.n	800b53e <HAL_SPI_Init+0x42>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a84      	ldr	r2, [pc, #528]	@ (800b740 <HAL_SPI_Init+0x244>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d005      	beq.n	800b53e <HAL_SPI_Init+0x42>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	2b0f      	cmp	r3, #15
 800b538:	d901      	bls.n	800b53e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e0f7      	b.n	800b72e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f001 f8fc 	bl	800c73c <SPI_GetPacketSize>
 800b544:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a7b      	ldr	r2, [pc, #492]	@ (800b738 <HAL_SPI_Init+0x23c>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d00c      	beq.n	800b56a <HAL_SPI_Init+0x6e>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a79      	ldr	r2, [pc, #484]	@ (800b73c <HAL_SPI_Init+0x240>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d007      	beq.n	800b56a <HAL_SPI_Init+0x6e>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a78      	ldr	r2, [pc, #480]	@ (800b740 <HAL_SPI_Init+0x244>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d002      	beq.n	800b56a <HAL_SPI_Init+0x6e>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b08      	cmp	r3, #8
 800b568:	d811      	bhi.n	800b58e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b56e:	4a72      	ldr	r2, [pc, #456]	@ (800b738 <HAL_SPI_Init+0x23c>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d009      	beq.n	800b588 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a70      	ldr	r2, [pc, #448]	@ (800b73c <HAL_SPI_Init+0x240>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d004      	beq.n	800b588 <HAL_SPI_Init+0x8c>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a6f      	ldr	r2, [pc, #444]	@ (800b740 <HAL_SPI_Init+0x244>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d104      	bne.n	800b592 <HAL_SPI_Init+0x96>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b10      	cmp	r3, #16
 800b58c:	d901      	bls.n	800b592 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	e0cd      	b.n	800b72e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d106      	bne.n	800b5ac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7f6 fb1a 	bl	8001be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f022 0201 	bic.w	r2, r2, #1
 800b5c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b5ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b5d8:	d119      	bne.n	800b60e <HAL_SPI_Init+0x112>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5e2:	d103      	bne.n	800b5ec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d008      	beq.n	800b5fe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10c      	bne.n	800b60e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5fc:	d107      	bne.n	800b60e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b60c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00f      	beq.n	800b63a <HAL_SPI_Init+0x13e>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	2b06      	cmp	r3, #6
 800b620:	d90b      	bls.n	800b63a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	430a      	orrs	r2, r1
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	e007      	b.n	800b64a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b648:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	69da      	ldr	r2, [r3, #28]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b652:	431a      	orrs	r2, r3
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	431a      	orrs	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b65c:	ea42 0103 	orr.w	r1, r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68da      	ldr	r2, [r3, #12]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	430a      	orrs	r2, r1
 800b66a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b674:	431a      	orrs	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b67a:	431a      	orrs	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	699b      	ldr	r3, [r3, #24]
 800b680:	431a      	orrs	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	431a      	orrs	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	695b      	ldr	r3, [r3, #20]
 800b68c:	431a      	orrs	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	431a      	orrs	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	431a      	orrs	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b69e:	431a      	orrs	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6aa:	ea42 0103 	orr.w	r1, r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	430a      	orrs	r2, r1
 800b6b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d113      	bne.n	800b6ea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b6e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f022 0201 	bic.w	r2, r2, #1
 800b6f8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00a      	beq.n	800b71c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	430a      	orrs	r2, r1
 800b71a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	40013000 	.word	0x40013000
 800b73c:	40003800 	.word	0x40003800
 800b740:	40003c00 	.word	0x40003c00

0800b744 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af02      	add	r7, sp, #8
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	4613      	mov	r3, r2
 800b752:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3320      	adds	r3, #32
 800b75a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b75c:	f7f6 fd04 	bl	8002168 <HAL_GetTick>
 800b760:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d001      	beq.n	800b772 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b76e:	2302      	movs	r3, #2
 800b770:	e1d1      	b.n	800bb16 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <HAL_SPI_Transmit+0x3a>
 800b778:	88fb      	ldrh	r3, [r7, #6]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e1c9      	b.n	800bb16 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d101      	bne.n	800b790 <HAL_SPI_Transmit+0x4c>
 800b78c:	2302      	movs	r3, #2
 800b78e:	e1c2      	b.n	800bb16 <HAL_SPI_Transmit+0x3d2>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2203      	movs	r2, #3
 800b79c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	88fa      	ldrh	r2, [r7, #6]
 800b7b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	88fa      	ldrh	r2, [r7, #6]
 800b7ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b7e8:	d108      	bne.n	800b7fc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	e009      	b.n	800b810 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b80e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	4b96      	ldr	r3, [pc, #600]	@ (800ba70 <HAL_SPI_Transmit+0x32c>)
 800b818:	4013      	ands	r3, r2
 800b81a:	88f9      	ldrh	r1, [r7, #6]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	6812      	ldr	r2, [r2, #0]
 800b820:	430b      	orrs	r3, r1
 800b822:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f042 0201 	orr.w	r2, r2, #1
 800b832:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b83c:	d107      	bne.n	800b84e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b84c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	2b0f      	cmp	r3, #15
 800b854:	d947      	bls.n	800b8e6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b856:	e03f      	b.n	800b8d8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	2b02      	cmp	r3, #2
 800b864:	d114      	bne.n	800b890 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6812      	ldr	r2, [r2, #0]
 800b870:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b876:	1d1a      	adds	r2, r3, #4
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b882:	b29b      	uxth	r3, r3
 800b884:	3b01      	subs	r3, #1
 800b886:	b29a      	uxth	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b88e:	e023      	b.n	800b8d8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b890:	f7f6 fc6a 	bl	8002168 <HAL_GetTick>
 800b894:	4602      	mov	r2, r0
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d803      	bhi.n	800b8a8 <HAL_SPI_Transmit+0x164>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a6:	d102      	bne.n	800b8ae <HAL_SPI_Transmit+0x16a>
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d114      	bne.n	800b8d8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f000 fe76 	bl	800c5a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	e11e      	b.n	800bb16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1b9      	bne.n	800b858 <HAL_SPI_Transmit+0x114>
 800b8e4:	e0f1      	b.n	800baca <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	2b07      	cmp	r3, #7
 800b8ec:	f240 80e6 	bls.w	800babc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b8f0:	e05d      	b.n	800b9ae <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	f003 0302 	and.w	r3, r3, #2
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d132      	bne.n	800b966 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b906:	b29b      	uxth	r3, r3
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d918      	bls.n	800b93e <HAL_SPI_Transmit+0x1fa>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b910:	2b00      	cmp	r3, #0
 800b912:	d014      	beq.n	800b93e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6812      	ldr	r2, [r2, #0]
 800b91e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b924:	1d1a      	adds	r2, r3, #4
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b930:	b29b      	uxth	r3, r3
 800b932:	3b02      	subs	r3, #2
 800b934:	b29a      	uxth	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b93c:	e037      	b.n	800b9ae <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b942:	881a      	ldrh	r2, [r3, #0]
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b94c:	1c9a      	adds	r2, r3, #2
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b958:	b29b      	uxth	r3, r3
 800b95a:	3b01      	subs	r3, #1
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b964:	e023      	b.n	800b9ae <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b966:	f7f6 fbff 	bl	8002168 <HAL_GetTick>
 800b96a:	4602      	mov	r2, r0
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	429a      	cmp	r2, r3
 800b974:	d803      	bhi.n	800b97e <HAL_SPI_Transmit+0x23a>
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97c:	d102      	bne.n	800b984 <HAL_SPI_Transmit+0x240>
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d114      	bne.n	800b9ae <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 fe0b 	bl	800c5a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b990:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	e0b3      	b.n	800bb16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d19b      	bne.n	800b8f2 <HAL_SPI_Transmit+0x1ae>
 800b9ba:	e086      	b.n	800baca <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	f003 0302 	and.w	r3, r3, #2
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d154      	bne.n	800ba74 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d918      	bls.n	800ba08 <HAL_SPI_Transmit+0x2c4>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9da:	2b40      	cmp	r3, #64	@ 0x40
 800b9dc:	d914      	bls.n	800ba08 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	6812      	ldr	r2, [r2, #0]
 800b9e8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9ee:	1d1a      	adds	r2, r3, #4
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	3b04      	subs	r3, #4
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ba06:	e059      	b.n	800babc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d917      	bls.n	800ba44 <HAL_SPI_Transmit+0x300>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d013      	beq.n	800ba44 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba20:	881a      	ldrh	r2, [r3, #0]
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba2a:	1c9a      	adds	r2, r3, #2
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	3b02      	subs	r3, #2
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ba42:	e03b      	b.n	800babc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	3320      	adds	r3, #32
 800ba4e:	7812      	ldrb	r2, [r2, #0]
 800ba50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	3b01      	subs	r3, #1
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ba6e:	e025      	b.n	800babc <HAL_SPI_Transmit+0x378>
 800ba70:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba74:	f7f6 fb78 	bl	8002168 <HAL_GetTick>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d803      	bhi.n	800ba8c <HAL_SPI_Transmit+0x348>
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8a:	d102      	bne.n	800ba92 <HAL_SPI_Transmit+0x34e>
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d114      	bne.n	800babc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f000 fd84 	bl	800c5a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bab8:	2303      	movs	r3, #3
 800baba:	e02c      	b.n	800bb16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f47f af79 	bne.w	800b9bc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	2200      	movs	r2, #0
 800bad2:	2108      	movs	r1, #8
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f000 fe03 	bl	800c6e0 <SPI_WaitOnFlagUntilTimeout>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d007      	beq.n	800baf0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bae6:	f043 0220 	orr.w	r2, r3, #32
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f000 fd55 	bl	800c5a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d001      	beq.n	800bb14 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	e000      	b.n	800bb16 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800bb14:	2300      	movs	r3, #0
  }
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3718      	adds	r7, #24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop

0800bb20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08e      	sub	sp, #56	@ 0x38
 800bb24:	af02      	add	r7, sp, #8
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3320      	adds	r3, #32
 800bb34:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3330      	adds	r3, #48	@ 0x30
 800bb3c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb42:	095b      	lsrs	r3, r3, #5
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	3301      	adds	r3, #1
 800bb48:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb4a:	f7f6 fb0d 	bl	8002168 <HAL_GetTick>
 800bb4e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800bb50:	887b      	ldrh	r3, [r7, #2]
 800bb52:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800bb54:	887b      	ldrh	r3, [r7, #2]
 800bb56:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d001      	beq.n	800bb68 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800bb64:	2302      	movs	r3, #2
 800bb66:	e310      	b.n	800c18a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <HAL_SPI_TransmitReceive+0x5a>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <HAL_SPI_TransmitReceive+0x5a>
 800bb74:	887b      	ldrh	r3, [r7, #2]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e305      	b.n	800c18a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d101      	bne.n	800bb8c <HAL_SPI_TransmitReceive+0x6c>
 800bb88:	2302      	movs	r3, #2
 800bb8a:	e2fe      	b.n	800c18a <HAL_SPI_TransmitReceive+0x66a>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2205      	movs	r2, #5
 800bb98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	887a      	ldrh	r2, [r7, #2]
 800bbae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	887a      	ldrh	r2, [r7, #2]
 800bbb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	887a      	ldrh	r2, [r7, #2]
 800bbc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	887a      	ldrh	r2, [r7, #2]
 800bbcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68da      	ldr	r2, [r3, #12]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800bbea:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a70      	ldr	r2, [pc, #448]	@ (800bdb4 <HAL_SPI_TransmitReceive+0x294>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d009      	beq.n	800bc0a <HAL_SPI_TransmitReceive+0xea>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a6f      	ldr	r2, [pc, #444]	@ (800bdb8 <HAL_SPI_TransmitReceive+0x298>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d004      	beq.n	800bc0a <HAL_SPI_TransmitReceive+0xea>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a6d      	ldr	r2, [pc, #436]	@ (800bdbc <HAL_SPI_TransmitReceive+0x29c>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d102      	bne.n	800bc10 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800bc0a:	2310      	movs	r3, #16
 800bc0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc0e:	e001      	b.n	800bc14 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800bc10:	2308      	movs	r3, #8
 800bc12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	685a      	ldr	r2, [r3, #4]
 800bc1a:	4b69      	ldr	r3, [pc, #420]	@ (800bdc0 <HAL_SPI_TransmitReceive+0x2a0>)
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	8879      	ldrh	r1, [r7, #2]
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	6812      	ldr	r2, [r2, #0]
 800bc24:	430b      	orrs	r3, r1
 800bc26:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f042 0201 	orr.w	r2, r2, #1
 800bc36:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc40:	d107      	bne.n	800bc52 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	2b0f      	cmp	r3, #15
 800bc58:	f240 80a2 	bls.w	800bda0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800bc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5e:	089b      	lsrs	r3, r3, #2
 800bc60:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bc62:	e094      	b.n	800bd8e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	f003 0302 	and.w	r3, r3, #2
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	d120      	bne.n	800bcb4 <HAL_SPI_TransmitReceive+0x194>
 800bc72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d01d      	beq.n	800bcb4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bc78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bc7a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d217      	bcs.n	800bcb4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6812      	ldr	r2, [r2, #0]
 800bc8e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc94:	1d1a      	adds	r2, r3, #4
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	3b01      	subs	r3, #1
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bcb2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bcbc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d065      	beq.n	800bd8e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d118      	bne.n	800bd02 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcd8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bcda:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bce0:	1d1a      	adds	r2, r3, #4
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcfe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bd00:	e045      	b.n	800bd8e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bd02:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bd04:	8bfb      	ldrh	r3, [r7, #30]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d21d      	bcs.n	800bd46 <HAL_SPI_TransmitReceive+0x226>
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d018      	beq.n	800bd46 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bd1e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd24:	1d1a      	adds	r2, r3, #4
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	3b01      	subs	r3, #1
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd42:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bd44:	e023      	b.n	800bd8e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd46:	f7f6 fa0f 	bl	8002168 <HAL_GetTick>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d803      	bhi.n	800bd5e <HAL_SPI_TransmitReceive+0x23e>
 800bd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5c:	d102      	bne.n	800bd64 <HAL_SPI_TransmitReceive+0x244>
 800bd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d114      	bne.n	800bd8e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f000 fc1b 	bl	800c5a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	e1fd      	b.n	800c18a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f47f af67 	bne.w	800bc64 <HAL_SPI_TransmitReceive+0x144>
 800bd96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f47f af63 	bne.w	800bc64 <HAL_SPI_TransmitReceive+0x144>
 800bd9e:	e1ce      	b.n	800c13e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	2b07      	cmp	r3, #7
 800bda6:	f240 81c2 	bls.w	800c12e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800bdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdac:	085b      	lsrs	r3, r3, #1
 800bdae:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bdb0:	e0c9      	b.n	800bf46 <HAL_SPI_TransmitReceive+0x426>
 800bdb2:	bf00      	nop
 800bdb4:	40013000 	.word	0x40013000
 800bdb8:	40003800 	.word	0x40003800
 800bdbc:	40003c00 	.word	0x40003c00
 800bdc0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	695b      	ldr	r3, [r3, #20]
 800bdca:	f003 0302 	and.w	r3, r3, #2
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	d11f      	bne.n	800be12 <HAL_SPI_TransmitReceive+0x2f2>
 800bdd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d01c      	beq.n	800be12 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bdd8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bdda:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdde:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d216      	bcs.n	800be12 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bde8:	881a      	ldrh	r2, [r3, #0]
 800bdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdec:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdf2:	1c9a      	adds	r2, r3, #2
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	3b01      	subs	r3, #1
 800be02:	b29a      	uxth	r2, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be10:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800be1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 8092 	beq.w	800bf46 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	695b      	ldr	r3, [r3, #20]
 800be28:	f003 0301 	and.w	r3, r3, #1
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d118      	bne.n	800be62 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be34:	6a3a      	ldr	r2, [r7, #32]
 800be36:	8812      	ldrh	r2, [r2, #0]
 800be38:	b292      	uxth	r2, r2
 800be3a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be40:	1c9a      	adds	r2, r3, #2
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	3b01      	subs	r3, #1
 800be50:	b29a      	uxth	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be5e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800be60:	e071      	b.n	800bf46 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800be62:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800be64:	8bfb      	ldrh	r3, [r7, #30]
 800be66:	429a      	cmp	r2, r3
 800be68:	d228      	bcs.n	800bebc <HAL_SPI_TransmitReceive+0x39c>
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d023      	beq.n	800bebc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be78:	6a3a      	ldr	r2, [r7, #32]
 800be7a:	8812      	ldrh	r2, [r2, #0]
 800be7c:	b292      	uxth	r2, r2
 800be7e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be84:	1c9a      	adds	r2, r3, #2
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be8e:	6a3a      	ldr	r2, [r7, #32]
 800be90:	8812      	ldrh	r2, [r2, #0]
 800be92:	b292      	uxth	r2, r2
 800be94:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be9a:	1c9a      	adds	r2, r3, #2
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	3b02      	subs	r3, #2
 800beaa:	b29a      	uxth	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800beb8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800beba:	e044      	b.n	800bf46 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bebc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d11d      	bne.n	800befe <HAL_SPI_TransmitReceive+0x3de>
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d018      	beq.n	800befe <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bed0:	6a3a      	ldr	r2, [r7, #32]
 800bed2:	8812      	ldrh	r2, [r2, #0]
 800bed4:	b292      	uxth	r2, r2
 800bed6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bedc:	1c9a      	adds	r2, r3, #2
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bee8:	b29b      	uxth	r3, r3
 800beea:	3b01      	subs	r3, #1
 800beec:	b29a      	uxth	r2, r3
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800befa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800befc:	e023      	b.n	800bf46 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800befe:	f7f6 f933 	bl	8002168 <HAL_GetTick>
 800bf02:	4602      	mov	r2, r0
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d803      	bhi.n	800bf16 <HAL_SPI_TransmitReceive+0x3f6>
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf14:	d102      	bne.n	800bf1c <HAL_SPI_TransmitReceive+0x3fc>
 800bf16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d114      	bne.n	800bf46 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f000 fb3f 	bl	800c5a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2201      	movs	r2, #1
 800bf36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800bf42:	2303      	movs	r3, #3
 800bf44:	e121      	b.n	800c18a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f47f af3b 	bne.w	800bdc4 <HAL_SPI_TransmitReceive+0x2a4>
 800bf4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f47f af37 	bne.w	800bdc4 <HAL_SPI_TransmitReceive+0x2a4>
 800bf56:	e0f2      	b.n	800c13e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d121      	bne.n	800bfaa <HAL_SPI_TransmitReceive+0x48a>
 800bf66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d01e      	beq.n	800bfaa <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bf6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bf6e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf72:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d218      	bcs.n	800bfaa <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3320      	adds	r3, #32
 800bf82:	7812      	ldrb	r2, [r2, #0]
 800bf84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf8a:	1c5a      	adds	r2, r3, #1
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfa8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bfb2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f000 80ba 	beq.w	800c12e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	f003 0301 	and.w	r3, r3, #1
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d11b      	bne.n	800c000 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfd4:	7812      	ldrb	r2, [r2, #0]
 800bfd6:	b2d2      	uxtb	r2, r2
 800bfd8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfde:	1c5a      	adds	r2, r3, #1
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	3b01      	subs	r3, #1
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bffc:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bffe:	e096      	b.n	800c12e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c000:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c002:	8bfb      	ldrh	r3, [r7, #30]
 800c004:	429a      	cmp	r2, r3
 800c006:	d24a      	bcs.n	800c09e <HAL_SPI_TransmitReceive+0x57e>
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d045      	beq.n	800c09e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c01e:	7812      	ldrb	r2, [r2, #0]
 800c020:	b2d2      	uxtb	r2, r2
 800c022:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c028:	1c5a      	adds	r2, r3, #1
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c03a:	7812      	ldrb	r2, [r2, #0]
 800c03c:	b2d2      	uxtb	r2, r2
 800c03e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c056:	7812      	ldrb	r2, [r2, #0]
 800c058:	b2d2      	uxtb	r2, r2
 800c05a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c072:	7812      	ldrb	r2, [r2, #0]
 800c074:	b2d2      	uxtb	r2, r2
 800c076:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c088:	b29b      	uxth	r3, r3
 800c08a:	3b04      	subs	r3, #4
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c09a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c09c:	e047      	b.n	800c12e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c09e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c0a0:	2b03      	cmp	r3, #3
 800c0a2:	d820      	bhi.n	800c0e6 <HAL_SPI_TransmitReceive+0x5c6>
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01b      	beq.n	800c0e6 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0ba:	7812      	ldrb	r2, [r2, #0]
 800c0bc:	b2d2      	uxtb	r2, r2
 800c0be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c0e4:	e023      	b.n	800c12e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0e6:	f7f6 f83f 	bl	8002168 <HAL_GetTick>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d803      	bhi.n	800c0fe <HAL_SPI_TransmitReceive+0x5de>
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fc:	d102      	bne.n	800c104 <HAL_SPI_TransmitReceive+0x5e4>
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c100:	2b00      	cmp	r3, #0
 800c102:	d114      	bne.n	800c12e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 fa4b 	bl	800c5a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c110:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2201      	movs	r2, #1
 800c11e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e02d      	b.n	800c18a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c12e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c130:	2b00      	cmp	r3, #0
 800c132:	f47f af11 	bne.w	800bf58 <HAL_SPI_TransmitReceive+0x438>
 800c136:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f47f af0d 	bne.w	800bf58 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c144:	2200      	movs	r2, #0
 800c146:	2108      	movs	r1, #8
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f000 fac9 	bl	800c6e0 <SPI_WaitOnFlagUntilTimeout>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d007      	beq.n	800c164 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c15a:	f043 0220 	orr.w	r2, r3, #32
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 fa1b 	bl	800c5a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	e000      	b.n	800c18a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800c188:	2300      	movs	r3, #0
  }
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3730      	adds	r7, #48	@ 0x30
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop

0800c194 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b08a      	sub	sp, #40	@ 0x28
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	691b      	ldr	r3, [r3, #16]
 800c1a2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c1ac:	6a3a      	ldr	r2, [r7, #32]
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c1c6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3330      	adds	r3, #48	@ 0x30
 800c1ce:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d010      	beq.n	800c1fc <HAL_SPI_IRQHandler+0x68>
 800c1da:	6a3b      	ldr	r3, [r7, #32]
 800c1dc:	f003 0308 	and.w	r3, r3, #8
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00b      	beq.n	800c1fc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	699a      	ldr	r2, [r3, #24]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1f2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f9af 	bl	800c558 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800c1fa:	e192      	b.n	800c522 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c202:	2b00      	cmp	r3, #0
 800c204:	d113      	bne.n	800c22e <HAL_SPI_IRQHandler+0x9a>
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	f003 0320 	and.w	r3, r3, #32
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10e      	bne.n	800c22e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c216:	2b00      	cmp	r3, #0
 800c218:	d009      	beq.n	800c22e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	4798      	blx	r3
    handled = 1UL;
 800c22a:	2301      	movs	r3, #1
 800c22c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c234:	2b00      	cmp	r3, #0
 800c236:	d10f      	bne.n	800c258 <HAL_SPI_IRQHandler+0xc4>
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00a      	beq.n	800c258 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d105      	bne.n	800c258 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	4798      	blx	r3
    handled = 1UL;
 800c254:	2301      	movs	r3, #1
 800c256:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	f003 0320 	and.w	r3, r3, #32
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10f      	bne.n	800c282 <HAL_SPI_IRQHandler+0xee>
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	f003 0302 	and.w	r3, r3, #2
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00a      	beq.n	800c282 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c272:	2b00      	cmp	r3, #0
 800c274:	d105      	bne.n	800c282 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	4798      	blx	r3
    handled = 1UL;
 800c27e:	2301      	movs	r3, #1
 800c280:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c284:	2b00      	cmp	r3, #0
 800c286:	f040 8147 	bne.w	800c518 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	f003 0308 	and.w	r3, r3, #8
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 808b 	beq.w	800c3ac <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	699a      	ldr	r2, [r3, #24]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f042 0208 	orr.w	r2, r2, #8
 800c2a4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	699a      	ldr	r2, [r3, #24]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f042 0210 	orr.w	r2, r2, #16
 800c2b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	699a      	ldr	r2, [r3, #24]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c2c4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	691a      	ldr	r2, [r3, #16]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f022 0208 	bic.w	r2, r2, #8
 800c2d4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d13d      	bne.n	800c360 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c2e4:	e036      	b.n	800c354 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	2b0f      	cmp	r3, #15
 800c2ec:	d90b      	bls.n	800c306 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c2f8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2fe:	1d1a      	adds	r2, r3, #4
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	665a      	str	r2, [r3, #100]	@ 0x64
 800c304:	e01d      	b.n	800c342 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	2b07      	cmp	r3, #7
 800c30c:	d90b      	bls.n	800c326 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	8812      	ldrh	r2, [r2, #0]
 800c316:	b292      	uxth	r2, r2
 800c318:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c31e:	1c9a      	adds	r2, r3, #2
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	665a      	str	r2, [r3, #100]	@ 0x64
 800c324:	e00d      	b.n	800c342 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c332:	7812      	ldrb	r2, [r2, #0]
 800c334:	b2d2      	uxtb	r2, r2
 800c336:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c33c:	1c5a      	adds	r2, r3, #1
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c348:	b29b      	uxth	r3, r3
 800c34a:	3b01      	subs	r3, #1
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1c2      	bne.n	800c2e6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 f91d 	bl	800c5a0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c374:	2b00      	cmp	r3, #0
 800c376:	d003      	beq.n	800c380 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 f8e3 	bl	800c544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c37e:	e0d0      	b.n	800c522 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c380:	7cfb      	ldrb	r3, [r7, #19]
 800c382:	2b05      	cmp	r3, #5
 800c384:	d103      	bne.n	800c38e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f7f4 f814 	bl	80003b4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c38c:	e0c6      	b.n	800c51c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c38e:	7cfb      	ldrb	r3, [r7, #19]
 800c390:	2b04      	cmp	r3, #4
 800c392:	d103      	bne.n	800c39c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f8cb 	bl	800c530 <HAL_SPI_RxCpltCallback>
    return;
 800c39a:	e0bf      	b.n	800c51c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c39c:	7cfb      	ldrb	r3, [r7, #19]
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	f040 80bc 	bne.w	800c51c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7f3 fff5 	bl	8000394 <HAL_SPI_TxCpltCallback>
    return;
 800c3aa:	e0b7      	b.n	800c51c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f000 80b5 	beq.w	800c522 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00f      	beq.n	800c3e2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3c8:	f043 0204 	orr.w	r2, r3, #4
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	699a      	ldr	r2, [r3, #24]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00f      	beq.n	800c40c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3f2:	f043 0201 	orr.w	r2, r3, #1
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	699a      	ldr	r2, [r3, #24]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c40a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00f      	beq.n	800c436 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c41c:	f043 0208 	orr.w	r2, r3, #8
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	699a      	ldr	r2, [r3, #24]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c434:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	f003 0320 	and.w	r3, r3, #32
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00f      	beq.n	800c460 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c446:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	699a      	ldr	r2, [r3, #24]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f042 0220 	orr.w	r2, r2, #32
 800c45e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c466:	2b00      	cmp	r3, #0
 800c468:	d05a      	beq.n	800c520 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f022 0201 	bic.w	r2, r2, #1
 800c478:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	6919      	ldr	r1, [r3, #16]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	4b28      	ldr	r3, [pc, #160]	@ (800c528 <HAL_SPI_IRQHandler+0x394>)
 800c486:	400b      	ands	r3, r1
 800c488:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c490:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c494:	d138      	bne.n	800c508 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	689a      	ldr	r2, [r3, #8]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c4a4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d013      	beq.n	800c4d6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4b2:	4a1e      	ldr	r2, [pc, #120]	@ (800c52c <HAL_SPI_IRQHandler+0x398>)
 800c4b4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7f7 fc02 	bl	8003cc4 <HAL_DMA_Abort_IT>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d007      	beq.n	800c4d6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d020      	beq.n	800c520 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4e2:	4a12      	ldr	r2, [pc, #72]	@ (800c52c <HAL_SPI_IRQHandler+0x398>)
 800c4e4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7f7 fbea 	bl	8003cc4 <HAL_DMA_Abort_IT>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d014      	beq.n	800c520 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c506:	e00b      	b.n	800c520 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f817 	bl	800c544 <HAL_SPI_ErrorCallback>
    return;
 800c516:	e003      	b.n	800c520 <HAL_SPI_IRQHandler+0x38c>
    return;
 800c518:	bf00      	nop
 800c51a:	e002      	b.n	800c522 <HAL_SPI_IRQHandler+0x38e>
    return;
 800c51c:	bf00      	nop
 800c51e:	e000      	b.n	800c522 <HAL_SPI_IRQHandler+0x38e>
    return;
 800c520:	bf00      	nop
  }
}
 800c522:	3728      	adds	r7, #40	@ 0x28
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	fffffc94 	.word	0xfffffc94
 800c52c:	0800c56d 	.word	0x0800c56d

0800c530 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800c560:	bf00      	nop
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c578:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7ff ffd6 	bl	800c544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c598:	bf00      	nop
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	699a      	ldr	r2, [r3, #24]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f042 0208 	orr.w	r2, r2, #8
 800c5be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	699a      	ldr	r2, [r3, #24]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f042 0210 	orr.w	r2, r2, #16
 800c5ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f022 0201 	bic.w	r2, r2, #1
 800c5de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6919      	ldr	r1, [r3, #16]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	4b3c      	ldr	r3, [pc, #240]	@ (800c6dc <SPI_CloseTransfer+0x13c>)
 800c5ec:	400b      	ands	r3, r1
 800c5ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	689a      	ldr	r2, [r3, #8]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c5fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c606:	b2db      	uxtb	r3, r3
 800c608:	2b04      	cmp	r3, #4
 800c60a:	d014      	beq.n	800c636 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f003 0320 	and.w	r3, r3, #32
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00f      	beq.n	800c636 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c61c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	699a      	ldr	r2, [r3, #24]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f042 0220 	orr.w	r2, r2, #32
 800c634:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d014      	beq.n	800c66c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00f      	beq.n	800c66c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c652:	f043 0204 	orr.w	r2, r3, #4
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	699a      	ldr	r2, [r3, #24]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c66a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00f      	beq.n	800c696 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c67c:	f043 0201 	orr.w	r2, r3, #1
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	699a      	ldr	r2, [r3, #24]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c694:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00f      	beq.n	800c6c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6a6:	f043 0208 	orr.w	r2, r3, #8
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	699a      	ldr	r2, [r3, #24]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c6be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c6d0:	bf00      	nop
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr
 800c6dc:	fffffc90 	.word	0xfffffc90

0800c6e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	603b      	str	r3, [r7, #0]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c6f0:	e010      	b.n	800c714 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6f2:	f7f5 fd39 	bl	8002168 <HAL_GetTick>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	683a      	ldr	r2, [r7, #0]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d803      	bhi.n	800c70a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c708:	d102      	bne.n	800c710 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d101      	bne.n	800c714 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c710:	2303      	movs	r3, #3
 800c712:	e00f      	b.n	800c734 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	695a      	ldr	r2, [r3, #20]
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	4013      	ands	r3, r2
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	429a      	cmp	r2, r3
 800c722:	bf0c      	ite	eq
 800c724:	2301      	moveq	r3, #1
 800c726:	2300      	movne	r3, #0
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	461a      	mov	r2, r3
 800c72c:	79fb      	ldrb	r3, [r7, #7]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d0df      	beq.n	800c6f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c732:	2300      	movs	r3, #0
}
 800c734:	4618      	mov	r0, r3
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c748:	095b      	lsrs	r3, r3, #5
 800c74a:	3301      	adds	r3, #1
 800c74c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	3301      	adds	r3, #1
 800c754:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	3307      	adds	r3, #7
 800c75a:	08db      	lsrs	r3, r3, #3
 800c75c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	fb02 f303 	mul.w	r3, r2, r3
}
 800c766:	4618      	mov	r0, r3
 800c768:	3714      	adds	r7, #20
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
	...

0800c774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c774:	b084      	sub	sp, #16
 800c776:	b580      	push	{r7, lr}
 800c778:	b084      	sub	sp, #16
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	f107 001c 	add.w	r0, r7, #28
 800c782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c786:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d121      	bne.n	800c7d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c792:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68da      	ldr	r2, [r3, #12]
 800c79e:	4b2c      	ldr	r3, [pc, #176]	@ (800c850 <USB_CoreInit+0xdc>)
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c7b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d105      	bne.n	800c7c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f001 fafa 	bl	800ddc0 <USB_CoreReset>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	73fb      	strb	r3, [r7, #15]
 800c7d0:	e01b      	b.n	800c80a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f001 faee 	bl	800ddc0 <USB_CoreReset>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c7e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d106      	bne.n	800c7fe <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	639a      	str	r2, [r3, #56]	@ 0x38
 800c7fc:	e005      	b.n	800c80a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c802:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c80a:	7fbb      	ldrb	r3, [r7, #30]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d116      	bne.n	800c83e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c814:	b29a      	uxth	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c81e:	4b0d      	ldr	r3, [pc, #52]	@ (800c854 <USB_CoreInit+0xe0>)
 800c820:	4313      	orrs	r3, r2
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	f043 0206 	orr.w	r2, r3, #6
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	f043 0220 	orr.w	r2, r3, #32
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c840:	4618      	mov	r0, r3
 800c842:	3710      	adds	r7, #16
 800c844:	46bd      	mov	sp, r7
 800c846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c84a:	b004      	add	sp, #16
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	ffbdffbf 	.word	0xffbdffbf
 800c854:	03ee0000 	.word	0x03ee0000

0800c858 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c858:	b480      	push	{r7}
 800c85a:	b087      	sub	sp, #28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4613      	mov	r3, r2
 800c864:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c866:	79fb      	ldrb	r3, [r7, #7]
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d165      	bne.n	800c938 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	4a41      	ldr	r2, [pc, #260]	@ (800c974 <USB_SetTurnaroundTime+0x11c>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d906      	bls.n	800c882 <USB_SetTurnaroundTime+0x2a>
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	4a40      	ldr	r2, [pc, #256]	@ (800c978 <USB_SetTurnaroundTime+0x120>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d202      	bcs.n	800c882 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c87c:	230f      	movs	r3, #15
 800c87e:	617b      	str	r3, [r7, #20]
 800c880:	e062      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	4a3c      	ldr	r2, [pc, #240]	@ (800c978 <USB_SetTurnaroundTime+0x120>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d306      	bcc.n	800c898 <USB_SetTurnaroundTime+0x40>
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	4a3b      	ldr	r2, [pc, #236]	@ (800c97c <USB_SetTurnaroundTime+0x124>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d202      	bcs.n	800c898 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c892:	230e      	movs	r3, #14
 800c894:	617b      	str	r3, [r7, #20]
 800c896:	e057      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	4a38      	ldr	r2, [pc, #224]	@ (800c97c <USB_SetTurnaroundTime+0x124>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d306      	bcc.n	800c8ae <USB_SetTurnaroundTime+0x56>
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	4a37      	ldr	r2, [pc, #220]	@ (800c980 <USB_SetTurnaroundTime+0x128>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d202      	bcs.n	800c8ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c8a8:	230d      	movs	r3, #13
 800c8aa:	617b      	str	r3, [r7, #20]
 800c8ac:	e04c      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	4a33      	ldr	r2, [pc, #204]	@ (800c980 <USB_SetTurnaroundTime+0x128>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d306      	bcc.n	800c8c4 <USB_SetTurnaroundTime+0x6c>
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	4a32      	ldr	r2, [pc, #200]	@ (800c984 <USB_SetTurnaroundTime+0x12c>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d802      	bhi.n	800c8c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c8be:	230c      	movs	r3, #12
 800c8c0:	617b      	str	r3, [r7, #20]
 800c8c2:	e041      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	4a2f      	ldr	r2, [pc, #188]	@ (800c984 <USB_SetTurnaroundTime+0x12c>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d906      	bls.n	800c8da <USB_SetTurnaroundTime+0x82>
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	4a2e      	ldr	r2, [pc, #184]	@ (800c988 <USB_SetTurnaroundTime+0x130>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d802      	bhi.n	800c8da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c8d4:	230b      	movs	r3, #11
 800c8d6:	617b      	str	r3, [r7, #20]
 800c8d8:	e036      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	4a2a      	ldr	r2, [pc, #168]	@ (800c988 <USB_SetTurnaroundTime+0x130>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d906      	bls.n	800c8f0 <USB_SetTurnaroundTime+0x98>
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	4a29      	ldr	r2, [pc, #164]	@ (800c98c <USB_SetTurnaroundTime+0x134>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d802      	bhi.n	800c8f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c8ea:	230a      	movs	r3, #10
 800c8ec:	617b      	str	r3, [r7, #20]
 800c8ee:	e02b      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	4a26      	ldr	r2, [pc, #152]	@ (800c98c <USB_SetTurnaroundTime+0x134>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d906      	bls.n	800c906 <USB_SetTurnaroundTime+0xae>
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	4a25      	ldr	r2, [pc, #148]	@ (800c990 <USB_SetTurnaroundTime+0x138>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d202      	bcs.n	800c906 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c900:	2309      	movs	r3, #9
 800c902:	617b      	str	r3, [r7, #20]
 800c904:	e020      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	4a21      	ldr	r2, [pc, #132]	@ (800c990 <USB_SetTurnaroundTime+0x138>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d306      	bcc.n	800c91c <USB_SetTurnaroundTime+0xc4>
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	4a20      	ldr	r2, [pc, #128]	@ (800c994 <USB_SetTurnaroundTime+0x13c>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d802      	bhi.n	800c91c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c916:	2308      	movs	r3, #8
 800c918:	617b      	str	r3, [r7, #20]
 800c91a:	e015      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	4a1d      	ldr	r2, [pc, #116]	@ (800c994 <USB_SetTurnaroundTime+0x13c>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d906      	bls.n	800c932 <USB_SetTurnaroundTime+0xda>
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	4a1c      	ldr	r2, [pc, #112]	@ (800c998 <USB_SetTurnaroundTime+0x140>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d202      	bcs.n	800c932 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c92c:	2307      	movs	r3, #7
 800c92e:	617b      	str	r3, [r7, #20]
 800c930:	e00a      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c932:	2306      	movs	r3, #6
 800c934:	617b      	str	r3, [r7, #20]
 800c936:	e007      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c938:	79fb      	ldrb	r3, [r7, #7]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d102      	bne.n	800c944 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c93e:	2309      	movs	r3, #9
 800c940:	617b      	str	r3, [r7, #20]
 800c942:	e001      	b.n	800c948 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c944:	2309      	movs	r3, #9
 800c946:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	68da      	ldr	r2, [r3, #12]
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	029b      	lsls	r3, r3, #10
 800c95c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c960:	431a      	orrs	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	371c      	adds	r7, #28
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr
 800c974:	00d8acbf 	.word	0x00d8acbf
 800c978:	00e4e1c0 	.word	0x00e4e1c0
 800c97c:	00f42400 	.word	0x00f42400
 800c980:	01067380 	.word	0x01067380
 800c984:	011a499f 	.word	0x011a499f
 800c988:	01312cff 	.word	0x01312cff
 800c98c:	014ca43f 	.word	0x014ca43f
 800c990:	016e3600 	.word	0x016e3600
 800c994:	01a6ab1f 	.word	0x01a6ab1f
 800c998:	01e84800 	.word	0x01e84800

0800c99c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	f043 0201 	orr.w	r2, r3, #1
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	370c      	adds	r7, #12
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr

0800c9be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9be:	b480      	push	{r7}
 800c9c0:	b083      	sub	sp, #12
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f023 0201 	bic.w	r2, r3, #1
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	68db      	ldr	r3, [r3, #12]
 800c9f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c9fc:	78fb      	ldrb	r3, [r7, #3]
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d115      	bne.n	800ca2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca0e:	200a      	movs	r0, #10
 800ca10:	f7f5 fbb6 	bl	8002180 <HAL_Delay>
      ms += 10U;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	330a      	adds	r3, #10
 800ca18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f001 f93f 	bl	800dc9e <USB_GetMode>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d01e      	beq.n	800ca64 <USB_SetCurrentMode+0x84>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2bc7      	cmp	r3, #199	@ 0xc7
 800ca2a:	d9f0      	bls.n	800ca0e <USB_SetCurrentMode+0x2e>
 800ca2c:	e01a      	b.n	800ca64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca2e:	78fb      	ldrb	r3, [r7, #3]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d115      	bne.n	800ca60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca40:	200a      	movs	r0, #10
 800ca42:	f7f5 fb9d 	bl	8002180 <HAL_Delay>
      ms += 10U;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	330a      	adds	r3, #10
 800ca4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f001 f926 	bl	800dc9e <USB_GetMode>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d005      	beq.n	800ca64 <USB_SetCurrentMode+0x84>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ca5c:	d9f0      	bls.n	800ca40 <USB_SetCurrentMode+0x60>
 800ca5e:	e001      	b.n	800ca64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	e005      	b.n	800ca70 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2bc8      	cmp	r3, #200	@ 0xc8
 800ca68:	d101      	bne.n	800ca6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e000      	b.n	800ca70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca78:	b084      	sub	sp, #16
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b086      	sub	sp, #24
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ca86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ca92:	2300      	movs	r3, #0
 800ca94:	613b      	str	r3, [r7, #16]
 800ca96:	e009      	b.n	800caac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	3340      	adds	r3, #64	@ 0x40
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	4413      	add	r3, r2
 800caa2:	2200      	movs	r2, #0
 800caa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	3301      	adds	r3, #1
 800caaa:	613b      	str	r3, [r7, #16]
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	2b0e      	cmp	r3, #14
 800cab0:	d9f2      	bls.n	800ca98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cab2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d11c      	bne.n	800caf4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cac8:	f043 0302 	orr.w	r3, r3, #2
 800cacc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cad2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	601a      	str	r2, [r3, #0]
 800caf2:	e005      	b.n	800cb00 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caf8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb06:	461a      	mov	r2, r3
 800cb08:	2300      	movs	r3, #0
 800cb0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d10d      	bne.n	800cb30 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cb14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d104      	bne.n	800cb26 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f968 	bl	800cdf4 <USB_SetDevSpeed>
 800cb24:	e008      	b.n	800cb38 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cb26:	2101      	movs	r1, #1
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f963 	bl	800cdf4 <USB_SetDevSpeed>
 800cb2e:	e003      	b.n	800cb38 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb30:	2103      	movs	r1, #3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f95e 	bl	800cdf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb38:	2110      	movs	r1, #16
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f8fa 	bl	800cd34 <USB_FlushTxFifo>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f924 	bl	800cd98 <USB_FlushRxFifo>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb60:	461a      	mov	r2, r3
 800cb62:	2300      	movs	r3, #0
 800cb64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	2300      	movs	r3, #0
 800cb70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb78:	461a      	mov	r2, r3
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb7e:	2300      	movs	r3, #0
 800cb80:	613b      	str	r3, [r7, #16]
 800cb82:	e043      	b.n	800cc0c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	015a      	lsls	r2, r3, #5
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cb96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cb9a:	d118      	bne.n	800cbce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10a      	bne.n	800cbb8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	015a      	lsls	r2, r3, #5
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	4413      	add	r3, r2
 800cbaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbae:	461a      	mov	r2, r3
 800cbb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	e013      	b.n	800cbe0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	015a      	lsls	r2, r3, #5
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cbca:	6013      	str	r3, [r2, #0]
 800cbcc:	e008      	b.n	800cbe0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	015a      	lsls	r2, r3, #5
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbda:	461a      	mov	r2, r3
 800cbdc:	2300      	movs	r3, #0
 800cbde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	015a      	lsls	r2, r3, #5
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbec:	461a      	mov	r2, r3
 800cbee:	2300      	movs	r3, #0
 800cbf0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	015a      	lsls	r2, r3, #5
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbfe:	461a      	mov	r2, r3
 800cc00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cc04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	613b      	str	r3, [r7, #16]
 800cc0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cc10:	461a      	mov	r2, r3
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d3b5      	bcc.n	800cb84 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc18:	2300      	movs	r3, #0
 800cc1a:	613b      	str	r3, [r7, #16]
 800cc1c:	e043      	b.n	800cca6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	015a      	lsls	r2, r3, #5
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc34:	d118      	bne.n	800cc68 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d10a      	bne.n	800cc52 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	015a      	lsls	r2, r3, #5
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4413      	add	r3, r2
 800cc44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc48:	461a      	mov	r2, r3
 800cc4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc4e:	6013      	str	r3, [r2, #0]
 800cc50:	e013      	b.n	800cc7a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	015a      	lsls	r2, r3, #5
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	4413      	add	r3, r2
 800cc5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc5e:	461a      	mov	r2, r3
 800cc60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cc64:	6013      	str	r3, [r2, #0]
 800cc66:	e008      	b.n	800cc7a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	015a      	lsls	r2, r3, #5
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	4413      	add	r3, r2
 800cc70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc74:	461a      	mov	r2, r3
 800cc76:	2300      	movs	r3, #0
 800cc78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	015a      	lsls	r2, r3, #5
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	4413      	add	r3, r2
 800cc82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc86:	461a      	mov	r2, r3
 800cc88:	2300      	movs	r3, #0
 800cc8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	015a      	lsls	r2, r3, #5
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4413      	add	r3, r2
 800cc94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc98:	461a      	mov	r2, r3
 800cc9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cc9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	3301      	adds	r3, #1
 800cca4:	613b      	str	r3, [r7, #16]
 800cca6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ccaa:	461a      	mov	r2, r3
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d3b5      	bcc.n	800cc1e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ccc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccc4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ccd2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ccd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d105      	bne.n	800cce8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	699b      	ldr	r3, [r3, #24]
 800cce0:	f043 0210 	orr.w	r2, r3, #16
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	699a      	ldr	r2, [r3, #24]
 800ccec:	4b0f      	ldr	r3, [pc, #60]	@ (800cd2c <USB_DevInit+0x2b4>)
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ccf4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d005      	beq.n	800cd08 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	f043 0208 	orr.w	r2, r3, #8
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cd08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d105      	bne.n	800cd1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	699a      	ldr	r2, [r3, #24]
 800cd14:	4b06      	ldr	r3, [pc, #24]	@ (800cd30 <USB_DevInit+0x2b8>)
 800cd16:	4313      	orrs	r3, r2
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd28:	b004      	add	sp, #16
 800cd2a:	4770      	bx	lr
 800cd2c:	803c3800 	.word	0x803c3800
 800cd30:	40000004 	.word	0x40000004

0800cd34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	3301      	adds	r3, #1
 800cd46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd4e:	d901      	bls.n	800cd54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cd50:	2303      	movs	r3, #3
 800cd52:	e01b      	b.n	800cd8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	691b      	ldr	r3, [r3, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	daf2      	bge.n	800cd42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	019b      	lsls	r3, r3, #6
 800cd64:	f043 0220 	orr.w	r2, r3, #32
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd78:	d901      	bls.n	800cd7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	e006      	b.n	800cd8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	f003 0320 	and.w	r3, r3, #32
 800cd86:	2b20      	cmp	r3, #32
 800cd88:	d0f0      	beq.n	800cd6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cda0:	2300      	movs	r3, #0
 800cda2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	3301      	adds	r3, #1
 800cda8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cdb0:	d901      	bls.n	800cdb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	e018      	b.n	800cde8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	daf2      	bge.n	800cda4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2210      	movs	r2, #16
 800cdc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cdd4:	d901      	bls.n	800cdda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e006      	b.n	800cde8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	f003 0310 	and.w	r3, r3, #16
 800cde2:	2b10      	cmp	r3, #16
 800cde4:	d0f0      	beq.n	800cdc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr

0800cdf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	78fb      	ldrb	r3, [r7, #3]
 800ce0e:	68f9      	ldr	r1, [r7, #12]
 800ce10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce14:	4313      	orrs	r3, r2
 800ce16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr

0800ce26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce26:	b480      	push	{r7}
 800ce28:	b087      	sub	sp, #28
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	f003 0306 	and.w	r3, r3, #6
 800ce3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d102      	bne.n	800ce4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ce46:	2300      	movs	r3, #0
 800ce48:	75fb      	strb	r3, [r7, #23]
 800ce4a:	e00a      	b.n	800ce62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d002      	beq.n	800ce58 <USB_GetDevSpeed+0x32>
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2b06      	cmp	r3, #6
 800ce56:	d102      	bne.n	800ce5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ce58:	2302      	movs	r3, #2
 800ce5a:	75fb      	strb	r3, [r7, #23]
 800ce5c:	e001      	b.n	800ce62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ce5e:	230f      	movs	r3, #15
 800ce60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	371c      	adds	r7, #28
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	785b      	ldrb	r3, [r3, #1]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d139      	bne.n	800cf00 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce92:	69da      	ldr	r2, [r3, #28]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	f003 030f 	and.w	r3, r3, #15
 800ce9c:	2101      	movs	r1, #1
 800ce9e:	fa01 f303 	lsl.w	r3, r1, r3
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	68f9      	ldr	r1, [r7, #12]
 800cea6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	015a      	lsls	r2, r3, #5
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d153      	bne.n	800cf6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	015a      	lsls	r2, r3, #5
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	4413      	add	r3, r2
 800cecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	791b      	ldrb	r3, [r3, #4]
 800cede:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cee0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	059b      	lsls	r3, r3, #22
 800cee6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cee8:	431a      	orrs	r2, r3
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	0159      	lsls	r1, r3, #5
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	440b      	add	r3, r1
 800cef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cef6:	4619      	mov	r1, r3
 800cef8:	4b20      	ldr	r3, [pc, #128]	@ (800cf7c <USB_ActivateEndpoint+0x10c>)
 800cefa:	4313      	orrs	r3, r2
 800cefc:	600b      	str	r3, [r1, #0]
 800cefe:	e035      	b.n	800cf6c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf06:	69da      	ldr	r2, [r3, #28]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	f003 030f 	and.w	r3, r3, #15
 800cf10:	2101      	movs	r1, #1
 800cf12:	fa01 f303 	lsl.w	r3, r1, r3
 800cf16:	041b      	lsls	r3, r3, #16
 800cf18:	68f9      	ldr	r1, [r7, #12]
 800cf1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d119      	bne.n	800cf6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	015a      	lsls	r2, r3, #5
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	4413      	add	r3, r2
 800cf40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	791b      	ldrb	r3, [r3, #4]
 800cf52:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf54:	430b      	orrs	r3, r1
 800cf56:	431a      	orrs	r2, r3
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	0159      	lsls	r1, r3, #5
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	440b      	add	r3, r1
 800cf60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf64:	4619      	mov	r1, r3
 800cf66:	4b05      	ldr	r3, [pc, #20]	@ (800cf7c <USB_ActivateEndpoint+0x10c>)
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3714      	adds	r7, #20
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	10008000 	.word	0x10008000

0800cf80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	785b      	ldrb	r3, [r3, #1]
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d161      	bne.n	800d060 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	015a      	lsls	r2, r3, #5
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cfae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cfb2:	d11f      	bne.n	800cff4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	015a      	lsls	r2, r3, #5
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	4413      	add	r3, r2
 800cfbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68ba      	ldr	r2, [r7, #8]
 800cfc4:	0151      	lsls	r1, r2, #5
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	440a      	add	r2, r1
 800cfca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cfce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cfd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	015a      	lsls	r2, r3, #5
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	4413      	add	r3, r2
 800cfdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68ba      	ldr	r2, [r7, #8]
 800cfe4:	0151      	lsls	r1, r2, #5
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	440a      	add	r2, r1
 800cfea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cfee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cff2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cffa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	f003 030f 	and.w	r3, r3, #15
 800d004:	2101      	movs	r1, #1
 800d006:	fa01 f303 	lsl.w	r3, r1, r3
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	43db      	mvns	r3, r3
 800d00e:	68f9      	ldr	r1, [r7, #12]
 800d010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d014:	4013      	ands	r3, r2
 800d016:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d01e:	69da      	ldr	r2, [r3, #28]
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	f003 030f 	and.w	r3, r3, #15
 800d028:	2101      	movs	r1, #1
 800d02a:	fa01 f303 	lsl.w	r3, r1, r3
 800d02e:	b29b      	uxth	r3, r3
 800d030:	43db      	mvns	r3, r3
 800d032:	68f9      	ldr	r1, [r7, #12]
 800d034:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d038:	4013      	ands	r3, r2
 800d03a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	015a      	lsls	r2, r3, #5
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	4413      	add	r3, r2
 800d044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	0159      	lsls	r1, r3, #5
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	440b      	add	r3, r1
 800d052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d056:	4619      	mov	r1, r3
 800d058:	4b35      	ldr	r3, [pc, #212]	@ (800d130 <USB_DeactivateEndpoint+0x1b0>)
 800d05a:	4013      	ands	r3, r2
 800d05c:	600b      	str	r3, [r1, #0]
 800d05e:	e060      	b.n	800d122 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	015a      	lsls	r2, r3, #5
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	4413      	add	r3, r2
 800d068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d072:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d076:	d11f      	bne.n	800d0b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	015a      	lsls	r2, r3, #5
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	4413      	add	r3, r2
 800d080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	0151      	lsls	r1, r2, #5
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	440a      	add	r2, r1
 800d08e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d092:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d096:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	015a      	lsls	r2, r3, #5
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	4413      	add	r3, r2
 800d0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	0151      	lsls	r1, r2, #5
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	440a      	add	r2, r1
 800d0ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d0b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	f003 030f 	and.w	r3, r3, #15
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	fa01 f303 	lsl.w	r3, r1, r3
 800d0ce:	041b      	lsls	r3, r3, #16
 800d0d0:	43db      	mvns	r3, r3
 800d0d2:	68f9      	ldr	r1, [r7, #12]
 800d0d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0d8:	4013      	ands	r3, r2
 800d0da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0e2:	69da      	ldr	r2, [r3, #28]
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	f003 030f 	and.w	r3, r3, #15
 800d0ec:	2101      	movs	r1, #1
 800d0ee:	fa01 f303 	lsl.w	r3, r1, r3
 800d0f2:	041b      	lsls	r3, r3, #16
 800d0f4:	43db      	mvns	r3, r3
 800d0f6:	68f9      	ldr	r1, [r7, #12]
 800d0f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	015a      	lsls	r2, r3, #5
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	4413      	add	r3, r2
 800d108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	0159      	lsls	r1, r3, #5
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	440b      	add	r3, r1
 800d116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d11a:	4619      	mov	r1, r3
 800d11c:	4b05      	ldr	r3, [pc, #20]	@ (800d134 <USB_DeactivateEndpoint+0x1b4>)
 800d11e:	4013      	ands	r3, r2
 800d120:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	ec337800 	.word	0xec337800
 800d134:	eff37800 	.word	0xeff37800

0800d138 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b08a      	sub	sp, #40	@ 0x28
 800d13c:	af02      	add	r7, sp, #8
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	4613      	mov	r3, r2
 800d144:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	785b      	ldrb	r3, [r3, #1]
 800d154:	2b01      	cmp	r3, #1
 800d156:	f040 8185 	bne.w	800d464 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d132      	bne.n	800d1c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	015a      	lsls	r2, r3, #5
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	4413      	add	r3, r2
 800d16a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d16e:	691a      	ldr	r2, [r3, #16]
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	0159      	lsls	r1, r3, #5
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	440b      	add	r3, r1
 800d178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d17c:	4619      	mov	r1, r3
 800d17e:	4ba7      	ldr	r3, [pc, #668]	@ (800d41c <USB_EPStartXfer+0x2e4>)
 800d180:	4013      	ands	r3, r2
 800d182:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	015a      	lsls	r2, r3, #5
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	4413      	add	r3, r2
 800d18c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	69ba      	ldr	r2, [r7, #24]
 800d194:	0151      	lsls	r1, r2, #5
 800d196:	69fa      	ldr	r2, [r7, #28]
 800d198:	440a      	add	r2, r1
 800d19a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d19e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d1a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	015a      	lsls	r2, r3, #5
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1b0:	691a      	ldr	r2, [r3, #16]
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	0159      	lsls	r1, r3, #5
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	440b      	add	r3, r1
 800d1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4b97      	ldr	r3, [pc, #604]	@ (800d420 <USB_EPStartXfer+0x2e8>)
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	610b      	str	r3, [r1, #16]
 800d1c6:	e097      	b.n	800d2f8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	015a      	lsls	r2, r3, #5
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1d4:	691a      	ldr	r2, [r3, #16]
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	0159      	lsls	r1, r3, #5
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	440b      	add	r3, r1
 800d1de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4b8e      	ldr	r3, [pc, #568]	@ (800d420 <USB_EPStartXfer+0x2e8>)
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	015a      	lsls	r2, r3, #5
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1f6:	691a      	ldr	r2, [r3, #16]
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	0159      	lsls	r1, r3, #5
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	440b      	add	r3, r1
 800d200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d204:	4619      	mov	r1, r3
 800d206:	4b85      	ldr	r3, [pc, #532]	@ (800d41c <USB_EPStartXfer+0x2e4>)
 800d208:	4013      	ands	r3, r2
 800d20a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d11a      	bne.n	800d248 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	691a      	ldr	r2, [r3, #16]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d903      	bls.n	800d226 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	689a      	ldr	r2, [r3, #8]
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	015a      	lsls	r2, r3, #5
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	4413      	add	r3, r2
 800d22e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	69ba      	ldr	r2, [r7, #24]
 800d236:	0151      	lsls	r1, r2, #5
 800d238:	69fa      	ldr	r2, [r7, #28]
 800d23a:	440a      	add	r2, r1
 800d23c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d240:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d244:	6113      	str	r3, [r2, #16]
 800d246:	e044      	b.n	800d2d2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	691a      	ldr	r2, [r3, #16]
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	4413      	add	r3, r2
 800d252:	1e5a      	subs	r2, r3, #1
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	fbb2 f3f3 	udiv	r3, r2, r3
 800d25c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	015a      	lsls	r2, r3, #5
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	4413      	add	r3, r2
 800d266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d26a:	691a      	ldr	r2, [r3, #16]
 800d26c:	8afb      	ldrh	r3, [r7, #22]
 800d26e:	04d9      	lsls	r1, r3, #19
 800d270:	4b6c      	ldr	r3, [pc, #432]	@ (800d424 <USB_EPStartXfer+0x2ec>)
 800d272:	400b      	ands	r3, r1
 800d274:	69b9      	ldr	r1, [r7, #24]
 800d276:	0148      	lsls	r0, r1, #5
 800d278:	69f9      	ldr	r1, [r7, #28]
 800d27a:	4401      	add	r1, r0
 800d27c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d280:	4313      	orrs	r3, r2
 800d282:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	791b      	ldrb	r3, [r3, #4]
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d122      	bne.n	800d2d2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	015a      	lsls	r2, r3, #5
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	4413      	add	r3, r2
 800d294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d298:	691b      	ldr	r3, [r3, #16]
 800d29a:	69ba      	ldr	r2, [r7, #24]
 800d29c:	0151      	lsls	r1, r2, #5
 800d29e:	69fa      	ldr	r2, [r7, #28]
 800d2a0:	440a      	add	r2, r1
 800d2a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d2a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d2aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2b8:	691a      	ldr	r2, [r3, #16]
 800d2ba:	8afb      	ldrh	r3, [r7, #22]
 800d2bc:	075b      	lsls	r3, r3, #29
 800d2be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d2c2:	69b9      	ldr	r1, [r7, #24]
 800d2c4:	0148      	lsls	r0, r1, #5
 800d2c6:	69f9      	ldr	r1, [r7, #28]
 800d2c8:	4401      	add	r1, r0
 800d2ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	015a      	lsls	r2, r3, #5
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	4413      	add	r3, r2
 800d2da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2de:	691a      	ldr	r2, [r3, #16]
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2e8:	69b9      	ldr	r1, [r7, #24]
 800d2ea:	0148      	lsls	r0, r1, #5
 800d2ec:	69f9      	ldr	r1, [r7, #28]
 800d2ee:	4401      	add	r1, r0
 800d2f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d2f8:	79fb      	ldrb	r3, [r7, #7]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d14b      	bne.n	800d396 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	69db      	ldr	r3, [r3, #28]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d009      	beq.n	800d31a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	015a      	lsls	r2, r3, #5
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	4413      	add	r3, r2
 800d30e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d312:	461a      	mov	r2, r3
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	69db      	ldr	r3, [r3, #28]
 800d318:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	791b      	ldrb	r3, [r3, #4]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d128      	bne.n	800d374 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d110      	bne.n	800d354 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	015a      	lsls	r2, r3, #5
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	4413      	add	r3, r2
 800d33a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	69ba      	ldr	r2, [r7, #24]
 800d342:	0151      	lsls	r1, r2, #5
 800d344:	69fa      	ldr	r2, [r7, #28]
 800d346:	440a      	add	r2, r1
 800d348:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d34c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d350:	6013      	str	r3, [r2, #0]
 800d352:	e00f      	b.n	800d374 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	015a      	lsls	r2, r3, #5
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	4413      	add	r3, r2
 800d35c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	69ba      	ldr	r2, [r7, #24]
 800d364:	0151      	lsls	r1, r2, #5
 800d366:	69fa      	ldr	r2, [r7, #28]
 800d368:	440a      	add	r2, r1
 800d36a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d36e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d372:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	015a      	lsls	r2, r3, #5
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	4413      	add	r3, r2
 800d37c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	69ba      	ldr	r2, [r7, #24]
 800d384:	0151      	lsls	r1, r2, #5
 800d386:	69fa      	ldr	r2, [r7, #28]
 800d388:	440a      	add	r2, r1
 800d38a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d38e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	e169      	b.n	800d66a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	015a      	lsls	r2, r3, #5
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	4413      	add	r3, r2
 800d39e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	69ba      	ldr	r2, [r7, #24]
 800d3a6:	0151      	lsls	r1, r2, #5
 800d3a8:	69fa      	ldr	r2, [r7, #28]
 800d3aa:	440a      	add	r2, r1
 800d3ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d3b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d3b4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	791b      	ldrb	r3, [r3, #4]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d015      	beq.n	800d3ea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 8151 	beq.w	800d66a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	f003 030f 	and.w	r3, r3, #15
 800d3d8:	2101      	movs	r1, #1
 800d3da:	fa01 f303 	lsl.w	r3, r1, r3
 800d3de:	69f9      	ldr	r1, [r7, #28]
 800d3e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	634b      	str	r3, [r1, #52]	@ 0x34
 800d3e8:	e13f      	b.n	800d66a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d116      	bne.n	800d428 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	015a      	lsls	r2, r3, #5
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	4413      	add	r3, r2
 800d402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	69ba      	ldr	r2, [r7, #24]
 800d40a:	0151      	lsls	r1, r2, #5
 800d40c:	69fa      	ldr	r2, [r7, #28]
 800d40e:	440a      	add	r2, r1
 800d410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d414:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d418:	6013      	str	r3, [r2, #0]
 800d41a:	e015      	b.n	800d448 <USB_EPStartXfer+0x310>
 800d41c:	e007ffff 	.word	0xe007ffff
 800d420:	fff80000 	.word	0xfff80000
 800d424:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	015a      	lsls	r2, r3, #5
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	4413      	add	r3, r2
 800d430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	69ba      	ldr	r2, [r7, #24]
 800d438:	0151      	lsls	r1, r2, #5
 800d43a:	69fa      	ldr	r2, [r7, #28]
 800d43c:	440a      	add	r2, r1
 800d43e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d446:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	68d9      	ldr	r1, [r3, #12]
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	781a      	ldrb	r2, [r3, #0]
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	691b      	ldr	r3, [r3, #16]
 800d454:	b298      	uxth	r0, r3
 800d456:	79fb      	ldrb	r3, [r7, #7]
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	4603      	mov	r3, r0
 800d45c:	68f8      	ldr	r0, [r7, #12]
 800d45e:	f000 f9b9 	bl	800d7d4 <USB_WritePacket>
 800d462:	e102      	b.n	800d66a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	015a      	lsls	r2, r3, #5
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	4413      	add	r3, r2
 800d46c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d470:	691a      	ldr	r2, [r3, #16]
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	0159      	lsls	r1, r3, #5
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	440b      	add	r3, r1
 800d47a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d47e:	4619      	mov	r1, r3
 800d480:	4b7c      	ldr	r3, [pc, #496]	@ (800d674 <USB_EPStartXfer+0x53c>)
 800d482:	4013      	ands	r3, r2
 800d484:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	015a      	lsls	r2, r3, #5
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	4413      	add	r3, r2
 800d48e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d492:	691a      	ldr	r2, [r3, #16]
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	0159      	lsls	r1, r3, #5
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	440b      	add	r3, r1
 800d49c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	4b75      	ldr	r3, [pc, #468]	@ (800d678 <USB_EPStartXfer+0x540>)
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d12f      	bne.n	800d50e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d003      	beq.n	800d4be <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	689a      	ldr	r2, [r3, #8]
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	689a      	ldr	r2, [r3, #8]
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	015a      	lsls	r2, r3, #5
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4d2:	691a      	ldr	r2, [r3, #16]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	6a1b      	ldr	r3, [r3, #32]
 800d4d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4dc:	69b9      	ldr	r1, [r7, #24]
 800d4de:	0148      	lsls	r0, r1, #5
 800d4e0:	69f9      	ldr	r1, [r7, #28]
 800d4e2:	4401      	add	r1, r0
 800d4e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	015a      	lsls	r2, r3, #5
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	69ba      	ldr	r2, [r7, #24]
 800d4fc:	0151      	lsls	r1, r2, #5
 800d4fe:	69fa      	ldr	r2, [r7, #28]
 800d500:	440a      	add	r2, r1
 800d502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d506:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d50a:	6113      	str	r3, [r2, #16]
 800d50c:	e05f      	b.n	800d5ce <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d123      	bne.n	800d55e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	015a      	lsls	r2, r3, #5
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	4413      	add	r3, r2
 800d51e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d522:	691a      	ldr	r2, [r3, #16]
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d52c:	69b9      	ldr	r1, [r7, #24]
 800d52e:	0148      	lsls	r0, r1, #5
 800d530:	69f9      	ldr	r1, [r7, #28]
 800d532:	4401      	add	r1, r0
 800d534:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d538:	4313      	orrs	r3, r2
 800d53a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	015a      	lsls	r2, r3, #5
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	4413      	add	r3, r2
 800d544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d548:	691b      	ldr	r3, [r3, #16]
 800d54a:	69ba      	ldr	r2, [r7, #24]
 800d54c:	0151      	lsls	r1, r2, #5
 800d54e:	69fa      	ldr	r2, [r7, #28]
 800d550:	440a      	add	r2, r1
 800d552:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d556:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d55a:	6113      	str	r3, [r2, #16]
 800d55c:	e037      	b.n	800d5ce <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	691a      	ldr	r2, [r3, #16]
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	4413      	add	r3, r2
 800d568:	1e5a      	subs	r2, r3, #1
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d572:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	689b      	ldr	r3, [r3, #8]
 800d578:	8afa      	ldrh	r2, [r7, #22]
 800d57a:	fb03 f202 	mul.w	r2, r3, r2
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	015a      	lsls	r2, r3, #5
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	4413      	add	r3, r2
 800d58a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d58e:	691a      	ldr	r2, [r3, #16]
 800d590:	8afb      	ldrh	r3, [r7, #22]
 800d592:	04d9      	lsls	r1, r3, #19
 800d594:	4b39      	ldr	r3, [pc, #228]	@ (800d67c <USB_EPStartXfer+0x544>)
 800d596:	400b      	ands	r3, r1
 800d598:	69b9      	ldr	r1, [r7, #24]
 800d59a:	0148      	lsls	r0, r1, #5
 800d59c:	69f9      	ldr	r1, [r7, #28]
 800d59e:	4401      	add	r1, r0
 800d5a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	015a      	lsls	r2, r3, #5
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5b4:	691a      	ldr	r2, [r3, #16]
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	6a1b      	ldr	r3, [r3, #32]
 800d5ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5be:	69b9      	ldr	r1, [r7, #24]
 800d5c0:	0148      	lsls	r0, r1, #5
 800d5c2:	69f9      	ldr	r1, [r7, #28]
 800d5c4:	4401      	add	r1, r0
 800d5c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d5ce:	79fb      	ldrb	r3, [r7, #7]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d10d      	bne.n	800d5f0 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d009      	beq.n	800d5f0 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	68d9      	ldr	r1, [r3, #12]
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	015a      	lsls	r2, r3, #5
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5ec:	460a      	mov	r2, r1
 800d5ee:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	791b      	ldrb	r3, [r3, #4]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d128      	bne.n	800d64a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d604:	2b00      	cmp	r3, #0
 800d606:	d110      	bne.n	800d62a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	015a      	lsls	r2, r3, #5
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	4413      	add	r3, r2
 800d610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	69ba      	ldr	r2, [r7, #24]
 800d618:	0151      	lsls	r1, r2, #5
 800d61a:	69fa      	ldr	r2, [r7, #28]
 800d61c:	440a      	add	r2, r1
 800d61e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d622:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d626:	6013      	str	r3, [r2, #0]
 800d628:	e00f      	b.n	800d64a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	015a      	lsls	r2, r3, #5
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	4413      	add	r3, r2
 800d632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	69ba      	ldr	r2, [r7, #24]
 800d63a:	0151      	lsls	r1, r2, #5
 800d63c:	69fa      	ldr	r2, [r7, #28]
 800d63e:	440a      	add	r2, r1
 800d640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d648:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	015a      	lsls	r2, r3, #5
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	4413      	add	r3, r2
 800d652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	69ba      	ldr	r2, [r7, #24]
 800d65a:	0151      	lsls	r1, r2, #5
 800d65c:	69fa      	ldr	r2, [r7, #28]
 800d65e:	440a      	add	r2, r1
 800d660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d664:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d668:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d66a:	2300      	movs	r3, #0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3720      	adds	r7, #32
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	fff80000 	.word	0xfff80000
 800d678:	e007ffff 	.word	0xe007ffff
 800d67c:	1ff80000 	.word	0x1ff80000

0800d680 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d680:	b480      	push	{r7}
 800d682:	b087      	sub	sp, #28
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d68a:	2300      	movs	r3, #0
 800d68c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	785b      	ldrb	r3, [r3, #1]
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d14a      	bne.n	800d734 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	015a      	lsls	r2, r3, #5
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	4413      	add	r3, r2
 800d6a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d6b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d6b6:	f040 8086 	bne.w	800d7c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	015a      	lsls	r2, r3, #5
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	7812      	ldrb	r2, [r2, #0]
 800d6ce:	0151      	lsls	r1, r2, #5
 800d6d0:	693a      	ldr	r2, [r7, #16]
 800d6d2:	440a      	add	r2, r1
 800d6d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d6dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	015a      	lsls	r2, r3, #5
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	7812      	ldrb	r2, [r2, #0]
 800d6f2:	0151      	lsls	r1, r2, #5
 800d6f4:	693a      	ldr	r2, [r7, #16]
 800d6f6:	440a      	add	r2, r1
 800d6f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d700:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	3301      	adds	r3, #1
 800d706:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d70e:	4293      	cmp	r3, r2
 800d710:	d902      	bls.n	800d718 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d712:	2301      	movs	r3, #1
 800d714:	75fb      	strb	r3, [r7, #23]
          break;
 800d716:	e056      	b.n	800d7c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	015a      	lsls	r2, r3, #5
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	4413      	add	r3, r2
 800d722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d72c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d730:	d0e7      	beq.n	800d702 <USB_EPStopXfer+0x82>
 800d732:	e048      	b.n	800d7c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	015a      	lsls	r2, r3, #5
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	4413      	add	r3, r2
 800d73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d74c:	d13b      	bne.n	800d7c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	015a      	lsls	r2, r3, #5
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	4413      	add	r3, r2
 800d758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	7812      	ldrb	r2, [r2, #0]
 800d762:	0151      	lsls	r1, r2, #5
 800d764:	693a      	ldr	r2, [r7, #16]
 800d766:	440a      	add	r2, r1
 800d768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d76c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d770:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	015a      	lsls	r2, r3, #5
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	4413      	add	r3, r2
 800d77c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	7812      	ldrb	r2, [r2, #0]
 800d786:	0151      	lsls	r1, r2, #5
 800d788:	693a      	ldr	r2, [r7, #16]
 800d78a:	440a      	add	r2, r1
 800d78c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d790:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d794:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	3301      	adds	r3, #1
 800d79a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d902      	bls.n	800d7ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	75fb      	strb	r3, [r7, #23]
          break;
 800d7aa:	e00c      	b.n	800d7c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	015a      	lsls	r2, r3, #5
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d7c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d7c4:	d0e7      	beq.n	800d796 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	371c      	adds	r7, #28
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b089      	sub	sp, #36	@ 0x24
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	4611      	mov	r1, r2
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	71fb      	strb	r3, [r7, #7]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d7f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d123      	bne.n	800d842 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d7fa:	88bb      	ldrh	r3, [r7, #4]
 800d7fc:	3303      	adds	r3, #3
 800d7fe:	089b      	lsrs	r3, r3, #2
 800d800:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d802:	2300      	movs	r3, #0
 800d804:	61bb      	str	r3, [r7, #24]
 800d806:	e018      	b.n	800d83a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d808:	79fb      	ldrb	r3, [r7, #7]
 800d80a:	031a      	lsls	r2, r3, #12
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	4413      	add	r3, r2
 800d810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d814:	461a      	mov	r2, r3
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	3301      	adds	r3, #1
 800d820:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	3301      	adds	r3, #1
 800d826:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	3301      	adds	r3, #1
 800d82c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	3301      	adds	r3, #1
 800d832:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	3301      	adds	r3, #1
 800d838:	61bb      	str	r3, [r7, #24]
 800d83a:	69ba      	ldr	r2, [r7, #24]
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d3e2      	bcc.n	800d808 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d842:	2300      	movs	r3, #0
}
 800d844:	4618      	mov	r0, r3
 800d846:	3724      	adds	r7, #36	@ 0x24
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d850:	b480      	push	{r7}
 800d852:	b08b      	sub	sp, #44	@ 0x2c
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	4613      	mov	r3, r2
 800d85c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d866:	88fb      	ldrh	r3, [r7, #6]
 800d868:	089b      	lsrs	r3, r3, #2
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d86e:	88fb      	ldrh	r3, [r7, #6]
 800d870:	f003 0303 	and.w	r3, r3, #3
 800d874:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d876:	2300      	movs	r3, #0
 800d878:	623b      	str	r3, [r7, #32]
 800d87a:	e014      	b.n	800d8a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d886:	601a      	str	r2, [r3, #0]
    pDest++;
 800d888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d88a:	3301      	adds	r3, #1
 800d88c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d890:	3301      	adds	r3, #1
 800d892:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d896:	3301      	adds	r3, #1
 800d898:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89c:	3301      	adds	r3, #1
 800d89e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d8a0:	6a3b      	ldr	r3, [r7, #32]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	623b      	str	r3, [r7, #32]
 800d8a6:	6a3a      	ldr	r2, [r7, #32]
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d3e6      	bcc.n	800d87c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d8ae:	8bfb      	ldrh	r3, [r7, #30]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d01e      	beq.n	800d8f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8be:	461a      	mov	r2, r3
 800d8c0:	f107 0310 	add.w	r3, r7, #16
 800d8c4:	6812      	ldr	r2, [r2, #0]
 800d8c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d8c8:	693a      	ldr	r2, [r7, #16]
 800d8ca:	6a3b      	ldr	r3, [r7, #32]
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d8d4:	b2da      	uxtb	r2, r3
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d8:	701a      	strb	r2, [r3, #0]
      i++;
 800d8da:	6a3b      	ldr	r3, [r7, #32]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	623b      	str	r3, [r7, #32]
      pDest++;
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d8e6:	8bfb      	ldrh	r3, [r7, #30]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d8ec:	8bfb      	ldrh	r3, [r7, #30]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1ea      	bne.n	800d8c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	372c      	adds	r7, #44	@ 0x2c
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d900:	b480      	push	{r7}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	785b      	ldrb	r3, [r3, #1]
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d12c      	bne.n	800d976 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	015a      	lsls	r2, r3, #5
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	4413      	add	r3, r2
 800d924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	db12      	blt.n	800d954 <USB_EPSetStall+0x54>
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00f      	beq.n	800d954 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	015a      	lsls	r2, r3, #5
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	4413      	add	r3, r2
 800d93c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	0151      	lsls	r1, r2, #5
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	440a      	add	r2, r1
 800d94a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d94e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d952:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	015a      	lsls	r2, r3, #5
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	4413      	add	r3, r2
 800d95c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	0151      	lsls	r1, r2, #5
 800d966:	68fa      	ldr	r2, [r7, #12]
 800d968:	440a      	add	r2, r1
 800d96a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d96e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d972:	6013      	str	r3, [r2, #0]
 800d974:	e02b      	b.n	800d9ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	015a      	lsls	r2, r3, #5
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	4413      	add	r3, r2
 800d97e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	db12      	blt.n	800d9ae <USB_EPSetStall+0xae>
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00f      	beq.n	800d9ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	015a      	lsls	r2, r3, #5
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	4413      	add	r3, r2
 800d996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	0151      	lsls	r1, r2, #5
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	440a      	add	r2, r1
 800d9a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d9ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	015a      	lsls	r2, r3, #5
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	0151      	lsls	r1, r2, #5
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	440a      	add	r2, r1
 800d9c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d9cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	785b      	ldrb	r3, [r3, #1]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d128      	bne.n	800da4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	015a      	lsls	r2, r3, #5
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	4413      	add	r3, r2
 800da00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	0151      	lsls	r1, r2, #5
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	440a      	add	r2, r1
 800da0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800da16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	791b      	ldrb	r3, [r3, #4]
 800da1c:	2b03      	cmp	r3, #3
 800da1e:	d003      	beq.n	800da28 <USB_EPClearStall+0x4c>
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	791b      	ldrb	r3, [r3, #4]
 800da24:	2b02      	cmp	r3, #2
 800da26:	d138      	bne.n	800da9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	015a      	lsls	r2, r3, #5
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4413      	add	r3, r2
 800da30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68ba      	ldr	r2, [r7, #8]
 800da38:	0151      	lsls	r1, r2, #5
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	440a      	add	r2, r1
 800da3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800da46:	6013      	str	r3, [r2, #0]
 800da48:	e027      	b.n	800da9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	015a      	lsls	r2, r3, #5
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	4413      	add	r3, r2
 800da52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	0151      	lsls	r1, r2, #5
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	440a      	add	r2, r1
 800da60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800da68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	791b      	ldrb	r3, [r3, #4]
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d003      	beq.n	800da7a <USB_EPClearStall+0x9e>
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	791b      	ldrb	r3, [r3, #4]
 800da76:	2b02      	cmp	r3, #2
 800da78:	d10f      	bne.n	800da9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	015a      	lsls	r2, r3, #5
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	4413      	add	r3, r2
 800da82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	68ba      	ldr	r2, [r7, #8]
 800da8a:	0151      	lsls	r1, r2, #5
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	440a      	add	r2, r1
 800da90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800da98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3714      	adds	r7, #20
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dac6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800daca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	78fb      	ldrb	r3, [r7, #3]
 800dad6:	011b      	lsls	r3, r3, #4
 800dad8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800dadc:	68f9      	ldr	r1, [r7, #12]
 800dade:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dae2:	4313      	orrs	r3, r2
 800dae4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3714      	adds	r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db0e:	f023 0303 	bic.w	r3, r3, #3
 800db12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db22:	f023 0302 	bic.w	r3, r3, #2
 800db26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db28:	2300      	movs	r3, #0
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800db36:	b480      	push	{r7}
 800db38:	b085      	sub	sp, #20
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db50:	f023 0303 	bic.w	r3, r3, #3
 800db54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db64:	f043 0302 	orr.w	r3, r3, #2
 800db68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db6a:	2300      	movs	r3, #0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	695b      	ldr	r3, [r3, #20]
 800db84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	699b      	ldr	r3, [r3, #24]
 800db8a:	68fa      	ldr	r2, [r7, #12]
 800db8c:	4013      	ands	r3, r2
 800db8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800db90:	68fb      	ldr	r3, [r7, #12]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3714      	adds	r7, #20
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr

0800db9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800db9e:	b480      	push	{r7}
 800dba0:	b085      	sub	sp, #20
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbb0:	699b      	ldr	r3, [r3, #24]
 800dbb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbba:	69db      	ldr	r3, [r3, #28]
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	0c1b      	lsrs	r3, r3, #16
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3714      	adds	r7, #20
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800dbd2:	b480      	push	{r7}
 800dbd4:	b085      	sub	sp, #20
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbe4:	699b      	ldr	r3, [r3, #24]
 800dbe6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbee:	69db      	ldr	r3, [r3, #28]
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	4013      	ands	r3, r2
 800dbf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	b29b      	uxth	r3, r3
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr

0800dc06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc06:	b480      	push	{r7}
 800dc08:	b085      	sub	sp, #20
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	460b      	mov	r3, r1
 800dc10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dc16:	78fb      	ldrb	r3, [r7, #3]
 800dc18:	015a      	lsls	r2, r3, #5
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc2c:	695b      	ldr	r3, [r3, #20]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	4013      	ands	r3, r2
 800dc32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc34:	68bb      	ldr	r3, [r7, #8]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3714      	adds	r7, #20
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b087      	sub	sp, #28
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc58:	691b      	ldr	r3, [r3, #16]
 800dc5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dc66:	78fb      	ldrb	r3, [r7, #3]
 800dc68:	f003 030f 	and.w	r3, r3, #15
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	fa22 f303 	lsr.w	r3, r2, r3
 800dc72:	01db      	lsls	r3, r3, #7
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dc7c:	78fb      	ldrb	r3, [r7, #3]
 800dc7e:	015a      	lsls	r2, r3, #5
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	4413      	add	r3, r2
 800dc84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc90:	68bb      	ldr	r3, [r7, #8]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	371c      	adds	r7, #28
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr

0800dc9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc9e:	b480      	push	{r7}
 800dca0:	b083      	sub	sp, #12
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	695b      	ldr	r3, [r3, #20]
 800dcaa:	f003 0301 	and.w	r3, r3, #1
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	370c      	adds	r7, #12
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
	...

0800dcbc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4b09      	ldr	r3, [pc, #36]	@ (800dd00 <USB_ActivateSetup+0x44>)
 800dcda:	4013      	ands	r3, r2
 800dcdc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dcec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	fffff800 	.word	0xfffff800

0800dd04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b087      	sub	sp, #28
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	607a      	str	r2, [r7, #4]
 800dd10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	333c      	adds	r3, #60	@ 0x3c
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	4a26      	ldr	r2, [pc, #152]	@ (800ddbc <USB_EP0_OutStart+0xb8>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d90a      	bls.n	800dd3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dd34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd38:	d101      	bne.n	800dd3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	e037      	b.n	800ddae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd44:	461a      	mov	r2, r3
 800dd46:	2300      	movs	r3, #0
 800dd48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd64:	691b      	ldr	r3, [r3, #16]
 800dd66:	697a      	ldr	r2, [r7, #20]
 800dd68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd6c:	f043 0318 	orr.w	r3, r3, #24
 800dd70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd80:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800dd84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dd86:	7afb      	ldrb	r3, [r7, #11]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d10f      	bne.n	800ddac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd92:	461a      	mov	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	697a      	ldr	r2, [r7, #20]
 800dda2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dda6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ddaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	371c      	adds	r7, #28
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	4f54300a 	.word	0x4f54300a

0800ddc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ddd8:	d901      	bls.n	800ddde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ddda:	2303      	movs	r3, #3
 800dddc:	e01b      	b.n	800de16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	691b      	ldr	r3, [r3, #16]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	daf2      	bge.n	800ddcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dde6:	2300      	movs	r3, #0
 800dde8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	691b      	ldr	r3, [r3, #16]
 800ddee:	f043 0201 	orr.w	r2, r3, #1
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de02:	d901      	bls.n	800de08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800de04:	2303      	movs	r3, #3
 800de06:	e006      	b.n	800de16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	691b      	ldr	r3, [r3, #16]
 800de0c:	f003 0301 	and.w	r3, r3, #1
 800de10:	2b01      	cmp	r3, #1
 800de12:	d0f0      	beq.n	800ddf6 <USB_CoreReset+0x36>

  return HAL_OK;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3714      	adds	r7, #20
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
	...

0800de24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de30:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800de34:	f002 fcb8 	bl	80107a8 <USBD_static_malloc>
 800de38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d109      	bne.n	800de54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	32b0      	adds	r2, #176	@ 0xb0
 800de4a:	2100      	movs	r1, #0
 800de4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800de50:	2302      	movs	r3, #2
 800de52:	e0d4      	b.n	800dffe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800de54:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800de58:	2100      	movs	r1, #0
 800de5a:	68f8      	ldr	r0, [r7, #12]
 800de5c:	f002 fce8 	bl	8010830 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	32b0      	adds	r2, #176	@ 0xb0
 800de6a:	68f9      	ldr	r1, [r7, #12]
 800de6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	32b0      	adds	r2, #176	@ 0xb0
 800de7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	7c1b      	ldrb	r3, [r3, #16]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d138      	bne.n	800defe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de8c:	4b5e      	ldr	r3, [pc, #376]	@ (800e008 <USBD_CDC_Init+0x1e4>)
 800de8e:	7819      	ldrb	r1, [r3, #0]
 800de90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de94:	2202      	movs	r2, #2
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f002 fb63 	bl	8010562 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de9c:	4b5a      	ldr	r3, [pc, #360]	@ (800e008 <USBD_CDC_Init+0x1e4>)
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	f003 020f 	and.w	r2, r3, #15
 800dea4:	6879      	ldr	r1, [r7, #4]
 800dea6:	4613      	mov	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	4413      	add	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	440b      	add	r3, r1
 800deb0:	3324      	adds	r3, #36	@ 0x24
 800deb2:	2201      	movs	r2, #1
 800deb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800deb6:	4b55      	ldr	r3, [pc, #340]	@ (800e00c <USBD_CDC_Init+0x1e8>)
 800deb8:	7819      	ldrb	r1, [r3, #0]
 800deba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800debe:	2202      	movs	r2, #2
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f002 fb4e 	bl	8010562 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dec6:	4b51      	ldr	r3, [pc, #324]	@ (800e00c <USBD_CDC_Init+0x1e8>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	f003 020f 	and.w	r2, r3, #15
 800dece:	6879      	ldr	r1, [r7, #4]
 800ded0:	4613      	mov	r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	4413      	add	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	440b      	add	r3, r1
 800deda:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dede:	2201      	movs	r2, #1
 800dee0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dee2:	4b4b      	ldr	r3, [pc, #300]	@ (800e010 <USBD_CDC_Init+0x1ec>)
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	f003 020f 	and.w	r2, r3, #15
 800deea:	6879      	ldr	r1, [r7, #4]
 800deec:	4613      	mov	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4413      	add	r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	440b      	add	r3, r1
 800def6:	3326      	adds	r3, #38	@ 0x26
 800def8:	2210      	movs	r2, #16
 800defa:	801a      	strh	r2, [r3, #0]
 800defc:	e035      	b.n	800df6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800defe:	4b42      	ldr	r3, [pc, #264]	@ (800e008 <USBD_CDC_Init+0x1e4>)
 800df00:	7819      	ldrb	r1, [r3, #0]
 800df02:	2340      	movs	r3, #64	@ 0x40
 800df04:	2202      	movs	r2, #2
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f002 fb2b 	bl	8010562 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800df0c:	4b3e      	ldr	r3, [pc, #248]	@ (800e008 <USBD_CDC_Init+0x1e4>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	f003 020f 	and.w	r2, r3, #15
 800df14:	6879      	ldr	r1, [r7, #4]
 800df16:	4613      	mov	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	4413      	add	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	440b      	add	r3, r1
 800df20:	3324      	adds	r3, #36	@ 0x24
 800df22:	2201      	movs	r2, #1
 800df24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df26:	4b39      	ldr	r3, [pc, #228]	@ (800e00c <USBD_CDC_Init+0x1e8>)
 800df28:	7819      	ldrb	r1, [r3, #0]
 800df2a:	2340      	movs	r3, #64	@ 0x40
 800df2c:	2202      	movs	r2, #2
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f002 fb17 	bl	8010562 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df34:	4b35      	ldr	r3, [pc, #212]	@ (800e00c <USBD_CDC_Init+0x1e8>)
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	f003 020f 	and.w	r2, r3, #15
 800df3c:	6879      	ldr	r1, [r7, #4]
 800df3e:	4613      	mov	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4413      	add	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	440b      	add	r3, r1
 800df48:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800df4c:	2201      	movs	r2, #1
 800df4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df50:	4b2f      	ldr	r3, [pc, #188]	@ (800e010 <USBD_CDC_Init+0x1ec>)
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	f003 020f 	and.w	r2, r3, #15
 800df58:	6879      	ldr	r1, [r7, #4]
 800df5a:	4613      	mov	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	4413      	add	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	440b      	add	r3, r1
 800df64:	3326      	adds	r3, #38	@ 0x26
 800df66:	2210      	movs	r2, #16
 800df68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df6a:	4b29      	ldr	r3, [pc, #164]	@ (800e010 <USBD_CDC_Init+0x1ec>)
 800df6c:	7819      	ldrb	r1, [r3, #0]
 800df6e:	2308      	movs	r3, #8
 800df70:	2203      	movs	r2, #3
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f002 faf5 	bl	8010562 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800df78:	4b25      	ldr	r3, [pc, #148]	@ (800e010 <USBD_CDC_Init+0x1ec>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	f003 020f 	and.w	r2, r3, #15
 800df80:	6879      	ldr	r1, [r7, #4]
 800df82:	4613      	mov	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	440b      	add	r3, r1
 800df8c:	3324      	adds	r3, #36	@ 0x24
 800df8e:	2201      	movs	r2, #1
 800df90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2200      	movs	r2, #0
 800df96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	33b0      	adds	r3, #176	@ 0xb0
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	4413      	add	r3, r2
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d101      	bne.n	800dfcc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dfc8:	2302      	movs	r3, #2
 800dfca:	e018      	b.n	800dffe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	7c1b      	ldrb	r3, [r3, #16]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10a      	bne.n	800dfea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dfd4:	4b0d      	ldr	r3, [pc, #52]	@ (800e00c <USBD_CDC_Init+0x1e8>)
 800dfd6:	7819      	ldrb	r1, [r3, #0]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dfde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f002 fbac 	bl	8010740 <USBD_LL_PrepareReceive>
 800dfe8:	e008      	b.n	800dffc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dfea:	4b08      	ldr	r3, [pc, #32]	@ (800e00c <USBD_CDC_Init+0x1e8>)
 800dfec:	7819      	ldrb	r1, [r3, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dff4:	2340      	movs	r3, #64	@ 0x40
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f002 fba2 	bl	8010740 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	24000097 	.word	0x24000097
 800e00c:	24000098 	.word	0x24000098
 800e010:	24000099 	.word	0x24000099

0800e014 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	460b      	mov	r3, r1
 800e01e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e020:	4b3a      	ldr	r3, [pc, #232]	@ (800e10c <USBD_CDC_DeInit+0xf8>)
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	4619      	mov	r1, r3
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f002 fac1 	bl	80105ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e02c:	4b37      	ldr	r3, [pc, #220]	@ (800e10c <USBD_CDC_DeInit+0xf8>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	f003 020f 	and.w	r2, r3, #15
 800e034:	6879      	ldr	r1, [r7, #4]
 800e036:	4613      	mov	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4413      	add	r3, r2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	440b      	add	r3, r1
 800e040:	3324      	adds	r3, #36	@ 0x24
 800e042:	2200      	movs	r2, #0
 800e044:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e046:	4b32      	ldr	r3, [pc, #200]	@ (800e110 <USBD_CDC_DeInit+0xfc>)
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	4619      	mov	r1, r3
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f002 faae 	bl	80105ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e052:	4b2f      	ldr	r3, [pc, #188]	@ (800e110 <USBD_CDC_DeInit+0xfc>)
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	f003 020f 	and.w	r2, r3, #15
 800e05a:	6879      	ldr	r1, [r7, #4]
 800e05c:	4613      	mov	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4413      	add	r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	440b      	add	r3, r1
 800e066:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e06a:	2200      	movs	r2, #0
 800e06c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e06e:	4b29      	ldr	r3, [pc, #164]	@ (800e114 <USBD_CDC_DeInit+0x100>)
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f002 fa9a 	bl	80105ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e07a:	4b26      	ldr	r3, [pc, #152]	@ (800e114 <USBD_CDC_DeInit+0x100>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	f003 020f 	and.w	r2, r3, #15
 800e082:	6879      	ldr	r1, [r7, #4]
 800e084:	4613      	mov	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	440b      	add	r3, r1
 800e08e:	3324      	adds	r3, #36	@ 0x24
 800e090:	2200      	movs	r2, #0
 800e092:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e094:	4b1f      	ldr	r3, [pc, #124]	@ (800e114 <USBD_CDC_DeInit+0x100>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	f003 020f 	and.w	r2, r3, #15
 800e09c:	6879      	ldr	r1, [r7, #4]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	4413      	add	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	440b      	add	r3, r1
 800e0a8:	3326      	adds	r3, #38	@ 0x26
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	32b0      	adds	r2, #176	@ 0xb0
 800e0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d01f      	beq.n	800e100 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	33b0      	adds	r3, #176	@ 0xb0
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	4413      	add	r3, r2
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	32b0      	adds	r2, #176	@ 0xb0
 800e0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f002 fb6e 	bl	80107c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	32b0      	adds	r2, #176	@ 0xb0
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3708      	adds	r7, #8
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	24000097 	.word	0x24000097
 800e110:	24000098 	.word	0x24000098
 800e114:	24000099 	.word	0x24000099

0800e118 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b086      	sub	sp, #24
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	32b0      	adds	r2, #176	@ 0xb0
 800e12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e130:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e132:	2300      	movs	r3, #0
 800e134:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e136:	2300      	movs	r3, #0
 800e138:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d101      	bne.n	800e148 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e144:	2303      	movs	r3, #3
 800e146:	e0bf      	b.n	800e2c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e150:	2b00      	cmp	r3, #0
 800e152:	d050      	beq.n	800e1f6 <USBD_CDC_Setup+0xde>
 800e154:	2b20      	cmp	r3, #32
 800e156:	f040 80af 	bne.w	800e2b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	88db      	ldrh	r3, [r3, #6]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d03a      	beq.n	800e1d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	b25b      	sxtb	r3, r3
 800e168:	2b00      	cmp	r3, #0
 800e16a:	da1b      	bge.n	800e1a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	33b0      	adds	r3, #176	@ 0xb0
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e182:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	88d2      	ldrh	r2, [r2, #6]
 800e188:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	88db      	ldrh	r3, [r3, #6]
 800e18e:	2b07      	cmp	r3, #7
 800e190:	bf28      	it	cs
 800e192:	2307      	movcs	r3, #7
 800e194:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	89fa      	ldrh	r2, [r7, #14]
 800e19a:	4619      	mov	r1, r3
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f001 fd7d 	bl	800fc9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e1a2:	e090      	b.n	800e2c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	785a      	ldrb	r2, [r3, #1]
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	88db      	ldrh	r3, [r3, #6]
 800e1b2:	2b3f      	cmp	r3, #63	@ 0x3f
 800e1b4:	d803      	bhi.n	800e1be <USBD_CDC_Setup+0xa6>
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	88db      	ldrh	r3, [r3, #6]
 800e1ba:	b2da      	uxtb	r2, r3
 800e1bc:	e000      	b.n	800e1c0 <USBD_CDC_Setup+0xa8>
 800e1be:	2240      	movs	r2, #64	@ 0x40
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e1c6:	6939      	ldr	r1, [r7, #16]
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f001 fd8f 	bl	800fcf4 <USBD_CtlPrepareRx>
      break;
 800e1d6:	e076      	b.n	800e2c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	33b0      	adds	r3, #176	@ 0xb0
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4413      	add	r3, r2
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	683a      	ldr	r2, [r7, #0]
 800e1ec:	7850      	ldrb	r0, [r2, #1]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	4798      	blx	r3
      break;
 800e1f4:	e067      	b.n	800e2c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	785b      	ldrb	r3, [r3, #1]
 800e1fa:	2b0b      	cmp	r3, #11
 800e1fc:	d851      	bhi.n	800e2a2 <USBD_CDC_Setup+0x18a>
 800e1fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e204 <USBD_CDC_Setup+0xec>)
 800e200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e204:	0800e235 	.word	0x0800e235
 800e208:	0800e2b1 	.word	0x0800e2b1
 800e20c:	0800e2a3 	.word	0x0800e2a3
 800e210:	0800e2a3 	.word	0x0800e2a3
 800e214:	0800e2a3 	.word	0x0800e2a3
 800e218:	0800e2a3 	.word	0x0800e2a3
 800e21c:	0800e2a3 	.word	0x0800e2a3
 800e220:	0800e2a3 	.word	0x0800e2a3
 800e224:	0800e2a3 	.word	0x0800e2a3
 800e228:	0800e2a3 	.word	0x0800e2a3
 800e22c:	0800e25f 	.word	0x0800e25f
 800e230:	0800e289 	.word	0x0800e289
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	2b03      	cmp	r3, #3
 800e23e:	d107      	bne.n	800e250 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e240:	f107 030a 	add.w	r3, r7, #10
 800e244:	2202      	movs	r2, #2
 800e246:	4619      	mov	r1, r3
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f001 fd27 	bl	800fc9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e24e:	e032      	b.n	800e2b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e250:	6839      	ldr	r1, [r7, #0]
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f001 fca5 	bl	800fba2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e258:	2303      	movs	r3, #3
 800e25a:	75fb      	strb	r3, [r7, #23]
          break;
 800e25c:	e02b      	b.n	800e2b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e264:	b2db      	uxtb	r3, r3
 800e266:	2b03      	cmp	r3, #3
 800e268:	d107      	bne.n	800e27a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e26a:	f107 030d 	add.w	r3, r7, #13
 800e26e:	2201      	movs	r2, #1
 800e270:	4619      	mov	r1, r3
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f001 fd12 	bl	800fc9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e278:	e01d      	b.n	800e2b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f001 fc90 	bl	800fba2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e282:	2303      	movs	r3, #3
 800e284:	75fb      	strb	r3, [r7, #23]
          break;
 800e286:	e016      	b.n	800e2b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	2b03      	cmp	r3, #3
 800e292:	d00f      	beq.n	800e2b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e294:	6839      	ldr	r1, [r7, #0]
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f001 fc83 	bl	800fba2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e29c:	2303      	movs	r3, #3
 800e29e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e2a0:	e008      	b.n	800e2b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e2a2:	6839      	ldr	r1, [r7, #0]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f001 fc7c 	bl	800fba2 <USBD_CtlError>
          ret = USBD_FAIL;
 800e2aa:	2303      	movs	r3, #3
 800e2ac:	75fb      	strb	r3, [r7, #23]
          break;
 800e2ae:	e002      	b.n	800e2b6 <USBD_CDC_Setup+0x19e>
          break;
 800e2b0:	bf00      	nop
 800e2b2:	e008      	b.n	800e2c6 <USBD_CDC_Setup+0x1ae>
          break;
 800e2b4:	bf00      	nop
      }
      break;
 800e2b6:	e006      	b.n	800e2c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e2b8:	6839      	ldr	r1, [r7, #0]
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f001 fc71 	bl	800fba2 <USBD_CtlError>
      ret = USBD_FAIL;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	75fb      	strb	r3, [r7, #23]
      break;
 800e2c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800e2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	460b      	mov	r3, r1
 800e2da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	32b0      	adds	r2, #176	@ 0xb0
 800e2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d101      	bne.n	800e2fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e2f6:	2303      	movs	r3, #3
 800e2f8:	e065      	b.n	800e3c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	32b0      	adds	r2, #176	@ 0xb0
 800e304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e308:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e30a:	78fb      	ldrb	r3, [r7, #3]
 800e30c:	f003 020f 	and.w	r2, r3, #15
 800e310:	6879      	ldr	r1, [r7, #4]
 800e312:	4613      	mov	r3, r2
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4413      	add	r3, r2
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	440b      	add	r3, r1
 800e31c:	3318      	adds	r3, #24
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d02f      	beq.n	800e384 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e324:	78fb      	ldrb	r3, [r7, #3]
 800e326:	f003 020f 	and.w	r2, r3, #15
 800e32a:	6879      	ldr	r1, [r7, #4]
 800e32c:	4613      	mov	r3, r2
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	440b      	add	r3, r1
 800e336:	3318      	adds	r3, #24
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	78fb      	ldrb	r3, [r7, #3]
 800e33c:	f003 010f 	and.w	r1, r3, #15
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	460b      	mov	r3, r1
 800e344:	00db      	lsls	r3, r3, #3
 800e346:	440b      	add	r3, r1
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	4403      	add	r3, r0
 800e34c:	331c      	adds	r3, #28
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	fbb2 f1f3 	udiv	r1, r2, r3
 800e354:	fb01 f303 	mul.w	r3, r1, r3
 800e358:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d112      	bne.n	800e384 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e35e:	78fb      	ldrb	r3, [r7, #3]
 800e360:	f003 020f 	and.w	r2, r3, #15
 800e364:	6879      	ldr	r1, [r7, #4]
 800e366:	4613      	mov	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4413      	add	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	440b      	add	r3, r1
 800e370:	3318      	adds	r3, #24
 800e372:	2200      	movs	r2, #0
 800e374:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e376:	78f9      	ldrb	r1, [r7, #3]
 800e378:	2300      	movs	r3, #0
 800e37a:	2200      	movs	r2, #0
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f002 f9be 	bl	80106fe <USBD_LL_Transmit>
 800e382:	e01f      	b.n	800e3c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	2200      	movs	r2, #0
 800e388:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	33b0      	adds	r3, #176	@ 0xb0
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4413      	add	r3, r2
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	691b      	ldr	r3, [r3, #16]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d010      	beq.n	800e3c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	33b0      	adds	r3, #176	@ 0xb0
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e3c0:	78fa      	ldrb	r2, [r7, #3]
 800e3c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b084      	sub	sp, #16
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	32b0      	adds	r2, #176	@ 0xb0
 800e3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	32b0      	adds	r2, #176	@ 0xb0
 800e3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d101      	bne.n	800e400 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e3fc:	2303      	movs	r3, #3
 800e3fe:	e01a      	b.n	800e436 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e400:	78fb      	ldrb	r3, [r7, #3]
 800e402:	4619      	mov	r1, r3
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f002 f9bc 	bl	8010782 <USBD_LL_GetRxDataSize>
 800e40a:	4602      	mov	r2, r0
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	33b0      	adds	r3, #176	@ 0xb0
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	4413      	add	r3, r2
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e430:	4611      	mov	r1, r2
 800e432:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b084      	sub	sp, #16
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	32b0      	adds	r2, #176	@ 0xb0
 800e450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e454:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d101      	bne.n	800e460 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e45c:	2303      	movs	r3, #3
 800e45e:	e024      	b.n	800e4aa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	33b0      	adds	r3, #176	@ 0xb0
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4413      	add	r3, r2
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d019      	beq.n	800e4a8 <USBD_CDC_EP0_RxReady+0x6a>
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e47a:	2bff      	cmp	r3, #255	@ 0xff
 800e47c:	d014      	beq.n	800e4a8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	33b0      	adds	r3, #176	@ 0xb0
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	4413      	add	r3, r2
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e496:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e49e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	22ff      	movs	r2, #255	@ 0xff
 800e4a4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
	...

0800e4b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e4bc:	2182      	movs	r1, #130	@ 0x82
 800e4be:	4818      	ldr	r0, [pc, #96]	@ (800e520 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4c0:	f000 fd0f 	bl	800eee2 <USBD_GetEpDesc>
 800e4c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	4815      	ldr	r0, [pc, #84]	@ (800e520 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4ca:	f000 fd0a 	bl	800eee2 <USBD_GetEpDesc>
 800e4ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e4d0:	2181      	movs	r1, #129	@ 0x81
 800e4d2:	4813      	ldr	r0, [pc, #76]	@ (800e520 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4d4:	f000 fd05 	bl	800eee2 <USBD_GetEpDesc>
 800e4d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d002      	beq.n	800e4e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	2210      	movs	r2, #16
 800e4e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d006      	beq.n	800e4fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4f4:	711a      	strb	r2, [r3, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d006      	beq.n	800e50e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2200      	movs	r2, #0
 800e504:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e508:	711a      	strb	r2, [r3, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2243      	movs	r2, #67	@ 0x43
 800e512:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e514:	4b02      	ldr	r3, [pc, #8]	@ (800e520 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e516:	4618      	mov	r0, r3
 800e518:	3718      	adds	r7, #24
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	24000054 	.word	0x24000054

0800e524 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e52c:	2182      	movs	r1, #130	@ 0x82
 800e52e:	4818      	ldr	r0, [pc, #96]	@ (800e590 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e530:	f000 fcd7 	bl	800eee2 <USBD_GetEpDesc>
 800e534:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e536:	2101      	movs	r1, #1
 800e538:	4815      	ldr	r0, [pc, #84]	@ (800e590 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e53a:	f000 fcd2 	bl	800eee2 <USBD_GetEpDesc>
 800e53e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e540:	2181      	movs	r1, #129	@ 0x81
 800e542:	4813      	ldr	r0, [pc, #76]	@ (800e590 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e544:	f000 fccd 	bl	800eee2 <USBD_GetEpDesc>
 800e548:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	2210      	movs	r2, #16
 800e554:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d006      	beq.n	800e56a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	2200      	movs	r2, #0
 800e560:	711a      	strb	r2, [r3, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f042 0202 	orr.w	r2, r2, #2
 800e568:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d006      	beq.n	800e57e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2200      	movs	r2, #0
 800e574:	711a      	strb	r2, [r3, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	f042 0202 	orr.w	r2, r2, #2
 800e57c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2243      	movs	r2, #67	@ 0x43
 800e582:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e584:	4b02      	ldr	r3, [pc, #8]	@ (800e590 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e586:	4618      	mov	r0, r3
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	24000054 	.word	0x24000054

0800e594 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e59c:	2182      	movs	r1, #130	@ 0x82
 800e59e:	4818      	ldr	r0, [pc, #96]	@ (800e600 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5a0:	f000 fc9f 	bl	800eee2 <USBD_GetEpDesc>
 800e5a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5a6:	2101      	movs	r1, #1
 800e5a8:	4815      	ldr	r0, [pc, #84]	@ (800e600 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5aa:	f000 fc9a 	bl	800eee2 <USBD_GetEpDesc>
 800e5ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5b0:	2181      	movs	r1, #129	@ 0x81
 800e5b2:	4813      	ldr	r0, [pc, #76]	@ (800e600 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5b4:	f000 fc95 	bl	800eee2 <USBD_GetEpDesc>
 800e5b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d002      	beq.n	800e5c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	2210      	movs	r2, #16
 800e5c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d006      	beq.n	800e5da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5d4:	711a      	strb	r2, [r3, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d006      	beq.n	800e5ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5e8:	711a      	strb	r2, [r3, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2243      	movs	r2, #67	@ 0x43
 800e5f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e5f4:	4b02      	ldr	r3, [pc, #8]	@ (800e600 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3718      	adds	r7, #24
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	24000054 	.word	0x24000054

0800e604 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e604:	b480      	push	{r7}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	220a      	movs	r2, #10
 800e610:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e612:	4b03      	ldr	r3, [pc, #12]	@ (800e620 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e614:	4618      	mov	r0, r3
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr
 800e620:	24000010 	.word	0x24000010

0800e624 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d101      	bne.n	800e638 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e634:	2303      	movs	r3, #3
 800e636:	e009      	b.n	800e64c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	33b0      	adds	r3, #176	@ 0xb0
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	4413      	add	r3, r2
 800e646:	683a      	ldr	r2, [r7, #0]
 800e648:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e64a:	2300      	movs	r3, #0
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e658:	b480      	push	{r7}
 800e65a:	b087      	sub	sp, #28
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	32b0      	adds	r2, #176	@ 0xb0
 800e66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e672:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d101      	bne.n	800e67e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e67a:	2303      	movs	r3, #3
 800e67c:	e008      	b.n	800e690 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	68ba      	ldr	r2, [r7, #8]
 800e682:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	371c      	adds	r7, #28
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	32b0      	adds	r2, #176	@ 0xb0
 800e6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e6bc:	2303      	movs	r3, #3
 800e6be:	e004      	b.n	800e6ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	683a      	ldr	r2, [r7, #0]
 800e6c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e6c8:	2300      	movs	r3, #0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3714      	adds	r7, #20
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr
	...

0800e6d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	32b0      	adds	r2, #176	@ 0xb0
 800e6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	32b0      	adds	r2, #176	@ 0xb0
 800e6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d101      	bne.n	800e706 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e702:	2303      	movs	r3, #3
 800e704:	e018      	b.n	800e738 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	7c1b      	ldrb	r3, [r3, #16]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d10a      	bne.n	800e724 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e70e:	4b0c      	ldr	r3, [pc, #48]	@ (800e740 <USBD_CDC_ReceivePacket+0x68>)
 800e710:	7819      	ldrb	r1, [r3, #0]
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e718:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f002 f80f 	bl	8010740 <USBD_LL_PrepareReceive>
 800e722:	e008      	b.n	800e736 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e724:	4b06      	ldr	r3, [pc, #24]	@ (800e740 <USBD_CDC_ReceivePacket+0x68>)
 800e726:	7819      	ldrb	r1, [r3, #0]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e72e:	2340      	movs	r3, #64	@ 0x40
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f002 f805 	bl	8010740 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e736:	2300      	movs	r3, #0
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3710      	adds	r7, #16
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	24000098 	.word	0x24000098

0800e744 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b086      	sub	sp, #24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	4613      	mov	r3, r2
 800e750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d101      	bne.n	800e75c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e758:	2303      	movs	r3, #3
 800e75a:	e01f      	b.n	800e79c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2200      	movs	r2, #0
 800e760:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d003      	beq.n	800e782 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2201      	movs	r2, #1
 800e786:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	79fa      	ldrb	r2, [r7, #7]
 800e78e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f001 fe79 	bl	8010488 <USBD_LL_Init>
 800e796:	4603      	mov	r3, r0
 800e798:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e79a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3718      	adds	r7, #24
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d101      	bne.n	800e7bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e7b8:	2303      	movs	r3, #3
 800e7ba:	e025      	b.n	800e808 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	683a      	ldr	r2, [r7, #0]
 800e7c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	32ae      	adds	r2, #174	@ 0xae
 800e7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d00f      	beq.n	800e7f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	32ae      	adds	r2, #174	@ 0xae
 800e7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7e8:	f107 020e 	add.w	r2, r7, #14
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	4798      	blx	r3
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f001 fe87 	bl	801052c <USBD_LL_Start>
 800e81e:	4603      	mov	r3, r0
}
 800e820:	4618      	mov	r0, r3
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e830:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e832:	4618      	mov	r0, r3
 800e834:	370c      	adds	r7, #12
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr

0800e83e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b084      	sub	sp, #16
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
 800e846:	460b      	mov	r3, r1
 800e848:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e84a:	2300      	movs	r3, #0
 800e84c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e854:	2b00      	cmp	r3, #0
 800e856:	d009      	beq.n	800e86c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	78fa      	ldrb	r2, [r7, #3]
 800e862:	4611      	mov	r1, r2
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	4798      	blx	r3
 800e868:	4603      	mov	r3, r0
 800e86a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b084      	sub	sp, #16
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	460b      	mov	r3, r1
 800e880:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e882:	2300      	movs	r3, #0
 800e884:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	78fa      	ldrb	r2, [r7, #3]
 800e890:	4611      	mov	r1, r2
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	4798      	blx	r3
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d001      	beq.n	800e8a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e89c:	2303      	movs	r3, #3
 800e89e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b084      	sub	sp, #16
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
 800e8b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e8ba:	6839      	ldr	r1, [r7, #0]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f001 f936 	bl	800fb2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e8de:	f003 031f 	and.w	r3, r3, #31
 800e8e2:	2b02      	cmp	r3, #2
 800e8e4:	d01a      	beq.n	800e91c <USBD_LL_SetupStage+0x72>
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	d822      	bhi.n	800e930 <USBD_LL_SetupStage+0x86>
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d002      	beq.n	800e8f4 <USBD_LL_SetupStage+0x4a>
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	d00a      	beq.n	800e908 <USBD_LL_SetupStage+0x5e>
 800e8f2:	e01d      	b.n	800e930 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 fb63 	bl	800efc8 <USBD_StdDevReq>
 800e902:	4603      	mov	r3, r0
 800e904:	73fb      	strb	r3, [r7, #15]
      break;
 800e906:	e020      	b.n	800e94a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e90e:	4619      	mov	r1, r3
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 fbcb 	bl	800f0ac <USBD_StdItfReq>
 800e916:	4603      	mov	r3, r0
 800e918:	73fb      	strb	r3, [r7, #15]
      break;
 800e91a:	e016      	b.n	800e94a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e922:	4619      	mov	r1, r3
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 fc2d 	bl	800f184 <USBD_StdEPReq>
 800e92a:	4603      	mov	r3, r0
 800e92c:	73fb      	strb	r3, [r7, #15]
      break;
 800e92e:	e00c      	b.n	800e94a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e936:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	4619      	mov	r1, r3
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f001 fe54 	bl	80105ec <USBD_LL_StallEP>
 800e944:	4603      	mov	r3, r0
 800e946:	73fb      	strb	r3, [r7, #15]
      break;
 800e948:	bf00      	nop
  }

  return ret;
 800e94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b086      	sub	sp, #24
 800e958:	af00      	add	r7, sp, #0
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	460b      	mov	r3, r1
 800e95e:	607a      	str	r2, [r7, #4]
 800e960:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e962:	2300      	movs	r3, #0
 800e964:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e966:	7afb      	ldrb	r3, [r7, #11]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d16e      	bne.n	800ea4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e972:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e97a:	2b03      	cmp	r3, #3
 800e97c:	f040 8098 	bne.w	800eab0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	689a      	ldr	r2, [r3, #8]
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d913      	bls.n	800e9b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	689a      	ldr	r2, [r3, #8]
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	1ad2      	subs	r2, r2, r3
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	68da      	ldr	r2, [r3, #12]
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	bf28      	it	cs
 800e9a6:	4613      	movcs	r3, r2
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	6879      	ldr	r1, [r7, #4]
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f001 f9be 	bl	800fd2e <USBD_CtlContinueRx>
 800e9b2:	e07d      	b.n	800eab0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e9ba:	f003 031f 	and.w	r3, r3, #31
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d014      	beq.n	800e9ec <USBD_LL_DataOutStage+0x98>
 800e9c2:	2b02      	cmp	r3, #2
 800e9c4:	d81d      	bhi.n	800ea02 <USBD_LL_DataOutStage+0xae>
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d002      	beq.n	800e9d0 <USBD_LL_DataOutStage+0x7c>
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d003      	beq.n	800e9d6 <USBD_LL_DataOutStage+0x82>
 800e9ce:	e018      	b.n	800ea02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	75bb      	strb	r3, [r7, #22]
            break;
 800e9d4:	e018      	b.n	800ea08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	4619      	mov	r1, r3
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f000 fa64 	bl	800eeae <USBD_CoreFindIF>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	75bb      	strb	r3, [r7, #22]
            break;
 800e9ea:	e00d      	b.n	800ea08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f000 fa66 	bl	800eec8 <USBD_CoreFindEP>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	75bb      	strb	r3, [r7, #22]
            break;
 800ea00:	e002      	b.n	800ea08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ea02:	2300      	movs	r3, #0
 800ea04:	75bb      	strb	r3, [r7, #22]
            break;
 800ea06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ea08:	7dbb      	ldrb	r3, [r7, #22]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d119      	bne.n	800ea42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	2b03      	cmp	r3, #3
 800ea18:	d113      	bne.n	800ea42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ea1a:	7dba      	ldrb	r2, [r7, #22]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	32ae      	adds	r2, #174	@ 0xae
 800ea20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea24:	691b      	ldr	r3, [r3, #16]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00b      	beq.n	800ea42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ea2a:	7dba      	ldrb	r2, [r7, #22]
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ea32:	7dba      	ldrb	r2, [r7, #22]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	32ae      	adds	r2, #174	@ 0xae
 800ea38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ea42:	68f8      	ldr	r0, [r7, #12]
 800ea44:	f001 f984 	bl	800fd50 <USBD_CtlSendStatus>
 800ea48:	e032      	b.n	800eab0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ea4a:	7afb      	ldrb	r3, [r7, #11]
 800ea4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	4619      	mov	r1, r3
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f000 fa37 	bl	800eec8 <USBD_CoreFindEP>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea5e:	7dbb      	ldrb	r3, [r7, #22]
 800ea60:	2bff      	cmp	r3, #255	@ 0xff
 800ea62:	d025      	beq.n	800eab0 <USBD_LL_DataOutStage+0x15c>
 800ea64:	7dbb      	ldrb	r3, [r7, #22]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d122      	bne.n	800eab0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b03      	cmp	r3, #3
 800ea74:	d117      	bne.n	800eaa6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ea76:	7dba      	ldrb	r2, [r7, #22]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	32ae      	adds	r2, #174	@ 0xae
 800ea7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea80:	699b      	ldr	r3, [r3, #24]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00f      	beq.n	800eaa6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ea86:	7dba      	ldrb	r2, [r7, #22]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ea8e:	7dba      	ldrb	r2, [r7, #22]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	32ae      	adds	r2, #174	@ 0xae
 800ea94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea98:	699b      	ldr	r3, [r3, #24]
 800ea9a:	7afa      	ldrb	r2, [r7, #11]
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	4798      	blx	r3
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800eaa6:	7dfb      	ldrb	r3, [r7, #23]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800eaac:	7dfb      	ldrb	r3, [r7, #23]
 800eaae:	e000      	b.n	800eab2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3718      	adds	r7, #24
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b086      	sub	sp, #24
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	60f8      	str	r0, [r7, #12]
 800eac2:	460b      	mov	r3, r1
 800eac4:	607a      	str	r2, [r7, #4]
 800eac6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800eac8:	7afb      	ldrb	r3, [r7, #11]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d16f      	bne.n	800ebae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	3314      	adds	r3, #20
 800ead2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d15a      	bne.n	800eb94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	689a      	ldr	r2, [r3, #8]
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d914      	bls.n	800eb14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	689a      	ldr	r2, [r3, #8]
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	1ad2      	subs	r2, r2, r3
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	461a      	mov	r2, r3
 800eafe:	6879      	ldr	r1, [r7, #4]
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f001 f8e6 	bl	800fcd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb06:	2300      	movs	r3, #0
 800eb08:	2200      	movs	r2, #0
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	68f8      	ldr	r0, [r7, #12]
 800eb0e:	f001 fe17 	bl	8010740 <USBD_LL_PrepareReceive>
 800eb12:	e03f      	b.n	800eb94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	68da      	ldr	r2, [r3, #12]
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d11c      	bne.n	800eb5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	685a      	ldr	r2, [r3, #4]
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d316      	bcc.n	800eb5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	685a      	ldr	r2, [r3, #4]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d20f      	bcs.n	800eb5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f001 f8c7 	bl	800fcd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	2200      	movs	r2, #0
 800eb50:	2100      	movs	r1, #0
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	f001 fdf4 	bl	8010740 <USBD_LL_PrepareReceive>
 800eb58:	e01c      	b.n	800eb94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	2b03      	cmp	r3, #3
 800eb64:	d10f      	bne.n	800eb86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d009      	beq.n	800eb86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb86:	2180      	movs	r1, #128	@ 0x80
 800eb88:	68f8      	ldr	r0, [r7, #12]
 800eb8a:	f001 fd2f 	bl	80105ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f001 f8f1 	bl	800fd76 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d03a      	beq.n	800ec14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f7ff fe42 	bl	800e828 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2200      	movs	r2, #0
 800eba8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ebac:	e032      	b.n	800ec14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ebae:	7afb      	ldrb	r3, [r7, #11]
 800ebb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f000 f985 	bl	800eec8 <USBD_CoreFindEP>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ebc2:	7dfb      	ldrb	r3, [r7, #23]
 800ebc4:	2bff      	cmp	r3, #255	@ 0xff
 800ebc6:	d025      	beq.n	800ec14 <USBD_LL_DataInStage+0x15a>
 800ebc8:	7dfb      	ldrb	r3, [r7, #23]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d122      	bne.n	800ec14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	2b03      	cmp	r3, #3
 800ebd8:	d11c      	bne.n	800ec14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ebda:	7dfa      	ldrb	r2, [r7, #23]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	32ae      	adds	r2, #174	@ 0xae
 800ebe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebe4:	695b      	ldr	r3, [r3, #20]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d014      	beq.n	800ec14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ebea:	7dfa      	ldrb	r2, [r7, #23]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ebf2:	7dfa      	ldrb	r2, [r7, #23]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	32ae      	adds	r2, #174	@ 0xae
 800ebf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebfc:	695b      	ldr	r3, [r3, #20]
 800ebfe:	7afa      	ldrb	r2, [r7, #11]
 800ec00:	4611      	mov	r1, r2
 800ec02:	68f8      	ldr	r0, [r7, #12]
 800ec04:	4798      	blx	r3
 800ec06:	4603      	mov	r3, r0
 800ec08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ec0a:	7dbb      	ldrb	r3, [r7, #22]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d001      	beq.n	800ec14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ec10:	7dbb      	ldrb	r3, [r7, #22]
 800ec12:	e000      	b.n	800ec16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3718      	adds	r7, #24
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b084      	sub	sp, #16
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec26:	2300      	movs	r3, #0
 800ec28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d014      	beq.n	800ec84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00e      	beq.n	800ec84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	6852      	ldr	r2, [r2, #4]
 800ec72:	b2d2      	uxtb	r2, r2
 800ec74:	4611      	mov	r1, r2
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	4798      	blx	r3
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d001      	beq.n	800ec84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ec80:	2303      	movs	r3, #3
 800ec82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec84:	2340      	movs	r3, #64	@ 0x40
 800ec86:	2200      	movs	r2, #0
 800ec88:	2100      	movs	r1, #0
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f001 fc69 	bl	8010562 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2201      	movs	r2, #1
 800ec94:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2240      	movs	r2, #64	@ 0x40
 800ec9c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eca0:	2340      	movs	r3, #64	@ 0x40
 800eca2:	2200      	movs	r2, #0
 800eca4:	2180      	movs	r1, #128	@ 0x80
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f001 fc5b 	bl	8010562 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2240      	movs	r2, #64	@ 0x40
 800ecb6:	621a      	str	r2, [r3, #32]

  return ret;
 800ecb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ecc2:	b480      	push	{r7}
 800ecc4:	b083      	sub	sp, #12
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
 800ecca:	460b      	mov	r3, r1
 800eccc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	78fa      	ldrb	r2, [r7, #3]
 800ecd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	370c      	adds	r7, #12
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr

0800ece2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ece2:	b480      	push	{r7}
 800ece4:	b083      	sub	sp, #12
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	2b04      	cmp	r3, #4
 800ecf4:	d006      	beq.n	800ed04 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecfc:	b2da      	uxtb	r2, r3
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2204      	movs	r2, #4
 800ed08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ed0c:	2300      	movs	r3, #0
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	370c      	adds	r7, #12
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr

0800ed1a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ed1a:	b480      	push	{r7}
 800ed1c:	b083      	sub	sp, #12
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	2b04      	cmp	r3, #4
 800ed2c:	d106      	bne.n	800ed3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	370c      	adds	r7, #12
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr

0800ed4a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b082      	sub	sp, #8
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d110      	bne.n	800ed80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00b      	beq.n	800ed80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed6e:	69db      	ldr	r3, [r3, #28]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d005      	beq.n	800ed80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed7a:	69db      	ldr	r3, [r3, #28]
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ed80:	2300      	movs	r3, #0
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b082      	sub	sp, #8
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	460b      	mov	r3, r1
 800ed94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	32ae      	adds	r2, #174	@ 0xae
 800eda0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d101      	bne.n	800edac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800eda8:	2303      	movs	r3, #3
 800edaa:	e01c      	b.n	800ede6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	2b03      	cmp	r3, #3
 800edb6:	d115      	bne.n	800ede4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	32ae      	adds	r2, #174	@ 0xae
 800edc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edc6:	6a1b      	ldr	r3, [r3, #32]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00b      	beq.n	800ede4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	32ae      	adds	r2, #174	@ 0xae
 800edd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edda:	6a1b      	ldr	r3, [r3, #32]
 800eddc:	78fa      	ldrb	r2, [r7, #3]
 800edde:	4611      	mov	r1, r2
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3708      	adds	r7, #8
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b082      	sub	sp, #8
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	460b      	mov	r3, r1
 800edf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	32ae      	adds	r2, #174	@ 0xae
 800ee04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d101      	bne.n	800ee10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	e01c      	b.n	800ee4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	2b03      	cmp	r3, #3
 800ee1a:	d115      	bne.n	800ee48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	32ae      	adds	r2, #174	@ 0xae
 800ee26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d00b      	beq.n	800ee48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	32ae      	adds	r2, #174	@ 0xae
 800ee3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee40:	78fa      	ldrb	r2, [r7, #3]
 800ee42:	4611      	mov	r1, r2
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee48:	2300      	movs	r3, #0
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ee52:	b480      	push	{r7}
 800ee54:	b083      	sub	sp, #12
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ee70:	2300      	movs	r3, #0
 800ee72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2201      	movs	r2, #1
 800ee78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d00e      	beq.n	800eea4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	6852      	ldr	r2, [r2, #4]
 800ee92:	b2d2      	uxtb	r2, r2
 800ee94:	4611      	mov	r1, r2
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	4798      	blx	r3
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800eea0:	2303      	movs	r3, #3
 800eea2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eeae:	b480      	push	{r7}
 800eeb0:	b083      	sub	sp, #12
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
 800eeb6:	460b      	mov	r3, r1
 800eeb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eeba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	370c      	adds	r7, #12
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b083      	sub	sp, #12
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	460b      	mov	r3, r1
 800eed2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eed4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	370c      	adds	r7, #12
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr

0800eee2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b086      	sub	sp, #24
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	460b      	mov	r3, r1
 800eeec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800eef6:	2300      	movs	r3, #0
 800eef8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	885b      	ldrh	r3, [r3, #2]
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	68fa      	ldr	r2, [r7, #12]
 800ef02:	7812      	ldrb	r2, [r2, #0]
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d91f      	bls.n	800ef48 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ef0e:	e013      	b.n	800ef38 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ef10:	f107 030a 	add.w	r3, r7, #10
 800ef14:	4619      	mov	r1, r3
 800ef16:	6978      	ldr	r0, [r7, #20]
 800ef18:	f000 f81b 	bl	800ef52 <USBD_GetNextDesc>
 800ef1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	785b      	ldrb	r3, [r3, #1]
 800ef22:	2b05      	cmp	r3, #5
 800ef24:	d108      	bne.n	800ef38 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	789b      	ldrb	r3, [r3, #2]
 800ef2e:	78fa      	ldrb	r2, [r7, #3]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d008      	beq.n	800ef46 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ef34:	2300      	movs	r3, #0
 800ef36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	885b      	ldrh	r3, [r3, #2]
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	897b      	ldrh	r3, [r7, #10]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d8e5      	bhi.n	800ef10 <USBD_GetEpDesc+0x2e>
 800ef44:	e000      	b.n	800ef48 <USBD_GetEpDesc+0x66>
          break;
 800ef46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ef48:	693b      	ldr	r3, [r7, #16]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ef52:	b480      	push	{r7}
 800ef54:	b085      	sub	sp, #20
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	881b      	ldrh	r3, [r3, #0]
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	7812      	ldrb	r2, [r2, #0]
 800ef68:	4413      	add	r3, r2
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	461a      	mov	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4413      	add	r3, r2
 800ef7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3714      	adds	r7, #20
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr

0800ef8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ef8a:	b480      	push	{r7}
 800ef8c:	b087      	sub	sp, #28
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800efa8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800efac:	021b      	lsls	r3, r3, #8
 800efae:	b21a      	sxth	r2, r3
 800efb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800efb4:	4313      	orrs	r3, r2
 800efb6:	b21b      	sxth	r3, r3
 800efb8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800efba:	89fb      	ldrh	r3, [r7, #14]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	371c      	adds	r7, #28
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800efd2:	2300      	movs	r3, #0
 800efd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800efde:	2b40      	cmp	r3, #64	@ 0x40
 800efe0:	d005      	beq.n	800efee <USBD_StdDevReq+0x26>
 800efe2:	2b40      	cmp	r3, #64	@ 0x40
 800efe4:	d857      	bhi.n	800f096 <USBD_StdDevReq+0xce>
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00f      	beq.n	800f00a <USBD_StdDevReq+0x42>
 800efea:	2b20      	cmp	r3, #32
 800efec:	d153      	bne.n	800f096 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	32ae      	adds	r2, #174	@ 0xae
 800eff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800effc:	689b      	ldr	r3, [r3, #8]
 800effe:	6839      	ldr	r1, [r7, #0]
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	4798      	blx	r3
 800f004:	4603      	mov	r3, r0
 800f006:	73fb      	strb	r3, [r7, #15]
      break;
 800f008:	e04a      	b.n	800f0a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	785b      	ldrb	r3, [r3, #1]
 800f00e:	2b09      	cmp	r3, #9
 800f010:	d83b      	bhi.n	800f08a <USBD_StdDevReq+0xc2>
 800f012:	a201      	add	r2, pc, #4	@ (adr r2, 800f018 <USBD_StdDevReq+0x50>)
 800f014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f018:	0800f06d 	.word	0x0800f06d
 800f01c:	0800f081 	.word	0x0800f081
 800f020:	0800f08b 	.word	0x0800f08b
 800f024:	0800f077 	.word	0x0800f077
 800f028:	0800f08b 	.word	0x0800f08b
 800f02c:	0800f04b 	.word	0x0800f04b
 800f030:	0800f041 	.word	0x0800f041
 800f034:	0800f08b 	.word	0x0800f08b
 800f038:	0800f063 	.word	0x0800f063
 800f03c:	0800f055 	.word	0x0800f055
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f040:	6839      	ldr	r1, [r7, #0]
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 fa3c 	bl	800f4c0 <USBD_GetDescriptor>
          break;
 800f048:	e024      	b.n	800f094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 fbcb 	bl	800f7e8 <USBD_SetAddress>
          break;
 800f052:	e01f      	b.n	800f094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f054:	6839      	ldr	r1, [r7, #0]
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 fc0a 	bl	800f870 <USBD_SetConfig>
 800f05c:	4603      	mov	r3, r0
 800f05e:	73fb      	strb	r3, [r7, #15]
          break;
 800f060:	e018      	b.n	800f094 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f062:	6839      	ldr	r1, [r7, #0]
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 fcad 	bl	800f9c4 <USBD_GetConfig>
          break;
 800f06a:	e013      	b.n	800f094 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f06c:	6839      	ldr	r1, [r7, #0]
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 fcde 	bl	800fa30 <USBD_GetStatus>
          break;
 800f074:	e00e      	b.n	800f094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f076:	6839      	ldr	r1, [r7, #0]
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 fd0d 	bl	800fa98 <USBD_SetFeature>
          break;
 800f07e:	e009      	b.n	800f094 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f080:	6839      	ldr	r1, [r7, #0]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fd31 	bl	800faea <USBD_ClrFeature>
          break;
 800f088:	e004      	b.n	800f094 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f08a:	6839      	ldr	r1, [r7, #0]
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 fd88 	bl	800fba2 <USBD_CtlError>
          break;
 800f092:	bf00      	nop
      }
      break;
 800f094:	e004      	b.n	800f0a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 fd82 	bl	800fba2 <USBD_CtlError>
      break;
 800f09e:	bf00      	nop
  }

  return ret;
 800f0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop

0800f0ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0c2:	2b40      	cmp	r3, #64	@ 0x40
 800f0c4:	d005      	beq.n	800f0d2 <USBD_StdItfReq+0x26>
 800f0c6:	2b40      	cmp	r3, #64	@ 0x40
 800f0c8:	d852      	bhi.n	800f170 <USBD_StdItfReq+0xc4>
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <USBD_StdItfReq+0x26>
 800f0ce:	2b20      	cmp	r3, #32
 800f0d0:	d14e      	bne.n	800f170 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d840      	bhi.n	800f162 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	889b      	ldrh	r3, [r3, #4]
 800f0e4:	b2db      	uxtb	r3, r3
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d836      	bhi.n	800f158 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	889b      	ldrh	r3, [r3, #4]
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7ff fedb 	bl	800eeae <USBD_CoreFindIF>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f0fc:	7bbb      	ldrb	r3, [r7, #14]
 800f0fe:	2bff      	cmp	r3, #255	@ 0xff
 800f100:	d01d      	beq.n	800f13e <USBD_StdItfReq+0x92>
 800f102:	7bbb      	ldrb	r3, [r7, #14]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d11a      	bne.n	800f13e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f108:	7bba      	ldrb	r2, [r7, #14]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	32ae      	adds	r2, #174	@ 0xae
 800f10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00f      	beq.n	800f138 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f118:	7bba      	ldrb	r2, [r7, #14]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f120:	7bba      	ldrb	r2, [r7, #14]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	32ae      	adds	r2, #174	@ 0xae
 800f126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	6839      	ldr	r1, [r7, #0]
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	4798      	blx	r3
 800f132:	4603      	mov	r3, r0
 800f134:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f136:	e004      	b.n	800f142 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f138:	2303      	movs	r3, #3
 800f13a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f13c:	e001      	b.n	800f142 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f13e:	2303      	movs	r3, #3
 800f140:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	88db      	ldrh	r3, [r3, #6]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d110      	bne.n	800f16c <USBD_StdItfReq+0xc0>
 800f14a:	7bfb      	ldrb	r3, [r7, #15]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10d      	bne.n	800f16c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fdfd 	bl	800fd50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f156:	e009      	b.n	800f16c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f158:	6839      	ldr	r1, [r7, #0]
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 fd21 	bl	800fba2 <USBD_CtlError>
          break;
 800f160:	e004      	b.n	800f16c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 fd1c 	bl	800fba2 <USBD_CtlError>
          break;
 800f16a:	e000      	b.n	800f16e <USBD_StdItfReq+0xc2>
          break;
 800f16c:	bf00      	nop
      }
      break;
 800f16e:	e004      	b.n	800f17a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f170:	6839      	ldr	r1, [r7, #0]
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 fd15 	bl	800fba2 <USBD_CtlError>
      break;
 800f178:	bf00      	nop
  }

  return ret;
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	889b      	ldrh	r3, [r3, #4]
 800f196:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f1a0:	2b40      	cmp	r3, #64	@ 0x40
 800f1a2:	d007      	beq.n	800f1b4 <USBD_StdEPReq+0x30>
 800f1a4:	2b40      	cmp	r3, #64	@ 0x40
 800f1a6:	f200 817f 	bhi.w	800f4a8 <USBD_StdEPReq+0x324>
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d02a      	beq.n	800f204 <USBD_StdEPReq+0x80>
 800f1ae:	2b20      	cmp	r3, #32
 800f1b0:	f040 817a 	bne.w	800f4a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f1b4:	7bbb      	ldrb	r3, [r7, #14]
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f7ff fe85 	bl	800eec8 <USBD_CoreFindEP>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1c2:	7b7b      	ldrb	r3, [r7, #13]
 800f1c4:	2bff      	cmp	r3, #255	@ 0xff
 800f1c6:	f000 8174 	beq.w	800f4b2 <USBD_StdEPReq+0x32e>
 800f1ca:	7b7b      	ldrb	r3, [r7, #13]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f040 8170 	bne.w	800f4b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f1d2:	7b7a      	ldrb	r2, [r7, #13]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f1da:	7b7a      	ldrb	r2, [r7, #13]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	32ae      	adds	r2, #174	@ 0xae
 800f1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f000 8163 	beq.w	800f4b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f1ec:	7b7a      	ldrb	r2, [r7, #13]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	32ae      	adds	r2, #174	@ 0xae
 800f1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	6839      	ldr	r1, [r7, #0]
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	4798      	blx	r3
 800f1fe:	4603      	mov	r3, r0
 800f200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f202:	e156      	b.n	800f4b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	785b      	ldrb	r3, [r3, #1]
 800f208:	2b03      	cmp	r3, #3
 800f20a:	d008      	beq.n	800f21e <USBD_StdEPReq+0x9a>
 800f20c:	2b03      	cmp	r3, #3
 800f20e:	f300 8145 	bgt.w	800f49c <USBD_StdEPReq+0x318>
 800f212:	2b00      	cmp	r3, #0
 800f214:	f000 809b 	beq.w	800f34e <USBD_StdEPReq+0x1ca>
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d03c      	beq.n	800f296 <USBD_StdEPReq+0x112>
 800f21c:	e13e      	b.n	800f49c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f224:	b2db      	uxtb	r3, r3
 800f226:	2b02      	cmp	r3, #2
 800f228:	d002      	beq.n	800f230 <USBD_StdEPReq+0xac>
 800f22a:	2b03      	cmp	r3, #3
 800f22c:	d016      	beq.n	800f25c <USBD_StdEPReq+0xd8>
 800f22e:	e02c      	b.n	800f28a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f230:	7bbb      	ldrb	r3, [r7, #14]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00d      	beq.n	800f252 <USBD_StdEPReq+0xce>
 800f236:	7bbb      	ldrb	r3, [r7, #14]
 800f238:	2b80      	cmp	r3, #128	@ 0x80
 800f23a:	d00a      	beq.n	800f252 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f23c:	7bbb      	ldrb	r3, [r7, #14]
 800f23e:	4619      	mov	r1, r3
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f001 f9d3 	bl	80105ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f246:	2180      	movs	r1, #128	@ 0x80
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f001 f9cf 	bl	80105ec <USBD_LL_StallEP>
 800f24e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f250:	e020      	b.n	800f294 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f252:	6839      	ldr	r1, [r7, #0]
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 fca4 	bl	800fba2 <USBD_CtlError>
              break;
 800f25a:	e01b      	b.n	800f294 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	885b      	ldrh	r3, [r3, #2]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d10e      	bne.n	800f282 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f264:	7bbb      	ldrb	r3, [r7, #14]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00b      	beq.n	800f282 <USBD_StdEPReq+0xfe>
 800f26a:	7bbb      	ldrb	r3, [r7, #14]
 800f26c:	2b80      	cmp	r3, #128	@ 0x80
 800f26e:	d008      	beq.n	800f282 <USBD_StdEPReq+0xfe>
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	88db      	ldrh	r3, [r3, #6]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d104      	bne.n	800f282 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f278:	7bbb      	ldrb	r3, [r7, #14]
 800f27a:	4619      	mov	r1, r3
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f001 f9b5 	bl	80105ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 fd64 	bl	800fd50 <USBD_CtlSendStatus>

              break;
 800f288:	e004      	b.n	800f294 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 fc88 	bl	800fba2 <USBD_CtlError>
              break;
 800f292:	bf00      	nop
          }
          break;
 800f294:	e107      	b.n	800f4a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d002      	beq.n	800f2a8 <USBD_StdEPReq+0x124>
 800f2a2:	2b03      	cmp	r3, #3
 800f2a4:	d016      	beq.n	800f2d4 <USBD_StdEPReq+0x150>
 800f2a6:	e04b      	b.n	800f340 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2a8:	7bbb      	ldrb	r3, [r7, #14]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00d      	beq.n	800f2ca <USBD_StdEPReq+0x146>
 800f2ae:	7bbb      	ldrb	r3, [r7, #14]
 800f2b0:	2b80      	cmp	r3, #128	@ 0x80
 800f2b2:	d00a      	beq.n	800f2ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2b4:	7bbb      	ldrb	r3, [r7, #14]
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f001 f997 	bl	80105ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2be:	2180      	movs	r1, #128	@ 0x80
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f001 f993 	bl	80105ec <USBD_LL_StallEP>
 800f2c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f2c8:	e040      	b.n	800f34c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f2ca:	6839      	ldr	r1, [r7, #0]
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 fc68 	bl	800fba2 <USBD_CtlError>
              break;
 800f2d2:	e03b      	b.n	800f34c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	885b      	ldrh	r3, [r3, #2]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d136      	bne.n	800f34a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f2dc:	7bbb      	ldrb	r3, [r7, #14]
 800f2de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d004      	beq.n	800f2f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f2e6:	7bbb      	ldrb	r3, [r7, #14]
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f001 f99d 	bl	801062a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 fd2d 	bl	800fd50 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f2f6:	7bbb      	ldrb	r3, [r7, #14]
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f7ff fde4 	bl	800eec8 <USBD_CoreFindEP>
 800f300:	4603      	mov	r3, r0
 800f302:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f304:	7b7b      	ldrb	r3, [r7, #13]
 800f306:	2bff      	cmp	r3, #255	@ 0xff
 800f308:	d01f      	beq.n	800f34a <USBD_StdEPReq+0x1c6>
 800f30a:	7b7b      	ldrb	r3, [r7, #13]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d11c      	bne.n	800f34a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f310:	7b7a      	ldrb	r2, [r7, #13]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f318:	7b7a      	ldrb	r2, [r7, #13]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	32ae      	adds	r2, #174	@ 0xae
 800f31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d010      	beq.n	800f34a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f328:	7b7a      	ldrb	r2, [r7, #13]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	32ae      	adds	r2, #174	@ 0xae
 800f32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	6839      	ldr	r1, [r7, #0]
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	4798      	blx	r3
 800f33a:	4603      	mov	r3, r0
 800f33c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f33e:	e004      	b.n	800f34a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f340:	6839      	ldr	r1, [r7, #0]
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fc2d 	bl	800fba2 <USBD_CtlError>
              break;
 800f348:	e000      	b.n	800f34c <USBD_StdEPReq+0x1c8>
              break;
 800f34a:	bf00      	nop
          }
          break;
 800f34c:	e0ab      	b.n	800f4a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f354:	b2db      	uxtb	r3, r3
 800f356:	2b02      	cmp	r3, #2
 800f358:	d002      	beq.n	800f360 <USBD_StdEPReq+0x1dc>
 800f35a:	2b03      	cmp	r3, #3
 800f35c:	d032      	beq.n	800f3c4 <USBD_StdEPReq+0x240>
 800f35e:	e097      	b.n	800f490 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f360:	7bbb      	ldrb	r3, [r7, #14]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d007      	beq.n	800f376 <USBD_StdEPReq+0x1f2>
 800f366:	7bbb      	ldrb	r3, [r7, #14]
 800f368:	2b80      	cmp	r3, #128	@ 0x80
 800f36a:	d004      	beq.n	800f376 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f36c:	6839      	ldr	r1, [r7, #0]
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 fc17 	bl	800fba2 <USBD_CtlError>
                break;
 800f374:	e091      	b.n	800f49a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	da0b      	bge.n	800f396 <USBD_StdEPReq+0x212>
 800f37e:	7bbb      	ldrb	r3, [r7, #14]
 800f380:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f384:	4613      	mov	r3, r2
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	4413      	add	r3, r2
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	3310      	adds	r3, #16
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	4413      	add	r3, r2
 800f392:	3304      	adds	r3, #4
 800f394:	e00b      	b.n	800f3ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f396:	7bbb      	ldrb	r3, [r7, #14]
 800f398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f39c:	4613      	mov	r3, r2
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	4413      	add	r3, r2
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f3a8:	687a      	ldr	r2, [r7, #4]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	3304      	adds	r3, #4
 800f3ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	2202      	movs	r2, #2
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 fc6d 	bl	800fc9c <USBD_CtlSendData>
              break;
 800f3c2:	e06a      	b.n	800f49a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f3c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	da11      	bge.n	800f3f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f3cc:	7bbb      	ldrb	r3, [r7, #14]
 800f3ce:	f003 020f 	and.w	r2, r3, #15
 800f3d2:	6879      	ldr	r1, [r7, #4]
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	4413      	add	r3, r2
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	440b      	add	r3, r1
 800f3de:	3324      	adds	r3, #36	@ 0x24
 800f3e0:	881b      	ldrh	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d117      	bne.n	800f416 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f3e6:	6839      	ldr	r1, [r7, #0]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 fbda 	bl	800fba2 <USBD_CtlError>
                  break;
 800f3ee:	e054      	b.n	800f49a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f3f0:	7bbb      	ldrb	r3, [r7, #14]
 800f3f2:	f003 020f 	and.w	r2, r3, #15
 800f3f6:	6879      	ldr	r1, [r7, #4]
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	4413      	add	r3, r2
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	440b      	add	r3, r1
 800f402:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f406:	881b      	ldrh	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d104      	bne.n	800f416 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f40c:	6839      	ldr	r1, [r7, #0]
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 fbc7 	bl	800fba2 <USBD_CtlError>
                  break;
 800f414:	e041      	b.n	800f49a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f416:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	da0b      	bge.n	800f436 <USBD_StdEPReq+0x2b2>
 800f41e:	7bbb      	ldrb	r3, [r7, #14]
 800f420:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f424:	4613      	mov	r3, r2
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	4413      	add	r3, r2
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	3310      	adds	r3, #16
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	4413      	add	r3, r2
 800f432:	3304      	adds	r3, #4
 800f434:	e00b      	b.n	800f44e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f436:	7bbb      	ldrb	r3, [r7, #14]
 800f438:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f43c:	4613      	mov	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4413      	add	r3, r2
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	4413      	add	r3, r2
 800f44c:	3304      	adds	r3, #4
 800f44e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f450:	7bbb      	ldrb	r3, [r7, #14]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <USBD_StdEPReq+0x2d8>
 800f456:	7bbb      	ldrb	r3, [r7, #14]
 800f458:	2b80      	cmp	r3, #128	@ 0x80
 800f45a:	d103      	bne.n	800f464 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	2200      	movs	r2, #0
 800f460:	601a      	str	r2, [r3, #0]
 800f462:	e00e      	b.n	800f482 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f464:	7bbb      	ldrb	r3, [r7, #14]
 800f466:	4619      	mov	r1, r3
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f001 f8fd 	bl	8010668 <USBD_LL_IsStallEP>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d003      	beq.n	800f47c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	2201      	movs	r2, #1
 800f478:	601a      	str	r2, [r3, #0]
 800f47a:	e002      	b.n	800f482 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	2200      	movs	r2, #0
 800f480:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	2202      	movs	r2, #2
 800f486:	4619      	mov	r1, r3
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 fc07 	bl	800fc9c <USBD_CtlSendData>
              break;
 800f48e:	e004      	b.n	800f49a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f490:	6839      	ldr	r1, [r7, #0]
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 fb85 	bl	800fba2 <USBD_CtlError>
              break;
 800f498:	bf00      	nop
          }
          break;
 800f49a:	e004      	b.n	800f4a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f49c:	6839      	ldr	r1, [r7, #0]
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 fb7f 	bl	800fba2 <USBD_CtlError>
          break;
 800f4a4:	bf00      	nop
      }
      break;
 800f4a6:	e005      	b.n	800f4b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 fb79 	bl	800fba2 <USBD_CtlError>
      break;
 800f4b0:	e000      	b.n	800f4b4 <USBD_StdEPReq+0x330>
      break;
 800f4b2:	bf00      	nop
  }

  return ret;
 800f4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
	...

0800f4c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	885b      	ldrh	r3, [r3, #2]
 800f4da:	0a1b      	lsrs	r3, r3, #8
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	3b01      	subs	r3, #1
 800f4e0:	2b0e      	cmp	r3, #14
 800f4e2:	f200 8152 	bhi.w	800f78a <USBD_GetDescriptor+0x2ca>
 800f4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4ec <USBD_GetDescriptor+0x2c>)
 800f4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ec:	0800f55d 	.word	0x0800f55d
 800f4f0:	0800f575 	.word	0x0800f575
 800f4f4:	0800f5b5 	.word	0x0800f5b5
 800f4f8:	0800f78b 	.word	0x0800f78b
 800f4fc:	0800f78b 	.word	0x0800f78b
 800f500:	0800f72b 	.word	0x0800f72b
 800f504:	0800f757 	.word	0x0800f757
 800f508:	0800f78b 	.word	0x0800f78b
 800f50c:	0800f78b 	.word	0x0800f78b
 800f510:	0800f78b 	.word	0x0800f78b
 800f514:	0800f78b 	.word	0x0800f78b
 800f518:	0800f78b 	.word	0x0800f78b
 800f51c:	0800f78b 	.word	0x0800f78b
 800f520:	0800f78b 	.word	0x0800f78b
 800f524:	0800f529 	.word	0x0800f529
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f52e:	69db      	ldr	r3, [r3, #28]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00b      	beq.n	800f54c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f53a:	69db      	ldr	r3, [r3, #28]
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	7c12      	ldrb	r2, [r2, #16]
 800f540:	f107 0108 	add.w	r1, r7, #8
 800f544:	4610      	mov	r0, r2
 800f546:	4798      	blx	r3
 800f548:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f54a:	e126      	b.n	800f79a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f000 fb27 	bl	800fba2 <USBD_CtlError>
        err++;
 800f554:	7afb      	ldrb	r3, [r7, #11]
 800f556:	3301      	adds	r3, #1
 800f558:	72fb      	strb	r3, [r7, #11]
      break;
 800f55a:	e11e      	b.n	800f79a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	7c12      	ldrb	r2, [r2, #16]
 800f568:	f107 0108 	add.w	r1, r7, #8
 800f56c:	4610      	mov	r0, r2
 800f56e:	4798      	blx	r3
 800f570:	60f8      	str	r0, [r7, #12]
      break;
 800f572:	e112      	b.n	800f79a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	7c1b      	ldrb	r3, [r3, #16]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d10d      	bne.n	800f598 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f584:	f107 0208 	add.w	r2, r7, #8
 800f588:	4610      	mov	r0, r2
 800f58a:	4798      	blx	r3
 800f58c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	3301      	adds	r3, #1
 800f592:	2202      	movs	r2, #2
 800f594:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f596:	e100      	b.n	800f79a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5a0:	f107 0208 	add.w	r2, r7, #8
 800f5a4:	4610      	mov	r0, r2
 800f5a6:	4798      	blx	r3
 800f5a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	701a      	strb	r2, [r3, #0]
      break;
 800f5b2:	e0f2      	b.n	800f79a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	885b      	ldrh	r3, [r3, #2]
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	2b05      	cmp	r3, #5
 800f5bc:	f200 80ac 	bhi.w	800f718 <USBD_GetDescriptor+0x258>
 800f5c0:	a201      	add	r2, pc, #4	@ (adr r2, 800f5c8 <USBD_GetDescriptor+0x108>)
 800f5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c6:	bf00      	nop
 800f5c8:	0800f5e1 	.word	0x0800f5e1
 800f5cc:	0800f615 	.word	0x0800f615
 800f5d0:	0800f649 	.word	0x0800f649
 800f5d4:	0800f67d 	.word	0x0800f67d
 800f5d8:	0800f6b1 	.word	0x0800f6b1
 800f5dc:	0800f6e5 	.word	0x0800f6e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d00b      	beq.n	800f604 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	7c12      	ldrb	r2, [r2, #16]
 800f5f8:	f107 0108 	add.w	r1, r7, #8
 800f5fc:	4610      	mov	r0, r2
 800f5fe:	4798      	blx	r3
 800f600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f602:	e091      	b.n	800f728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f604:	6839      	ldr	r1, [r7, #0]
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 facb 	bl	800fba2 <USBD_CtlError>
            err++;
 800f60c:	7afb      	ldrb	r3, [r7, #11]
 800f60e:	3301      	adds	r3, #1
 800f610:	72fb      	strb	r3, [r7, #11]
          break;
 800f612:	e089      	b.n	800f728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f61a:	689b      	ldr	r3, [r3, #8]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00b      	beq.n	800f638 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f626:	689b      	ldr	r3, [r3, #8]
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	7c12      	ldrb	r2, [r2, #16]
 800f62c:	f107 0108 	add.w	r1, r7, #8
 800f630:	4610      	mov	r0, r2
 800f632:	4798      	blx	r3
 800f634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f636:	e077      	b.n	800f728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f638:	6839      	ldr	r1, [r7, #0]
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 fab1 	bl	800fba2 <USBD_CtlError>
            err++;
 800f640:	7afb      	ldrb	r3, [r7, #11]
 800f642:	3301      	adds	r3, #1
 800f644:	72fb      	strb	r3, [r7, #11]
          break;
 800f646:	e06f      	b.n	800f728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d00b      	beq.n	800f66c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	7c12      	ldrb	r2, [r2, #16]
 800f660:	f107 0108 	add.w	r1, r7, #8
 800f664:	4610      	mov	r0, r2
 800f666:	4798      	blx	r3
 800f668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f66a:	e05d      	b.n	800f728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f66c:	6839      	ldr	r1, [r7, #0]
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f000 fa97 	bl	800fba2 <USBD_CtlError>
            err++;
 800f674:	7afb      	ldrb	r3, [r7, #11]
 800f676:	3301      	adds	r3, #1
 800f678:	72fb      	strb	r3, [r7, #11]
          break;
 800f67a:	e055      	b.n	800f728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f682:	691b      	ldr	r3, [r3, #16]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d00b      	beq.n	800f6a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	7c12      	ldrb	r2, [r2, #16]
 800f694:	f107 0108 	add.w	r1, r7, #8
 800f698:	4610      	mov	r0, r2
 800f69a:	4798      	blx	r3
 800f69c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f69e:	e043      	b.n	800f728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6a0:	6839      	ldr	r1, [r7, #0]
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 fa7d 	bl	800fba2 <USBD_CtlError>
            err++;
 800f6a8:	7afb      	ldrb	r3, [r7, #11]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	72fb      	strb	r3, [r7, #11]
          break;
 800f6ae:	e03b      	b.n	800f728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6b6:	695b      	ldr	r3, [r3, #20]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d00b      	beq.n	800f6d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6c2:	695b      	ldr	r3, [r3, #20]
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	7c12      	ldrb	r2, [r2, #16]
 800f6c8:	f107 0108 	add.w	r1, r7, #8
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	4798      	blx	r3
 800f6d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6d2:	e029      	b.n	800f728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fa63 	bl	800fba2 <USBD_CtlError>
            err++;
 800f6dc:	7afb      	ldrb	r3, [r7, #11]
 800f6de:	3301      	adds	r3, #1
 800f6e0:	72fb      	strb	r3, [r7, #11]
          break;
 800f6e2:	e021      	b.n	800f728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ea:	699b      	ldr	r3, [r3, #24]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00b      	beq.n	800f708 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6f6:	699b      	ldr	r3, [r3, #24]
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	7c12      	ldrb	r2, [r2, #16]
 800f6fc:	f107 0108 	add.w	r1, r7, #8
 800f700:	4610      	mov	r0, r2
 800f702:	4798      	blx	r3
 800f704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f706:	e00f      	b.n	800f728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f708:	6839      	ldr	r1, [r7, #0]
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f000 fa49 	bl	800fba2 <USBD_CtlError>
            err++;
 800f710:	7afb      	ldrb	r3, [r7, #11]
 800f712:	3301      	adds	r3, #1
 800f714:	72fb      	strb	r3, [r7, #11]
          break;
 800f716:	e007      	b.n	800f728 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f718:	6839      	ldr	r1, [r7, #0]
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 fa41 	bl	800fba2 <USBD_CtlError>
          err++;
 800f720:	7afb      	ldrb	r3, [r7, #11]
 800f722:	3301      	adds	r3, #1
 800f724:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f726:	bf00      	nop
      }
      break;
 800f728:	e037      	b.n	800f79a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	7c1b      	ldrb	r3, [r3, #16]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d109      	bne.n	800f746 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f73a:	f107 0208 	add.w	r2, r7, #8
 800f73e:	4610      	mov	r0, r2
 800f740:	4798      	blx	r3
 800f742:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f744:	e029      	b.n	800f79a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f746:	6839      	ldr	r1, [r7, #0]
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 fa2a 	bl	800fba2 <USBD_CtlError>
        err++;
 800f74e:	7afb      	ldrb	r3, [r7, #11]
 800f750:	3301      	adds	r3, #1
 800f752:	72fb      	strb	r3, [r7, #11]
      break;
 800f754:	e021      	b.n	800f79a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	7c1b      	ldrb	r3, [r3, #16]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d10d      	bne.n	800f77a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f766:	f107 0208 	add.w	r2, r7, #8
 800f76a:	4610      	mov	r0, r2
 800f76c:	4798      	blx	r3
 800f76e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	3301      	adds	r3, #1
 800f774:	2207      	movs	r2, #7
 800f776:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f778:	e00f      	b.n	800f79a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f77a:	6839      	ldr	r1, [r7, #0]
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 fa10 	bl	800fba2 <USBD_CtlError>
        err++;
 800f782:	7afb      	ldrb	r3, [r7, #11]
 800f784:	3301      	adds	r3, #1
 800f786:	72fb      	strb	r3, [r7, #11]
      break;
 800f788:	e007      	b.n	800f79a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f78a:	6839      	ldr	r1, [r7, #0]
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f000 fa08 	bl	800fba2 <USBD_CtlError>
      err++;
 800f792:	7afb      	ldrb	r3, [r7, #11]
 800f794:	3301      	adds	r3, #1
 800f796:	72fb      	strb	r3, [r7, #11]
      break;
 800f798:	bf00      	nop
  }

  if (err != 0U)
 800f79a:	7afb      	ldrb	r3, [r7, #11]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d11e      	bne.n	800f7de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	88db      	ldrh	r3, [r3, #6]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d016      	beq.n	800f7d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f7a8:	893b      	ldrh	r3, [r7, #8]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00e      	beq.n	800f7cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	88da      	ldrh	r2, [r3, #6]
 800f7b2:	893b      	ldrh	r3, [r7, #8]
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	bf28      	it	cs
 800f7b8:	4613      	movcs	r3, r2
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f7be:	893b      	ldrh	r3, [r7, #8]
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	68f9      	ldr	r1, [r7, #12]
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 fa69 	bl	800fc9c <USBD_CtlSendData>
 800f7ca:	e009      	b.n	800f7e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f7cc:	6839      	ldr	r1, [r7, #0]
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 f9e7 	bl	800fba2 <USBD_CtlError>
 800f7d4:	e004      	b.n	800f7e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f000 faba 	bl	800fd50 <USBD_CtlSendStatus>
 800f7dc:	e000      	b.n	800f7e0 <USBD_GetDescriptor+0x320>
    return;
 800f7de:	bf00      	nop
  }
}
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop

0800f7e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	889b      	ldrh	r3, [r3, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d131      	bne.n	800f85e <USBD_SetAddress+0x76>
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	88db      	ldrh	r3, [r3, #6]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d12d      	bne.n	800f85e <USBD_SetAddress+0x76>
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	885b      	ldrh	r3, [r3, #2]
 800f806:	2b7f      	cmp	r3, #127	@ 0x7f
 800f808:	d829      	bhi.n	800f85e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	885b      	ldrh	r3, [r3, #2]
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f814:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	2b03      	cmp	r3, #3
 800f820:	d104      	bne.n	800f82c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f822:	6839      	ldr	r1, [r7, #0]
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f000 f9bc 	bl	800fba2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f82a:	e01d      	b.n	800f868 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	7bfa      	ldrb	r2, [r7, #15]
 800f830:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f834:	7bfb      	ldrb	r3, [r7, #15]
 800f836:	4619      	mov	r1, r3
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 ff41 	bl	80106c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 fa86 	bl	800fd50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f844:	7bfb      	ldrb	r3, [r7, #15]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d004      	beq.n	800f854 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2202      	movs	r2, #2
 800f84e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f852:	e009      	b.n	800f868 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2201      	movs	r2, #1
 800f858:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f85c:	e004      	b.n	800f868 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 f99e 	bl	800fba2 <USBD_CtlError>
  }
}
 800f866:	bf00      	nop
 800f868:	bf00      	nop
 800f86a:	3710      	adds	r7, #16
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f87a:	2300      	movs	r3, #0
 800f87c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	885b      	ldrh	r3, [r3, #2]
 800f882:	b2da      	uxtb	r2, r3
 800f884:	4b4e      	ldr	r3, [pc, #312]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f886:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f888:	4b4d      	ldr	r3, [pc, #308]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d905      	bls.n	800f89c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f890:	6839      	ldr	r1, [r7, #0]
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 f985 	bl	800fba2 <USBD_CtlError>
    return USBD_FAIL;
 800f898:	2303      	movs	r3, #3
 800f89a:	e08c      	b.n	800f9b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	2b02      	cmp	r3, #2
 800f8a6:	d002      	beq.n	800f8ae <USBD_SetConfig+0x3e>
 800f8a8:	2b03      	cmp	r3, #3
 800f8aa:	d029      	beq.n	800f900 <USBD_SetConfig+0x90>
 800f8ac:	e075      	b.n	800f99a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f8ae:	4b44      	ldr	r3, [pc, #272]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d020      	beq.n	800f8f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f8b6:	4b42      	ldr	r3, [pc, #264]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f8c0:	4b3f      	ldr	r3, [pc, #252]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f7fe ffb9 	bl	800e83e <USBD_SetClassConfig>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f8d0:	7bfb      	ldrb	r3, [r7, #15]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d008      	beq.n	800f8e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f8d6:	6839      	ldr	r1, [r7, #0]
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 f962 	bl	800fba2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2202      	movs	r2, #2
 800f8e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f8e6:	e065      	b.n	800f9b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 fa31 	bl	800fd50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2203      	movs	r2, #3
 800f8f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f8f6:	e05d      	b.n	800f9b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f000 fa29 	bl	800fd50 <USBD_CtlSendStatus>
      break;
 800f8fe:	e059      	b.n	800f9b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f900:	4b2f      	ldr	r3, [pc, #188]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d112      	bne.n	800f92e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2202      	movs	r2, #2
 800f90c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f910:	4b2b      	ldr	r3, [pc, #172]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	461a      	mov	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f91a:	4b29      	ldr	r3, [pc, #164]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	4619      	mov	r1, r3
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7fe ffa8 	bl	800e876 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 fa12 	bl	800fd50 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f92c:	e042      	b.n	800f9b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f92e:	4b24      	ldr	r3, [pc, #144]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	461a      	mov	r2, r3
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d02a      	beq.n	800f992 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	b2db      	uxtb	r3, r3
 800f942:	4619      	mov	r1, r3
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7fe ff96 	bl	800e876 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f94a:	4b1d      	ldr	r3, [pc, #116]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	461a      	mov	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f954:	4b1a      	ldr	r3, [pc, #104]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	4619      	mov	r1, r3
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f7fe ff6f 	bl	800e83e <USBD_SetClassConfig>
 800f960:	4603      	mov	r3, r0
 800f962:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f964:	7bfb      	ldrb	r3, [r7, #15]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d00f      	beq.n	800f98a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f96a:	6839      	ldr	r1, [r7, #0]
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 f918 	bl	800fba2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	b2db      	uxtb	r3, r3
 800f978:	4619      	mov	r1, r3
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f7fe ff7b 	bl	800e876 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2202      	movs	r2, #2
 800f984:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f988:	e014      	b.n	800f9b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 f9e0 	bl	800fd50 <USBD_CtlSendStatus>
      break;
 800f990:	e010      	b.n	800f9b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 f9dc 	bl	800fd50 <USBD_CtlSendStatus>
      break;
 800f998:	e00c      	b.n	800f9b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f99a:	6839      	ldr	r1, [r7, #0]
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 f900 	bl	800fba2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9a2:	4b07      	ldr	r3, [pc, #28]	@ (800f9c0 <USBD_SetConfig+0x150>)
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7fe ff64 	bl	800e876 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f9ae:	2303      	movs	r3, #3
 800f9b0:	73fb      	strb	r3, [r7, #15]
      break;
 800f9b2:	bf00      	nop
  }

  return ret;
 800f9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	240004cc 	.word	0x240004cc

0800f9c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	88db      	ldrh	r3, [r3, #6]
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d004      	beq.n	800f9e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f9d6:	6839      	ldr	r1, [r7, #0]
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 f8e2 	bl	800fba2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f9de:	e023      	b.n	800fa28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	2b02      	cmp	r3, #2
 800f9ea:	dc02      	bgt.n	800f9f2 <USBD_GetConfig+0x2e>
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	dc03      	bgt.n	800f9f8 <USBD_GetConfig+0x34>
 800f9f0:	e015      	b.n	800fa1e <USBD_GetConfig+0x5a>
 800f9f2:	2b03      	cmp	r3, #3
 800f9f4:	d00b      	beq.n	800fa0e <USBD_GetConfig+0x4a>
 800f9f6:	e012      	b.n	800fa1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	3308      	adds	r3, #8
 800fa02:	2201      	movs	r2, #1
 800fa04:	4619      	mov	r1, r3
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 f948 	bl	800fc9c <USBD_CtlSendData>
        break;
 800fa0c:	e00c      	b.n	800fa28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	3304      	adds	r3, #4
 800fa12:	2201      	movs	r2, #1
 800fa14:	4619      	mov	r1, r3
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f000 f940 	bl	800fc9c <USBD_CtlSendData>
        break;
 800fa1c:	e004      	b.n	800fa28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fa1e:	6839      	ldr	r1, [r7, #0]
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 f8be 	bl	800fba2 <USBD_CtlError>
        break;
 800fa26:	bf00      	nop
}
 800fa28:	bf00      	nop
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	3b01      	subs	r3, #1
 800fa44:	2b02      	cmp	r3, #2
 800fa46:	d81e      	bhi.n	800fa86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	88db      	ldrh	r3, [r3, #6]
 800fa4c:	2b02      	cmp	r3, #2
 800fa4e:	d004      	beq.n	800fa5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 f8a5 	bl	800fba2 <USBD_CtlError>
        break;
 800fa58:	e01a      	b.n	800fa90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d005      	beq.n	800fa76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	f043 0202 	orr.w	r2, r3, #2
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	330c      	adds	r3, #12
 800fa7a:	2202      	movs	r2, #2
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 f90c 	bl	800fc9c <USBD_CtlSendData>
      break;
 800fa84:	e004      	b.n	800fa90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fa86:	6839      	ldr	r1, [r7, #0]
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 f88a 	bl	800fba2 <USBD_CtlError>
      break;
 800fa8e:	bf00      	nop
  }
}
 800fa90:	bf00      	nop
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	885b      	ldrh	r3, [r3, #2]
 800faa6:	2b01      	cmp	r3, #1
 800faa8:	d107      	bne.n	800faba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2201      	movs	r2, #1
 800faae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 f94c 	bl	800fd50 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fab8:	e013      	b.n	800fae2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	885b      	ldrh	r3, [r3, #2]
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d10b      	bne.n	800fada <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	889b      	ldrh	r3, [r3, #4]
 800fac6:	0a1b      	lsrs	r3, r3, #8
 800fac8:	b29b      	uxth	r3, r3
 800faca:	b2da      	uxtb	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 f93c 	bl	800fd50 <USBD_CtlSendStatus>
}
 800fad8:	e003      	b.n	800fae2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 f860 	bl	800fba2 <USBD_CtlError>
}
 800fae2:	bf00      	nop
 800fae4:	3708      	adds	r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b082      	sub	sp, #8
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
 800faf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	3b01      	subs	r3, #1
 800fafe:	2b02      	cmp	r3, #2
 800fb00:	d80b      	bhi.n	800fb1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	885b      	ldrh	r3, [r3, #2]
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d10c      	bne.n	800fb24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f91c 	bl	800fd50 <USBD_CtlSendStatus>
      }
      break;
 800fb18:	e004      	b.n	800fb24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fb1a:	6839      	ldr	r1, [r7, #0]
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 f840 	bl	800fba2 <USBD_CtlError>
      break;
 800fb22:	e000      	b.n	800fb26 <USBD_ClrFeature+0x3c>
      break;
 800fb24:	bf00      	nop
  }
}
 800fb26:	bf00      	nop
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b084      	sub	sp, #16
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
 800fb36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	781a      	ldrb	r2, [r3, #0]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	3301      	adds	r3, #1
 800fb48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	781a      	ldrb	r2, [r3, #0]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	3301      	adds	r3, #1
 800fb56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f7ff fa16 	bl	800ef8a <SWAPBYTE>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	461a      	mov	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f7ff fa09 	bl	800ef8a <SWAPBYTE>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	3301      	adds	r3, #1
 800fb84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	3301      	adds	r3, #1
 800fb8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fb8c:	68f8      	ldr	r0, [r7, #12]
 800fb8e:	f7ff f9fc 	bl	800ef8a <SWAPBYTE>
 800fb92:	4603      	mov	r3, r0
 800fb94:	461a      	mov	r2, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	80da      	strh	r2, [r3, #6]
}
 800fb9a:	bf00      	nop
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b082      	sub	sp, #8
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbac:	2180      	movs	r1, #128	@ 0x80
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 fd1c 	bl	80105ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 fd18 	bl	80105ec <USBD_LL_StallEP>
}
 800fbbc:	bf00      	nop
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b086      	sub	sp, #24
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d042      	beq.n	800fc60 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800fbde:	6938      	ldr	r0, [r7, #16]
 800fbe0:	f000 f842 	bl	800fc68 <USBD_GetLen>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbee:	d808      	bhi.n	800fc02 <USBD_GetString+0x3e>
 800fbf0:	6938      	ldr	r0, [r7, #16]
 800fbf2:	f000 f839 	bl	800fc68 <USBD_GetLen>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	005b      	lsls	r3, r3, #1
 800fbfe:	b29a      	uxth	r2, r3
 800fc00:	e001      	b.n	800fc06 <USBD_GetString+0x42>
 800fc02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc0a:	7dfb      	ldrb	r3, [r7, #23]
 800fc0c:	68ba      	ldr	r2, [r7, #8]
 800fc0e:	4413      	add	r3, r2
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	7812      	ldrb	r2, [r2, #0]
 800fc14:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc16:	7dfb      	ldrb	r3, [r7, #23]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc1c:	7dfb      	ldrb	r3, [r7, #23]
 800fc1e:	68ba      	ldr	r2, [r7, #8]
 800fc20:	4413      	add	r3, r2
 800fc22:	2203      	movs	r2, #3
 800fc24:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc26:	7dfb      	ldrb	r3, [r7, #23]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc2c:	e013      	b.n	800fc56 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800fc2e:	7dfb      	ldrb	r3, [r7, #23]
 800fc30:	68ba      	ldr	r2, [r7, #8]
 800fc32:	4413      	add	r3, r2
 800fc34:	693a      	ldr	r2, [r7, #16]
 800fc36:	7812      	ldrb	r2, [r2, #0]
 800fc38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	613b      	str	r3, [r7, #16]
    idx++;
 800fc40:	7dfb      	ldrb	r3, [r7, #23]
 800fc42:	3301      	adds	r3, #1
 800fc44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc46:	7dfb      	ldrb	r3, [r7, #23]
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc50:	7dfb      	ldrb	r3, [r7, #23]
 800fc52:	3301      	adds	r3, #1
 800fc54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d1e7      	bne.n	800fc2e <USBD_GetString+0x6a>
 800fc5e:	e000      	b.n	800fc62 <USBD_GetString+0x9e>
    return;
 800fc60:	bf00      	nop
  }
}
 800fc62:	3718      	adds	r7, #24
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b085      	sub	sp, #20
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc70:	2300      	movs	r3, #0
 800fc72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc78:	e005      	b.n	800fc86 <USBD_GetLen+0x1e>
  {
    len++;
 800fc7a:	7bfb      	ldrb	r3, [r7, #15]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	3301      	adds	r3, #1
 800fc84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d1f5      	bne.n	800fc7a <USBD_GetLen+0x12>
  }

  return len;
 800fc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3714      	adds	r7, #20
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2202      	movs	r2, #2
 800fcac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	68ba      	ldr	r2, [r7, #8]
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	68f8      	ldr	r0, [r7, #12]
 800fcc4:	f000 fd1b 	bl	80106fe <USBD_LL_Transmit>

  return USBD_OK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3710      	adds	r7, #16
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b084      	sub	sp, #16
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	60f8      	str	r0, [r7, #12]
 800fcda:	60b9      	str	r1, [r7, #8]
 800fcdc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	68ba      	ldr	r2, [r7, #8]
 800fce2:	2100      	movs	r1, #0
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f000 fd0a 	bl	80106fe <USBD_LL_Transmit>

  return USBD_OK;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2203      	movs	r2, #3
 800fd04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	687a      	ldr	r2, [r7, #4]
 800fd14:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	68ba      	ldr	r2, [r7, #8]
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f000 fd0e 	bl	8010740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3710      	adds	r7, #16
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b084      	sub	sp, #16
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	60f8      	str	r0, [r7, #12]
 800fd36:	60b9      	str	r1, [r7, #8]
 800fd38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	68ba      	ldr	r2, [r7, #8]
 800fd3e:	2100      	movs	r1, #0
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f000 fcfd 	bl	8010740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2204      	movs	r2, #4
 800fd5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd60:	2300      	movs	r3, #0
 800fd62:	2200      	movs	r2, #0
 800fd64:	2100      	movs	r1, #0
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 fcc9 	bl	80106fe <USBD_LL_Transmit>

  return USBD_OK;
 800fd6c:	2300      	movs	r3, #0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3708      	adds	r7, #8
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b082      	sub	sp, #8
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2205      	movs	r2, #5
 800fd82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd86:	2300      	movs	r3, #0
 800fd88:	2200      	movs	r2, #0
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 fcd7 	bl	8010740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd92:	2300      	movs	r3, #0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800fda0:	2201      	movs	r2, #1
 800fda2:	4913      	ldr	r1, [pc, #76]	@ (800fdf0 <MX_USB_DEVICE_Init+0x54>)
 800fda4:	4813      	ldr	r0, [pc, #76]	@ (800fdf4 <MX_USB_DEVICE_Init+0x58>)
 800fda6:	f7fe fccd 	bl	800e744 <USBD_Init>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d001      	beq.n	800fdb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fdb0:	f7f0 ffe2 	bl	8000d78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800fdb4:	4910      	ldr	r1, [pc, #64]	@ (800fdf8 <MX_USB_DEVICE_Init+0x5c>)
 800fdb6:	480f      	ldr	r0, [pc, #60]	@ (800fdf4 <MX_USB_DEVICE_Init+0x58>)
 800fdb8:	f7fe fcf4 	bl	800e7a4 <USBD_RegisterClass>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d001      	beq.n	800fdc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fdc2:	f7f0 ffd9 	bl	8000d78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800fdc6:	490d      	ldr	r1, [pc, #52]	@ (800fdfc <MX_USB_DEVICE_Init+0x60>)
 800fdc8:	480a      	ldr	r0, [pc, #40]	@ (800fdf4 <MX_USB_DEVICE_Init+0x58>)
 800fdca:	f7fe fc2b 	bl	800e624 <USBD_CDC_RegisterInterface>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fdd4:	f7f0 ffd0 	bl	8000d78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800fdd8:	4806      	ldr	r0, [pc, #24]	@ (800fdf4 <MX_USB_DEVICE_Init+0x58>)
 800fdda:	f7fe fd19 	bl	800e810 <USBD_Start>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d001      	beq.n	800fde8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fde4:	f7f0 ffc8 	bl	8000d78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800fde8:	f7f7 ff5c 	bl	8007ca4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fdec:	bf00      	nop
 800fdee:	bd80      	pop	{r7, pc}
 800fdf0:	240000b0 	.word	0x240000b0
 800fdf4:	240004d0 	.word	0x240004d0
 800fdf8:	2400001c 	.word	0x2400001c
 800fdfc:	2400009c 	.word	0x2400009c

0800fe00 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800fe04:	2200      	movs	r2, #0
 800fe06:	4905      	ldr	r1, [pc, #20]	@ (800fe1c <CDC_Init_HS+0x1c>)
 800fe08:	4805      	ldr	r0, [pc, #20]	@ (800fe20 <CDC_Init_HS+0x20>)
 800fe0a:	f7fe fc25 	bl	800e658 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800fe0e:	4905      	ldr	r1, [pc, #20]	@ (800fe24 <CDC_Init_HS+0x24>)
 800fe10:	4803      	ldr	r0, [pc, #12]	@ (800fe20 <CDC_Init_HS+0x20>)
 800fe12:	f7fe fc43 	bl	800e69c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fe16:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	24000fac 	.word	0x24000fac
 800fe20:	240004d0 	.word	0x240004d0
 800fe24:	240007ac 	.word	0x240007ac

0800fe28 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800fe2c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	4603      	mov	r3, r0
 800fe40:	6039      	str	r1, [r7, #0]
 800fe42:	71fb      	strb	r3, [r7, #7]
 800fe44:	4613      	mov	r3, r2
 800fe46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	2b23      	cmp	r3, #35	@ 0x23
 800fe4c:	d84a      	bhi.n	800fee4 <CDC_Control_HS+0xac>
 800fe4e:	a201      	add	r2, pc, #4	@ (adr r2, 800fe54 <CDC_Control_HS+0x1c>)
 800fe50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe54:	0800fee5 	.word	0x0800fee5
 800fe58:	0800fee5 	.word	0x0800fee5
 800fe5c:	0800fee5 	.word	0x0800fee5
 800fe60:	0800fee5 	.word	0x0800fee5
 800fe64:	0800fee5 	.word	0x0800fee5
 800fe68:	0800fee5 	.word	0x0800fee5
 800fe6c:	0800fee5 	.word	0x0800fee5
 800fe70:	0800fee5 	.word	0x0800fee5
 800fe74:	0800fee5 	.word	0x0800fee5
 800fe78:	0800fee5 	.word	0x0800fee5
 800fe7c:	0800fee5 	.word	0x0800fee5
 800fe80:	0800fee5 	.word	0x0800fee5
 800fe84:	0800fee5 	.word	0x0800fee5
 800fe88:	0800fee5 	.word	0x0800fee5
 800fe8c:	0800fee5 	.word	0x0800fee5
 800fe90:	0800fee5 	.word	0x0800fee5
 800fe94:	0800fee5 	.word	0x0800fee5
 800fe98:	0800fee5 	.word	0x0800fee5
 800fe9c:	0800fee5 	.word	0x0800fee5
 800fea0:	0800fee5 	.word	0x0800fee5
 800fea4:	0800fee5 	.word	0x0800fee5
 800fea8:	0800fee5 	.word	0x0800fee5
 800feac:	0800fee5 	.word	0x0800fee5
 800feb0:	0800fee5 	.word	0x0800fee5
 800feb4:	0800fee5 	.word	0x0800fee5
 800feb8:	0800fee5 	.word	0x0800fee5
 800febc:	0800fee5 	.word	0x0800fee5
 800fec0:	0800fee5 	.word	0x0800fee5
 800fec4:	0800fee5 	.word	0x0800fee5
 800fec8:	0800fee5 	.word	0x0800fee5
 800fecc:	0800fee5 	.word	0x0800fee5
 800fed0:	0800fee5 	.word	0x0800fee5
 800fed4:	0800fee5 	.word	0x0800fee5
 800fed8:	0800fee5 	.word	0x0800fee5
 800fedc:	0800fee5 	.word	0x0800fee5
 800fee0:	0800fee5 	.word	0x0800fee5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fee4:	bf00      	nop
  }

  return (USBD_OK);
 800fee6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800fee8:	4618      	mov	r0, r3
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800fefe:	6879      	ldr	r1, [r7, #4]
 800ff00:	4805      	ldr	r0, [pc, #20]	@ (800ff18 <CDC_Receive_HS+0x24>)
 800ff02:	f7fe fbcb 	bl	800e69c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ff06:	4804      	ldr	r0, [pc, #16]	@ (800ff18 <CDC_Receive_HS+0x24>)
 800ff08:	f7fe fbe6 	bl	800e6d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ff0c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	240004d0 	.word	0x240004d0

0800ff1c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b087      	sub	sp, #28
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	4613      	mov	r3, r2
 800ff28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800ff2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	371c      	adds	r7, #28
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr
	...

0800ff40 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	4603      	mov	r3, r0
 800ff48:	6039      	str	r1, [r7, #0]
 800ff4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	2212      	movs	r2, #18
 800ff50:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ff52:	4b03      	ldr	r3, [pc, #12]	@ (800ff60 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr
 800ff60:	240000d0 	.word	0x240000d0

0800ff64 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	6039      	str	r1, [r7, #0]
 800ff6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	2204      	movs	r2, #4
 800ff74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff76:	4b03      	ldr	r3, [pc, #12]	@ (800ff84 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	370c      	adds	r7, #12
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	240000e4 	.word	0x240000e4

0800ff88 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	4603      	mov	r3, r0
 800ff90:	6039      	str	r1, [r7, #0]
 800ff92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff94:	79fb      	ldrb	r3, [r7, #7]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d105      	bne.n	800ffa6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ff9a:	683a      	ldr	r2, [r7, #0]
 800ff9c:	4907      	ldr	r1, [pc, #28]	@ (800ffbc <USBD_HS_ProductStrDescriptor+0x34>)
 800ff9e:	4808      	ldr	r0, [pc, #32]	@ (800ffc0 <USBD_HS_ProductStrDescriptor+0x38>)
 800ffa0:	f7ff fe10 	bl	800fbc4 <USBD_GetString>
 800ffa4:	e004      	b.n	800ffb0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	4904      	ldr	r1, [pc, #16]	@ (800ffbc <USBD_HS_ProductStrDescriptor+0x34>)
 800ffaa:	4805      	ldr	r0, [pc, #20]	@ (800ffc0 <USBD_HS_ProductStrDescriptor+0x38>)
 800ffac:	f7ff fe0a 	bl	800fbc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffb0:	4b02      	ldr	r3, [pc, #8]	@ (800ffbc <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3708      	adds	r7, #8
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	240017ac 	.word	0x240017ac
 800ffc0:	080109d4 	.word	0x080109d4

0800ffc4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	4603      	mov	r3, r0
 800ffcc:	6039      	str	r1, [r7, #0]
 800ffce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ffd0:	683a      	ldr	r2, [r7, #0]
 800ffd2:	4904      	ldr	r1, [pc, #16]	@ (800ffe4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ffd4:	4804      	ldr	r0, [pc, #16]	@ (800ffe8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ffd6:	f7ff fdf5 	bl	800fbc4 <USBD_GetString>
  return USBD_StrDesc;
 800ffda:	4b02      	ldr	r3, [pc, #8]	@ (800ffe4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	240017ac 	.word	0x240017ac
 800ffe8:	080109ec 	.word	0x080109ec

0800ffec <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	4603      	mov	r3, r0
 800fff4:	6039      	str	r1, [r7, #0]
 800fff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	221a      	movs	r2, #26
 800fffc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fffe:	f000 f843 	bl	8010088 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010002:	4b02      	ldr	r3, [pc, #8]	@ (801000c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8010004:	4618      	mov	r0, r3
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	240000e8 	.word	0x240000e8

08010010 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	4603      	mov	r3, r0
 8010018:	6039      	str	r1, [r7, #0]
 801001a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801001c:	79fb      	ldrb	r3, [r7, #7]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d105      	bne.n	801002e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010022:	683a      	ldr	r2, [r7, #0]
 8010024:	4907      	ldr	r1, [pc, #28]	@ (8010044 <USBD_HS_ConfigStrDescriptor+0x34>)
 8010026:	4808      	ldr	r0, [pc, #32]	@ (8010048 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010028:	f7ff fdcc 	bl	800fbc4 <USBD_GetString>
 801002c:	e004      	b.n	8010038 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	4904      	ldr	r1, [pc, #16]	@ (8010044 <USBD_HS_ConfigStrDescriptor+0x34>)
 8010032:	4805      	ldr	r0, [pc, #20]	@ (8010048 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010034:	f7ff fdc6 	bl	800fbc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010038:	4b02      	ldr	r3, [pc, #8]	@ (8010044 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801003a:	4618      	mov	r0, r3
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	240017ac 	.word	0x240017ac
 8010048:	08010a00 	.word	0x08010a00

0801004c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	4603      	mov	r3, r0
 8010054:	6039      	str	r1, [r7, #0]
 8010056:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010058:	79fb      	ldrb	r3, [r7, #7]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d105      	bne.n	801006a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801005e:	683a      	ldr	r2, [r7, #0]
 8010060:	4907      	ldr	r1, [pc, #28]	@ (8010080 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010062:	4808      	ldr	r0, [pc, #32]	@ (8010084 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010064:	f7ff fdae 	bl	800fbc4 <USBD_GetString>
 8010068:	e004      	b.n	8010074 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801006a:	683a      	ldr	r2, [r7, #0]
 801006c:	4904      	ldr	r1, [pc, #16]	@ (8010080 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801006e:	4805      	ldr	r0, [pc, #20]	@ (8010084 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010070:	f7ff fda8 	bl	800fbc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010074:	4b02      	ldr	r3, [pc, #8]	@ (8010080 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8010076:	4618      	mov	r0, r3
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	240017ac 	.word	0x240017ac
 8010084:	08010a0c 	.word	0x08010a0c

08010088 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801008e:	4b0f      	ldr	r3, [pc, #60]	@ (80100cc <Get_SerialNum+0x44>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010094:	4b0e      	ldr	r3, [pc, #56]	@ (80100d0 <Get_SerialNum+0x48>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801009a:	4b0e      	ldr	r3, [pc, #56]	@ (80100d4 <Get_SerialNum+0x4c>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80100a0:	68fa      	ldr	r2, [r7, #12]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4413      	add	r3, r2
 80100a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d009      	beq.n	80100c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80100ae:	2208      	movs	r2, #8
 80100b0:	4909      	ldr	r1, [pc, #36]	@ (80100d8 <Get_SerialNum+0x50>)
 80100b2:	68f8      	ldr	r0, [r7, #12]
 80100b4:	f000 f814 	bl	80100e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80100b8:	2204      	movs	r2, #4
 80100ba:	4908      	ldr	r1, [pc, #32]	@ (80100dc <Get_SerialNum+0x54>)
 80100bc:	68b8      	ldr	r0, [r7, #8]
 80100be:	f000 f80f 	bl	80100e0 <IntToUnicode>
  }
}
 80100c2:	bf00      	nop
 80100c4:	3710      	adds	r7, #16
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	08fff800 	.word	0x08fff800
 80100d0:	08fff804 	.word	0x08fff804
 80100d4:	08fff808 	.word	0x08fff808
 80100d8:	240000ea 	.word	0x240000ea
 80100dc:	240000fa 	.word	0x240000fa

080100e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b087      	sub	sp, #28
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	60b9      	str	r1, [r7, #8]
 80100ea:	4613      	mov	r3, r2
 80100ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80100f2:	2300      	movs	r3, #0
 80100f4:	75fb      	strb	r3, [r7, #23]
 80100f6:	e027      	b.n	8010148 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	0f1b      	lsrs	r3, r3, #28
 80100fc:	2b09      	cmp	r3, #9
 80100fe:	d80b      	bhi.n	8010118 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	0f1b      	lsrs	r3, r3, #28
 8010104:	b2da      	uxtb	r2, r3
 8010106:	7dfb      	ldrb	r3, [r7, #23]
 8010108:	005b      	lsls	r3, r3, #1
 801010a:	4619      	mov	r1, r3
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	440b      	add	r3, r1
 8010110:	3230      	adds	r2, #48	@ 0x30
 8010112:	b2d2      	uxtb	r2, r2
 8010114:	701a      	strb	r2, [r3, #0]
 8010116:	e00a      	b.n	801012e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	0f1b      	lsrs	r3, r3, #28
 801011c:	b2da      	uxtb	r2, r3
 801011e:	7dfb      	ldrb	r3, [r7, #23]
 8010120:	005b      	lsls	r3, r3, #1
 8010122:	4619      	mov	r1, r3
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	440b      	add	r3, r1
 8010128:	3237      	adds	r2, #55	@ 0x37
 801012a:	b2d2      	uxtb	r2, r2
 801012c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	011b      	lsls	r3, r3, #4
 8010132:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010134:	7dfb      	ldrb	r3, [r7, #23]
 8010136:	005b      	lsls	r3, r3, #1
 8010138:	3301      	adds	r3, #1
 801013a:	68ba      	ldr	r2, [r7, #8]
 801013c:	4413      	add	r3, r2
 801013e:	2200      	movs	r2, #0
 8010140:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010142:	7dfb      	ldrb	r3, [r7, #23]
 8010144:	3301      	adds	r3, #1
 8010146:	75fb      	strb	r3, [r7, #23]
 8010148:	7dfa      	ldrb	r2, [r7, #23]
 801014a:	79fb      	ldrb	r3, [r7, #7]
 801014c:	429a      	cmp	r2, r3
 801014e:	d3d3      	bcc.n	80100f8 <IntToUnicode+0x18>
  }
}
 8010150:	bf00      	nop
 8010152:	bf00      	nop
 8010154:	371c      	adds	r7, #28
 8010156:	46bd      	mov	sp, r7
 8010158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015c:	4770      	bx	lr
	...

08010160 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b0ba      	sub	sp, #232	@ 0xe8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010168:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801016c:	2200      	movs	r2, #0
 801016e:	601a      	str	r2, [r3, #0]
 8010170:	605a      	str	r2, [r3, #4]
 8010172:	609a      	str	r2, [r3, #8]
 8010174:	60da      	str	r2, [r3, #12]
 8010176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010178:	f107 0310 	add.w	r3, r7, #16
 801017c:	22c0      	movs	r2, #192	@ 0xc0
 801017e:	2100      	movs	r1, #0
 8010180:	4618      	mov	r0, r3
 8010182:	f000 fb55 	bl	8010830 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a43      	ldr	r2, [pc, #268]	@ (8010298 <HAL_PCD_MspInit+0x138>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d17f      	bne.n	8010290 <HAL_PCD_MspInit+0x130>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010190:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010194:	f04f 0300 	mov.w	r3, #0
 8010198:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 801019c:	2301      	movs	r3, #1
 801019e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80101a0:	2312      	movs	r3, #18
 80101a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80101a4:	2302      	movs	r3, #2
 80101a6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80101a8:	2303      	movs	r3, #3
 80101aa:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80101ac:	2302      	movs	r3, #2
 80101ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80101b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80101b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80101b6:	2300      	movs	r3, #0
 80101b8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80101ba:	2300      	movs	r3, #0
 80101bc:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80101be:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80101c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80101c6:	f107 0310 	add.w	r3, r7, #16
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7f8 fd8c 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 80101d0:	4603      	mov	r3, r0
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d001      	beq.n	80101da <HAL_PCD_MspInit+0x7a>
    {
      Error_Handler();
 80101d6:	f7f0 fdcf 	bl	8000d78 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80101da:	f7f7 fd63 	bl	8007ca4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80101de:	4b2f      	ldr	r3, [pc, #188]	@ (801029c <HAL_PCD_MspInit+0x13c>)
 80101e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80101e4:	4a2d      	ldr	r2, [pc, #180]	@ (801029c <HAL_PCD_MspInit+0x13c>)
 80101e6:	f043 0301 	orr.w	r3, r3, #1
 80101ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80101ee:	4b2b      	ldr	r3, [pc, #172]	@ (801029c <HAL_PCD_MspInit+0x13c>)
 80101f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80101f4:	f003 0301 	and.w	r3, r3, #1
 80101f8:	60fb      	str	r3, [r7, #12]
 80101fa:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80101fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010200:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010204:	2300      	movs	r3, #0
 8010206:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801020a:	2300      	movs	r3, #0
 801020c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010210:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010214:	4619      	mov	r1, r3
 8010216:	4822      	ldr	r0, [pc, #136]	@ (80102a0 <HAL_PCD_MspInit+0x140>)
 8010218:	f7f5 f938 	bl	800548c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801021c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010220:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010224:	2302      	movs	r3, #2
 8010226:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801022a:	2300      	movs	r3, #0
 801022c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010230:	2300      	movs	r3, #0
 8010232:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010236:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801023a:	4619      	mov	r1, r3
 801023c:	4818      	ldr	r0, [pc, #96]	@ (80102a0 <HAL_PCD_MspInit+0x140>)
 801023e:	f7f5 f925 	bl	800548c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010242:	4b16      	ldr	r3, [pc, #88]	@ (801029c <HAL_PCD_MspInit+0x13c>)
 8010244:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8010248:	4a14      	ldr	r2, [pc, #80]	@ (801029c <HAL_PCD_MspInit+0x13c>)
 801024a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801024e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8010252:	4b12      	ldr	r3, [pc, #72]	@ (801029c <HAL_PCD_MspInit+0x13c>)
 8010254:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8010258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801025c:	60bb      	str	r3, [r7, #8]
 801025e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8010260:	2200      	movs	r2, #0
 8010262:	2100      	movs	r1, #0
 8010264:	204a      	movs	r0, #74	@ 0x4a
 8010266:	f7f2 ffb0 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 801026a:	204a      	movs	r0, #74	@ 0x4a
 801026c:	f7f2 ffc7 	bl	80031fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8010270:	2200      	movs	r2, #0
 8010272:	2100      	movs	r1, #0
 8010274:	204b      	movs	r0, #75	@ 0x4b
 8010276:	f7f2 ffa8 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 801027a:	204b      	movs	r0, #75	@ 0x4b
 801027c:	f7f2 ffbf 	bl	80031fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8010280:	2200      	movs	r2, #0
 8010282:	2100      	movs	r1, #0
 8010284:	204d      	movs	r0, #77	@ 0x4d
 8010286:	f7f2 ffa0 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801028a:	204d      	movs	r0, #77	@ 0x4d
 801028c:	f7f2 ffb7 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010290:	bf00      	nop
 8010292:	37e8      	adds	r7, #232	@ 0xe8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	40040000 	.word	0x40040000
 801029c:	58024400 	.word	0x58024400
 80102a0:	58020000 	.word	0x58020000

080102a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80102b8:	4619      	mov	r1, r3
 80102ba:	4610      	mov	r0, r2
 80102bc:	f7fe faf5 	bl	800e8aa <USBD_LL_SetupStage>
}
 80102c0:	bf00      	nop
 80102c2:	3708      	adds	r7, #8
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	460b      	mov	r3, r1
 80102d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80102da:	78fa      	ldrb	r2, [r7, #3]
 80102dc:	6879      	ldr	r1, [r7, #4]
 80102de:	4613      	mov	r3, r2
 80102e0:	00db      	lsls	r3, r3, #3
 80102e2:	4413      	add	r3, r2
 80102e4:	009b      	lsls	r3, r3, #2
 80102e6:	440b      	add	r3, r1
 80102e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	78fb      	ldrb	r3, [r7, #3]
 80102f0:	4619      	mov	r1, r3
 80102f2:	f7fe fb2f 	bl	800e954 <USBD_LL_DataOutStage>
}
 80102f6:	bf00      	nop
 80102f8:	3708      	adds	r7, #8
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b082      	sub	sp, #8
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
 8010306:	460b      	mov	r3, r1
 8010308:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010310:	78fa      	ldrb	r2, [r7, #3]
 8010312:	6879      	ldr	r1, [r7, #4]
 8010314:	4613      	mov	r3, r2
 8010316:	00db      	lsls	r3, r3, #3
 8010318:	4413      	add	r3, r2
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	440b      	add	r3, r1
 801031e:	3320      	adds	r3, #32
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	78fb      	ldrb	r3, [r7, #3]
 8010324:	4619      	mov	r1, r3
 8010326:	f7fe fbc8 	bl	800eaba <USBD_LL_DataInStage>
}
 801032a:	bf00      	nop
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010332:	b580      	push	{r7, lr}
 8010334:	b082      	sub	sp, #8
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010340:	4618      	mov	r0, r3
 8010342:	f7fe fd02 	bl	800ed4a <USBD_LL_SOF>
}
 8010346:	bf00      	nop
 8010348:	3708      	adds	r7, #8
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}

0801034e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801034e:	b580      	push	{r7, lr}
 8010350:	b084      	sub	sp, #16
 8010352:	af00      	add	r7, sp, #0
 8010354:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010356:	2301      	movs	r3, #1
 8010358:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	79db      	ldrb	r3, [r3, #7]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d102      	bne.n	8010368 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010362:	2300      	movs	r3, #0
 8010364:	73fb      	strb	r3, [r7, #15]
 8010366:	e008      	b.n	801037a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	79db      	ldrb	r3, [r3, #7]
 801036c:	2b02      	cmp	r3, #2
 801036e:	d102      	bne.n	8010376 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010370:	2301      	movs	r3, #1
 8010372:	73fb      	strb	r3, [r7, #15]
 8010374:	e001      	b.n	801037a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010376:	f7f0 fcff 	bl	8000d78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010380:	7bfa      	ldrb	r2, [r7, #15]
 8010382:	4611      	mov	r1, r2
 8010384:	4618      	mov	r0, r3
 8010386:	f7fe fc9c 	bl	800ecc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010390:	4618      	mov	r0, r3
 8010392:	f7fe fc44 	bl	800ec1e <USBD_LL_Reset>
}
 8010396:	bf00      	nop
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
	...

080103a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fe fc97 	bl	800ece2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	6812      	ldr	r2, [r2, #0]
 80103c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80103c6:	f043 0301 	orr.w	r3, r3, #1
 80103ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	7adb      	ldrb	r3, [r3, #11]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d005      	beq.n	80103e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80103d4:	4b04      	ldr	r3, [pc, #16]	@ (80103e8 <HAL_PCD_SuspendCallback+0x48>)
 80103d6:	691b      	ldr	r3, [r3, #16]
 80103d8:	4a03      	ldr	r2, [pc, #12]	@ (80103e8 <HAL_PCD_SuspendCallback+0x48>)
 80103da:	f043 0306 	orr.w	r3, r3, #6
 80103de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80103e0:	bf00      	nop
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	e000ed00 	.word	0xe000ed00

080103ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fe fc8d 	bl	800ed1a <USBD_LL_Resume>
}
 8010400:	bf00      	nop
 8010402:	3708      	adds	r7, #8
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	460b      	mov	r3, r1
 8010412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801041a:	78fa      	ldrb	r2, [r7, #3]
 801041c:	4611      	mov	r1, r2
 801041e:	4618      	mov	r0, r3
 8010420:	f7fe fce5 	bl	800edee <USBD_LL_IsoOUTIncomplete>
}
 8010424:	bf00      	nop
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	460b      	mov	r3, r1
 8010436:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801043e:	78fa      	ldrb	r2, [r7, #3]
 8010440:	4611      	mov	r1, r2
 8010442:	4618      	mov	r0, r3
 8010444:	f7fe fca1 	bl	800ed8a <USBD_LL_IsoINIncomplete>
}
 8010448:	bf00      	nop
 801044a:	3708      	adds	r7, #8
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801045e:	4618      	mov	r0, r3
 8010460:	f7fe fcf7 	bl	800ee52 <USBD_LL_DevConnected>
}
 8010464:	bf00      	nop
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b082      	sub	sp, #8
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801047a:	4618      	mov	r0, r3
 801047c:	f7fe fcf4 	bl	800ee68 <USBD_LL_DevDisconnected>
}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	2b01      	cmp	r3, #1
 8010496:	d140      	bne.n	801051a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8010498:	4a22      	ldr	r2, [pc, #136]	@ (8010524 <USBD_LL_Init+0x9c>)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	4a20      	ldr	r2, [pc, #128]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104a4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80104a8:	4b1e      	ldr	r3, [pc, #120]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104aa:	4a1f      	ldr	r2, [pc, #124]	@ (8010528 <USBD_LL_Init+0xa0>)
 80104ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80104ae:	4b1d      	ldr	r3, [pc, #116]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104b0:	2209      	movs	r2, #9
 80104b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80104b4:	4b1b      	ldr	r3, [pc, #108]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104b6:	2202      	movs	r2, #2
 80104b8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80104ba:	4b1a      	ldr	r3, [pc, #104]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104bc:	2200      	movs	r2, #0
 80104be:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80104c0:	4b18      	ldr	r3, [pc, #96]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104c2:	2202      	movs	r2, #2
 80104c4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80104c6:	4b17      	ldr	r3, [pc, #92]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80104cc:	4b15      	ldr	r3, [pc, #84]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104ce:	2200      	movs	r2, #0
 80104d0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80104d2:	4b14      	ldr	r3, [pc, #80]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104d4:	2200      	movs	r2, #0
 80104d6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 80104d8:	4b12      	ldr	r3, [pc, #72]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104da:	2201      	movs	r2, #1
 80104dc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80104de:	4b11      	ldr	r3, [pc, #68]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80104e4:	4b0f      	ldr	r3, [pc, #60]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104e6:	2200      	movs	r2, #0
 80104e8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80104ea:	480e      	ldr	r0, [pc, #56]	@ (8010524 <USBD_LL_Init+0x9c>)
 80104ec:	f7f6 f8ff 	bl	80066ee <HAL_PCD_Init>
 80104f0:	4603      	mov	r3, r0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d001      	beq.n	80104fa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80104f6:	f7f0 fc3f 	bl	8000d78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80104fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80104fe:	4809      	ldr	r0, [pc, #36]	@ (8010524 <USBD_LL_Init+0x9c>)
 8010500:	f7f7 fb55 	bl	8007bae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8010504:	2280      	movs	r2, #128	@ 0x80
 8010506:	2100      	movs	r1, #0
 8010508:	4806      	ldr	r0, [pc, #24]	@ (8010524 <USBD_LL_Init+0x9c>)
 801050a:	f7f7 fb09 	bl	8007b20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801050e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8010512:	2101      	movs	r1, #1
 8010514:	4803      	ldr	r0, [pc, #12]	@ (8010524 <USBD_LL_Init+0x9c>)
 8010516:	f7f7 fb03 	bl	8007b20 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801051a:	2300      	movs	r3, #0
}
 801051c:	4618      	mov	r0, r3
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	240019ac 	.word	0x240019ac
 8010528:	40040000 	.word	0x40040000

0801052c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010534:	2300      	movs	r3, #0
 8010536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010538:	2300      	movs	r3, #0
 801053a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010542:	4618      	mov	r0, r3
 8010544:	f7f6 f9df 	bl	8006906 <HAL_PCD_Start>
 8010548:	4603      	mov	r3, r0
 801054a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801054c:	7bfb      	ldrb	r3, [r7, #15]
 801054e:	4618      	mov	r0, r3
 8010550:	f000 f942 	bl	80107d8 <USBD_Get_USB_Status>
 8010554:	4603      	mov	r3, r0
 8010556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010558:	7bbb      	ldrb	r3, [r7, #14]
}
 801055a:	4618      	mov	r0, r3
 801055c:	3710      	adds	r7, #16
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}

08010562 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010562:	b580      	push	{r7, lr}
 8010564:	b084      	sub	sp, #16
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
 801056a:	4608      	mov	r0, r1
 801056c:	4611      	mov	r1, r2
 801056e:	461a      	mov	r2, r3
 8010570:	4603      	mov	r3, r0
 8010572:	70fb      	strb	r3, [r7, #3]
 8010574:	460b      	mov	r3, r1
 8010576:	70bb      	strb	r3, [r7, #2]
 8010578:	4613      	mov	r3, r2
 801057a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801057c:	2300      	movs	r3, #0
 801057e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010580:	2300      	movs	r3, #0
 8010582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801058a:	78bb      	ldrb	r3, [r7, #2]
 801058c:	883a      	ldrh	r2, [r7, #0]
 801058e:	78f9      	ldrb	r1, [r7, #3]
 8010590:	f7f6 fee0 	bl	8007354 <HAL_PCD_EP_Open>
 8010594:	4603      	mov	r3, r0
 8010596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010598:	7bfb      	ldrb	r3, [r7, #15]
 801059a:	4618      	mov	r0, r3
 801059c:	f000 f91c 	bl	80107d8 <USBD_Get_USB_Status>
 80105a0:	4603      	mov	r3, r0
 80105a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}

080105ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b084      	sub	sp, #16
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
 80105b6:	460b      	mov	r3, r1
 80105b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105ba:	2300      	movs	r3, #0
 80105bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105be:	2300      	movs	r3, #0
 80105c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80105c8:	78fa      	ldrb	r2, [r7, #3]
 80105ca:	4611      	mov	r1, r2
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7f6 ff2b 	bl	8007428 <HAL_PCD_EP_Close>
 80105d2:	4603      	mov	r3, r0
 80105d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105d6:	7bfb      	ldrb	r3, [r7, #15]
 80105d8:	4618      	mov	r0, r3
 80105da:	f000 f8fd 	bl	80107d8 <USBD_Get_USB_Status>
 80105de:	4603      	mov	r3, r0
 80105e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3710      	adds	r7, #16
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	460b      	mov	r3, r1
 80105f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105f8:	2300      	movs	r3, #0
 80105fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105fc:	2300      	movs	r3, #0
 80105fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010606:	78fa      	ldrb	r2, [r7, #3]
 8010608:	4611      	mov	r1, r2
 801060a:	4618      	mov	r0, r3
 801060c:	f7f6 ffe3 	bl	80075d6 <HAL_PCD_EP_SetStall>
 8010610:	4603      	mov	r3, r0
 8010612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010614:	7bfb      	ldrb	r3, [r7, #15]
 8010616:	4618      	mov	r0, r3
 8010618:	f000 f8de 	bl	80107d8 <USBD_Get_USB_Status>
 801061c:	4603      	mov	r3, r0
 801061e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010620:	7bbb      	ldrb	r3, [r7, #14]
}
 8010622:	4618      	mov	r0, r3
 8010624:	3710      	adds	r7, #16
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}

0801062a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801062a:	b580      	push	{r7, lr}
 801062c:	b084      	sub	sp, #16
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
 8010632:	460b      	mov	r3, r1
 8010634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010636:	2300      	movs	r3, #0
 8010638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801063a:	2300      	movs	r3, #0
 801063c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010644:	78fa      	ldrb	r2, [r7, #3]
 8010646:	4611      	mov	r1, r2
 8010648:	4618      	mov	r0, r3
 801064a:	f7f7 f827 	bl	800769c <HAL_PCD_EP_ClrStall>
 801064e:	4603      	mov	r3, r0
 8010650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010652:	7bfb      	ldrb	r3, [r7, #15]
 8010654:	4618      	mov	r0, r3
 8010656:	f000 f8bf 	bl	80107d8 <USBD_Get_USB_Status>
 801065a:	4603      	mov	r3, r0
 801065c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801065e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010660:	4618      	mov	r0, r3
 8010662:	3710      	adds	r7, #16
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010668:	b480      	push	{r7}
 801066a:	b085      	sub	sp, #20
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	460b      	mov	r3, r1
 8010672:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801067a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801067c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010680:	2b00      	cmp	r3, #0
 8010682:	da0b      	bge.n	801069c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010684:	78fb      	ldrb	r3, [r7, #3]
 8010686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801068a:	68f9      	ldr	r1, [r7, #12]
 801068c:	4613      	mov	r3, r2
 801068e:	00db      	lsls	r3, r3, #3
 8010690:	4413      	add	r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	440b      	add	r3, r1
 8010696:	3316      	adds	r3, #22
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	e00b      	b.n	80106b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801069c:	78fb      	ldrb	r3, [r7, #3]
 801069e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80106a2:	68f9      	ldr	r1, [r7, #12]
 80106a4:	4613      	mov	r3, r2
 80106a6:	00db      	lsls	r3, r3, #3
 80106a8:	4413      	add	r3, r2
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	440b      	add	r3, r1
 80106ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80106b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3714      	adds	r7, #20
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	460b      	mov	r3, r1
 80106ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106cc:	2300      	movs	r3, #0
 80106ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106d0:	2300      	movs	r3, #0
 80106d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106da:	78fa      	ldrb	r2, [r7, #3]
 80106dc:	4611      	mov	r1, r2
 80106de:	4618      	mov	r0, r3
 80106e0:	f7f6 fe14 	bl	800730c <HAL_PCD_SetAddress>
 80106e4:	4603      	mov	r3, r0
 80106e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106e8:	7bfb      	ldrb	r3, [r7, #15]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f000 f874 	bl	80107d8 <USBD_Get_USB_Status>
 80106f0:	4603      	mov	r3, r0
 80106f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}

080106fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106fe:	b580      	push	{r7, lr}
 8010700:	b086      	sub	sp, #24
 8010702:	af00      	add	r7, sp, #0
 8010704:	60f8      	str	r0, [r7, #12]
 8010706:	607a      	str	r2, [r7, #4]
 8010708:	603b      	str	r3, [r7, #0]
 801070a:	460b      	mov	r3, r1
 801070c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801070e:	2300      	movs	r3, #0
 8010710:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010712:	2300      	movs	r3, #0
 8010714:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801071c:	7af9      	ldrb	r1, [r7, #11]
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	f7f6 ff1e 	bl	8007562 <HAL_PCD_EP_Transmit>
 8010726:	4603      	mov	r3, r0
 8010728:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801072a:	7dfb      	ldrb	r3, [r7, #23]
 801072c:	4618      	mov	r0, r3
 801072e:	f000 f853 	bl	80107d8 <USBD_Get_USB_Status>
 8010732:	4603      	mov	r3, r0
 8010734:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010736:	7dbb      	ldrb	r3, [r7, #22]
}
 8010738:	4618      	mov	r0, r3
 801073a:	3718      	adds	r7, #24
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b086      	sub	sp, #24
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	607a      	str	r2, [r7, #4]
 801074a:	603b      	str	r3, [r7, #0]
 801074c:	460b      	mov	r3, r1
 801074e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010750:	2300      	movs	r3, #0
 8010752:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010754:	2300      	movs	r3, #0
 8010756:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801075e:	7af9      	ldrb	r1, [r7, #11]
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	f7f6 feaa 	bl	80074bc <HAL_PCD_EP_Receive>
 8010768:	4603      	mov	r3, r0
 801076a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801076c:	7dfb      	ldrb	r3, [r7, #23]
 801076e:	4618      	mov	r0, r3
 8010770:	f000 f832 	bl	80107d8 <USBD_Get_USB_Status>
 8010774:	4603      	mov	r3, r0
 8010776:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010778:	7dbb      	ldrb	r3, [r7, #22]
}
 801077a:	4618      	mov	r0, r3
 801077c:	3718      	adds	r7, #24
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010782:	b580      	push	{r7, lr}
 8010784:	b082      	sub	sp, #8
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	460b      	mov	r3, r1
 801078c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010794:	78fa      	ldrb	r2, [r7, #3]
 8010796:	4611      	mov	r1, r2
 8010798:	4618      	mov	r0, r3
 801079a:	f7f6 feca 	bl	8007532 <HAL_PCD_EP_GetRxCount>
 801079e:	4603      	mov	r3, r0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80107b0:	4b03      	ldr	r3, [pc, #12]	@ (80107c0 <USBD_static_malloc+0x18>)
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	370c      	adds	r7, #12
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	24001e90 	.word	0x24001e90

080107c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80107cc:	bf00      	nop
 80107ce:	370c      	adds	r7, #12
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80107d8:	b480      	push	{r7}
 80107da:	b085      	sub	sp, #20
 80107dc:	af00      	add	r7, sp, #0
 80107de:	4603      	mov	r3, r0
 80107e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107e2:	2300      	movs	r3, #0
 80107e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80107e6:	79fb      	ldrb	r3, [r7, #7]
 80107e8:	2b03      	cmp	r3, #3
 80107ea:	d817      	bhi.n	801081c <USBD_Get_USB_Status+0x44>
 80107ec:	a201      	add	r2, pc, #4	@ (adr r2, 80107f4 <USBD_Get_USB_Status+0x1c>)
 80107ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f2:	bf00      	nop
 80107f4:	08010805 	.word	0x08010805
 80107f8:	0801080b 	.word	0x0801080b
 80107fc:	08010811 	.word	0x08010811
 8010800:	08010817 	.word	0x08010817
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010804:	2300      	movs	r3, #0
 8010806:	73fb      	strb	r3, [r7, #15]
    break;
 8010808:	e00b      	b.n	8010822 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801080a:	2303      	movs	r3, #3
 801080c:	73fb      	strb	r3, [r7, #15]
    break;
 801080e:	e008      	b.n	8010822 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010810:	2301      	movs	r3, #1
 8010812:	73fb      	strb	r3, [r7, #15]
    break;
 8010814:	e005      	b.n	8010822 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010816:	2303      	movs	r3, #3
 8010818:	73fb      	strb	r3, [r7, #15]
    break;
 801081a:	e002      	b.n	8010822 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801081c:	2303      	movs	r3, #3
 801081e:	73fb      	strb	r3, [r7, #15]
    break;
 8010820:	bf00      	nop
  }
  return usb_status;
 8010822:	7bfb      	ldrb	r3, [r7, #15]
}
 8010824:	4618      	mov	r0, r3
 8010826:	3714      	adds	r7, #20
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <memset>:
 8010830:	4402      	add	r2, r0
 8010832:	4603      	mov	r3, r0
 8010834:	4293      	cmp	r3, r2
 8010836:	d100      	bne.n	801083a <memset+0xa>
 8010838:	4770      	bx	lr
 801083a:	f803 1b01 	strb.w	r1, [r3], #1
 801083e:	e7f9      	b.n	8010834 <memset+0x4>

08010840 <__libc_init_array>:
 8010840:	b570      	push	{r4, r5, r6, lr}
 8010842:	4d0d      	ldr	r5, [pc, #52]	@ (8010878 <__libc_init_array+0x38>)
 8010844:	4c0d      	ldr	r4, [pc, #52]	@ (801087c <__libc_init_array+0x3c>)
 8010846:	1b64      	subs	r4, r4, r5
 8010848:	10a4      	asrs	r4, r4, #2
 801084a:	2600      	movs	r6, #0
 801084c:	42a6      	cmp	r6, r4
 801084e:	d109      	bne.n	8010864 <__libc_init_array+0x24>
 8010850:	4d0b      	ldr	r5, [pc, #44]	@ (8010880 <__libc_init_array+0x40>)
 8010852:	4c0c      	ldr	r4, [pc, #48]	@ (8010884 <__libc_init_array+0x44>)
 8010854:	f000 f818 	bl	8010888 <_init>
 8010858:	1b64      	subs	r4, r4, r5
 801085a:	10a4      	asrs	r4, r4, #2
 801085c:	2600      	movs	r6, #0
 801085e:	42a6      	cmp	r6, r4
 8010860:	d105      	bne.n	801086e <__libc_init_array+0x2e>
 8010862:	bd70      	pop	{r4, r5, r6, pc}
 8010864:	f855 3b04 	ldr.w	r3, [r5], #4
 8010868:	4798      	blx	r3
 801086a:	3601      	adds	r6, #1
 801086c:	e7ee      	b.n	801084c <__libc_init_array+0xc>
 801086e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010872:	4798      	blx	r3
 8010874:	3601      	adds	r6, #1
 8010876:	e7f2      	b.n	801085e <__libc_init_array+0x1e>
 8010878:	08010a34 	.word	0x08010a34
 801087c:	08010a34 	.word	0x08010a34
 8010880:	08010a34 	.word	0x08010a34
 8010884:	08010a38 	.word	0x08010a38

08010888 <_init>:
 8010888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801088a:	bf00      	nop
 801088c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801088e:	bc08      	pop	{r3}
 8010890:	469e      	mov	lr, r3
 8010892:	4770      	bx	lr

08010894 <_fini>:
 8010894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010896:	bf00      	nop
 8010898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801089a:	bc08      	pop	{r3}
 801089c:	469e      	mov	lr, r3
 801089e:	4770      	bx	lr
