
thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011370  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08011620  08011620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080117f8  080117f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011800  08011800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011804  08011804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  08011808  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020f8  24000154  0801195c  00013154  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400224c  0801195c  0001324c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013154  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022dc9  00000000  00000000  00013182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c1d  00000000  00000000  00035f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b78  00000000  00000000  0003ab68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014d5  00000000  00000000  0003c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000366dc  00000000  00000000  0003dbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026738  00000000  00000000  00074291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014dd09  00000000  00000000  0009a9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e86d2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000078e0  00000000  00000000  001e8718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  001efff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000154 	.word	0x24000154
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08011608 	.word	0x08011608

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000158 	.word	0x24000158
 80002ec:	08011608 	.word	0x08011608

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <I2C_write>:
#include "comms.h"


// I2C
void I2C_write(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af04      	add	r7, sp, #16
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	460b      	mov	r3, r1
 800039c:	72fb      	strb	r3, [r7, #11]
 800039e:	4613      	mov	r3, r2
 80003a0:	72bb      	strb	r3, [r7, #10]
	*status = HAL_I2C_Mem_Write(&hi2c2, dev_adress, reg_adress, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80003a2:	7afb      	ldrb	r3, [r7, #11]
 80003a4:	b299      	uxth	r1, r3
 80003a6:	7abb      	ldrb	r3, [r7, #10]
 80003a8:	b29a      	uxth	r2, r3
 80003aa:	2364      	movs	r3, #100	@ 0x64
 80003ac:	9302      	str	r3, [sp, #8]
 80003ae:	2301      	movs	r3, #1
 80003b0:	9301      	str	r3, [sp, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2301      	movs	r3, #1
 80003b8:	4805      	ldr	r0, [pc, #20]	@ (80003d0 <I2C_write+0x40>)
 80003ba:	f005 ff3f 	bl	800623c <HAL_I2C_Mem_Write>
 80003be:	4603      	mov	r3, r0
 80003c0:	461a      	mov	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	701a      	strb	r2, [r3, #0]
}
 80003c6:	bf00      	nop
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	24000344 	.word	0x24000344

080003d4 <I2C_read>:

void I2C_read(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af02      	add	r7, sp, #8
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	460b      	mov	r3, r1
 80003e0:	72fb      	strb	r3, [r7, #11]
 80003e2:	4613      	mov	r3, r2
 80003e4:	72bb      	strb	r3, [r7, #10]
	dev_adress += 1;
 80003e6:	7afb      	ldrb	r3, [r7, #11]
 80003e8:	3301      	adds	r3, #1
 80003ea:	72fb      	strb	r3, [r7, #11]
	*status = HAL_I2C_Master_Transmit(&hi2c2, dev_adress, &reg_adress, 1, 500);
 80003ec:	7afb      	ldrb	r3, [r7, #11]
 80003ee:	b299      	uxth	r1, r3
 80003f0:	f107 020a 	add.w	r2, r7, #10
 80003f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2301      	movs	r3, #1
 80003fc:	480d      	ldr	r0, [pc, #52]	@ (8000434 <I2C_read+0x60>)
 80003fe:	f005 fd0f 	bl	8005e20 <HAL_I2C_Master_Transmit>
 8000402:	4603      	mov	r3, r0
 8000404:	461a      	mov	r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	701a      	strb	r2, [r3, #0]
	*status |= HAL_I2C_Master_Receive(&hi2c2, dev_adress, data, 1, 100);
 800040a:	7afb      	ldrb	r3, [r7, #11]
 800040c:	b299      	uxth	r1, r3
 800040e:	2364      	movs	r3, #100	@ 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2301      	movs	r3, #1
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	4807      	ldr	r0, [pc, #28]	@ (8000434 <I2C_read+0x60>)
 8000418:	f005 fe1a 	bl	8006050 <HAL_I2C_Master_Receive>
 800041c:	4603      	mov	r3, r0
 800041e:	461a      	mov	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	4313      	orrs	r3, r2
 8000426:	b2da      	uxtb	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	701a      	strb	r2, [r3, #0]
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	24000344 	.word	0x24000344

08000438 <close_SPI>:




// SPI
void close_SPI(SPI_HandleTypeDef* hspi) {
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	uint32_t itflag = hspi->Instance->SR;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	60fb      	str	r3, [r7, #12]

	  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	699a      	ldr	r2, [r3, #24]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f042 0208 	orr.w	r2, r2, #8
 8000456:	619a      	str	r2, [r3, #24]
	  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	699a      	ldr	r2, [r3, #24]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f042 0210 	orr.w	r2, r2, #16
 8000466:	619a      	str	r2, [r3, #24]

	  /* Disable SPI peripheral */
	  __HAL_SPI_DISABLE(hspi);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f022 0201 	bic.w	r2, r2, #1
 8000476:	601a      	str	r2, [r3, #0]

	  /* Disable ITs */
	  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	6919      	ldr	r1, [r3, #16]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b3c      	ldr	r3, [pc, #240]	@ (8000574 <close_SPI+0x13c>)
 8000484:	400b      	ands	r3, r1
 8000486:	6113      	str	r3, [r2, #16]
	                              SPI_IT_FRE | SPI_IT_MODF));

	  /* Disable Tx DMA Request */
	  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	689a      	ldr	r2, [r3, #8]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000496:	609a      	str	r2, [r3, #8]

	  /* Report UnderRun error for non RX Only communication */
	  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b04      	cmp	r3, #4
 80004a2:	d014      	beq.n	80004ce <close_SPI+0x96>
	  {
	    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f003 0320 	and.w	r3, r3, #32
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d00f      	beq.n	80004ce <close_SPI+0x96>
	    {
	      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80004b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	699a      	ldr	r2, [r3, #24]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f042 0220 	orr.w	r2, r2, #32
 80004cc:	619a      	str	r2, [r3, #24]
	    }
	  }

	  /* Report OverRun error for non TX Only communication */
	  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d014      	beq.n	8000504 <close_SPI+0xcc>
	  {
	    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d00f      	beq.n	8000504 <close_SPI+0xcc>
	    {
	      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80004ea:	f043 0204 	orr.w	r2, r3, #4
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	699a      	ldr	r2, [r3, #24]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000502:	619a      	str	r2, [r3, #24]
	    }
	#endif /* USE_SPI_CRC */
	  }

	  /* SPI Mode Fault error interrupt occurred -------------------------------*/
	  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00f      	beq.n	800052e <close_SPI+0xf6>
	  {
	    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000514:	f043 0201 	orr.w	r2, r3, #1
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	699a      	ldr	r2, [r3, #24]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800052c:	619a      	str	r2, [r3, #24]
	  }

	  /* SPI Frame error interrupt occurred ------------------------------------*/
	  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00f      	beq.n	8000558 <close_SPI+0x120>
	  {
	    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800053e:	f043 0208 	orr.w	r2, r3, #8
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	699a      	ldr	r2, [r3, #24]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000556:	619a      	str	r2, [r3, #24]
	  }

	  hspi->TxXferCount = (uint16_t)0UL;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2200      	movs	r2, #0
 800055c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	  hspi->RxXferCount = (uint16_t)0UL;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	fffffc90 	.word	0xfffffc90

08000578 <HAL_SPI_TxCpltCallback>:

// DMA callbacks, when SPI finishes
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 8000580:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <HAL_SPI_TxCpltCallback+0x1c>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	24000170 	.word	0x24000170

08000598 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	24000170 	.word	0x24000170

080005b8 <SPI_check_CTS>:

void SPI_check_CTS(HAL_StatusTypeDef* status) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	uint8_t attempt = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
	//uint8_t data[] = {0x20, 0, 0, 0}; //GET_INT_STATUS to clear CTS
	// Wait until Clear To Send (CTS) signal appears
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80005c4:	e00c      	b.n	80005e0 <SPI_check_CTS+0x28>
		attempt++;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	3301      	adds	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
		if (attempt > 100) {
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	2b64      	cmp	r3, #100	@ 0x64
 80005d0:	d903      	bls.n	80005da <SPI_check_CTS+0x22>
			*status = 0x3; // Timeout
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2203      	movs	r2, #3
 80005d6:	701a      	strb	r2, [r3, #0]
			return;
 80005d8:	e00a      	b.n	80005f0 <SPI_check_CTS+0x38>
		}
		HAL_Delay(100);
 80005da:	2064      	movs	r0, #100	@ 0x64
 80005dc:	f002 f81c 	bl	8002618 <HAL_Delay>
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80005e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <SPI_check_CTS+0x40>)
 80005e6:	f005 fb4d 	bl	8005c84 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0ea      	beq.n	80005c6 <SPI_check_CTS+0xe>

	//*status |= HAL_SPI_Transmit(&hspi4, data, 4, 100);

	// SI is now ready to receive data

}
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	58021000 	.word	0x58021000

080005fc <SPI_write>:

void SPI_write(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
	// Transmit data array
	SPI_check_CTS(status);
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f7ff ffd5 	bl	80005b8 <SPI_check_CTS>
	if (*status != 0) {return;}
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d110      	bne.n	8000638 <SPI_write+0x3c>
	*status |= HAL_SPI_Transmit(&hspi4, data, *size, 100);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	2364      	movs	r3, #100	@ 0x64
 800061e:	68b9      	ldr	r1, [r7, #8]
 8000620:	4807      	ldr	r0, [pc, #28]	@ (8000640 <SPI_write+0x44>)
 8000622:	f00b fadb 	bl	800bbdc <HAL_SPI_Transmit>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4313      	orrs	r3, r2
 8000630:	b2da      	uxtb	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e000      	b.n	800063a <SPI_write+0x3e>
	if (*status != 0) {return;}
 8000638:	bf00      	nop
}
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	24000398 	.word	0x24000398

08000644 <SPI_read>:

// SPI functions
void SPI_read(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* TxSize, uint8_t* RxSize) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af02      	add	r7, sp, #8
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < *TxSize; i++) {
		data_buffer[i] = data[i];
	}
	*/

	SPI_check_CTS(status);
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f7ff ffb0 	bl	80005b8 <SPI_check_CTS>
	if (*status != 0) {return;}
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d14a      	bne.n	80006f6 <SPI_read+0xb2>
	// Duplicate data array with command and zeros (use static buffer)
	data_buffer[0] = data[0];
	*/

	// Address of requested register
	*status |= HAL_SPI_Transmit(&hspi4, data, *TxSize, 70);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	2346      	movs	r3, #70	@ 0x46
 8000668:	68b9      	ldr	r1, [r7, #8]
 800066a:	4826      	ldr	r0, [pc, #152]	@ (8000704 <SPI_read+0xc0>)
 800066c:	f00b fab6 	bl	800bbdc <HAL_SPI_Transmit>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4313      	orrs	r3, r2
 800067a:	b2da      	uxtb	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	701a      	strb	r2, [r3, #0]

	// Wait for CTS
	SPI_check_CTS(status);
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff ff99 	bl	80005b8 <SPI_check_CTS>
	if (*status != 0) {return;}
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d135      	bne.n	80006fa <SPI_read+0xb6>


	// Once approved, prepare for reading (READ_CMD_BUFF)
	data[0] = 0x44;
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	2244      	movs	r2, #68	@ 0x44
 8000692:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	3301      	adds	r3, #1
 8000698:	22ff      	movs	r2, #255	@ 0xff
 800069a:	701a      	strb	r2, [r3, #0]

	// Insert padding (Tx delay + CTS byte)
	*RxSize += 2;
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3302      	adds	r3, #2
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	701a      	strb	r2, [r3, #0]

	// Issue reading command
	*status |= HAL_SPI_TransmitReceive(&hspi4, data, data_buffer, *RxSize, 100);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	2364      	movs	r3, #100	@ 0x64
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	4613      	mov	r3, r2
 80006b4:	4a14      	ldr	r2, [pc, #80]	@ (8000708 <SPI_read+0xc4>)
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	4812      	ldr	r0, [pc, #72]	@ (8000704 <SPI_read+0xc0>)
 80006ba:	f00b fc7d 	bl	800bfb8 <HAL_SPI_TransmitReceive>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	701a      	strb	r2, [r3, #0]


	// Load read data into data array and remove padding at the beginning
	for (uint8_t i = 2; i < *RxSize; i++) {
 80006ce:	2302      	movs	r3, #2
 80006d0:	75fb      	strb	r3, [r7, #23]
 80006d2:	e00a      	b.n	80006ea <SPI_read+0xa6>
		data[i-2] = data_buffer[i];
 80006d4:	7dfa      	ldrb	r2, [r7, #23]
 80006d6:	7dfb      	ldrb	r3, [r7, #23]
 80006d8:	3b02      	subs	r3, #2
 80006da:	68b9      	ldr	r1, [r7, #8]
 80006dc:	440b      	add	r3, r1
 80006de:	490a      	ldr	r1, [pc, #40]	@ (8000708 <SPI_read+0xc4>)
 80006e0:	5c8a      	ldrb	r2, [r1, r2]
 80006e2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 2; i < *RxSize; i++) {
 80006e4:	7dfb      	ldrb	r3, [r7, #23]
 80006e6:	3301      	adds	r3, #1
 80006e8:	75fb      	strb	r3, [r7, #23]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	7dfa      	ldrb	r2, [r7, #23]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d3ef      	bcc.n	80006d4 <SPI_read+0x90>
 80006f4:	e002      	b.n	80006fc <SPI_read+0xb8>
	if (*status != 0) {return;}
 80006f6:	bf00      	nop
 80006f8:	e000      	b.n	80006fc <SPI_read+0xb8>
	if (*status != 0) {return;}
 80006fa:	bf00      	nop
	}

}
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	24000398 	.word	0x24000398
 8000708:	24000174 	.word	0x24000174

0800070c <PowerReset>:
	}
	strcpy(IDs[1], temp);
	return;
}

void PowerReset(HAL_StatusTypeDef* status) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers to default state
	I2C_read(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000714:	f107 030f 	add.w	r3, r7, #15
 8000718:	220c      	movs	r2, #12
 800071a:	2144      	movs	r1, #68	@ 0x44
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fe59 	bl	80003d4 <I2C_read>
	reg_val++;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	3301      	adds	r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, RESET, &reg_val);
 800072a:	f107 030f 	add.w	r3, r7, #15
 800072e:	220c      	movs	r2, #12
 8000730:	2144      	movs	r1, #68	@ 0x44
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff fe2c 	bl	8000390 <I2C_write>
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <PowerInit>:


void PowerInit(HAL_StatusTypeDef* status) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers
	PowerReset(status);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffdf 	bl	800070c <PowerReset>

	// Set device as SINK (Disable SRC/SNK toggle and poll CC lines only)
	// CONTROL2:(MODE, TOGGLE)
	I2C_read(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 800074e:	f107 030f 	add.w	r3, r7, #15
 8000752:	2208      	movs	r2, #8
 8000754:	2144      	movs	r1, #68	@ 0x44
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fe3c 	bl	80003d4 <I2C_read>
	reg_val |= ((1<<2) | 1);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	f043 0305 	orr.w	r3, r3, #5
 8000762:	b2db      	uxtb	r3, r3
 8000764:	73fb      	strb	r3, [r7, #15]
	reg_val &= ~(1<<1);
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	f023 0302 	bic.w	r3, r3, #2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 8000770:	f107 030f 	add.w	r3, r7, #15
 8000774:	2208      	movs	r2, #8
 8000776:	2144      	movs	r1, #68	@ 0x44
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff fe09 	bl	8000390 <I2C_write>


	// Initially, set current to USB default  (recommended by doc.)
	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 800077e:	f107 030f 	add.w	r3, r7, #15
 8000782:	2206      	movs	r2, #6
 8000784:	2144      	movs	r1, #68	@ 0x44
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff fe24 	bl	80003d4 <I2C_read>
	reg_val &= ~(1<<3);
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	f023 0308 	bic.w	r3, r3, #8
 8000792:	b2db      	uxtb	r3, r3
 8000794:	73fb      	strb	r3, [r7, #15]
	reg_val |= (1 << 2);
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	b2db      	uxtb	r3, r3
 800079e:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80007a0:	f107 030f 	add.w	r3, r7, #15
 80007a4:	2206      	movs	r2, #6
 80007a6:	2144      	movs	r1, #68	@ 0x44
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff fdf1 	bl	8000390 <I2C_write>

	// Disable current source(s) at CC lines
	I2C_read(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 80007ae:	f107 030f 	add.w	r3, r7, #15
 80007b2:	2202      	movs	r2, #2
 80007b4:	2144      	movs	r1, #68	@ 0x44
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fe0c 	bl	80003d4 <I2C_read>
	reg_val &= ~((1 << 5) | (1 << 4));
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 80007c6:	f107 030f 	add.w	r3, r7, #15
 80007ca:	2202      	movs	r2, #2
 80007cc:	2144      	movs	r1, #68	@ 0x44
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff fdde 	bl	8000390 <I2C_write>

	// Mask interrupt for current level request
	reg_val = 0xFE;
 80007d4:	23fe      	movs	r3, #254	@ 0xfe
 80007d6:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASK, &reg_val);
 80007d8:	f107 030f 	add.w	r3, r7, #15
 80007dc:	220a      	movs	r2, #10
 80007de:	2144      	movs	r1, #68	@ 0x44
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff fdd5 	bl	8000390 <I2C_write>

	// Mask interrupt for toggle status
	reg_val = 0xBF;
 80007e6:	23bf      	movs	r3, #191	@ 0xbf
 80007e8:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKA, &reg_val);
 80007ea:	f107 030f 	add.w	r3, r7, #15
 80007ee:	220e      	movs	r2, #14
 80007f0:	2144      	movs	r1, #68	@ 0x44
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fdcc 	bl	8000390 <I2C_write>

	// Mask interrupt for GoodCRC acknowledge (BMC is not used)
	reg_val = 0x01;
 80007f8:	2301      	movs	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKB, &reg_val);
 80007fc:	f107 030f 	add.w	r3, r7, #15
 8000800:	220f      	movs	r2, #15
 8000802:	2144      	movs	r1, #68	@ 0x44
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff fdc3 	bl	8000390 <I2C_write>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <PowerIncreaseCurrent>:

void PowerIncreaseCurrent(HAL_StatusTypeDef* status) {
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 800081a:	f107 030f 	add.w	r3, r7, #15
 800081e:	2206      	movs	r2, #6
 8000820:	2144      	movs	r1, #68	@ 0x44
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff fdd6 	bl	80003d4 <I2C_read>
	reg_val |= ((1<<3) | (1<<2));
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	f043 030c 	orr.w	r3, r3, #12
 800082e:	b2db      	uxtb	r3, r3
 8000830:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 8000832:	f107 030f 	add.w	r3, r7, #15
 8000836:	2206      	movs	r2, #6
 8000838:	2144      	movs	r1, #68	@ 0x44
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff fda8 	bl	8000390 <I2C_write>

	return;
 8000840:	bf00      	nop
}
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800084c:	f000 fb84 	bl	8000f58 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f001 fe50 	bl	80024f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f820 	bl	8000898 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000858:	f000 f89c 	bl	8000994 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085c:	f000 fa94 	bl	8000d88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000860:	f000 fa62 	bl	8000d28 <MX_DMA_Init>
  MX_DCMI_Init();
 8000864:	f000 f996 	bl	8000b94 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000868:	f000 f9c8 	bl	8000bfc <MX_I2C2_Init>
  MX_ADC1_Init();
 800086c:	f000 f8b2 	bl	80009d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000870:	f000 f92a 	bl	8000ac8 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8000874:	f00f fcde 	bl	8010234 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8000878:	f000 fa00 	bl	8000c7c <MX_SPI4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setup(&status, &error_index);
 800087c:	4904      	ldr	r1, [pc, #16]	@ (8000890 <main+0x48>)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <main+0x4c>)
 8000880:	f001 f840 	bl	8001904 <setup>
  get_radio_hw_info(&status, &error_index);
 8000884:	4902      	ldr	r1, [pc, #8]	@ (8000890 <main+0x48>)
 8000886:	4803      	ldr	r0, [pc, #12]	@ (8000894 <main+0x4c>)
 8000888:	f001 f8d8 	bl	8001a3c <get_radio_hw_info>
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <main+0x44>
 8000890:	24000511 	.word	0x24000511
 8000894:	24000510 	.word	0x24000510

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09c      	sub	sp, #112	@ 0x70
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a2:	224c      	movs	r2, #76	@ 0x4c
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f010 fa30 	bl	8010d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2220      	movs	r2, #32
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f010 fa2a 	bl	8010d0c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008b8:	4b34      	ldr	r3, [pc, #208]	@ (800098c <SystemClock_Config+0xf4>)
 80008ba:	f04f 32ff 	mov.w	r2, #4294967295
 80008be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c2:	2002      	movs	r0, #2
 80008c4:	f007 fc00 	bl	80080c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008c8:	2300      	movs	r3, #0
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <SystemClock_Config+0xf8>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a2f      	ldr	r2, [pc, #188]	@ (8000990 <SystemClock_Config+0xf8>)
 80008d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <SystemClock_Config+0xf8>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e4:	bf00      	nop
 80008e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000990 <SystemClock_Config+0xf8>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008f2:	d1f8      	bne.n	80008e6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008f4:	2303      	movs	r3, #3
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008fe:	2301      	movs	r3, #1
 8000900:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000902:	2340      	movs	r3, #64	@ 0x40
 8000904:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090a:	2302      	movs	r3, #2
 800090c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000912:	2346      	movs	r3, #70	@ 0x46
 8000914:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800091a:	2303      	movs	r3, #3
 800091c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000922:	230c      	movs	r3, #12
 8000924:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000926:	2300      	movs	r3, #0
 8000928:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000932:	4618      	mov	r0, r3
 8000934:	f007 fc12 	bl	800815c <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800093e:	f000 fb37 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	233f      	movs	r3, #63	@ 0x3f
 8000944:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2303      	movs	r3, #3
 8000948:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000952:	2340      	movs	r3, #64	@ 0x40
 8000954:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000956:	2340      	movs	r3, #64	@ 0x40
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000960:	2340      	movs	r3, #64	@ 0x40
 8000962:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2106      	movs	r1, #6
 8000968:	4618      	mov	r0, r3
 800096a:	f008 f829 	bl	80089c0 <HAL_RCC_ClockConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000974:	f000 fb1c 	bl	8000fb0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000978:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800097c:	2100      	movs	r1, #0
 800097e:	2000      	movs	r0, #0
 8000980:	f008 f9d4 	bl	8008d2c <HAL_RCC_MCOConfig>
}
 8000984:	bf00      	nop
 8000986:	3770      	adds	r7, #112	@ 0x70
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	58024400 	.word	0x58024400
 8000990:	58024800 	.word	0x58024800

08000994 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0b0      	sub	sp, #192	@ 0xc0
 8000998:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	22c0      	movs	r2, #192	@ 0xc0
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f010 f9b3 	bl	8010d0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80009a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 80009b2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4618      	mov	r0, r3
 80009bc:	f008 fbe0 	bl	8009180 <HAL_RCCEx_PeriphCLKConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <PeriphCommonClock_Config+0x36>
  {
    Error_Handler();
 80009c6:	f000 faf3 	bl	8000fb0 <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	37c0      	adds	r7, #192	@ 0xc0
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009e6:	463b      	mov	r3, r7
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
 80009f4:	615a      	str	r2, [r3, #20]
 80009f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f8:	4b30      	ldr	r3, [pc, #192]	@ (8000abc <MX_ADC1_Init+0xe8>)
 80009fa:	4a31      	ldr	r2, [pc, #196]	@ (8000ac0 <MX_ADC1_Init+0xec>)
 80009fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009fe:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a00:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a06:	4b2d      	ldr	r3, [pc, #180]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a12:	4b2a      	ldr	r3, [pc, #168]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a14:	2204      	movs	r2, #4
 8000a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a18:	4b28      	ldr	r3, [pc, #160]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a56:	4819      	ldr	r0, [pc, #100]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a58:	f001 ffc0 	bl	80029dc <HAL_ADC_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a62:	f000 faa5 	bl	8000fb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4812      	ldr	r0, [pc, #72]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000a72:	f002 fc7f 	bl	8003374 <HAL_ADCEx_MultiModeConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a7c:	f000 fa98 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a80:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a84:	2306      	movs	r3, #6
 8000a86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a8c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a92:	2304      	movs	r3, #4
 8000a94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <MX_ADC1_Init+0xe8>)
 8000aa4:	f002 f8f4 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000aae:	f000 fa7f 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	@ 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	240001b4 	.word	0x240001b4
 8000ac0:	40022000 	.word	0x40022000
 8000ac4:	25b00200 	.word	0x25b00200

08000ac8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	615a      	str	r2, [r3, #20]
 8000ade:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b8c <MX_ADC2_Init+0xc4>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ae6:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000ae8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af4:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000afa:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000afc:	2204      	movs	r2, #4
 8000afe:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b00:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b06:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b3e:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b40:	f001 ff4c 	bl	80029dc <HAL_ADC_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000b4a:	f000 fa31 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <MX_ADC2_Init+0xc8>)
 8000b50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b52:	2306      	movs	r3, #6
 8000b54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b5a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b5e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b60:	2304      	movs	r3, #4
 8000b62:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_ADC2_Init+0xc0>)
 8000b72:	f002 f88d 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000b7c:	f000 fa18 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	24000218 	.word	0x24000218
 8000b8c:	40022100 	.word	0x40022100
 8000b90:	21800100 	.word	0x21800100

08000b94 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000b9a:	4a17      	ldr	r2, [pc, #92]	@ (8000bf8 <MX_DCMI_Init+0x64>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_DCMI_Init+0x60>)
 8000be2:	f002 fdeb 	bl	80037bc <HAL_DCMI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f000 f9e0 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2400027c 	.word	0x2400027c
 8000bf8:	48020000 	.word	0x48020000

08000bfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	@ (8000c74 <MX_I2C2_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <MX_I2C2_Init+0x7c>)
 8000c0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c36:	480e      	ldr	r0, [pc, #56]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c38:	f005 f856 	bl	8005ce8 <HAL_I2C_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c42:	f000 f9b5 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c4a:	f005 ff05 	bl	8006a58 <HAL_I2CEx_ConfigAnalogFilter>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c54:	f000 f9ac 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c5c:	f005 ff47 	bl	8006aee <HAL_I2CEx_ConfigDigitalFilter>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f000 f9a3 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	24000344 	.word	0x24000344
 8000c74:	40005800 	.word	0x40005800
 8000c78:	20b0ccff 	.word	0x20b0ccff

08000c7c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c80:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000c82:	4a28      	ldr	r2, [pc, #160]	@ (8000d24 <MX_SPI4_Init+0xa8>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000c88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000c96:	2207      	movs	r2, #7
 8000c98:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000ca8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cac:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cd2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_SPI4_Init+0xa4>)
 8000d0c:	f00a fe42 	bl	800b994 <HAL_SPI_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000d16:	f000 f94b 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	24000398 	.word	0x24000398
 8000d24:	40013400 	.word	0x40013400

08000d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_DMA_Init+0x5c>)
 8000d30:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d34:	4a13      	ldr	r2, [pc, #76]	@ (8000d84 <MX_DMA_Init+0x5c>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_DMA_Init+0x5c>)
 8000d40:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	200b      	movs	r0, #11
 8000d52:	f002 fc86 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d56:	200b      	movs	r0, #11
 8000d58:	f002 fc9d 	bl	8003696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	200c      	movs	r0, #12
 8000d62:	f002 fc7e 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d66:	200c      	movs	r0, #12
 8000d68:	f002 fc95 	bl	8003696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	200d      	movs	r0, #13
 8000d72:	f002 fc76 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d76:	200d      	movs	r0, #13
 8000d78:	f002 fc8d 	bl	8003696 <HAL_NVIC_EnableIRQ>

}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	58024400 	.word	0x58024400

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	4b69      	ldr	r3, [pc, #420]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000da0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000da4:	4a67      	ldr	r2, [pc, #412]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000daa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dae:	4b65      	ldr	r3, [pc, #404]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000db0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b61      	ldr	r3, [pc, #388]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000dbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dc2:	4a60      	ldr	r2, [pc, #384]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dcc:	4b5d      	ldr	r3, [pc, #372]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000dce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b5a      	ldr	r3, [pc, #360]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000ddc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000de0:	4a58      	ldr	r2, [pc, #352]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dea:	4b56      	ldr	r3, [pc, #344]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000dec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b52      	ldr	r3, [pc, #328]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000dfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dfe:	4a51      	ldr	r2, [pc, #324]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e08:	4b4e      	ldr	r3, [pc, #312]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e16:	4b4b      	ldr	r3, [pc, #300]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e1c:	4a49      	ldr	r2, [pc, #292]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e26:	4b47      	ldr	r3, [pc, #284]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e34:	4b43      	ldr	r3, [pc, #268]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e3a:	4a42      	ldr	r2, [pc, #264]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e44:	4b3f      	ldr	r3, [pc, #252]	@ (8000f44 <MX_GPIO_Init+0x1bc>)
 8000e46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_3V3_GPIO_Port, DCMI_3V3_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e58:	483b      	ldr	r0, [pc, #236]	@ (8000f48 <MX_GPIO_Init+0x1c0>)
 8000e5a:	f004 ff2b 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e64:	4839      	ldr	r0, [pc, #228]	@ (8000f4c <MX_GPIO_Init+0x1c4>)
 8000e66:	f004 ff25 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DCMI_RST_Pin|DCMI_PWDN_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000e70:	4837      	ldr	r0, [pc, #220]	@ (8000f50 <MX_GPIO_Init+0x1c8>)
 8000e72:	f004 ff1f 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_N_Pin */
  GPIO_InitStruct.Pin = INT_N_Pin;
 8000e76:	2380      	movs	r3, #128	@ 0x80
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4832      	ldr	r0, [pc, #200]	@ (8000f54 <MX_GPIO_Init+0x1cc>)
 8000e8a:	f004 fd4b 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT__Pin */
  GPIO_InitStruct.Pin = FLT__Pin;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(FLT__GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	482a      	ldr	r0, [pc, #168]	@ (8000f4c <MX_GPIO_Init+0x1c4>)
 8000ea2:	f004 fd3f 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pins : COMMAND_DONE_Pin nIRQ_Pin */
  GPIO_InitStruct.Pin = COMMAND_DONE_Pin|nIRQ_Pin;
 8000ea6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4823      	ldr	r0, [pc, #140]	@ (8000f48 <MX_GPIO_Init+0x1c0>)
 8000ebc:	f004 fd32 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_3V3_Pin */
  GPIO_InitStruct.Pin = DCMI_3V3_Pin;
 8000ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DCMI_3V3_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481b      	ldr	r0, [pc, #108]	@ (8000f48 <MX_GPIO_Init+0x1c0>)
 8000eda:	f004 fd23 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDN_Pin */
  GPIO_InitStruct.Pin = SDN_Pin;
 8000ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SDN_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4815      	ldr	r0, [pc, #84]	@ (8000f4c <MX_GPIO_Init+0x1c4>)
 8000ef8:	f004 fd14 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_RST_Pin DCMI_PWDN_Pin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin|DCMI_PWDN_Pin;
 8000efc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <MX_GPIO_Init+0x1c8>)
 8000f16:	f004 fd05 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_MCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_MCLK_Pin;
 8000f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DCMI_MCLK_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	@ (8000f54 <MX_GPIO_Init+0x1cc>)
 8000f38:	f004 fcf4 	bl	8005924 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3730      	adds	r7, #48	@ 0x30
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58021000 	.word	0x58021000
 8000f4c:	58020400 	.word	0x58020400
 8000f50:	58020c00 	.word	0x58020c00
 8000f54:	58020000 	.word	0x58020000

08000f58 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f6a:	f002 fbaf 	bl	80036cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f7a:	231f      	movs	r3, #31
 8000f7c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f7e:	2387      	movs	r3, #135	@ 0x87
 8000f80:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f86:	2300      	movs	r3, #0
 8000f88:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fbcd 	bl	800373c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fa2:	2004      	movs	r0, #4
 8000fa4:	f002 fbaa 	bl	80036fc <HAL_MPU_Enable>

}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <Error_Handler+0x8>

08000fbc <radio_power_up>:
#include "radio.h"

void radio_power_up(HAL_StatusTypeDef *status) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fca:	4890      	ldr	r0, [pc, #576]	@ (800120c <radio_power_up+0x250>)
 8000fcc:	f004 fe72 	bl	8005cb4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fd0:	2064      	movs	r0, #100	@ 0x64
 8000fd2:	f001 fb21 	bl	8002618 <HAL_Delay>
	uint8_t data[] = {RF_POWER_UP};
 8000fd6:	4a8e      	ldr	r2, [pc, #568]	@ (8001210 <radio_power_up+0x254>)
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe0:	6018      	str	r0, [r3, #0]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	8019      	strh	r1, [r3, #0]
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	0c0a      	lsrs	r2, r1, #16
 8000fea:	701a      	strb	r2, [r3, #0]
	//uint8_t data[9] = {0x02, 0x01, 0x01, 0x01, 0xC9, 0xC3, 0x80, 0x44, 0xFF};
	uint8_t size = sizeof(data);
 8000fec:	2307      	movs	r3, #7
 8000fee:	777b      	strb	r3, [r7, #29]
	uint16_t attempt = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	83fb      	strh	r3, [r7, #30]
	//uint8_t NOP = 0x00;
	uint8_t *pData = data;
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	61bb      	str	r3, [r7, #24]
	SPI_HandleTypeDef *hspi = &hspi4;
 8000ffa:	4b86      	ldr	r3, [pc, #536]	@ (8001214 <radio_power_up+0x258>)
 8000ffc:	617b      	str	r3, [r7, #20]

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3320      	adds	r3, #32
 8001004:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

	// Optimization of HAL_SPI_Transmit

	if (hspi->State != HAL_SPI_STATE_READY) {
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d003      	beq.n	800101a <radio_power_up+0x5e>
		*status = HAL_BUSY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2202      	movs	r2, #2
 8001016:	701a      	strb	r2, [r3, #0]
		return;
 8001018:	e0f4      	b.n	8001204 <radio_power_up+0x248>
	}
	/* Lock the process */
	__HAL_LOCK(&hspi4);
 800101a:	4b7e      	ldr	r3, [pc, #504]	@ (8001214 <radio_power_up+0x258>)
 800101c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001020:	2b01      	cmp	r3, #1
 8001022:	f000 80ef 	beq.w	8001204 <radio_power_up+0x248>
 8001026:	4b7b      	ldr	r3, [pc, #492]	@ (8001214 <radio_power_up+0x258>)
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2203      	movs	r2, #3
 8001032:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2200      	movs	r2, #0
 800103a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	hspi->pTxBuffPtr = (const uint8_t*) pData;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi->TxXferSize = size; // One byte
 8001044:	7f7b      	ldrb	r3, [r7, #29]
 8001046:	b29a      	uxth	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	hspi->TxXferCount = size;
 800104e:	7f7b      	ldrb	r3, [r7, #29]
 8001050:	b29a      	uxth	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

	/*Init field not used in handle to zero */
	hspi->pRxBuffPtr = NULL;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2200      	movs	r2, #0
 800105c:	665a      	str	r2, [r3, #100]	@ 0x64
	hspi->RxXferSize = (uint16_t) 0UL;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2200      	movs	r2, #0
 8001062:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	hspi->RxXferCount = (uint16_t) 0UL;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2200      	movs	r2, #0
 800106a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
	hspi->TxISR = NULL;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2200      	movs	r2, #0
 8001072:	675a      	str	r2, [r3, #116]	@ 0x74
	hspi->RxISR = NULL;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2200      	movs	r2, #0
 8001078:	671a      	str	r2, [r3, #112]	@ 0x70

	// Communication direction
	SPI_2LINES_TX(hspi);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800108c:	60da      	str	r2, [r3, #12]

	/* Set the number of data at current transfer */
	MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, size);
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4b60      	ldr	r3, [pc, #384]	@ (8001218 <radio_power_up+0x25c>)
 8001096:	4013      	ands	r3, r2
 8001098:	7f79      	ldrb	r1, [r7, #29]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	430b      	orrs	r3, r1
 80010a0:	6053      	str	r3, [r2, #4]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010a8:	4858      	ldr	r0, [pc, #352]	@ (800120c <radio_power_up+0x250>)
 80010aa:	f004 fe03 	bl	8005cb4 <HAL_GPIO_WritePin>

	// Wait for CTS to go high
	if (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80010ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b2:	485a      	ldr	r0, [pc, #360]	@ (800121c <radio_power_up+0x260>)
 80010b4:	f004 fde6 	bl	8005c84 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d11f      	bne.n	80010fe <radio_power_up+0x142>
		// Wait until Clear To Send (CTS) signal appears
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80010be:	e016      	b.n	80010ee <radio_power_up+0x132>
			attempt++;
 80010c0:	8bfb      	ldrh	r3, [r7, #30]
 80010c2:	3301      	adds	r3, #1
 80010c4:	83fb      	strh	r3, [r7, #30]
			if (attempt > 10000) {
 80010c6:	8bfb      	ldrh	r3, [r7, #30]
 80010c8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d90e      	bls.n	80010ee <radio_power_up+0x132>
				*status = 0x3; // Timeout
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	701a      	strb	r2, [r3, #0]
				// End process
				close_SPI(hspi);
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff f9ae 	bl	8000438 <close_SPI>
				hspi->State = HAL_SPI_STATE_READY;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

				/* Unlock the process */
				__HAL_UNLOCK(hspi);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				return;
 80010ec:	e08a      	b.n	8001204 <radio_power_up+0x248>
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80010ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010f2:	484a      	ldr	r0, [pc, #296]	@ (800121c <radio_power_up+0x260>)
 80010f4:	f004 fdc6 	bl	8005c84 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0e0      	beq.n	80010c0 <radio_power_up+0x104>
			}
		}
	}
	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(hspi);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f042 0201 	orr.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800111c:	601a      	str	r2, [r3, #0]

	// Loop until the byte is sent
	// While this seems unnecessary, it covers 2 requirements - wait until SPI is ready to send and then send only one byte
	while (hspi->TxXferCount > 0UL) {
 800111e:	e058      	b.n	80011d2 <radio_power_up+0x216>
		/* Wait until TXP flag is set to send data */
		if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) {
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b02      	cmp	r3, #2
 800112c:	d151      	bne.n	80011d2 <radio_power_up+0x216>
			if ((hspi->TxXferCount > 3UL)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001134:	b29b      	uxth	r3, r3
 8001136:	2b03      	cmp	r3, #3
 8001138:	d918      	bls.n	800116c <radio_power_up+0x1b0>
					&& (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA)) {
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800113e:	2b40      	cmp	r3, #64	@ 0x40
 8001140:	d914      	bls.n	800116c <radio_power_up+0x1b0>
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
						*((const uint32_t*) hspi->pTxBuffPtr);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	681b      	ldr	r3, [r3, #0]
						*((const uint32_t*) hspi->pTxBuffPtr);
 800114a:	6812      	ldr	r2, [r2, #0]
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
 800114c:	621a      	str	r2, [r3, #32]
				hspi->pTxBuffPtr += sizeof(uint32_t);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001152:	1d1a      	adds	r2, r3, #4
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount -= (uint16_t) 4UL;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800115e:	b29b      	uxth	r3, r3
 8001160:	3b04      	subs	r3, #4
 8001162:	b29a      	uxth	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800116a:	e032      	b.n	80011d2 <radio_power_up+0x216>
			} else if ((hspi->TxXferCount > 1UL)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001172:	b29b      	uxth	r3, r3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d917      	bls.n	80011a8 <radio_power_up+0x1ec>
					&& (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA)) {
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800117c:	2b00      	cmp	r3, #0
 800117e:	d013      	beq.n	80011a8 <radio_power_up+0x1ec>
#if defined (__GNUC__)
				*ptxdr_16bits = *((const uint16_t*) hspi->pTxBuffPtr);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	801a      	strh	r2, [r3, #0]
#else
		          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
		#endif /* __GNUC__ */
				hspi->pTxBuffPtr += sizeof(uint16_t);
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800118e:	1c9a      	adds	r2, r3, #2
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount -= (uint16_t) 2UL;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800119a:	b29b      	uxth	r3, r3
 800119c:	3b02      	subs	r3, #2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80011a6:	e014      	b.n	80011d2 <radio_power_up+0x216>
			} else {
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
						*((const uint8_t*) hspi->pTxBuffPtr);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3320      	adds	r3, #32
						*((const uint8_t*) hspi->pTxBuffPtr);
 80011b2:	7812      	ldrb	r2, [r2, #0]
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
 80011b4:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr += sizeof(uint8_t);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount--;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	3b01      	subs	r3, #1
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	while (hspi->TxXferCount > 0UL) {
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1a0      	bne.n	8001120 <radio_power_up+0x164>
		 }
		 */
	}

	// Wait until transfer is completed
	while (!(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_EOT))) {
 80011de:	bf00      	nop
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d1f8      	bne.n	80011e0 <radio_power_up+0x224>
	}

	// End process
	close_SPI(hspi);
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff f922 	bl	8000438 <close_SPI>
	hspi->State = HAL_SPI_STATE_READY;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	/* Unlock the process */
	__HAL_UNLOCK(hspi);
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	//*status = HAL_SPI_Transmit(&hspi4, &NOP, 1, 10);
	//*status = HAL_SPI_Transmit(&hspi4, data, size, 50);
	//SPI_write(status, data, &size);
}
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	58020400 	.word	0x58020400
 8001210:	08011620 	.word	0x08011620
 8001214:	24000398 	.word	0x24000398
 8001218:	ffff0000 	.word	0xffff0000
 800121c:	58021000 	.word	0x58021000

08001220 <radio_pins>:

void radio_pins(HAL_StatusTypeDef* status) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GPIO_PIN_CFG};
 8001228:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <radio_pins+0x34>)
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001232:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8001236:	2308      	movs	r3, #8
 8001238:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800123a:	f107 020f 	add.w	r2, r7, #15
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4619      	mov	r1, r3
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff f9d9 	bl	80005fc <SPI_write>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	08011628 	.word	0x08011628

08001258 <radio_TCXO>:

void radio_TCXO(HAL_StatusTypeDef* status) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_XO_TUNE_2};
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <radio_TCXO+0x2c>)
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	2300      	movs	r3, #0
 8001266:	82bb      	strh	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001268:	2306      	movs	r3, #6
 800126a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800126c:	f107 020f 	add.w	r2, r7, #15
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff f9c0 	bl	80005fc <SPI_write>
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	00020011 	.word	0x00020011

08001288 <radio_global>:

void radio_global(HAL_StatusTypeDef* status) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_CONFIG_1};
 8001290:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <radio_global+0x34>)
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129a:	6018      	str	r0, [r3, #0]
 800129c:	3304      	adds	r3, #4
 800129e:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80012a0:	2305      	movs	r3, #5
 80012a2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80012a4:	f107 020f 	add.w	r2, r7, #15
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f9a4 	bl	80005fc <SPI_write>
}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	08011630 	.word	0x08011630

080012c0 <radio_interrupts>:

void radio_interrupts(HAL_StatusTypeDef* status) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_INT_CTL_ENABLE_4};
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <radio_interrupts+0x34>)
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 80012d6:	2308      	movs	r3, #8
 80012d8:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80012da:	f107 020f 	add.w	r2, r7, #15
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4619      	mov	r1, r3
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff f989 	bl	80005fc <SPI_write>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	08011638 	.word	0x08011638

080012f8 <radio_fast_registers>:

void radio_fast_registers(HAL_StatusTypeDef* status) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FRR_CTL_A_MODE_4};
 8001300:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <radio_fast_registers+0x34>)
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 800130e:	2308      	movs	r3, #8
 8001310:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001312:	f107 020f 	add.w	r2, r7, #15
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff f96d 	bl	80005fc <SPI_write>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	08011640 	.word	0x08011640

08001330 <radio_Tx>:

void radio_Tx(HAL_StatusTypeDef* status) {
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PREAMBLE_TX_LENGTH_9};
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <radio_Tx+0x30>)
 800133a:	f107 0410 	add.w	r4, r7, #16
 800133e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001340:	c407      	stmia	r4!, {r0, r1, r2}
 8001342:	7023      	strb	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001344:	230d      	movs	r3, #13
 8001346:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001348:	f107 020f 	add.w	r2, r7, #15
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff f952 	bl	80005fc <SPI_write>
}
 8001358:	bf00      	nop
 800135a:	3724      	adds	r7, #36	@ 0x24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	08011648 	.word	0x08011648

08001364 <radio_sync>:

void radio_sync(HAL_StatusTypeDef* status) {
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNC_CONFIG_10};
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <radio_sync+0x30>)
 800136e:	f107 0410 	add.w	r4, r7, #16
 8001372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001374:	c407      	stmia	r4!, {r0, r1, r2}
 8001376:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001378:	230e      	movs	r3, #14
 800137a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800137c:	f107 020f 	add.w	r2, r7, #15
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4619      	mov	r1, r3
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff f938 	bl	80005fc <SPI_write>
}
 800138c:	bf00      	nop
 800138e:	3724      	adds	r7, #36	@ 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	08011658 	.word	0x08011658

08001398 <radio_packet_CRC>:

void radio_packet_CRC(HAL_StatusTypeDef* status) {
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_CONFIG_12};
 80013a0:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <radio_packet_CRC+0x30>)
 80013a2:	f107 0410 	add.w	r4, r7, #16
 80013a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80013ac:	2310      	movs	r3, #16
 80013ae:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80013b0:	f107 020f 	add.w	r2, r7, #15
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f91e 	bl	80005fc <SPI_write>
}
 80013c0:	bf00      	nop
 80013c2:	3724      	adds	r7, #36	@ 0x24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	08011668 	.word	0x08011668

080013cc <radio_Rx_thr>:

void radio_Rx_thr(HAL_StatusTypeDef* status) {
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b089      	sub	sp, #36	@ 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_THRESHOLD_12};
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <radio_Rx_thr+0x30>)
 80013d6:	f107 0410 	add.w	r4, r7, #16
 80013da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80013e0:	2310      	movs	r3, #16
 80013e2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80013e4:	f107 020f 	add.w	r2, r7, #15
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff f904 	bl	80005fc <SPI_write>
}
 80013f4:	bf00      	nop
 80013f6:	3724      	adds	r7, #36	@ 0x24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}
 80013fc:	08011678 	.word	0x08011678

08001400 <radio_Rx_CRC_1>:

void radio_Rx_CRC_1(HAL_StatusTypeDef* status) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_FIELD_3_CRC_CONFIG_12};
 8001408:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <radio_Rx_CRC_1+0x34>)
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 8001418:	2310      	movs	r3, #16
 800141a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800141c:	f107 020f 	add.w	r2, r7, #15
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff f8e8 	bl	80005fc <SPI_write>
}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	180c1211 	.word	0x180c1211

08001438 <radio_Rx_CRC_2>:

void radio_Rx_CRC_2(HAL_StatusTypeDef* status) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_1_CRC_CONFIG_12};
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <radio_Rx_CRC_2+0x34>)
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 8001450:	2310      	movs	r3, #16
 8001452:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001454:	f107 020f 	add.w	r2, r7, #15
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff f8cc 	bl	80005fc <SPI_write>
}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	240c1211 	.word	0x240c1211

08001470 <radio_Rx_CRC_3>:

void radio_Rx_CRC_3(HAL_StatusTypeDef* status) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_4_CRC_CONFIG_5};
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <radio_Rx_CRC_3+0x34>)
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	711a      	strb	r2, [r3, #4]
	uint8_t size = sizeof(data);
 8001486:	2309      	movs	r3, #9
 8001488:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 800148a:	f107 020b 	add.w	r2, r7, #11
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff f8b1 	bl	80005fc <SPI_write>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	30051211 	.word	0x30051211

080014a8 <radio_Rx_CRC_seed>:

void radio_Rx_CRC_seed(HAL_StatusTypeDef* status) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_SEED_31_24_4};
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <radio_Rx_CRC_seed+0x2c>)
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
	uint8_t size = sizeof(data);
 80014b8:	2308      	movs	r3, #8
 80014ba:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80014bc:	f107 020f 	add.w	r2, r7, #15
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff f898 	bl	80005fc <SPI_write>
}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	36041211 	.word	0x36041211

080014d8 <radio_mod>:

void radio_mod(HAL_StatusTypeDef* status) {
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_MOD_TYPE_12};
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <radio_mod+0x30>)
 80014e2:	f107 0410 	add.w	r4, r7, #16
 80014e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80014ec:	2310      	movs	r3, #16
 80014ee:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80014f0:	f107 020f 	add.w	r2, r7, #15
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff f87e 	bl	80005fc <SPI_write>
}
 8001500:	bf00      	nop
 8001502:	3724      	adds	r7, #36	@ 0x24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	08011688 	.word	0x08011688

0800150c <radio_freq_dev>:

void radio_freq_dev(HAL_StatusTypeDef* status) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_FREQ_DEV_0_1};
 8001514:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <radio_freq_dev+0x34>)
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800151e:	6018      	str	r0, [r3, #0]
 8001520:	3304      	adds	r3, #4
 8001522:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001524:	2305      	movs	r3, #5
 8001526:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001528:	f107 020f 	add.w	r2, r7, #15
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff f862 	bl	80005fc <SPI_write>
}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	08011698 	.word	0x08011698

08001544 <radio_Tx_ramp>:

void radio_Tx_ramp(HAL_StatusTypeDef* status) {
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_TX_RAMP_DELAY_12};
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <radio_Tx_ramp+0x30>)
 800154e:	f107 0410 	add.w	r4, r7, #16
 8001552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001558:	2310      	movs	r3, #16
 800155a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800155c:	f107 020f 	add.w	r2, r7, #15
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	4619      	mov	r1, r3
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff f848 	bl	80005fc <SPI_write>
}
 800156c:	bf00      	nop
 800156e:	3724      	adds	r7, #36	@ 0x24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	080116a0 	.word	0x080116a0

08001578 <radio_NCO_offset>:

void radio_NCO_offset(HAL_StatusTypeDef* status) {
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_BCR_NCO_OFFSET_2_12};
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <radio_NCO_offset+0x30>)
 8001582:	f107 0410 	add.w	r4, r7, #16
 8001586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 800158c:	2310      	movs	r3, #16
 800158e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001590:	f107 020f 	add.w	r2, r7, #15
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff f82e 	bl	80005fc <SPI_write>
}
 80015a0:	bf00      	nop
 80015a2:	3724      	adds	r7, #36	@ 0x24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd90      	pop	{r4, r7, pc}
 80015a8:	080116b0 	.word	0x080116b0

080015ac <radio_AFC>:

void radio_AFC(HAL_StatusTypeDef* status) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AFC_LIMITER_1_3};
 80015b4:	4a0c      	ldr	r2, [pc, #48]	@ (80015e8 <radio_AFC+0x3c>)
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015be:	6018      	str	r0, [r3, #0]
 80015c0:	3304      	adds	r3, #4
 80015c2:	8019      	strh	r1, [r3, #0]
 80015c4:	3302      	adds	r3, #2
 80015c6:	0c0a      	lsrs	r2, r1, #16
 80015c8:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 80015ca:	2307      	movs	r3, #7
 80015cc:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80015ce:	f107 020f 	add.w	r2, r7, #15
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff f80f 	bl	80005fc <SPI_write>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	080116c0 	.word	0x080116c0

080015ec <radio_AGC_1>:

void radio_AGC_1(HAL_StatusTypeDef* status) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_CONTROL_1};
 80015f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <radio_AGC_1+0x34>)
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015fe:	6018      	str	r0, [r3, #0]
 8001600:	3304      	adds	r3, #4
 8001602:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001604:	2305      	movs	r3, #5
 8001606:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001608:	f107 020f 	add.w	r2, r7, #15
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7fe fff2 	bl	80005fc <SPI_write>
}
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	080116c8 	.word	0x080116c8

08001624 <radio_AGC_2>:

void radio_AGC_2(HAL_StatusTypeDef* status) {
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_WINDOW_SIZE_12};
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <radio_AGC_2+0x30>)
 800162e:	f107 0410 	add.w	r4, r7, #16
 8001632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001638:	2310      	movs	r3, #16
 800163a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800163c:	f107 020f 	add.w	r2, r7, #15
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7fe ffd8 	bl	80005fc <SPI_write>
}
 800164c:	bf00      	nop
 800164e:	3724      	adds	r7, #36	@ 0x24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	080116d0 	.word	0x080116d0

08001658 <radio_RAW>:

void radio_RAW(HAL_StatusTypeDef* status) {
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_CONTROL_10};
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <radio_RAW+0x30>)
 8001662:	f107 0410 	add.w	r4, r7, #16
 8001666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001668:	c407      	stmia	r4!, {r0, r1, r2}
 800166a:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 800166c:	230e      	movs	r3, #14
 800166e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001670:	f107 020f 	add.w	r2, r7, #15
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe ffbe 	bl	80005fc <SPI_write>
}
 8001680:	bf00      	nop
 8001682:	3724      	adds	r7, #36	@ 0x24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	080116e0 	.word	0x080116e0

0800168c <radio_search_period>:

void radio_search_period(HAL_StatusTypeDef* status) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_SEARCH2_2};
 8001694:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <radio_search_period+0x34>)
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800169e:	6018      	str	r0, [r3, #0]
 80016a0:	3304      	adds	r3, #4
 80016a2:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80016a4:	2306      	movs	r3, #6
 80016a6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80016a8:	f107 020f 	add.w	r2, r7, #15
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7fe ffa2 	bl	80005fc <SPI_write>
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	080116f0 	.word	0x080116f0

080016c4 <radio_GFSK_thr>:

void radio_GFSK_thr(HAL_StatusTypeDef* status) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_SPIKE_DET_2};
 80016cc:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <radio_GFSK_thr+0x34>)
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d6:	6018      	str	r0, [r3, #0]
 80016d8:	3304      	adds	r3, #4
 80016da:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80016dc:	2306      	movs	r3, #6
 80016de:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80016e0:	f107 020f 	add.w	r2, r7, #15
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	4619      	mov	r1, r3
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7fe ff86 	bl	80005fc <SPI_write>
}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	080116f8 	.word	0x080116f8

080016fc <radio_RSSI_thr>:

void radio_RSSI_thr(HAL_StatusTypeDef* status) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RSSI_MUTE_1};
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <radio_RSSI_thr+0x2c>)
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	2300      	movs	r3, #0
 800170a:	753b      	strb	r3, [r7, #20]
	uint8_t size = sizeof(data);
 800170c:	2305      	movs	r3, #5
 800170e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001710:	f107 020f 	add.w	r2, r7, #15
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7fe ff6e 	bl	80005fc <SPI_write>
}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	57012011 	.word	0x57012011

0800172c <radio_RSSI_att>:

void radio_RSSI_att(HAL_StatusTypeDef* status) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_DSA_CTRL1_5};
 8001734:	4a09      	ldr	r2, [pc, #36]	@ (800175c <radio_RSSI_att+0x30>)
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	ca07      	ldmia	r2, {r0, r1, r2}
 800173c:	c303      	stmia	r3!, {r0, r1}
 800173e:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001740:	2309      	movs	r3, #9
 8001742:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001744:	f107 020b 	add.w	r2, r7, #11
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	4619      	mov	r1, r3
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe ff54 	bl	80005fc <SPI_write>
}
 8001754:	bf00      	nop
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	08011700 	.word	0x08011700

08001760 <radio_Rx_filter_1>:

void radio_Rx_filter_1(HAL_StatusTypeDef* status) {
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b089      	sub	sp, #36	@ 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12};
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <radio_Rx_filter_1+0x30>)
 800176a:	f107 0410 	add.w	r4, r7, #16
 800176e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001774:	2310      	movs	r3, #16
 8001776:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001778:	f107 020f 	add.w	r2, r7, #15
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe ff3a 	bl	80005fc <SPI_write>
}
 8001788:	bf00      	nop
 800178a:	3724      	adds	r7, #36	@ 0x24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}
 8001790:	0801170c 	.word	0x0801170c

08001794 <radio_Rx_filter_2>:

void radio_Rx_filter_2(HAL_StatusTypeDef* status) {
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12};
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <radio_Rx_filter_2+0x30>)
 800179e:	f107 0410 	add.w	r4, r7, #16
 80017a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80017a8:	2310      	movs	r3, #16
 80017aa:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80017ac:	f107 020f 	add.w	r2, r7, #15
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4619      	mov	r1, r3
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7fe ff20 	bl	80005fc <SPI_write>
}
 80017bc:	bf00      	nop
 80017be:	3724      	adds	r7, #36	@ 0x24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	0801171c 	.word	0x0801171c

080017c8 <radio_Rx_filter_3>:

void radio_Rx_filter_3(HAL_StatusTypeDef* status) {
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12};
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <radio_Rx_filter_3+0x30>)
 80017d2:	f107 0410 	add.w	r4, r7, #16
 80017d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80017dc:	2310      	movs	r3, #16
 80017de:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80017e0:	f107 020f 	add.w	r2, r7, #15
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7fe ff06 	bl	80005fc <SPI_write>
}
 80017f0:	bf00      	nop
 80017f2:	3724      	adds	r7, #36	@ 0x24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	0801172c 	.word	0x0801172c

080017fc <radio_PA_1>:

void radio_PA_1(HAL_StatusTypeDef* status) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PA_MODE_4};
 8001804:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <radio_PA_1+0x34>)
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800180e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8001812:	2308      	movs	r3, #8
 8001814:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001816:	f107 020f 	add.w	r2, r7, #15
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7fe feeb 	bl	80005fc <SPI_write>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	0801173c 	.word	0x0801173c

08001834 <radio_PA_2>:

void radio_PA_2(HAL_StatusTypeDef* status) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNTH_PFDCP_CPFF_7};
 800183c:	4a0b      	ldr	r2, [pc, #44]	@ (800186c <radio_PA_2+0x38>)
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	ca07      	ldmia	r2, {r0, r1, r2}
 8001844:	c303      	stmia	r3!, {r0, r1}
 8001846:	801a      	strh	r2, [r3, #0]
 8001848:	3302      	adds	r3, #2
 800184a:	0c12      	lsrs	r2, r2, #16
 800184c:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 800184e:	230b      	movs	r3, #11
 8001850:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001852:	f107 020b 	add.w	r2, r7, #11
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7fe fecd 	bl	80005fc <SPI_write>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	08011744 	.word	0x08011744

08001870 <radio_masks>:

void radio_masks(HAL_StatusTypeDef* status) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MATCH_VALUE_1_12};
 8001878:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <radio_masks+0x34>)
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 8001888:	2310      	movs	r3, #16
 800188a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800188c:	f107 020f 	add.w	r2, r7, #15
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7fe feb0 	bl	80005fc <SPI_write>
}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	000c3011 	.word	0x000c3011

080018a8 <radio_PLL>:

void radio_PLL(HAL_StatusTypeDef* status) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FREQ_CONTROL_INTE_8};
 80018b0:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <radio_PLL+0x30>)
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80018b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t size = sizeof(data);
 80018bc:	230c      	movs	r3, #12
 80018be:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 80018c0:	f107 020b 	add.w	r2, r7, #11
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	4619      	mov	r1, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7fe fe96 	bl	80005fc <SPI_write>
}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	08011750 	.word	0x08011750

080018dc <radio_mode_Rx>:

// Modes
void radio_mode_Rx(HAL_StatusTypeDef* status) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	// Enable Rx and then enter ready mode
	uint8_t data = {0x32, 0, 0, 0, 60, 0, 0, 8, 8};
 80018e4:	2332      	movs	r3, #50	@ 0x32
 80018e6:	73fb      	strb	r3, [r7, #15]
	uint8_t size = sizeof(data);
 80018e8:	2301      	movs	r3, #1
 80018ea:	73bb      	strb	r3, [r7, #14]
	SPI_write(status, data, &size);
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	4619      	mov	r1, r3
 80018f0:	f107 030e 	add.w	r3, r7, #14
 80018f4:	461a      	mov	r2, r3
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7fe fe80 	bl	80005fc <SPI_write>
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <setup>:
#include <routines.h>

void setup(HAL_StatusTypeDef* status, fault_flag* error_index) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]

	/// Issue POWER_UP command - wake transceiver up
		radio_power_up(status);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fb54 	bl	8000fbc <radio_power_up>
		if (*status != 0) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <setup+0x20>
			*error_index = RADIO_PWUP;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2204      	movs	r2, #4
 8001920:	701a      	strb	r2, [r3, #0]
			return;
 8001922:	e088      	b.n	8001a36 <setup+0x132>
		}

	// USB-C
	PowerInit(status);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7fe ff0b 	bl	8000740 <PowerInit>

	/// Check for errors, if non are found -> increase supply current
	if (*status == 0) {
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d107      	bne.n	8001942 <setup+0x3e>
		PowerIncreaseCurrent(status);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7fe ff6d 	bl	8000812 <PowerIncreaseCurrent>
		*error_index = POWER_INIT;
		return;
	}

	/// Check for error
	if (*status != 0) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <setup+0x4e>
 8001940:	e003      	b.n	800194a <setup+0x46>
		*error_index = POWER_INIT;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
		return;
 8001948:	e075      	b.n	8001a36 <setup+0x132>
		*error_index = POWER_INC;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
		return;
 8001950:	e071      	b.n	8001a36 <setup+0x132>

	*/


	/// Issue radio setup
	radio_pins(status);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fc64 	bl	8001220 <radio_pins>
	radio_TCXO(status);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fc7d 	bl	8001258 <radio_TCXO>
	radio_global(status);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fc92 	bl	8001288 <radio_global>
	radio_interrupts(status);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fcab 	bl	80012c0 <radio_interrupts>
	radio_fast_registers(status);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fcc4 	bl	80012f8 <radio_fast_registers>
	radio_Tx(status);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fcdd 	bl	8001330 <radio_Tx>
	radio_sync(status);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fcf4 	bl	8001364 <radio_sync>
	radio_packet_CRC(status);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fd0b 	bl	8001398 <radio_packet_CRC>
	radio_Rx_thr(status);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fd22 	bl	80013cc <radio_Rx_thr>
	radio_Rx_CRC_1(status);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fd39 	bl	8001400 <radio_Rx_CRC_1>
	radio_Rx_CRC_2(status);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fd52 	bl	8001438 <radio_Rx_CRC_2>
	radio_Rx_CRC_3(status);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff fd6b 	bl	8001470 <radio_Rx_CRC_3>
	radio_Rx_CRC_seed(status);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fd84 	bl	80014a8 <radio_Rx_CRC_seed>
	radio_mod(status);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff fd99 	bl	80014d8 <radio_mod>
	radio_freq_dev(status);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fdb0 	bl	800150c <radio_freq_dev>
	radio_Tx_ramp(status);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fdc9 	bl	8001544 <radio_Tx_ramp>
	radio_NCO_offset(status);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fde0 	bl	8001578 <radio_NCO_offset>
	radio_AFC(status);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fdf7 	bl	80015ac <radio_AFC>
	radio_AGC_1(status);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff fe14 	bl	80015ec <radio_AGC_1>
	radio_AGC_2(status);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fe2d 	bl	8001624 <radio_AGC_2>
	radio_RAW(status);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fe44 	bl	8001658 <radio_RAW>
	radio_search_period(status);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fe5b 	bl	800168c <radio_search_period>
	radio_GFSK_thr(status);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fe74 	bl	80016c4 <radio_GFSK_thr>
	radio_RSSI_thr(status);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fe8d 	bl	80016fc <radio_RSSI_thr>
	radio_RSSI_att(status);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fea2 	bl	800172c <radio_RSSI_att>
	radio_Rx_filter_1(status);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff feb9 	bl	8001760 <radio_Rx_filter_1>
	radio_Rx_filter_2(status);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fed0 	bl	8001794 <radio_Rx_filter_2>
	radio_Rx_filter_3(status);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fee7 	bl	80017c8 <radio_Rx_filter_3>
	radio_PA_1(status);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fefe 	bl	80017fc <radio_PA_1>
	radio_PA_2(status);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff17 	bl	8001834 <radio_PA_2>
	radio_masks(status);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ff32 	bl	8001870 <radio_masks>
	radio_PLL(status);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff4b 	bl	80018a8 <radio_PLL>

	// Check for errors
	if (*status != 0) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <setup+0x11e>
		*error_index = RADIO_SETUP;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2205      	movs	r2, #5
 8001a1e:	701a      	strb	r2, [r3, #0]
		return;
 8001a20:	e009      	b.n	8001a36 <setup+0x132>
	}

	// Init. radio into receive mode
	radio_mode_Rx(status);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff5a 	bl	80018dc <radio_mode_Rx>
	if (*status != 0) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <setup+0x132>
		*error_index = RADIO_SET_RX;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2206      	movs	r2, #6
 8001a34:	701a      	strb	r2, [r3, #0]
	}

}
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <get_radio_hw_info>:

char** get_radio_hw_info(HAL_StatusTypeDef* status, fault_flag* error_index) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
	 * [0] = part number
	 * [1] = chip revision
	 * [2] = ROM ID
	*/

	uint8_t array[8] = {0};
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
	uint8_t tsize = 1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	76fb      	strb	r3, [r7, #27]
	uint8_t rsize = 8;
 8001a54:	2308      	movs	r3, #8
 8001a56:	76bb      	strb	r3, [r7, #26]
	char info[3][4];

	uint16_t num = 0xFFFF;
 8001a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	//unsigned char* temp;
	//temp = malloc(4);
	array[0] = 0x01;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	773b      	strb	r3, [r7, #28]
	SPI_read(status, array, &tsize, &rsize);
 8001a62:	f107 031a 	add.w	r3, r7, #26
 8001a66:	f107 021b 	add.w	r2, r7, #27
 8001a6a:	f107 011c 	add.w	r1, r7, #28
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7fe fde8 	bl	8000644 <SPI_read>
	if (*status != 0) {
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <get_radio_hw_info+0x46>
		*error_index = RADIO_HW_INFO;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2207      	movs	r2, #7
 8001a80:	701a      	strb	r2, [r3, #0]
	}

	num &= ((array[1] << 8) | array[2]);
 8001a82:	7f7b      	ldrb	r3, [r7, #29]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	7fbb      	ldrb	r3, [r7, #30]
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001a96:	4013      	ands	r3, r2
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	sprintf(info[0], "%04X", num);
 8001a9c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4914      	ldr	r1, [pc, #80]	@ (8001af4 <get_radio_hw_info+0xb8>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00f f90f 	bl	8010cc8 <siprintf>
	num = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	84fb      	strh	r3, [r7, #38]	@ 0x26
	num += array[0];
 8001aae:	7f3b      	ldrb	r3, [r7, #28]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ab4:	4413      	add	r3, r2
 8001ab6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	sprintf(info[1], "%04X", num);
 8001ab8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	3304      	adds	r3, #4
 8001ac0:	490c      	ldr	r1, [pc, #48]	@ (8001af4 <get_radio_hw_info+0xb8>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f00f f900 	bl	8010cc8 <siprintf>

	num = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	84fb      	strh	r3, [r7, #38]	@ 0x26
	num += array[7];
 8001acc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ad4:	4413      	add	r3, r2
 8001ad6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	sprintf(info[2], "%04X", num);
 8001ad8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	3308      	adds	r3, #8
 8001ae0:	4904      	ldr	r1, [pc, #16]	@ (8001af4 <get_radio_hw_info+0xb8>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f00f f8f0 	bl	8010cc8 <siprintf>
	strcpy(&info[1], (unsigned char*) &array[0]);

	strcpy(&info[2], (unsigned char*) &array[7]);
	*/
	//free(temp);
	return info;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	0801175c 	.word	0x0801175c

08001af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_MspInit+0x30>)
 8001b00:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b04:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <HAL_MspInit+0x30>)
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_MspInit+0x30>)
 8001b10:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	58024400 	.word	0x58024400

08001b2c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0be      	sub	sp, #248	@ 0xf8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	22c0      	movs	r2, #192	@ 0xc0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f00f f8dd 	bl	8010d0c <memset>
  if(hadc->Instance==ADC1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a6f      	ldr	r2, [pc, #444]	@ (8001d14 <HAL_ADC_MspInit+0x1e8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	f040 8087 	bne.w	8001c6c <HAL_ADC_MspInit+0x140>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b5e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001b6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	4618      	mov	r0, r3
 8001b78:	f007 fb02 	bl	8009180 <HAL_RCCEx_PeriphCLKConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8001b82:	f7ff fa15 	bl	8000fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b86:	4b64      	ldr	r3, [pc, #400]	@ (8001d18 <HAL_ADC_MspInit+0x1ec>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4a62      	ldr	r2, [pc, #392]	@ (8001d18 <HAL_ADC_MspInit+0x1ec>)
 8001b8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b90:	4b61      	ldr	r3, [pc, #388]	@ (8001d18 <HAL_ADC_MspInit+0x1ec>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d10e      	bne.n	8001bb6 <HAL_ADC_MspInit+0x8a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b98:	4b60      	ldr	r3, [pc, #384]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001b9a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001b9e:	4a5f      	ldr	r2, [pc, #380]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001ba0:	f043 0320 	orr.w	r3, r3, #32
 8001ba4:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001baa:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b59      	ldr	r3, [pc, #356]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001bb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bbc:	4a57      	ldr	r2, [pc, #348]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001bc6:	4b55      	ldr	r3, [pc, #340]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001bc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd4:	4b51      	ldr	r3, [pc, #324]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001bd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bda:	4a50      	ldr	r2, [pc, #320]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001be4:	4b4d      	ldr	r3, [pc, #308]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001be6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001bf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bf8:	4a48      	ldr	r2, [pc, #288]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c02:	4b46      	ldr	r3, [pc, #280]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001c04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INN16
    PC4     ------> ADC1_INP4
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = NTC_2__Pin|NTC_2_A1_Pin;
 8001c10:	2303      	movs	r3, #3
 8001c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c16:	2303      	movs	r3, #3
 8001c18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c26:	4619      	mov	r1, r3
 8001c28:	483d      	ldr	r0, [pc, #244]	@ (8001d20 <HAL_ADC_MspInit+0x1f4>)
 8001c2a:	f003 fe7b 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CC1_Pin;
 8001c2e:	2310      	movs	r3, #16
 8001c30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c34:	2303      	movs	r3, #3
 8001c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC1_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4837      	ldr	r0, [pc, #220]	@ (8001d24 <HAL_ADC_MspInit+0x1f8>)
 8001c48:	f003 fe6c 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VBUS_Pin;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c52:	2303      	movs	r3, #3
 8001c54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ADC_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c62:	4619      	mov	r1, r3
 8001c64:	4830      	ldr	r0, [pc, #192]	@ (8001d28 <HAL_ADC_MspInit+0x1fc>)
 8001c66:	f003 fe5d 	bl	8005924 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c6a:	e04e      	b.n	8001d0a <HAL_ADC_MspInit+0x1de>
  else if(hadc->Instance==ADC2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2e      	ldr	r2, [pc, #184]	@ (8001d2c <HAL_ADC_MspInit+0x200>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d149      	bne.n	8001d0a <HAL_ADC_MspInit+0x1de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001c82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8a:	f107 0320 	add.w	r3, r7, #32
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f007 fa76 	bl	8009180 <HAL_RCCEx_PeriphCLKConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_ADC_MspInit+0x172>
      Error_Handler();
 8001c9a:	f7ff f989 	bl	8000fb0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <HAL_ADC_MspInit+0x1ec>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d18 <HAL_ADC_MspInit+0x1ec>)
 8001ca6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_ADC_MspInit+0x1ec>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10e      	bne.n	8001cce <HAL_ADC_MspInit+0x1a2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001cb2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001cb6:	4a19      	ldr	r2, [pc, #100]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001cb8:	f043 0320 	orr.w	r3, r3, #32
 8001cbc:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001cc0:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001cc2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001cd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001cd4:	4a11      	ldr	r2, [pc, #68]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001cde:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <HAL_ADC_MspInit+0x1f0>)
 8001ce0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CC2_Pin;
 8001cec:	2320      	movs	r3, #32
 8001cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC2_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4807      	ldr	r0, [pc, #28]	@ (8001d24 <HAL_ADC_MspInit+0x1f8>)
 8001d06:	f003 fe0d 	bl	8005924 <HAL_GPIO_Init>
}
 8001d0a:	bf00      	nop
 8001d0c:	37f8      	adds	r7, #248	@ 0xf8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40022000 	.word	0x40022000
 8001d18:	24000514 	.word	0x24000514
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	58020000 	.word	0x58020000
 8001d24:	58020800 	.word	0x58020800
 8001d28:	58020400 	.word	0x58020400
 8001d2c:	40022100 	.word	0x40022100

08001d30 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	@ 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ef8 <HAL_DCMI_MspInit+0x1c8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	f040 80ce 	bne.w	8001ef0 <HAL_DCMI_MspInit+0x1c0>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001d54:	4b69      	ldr	r3, [pc, #420]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001d56:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8001d5a:	4a68      	ldr	r2, [pc, #416]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
 8001d64:	4b65      	ldr	r3, [pc, #404]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001d66:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b62      	ldr	r3, [pc, #392]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d78:	4a60      	ldr	r2, [pc, #384]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001d82:	4b5e      	ldr	r3, [pc, #376]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001d84:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d90:	4b5a      	ldr	r3, [pc, #360]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001d92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d96:	4a59      	ldr	r2, [pc, #356]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001da0:	4b56      	ldr	r3, [pc, #344]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001da2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dae:	4b53      	ldr	r3, [pc, #332]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001db0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001db4:	4a51      	ldr	r2, [pc, #324]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001dc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	4b4b      	ldr	r3, [pc, #300]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001dce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001ddc:	4b47      	ldr	r3, [pc, #284]	@ (8001efc <HAL_DCMI_MspInit+0x1cc>)
 8001dde:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001dea:	2350      	movs	r3, #80	@ 0x50
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dfa:	230d      	movs	r3, #13
 8001dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	4619      	mov	r1, r3
 8001e04:	483e      	ldr	r0, [pc, #248]	@ (8001f00 <HAL_DCMI_MspInit+0x1d0>)
 8001e06:	f003 fd8d 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001e0a:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8001e0e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e1c:	230d      	movs	r3, #13
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	4837      	ldr	r0, [pc, #220]	@ (8001f04 <HAL_DCMI_MspInit+0x1d4>)
 8001e28:	f003 fd7c 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e3c:	230d      	movs	r3, #13
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4830      	ldr	r0, [pc, #192]	@ (8001f08 <HAL_DCMI_MspInit+0x1d8>)
 8001e48:	f003 fd6c 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e4c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e5e:	230d      	movs	r3, #13
 8001e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	4828      	ldr	r0, [pc, #160]	@ (8001f0c <HAL_DCMI_MspInit+0x1dc>)
 8001e6a:	f003 fd5b 	bl	8005924 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001e6e:	4b28      	ldr	r3, [pc, #160]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001e70:	4a28      	ldr	r2, [pc, #160]	@ (8001f14 <HAL_DCMI_MspInit+0x1e4>)
 8001e72:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8001e74:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001e76:	224b      	movs	r2, #75	@ 0x4b
 8001e78:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e7a:	4b25      	ldr	r3, [pc, #148]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e80:	4b23      	ldr	r3, [pc, #140]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001e86:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001e88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e8c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001e90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e94:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001e98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e9c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ea4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001eae:	2204      	movs	r2, #4
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ebe:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001ec4:	4812      	ldr	r0, [pc, #72]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001ec6:	f001 fdbb 	bl	8003a40 <HAL_DMA_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_DCMI_MspInit+0x1a4>
    {
      Error_Handler();
 8001ed0:	f7ff f86e 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001ed8:	649a      	str	r2, [r3, #72]	@ 0x48
 8001eda:	4a0d      	ldr	r2, [pc, #52]	@ (8001f10 <HAL_DCMI_MspInit+0x1e0>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	204e      	movs	r0, #78	@ 0x4e
 8001ee6:	f001 fbbc 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8001eea:	204e      	movs	r0, #78	@ 0x4e
 8001eec:	f001 fbd3 	bl	8003696 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3730      	adds	r7, #48	@ 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	48020000 	.word	0x48020000
 8001efc:	58024400 	.word	0x58024400
 8001f00:	58020000 	.word	0x58020000
 8001f04:	58020800 	.word	0x58020800
 8001f08:	58020c00 	.word	0x58020c00
 8001f0c:	58020400 	.word	0x58020400
 8001f10:	240002cc 	.word	0x240002cc
 8001f14:	40020010 	.word	0x40020010

08001f18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0ba      	sub	sp, #232	@ 0xe8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	22c0      	movs	r2, #192	@ 0xc0
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00e fee7 	bl	8010d0c <memset>
  if(hi2c->Instance==I2C2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a27      	ldr	r2, [pc, #156]	@ (8001fe0 <HAL_I2C_MspInit+0xc8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d146      	bne.n	8001fd6 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f48:	f04f 0208 	mov.w	r2, #8
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f007 f90e 	bl	8009180 <HAL_RCCEx_PeriphCLKConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001f6a:	f7ff f821 	bl	8000fb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <HAL_I2C_MspInit+0xcc>)
 8001f70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f74:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe4 <HAL_I2C_MspInit+0xcc>)
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_I2C_MspInit+0xcc>)
 8001f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f8c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f94:	2312      	movs	r3, #18
 8001f96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	480d      	ldr	r0, [pc, #52]	@ (8001fe8 <HAL_I2C_MspInit+0xd0>)
 8001fb4:	f003 fcb6 	bl	8005924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_I2C_MspInit+0xcc>)
 8001fba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001fbe:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <HAL_I2C_MspInit+0xcc>)
 8001fc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fc4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_I2C_MspInit+0xcc>)
 8001fca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001fd6:	bf00      	nop
 8001fd8:	37e8      	adds	r7, #232	@ 0xe8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40005800 	.word	0x40005800
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	58020400 	.word	0x58020400

08001fec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b0ba      	sub	sp, #232	@ 0xe8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	22c0      	movs	r2, #192	@ 0xc0
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f00e fe7d 	bl	8010d0c <memset>
  if(hspi->Instance==SPI4)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6b      	ldr	r2, [pc, #428]	@ (80021c4 <HAL_SPI_MspInit+0x1d8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	f040 80cf 	bne.w	80021bc <HAL_SPI_MspInit+0x1d0>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800201e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 800202e:	2310      	movs	r3, #16
 8002030:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002032:	2302      	movs	r3, #2
 8002034:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 32;
 8002036:	2320      	movs	r3, #32
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800203a:	2302      	movs	r3, #2
 800203c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800203e:	23c0      	movs	r3, #192	@ 0xc0
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002042:	2300      	movs	r3, #0
 8002044:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800204a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800204e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	4618      	mov	r0, r3
 8002056:	f007 f893 	bl	8009180 <HAL_RCCEx_PeriphCLKConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8002060:	f7fe ffa6 	bl	8000fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002064:	4b58      	ldr	r3, [pc, #352]	@ (80021c8 <HAL_SPI_MspInit+0x1dc>)
 8002066:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800206a:	4a57      	ldr	r2, [pc, #348]	@ (80021c8 <HAL_SPI_MspInit+0x1dc>)
 800206c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002070:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002074:	4b54      	ldr	r3, [pc, #336]	@ (80021c8 <HAL_SPI_MspInit+0x1dc>)
 8002076:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800207a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002082:	4b51      	ldr	r3, [pc, #324]	@ (80021c8 <HAL_SPI_MspInit+0x1dc>)
 8002084:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002088:	4a4f      	ldr	r2, [pc, #316]	@ (80021c8 <HAL_SPI_MspInit+0x1dc>)
 800208a:	f043 0310 	orr.w	r3, r3, #16
 800208e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002092:	4b4d      	ldr	r3, [pc, #308]	@ (80021c8 <HAL_SPI_MspInit+0x1dc>)
 8002094:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_nSEL_Pin;
 80020a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020ba:	2305      	movs	r3, #5
 80020bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(SPI4_nSEL_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4841      	ldr	r0, [pc, #260]	@ (80021cc <HAL_SPI_MspInit+0x1e0>)
 80020c8:	f003 fc2c 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80020cc:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80020d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020e6:	2305      	movs	r3, #5
 80020e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4836      	ldr	r0, [pc, #216]	@ (80021cc <HAL_SPI_MspInit+0x1e0>)
 80020f4:	f003 fc16 	bl	8005924 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream1;
 80020f8:	4b35      	ldr	r3, [pc, #212]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 80020fa:	4a36      	ldr	r2, [pc, #216]	@ (80021d4 <HAL_SPI_MspInit+0x1e8>)
 80020fc:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80020fe:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 8002100:	2254      	movs	r2, #84	@ 0x54
 8002102:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002104:	4b32      	ldr	r3, [pc, #200]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 8002106:	2240      	movs	r2, #64	@ 0x40
 8002108:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800210a:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002110:	4b2f      	ldr	r3, [pc, #188]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 8002112:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002116:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 800211a:	2200      	movs	r2, #0
 800211c:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800211e:	4b2c      	ldr	r3, [pc, #176]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002124:	4b2a      	ldr	r3, [pc, #168]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800212a:	4b29      	ldr	r3, [pc, #164]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 800212c:	2200      	movs	r2, #0
 800212e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002130:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 8002132:	2200      	movs	r2, #0
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002136:	4826      	ldr	r0, [pc, #152]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 8002138:	f001 fc82 	bl	8003a40 <HAL_DMA_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_SPI_MspInit+0x15a>
    {
      Error_Handler();
 8002142:	f7fe ff35 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a21      	ldr	r2, [pc, #132]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 800214a:	679a      	str	r2, [r3, #120]	@ 0x78
 800214c:	4a20      	ldr	r2, [pc, #128]	@ (80021d0 <HAL_SPI_MspInit+0x1e4>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream2;
 8002152:	4b21      	ldr	r3, [pc, #132]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 8002154:	4a21      	ldr	r2, [pc, #132]	@ (80021dc <HAL_SPI_MspInit+0x1f0>)
 8002156:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002158:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 800215a:	2253      	movs	r2, #83	@ 0x53
 800215c:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215e:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002164:	4b1c      	ldr	r3, [pc, #112]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800216a:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 800216c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002170:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002172:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 8002174:	2200      	movs	r2, #0
 8002176:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002178:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800217e:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 8002180:	2200      	movs	r2, #0
 8002182:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 8002186:	2200      	movs	r2, #0
 8002188:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 800218c:	2200      	movs	r2, #0
 800218e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002190:	4811      	ldr	r0, [pc, #68]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 8002192:	f001 fc55 	bl	8003a40 <HAL_DMA_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 800219c:	f7fe ff08 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0d      	ldr	r2, [pc, #52]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 80021a4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80021a6:	4a0c      	ldr	r2, [pc, #48]	@ (80021d8 <HAL_SPI_MspInit+0x1ec>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2054      	movs	r0, #84	@ 0x54
 80021b2:	f001 fa56 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80021b6:	2054      	movs	r0, #84	@ 0x54
 80021b8:	f001 fa6d 	bl	8003696 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80021bc:	bf00      	nop
 80021be:	37e8      	adds	r7, #232	@ 0xe8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40013400 	.word	0x40013400
 80021c8:	58024400 	.word	0x58024400
 80021cc:	58021000 	.word	0x58021000
 80021d0:	24000420 	.word	0x24000420
 80021d4:	40020028 	.word	0x40020028
 80021d8:	24000498 	.word	0x24000498
 80021dc:	40020040 	.word	0x40020040

080021e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <NMI_Handler+0x4>

080021e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <HardFault_Handler+0x4>

080021f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <MemManage_Handler+0x4>

080021f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <UsageFault_Handler+0x4>

08002208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002236:	f000 f9cf 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <DMA1_Stream0_IRQHandler+0x10>)
 8002246:	f002 f9cf 	bl	80045e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	240002cc 	.word	0x240002cc

08002254 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <DMA1_Stream1_IRQHandler+0x10>)
 800225a:	f002 f9c5 	bl	80045e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	24000420 	.word	0x24000420

08002268 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <DMA1_Stream2_IRQHandler+0x10>)
 800226e:	f002 f9bb 	bl	80045e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	24000498 	.word	0x24000498

0800227c <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8002282:	f004 fdc1 	bl	8006e08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	24001a00 	.word	0x24001a00

08002290 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8002296:	f004 fdb7 	bl	8006e08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	24001a00 	.word	0x24001a00

080022a4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <OTG_HS_IRQHandler+0x10>)
 80022aa:	f004 fdad 	bl	8006e08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	24001a00 	.word	0x24001a00

080022b8 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80022bc:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <DCMI_PSSI_IRQHandler+0x10>)
 80022be:	f001 faf7 	bl	80038b0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2400027c 	.word	0x2400027c

080022cc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <SPI4_IRQHandler+0x10>)
 80022d2:	f00a f9ab 	bl	800c62c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	24000398 	.word	0x24000398

080022e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e8:	4a14      	ldr	r2, [pc, #80]	@ (800233c <_sbrk+0x5c>)
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <_sbrk+0x60>)
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f4:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022fc:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <_sbrk+0x64>)
 80022fe:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <_sbrk+0x68>)
 8002300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	429a      	cmp	r2, r3
 800230e:	d207      	bcs.n	8002320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002310:	f00e fd04 	bl	8010d1c <__errno>
 8002314:	4603      	mov	r3, r0
 8002316:	220c      	movs	r2, #12
 8002318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	e009      	b.n	8002334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <_sbrk+0x64>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002326:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <_sbrk+0x64>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	4a05      	ldr	r2, [pc, #20]	@ (8002344 <_sbrk+0x64>)
 8002330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002332:	68fb      	ldr	r3, [r7, #12]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	24100000 	.word	0x24100000
 8002340:	00000400 	.word	0x00000400
 8002344:	24000518 	.word	0x24000518
 8002348:	24002250 	.word	0x24002250

0800234c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002350:	4b3e      	ldr	r3, [pc, #248]	@ (800244c <SystemInit+0x100>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002356:	4a3d      	ldr	r2, [pc, #244]	@ (800244c <SystemInit+0x100>)
 8002358:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800235c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002360:	4b3b      	ldr	r3, [pc, #236]	@ (8002450 <SystemInit+0x104>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	2b02      	cmp	r3, #2
 800236a:	d807      	bhi.n	800237c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800236c:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <SystemInit+0x104>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 030f 	bic.w	r3, r3, #15
 8002374:	4a36      	ldr	r2, [pc, #216]	@ (8002450 <SystemInit+0x104>)
 8002376:	f043 0303 	orr.w	r3, r3, #3
 800237a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800237c:	4b35      	ldr	r3, [pc, #212]	@ (8002454 <SystemInit+0x108>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a34      	ldr	r2, [pc, #208]	@ (8002454 <SystemInit+0x108>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002388:	4b32      	ldr	r3, [pc, #200]	@ (8002454 <SystemInit+0x108>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800238e:	4b31      	ldr	r3, [pc, #196]	@ (8002454 <SystemInit+0x108>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4930      	ldr	r1, [pc, #192]	@ (8002454 <SystemInit+0x108>)
 8002394:	4b30      	ldr	r3, [pc, #192]	@ (8002458 <SystemInit+0x10c>)
 8002396:	4013      	ands	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800239a:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <SystemInit+0x104>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <SystemInit+0x104>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 030f 	bic.w	r3, r3, #15
 80023ae:	4a28      	ldr	r2, [pc, #160]	@ (8002450 <SystemInit+0x104>)
 80023b0:	f043 0303 	orr.w	r3, r3, #3
 80023b4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80023b6:	4b27      	ldr	r3, [pc, #156]	@ (8002454 <SystemInit+0x108>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80023bc:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <SystemInit+0x108>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80023c2:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <SystemInit+0x108>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023c8:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <SystemInit+0x108>)
 80023ca:	4a24      	ldr	r2, [pc, #144]	@ (800245c <SystemInit+0x110>)
 80023cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023ce:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <SystemInit+0x108>)
 80023d0:	4a23      	ldr	r2, [pc, #140]	@ (8002460 <SystemInit+0x114>)
 80023d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <SystemInit+0x108>)
 80023d6:	4a23      	ldr	r2, [pc, #140]	@ (8002464 <SystemInit+0x118>)
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <SystemInit+0x108>)
 80023dc:	2200      	movs	r2, #0
 80023de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <SystemInit+0x108>)
 80023e2:	4a20      	ldr	r2, [pc, #128]	@ (8002464 <SystemInit+0x118>)
 80023e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <SystemInit+0x108>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023ec:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <SystemInit+0x108>)
 80023ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002464 <SystemInit+0x118>)
 80023f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023f2:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <SystemInit+0x108>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023f8:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <SystemInit+0x108>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a15      	ldr	r2, [pc, #84]	@ (8002454 <SystemInit+0x108>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002402:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002404:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <SystemInit+0x108>)
 8002406:	2200      	movs	r2, #0
 8002408:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <SystemInit+0x108>)
 800240c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002410:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d113      	bne.n	8002440 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002418:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <SystemInit+0x108>)
 800241a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800241e:	4a0d      	ldr	r2, [pc, #52]	@ (8002454 <SystemInit+0x108>)
 8002420:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002424:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <SystemInit+0x11c>)
 800242a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800242e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002430:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <SystemInit+0x108>)
 8002432:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002436:	4a07      	ldr	r2, [pc, #28]	@ (8002454 <SystemInit+0x108>)
 8002438:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800243c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00
 8002450:	52002000 	.word	0x52002000
 8002454:	58024400 	.word	0x58024400
 8002458:	eaf6ed7f 	.word	0xeaf6ed7f
 800245c:	02020200 	.word	0x02020200
 8002460:	01ff0000 	.word	0x01ff0000
 8002464:	01010280 	.word	0x01010280
 8002468:	52004000 	.word	0x52004000

0800246c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002470:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <ExitRun0Mode+0x2c>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <ExitRun0Mode+0x2c>)
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800247c:	bf00      	nop
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <ExitRun0Mode+0x2c>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f9      	beq.n	800247e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800248a:	bf00      	nop
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	58024800 	.word	0x58024800

0800249c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800249c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80024d8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80024a0:	f7ff ffe4 	bl	800246c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024a4:	f7ff ff52 	bl	800234c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024aa:	490d      	ldr	r1, [pc, #52]	@ (80024e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024be:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024c0:	4c0a      	ldr	r4, [pc, #40]	@ (80024ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ce:	f00e fc2b 	bl	8010d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d2:	f7fe f9b9 	bl	8000848 <main>
  bx  lr
 80024d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80024dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024e0:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 80024e4:	08011808 	.word	0x08011808
  ldr r2, =_sbss
 80024e8:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 80024ec:	2400224c 	.word	0x2400224c

080024f0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC_IRQHandler>
	...

080024f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fa:	2003      	movs	r0, #3
 80024fc:	f001 f8a6 	bl	800364c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002500:	f006 fc7e 	bl	8008e00 <HAL_RCC_GetSysClockFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b15      	ldr	r3, [pc, #84]	@ (800255c <HAL_Init+0x68>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	4913      	ldr	r1, [pc, #76]	@ (8002560 <HAL_Init+0x6c>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800251e:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <HAL_Init+0x68>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	4a0e      	ldr	r2, [pc, #56]	@ (8002560 <HAL_Init+0x6c>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	4a0b      	ldr	r2, [pc, #44]	@ (8002564 <HAL_Init+0x70>)
 8002536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002538:	4a0b      	ldr	r2, [pc, #44]	@ (8002568 <HAL_Init+0x74>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800253e:	200f      	movs	r0, #15
 8002540:	f000 f814 	bl	800256c <HAL_InitTick>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e002      	b.n	8002554 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800254e:	f7ff fad3 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	58024400 	.word	0x58024400
 8002560:	080117ac 	.word	0x080117ac
 8002564:	24000004 	.word	0x24000004
 8002568:	24000000 	.word	0x24000000

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002574:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <HAL_InitTick+0x60>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e021      	b.n	80025c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002580:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <HAL_InitTick+0x64>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <HAL_InitTick+0x60>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f001 f88b 	bl	80036b2 <HAL_SYSTICK_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00e      	b.n	80025c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	d80a      	bhi.n	80025c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ac:	2200      	movs	r2, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f001 f855 	bl	8003662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b8:	4a06      	ldr	r2, [pc, #24]	@ (80025d4 <HAL_InitTick+0x68>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2400000c 	.word	0x2400000c
 80025d0:	24000000 	.word	0x24000000
 80025d4:	24000008 	.word	0x24000008

080025d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2400000c 	.word	0x2400000c
 80025fc:	2400051c 	.word	0x2400051c

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	2400051c 	.word	0x2400051c

08002618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff ffee 	bl	8002600 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d005      	beq.n	800263e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_Delay+0x44>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800263e:	bf00      	nop
 8002640:	f7ff ffde 	bl	8002600 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d8f7      	bhi.n	8002640 <HAL_Delay+0x28>
  {
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2400000c 	.word	0x2400000c

08002660 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <LL_ADC_SetChannelPreselection+0x24>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2201      	movs	r2, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	e015      	b.n	8002718 <LL_ADC_SetChannelPreselection+0x50>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e003      	b.n	800270e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2201      	movs	r2, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	69d2      	ldr	r2, [r2, #28]
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800272e:	b480      	push	{r7}
 8002730:	b087      	sub	sp, #28
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3360      	adds	r3, #96	@ 0x60
 8002740:	461a      	mov	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	430b      	orrs	r3, r1
 800275c:	431a      	orrs	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	431a      	orrs	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	611a      	str	r2, [r3, #16]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3360      	adds	r3, #96	@ 0x60
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	601a      	str	r2, [r3, #0]
  }
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b087      	sub	sp, #28
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3330      	adds	r3, #48	@ 0x30
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	4413      	add	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	211f      	movs	r1, #31
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	401a      	ands	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	f003 011f 	and.w	r1, r3, #31
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	431a      	orrs	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800282e:	b480      	push	{r7}
 8002830:	b087      	sub	sp, #28
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3314      	adds	r3, #20
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	0e5b      	lsrs	r3, r3, #25
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	4413      	add	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	0d1b      	lsrs	r3, r3, #20
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2107      	movs	r1, #7
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	401a      	ands	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	0d1b      	lsrs	r3, r3, #20
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	431a      	orrs	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800289c:	43db      	mvns	r3, r3
 800289e:	401a      	ands	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0318 	and.w	r3, r3, #24
 80028a6:	4908      	ldr	r1, [pc, #32]	@ (80028c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028a8:	40d9      	lsrs	r1, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	400b      	ands	r3, r1
 80028ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b2:	431a      	orrs	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	000fffff 	.word	0x000fffff

080028cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <LL_ADC_DisableDeepPowerDown+0x20>)
 80028da:	4013      	ands	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6093      	str	r3, [r2, #8]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	5fffffc0 	.word	0x5fffffc0

080028f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002904:	d101      	bne.n	800290a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <LL_ADC_EnableInternalRegulator+0x24>)
 8002926:	4013      	ands	r3, r2
 8002928:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	6fffffc0 	.word	0x6fffffc0

08002940 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002954:	d101      	bne.n	800295a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <LL_ADC_IsEnabled+0x18>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <LL_ADC_IsEnabled+0x1a>
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d101      	bne.n	80029a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d101      	bne.n	80029cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b089      	sub	sp, #36	@ 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e138      	b.n	8002c68 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d109      	bne.n	8002a18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff f891 	bl	8001b2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff67 	bl	80028f0 <LL_ADC_IsDeepPowerDownEnabled>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff4d 	bl	80028cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ff82 	bl	8002940 <LL_ADC_IsInternalRegulatorEnabled>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d114      	bne.n	8002a6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ff66 	bl	8002918 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a4c:	4b88      	ldr	r3, [pc, #544]	@ (8002c70 <HAL_ADC_Init+0x294>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	4a88      	ldr	r2, [pc, #544]	@ (8002c74 <HAL_ADC_Init+0x298>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a5e:	e002      	b.n	8002a66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f9      	bne.n	8002a60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff65 	bl	8002940 <LL_ADC_IsInternalRegulatorEnabled>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10d      	bne.n	8002a98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	f043 0210 	orr.w	r2, r3, #16
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff76 	bl	800298e <LL_ADC_REG_IsConversionOngoing>
 8002aa2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 80d2 	bne.w	8002c56 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 80ce 	bne.w	8002c56 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ac2:	f043 0202 	orr.w	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff4a 	bl	8002968 <LL_ADC_IsEnabled>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d110      	bne.n	8002afc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ada:	4867      	ldr	r0, [pc, #412]	@ (8002c78 <HAL_ADC_Init+0x29c>)
 8002adc:	f7ff ff44 	bl	8002968 <LL_ADC_IsEnabled>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	4866      	ldr	r0, [pc, #408]	@ (8002c7c <HAL_ADC_Init+0x2a0>)
 8002ae4:	f7ff ff40 	bl	8002968 <LL_ADC_IsEnabled>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4323      	orrs	r3, r4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4619      	mov	r1, r3
 8002af6:	4862      	ldr	r0, [pc, #392]	@ (8002c80 <HAL_ADC_Init+0x2a4>)
 8002af8:	f7ff fdb2 	bl	8002660 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7d5b      	ldrb	r3, [r3, #21]
 8002b00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b06:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002b0c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7f1b      	ldrb	r3, [r3, #28]
 8002b12:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7f1b      	ldrb	r3, [r3, #28]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d106      	bne.n	8002b2e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	045b      	lsls	r3, r3, #17
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	4b4c      	ldr	r3, [pc, #304]	@ (8002c84 <HAL_ADC_Init+0x2a8>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	69b9      	ldr	r1, [r7, #24]
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff13 	bl	800298e <LL_ADC_REG_IsConversionOngoing>
 8002b68:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff20 	bl	80029b4 <LL_ADC_INJ_IsConversionOngoing>
 8002b74:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d14a      	bne.n	8002c12 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d147      	bne.n	8002c12 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7d1b      	ldrb	r3, [r3, #20]
 8002b86:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	4b3c      	ldr	r3, [pc, #240]	@ (8002c88 <HAL_ADC_Init+0x2ac>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d11b      	bne.n	8002be6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	4b34      	ldr	r3, [pc, #208]	@ (8002c8c <HAL_ADC_Init+0x2b0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bc2:	3a01      	subs	r2, #1
 8002bc4:	0411      	lsls	r1, r2, #16
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	611a      	str	r2, [r3, #16]
 8002be4:	e007      	b.n	8002bf6 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fabd 	bl	800318c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d10c      	bne.n	8002c34 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	f023 010f 	bic.w	r1, r3, #15
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	1e5a      	subs	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c32:	e007      	b.n	8002c44 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 020f 	bic.w	r2, r2, #15
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	f023 0303 	bic.w	r3, r3, #3
 8002c4c:	f043 0201 	orr.w	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c54:	e007      	b.n	8002c66 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5a:	f043 0210 	orr.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3724      	adds	r7, #36	@ 0x24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd90      	pop	{r4, r7, pc}
 8002c70:	24000000 	.word	0x24000000
 8002c74:	053e2d63 	.word	0x053e2d63
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	40022100 	.word	0x40022100
 8002c80:	40022300 	.word	0x40022300
 8002c84:	fff0c003 	.word	0xfff0c003
 8002c88:	ffffbffc 	.word	0xffffbffc
 8002c8c:	fc00f81e 	.word	0xfc00f81e

08002c90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b08d      	sub	sp, #52	@ 0x34
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a5b      	ldr	r2, [pc, #364]	@ (8002e18 <HAL_ADC_ConfigChannel+0x188>)
 8002caa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x2a>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e263      	b.n	8003182 <HAL_ADC_ConfigChannel+0x4f2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fe61 	bl	800298e <LL_ADC_REG_IsConversionOngoing>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 8248 	bne.w	8003164 <HAL_ADC_ConfigChannel+0x4d4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db2c      	blt.n	8002d36 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x6a>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	e016      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x98>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	613b      	str	r3, [r7, #16]
  return result;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e003      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2201      	movs	r2, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	69d1      	ldr	r1, [r2, #28]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	430b      	orrs	r3, r1
 8002d34:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f7ff fd47 	bl	80027d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fe1e 	bl	800298e <LL_ADC_REG_IsConversionOngoing>
 8002d52:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fe2b 	bl	80029b4 <LL_ADC_INJ_IsConversionOngoing>
 8002d5e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 80a2 	bne.w	8002eac <HAL_ADC_ConfigChannel+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 809e 	bne.w	8002eac <HAL_ADC_ConfigChannel+0x21c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f7ff fd56 	bl	800282e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x118>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	e00a      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x12e>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d029      	beq.n	8002e1c <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6919      	ldr	r1, [r3, #16]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	f7ff fcaa 	bl	800272e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6919      	ldr	r1, [r3, #16]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	7e5b      	ldrb	r3, [r3, #25]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x160>
 8002dea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002dee:	e000      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x162>
 8002df0:	2300      	movs	r3, #0
 8002df2:	461a      	mov	r2, r3
 8002df4:	f7ff fcd4 	bl	80027a0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6919      	ldr	r1, [r3, #16]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	7e1b      	ldrb	r3, [r3, #24]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d102      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x17e>
 8002e08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e0c:	e000      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x180>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	461a      	mov	r2, r3
 8002e12:	f7ff fcac 	bl	800276e <LL_ADC_SetDataRightShift>
 8002e16:	e049      	b.n	8002eac <HAL_ADC_ConfigChannel+0x21c>
 8002e18:	47ff0000 	.word	0x47ff0000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	069b      	lsls	r3, r3, #26
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d107      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x1b0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e3e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	069b      	lsls	r3, r3, #26
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d107      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x1d4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e62:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	069b      	lsls	r3, r3, #26
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d107      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1f8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e86:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	069b      	lsls	r3, r3, #26
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d107      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x21c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002eaa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fd59 	bl	8002968 <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f040 815c 	bne.w	8003176 <HAL_ADC_ConfigChannel+0x4e6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6819      	ldr	r1, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f7ff fcda 	bl	8002884 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a89      	ldr	r2, [pc, #548]	@ (80030fc <HAL_ADC_ConfigChannel+0x46c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f040 809a 	bne.w	8003010 <HAL_ADC_ConfigChannel+0x380>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4986      	ldr	r1, [pc, #536]	@ (8003100 <HAL_ADC_ConfigChannel+0x470>)
 8002ee6:	428b      	cmp	r3, r1
 8002ee8:	d147      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x2ea>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4985      	ldr	r1, [pc, #532]	@ (8003104 <HAL_ADC_ConfigChannel+0x474>)
 8002ef0:	428b      	cmp	r3, r1
 8002ef2:	d040      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x2e6>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4983      	ldr	r1, [pc, #524]	@ (8003108 <HAL_ADC_ConfigChannel+0x478>)
 8002efa:	428b      	cmp	r3, r1
 8002efc:	d039      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x2e2>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4982      	ldr	r1, [pc, #520]	@ (800310c <HAL_ADC_ConfigChannel+0x47c>)
 8002f04:	428b      	cmp	r3, r1
 8002f06:	d032      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x2de>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4980      	ldr	r1, [pc, #512]	@ (8003110 <HAL_ADC_ConfigChannel+0x480>)
 8002f0e:	428b      	cmp	r3, r1
 8002f10:	d02b      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x2da>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	497f      	ldr	r1, [pc, #508]	@ (8003114 <HAL_ADC_ConfigChannel+0x484>)
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	d024      	beq.n	8002f66 <HAL_ADC_ConfigChannel+0x2d6>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	497d      	ldr	r1, [pc, #500]	@ (8003118 <HAL_ADC_ConfigChannel+0x488>)
 8002f22:	428b      	cmp	r3, r1
 8002f24:	d01d      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0x2d2>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	497c      	ldr	r1, [pc, #496]	@ (800311c <HAL_ADC_ConfigChannel+0x48c>)
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	d016      	beq.n	8002f5e <HAL_ADC_ConfigChannel+0x2ce>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	497a      	ldr	r1, [pc, #488]	@ (8003120 <HAL_ADC_ConfigChannel+0x490>)
 8002f36:	428b      	cmp	r3, r1
 8002f38:	d00f      	beq.n	8002f5a <HAL_ADC_ConfigChannel+0x2ca>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4979      	ldr	r1, [pc, #484]	@ (8003124 <HAL_ADC_ConfigChannel+0x494>)
 8002f40:	428b      	cmp	r3, r1
 8002f42:	d008      	beq.n	8002f56 <HAL_ADC_ConfigChannel+0x2c6>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4977      	ldr	r1, [pc, #476]	@ (8003128 <HAL_ADC_ConfigChannel+0x498>)
 8002f4a:	428b      	cmp	r3, r1
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x2c2>
 8002f4e:	4b77      	ldr	r3, [pc, #476]	@ (800312c <HAL_ADC_ConfigChannel+0x49c>)
 8002f50:	e05a      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f52:	2300      	movs	r3, #0
 8002f54:	e058      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f56:	4b76      	ldr	r3, [pc, #472]	@ (8003130 <HAL_ADC_ConfigChannel+0x4a0>)
 8002f58:	e056      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f5a:	4b76      	ldr	r3, [pc, #472]	@ (8003134 <HAL_ADC_ConfigChannel+0x4a4>)
 8002f5c:	e054      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f5e:	4b70      	ldr	r3, [pc, #448]	@ (8003120 <HAL_ADC_ConfigChannel+0x490>)
 8002f60:	e052      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f62:	4b6e      	ldr	r3, [pc, #440]	@ (800311c <HAL_ADC_ConfigChannel+0x48c>)
 8002f64:	e050      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f66:	4b74      	ldr	r3, [pc, #464]	@ (8003138 <HAL_ADC_ConfigChannel+0x4a8>)
 8002f68:	e04e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f6a:	4b74      	ldr	r3, [pc, #464]	@ (800313c <HAL_ADC_ConfigChannel+0x4ac>)
 8002f6c:	e04c      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f6e:	4b74      	ldr	r3, [pc, #464]	@ (8003140 <HAL_ADC_ConfigChannel+0x4b0>)
 8002f70:	e04a      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f72:	4b74      	ldr	r3, [pc, #464]	@ (8003144 <HAL_ADC_ConfigChannel+0x4b4>)
 8002f74:	e048      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e046      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4972      	ldr	r1, [pc, #456]	@ (8003148 <HAL_ADC_ConfigChannel+0x4b8>)
 8002f80:	428b      	cmp	r3, r1
 8002f82:	d140      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x376>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	495e      	ldr	r1, [pc, #376]	@ (8003104 <HAL_ADC_ConfigChannel+0x474>)
 8002f8a:	428b      	cmp	r3, r1
 8002f8c:	d039      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x372>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	495d      	ldr	r1, [pc, #372]	@ (8003108 <HAL_ADC_ConfigChannel+0x478>)
 8002f94:	428b      	cmp	r3, r1
 8002f96:	d032      	beq.n	8002ffe <HAL_ADC_ConfigChannel+0x36e>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	495b      	ldr	r1, [pc, #364]	@ (800310c <HAL_ADC_ConfigChannel+0x47c>)
 8002f9e:	428b      	cmp	r3, r1
 8002fa0:	d02b      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x36a>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	495a      	ldr	r1, [pc, #360]	@ (8003110 <HAL_ADC_ConfigChannel+0x480>)
 8002fa8:	428b      	cmp	r3, r1
 8002faa:	d024      	beq.n	8002ff6 <HAL_ADC_ConfigChannel+0x366>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4958      	ldr	r1, [pc, #352]	@ (8003114 <HAL_ADC_ConfigChannel+0x484>)
 8002fb2:	428b      	cmp	r3, r1
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_ADC_ConfigChannel+0x362>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4957      	ldr	r1, [pc, #348]	@ (8003118 <HAL_ADC_ConfigChannel+0x488>)
 8002fbc:	428b      	cmp	r3, r1
 8002fbe:	d016      	beq.n	8002fee <HAL_ADC_ConfigChannel+0x35e>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4955      	ldr	r1, [pc, #340]	@ (800311c <HAL_ADC_ConfigChannel+0x48c>)
 8002fc6:	428b      	cmp	r3, r1
 8002fc8:	d00f      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x35a>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4954      	ldr	r1, [pc, #336]	@ (8003120 <HAL_ADC_ConfigChannel+0x490>)
 8002fd0:	428b      	cmp	r3, r1
 8002fd2:	d008      	beq.n	8002fe6 <HAL_ADC_ConfigChannel+0x356>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4953      	ldr	r1, [pc, #332]	@ (8003128 <HAL_ADC_ConfigChannel+0x498>)
 8002fda:	428b      	cmp	r3, r1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x352>
 8002fde:	4b53      	ldr	r3, [pc, #332]	@ (800312c <HAL_ADC_ConfigChannel+0x49c>)
 8002fe0:	e012      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e010      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002fe6:	4b53      	ldr	r3, [pc, #332]	@ (8003134 <HAL_ADC_ConfigChannel+0x4a4>)
 8002fe8:	e00e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002fea:	4b4d      	ldr	r3, [pc, #308]	@ (8003120 <HAL_ADC_ConfigChannel+0x490>)
 8002fec:	e00c      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002fee:	4b4b      	ldr	r3, [pc, #300]	@ (800311c <HAL_ADC_ConfigChannel+0x48c>)
 8002ff0:	e00a      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002ff2:	4b51      	ldr	r3, [pc, #324]	@ (8003138 <HAL_ADC_ConfigChannel+0x4a8>)
 8002ff4:	e008      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002ff6:	4b51      	ldr	r3, [pc, #324]	@ (800313c <HAL_ADC_ConfigChannel+0x4ac>)
 8002ff8:	e006      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002ffa:	4b51      	ldr	r3, [pc, #324]	@ (8003140 <HAL_ADC_ConfigChannel+0x4b0>)
 8002ffc:	e004      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8002ffe:	4b51      	ldr	r3, [pc, #324]	@ (8003144 <HAL_ADC_ConfigChannel+0x4b4>)
 8003000:	e002      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_ADC_ConfigChannel+0x378>
 8003006:	2300      	movs	r3, #0
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7ff fb5c 	bl	80026c8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f280 80ae 	bge.w	8003176 <HAL_ADC_ConfigChannel+0x4e6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800301a:	484c      	ldr	r0, [pc, #304]	@ (800314c <HAL_ADC_ConfigChannel+0x4bc>)
 800301c:	f7ff fb46 	bl	80026ac <LL_ADC_GetCommonPathInternalCh>
 8003020:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003022:	4837      	ldr	r0, [pc, #220]	@ (8003100 <HAL_ADC_ConfigChannel+0x470>)
 8003024:	f7ff fca0 	bl	8002968 <LL_ADC_IsEnabled>
 8003028:	4604      	mov	r4, r0
 800302a:	4847      	ldr	r0, [pc, #284]	@ (8003148 <HAL_ADC_ConfigChannel+0x4b8>)
 800302c:	f7ff fc9c 	bl	8002968 <LL_ADC_IsEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	4323      	orrs	r3, r4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d156      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x456>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a44      	ldr	r2, [pc, #272]	@ (8003150 <HAL_ADC_ConfigChannel+0x4c0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d123      	bne.n	800308a <HAL_ADC_ConfigChannel+0x3fa>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d11e      	bne.n	800308a <HAL_ADC_ConfigChannel+0x3fa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a3d      	ldr	r2, [pc, #244]	@ (8003148 <HAL_ADC_ConfigChannel+0x4b8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	f040 808f 	bne.w	8003176 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800305e:	4619      	mov	r1, r3
 8003060:	483a      	ldr	r0, [pc, #232]	@ (800314c <HAL_ADC_ConfigChannel+0x4bc>)
 8003062:	f7ff fb10 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003066:	4b3b      	ldr	r3, [pc, #236]	@ (8003154 <HAL_ADC_ConfigChannel+0x4c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	4a3a      	ldr	r2, [pc, #232]	@ (8003158 <HAL_ADC_ConfigChannel+0x4c8>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	3301      	adds	r3, #1
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800307a:	e002      	b.n	8003082 <HAL_ADC_ConfigChannel+0x3f2>
              {
                wait_loop_index--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3b01      	subs	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f9      	bne.n	800307c <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003088:	e075      	b.n	8003176 <HAL_ADC_ConfigChannel+0x4e6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a33      	ldr	r2, [pc, #204]	@ (800315c <HAL_ADC_ConfigChannel+0x4cc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d111      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x428>
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10c      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x428>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a29      	ldr	r2, [pc, #164]	@ (8003148 <HAL_ADC_ConfigChannel+0x4b8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d166      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ae:	4619      	mov	r1, r3
 80030b0:	4826      	ldr	r0, [pc, #152]	@ (800314c <HAL_ADC_ConfigChannel+0x4bc>)
 80030b2:	f7ff fae8 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030b6:	e05e      	b.n	8003176 <HAL_ADC_ConfigChannel+0x4e6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a28      	ldr	r2, [pc, #160]	@ (8003160 <HAL_ADC_ConfigChannel+0x4d0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d159      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x4e6>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d154      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003148 <HAL_ADC_ConfigChannel+0x4b8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d14f      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030dc:	4619      	mov	r1, r3
 80030de:	481b      	ldr	r0, [pc, #108]	@ (800314c <HAL_ADC_ConfigChannel+0x4bc>)
 80030e0:	f7ff fad1 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
 80030e4:	e047      	b.n	8003176 <HAL_ADC_ConfigChannel+0x4e6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80030f8:	e03d      	b.n	8003176 <HAL_ADC_ConfigChannel+0x4e6>
 80030fa:	bf00      	nop
 80030fc:	47ff0000 	.word	0x47ff0000
 8003100:	40022000 	.word	0x40022000
 8003104:	04300002 	.word	0x04300002
 8003108:	08600004 	.word	0x08600004
 800310c:	0c900008 	.word	0x0c900008
 8003110:	10c00010 	.word	0x10c00010
 8003114:	14f00020 	.word	0x14f00020
 8003118:	2a000400 	.word	0x2a000400
 800311c:	2e300800 	.word	0x2e300800
 8003120:	32601000 	.word	0x32601000
 8003124:	43210000 	.word	0x43210000
 8003128:	4b840000 	.word	0x4b840000
 800312c:	4fb80000 	.word	0x4fb80000
 8003130:	47520000 	.word	0x47520000
 8003134:	36902000 	.word	0x36902000
 8003138:	25b00200 	.word	0x25b00200
 800313c:	21800100 	.word	0x21800100
 8003140:	1d500080 	.word	0x1d500080
 8003144:	19200040 	.word	0x19200040
 8003148:	40022100 	.word	0x40022100
 800314c:	40022300 	.word	0x40022300
 8003150:	cb840000 	.word	0xcb840000
 8003154:	24000000 	.word	0x24000000
 8003158:	053e2d63 	.word	0x053e2d63
 800315c:	bac04000 	.word	0xbac04000
 8003160:	cfb80000 	.word	0xcfb80000
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800317e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003182:	4618      	mov	r0, r3
 8003184:	3734      	adds	r7, #52	@ 0x34
 8003186:	46bd      	mov	sp, r7
 8003188:	bd90      	pop	{r4, r7, pc}
 800318a:	bf00      	nop

0800318c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003194:	4b60      	ldr	r3, [pc, #384]	@ (8003318 <ADC_ConfigureBoostMode+0x18c>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01c      	beq.n	80031da <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80031a0:	f005 ffa8 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 80031a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031ae:	d010      	beq.n	80031d2 <ADC_ConfigureBoostMode+0x46>
 80031b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031b4:	d873      	bhi.n	800329e <ADC_ConfigureBoostMode+0x112>
 80031b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ba:	d002      	beq.n	80031c2 <ADC_ConfigureBoostMode+0x36>
 80031bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031c0:	d16d      	bne.n	800329e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0c1b      	lsrs	r3, r3, #16
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ce:	60fb      	str	r3, [r7, #12]
        break;
 80031d0:	e068      	b.n	80032a4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	60fb      	str	r3, [r7, #12]
        break;
 80031d8:	e064      	b.n	80032a4 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031da:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80031de:	f04f 0100 	mov.w	r1, #0
 80031e2:	f007 f98b 	bl	800a4fc <HAL_RCCEx_GetPeriphCLKFreq>
 80031e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80031f0:	d051      	beq.n	8003296 <ADC_ConfigureBoostMode+0x10a>
 80031f2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80031f6:	d854      	bhi.n	80032a2 <ADC_ConfigureBoostMode+0x116>
 80031f8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80031fc:	d047      	beq.n	800328e <ADC_ConfigureBoostMode+0x102>
 80031fe:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003202:	d84e      	bhi.n	80032a2 <ADC_ConfigureBoostMode+0x116>
 8003204:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003208:	d03d      	beq.n	8003286 <ADC_ConfigureBoostMode+0xfa>
 800320a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800320e:	d848      	bhi.n	80032a2 <ADC_ConfigureBoostMode+0x116>
 8003210:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003214:	d033      	beq.n	800327e <ADC_ConfigureBoostMode+0xf2>
 8003216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800321a:	d842      	bhi.n	80032a2 <ADC_ConfigureBoostMode+0x116>
 800321c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003220:	d029      	beq.n	8003276 <ADC_ConfigureBoostMode+0xea>
 8003222:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003226:	d83c      	bhi.n	80032a2 <ADC_ConfigureBoostMode+0x116>
 8003228:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800322c:	d01a      	beq.n	8003264 <ADC_ConfigureBoostMode+0xd8>
 800322e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003232:	d836      	bhi.n	80032a2 <ADC_ConfigureBoostMode+0x116>
 8003234:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003238:	d014      	beq.n	8003264 <ADC_ConfigureBoostMode+0xd8>
 800323a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800323e:	d830      	bhi.n	80032a2 <ADC_ConfigureBoostMode+0x116>
 8003240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003244:	d00e      	beq.n	8003264 <ADC_ConfigureBoostMode+0xd8>
 8003246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800324a:	d82a      	bhi.n	80032a2 <ADC_ConfigureBoostMode+0x116>
 800324c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003250:	d008      	beq.n	8003264 <ADC_ConfigureBoostMode+0xd8>
 8003252:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003256:	d824      	bhi.n	80032a2 <ADC_ConfigureBoostMode+0x116>
 8003258:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800325c:	d002      	beq.n	8003264 <ADC_ConfigureBoostMode+0xd8>
 800325e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003262:	d11e      	bne.n	80032a2 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	0c9b      	lsrs	r3, r3, #18
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	60fb      	str	r3, [r7, #12]
        break;
 8003274:	e016      	b.n	80032a4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	60fb      	str	r3, [r7, #12]
        break;
 800327c:	e012      	b.n	80032a4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	60fb      	str	r3, [r7, #12]
        break;
 8003284:	e00e      	b.n	80032a4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	60fb      	str	r3, [r7, #12]
        break;
 800328c:	e00a      	b.n	80032a4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	09db      	lsrs	r3, r3, #7
 8003292:	60fb      	str	r3, [r7, #12]
        break;
 8003294:	e006      	b.n	80032a4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	60fb      	str	r3, [r7, #12]
        break;
 800329c:	e002      	b.n	80032a4 <ADC_ConfigureBoostMode+0x118>
        break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80032a2:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <ADC_ConfigureBoostMode+0x190>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d808      	bhi.n	80032c4 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80032c0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80032c2:	e025      	b.n	8003310 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a16      	ldr	r2, [pc, #88]	@ (8003320 <ADC_ConfigureBoostMode+0x194>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d80a      	bhi.n	80032e2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032de:	609a      	str	r2, [r3, #8]
}
 80032e0:	e016      	b.n	8003310 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003324 <ADC_ConfigureBoostMode+0x198>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d80a      	bhi.n	8003300 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032fc:	609a      	str	r2, [r3, #8]
}
 80032fe:	e007      	b.n	8003310 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800330e:	609a      	str	r2, [r3, #8]
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40022300 	.word	0x40022300
 800331c:	005f5e10 	.word	0x005f5e10
 8003320:	00bebc20 	.word	0x00bebc20
 8003324:	017d7840 	.word	0x017d7840

08003328 <LL_ADC_IsEnabled>:
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <LL_ADC_IsEnabled+0x18>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <LL_ADC_IsEnabled+0x1a>
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <LL_ADC_REG_IsConversionOngoing>:
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b04      	cmp	r3, #4
 8003360:	d101      	bne.n	8003366 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b09f      	sub	sp, #124	@ 0x7c
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800338e:	2302      	movs	r3, #2
 8003390:	e080      	b.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800339e:	2300      	movs	r3, #0
 80033a0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a3d      	ldr	r2, [pc, #244]	@ (800349c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d102      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033ac:	4b3c      	ldr	r3, [pc, #240]	@ (80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	e001      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e05f      	b.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ffb9 	bl	800334e <LL_ADC_REG_IsConversionOngoing>
 80033dc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff ffb3 	bl	800334e <LL_ADC_REG_IsConversionOngoing>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d141      	bne.n	8003472 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d13e      	bne.n	8003472 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033f4:	4b2b      	ldr	r3, [pc, #172]	@ (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80033f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	431a      	orrs	r2, r3
 800340e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003410:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003412:	4822      	ldr	r0, [pc, #136]	@ (800349c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003414:	f7ff ff88 	bl	8003328 <LL_ADC_IsEnabled>
 8003418:	4604      	mov	r4, r0
 800341a:	4821      	ldr	r0, [pc, #132]	@ (80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800341c:	f7ff ff84 	bl	8003328 <LL_ADC_IsEnabled>
 8003420:	4603      	mov	r3, r0
 8003422:	4323      	orrs	r3, r4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d12e      	bne.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800342e:	4013      	ands	r3, r2
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	6811      	ldr	r1, [r2, #0]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	6892      	ldr	r2, [r2, #8]
 8003438:	430a      	orrs	r2, r1
 800343a:	431a      	orrs	r2, r3
 800343c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800343e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003440:	e021      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800344a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800344e:	4813      	ldr	r0, [pc, #76]	@ (800349c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003450:	f7ff ff6a 	bl	8003328 <LL_ADC_IsEnabled>
 8003454:	4604      	mov	r4, r0
 8003456:	4812      	ldr	r0, [pc, #72]	@ (80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003458:	f7ff ff66 	bl	8003328 <LL_ADC_IsEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	4323      	orrs	r3, r4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d110      	bne.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800346a:	4013      	ands	r3, r2
 800346c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800346e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003470:	e009      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003484:	e000      	b.n	8003488 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003486:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003490:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003494:	4618      	mov	r0, r3
 8003496:	377c      	adds	r7, #124	@ 0x7c
 8003498:	46bd      	mov	sp, r7
 800349a:	bd90      	pop	{r4, r7, pc}
 800349c:	40022000 	.word	0x40022000
 80034a0:	40022100 	.word	0x40022100
 80034a4:	40022300 	.word	0x40022300
 80034a8:	fffff0e0 	.word	0xfffff0e0

080034ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <__NVIC_SetPriorityGrouping+0x40>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034c8:	4013      	ands	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034d4:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034da:	4a04      	ldr	r2, [pc, #16]	@ (80034ec <__NVIC_SetPriorityGrouping+0x40>)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	60d3      	str	r3, [r2, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00
 80034f0:	05fa0000 	.word	0x05fa0000

080034f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f8:	4b04      	ldr	r3, [pc, #16]	@ (800350c <__NVIC_GetPriorityGrouping+0x18>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 0307 	and.w	r3, r3, #7
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800351a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800351e:	2b00      	cmp	r3, #0
 8003520:	db0b      	blt.n	800353a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	4907      	ldr	r1, [pc, #28]	@ (8003548 <__NVIC_EnableIRQ+0x38>)
 800352a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2001      	movs	r0, #1
 8003532:	fa00 f202 	lsl.w	r2, r0, r2
 8003536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000e100 	.word	0xe000e100

0800354c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	6039      	str	r1, [r7, #0]
 8003556:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800355c:	2b00      	cmp	r3, #0
 800355e:	db0a      	blt.n	8003576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	b2da      	uxtb	r2, r3
 8003564:	490c      	ldr	r1, [pc, #48]	@ (8003598 <__NVIC_SetPriority+0x4c>)
 8003566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	440b      	add	r3, r1
 8003570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003574:	e00a      	b.n	800358c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4908      	ldr	r1, [pc, #32]	@ (800359c <__NVIC_SetPriority+0x50>)
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	3b04      	subs	r3, #4
 8003584:	0112      	lsls	r2, r2, #4
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	440b      	add	r3, r1
 800358a:	761a      	strb	r2, [r3, #24]
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000e100 	.word	0xe000e100
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	@ 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f1c3 0307 	rsb	r3, r3, #7
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	bf28      	it	cs
 80035be:	2304      	movcs	r3, #4
 80035c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d902      	bls.n	80035d0 <NVIC_EncodePriority+0x30>
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3b03      	subs	r3, #3
 80035ce:	e000      	b.n	80035d2 <NVIC_EncodePriority+0x32>
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	f04f 32ff 	mov.w	r2, #4294967295
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	401a      	ands	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43d9      	mvns	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	4313      	orrs	r3, r2
         );
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3724      	adds	r7, #36	@ 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003618:	d301      	bcc.n	800361e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361a:	2301      	movs	r3, #1
 800361c:	e00f      	b.n	800363e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361e:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <SysTick_Config+0x40>)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003626:	210f      	movs	r1, #15
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	f7ff ff8e 	bl	800354c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003630:	4b05      	ldr	r3, [pc, #20]	@ (8003648 <SysTick_Config+0x40>)
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003636:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <SysTick_Config+0x40>)
 8003638:	2207      	movs	r2, #7
 800363a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	e000e010 	.word	0xe000e010

0800364c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff29 	bl	80034ac <__NVIC_SetPriorityGrouping>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003670:	f7ff ff40 	bl	80034f4 <__NVIC_GetPriorityGrouping>
 8003674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff ff90 	bl	80035a0 <NVIC_EncodePriority>
 8003680:	4602      	mov	r2, r0
 8003682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff5f 	bl	800354c <__NVIC_SetPriority>
}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ff33 	bl	8003510 <__NVIC_EnableIRQ>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ffa4 	bl	8003608 <SysTick_Config>
 80036c0:	4603      	mov	r3, r0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80036d0:	f3bf 8f5f 	dmb	sy
}
 80036d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80036d6:	4b07      	ldr	r3, [pc, #28]	@ (80036f4 <HAL_MPU_Disable+0x28>)
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	4a06      	ldr	r2, [pc, #24]	@ (80036f4 <HAL_MPU_Disable+0x28>)
 80036dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80036e2:	4b05      	ldr	r3, [pc, #20]	@ (80036f8 <HAL_MPU_Disable+0x2c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000ed00 	.word	0xe000ed00
 80036f8:	e000ed90 	.word	0xe000ed90

080036fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003704:	4a0b      	ldr	r2, [pc, #44]	@ (8003734 <HAL_MPU_Enable+0x38>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800370e:	4b0a      	ldr	r3, [pc, #40]	@ (8003738 <HAL_MPU_Enable+0x3c>)
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	4a09      	ldr	r2, [pc, #36]	@ (8003738 <HAL_MPU_Enable+0x3c>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003718:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800371a:	f3bf 8f4f 	dsb	sy
}
 800371e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003720:	f3bf 8f6f 	isb	sy
}
 8003724:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000ed90 	.word	0xe000ed90
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	785a      	ldrb	r2, [r3, #1]
 8003748:	4b1b      	ldr	r3, [pc, #108]	@ (80037b8 <HAL_MPU_ConfigRegion+0x7c>)
 800374a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800374c:	4b1a      	ldr	r3, [pc, #104]	@ (80037b8 <HAL_MPU_ConfigRegion+0x7c>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	4a19      	ldr	r2, [pc, #100]	@ (80037b8 <HAL_MPU_ConfigRegion+0x7c>)
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003758:	4a17      	ldr	r2, [pc, #92]	@ (80037b8 <HAL_MPU_ConfigRegion+0x7c>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	7b1b      	ldrb	r3, [r3, #12]
 8003764:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7adb      	ldrb	r3, [r3, #11]
 800376a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800376c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7a9b      	ldrb	r3, [r3, #10]
 8003772:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7b5b      	ldrb	r3, [r3, #13]
 800377a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800377c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7b9b      	ldrb	r3, [r3, #14]
 8003782:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003784:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7bdb      	ldrb	r3, [r3, #15]
 800378a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800378c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	7a5b      	ldrb	r3, [r3, #9]
 8003792:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003794:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7a1b      	ldrb	r3, [r3, #8]
 800379a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800379c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80037a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037a8:	6113      	str	r3, [r2, #16]
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	e000ed90 	.word	0xe000ed90

080037bc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e069      	b.n	80038a2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fe faa8 	bl	8001d30 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4b2a      	ldr	r3, [pc, #168]	@ (80038ac <HAL_DCMI_Init+0xf0>)
 8003802:	400b      	ands	r3, r1
 8003804:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800381a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003826:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003832:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800383e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800384a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b10      	cmp	r3, #16
 800385a:	d112      	bne.n	8003882 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7f1b      	ldrb	r3, [r3, #28]
 8003860:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7f5b      	ldrb	r3, [r3, #29]
 8003866:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003868:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7f9b      	ldrb	r3, [r3, #30]
 800386e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003870:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7fdb      	ldrb	r3, [r3, #31]
 8003878:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800387e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003880:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 021e 	orr.w	r2, r2, #30
 8003890:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	ffe0f007 	.word	0xffe0f007

080038b0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2204      	movs	r2, #4
 80038d0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2204      	movs	r2, #4
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ea:	4a31      	ldr	r2, [pc, #196]	@ (80039b0 <HAL_DCMI_IRQHandler+0x100>)
 80038ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fc32 	bl	800415c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2202      	movs	r2, #2
 8003908:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2204      	movs	r2, #4
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003922:	4a23      	ldr	r2, [pc, #140]	@ (80039b0 <HAL_DCMI_IRQHandler+0x100>)
 8003924:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fc16 	bl	800415c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2210      	movs	r2, #16
 8003940:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f840 	bl	80039c8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d006      	beq.n	8003960 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2208      	movs	r2, #8
 8003958:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f83e 	bl	80039dc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01d      	beq.n	80039a6 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d107      	bne.n	8003988 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 021e 	bic.w	r2, r2, #30
 8003986:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2201      	movs	r2, #1
 800399e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f825 	bl	80039f0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	08003a05 	.word	0x08003a05

080039b4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a10:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d009      	beq.n	8003a30 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff ffbf 	bl	80039b4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a48:	f7fe fdda 	bl	8002600 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e37d      	b.n	8004154 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a66      	ldr	r2, [pc, #408]	@ (8003bf8 <HAL_DMA_Init+0x1b8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d04a      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a65      	ldr	r2, [pc, #404]	@ (8003bfc <HAL_DMA_Init+0x1bc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d045      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a63      	ldr	r2, [pc, #396]	@ (8003c00 <HAL_DMA_Init+0x1c0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d040      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a62      	ldr	r2, [pc, #392]	@ (8003c04 <HAL_DMA_Init+0x1c4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d03b      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a60      	ldr	r2, [pc, #384]	@ (8003c08 <HAL_DMA_Init+0x1c8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d036      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a5f      	ldr	r2, [pc, #380]	@ (8003c0c <HAL_DMA_Init+0x1cc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d031      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5d      	ldr	r2, [pc, #372]	@ (8003c10 <HAL_DMA_Init+0x1d0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02c      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5c      	ldr	r2, [pc, #368]	@ (8003c14 <HAL_DMA_Init+0x1d4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d027      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5a      	ldr	r2, [pc, #360]	@ (8003c18 <HAL_DMA_Init+0x1d8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a59      	ldr	r2, [pc, #356]	@ (8003c1c <HAL_DMA_Init+0x1dc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a57      	ldr	r2, [pc, #348]	@ (8003c20 <HAL_DMA_Init+0x1e0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a56      	ldr	r2, [pc, #344]	@ (8003c24 <HAL_DMA_Init+0x1e4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a54      	ldr	r2, [pc, #336]	@ (8003c28 <HAL_DMA_Init+0x1e8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a53      	ldr	r2, [pc, #332]	@ (8003c2c <HAL_DMA_Init+0x1ec>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a51      	ldr	r2, [pc, #324]	@ (8003c30 <HAL_DMA_Init+0x1f0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a50      	ldr	r2, [pc, #320]	@ (8003c34 <HAL_DMA_Init+0x1f4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_DMA_Init+0xbc>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_DMA_Init+0xbe>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 813c 	beq.w	8003d7c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a37      	ldr	r2, [pc, #220]	@ (8003bf8 <HAL_DMA_Init+0x1b8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d04a      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a36      	ldr	r2, [pc, #216]	@ (8003bfc <HAL_DMA_Init+0x1bc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d045      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a34      	ldr	r2, [pc, #208]	@ (8003c00 <HAL_DMA_Init+0x1c0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d040      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a33      	ldr	r2, [pc, #204]	@ (8003c04 <HAL_DMA_Init+0x1c4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d03b      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a31      	ldr	r2, [pc, #196]	@ (8003c08 <HAL_DMA_Init+0x1c8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d036      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a30      	ldr	r2, [pc, #192]	@ (8003c0c <HAL_DMA_Init+0x1cc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d031      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2e      	ldr	r2, [pc, #184]	@ (8003c10 <HAL_DMA_Init+0x1d0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d02c      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c14 <HAL_DMA_Init+0x1d4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d027      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	@ (8003c18 <HAL_DMA_Init+0x1d8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d022      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2a      	ldr	r2, [pc, #168]	@ (8003c1c <HAL_DMA_Init+0x1dc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d01d      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a28      	ldr	r2, [pc, #160]	@ (8003c20 <HAL_DMA_Init+0x1e0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d018      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a27      	ldr	r2, [pc, #156]	@ (8003c24 <HAL_DMA_Init+0x1e4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a25      	ldr	r2, [pc, #148]	@ (8003c28 <HAL_DMA_Init+0x1e8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a24      	ldr	r2, [pc, #144]	@ (8003c2c <HAL_DMA_Init+0x1ec>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a22      	ldr	r2, [pc, #136]	@ (8003c30 <HAL_DMA_Init+0x1f0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a21      	ldr	r2, [pc, #132]	@ (8003c34 <HAL_DMA_Init+0x1f4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d108      	bne.n	8003bc6 <HAL_DMA_Init+0x186>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e007      	b.n	8003bd6 <HAL_DMA_Init+0x196>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bd6:	e02f      	b.n	8003c38 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bd8:	f7fe fd12 	bl	8002600 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d928      	bls.n	8003c38 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e2ad      	b.n	8004154 <HAL_DMA_Init+0x714>
 8003bf8:	40020010 	.word	0x40020010
 8003bfc:	40020028 	.word	0x40020028
 8003c00:	40020040 	.word	0x40020040
 8003c04:	40020058 	.word	0x40020058
 8003c08:	40020070 	.word	0x40020070
 8003c0c:	40020088 	.word	0x40020088
 8003c10:	400200a0 	.word	0x400200a0
 8003c14:	400200b8 	.word	0x400200b8
 8003c18:	40020410 	.word	0x40020410
 8003c1c:	40020428 	.word	0x40020428
 8003c20:	40020440 	.word	0x40020440
 8003c24:	40020458 	.word	0x40020458
 8003c28:	40020470 	.word	0x40020470
 8003c2c:	40020488 	.word	0x40020488
 8003c30:	400204a0 	.word	0x400204a0
 8003c34:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1c8      	bne.n	8003bd8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4b73      	ldr	r3, [pc, #460]	@ (8003e20 <HAL_DMA_Init+0x3e0>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c76:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d107      	bne.n	8003c9c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	4313      	orrs	r3, r2
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b28      	cmp	r3, #40	@ 0x28
 8003ca2:	d903      	bls.n	8003cac <HAL_DMA_Init+0x26c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003caa:	d91f      	bls.n	8003cec <HAL_DMA_Init+0x2ac>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cb2:	d903      	bls.n	8003cbc <HAL_DMA_Init+0x27c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b42      	cmp	r3, #66	@ 0x42
 8003cba:	d917      	bls.n	8003cec <HAL_DMA_Init+0x2ac>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b46      	cmp	r3, #70	@ 0x46
 8003cc2:	d903      	bls.n	8003ccc <HAL_DMA_Init+0x28c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b48      	cmp	r3, #72	@ 0x48
 8003cca:	d90f      	bls.n	8003cec <HAL_DMA_Init+0x2ac>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b4e      	cmp	r3, #78	@ 0x4e
 8003cd2:	d903      	bls.n	8003cdc <HAL_DMA_Init+0x29c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b52      	cmp	r3, #82	@ 0x52
 8003cda:	d907      	bls.n	8003cec <HAL_DMA_Init+0x2ac>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b73      	cmp	r3, #115	@ 0x73
 8003ce2:	d905      	bls.n	8003cf0 <HAL_DMA_Init+0x2b0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b77      	cmp	r3, #119	@ 0x77
 8003cea:	d801      	bhi.n	8003cf0 <HAL_DMA_Init+0x2b0>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_DMA_Init+0x2b2>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cfc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 0307 	bic.w	r3, r3, #7
 8003d14:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d117      	bne.n	8003d58 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00e      	beq.n	8003d58 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f001 fc68 	bl	8005610 <DMA_CheckFifoParam>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2240      	movs	r2, #64	@ 0x40
 8003d4a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e1fd      	b.n	8004154 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f001 fba3 	bl	80054ac <DMA_CalcBaseAndBitshift>
 8003d66:	4603      	mov	r3, r0
 8003d68:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	223f      	movs	r2, #63	@ 0x3f
 8003d74:	409a      	lsls	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	e0fd      	b.n	8003f78 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a28      	ldr	r2, [pc, #160]	@ (8003e24 <HAL_DMA_Init+0x3e4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d04a      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a27      	ldr	r2, [pc, #156]	@ (8003e28 <HAL_DMA_Init+0x3e8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d045      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a25      	ldr	r2, [pc, #148]	@ (8003e2c <HAL_DMA_Init+0x3ec>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d040      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a24      	ldr	r2, [pc, #144]	@ (8003e30 <HAL_DMA_Init+0x3f0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d03b      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a22      	ldr	r2, [pc, #136]	@ (8003e34 <HAL_DMA_Init+0x3f4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d036      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a21      	ldr	r2, [pc, #132]	@ (8003e38 <HAL_DMA_Init+0x3f8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d031      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e3c <HAL_DMA_Init+0x3fc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d02c      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e40 <HAL_DMA_Init+0x400>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d027      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e44 <HAL_DMA_Init+0x404>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d022      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	@ (8003e48 <HAL_DMA_Init+0x408>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d01d      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a19      	ldr	r2, [pc, #100]	@ (8003e4c <HAL_DMA_Init+0x40c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d018      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a18      	ldr	r2, [pc, #96]	@ (8003e50 <HAL_DMA_Init+0x410>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a16      	ldr	r2, [pc, #88]	@ (8003e54 <HAL_DMA_Init+0x414>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00e      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a15      	ldr	r2, [pc, #84]	@ (8003e58 <HAL_DMA_Init+0x418>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d009      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a13      	ldr	r2, [pc, #76]	@ (8003e5c <HAL_DMA_Init+0x41c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <HAL_DMA_Init+0x3dc>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a12      	ldr	r2, [pc, #72]	@ (8003e60 <HAL_DMA_Init+0x420>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d123      	bne.n	8003e64 <HAL_DMA_Init+0x424>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e022      	b.n	8003e66 <HAL_DMA_Init+0x426>
 8003e20:	fe10803f 	.word	0xfe10803f
 8003e24:	48022c08 	.word	0x48022c08
 8003e28:	48022c1c 	.word	0x48022c1c
 8003e2c:	48022c30 	.word	0x48022c30
 8003e30:	48022c44 	.word	0x48022c44
 8003e34:	48022c58 	.word	0x48022c58
 8003e38:	48022c6c 	.word	0x48022c6c
 8003e3c:	48022c80 	.word	0x48022c80
 8003e40:	48022c94 	.word	0x48022c94
 8003e44:	58025408 	.word	0x58025408
 8003e48:	5802541c 	.word	0x5802541c
 8003e4c:	58025430 	.word	0x58025430
 8003e50:	58025444 	.word	0x58025444
 8003e54:	58025458 	.word	0x58025458
 8003e58:	5802546c 	.word	0x5802546c
 8003e5c:	58025480 	.word	0x58025480
 8003e60:	58025494 	.word	0x58025494
 8003e64:	2300      	movs	r3, #0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d07d      	beq.n	8003f66 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7f      	ldr	r2, [pc, #508]	@ (800406c <HAL_DMA_Init+0x62c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d021      	beq.n	8003eb8 <HAL_DMA_Init+0x478>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7d      	ldr	r2, [pc, #500]	@ (8004070 <HAL_DMA_Init+0x630>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01c      	beq.n	8003eb8 <HAL_DMA_Init+0x478>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7c      	ldr	r2, [pc, #496]	@ (8004074 <HAL_DMA_Init+0x634>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d017      	beq.n	8003eb8 <HAL_DMA_Init+0x478>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a7a      	ldr	r2, [pc, #488]	@ (8004078 <HAL_DMA_Init+0x638>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d012      	beq.n	8003eb8 <HAL_DMA_Init+0x478>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a79      	ldr	r2, [pc, #484]	@ (800407c <HAL_DMA_Init+0x63c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_DMA_Init+0x478>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a77      	ldr	r2, [pc, #476]	@ (8004080 <HAL_DMA_Init+0x640>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d008      	beq.n	8003eb8 <HAL_DMA_Init+0x478>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a76      	ldr	r2, [pc, #472]	@ (8004084 <HAL_DMA_Init+0x644>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <HAL_DMA_Init+0x478>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a74      	ldr	r2, [pc, #464]	@ (8004088 <HAL_DMA_Init+0x648>)
 8003eb6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800408c <HAL_DMA_Init+0x64c>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d008      	beq.n	8003ef2 <HAL_DMA_Init+0x4b2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b80      	cmp	r3, #128	@ 0x80
 8003ee6:	d102      	bne.n	8003eee <HAL_DMA_Init+0x4ae>
 8003ee8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003eec:	e002      	b.n	8003ef4 <HAL_DMA_Init+0x4b4>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_DMA_Init+0x4b4>
 8003ef2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68d2      	ldr	r2, [r2, #12]
 8003ef8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003efa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f02:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f0a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f12:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f1a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f22:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b55      	ldr	r3, [pc, #340]	@ (8004090 <HAL_DMA_Init+0x650>)
 8003f3a:	4413      	add	r3, r2
 8003f3c:	4a55      	ldr	r2, [pc, #340]	@ (8004094 <HAL_DMA_Init+0x654>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	009a      	lsls	r2, r3, #2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f001 faae 	bl	80054ac <DMA_CalcBaseAndBitshift>
 8003f50:	4603      	mov	r3, r0
 8003f52:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	e008      	b.n	8003f78 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2240      	movs	r2, #64	@ 0x40
 8003f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0ed      	b.n	8004154 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a46      	ldr	r2, [pc, #280]	@ (8004098 <HAL_DMA_Init+0x658>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d072      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a45      	ldr	r2, [pc, #276]	@ (800409c <HAL_DMA_Init+0x65c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d06d      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a43      	ldr	r2, [pc, #268]	@ (80040a0 <HAL_DMA_Init+0x660>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d068      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a42      	ldr	r2, [pc, #264]	@ (80040a4 <HAL_DMA_Init+0x664>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d063      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a40      	ldr	r2, [pc, #256]	@ (80040a8 <HAL_DMA_Init+0x668>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d05e      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a3f      	ldr	r2, [pc, #252]	@ (80040ac <HAL_DMA_Init+0x66c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d059      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a3d      	ldr	r2, [pc, #244]	@ (80040b0 <HAL_DMA_Init+0x670>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d054      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a3c      	ldr	r2, [pc, #240]	@ (80040b4 <HAL_DMA_Init+0x674>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d04f      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a3a      	ldr	r2, [pc, #232]	@ (80040b8 <HAL_DMA_Init+0x678>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d04a      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a39      	ldr	r2, [pc, #228]	@ (80040bc <HAL_DMA_Init+0x67c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d045      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a37      	ldr	r2, [pc, #220]	@ (80040c0 <HAL_DMA_Init+0x680>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d040      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a36      	ldr	r2, [pc, #216]	@ (80040c4 <HAL_DMA_Init+0x684>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d03b      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a34      	ldr	r2, [pc, #208]	@ (80040c8 <HAL_DMA_Init+0x688>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d036      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a33      	ldr	r2, [pc, #204]	@ (80040cc <HAL_DMA_Init+0x68c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d031      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a31      	ldr	r2, [pc, #196]	@ (80040d0 <HAL_DMA_Init+0x690>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d02c      	beq.n	8004068 <HAL_DMA_Init+0x628>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a30      	ldr	r2, [pc, #192]	@ (80040d4 <HAL_DMA_Init+0x694>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d027      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a13      	ldr	r2, [pc, #76]	@ (800406c <HAL_DMA_Init+0x62c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d022      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <HAL_DMA_Init+0x630>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d01d      	beq.n	8004068 <HAL_DMA_Init+0x628>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a10      	ldr	r2, [pc, #64]	@ (8004074 <HAL_DMA_Init+0x634>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d018      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a0f      	ldr	r2, [pc, #60]	@ (8004078 <HAL_DMA_Init+0x638>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d013      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0d      	ldr	r2, [pc, #52]	@ (800407c <HAL_DMA_Init+0x63c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00e      	beq.n	8004068 <HAL_DMA_Init+0x628>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a0c      	ldr	r2, [pc, #48]	@ (8004080 <HAL_DMA_Init+0x640>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d009      	beq.n	8004068 <HAL_DMA_Init+0x628>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0a      	ldr	r2, [pc, #40]	@ (8004084 <HAL_DMA_Init+0x644>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_DMA_Init+0x628>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <HAL_DMA_Init+0x648>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d137      	bne.n	80040d8 <HAL_DMA_Init+0x698>
 8004068:	2301      	movs	r3, #1
 800406a:	e036      	b.n	80040da <HAL_DMA_Init+0x69a>
 800406c:	58025408 	.word	0x58025408
 8004070:	5802541c 	.word	0x5802541c
 8004074:	58025430 	.word	0x58025430
 8004078:	58025444 	.word	0x58025444
 800407c:	58025458 	.word	0x58025458
 8004080:	5802546c 	.word	0x5802546c
 8004084:	58025480 	.word	0x58025480
 8004088:	58025494 	.word	0x58025494
 800408c:	fffe000f 	.word	0xfffe000f
 8004090:	a7fdabf8 	.word	0xa7fdabf8
 8004094:	cccccccd 	.word	0xcccccccd
 8004098:	40020010 	.word	0x40020010
 800409c:	40020028 	.word	0x40020028
 80040a0:	40020040 	.word	0x40020040
 80040a4:	40020058 	.word	0x40020058
 80040a8:	40020070 	.word	0x40020070
 80040ac:	40020088 	.word	0x40020088
 80040b0:	400200a0 	.word	0x400200a0
 80040b4:	400200b8 	.word	0x400200b8
 80040b8:	40020410 	.word	0x40020410
 80040bc:	40020428 	.word	0x40020428
 80040c0:	40020440 	.word	0x40020440
 80040c4:	40020458 	.word	0x40020458
 80040c8:	40020470 	.word	0x40020470
 80040cc:	40020488 	.word	0x40020488
 80040d0:	400204a0 	.word	0x400204a0
 80040d4:	400204b8 	.word	0x400204b8
 80040d8:	2300      	movs	r3, #0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d032      	beq.n	8004144 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f001 fb12 	bl	8005708 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b80      	cmp	r3, #128	@ 0x80
 80040ea:	d102      	bne.n	80040f2 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004106:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d010      	beq.n	8004132 <HAL_DMA_Init+0x6f2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d80c      	bhi.n	8004132 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f001 fb8f 	bl	800583c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	e008      	b.n	8004144 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e237      	b.n	80045de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d004      	beq.n	8004184 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2280      	movs	r2, #128	@ 0x80
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e22c      	b.n	80045de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a5c      	ldr	r2, [pc, #368]	@ (80042fc <HAL_DMA_Abort_IT+0x1a0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d04a      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a5b      	ldr	r2, [pc, #364]	@ (8004300 <HAL_DMA_Abort_IT+0x1a4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d045      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a59      	ldr	r2, [pc, #356]	@ (8004304 <HAL_DMA_Abort_IT+0x1a8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d040      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a58      	ldr	r2, [pc, #352]	@ (8004308 <HAL_DMA_Abort_IT+0x1ac>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d03b      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a56      	ldr	r2, [pc, #344]	@ (800430c <HAL_DMA_Abort_IT+0x1b0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d036      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a55      	ldr	r2, [pc, #340]	@ (8004310 <HAL_DMA_Abort_IT+0x1b4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d031      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a53      	ldr	r2, [pc, #332]	@ (8004314 <HAL_DMA_Abort_IT+0x1b8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02c      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a52      	ldr	r2, [pc, #328]	@ (8004318 <HAL_DMA_Abort_IT+0x1bc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d027      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a50      	ldr	r2, [pc, #320]	@ (800431c <HAL_DMA_Abort_IT+0x1c0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d022      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a4f      	ldr	r2, [pc, #316]	@ (8004320 <HAL_DMA_Abort_IT+0x1c4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d01d      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a4d      	ldr	r2, [pc, #308]	@ (8004324 <HAL_DMA_Abort_IT+0x1c8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d018      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a4c      	ldr	r2, [pc, #304]	@ (8004328 <HAL_DMA_Abort_IT+0x1cc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d013      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a4a      	ldr	r2, [pc, #296]	@ (800432c <HAL_DMA_Abort_IT+0x1d0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00e      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a49      	ldr	r2, [pc, #292]	@ (8004330 <HAL_DMA_Abort_IT+0x1d4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d009      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a47      	ldr	r2, [pc, #284]	@ (8004334 <HAL_DMA_Abort_IT+0x1d8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_DMA_Abort_IT+0xc8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a46      	ldr	r2, [pc, #280]	@ (8004338 <HAL_DMA_Abort_IT+0x1dc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d101      	bne.n	8004228 <HAL_DMA_Abort_IT+0xcc>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_DMA_Abort_IT+0xce>
 8004228:	2300      	movs	r3, #0
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8086 	beq.w	800433c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2204      	movs	r2, #4
 8004234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2f      	ldr	r2, [pc, #188]	@ (80042fc <HAL_DMA_Abort_IT+0x1a0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d04a      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2e      	ldr	r2, [pc, #184]	@ (8004300 <HAL_DMA_Abort_IT+0x1a4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d045      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2c      	ldr	r2, [pc, #176]	@ (8004304 <HAL_DMA_Abort_IT+0x1a8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d040      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2b      	ldr	r2, [pc, #172]	@ (8004308 <HAL_DMA_Abort_IT+0x1ac>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d03b      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a29      	ldr	r2, [pc, #164]	@ (800430c <HAL_DMA_Abort_IT+0x1b0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d036      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a28      	ldr	r2, [pc, #160]	@ (8004310 <HAL_DMA_Abort_IT+0x1b4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d031      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a26      	ldr	r2, [pc, #152]	@ (8004314 <HAL_DMA_Abort_IT+0x1b8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d02c      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a25      	ldr	r2, [pc, #148]	@ (8004318 <HAL_DMA_Abort_IT+0x1bc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d027      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a23      	ldr	r2, [pc, #140]	@ (800431c <HAL_DMA_Abort_IT+0x1c0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d022      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a22      	ldr	r2, [pc, #136]	@ (8004320 <HAL_DMA_Abort_IT+0x1c4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d01d      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a20      	ldr	r2, [pc, #128]	@ (8004324 <HAL_DMA_Abort_IT+0x1c8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d018      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004328 <HAL_DMA_Abort_IT+0x1cc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <HAL_DMA_Abort_IT+0x1d0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1c      	ldr	r2, [pc, #112]	@ (8004330 <HAL_DMA_Abort_IT+0x1d4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d009      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004334 <HAL_DMA_Abort_IT+0x1d8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x17c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a19      	ldr	r2, [pc, #100]	@ (8004338 <HAL_DMA_Abort_IT+0x1dc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d108      	bne.n	80042ea <HAL_DMA_Abort_IT+0x18e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e178      	b.n	80045dc <HAL_DMA_Abort_IT+0x480>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e16f      	b.n	80045dc <HAL_DMA_Abort_IT+0x480>
 80042fc:	40020010 	.word	0x40020010
 8004300:	40020028 	.word	0x40020028
 8004304:	40020040 	.word	0x40020040
 8004308:	40020058 	.word	0x40020058
 800430c:	40020070 	.word	0x40020070
 8004310:	40020088 	.word	0x40020088
 8004314:	400200a0 	.word	0x400200a0
 8004318:	400200b8 	.word	0x400200b8
 800431c:	40020410 	.word	0x40020410
 8004320:	40020428 	.word	0x40020428
 8004324:	40020440 	.word	0x40020440
 8004328:	40020458 	.word	0x40020458
 800432c:	40020470 	.word	0x40020470
 8004330:	40020488 	.word	0x40020488
 8004334:	400204a0 	.word	0x400204a0
 8004338:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 020e 	bic.w	r2, r2, #14
 800434a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6c      	ldr	r2, [pc, #432]	@ (8004504 <HAL_DMA_Abort_IT+0x3a8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d04a      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6b      	ldr	r2, [pc, #428]	@ (8004508 <HAL_DMA_Abort_IT+0x3ac>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d045      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a69      	ldr	r2, [pc, #420]	@ (800450c <HAL_DMA_Abort_IT+0x3b0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d040      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a68      	ldr	r2, [pc, #416]	@ (8004510 <HAL_DMA_Abort_IT+0x3b4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d03b      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a66      	ldr	r2, [pc, #408]	@ (8004514 <HAL_DMA_Abort_IT+0x3b8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d036      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a65      	ldr	r2, [pc, #404]	@ (8004518 <HAL_DMA_Abort_IT+0x3bc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d031      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a63      	ldr	r2, [pc, #396]	@ (800451c <HAL_DMA_Abort_IT+0x3c0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d02c      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a62      	ldr	r2, [pc, #392]	@ (8004520 <HAL_DMA_Abort_IT+0x3c4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d027      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a60      	ldr	r2, [pc, #384]	@ (8004524 <HAL_DMA_Abort_IT+0x3c8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d022      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a5f      	ldr	r2, [pc, #380]	@ (8004528 <HAL_DMA_Abort_IT+0x3cc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d01d      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a5d      	ldr	r2, [pc, #372]	@ (800452c <HAL_DMA_Abort_IT+0x3d0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d018      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a5c      	ldr	r2, [pc, #368]	@ (8004530 <HAL_DMA_Abort_IT+0x3d4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d013      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004534 <HAL_DMA_Abort_IT+0x3d8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00e      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a59      	ldr	r2, [pc, #356]	@ (8004538 <HAL_DMA_Abort_IT+0x3dc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a57      	ldr	r2, [pc, #348]	@ (800453c <HAL_DMA_Abort_IT+0x3e0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_DMA_Abort_IT+0x290>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a56      	ldr	r2, [pc, #344]	@ (8004540 <HAL_DMA_Abort_IT+0x3e4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d108      	bne.n	80043fe <HAL_DMA_Abort_IT+0x2a2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e007      	b.n	800440e <HAL_DMA_Abort_IT+0x2b2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a3c      	ldr	r2, [pc, #240]	@ (8004504 <HAL_DMA_Abort_IT+0x3a8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d072      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3a      	ldr	r2, [pc, #232]	@ (8004508 <HAL_DMA_Abort_IT+0x3ac>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d06d      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a39      	ldr	r2, [pc, #228]	@ (800450c <HAL_DMA_Abort_IT+0x3b0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d068      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a37      	ldr	r2, [pc, #220]	@ (8004510 <HAL_DMA_Abort_IT+0x3b4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d063      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a36      	ldr	r2, [pc, #216]	@ (8004514 <HAL_DMA_Abort_IT+0x3b8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d05e      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a34      	ldr	r2, [pc, #208]	@ (8004518 <HAL_DMA_Abort_IT+0x3bc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d059      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a33      	ldr	r2, [pc, #204]	@ (800451c <HAL_DMA_Abort_IT+0x3c0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d054      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a31      	ldr	r2, [pc, #196]	@ (8004520 <HAL_DMA_Abort_IT+0x3c4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d04f      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a30      	ldr	r2, [pc, #192]	@ (8004524 <HAL_DMA_Abort_IT+0x3c8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d04a      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2e      	ldr	r2, [pc, #184]	@ (8004528 <HAL_DMA_Abort_IT+0x3cc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d045      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2d      	ldr	r2, [pc, #180]	@ (800452c <HAL_DMA_Abort_IT+0x3d0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d040      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2b      	ldr	r2, [pc, #172]	@ (8004530 <HAL_DMA_Abort_IT+0x3d4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d03b      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2a      	ldr	r2, [pc, #168]	@ (8004534 <HAL_DMA_Abort_IT+0x3d8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d036      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a28      	ldr	r2, [pc, #160]	@ (8004538 <HAL_DMA_Abort_IT+0x3dc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d031      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a27      	ldr	r2, [pc, #156]	@ (800453c <HAL_DMA_Abort_IT+0x3e0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d02c      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a25      	ldr	r2, [pc, #148]	@ (8004540 <HAL_DMA_Abort_IT+0x3e4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d027      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a24      	ldr	r2, [pc, #144]	@ (8004544 <HAL_DMA_Abort_IT+0x3e8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d022      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a22      	ldr	r2, [pc, #136]	@ (8004548 <HAL_DMA_Abort_IT+0x3ec>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d01d      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a21      	ldr	r2, [pc, #132]	@ (800454c <HAL_DMA_Abort_IT+0x3f0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d018      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004550 <HAL_DMA_Abort_IT+0x3f4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1e      	ldr	r2, [pc, #120]	@ (8004554 <HAL_DMA_Abort_IT+0x3f8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00e      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004558 <HAL_DMA_Abort_IT+0x3fc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d009      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1b      	ldr	r2, [pc, #108]	@ (800455c <HAL_DMA_Abort_IT+0x400>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <HAL_DMA_Abort_IT+0x3a2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <HAL_DMA_Abort_IT+0x404>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d132      	bne.n	8004564 <HAL_DMA_Abort_IT+0x408>
 80044fe:	2301      	movs	r3, #1
 8004500:	e031      	b.n	8004566 <HAL_DMA_Abort_IT+0x40a>
 8004502:	bf00      	nop
 8004504:	40020010 	.word	0x40020010
 8004508:	40020028 	.word	0x40020028
 800450c:	40020040 	.word	0x40020040
 8004510:	40020058 	.word	0x40020058
 8004514:	40020070 	.word	0x40020070
 8004518:	40020088 	.word	0x40020088
 800451c:	400200a0 	.word	0x400200a0
 8004520:	400200b8 	.word	0x400200b8
 8004524:	40020410 	.word	0x40020410
 8004528:	40020428 	.word	0x40020428
 800452c:	40020440 	.word	0x40020440
 8004530:	40020458 	.word	0x40020458
 8004534:	40020470 	.word	0x40020470
 8004538:	40020488 	.word	0x40020488
 800453c:	400204a0 	.word	0x400204a0
 8004540:	400204b8 	.word	0x400204b8
 8004544:	58025408 	.word	0x58025408
 8004548:	5802541c 	.word	0x5802541c
 800454c:	58025430 	.word	0x58025430
 8004550:	58025444 	.word	0x58025444
 8004554:	58025458 	.word	0x58025458
 8004558:	5802546c 	.word	0x5802546c
 800455c:	58025480 	.word	0x58025480
 8004560:	58025494 	.word	0x58025494
 8004564:	2300      	movs	r3, #0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d028      	beq.n	80045bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004574:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004578:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2201      	movs	r2, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004598:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00c      	beq.n	80045bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop

080045e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	@ 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045f4:	4b67      	ldr	r3, [pc, #412]	@ (8004794 <HAL_DMA_IRQHandler+0x1ac>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a67      	ldr	r2, [pc, #412]	@ (8004798 <HAL_DMA_IRQHandler+0x1b0>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	0a9b      	lsrs	r3, r3, #10
 8004600:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a5f      	ldr	r2, [pc, #380]	@ (800479c <HAL_DMA_IRQHandler+0x1b4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d04a      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a5d      	ldr	r2, [pc, #372]	@ (80047a0 <HAL_DMA_IRQHandler+0x1b8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d045      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a5c      	ldr	r2, [pc, #368]	@ (80047a4 <HAL_DMA_IRQHandler+0x1bc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d040      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a5a      	ldr	r2, [pc, #360]	@ (80047a8 <HAL_DMA_IRQHandler+0x1c0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d03b      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a59      	ldr	r2, [pc, #356]	@ (80047ac <HAL_DMA_IRQHandler+0x1c4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d036      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a57      	ldr	r2, [pc, #348]	@ (80047b0 <HAL_DMA_IRQHandler+0x1c8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d031      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a56      	ldr	r2, [pc, #344]	@ (80047b4 <HAL_DMA_IRQHandler+0x1cc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d02c      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a54      	ldr	r2, [pc, #336]	@ (80047b8 <HAL_DMA_IRQHandler+0x1d0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d027      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a53      	ldr	r2, [pc, #332]	@ (80047bc <HAL_DMA_IRQHandler+0x1d4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d022      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a51      	ldr	r2, [pc, #324]	@ (80047c0 <HAL_DMA_IRQHandler+0x1d8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01d      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a50      	ldr	r2, [pc, #320]	@ (80047c4 <HAL_DMA_IRQHandler+0x1dc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d018      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a4e      	ldr	r2, [pc, #312]	@ (80047c8 <HAL_DMA_IRQHandler+0x1e0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a4d      	ldr	r2, [pc, #308]	@ (80047cc <HAL_DMA_IRQHandler+0x1e4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00e      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a4b      	ldr	r2, [pc, #300]	@ (80047d0 <HAL_DMA_IRQHandler+0x1e8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d009      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a4a      	ldr	r2, [pc, #296]	@ (80047d4 <HAL_DMA_IRQHandler+0x1ec>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d004      	beq.n	80046ba <HAL_DMA_IRQHandler+0xd2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a48      	ldr	r2, [pc, #288]	@ (80047d8 <HAL_DMA_IRQHandler+0x1f0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d101      	bne.n	80046be <HAL_DMA_IRQHandler+0xd6>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_DMA_IRQHandler+0xd8>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 842b 	beq.w	8004f1c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2208      	movs	r2, #8
 80046d0:	409a      	lsls	r2, r3
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80a2 	beq.w	8004820 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2e      	ldr	r2, [pc, #184]	@ (800479c <HAL_DMA_IRQHandler+0x1b4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d04a      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2d      	ldr	r2, [pc, #180]	@ (80047a0 <HAL_DMA_IRQHandler+0x1b8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d045      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2b      	ldr	r2, [pc, #172]	@ (80047a4 <HAL_DMA_IRQHandler+0x1bc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d040      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a2a      	ldr	r2, [pc, #168]	@ (80047a8 <HAL_DMA_IRQHandler+0x1c0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d03b      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a28      	ldr	r2, [pc, #160]	@ (80047ac <HAL_DMA_IRQHandler+0x1c4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d036      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a27      	ldr	r2, [pc, #156]	@ (80047b0 <HAL_DMA_IRQHandler+0x1c8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d031      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a25      	ldr	r2, [pc, #148]	@ (80047b4 <HAL_DMA_IRQHandler+0x1cc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02c      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a24      	ldr	r2, [pc, #144]	@ (80047b8 <HAL_DMA_IRQHandler+0x1d0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d027      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a22      	ldr	r2, [pc, #136]	@ (80047bc <HAL_DMA_IRQHandler+0x1d4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d022      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a21      	ldr	r2, [pc, #132]	@ (80047c0 <HAL_DMA_IRQHandler+0x1d8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d01d      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1f      	ldr	r2, [pc, #124]	@ (80047c4 <HAL_DMA_IRQHandler+0x1dc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1e      	ldr	r2, [pc, #120]	@ (80047c8 <HAL_DMA_IRQHandler+0x1e0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1c      	ldr	r2, [pc, #112]	@ (80047cc <HAL_DMA_IRQHandler+0x1e4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1b      	ldr	r2, [pc, #108]	@ (80047d0 <HAL_DMA_IRQHandler+0x1e8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a19      	ldr	r2, [pc, #100]	@ (80047d4 <HAL_DMA_IRQHandler+0x1ec>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_DMA_IRQHandler+0x194>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a18      	ldr	r2, [pc, #96]	@ (80047d8 <HAL_DMA_IRQHandler+0x1f0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d12f      	bne.n	80047dc <HAL_DMA_IRQHandler+0x1f4>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e02e      	b.n	80047f0 <HAL_DMA_IRQHandler+0x208>
 8004792:	bf00      	nop
 8004794:	24000000 	.word	0x24000000
 8004798:	1b4e81b5 	.word	0x1b4e81b5
 800479c:	40020010 	.word	0x40020010
 80047a0:	40020028 	.word	0x40020028
 80047a4:	40020040 	.word	0x40020040
 80047a8:	40020058 	.word	0x40020058
 80047ac:	40020070 	.word	0x40020070
 80047b0:	40020088 	.word	0x40020088
 80047b4:	400200a0 	.word	0x400200a0
 80047b8:	400200b8 	.word	0x400200b8
 80047bc:	40020410 	.word	0x40020410
 80047c0:	40020428 	.word	0x40020428
 80047c4:	40020440 	.word	0x40020440
 80047c8:	40020458 	.word	0x40020458
 80047cc:	40020470 	.word	0x40020470
 80047d0:	40020488 	.word	0x40020488
 80047d4:	400204a0 	.word	0x400204a0
 80047d8:	400204b8 	.word	0x400204b8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bf14      	ite	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	2300      	moveq	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d015      	beq.n	8004820 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0204 	bic.w	r2, r2, #4
 8004802:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2208      	movs	r2, #8
 800480e:	409a      	lsls	r2, r3
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004818:	f043 0201 	orr.w	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d06e      	beq.n	8004914 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a69      	ldr	r2, [pc, #420]	@ (80049e0 <HAL_DMA_IRQHandler+0x3f8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d04a      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a67      	ldr	r2, [pc, #412]	@ (80049e4 <HAL_DMA_IRQHandler+0x3fc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d045      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a66      	ldr	r2, [pc, #408]	@ (80049e8 <HAL_DMA_IRQHandler+0x400>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d040      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a64      	ldr	r2, [pc, #400]	@ (80049ec <HAL_DMA_IRQHandler+0x404>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d03b      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a63      	ldr	r2, [pc, #396]	@ (80049f0 <HAL_DMA_IRQHandler+0x408>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d036      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a61      	ldr	r2, [pc, #388]	@ (80049f4 <HAL_DMA_IRQHandler+0x40c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d031      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a60      	ldr	r2, [pc, #384]	@ (80049f8 <HAL_DMA_IRQHandler+0x410>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d02c      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a5e      	ldr	r2, [pc, #376]	@ (80049fc <HAL_DMA_IRQHandler+0x414>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d027      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5d      	ldr	r2, [pc, #372]	@ (8004a00 <HAL_DMA_IRQHandler+0x418>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d022      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a5b      	ldr	r2, [pc, #364]	@ (8004a04 <HAL_DMA_IRQHandler+0x41c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01d      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a5a      	ldr	r2, [pc, #360]	@ (8004a08 <HAL_DMA_IRQHandler+0x420>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d018      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a58      	ldr	r2, [pc, #352]	@ (8004a0c <HAL_DMA_IRQHandler+0x424>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a57      	ldr	r2, [pc, #348]	@ (8004a10 <HAL_DMA_IRQHandler+0x428>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a55      	ldr	r2, [pc, #340]	@ (8004a14 <HAL_DMA_IRQHandler+0x42c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d009      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a54      	ldr	r2, [pc, #336]	@ (8004a18 <HAL_DMA_IRQHandler+0x430>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ee>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a52      	ldr	r2, [pc, #328]	@ (8004a1c <HAL_DMA_IRQHandler+0x434>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10a      	bne.n	80048ec <HAL_DMA_IRQHandler+0x304>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e003      	b.n	80048f4 <HAL_DMA_IRQHandler+0x30c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2300      	movs	r3, #0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00d      	beq.n	8004914 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	2201      	movs	r2, #1
 8004902:	409a      	lsls	r2, r3
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490c:	f043 0202 	orr.w	r2, r3, #2
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	2204      	movs	r2, #4
 800491e:	409a      	lsls	r2, r3
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 808f 	beq.w	8004a48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <HAL_DMA_IRQHandler+0x3f8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d04a      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2a      	ldr	r2, [pc, #168]	@ (80049e4 <HAL_DMA_IRQHandler+0x3fc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d045      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a29      	ldr	r2, [pc, #164]	@ (80049e8 <HAL_DMA_IRQHandler+0x400>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d040      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a27      	ldr	r2, [pc, #156]	@ (80049ec <HAL_DMA_IRQHandler+0x404>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d03b      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a26      	ldr	r2, [pc, #152]	@ (80049f0 <HAL_DMA_IRQHandler+0x408>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d036      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a24      	ldr	r2, [pc, #144]	@ (80049f4 <HAL_DMA_IRQHandler+0x40c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d031      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a23      	ldr	r2, [pc, #140]	@ (80049f8 <HAL_DMA_IRQHandler+0x410>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d02c      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a21      	ldr	r2, [pc, #132]	@ (80049fc <HAL_DMA_IRQHandler+0x414>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d027      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a20      	ldr	r2, [pc, #128]	@ (8004a00 <HAL_DMA_IRQHandler+0x418>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d022      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1e      	ldr	r2, [pc, #120]	@ (8004a04 <HAL_DMA_IRQHandler+0x41c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01d      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1d      	ldr	r2, [pc, #116]	@ (8004a08 <HAL_DMA_IRQHandler+0x420>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d018      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a0c <HAL_DMA_IRQHandler+0x424>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004a10 <HAL_DMA_IRQHandler+0x428>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00e      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a18      	ldr	r2, [pc, #96]	@ (8004a14 <HAL_DMA_IRQHandler+0x42c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d009      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a17      	ldr	r2, [pc, #92]	@ (8004a18 <HAL_DMA_IRQHandler+0x430>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d004      	beq.n	80049ca <HAL_DMA_IRQHandler+0x3e2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a15      	ldr	r2, [pc, #84]	@ (8004a1c <HAL_DMA_IRQHandler+0x434>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d12a      	bne.n	8004a20 <HAL_DMA_IRQHandler+0x438>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e023      	b.n	8004a28 <HAL_DMA_IRQHandler+0x440>
 80049e0:	40020010 	.word	0x40020010
 80049e4:	40020028 	.word	0x40020028
 80049e8:	40020040 	.word	0x40020040
 80049ec:	40020058 	.word	0x40020058
 80049f0:	40020070 	.word	0x40020070
 80049f4:	40020088 	.word	0x40020088
 80049f8:	400200a0 	.word	0x400200a0
 80049fc:	400200b8 	.word	0x400200b8
 8004a00:	40020410 	.word	0x40020410
 8004a04:	40020428 	.word	0x40020428
 8004a08:	40020440 	.word	0x40020440
 8004a0c:	40020458 	.word	0x40020458
 8004a10:	40020470 	.word	0x40020470
 8004a14:	40020488 	.word	0x40020488
 8004a18:	400204a0 	.word	0x400204a0
 8004a1c:	400204b8 	.word	0x400204b8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00d      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	2204      	movs	r2, #4
 8004a36:	409a      	lsls	r2, r3
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a40:	f043 0204 	orr.w	r2, r3, #4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	2210      	movs	r2, #16
 8004a52:	409a      	lsls	r2, r3
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a6 	beq.w	8004baa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a85      	ldr	r2, [pc, #532]	@ (8004c78 <HAL_DMA_IRQHandler+0x690>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d04a      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a83      	ldr	r2, [pc, #524]	@ (8004c7c <HAL_DMA_IRQHandler+0x694>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d045      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a82      	ldr	r2, [pc, #520]	@ (8004c80 <HAL_DMA_IRQHandler+0x698>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d040      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a80      	ldr	r2, [pc, #512]	@ (8004c84 <HAL_DMA_IRQHandler+0x69c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d03b      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a7f      	ldr	r2, [pc, #508]	@ (8004c88 <HAL_DMA_IRQHandler+0x6a0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d036      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a7d      	ldr	r2, [pc, #500]	@ (8004c8c <HAL_DMA_IRQHandler+0x6a4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d031      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c90 <HAL_DMA_IRQHandler+0x6a8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d02c      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a7a      	ldr	r2, [pc, #488]	@ (8004c94 <HAL_DMA_IRQHandler+0x6ac>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d027      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a79      	ldr	r2, [pc, #484]	@ (8004c98 <HAL_DMA_IRQHandler+0x6b0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d022      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a77      	ldr	r2, [pc, #476]	@ (8004c9c <HAL_DMA_IRQHandler+0x6b4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d01d      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a76      	ldr	r2, [pc, #472]	@ (8004ca0 <HAL_DMA_IRQHandler+0x6b8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d018      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a74      	ldr	r2, [pc, #464]	@ (8004ca4 <HAL_DMA_IRQHandler+0x6bc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a73      	ldr	r2, [pc, #460]	@ (8004ca8 <HAL_DMA_IRQHandler+0x6c0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a71      	ldr	r2, [pc, #452]	@ (8004cac <HAL_DMA_IRQHandler+0x6c4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a70      	ldr	r2, [pc, #448]	@ (8004cb0 <HAL_DMA_IRQHandler+0x6c8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_DMA_IRQHandler+0x516>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a6e      	ldr	r2, [pc, #440]	@ (8004cb4 <HAL_DMA_IRQHandler+0x6cc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10a      	bne.n	8004b14 <HAL_DMA_IRQHandler+0x52c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e009      	b.n	8004b28 <HAL_DMA_IRQHandler+0x540>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	bf14      	ite	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	2300      	moveq	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d03e      	beq.n	8004baa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	2210      	movs	r2, #16
 8004b36:	409a      	lsls	r2, r3
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d018      	beq.n	8004b7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d108      	bne.n	8004b6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d024      	beq.n	8004baa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
 8004b68:	e01f      	b.n	8004baa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01b      	beq.n	8004baa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	4798      	blx	r3
 8004b7a:	e016      	b.n	8004baa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0208 	bic.w	r2, r2, #8
 8004b98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 8110 	beq.w	8004de0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c78 <HAL_DMA_IRQHandler+0x690>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d04a      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2b      	ldr	r2, [pc, #172]	@ (8004c7c <HAL_DMA_IRQHandler+0x694>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d045      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a29      	ldr	r2, [pc, #164]	@ (8004c80 <HAL_DMA_IRQHandler+0x698>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d040      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a28      	ldr	r2, [pc, #160]	@ (8004c84 <HAL_DMA_IRQHandler+0x69c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d03b      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a26      	ldr	r2, [pc, #152]	@ (8004c88 <HAL_DMA_IRQHandler+0x6a0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d036      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a25      	ldr	r2, [pc, #148]	@ (8004c8c <HAL_DMA_IRQHandler+0x6a4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d031      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a23      	ldr	r2, [pc, #140]	@ (8004c90 <HAL_DMA_IRQHandler+0x6a8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d02c      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a22      	ldr	r2, [pc, #136]	@ (8004c94 <HAL_DMA_IRQHandler+0x6ac>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d027      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a20      	ldr	r2, [pc, #128]	@ (8004c98 <HAL_DMA_IRQHandler+0x6b0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d022      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c9c <HAL_DMA_IRQHandler+0x6b4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d01d      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <HAL_DMA_IRQHandler+0x6b8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d018      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca4 <HAL_DMA_IRQHandler+0x6bc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca8 <HAL_DMA_IRQHandler+0x6c0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00e      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a19      	ldr	r2, [pc, #100]	@ (8004cac <HAL_DMA_IRQHandler+0x6c4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d009      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a17      	ldr	r2, [pc, #92]	@ (8004cb0 <HAL_DMA_IRQHandler+0x6c8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d004      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x678>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a16      	ldr	r2, [pc, #88]	@ (8004cb4 <HAL_DMA_IRQHandler+0x6cc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d12b      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x6d0>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf14      	ite	ne
 8004c6e:	2301      	movne	r3, #1
 8004c70:	2300      	moveq	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	e02a      	b.n	8004ccc <HAL_DMA_IRQHandler+0x6e4>
 8004c76:	bf00      	nop
 8004c78:	40020010 	.word	0x40020010
 8004c7c:	40020028 	.word	0x40020028
 8004c80:	40020040 	.word	0x40020040
 8004c84:	40020058 	.word	0x40020058
 8004c88:	40020070 	.word	0x40020070
 8004c8c:	40020088 	.word	0x40020088
 8004c90:	400200a0 	.word	0x400200a0
 8004c94:	400200b8 	.word	0x400200b8
 8004c98:	40020410 	.word	0x40020410
 8004c9c:	40020428 	.word	0x40020428
 8004ca0:	40020440 	.word	0x40020440
 8004ca4:	40020458 	.word	0x40020458
 8004ca8:	40020470 	.word	0x40020470
 8004cac:	40020488 	.word	0x40020488
 8004cb0:	400204a0 	.word	0x400204a0
 8004cb4:	400204b8 	.word	0x400204b8
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	bf14      	ite	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	2300      	moveq	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8087 	beq.w	8004de0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	2220      	movs	r2, #32
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d139      	bne.n	8004d62 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0216 	bic.w	r2, r2, #22
 8004cfc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d0c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d103      	bne.n	8004d1e <HAL_DMA_IRQHandler+0x736>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0208 	bic.w	r2, r2, #8
 8004d2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	223f      	movs	r2, #63	@ 0x3f
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8382 	beq.w	800545c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
          }
          return;
 8004d60:	e37c      	b.n	800545c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d018      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d108      	bne.n	8004d90 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d02c      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
 8004d8e:	e027      	b.n	8004de0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d023      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
 8004da0:	e01e      	b.n	8004de0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10f      	bne.n	8004dd0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0210 	bic.w	r2, r2, #16
 8004dbe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 833e 	beq.w	8005466 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8088 	beq.w	8004f08 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a89      	ldr	r2, [pc, #548]	@ (800502c <HAL_DMA_IRQHandler+0xa44>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d04a      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a88      	ldr	r2, [pc, #544]	@ (8005030 <HAL_DMA_IRQHandler+0xa48>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d045      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a86      	ldr	r2, [pc, #536]	@ (8005034 <HAL_DMA_IRQHandler+0xa4c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d040      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a85      	ldr	r2, [pc, #532]	@ (8005038 <HAL_DMA_IRQHandler+0xa50>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d03b      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a83      	ldr	r2, [pc, #524]	@ (800503c <HAL_DMA_IRQHandler+0xa54>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d036      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a82      	ldr	r2, [pc, #520]	@ (8005040 <HAL_DMA_IRQHandler+0xa58>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d031      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a80      	ldr	r2, [pc, #512]	@ (8005044 <HAL_DMA_IRQHandler+0xa5c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02c      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a7f      	ldr	r2, [pc, #508]	@ (8005048 <HAL_DMA_IRQHandler+0xa60>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d027      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a7d      	ldr	r2, [pc, #500]	@ (800504c <HAL_DMA_IRQHandler+0xa64>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8005050 <HAL_DMA_IRQHandler+0xa68>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d01d      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a7a      	ldr	r2, [pc, #488]	@ (8005054 <HAL_DMA_IRQHandler+0xa6c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d018      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a79      	ldr	r2, [pc, #484]	@ (8005058 <HAL_DMA_IRQHandler+0xa70>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a77      	ldr	r2, [pc, #476]	@ (800505c <HAL_DMA_IRQHandler+0xa74>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a76      	ldr	r2, [pc, #472]	@ (8005060 <HAL_DMA_IRQHandler+0xa78>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a74      	ldr	r2, [pc, #464]	@ (8005064 <HAL_DMA_IRQHandler+0xa7c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x8b8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a73      	ldr	r2, [pc, #460]	@ (8005068 <HAL_DMA_IRQHandler+0xa80>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d108      	bne.n	8004eb2 <HAL_DMA_IRQHandler+0x8ca>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e007      	b.n	8004ec2 <HAL_DMA_IRQHandler+0x8da>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0201 	bic.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d307      	bcc.n	8004ede <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f2      	bne.n	8004ec2 <HAL_DMA_IRQHandler+0x8da>
 8004edc:	e000      	b.n	8004ee0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ede:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d004      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004ef6:	e003      	b.n	8004f00 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 82aa 	beq.w	8005466 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
 8004f1a:	e2a4      	b.n	8005466 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a52      	ldr	r2, [pc, #328]	@ (800506c <HAL_DMA_IRQHandler+0xa84>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d04a      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a51      	ldr	r2, [pc, #324]	@ (8005070 <HAL_DMA_IRQHandler+0xa88>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d045      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a4f      	ldr	r2, [pc, #316]	@ (8005074 <HAL_DMA_IRQHandler+0xa8c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d040      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a4e      	ldr	r2, [pc, #312]	@ (8005078 <HAL_DMA_IRQHandler+0xa90>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d03b      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a4c      	ldr	r2, [pc, #304]	@ (800507c <HAL_DMA_IRQHandler+0xa94>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d036      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a4b      	ldr	r2, [pc, #300]	@ (8005080 <HAL_DMA_IRQHandler+0xa98>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d031      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a49      	ldr	r2, [pc, #292]	@ (8005084 <HAL_DMA_IRQHandler+0xa9c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02c      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a48      	ldr	r2, [pc, #288]	@ (8005088 <HAL_DMA_IRQHandler+0xaa0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d027      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a46      	ldr	r2, [pc, #280]	@ (800508c <HAL_DMA_IRQHandler+0xaa4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d022      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a45      	ldr	r2, [pc, #276]	@ (8005090 <HAL_DMA_IRQHandler+0xaa8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d01d      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a43      	ldr	r2, [pc, #268]	@ (8005094 <HAL_DMA_IRQHandler+0xaac>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d018      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a42      	ldr	r2, [pc, #264]	@ (8005098 <HAL_DMA_IRQHandler+0xab0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a40      	ldr	r2, [pc, #256]	@ (800509c <HAL_DMA_IRQHandler+0xab4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00e      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80050a0 <HAL_DMA_IRQHandler+0xab8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a3d      	ldr	r2, [pc, #244]	@ (80050a4 <HAL_DMA_IRQHandler+0xabc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x9d4>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80050a8 <HAL_DMA_IRQHandler+0xac0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d101      	bne.n	8004fc0 <HAL_DMA_IRQHandler+0x9d8>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <HAL_DMA_IRQHandler+0x9da>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 824f 	beq.w	8005466 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2204      	movs	r2, #4
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80dd 	beq.w	80051a0 <HAL_DMA_IRQHandler+0xbb8>
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80d7 	beq.w	80051a0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d059      	beq.n	80050c0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d14a      	bne.n	80050ac <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 8220 	beq.w	8005460 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005028:	e21a      	b.n	8005460 <HAL_DMA_IRQHandler+0xe78>
 800502a:	bf00      	nop
 800502c:	40020010 	.word	0x40020010
 8005030:	40020028 	.word	0x40020028
 8005034:	40020040 	.word	0x40020040
 8005038:	40020058 	.word	0x40020058
 800503c:	40020070 	.word	0x40020070
 8005040:	40020088 	.word	0x40020088
 8005044:	400200a0 	.word	0x400200a0
 8005048:	400200b8 	.word	0x400200b8
 800504c:	40020410 	.word	0x40020410
 8005050:	40020428 	.word	0x40020428
 8005054:	40020440 	.word	0x40020440
 8005058:	40020458 	.word	0x40020458
 800505c:	40020470 	.word	0x40020470
 8005060:	40020488 	.word	0x40020488
 8005064:	400204a0 	.word	0x400204a0
 8005068:	400204b8 	.word	0x400204b8
 800506c:	48022c08 	.word	0x48022c08
 8005070:	48022c1c 	.word	0x48022c1c
 8005074:	48022c30 	.word	0x48022c30
 8005078:	48022c44 	.word	0x48022c44
 800507c:	48022c58 	.word	0x48022c58
 8005080:	48022c6c 	.word	0x48022c6c
 8005084:	48022c80 	.word	0x48022c80
 8005088:	48022c94 	.word	0x48022c94
 800508c:	58025408 	.word	0x58025408
 8005090:	5802541c 	.word	0x5802541c
 8005094:	58025430 	.word	0x58025430
 8005098:	58025444 	.word	0x58025444
 800509c:	58025458 	.word	0x58025458
 80050a0:	5802546c 	.word	0x5802546c
 80050a4:	58025480 	.word	0x58025480
 80050a8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 81d5 	beq.w	8005460 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050be:	e1cf      	b.n	8005460 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d160      	bne.n	800518c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a7f      	ldr	r2, [pc, #508]	@ (80052cc <HAL_DMA_IRQHandler+0xce4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d04a      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a7d      	ldr	r2, [pc, #500]	@ (80052d0 <HAL_DMA_IRQHandler+0xce8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d045      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a7c      	ldr	r2, [pc, #496]	@ (80052d4 <HAL_DMA_IRQHandler+0xcec>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d040      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a7a      	ldr	r2, [pc, #488]	@ (80052d8 <HAL_DMA_IRQHandler+0xcf0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d03b      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a79      	ldr	r2, [pc, #484]	@ (80052dc <HAL_DMA_IRQHandler+0xcf4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d036      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a77      	ldr	r2, [pc, #476]	@ (80052e0 <HAL_DMA_IRQHandler+0xcf8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d031      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a76      	ldr	r2, [pc, #472]	@ (80052e4 <HAL_DMA_IRQHandler+0xcfc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d02c      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a74      	ldr	r2, [pc, #464]	@ (80052e8 <HAL_DMA_IRQHandler+0xd00>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d027      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a73      	ldr	r2, [pc, #460]	@ (80052ec <HAL_DMA_IRQHandler+0xd04>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d022      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a71      	ldr	r2, [pc, #452]	@ (80052f0 <HAL_DMA_IRQHandler+0xd08>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01d      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a70      	ldr	r2, [pc, #448]	@ (80052f4 <HAL_DMA_IRQHandler+0xd0c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d018      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a6e      	ldr	r2, [pc, #440]	@ (80052f8 <HAL_DMA_IRQHandler+0xd10>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a6d      	ldr	r2, [pc, #436]	@ (80052fc <HAL_DMA_IRQHandler+0xd14>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00e      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a6b      	ldr	r2, [pc, #428]	@ (8005300 <HAL_DMA_IRQHandler+0xd18>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d009      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a6a      	ldr	r2, [pc, #424]	@ (8005304 <HAL_DMA_IRQHandler+0xd1c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_DMA_IRQHandler+0xb82>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a68      	ldr	r2, [pc, #416]	@ (8005308 <HAL_DMA_IRQHandler+0xd20>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d108      	bne.n	800517c <HAL_DMA_IRQHandler+0xb94>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0208 	bic.w	r2, r2, #8
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e007      	b.n	800518c <HAL_DMA_IRQHandler+0xba4>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0204 	bic.w	r2, r2, #4
 800518a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8165 	beq.w	8005460 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800519e:	e15f      	b.n	8005460 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2202      	movs	r2, #2
 80051aa:	409a      	lsls	r2, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80c5 	beq.w	8005340 <HAL_DMA_IRQHandler+0xd58>
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80bf 	beq.w	8005340 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2202      	movs	r2, #2
 80051cc:	409a      	lsls	r2, r3
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d018      	beq.n	800520e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 813a 	beq.w	8005464 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051f8:	e134      	b.n	8005464 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8130 	beq.w	8005464 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800520c:	e12a      	b.n	8005464 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 8089 	bne.w	800532c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2b      	ldr	r2, [pc, #172]	@ (80052cc <HAL_DMA_IRQHandler+0xce4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d04a      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a29      	ldr	r2, [pc, #164]	@ (80052d0 <HAL_DMA_IRQHandler+0xce8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d045      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a28      	ldr	r2, [pc, #160]	@ (80052d4 <HAL_DMA_IRQHandler+0xcec>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d040      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a26      	ldr	r2, [pc, #152]	@ (80052d8 <HAL_DMA_IRQHandler+0xcf0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d03b      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a25      	ldr	r2, [pc, #148]	@ (80052dc <HAL_DMA_IRQHandler+0xcf4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d036      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a23      	ldr	r2, [pc, #140]	@ (80052e0 <HAL_DMA_IRQHandler+0xcf8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d031      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a22      	ldr	r2, [pc, #136]	@ (80052e4 <HAL_DMA_IRQHandler+0xcfc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d02c      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a20      	ldr	r2, [pc, #128]	@ (80052e8 <HAL_DMA_IRQHandler+0xd00>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d027      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <HAL_DMA_IRQHandler+0xd04>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d022      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1d      	ldr	r2, [pc, #116]	@ (80052f0 <HAL_DMA_IRQHandler+0xd08>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01d      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1c      	ldr	r2, [pc, #112]	@ (80052f4 <HAL_DMA_IRQHandler+0xd0c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d018      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1a      	ldr	r2, [pc, #104]	@ (80052f8 <HAL_DMA_IRQHandler+0xd10>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d013      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a19      	ldr	r2, [pc, #100]	@ (80052fc <HAL_DMA_IRQHandler+0xd14>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00e      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a17      	ldr	r2, [pc, #92]	@ (8005300 <HAL_DMA_IRQHandler+0xd18>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d009      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a16      	ldr	r2, [pc, #88]	@ (8005304 <HAL_DMA_IRQHandler+0xd1c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d004      	beq.n	80052ba <HAL_DMA_IRQHandler+0xcd2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a14      	ldr	r2, [pc, #80]	@ (8005308 <HAL_DMA_IRQHandler+0xd20>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d128      	bne.n	800530c <HAL_DMA_IRQHandler+0xd24>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0214 	bic.w	r2, r2, #20
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e027      	b.n	800531c <HAL_DMA_IRQHandler+0xd34>
 80052cc:	40020010 	.word	0x40020010
 80052d0:	40020028 	.word	0x40020028
 80052d4:	40020040 	.word	0x40020040
 80052d8:	40020058 	.word	0x40020058
 80052dc:	40020070 	.word	0x40020070
 80052e0:	40020088 	.word	0x40020088
 80052e4:	400200a0 	.word	0x400200a0
 80052e8:	400200b8 	.word	0x400200b8
 80052ec:	40020410 	.word	0x40020410
 80052f0:	40020428 	.word	0x40020428
 80052f4:	40020440 	.word	0x40020440
 80052f8:	40020458 	.word	0x40020458
 80052fc:	40020470 	.word	0x40020470
 8005300:	40020488 	.word	0x40020488
 8005304:	400204a0 	.word	0x400204a0
 8005308:	400204b8 	.word	0x400204b8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 020a 	bic.w	r2, r2, #10
 800531a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8097 	beq.w	8005464 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800533e:	e091      	b.n	8005464 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	2208      	movs	r2, #8
 800534a:	409a      	lsls	r2, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8088 	beq.w	8005466 <HAL_DMA_IRQHandler+0xe7e>
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8082 	beq.w	8005466 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a41      	ldr	r2, [pc, #260]	@ (800546c <HAL_DMA_IRQHandler+0xe84>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d04a      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a3f      	ldr	r2, [pc, #252]	@ (8005470 <HAL_DMA_IRQHandler+0xe88>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d045      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a3e      	ldr	r2, [pc, #248]	@ (8005474 <HAL_DMA_IRQHandler+0xe8c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d040      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a3c      	ldr	r2, [pc, #240]	@ (8005478 <HAL_DMA_IRQHandler+0xe90>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d03b      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a3b      	ldr	r2, [pc, #236]	@ (800547c <HAL_DMA_IRQHandler+0xe94>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d036      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a39      	ldr	r2, [pc, #228]	@ (8005480 <HAL_DMA_IRQHandler+0xe98>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d031      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a38      	ldr	r2, [pc, #224]	@ (8005484 <HAL_DMA_IRQHandler+0xe9c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d02c      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a36      	ldr	r2, [pc, #216]	@ (8005488 <HAL_DMA_IRQHandler+0xea0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d027      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a35      	ldr	r2, [pc, #212]	@ (800548c <HAL_DMA_IRQHandler+0xea4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d022      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a33      	ldr	r2, [pc, #204]	@ (8005490 <HAL_DMA_IRQHandler+0xea8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01d      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a32      	ldr	r2, [pc, #200]	@ (8005494 <HAL_DMA_IRQHandler+0xeac>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d018      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a30      	ldr	r2, [pc, #192]	@ (8005498 <HAL_DMA_IRQHandler+0xeb0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a2f      	ldr	r2, [pc, #188]	@ (800549c <HAL_DMA_IRQHandler+0xeb4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00e      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2d      	ldr	r2, [pc, #180]	@ (80054a0 <HAL_DMA_IRQHandler+0xeb8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2c      	ldr	r2, [pc, #176]	@ (80054a4 <HAL_DMA_IRQHandler+0xebc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe1a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a2a      	ldr	r2, [pc, #168]	@ (80054a8 <HAL_DMA_IRQHandler+0xec0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <HAL_DMA_IRQHandler+0xe2c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 021c 	bic.w	r2, r2, #28
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e007      	b.n	8005424 <HAL_DMA_IRQHandler+0xe3c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 020e 	bic.w	r2, r2, #14
 8005422:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	2201      	movs	r2, #1
 800542e:	409a      	lsls	r2, r3
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	4798      	blx	r3
 800545a:	e004      	b.n	8005466 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800545c:	bf00      	nop
 800545e:	e002      	b.n	8005466 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005460:	bf00      	nop
 8005462:	e000      	b.n	8005466 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005464:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005466:	3728      	adds	r7, #40	@ 0x28
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40020010 	.word	0x40020010
 8005470:	40020028 	.word	0x40020028
 8005474:	40020040 	.word	0x40020040
 8005478:	40020058 	.word	0x40020058
 800547c:	40020070 	.word	0x40020070
 8005480:	40020088 	.word	0x40020088
 8005484:	400200a0 	.word	0x400200a0
 8005488:	400200b8 	.word	0x400200b8
 800548c:	40020410 	.word	0x40020410
 8005490:	40020428 	.word	0x40020428
 8005494:	40020440 	.word	0x40020440
 8005498:	40020458 	.word	0x40020458
 800549c:	40020470 	.word	0x40020470
 80054a0:	40020488 	.word	0x40020488
 80054a4:	400204a0 	.word	0x400204a0
 80054a8:	400204b8 	.word	0x400204b8

080054ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a42      	ldr	r2, [pc, #264]	@ (80055c4 <DMA_CalcBaseAndBitshift+0x118>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d04a      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a41      	ldr	r2, [pc, #260]	@ (80055c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d045      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3f      	ldr	r2, [pc, #252]	@ (80055cc <DMA_CalcBaseAndBitshift+0x120>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d040      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	@ (80055d0 <DMA_CalcBaseAndBitshift+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d03b      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a3c      	ldr	r2, [pc, #240]	@ (80055d4 <DMA_CalcBaseAndBitshift+0x128>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d036      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a3b      	ldr	r2, [pc, #236]	@ (80055d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d031      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a39      	ldr	r2, [pc, #228]	@ (80055dc <DMA_CalcBaseAndBitshift+0x130>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d02c      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a38      	ldr	r2, [pc, #224]	@ (80055e0 <DMA_CalcBaseAndBitshift+0x134>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d027      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a36      	ldr	r2, [pc, #216]	@ (80055e4 <DMA_CalcBaseAndBitshift+0x138>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d022      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a35      	ldr	r2, [pc, #212]	@ (80055e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d01d      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a33      	ldr	r2, [pc, #204]	@ (80055ec <DMA_CalcBaseAndBitshift+0x140>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d018      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a32      	ldr	r2, [pc, #200]	@ (80055f0 <DMA_CalcBaseAndBitshift+0x144>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a30      	ldr	r2, [pc, #192]	@ (80055f4 <DMA_CalcBaseAndBitshift+0x148>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00e      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a2f      	ldr	r2, [pc, #188]	@ (80055f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d009      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2d      	ldr	r2, [pc, #180]	@ (80055fc <DMA_CalcBaseAndBitshift+0x150>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a2c      	ldr	r2, [pc, #176]	@ (8005600 <DMA_CalcBaseAndBitshift+0x154>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d101      	bne.n	8005558 <DMA_CalcBaseAndBitshift+0xac>
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <DMA_CalcBaseAndBitshift+0xae>
 8005558:	2300      	movs	r3, #0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d024      	beq.n	80055a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	3b10      	subs	r3, #16
 8005566:	4a27      	ldr	r2, [pc, #156]	@ (8005604 <DMA_CalcBaseAndBitshift+0x158>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	4a24      	ldr	r2, [pc, #144]	@ (8005608 <DMA_CalcBaseAndBitshift+0x15c>)
 8005578:	5cd3      	ldrb	r3, [r2, r3]
 800557a:	461a      	mov	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b03      	cmp	r3, #3
 8005584:	d908      	bls.n	8005598 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	4b1f      	ldr	r3, [pc, #124]	@ (800560c <DMA_CalcBaseAndBitshift+0x160>)
 800558e:	4013      	ands	r3, r2
 8005590:	1d1a      	adds	r2, r3, #4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	659a      	str	r2, [r3, #88]	@ 0x58
 8005596:	e00d      	b.n	80055b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	4b1b      	ldr	r3, [pc, #108]	@ (800560c <DMA_CalcBaseAndBitshift+0x160>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a6:	e005      	b.n	80055b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40020010 	.word	0x40020010
 80055c8:	40020028 	.word	0x40020028
 80055cc:	40020040 	.word	0x40020040
 80055d0:	40020058 	.word	0x40020058
 80055d4:	40020070 	.word	0x40020070
 80055d8:	40020088 	.word	0x40020088
 80055dc:	400200a0 	.word	0x400200a0
 80055e0:	400200b8 	.word	0x400200b8
 80055e4:	40020410 	.word	0x40020410
 80055e8:	40020428 	.word	0x40020428
 80055ec:	40020440 	.word	0x40020440
 80055f0:	40020458 	.word	0x40020458
 80055f4:	40020470 	.word	0x40020470
 80055f8:	40020488 	.word	0x40020488
 80055fc:	400204a0 	.word	0x400204a0
 8005600:	400204b8 	.word	0x400204b8
 8005604:	aaaaaaab 	.word	0xaaaaaaab
 8005608:	080117bc 	.word	0x080117bc
 800560c:	fffffc00 	.word	0xfffffc00

08005610 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d120      	bne.n	8005666 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005628:	2b03      	cmp	r3, #3
 800562a:	d858      	bhi.n	80056de <DMA_CheckFifoParam+0xce>
 800562c:	a201      	add	r2, pc, #4	@ (adr r2, 8005634 <DMA_CheckFifoParam+0x24>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005645 	.word	0x08005645
 8005638:	08005657 	.word	0x08005657
 800563c:	08005645 	.word	0x08005645
 8005640:	080056df 	.word	0x080056df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d048      	beq.n	80056e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005654:	e045      	b.n	80056e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800565e:	d142      	bne.n	80056e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005664:	e03f      	b.n	80056e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800566e:	d123      	bne.n	80056b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005674:	2b03      	cmp	r3, #3
 8005676:	d838      	bhi.n	80056ea <DMA_CheckFifoParam+0xda>
 8005678:	a201      	add	r2, pc, #4	@ (adr r2, 8005680 <DMA_CheckFifoParam+0x70>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	08005691 	.word	0x08005691
 8005684:	08005697 	.word	0x08005697
 8005688:	08005691 	.word	0x08005691
 800568c:	080056a9 	.word	0x080056a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
        break;
 8005694:	e030      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d025      	beq.n	80056ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056a6:	e022      	b.n	80056ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056b0:	d11f      	bne.n	80056f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056b6:	e01c      	b.n	80056f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d902      	bls.n	80056c6 <DMA_CheckFifoParam+0xb6>
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d003      	beq.n	80056cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056c4:	e018      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
        break;
 80056ca:	e015      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00e      	beq.n	80056f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
    break;
 80056dc:	e00b      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
        break;
 80056de:	bf00      	nop
 80056e0:	e00a      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        break;
 80056e2:	bf00      	nop
 80056e4:	e008      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        break;
 80056e6:	bf00      	nop
 80056e8:	e006      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        break;
 80056ea:	bf00      	nop
 80056ec:	e004      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        break;
 80056ee:	bf00      	nop
 80056f0:	e002      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
    break;
 80056f6:	bf00      	nop
    }
  }

  return status;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop

08005708 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a38      	ldr	r2, [pc, #224]	@ (80057fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a36      	ldr	r2, [pc, #216]	@ (8005800 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a35      	ldr	r2, [pc, #212]	@ (8005804 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a33      	ldr	r2, [pc, #204]	@ (8005808 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a32      	ldr	r2, [pc, #200]	@ (800580c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a30      	ldr	r2, [pc, #192]	@ (8005810 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2f      	ldr	r2, [pc, #188]	@ (8005814 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a2d      	ldr	r2, [pc, #180]	@ (8005818 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d101      	bne.n	800576a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800576a:	2300      	movs	r3, #0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01a      	beq.n	80057a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	3b08      	subs	r3, #8
 8005778:	4a28      	ldr	r2, [pc, #160]	@ (800581c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a24      	ldr	r2, [pc, #144]	@ (8005824 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005794:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2201      	movs	r2, #1
 800579e:	409a      	lsls	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057a4:	e024      	b.n	80057f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	3b10      	subs	r3, #16
 80057ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057b0:	fba2 2303 	umull	r2, r3, r2, r3
 80057b4:	091b      	lsrs	r3, r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4a1c      	ldr	r2, [pc, #112]	@ (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d806      	bhi.n	80057ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d902      	bls.n	80057ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3308      	adds	r3, #8
 80057cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4b18      	ldr	r3, [pc, #96]	@ (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	461a      	mov	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a16      	ldr	r2, [pc, #88]	@ (8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80057e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2201      	movs	r2, #1
 80057ea:	409a      	lsls	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	58025408 	.word	0x58025408
 8005800:	5802541c 	.word	0x5802541c
 8005804:	58025430 	.word	0x58025430
 8005808:	58025444 	.word	0x58025444
 800580c:	58025458 	.word	0x58025458
 8005810:	5802546c 	.word	0x5802546c
 8005814:	58025480 	.word	0x58025480
 8005818:	58025494 	.word	0x58025494
 800581c:	cccccccd 	.word	0xcccccccd
 8005820:	16009600 	.word	0x16009600
 8005824:	58025880 	.word	0x58025880
 8005828:	aaaaaaab 	.word	0xaaaaaaab
 800582c:	400204b8 	.word	0x400204b8
 8005830:	4002040f 	.word	0x4002040f
 8005834:	10008200 	.word	0x10008200
 8005838:	40020880 	.word	0x40020880

0800583c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d04a      	beq.n	80058e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d847      	bhi.n	80058e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a25      	ldr	r2, [pc, #148]	@ (80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d022      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a24      	ldr	r2, [pc, #144]	@ (80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d01d      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a22      	ldr	r2, [pc, #136]	@ (80058fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d018      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a21      	ldr	r2, [pc, #132]	@ (8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1f      	ldr	r2, [pc, #124]	@ (8005904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00e      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1e      	ldr	r2, [pc, #120]	@ (8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d009      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1c      	ldr	r2, [pc, #112]	@ (800590c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d101      	bne.n	80058ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058ac:	2300      	movs	r3, #0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4b17      	ldr	r3, [pc, #92]	@ (8005914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a15      	ldr	r2, [pc, #84]	@ (8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80058c6:	e009      	b.n	80058dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4b14      	ldr	r3, [pc, #80]	@ (800591c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a11      	ldr	r2, [pc, #68]	@ (8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80058da:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3b01      	subs	r3, #1
 80058e0:	2201      	movs	r2, #1
 80058e2:	409a      	lsls	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	58025408 	.word	0x58025408
 80058f8:	5802541c 	.word	0x5802541c
 80058fc:	58025430 	.word	0x58025430
 8005900:	58025444 	.word	0x58025444
 8005904:	58025458 	.word	0x58025458
 8005908:	5802546c 	.word	0x5802546c
 800590c:	58025480 	.word	0x58025480
 8005910:	58025494 	.word	0x58025494
 8005914:	1600963f 	.word	0x1600963f
 8005918:	58025940 	.word	0x58025940
 800591c:	1000823f 	.word	0x1000823f
 8005920:	40020940 	.word	0x40020940

08005924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005924:	b480      	push	{r7}
 8005926:	b089      	sub	sp, #36	@ 0x24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005932:	4b89      	ldr	r3, [pc, #548]	@ (8005b58 <HAL_GPIO_Init+0x234>)
 8005934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005936:	e194      	b.n	8005c62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2101      	movs	r1, #1
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	4013      	ands	r3, r2
 8005946:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8186 	beq.w	8005c5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d005      	beq.n	8005968 <HAL_GPIO_Init+0x44>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d130      	bne.n	80059ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	2203      	movs	r2, #3
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800599e:	2201      	movs	r2, #1
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	4013      	ands	r3, r2
 80059ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	f003 0201 	and.w	r2, r3, #1
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d017      	beq.n	8005a06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	2203      	movs	r2, #3
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4013      	ands	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d123      	bne.n	8005a5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	08da      	lsrs	r2, r3, #3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3208      	adds	r2, #8
 8005a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	220f      	movs	r2, #15
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	4013      	ands	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	08da      	lsrs	r2, r3, #3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3208      	adds	r2, #8
 8005a54:	69b9      	ldr	r1, [r7, #24]
 8005a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	2203      	movs	r2, #3
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f003 0203 	and.w	r2, r3, #3
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80e0 	beq.w	8005c5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b5c <HAL_GPIO_Init+0x238>)
 8005a9e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005aa2:	4a2e      	ldr	r2, [pc, #184]	@ (8005b5c <HAL_GPIO_Init+0x238>)
 8005aa4:	f043 0302 	orr.w	r3, r3, #2
 8005aa8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005aac:	4b2b      	ldr	r3, [pc, #172]	@ (8005b5c <HAL_GPIO_Init+0x238>)
 8005aae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aba:	4a29      	ldr	r2, [pc, #164]	@ (8005b60 <HAL_GPIO_Init+0x23c>)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	089b      	lsrs	r3, r3, #2
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	220f      	movs	r2, #15
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4013      	ands	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a20      	ldr	r2, [pc, #128]	@ (8005b64 <HAL_GPIO_Init+0x240>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d052      	beq.n	8005b8c <HAL_GPIO_Init+0x268>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b68 <HAL_GPIO_Init+0x244>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d031      	beq.n	8005b52 <HAL_GPIO_Init+0x22e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b6c <HAL_GPIO_Init+0x248>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d02b      	beq.n	8005b4e <HAL_GPIO_Init+0x22a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b70 <HAL_GPIO_Init+0x24c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d025      	beq.n	8005b4a <HAL_GPIO_Init+0x226>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1c      	ldr	r2, [pc, #112]	@ (8005b74 <HAL_GPIO_Init+0x250>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01f      	beq.n	8005b46 <HAL_GPIO_Init+0x222>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1b      	ldr	r2, [pc, #108]	@ (8005b78 <HAL_GPIO_Init+0x254>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d019      	beq.n	8005b42 <HAL_GPIO_Init+0x21e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1a      	ldr	r2, [pc, #104]	@ (8005b7c <HAL_GPIO_Init+0x258>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_GPIO_Init+0x21a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a19      	ldr	r2, [pc, #100]	@ (8005b80 <HAL_GPIO_Init+0x25c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00d      	beq.n	8005b3a <HAL_GPIO_Init+0x216>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a18      	ldr	r2, [pc, #96]	@ (8005b84 <HAL_GPIO_Init+0x260>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d007      	beq.n	8005b36 <HAL_GPIO_Init+0x212>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a17      	ldr	r2, [pc, #92]	@ (8005b88 <HAL_GPIO_Init+0x264>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d101      	bne.n	8005b32 <HAL_GPIO_Init+0x20e>
 8005b2e:	2309      	movs	r3, #9
 8005b30:	e02d      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b32:	230a      	movs	r3, #10
 8005b34:	e02b      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b36:	2308      	movs	r3, #8
 8005b38:	e029      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b3a:	2307      	movs	r3, #7
 8005b3c:	e027      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b3e:	2306      	movs	r3, #6
 8005b40:	e025      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b42:	2305      	movs	r3, #5
 8005b44:	e023      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b46:	2304      	movs	r3, #4
 8005b48:	e021      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e01f      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e01d      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e01b      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b56:	bf00      	nop
 8005b58:	58000080 	.word	0x58000080
 8005b5c:	58024400 	.word	0x58024400
 8005b60:	58000400 	.word	0x58000400
 8005b64:	58020000 	.word	0x58020000
 8005b68:	58020400 	.word	0x58020400
 8005b6c:	58020800 	.word	0x58020800
 8005b70:	58020c00 	.word	0x58020c00
 8005b74:	58021000 	.word	0x58021000
 8005b78:	58021400 	.word	0x58021400
 8005b7c:	58021800 	.word	0x58021800
 8005b80:	58021c00 	.word	0x58021c00
 8005b84:	58022000 	.word	0x58022000
 8005b88:	58022400 	.word	0x58022400
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	f002 0203 	and.w	r2, r2, #3
 8005b94:	0092      	lsls	r2, r2, #2
 8005b96:	4093      	lsls	r3, r2
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b9e:	4938      	ldr	r1, [pc, #224]	@ (8005c80 <HAL_GPIO_Init+0x35c>)
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4013      	ands	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4013      	ands	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f47f ae63 	bne.w	8005938 <HAL_GPIO_Init+0x14>
  }
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	3724      	adds	r7, #36	@ 0x24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	58000400 	.word	0x58000400

08005c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	887b      	ldrh	r3, [r7, #2]
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]
 8005ca0:	e001      	b.n	8005ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cc4:	787b      	ldrb	r3, [r7, #1]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cca:	887a      	ldrh	r2, [r7, #2]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cd0:	e003      	b.n	8005cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cd2:	887b      	ldrh	r3, [r7, #2]
 8005cd4:	041a      	lsls	r2, r3, #16
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	619a      	str	r2, [r3, #24]
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e08b      	b.n	8005e12 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fc f902 	bl	8001f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2224      	movs	r2, #36	@ 0x24
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d107      	bne.n	8005d62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	e006      	b.n	8005d70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005d6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d108      	bne.n	8005d8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d86:	605a      	str	r2, [r3, #4]
 8005d88:	e007      	b.n	8005d9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6859      	ldr	r1, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e1c <HAL_I2C_Init+0x134>)
 8005da6:	430b      	orrs	r3, r1
 8005da8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005db8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69d9      	ldr	r1, [r3, #28]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1a      	ldr	r2, [r3, #32]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	02008000 	.word	0x02008000

08005e20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	607a      	str	r2, [r7, #4]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	817b      	strh	r3, [r7, #10]
 8005e30:	4613      	mov	r3, r2
 8005e32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	f040 80fd 	bne.w	800603c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_I2C_Master_Transmit+0x30>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e0f6      	b.n	800603e <HAL_I2C_Master_Transmit+0x21e>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e58:	f7fc fbd2 	bl	8002600 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2319      	movs	r3, #25
 8005e64:	2201      	movs	r2, #1
 8005e66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fb72 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e0e1      	b.n	800603e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2221      	movs	r2, #33	@ 0x21
 8005e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2210      	movs	r2, #16
 8005e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	893a      	ldrh	r2, [r7, #8]
 8005e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2bff      	cmp	r3, #255	@ 0xff
 8005eaa:	d906      	bls.n	8005eba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	22ff      	movs	r2, #255	@ 0xff
 8005eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005eb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e007      	b.n	8005eca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ec4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ec8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d024      	beq.n	8005f1c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	781a      	ldrb	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	3301      	adds	r3, #1
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	8979      	ldrh	r1, [r7, #10]
 8005f0e:	4b4e      	ldr	r3, [pc, #312]	@ (8006048 <HAL_I2C_Master_Transmit+0x228>)
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 fd6d 	bl	80069f4 <I2C_TransferConfig>
 8005f1a:	e066      	b.n	8005fea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	8979      	ldrh	r1, [r7, #10]
 8005f24:	4b48      	ldr	r3, [pc, #288]	@ (8006048 <HAL_I2C_Master_Transmit+0x228>)
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fd62 	bl	80069f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005f30:	e05b      	b.n	8005fea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	6a39      	ldr	r1, [r7, #32]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fb65 	bl	8006606 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e07b      	b.n	800603e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d034      	beq.n	8005fea <HAL_I2C_Master_Transmit+0x1ca>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d130      	bne.n	8005fea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2180      	movs	r1, #128	@ 0x80
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fade 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e04d      	b.n	800603e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2bff      	cmp	r3, #255	@ 0xff
 8005faa:	d90e      	bls.n	8005fca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	22ff      	movs	r2, #255	@ 0xff
 8005fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	8979      	ldrh	r1, [r7, #10]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 fd16 	bl	80069f4 <I2C_TransferConfig>
 8005fc8:	e00f      	b.n	8005fea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	8979      	ldrh	r1, [r7, #10]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fd05 	bl	80069f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d19e      	bne.n	8005f32 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	6a39      	ldr	r1, [r7, #32]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fb4b 	bl	8006694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e01a      	b.n	800603e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2220      	movs	r2, #32
 800600e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b0c      	ldr	r3, [pc, #48]	@ (800604c <HAL_I2C_Master_Transmit+0x22c>)
 800601c:	400b      	ands	r3, r1
 800601e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e000      	b.n	800603e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800603c:	2302      	movs	r3, #2
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	80002000 	.word	0x80002000
 800604c:	fe00e800 	.word	0xfe00e800

08006050 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	461a      	mov	r2, r3
 800605c:	460b      	mov	r3, r1
 800605e:	817b      	strh	r3, [r7, #10]
 8006060:	4613      	mov	r3, r2
 8006062:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b20      	cmp	r3, #32
 800606e:	f040 80db 	bne.w	8006228 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_I2C_Master_Receive+0x30>
 800607c:	2302      	movs	r3, #2
 800607e:	e0d4      	b.n	800622a <HAL_I2C_Master_Receive+0x1da>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006088:	f7fc faba 	bl	8002600 <HAL_GetTick>
 800608c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	2319      	movs	r3, #25
 8006094:	2201      	movs	r2, #1
 8006096:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fa5a 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e0bf      	b.n	800622a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2222      	movs	r2, #34	@ 0x22
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2210      	movs	r2, #16
 80060b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	893a      	ldrh	r2, [r7, #8]
 80060ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2bff      	cmp	r3, #255	@ 0xff
 80060da:	d90e      	bls.n	80060fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	22ff      	movs	r2, #255	@ 0xff
 80060e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	8979      	ldrh	r1, [r7, #10]
 80060ea:	4b52      	ldr	r3, [pc, #328]	@ (8006234 <HAL_I2C_Master_Receive+0x1e4>)
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 fc7e 	bl	80069f4 <I2C_TransferConfig>
 80060f8:	e06d      	b.n	80061d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006108:	b2da      	uxtb	r2, r3
 800610a:	8979      	ldrh	r1, [r7, #10]
 800610c:	4b49      	ldr	r3, [pc, #292]	@ (8006234 <HAL_I2C_Master_Receive+0x1e4>)
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fc6d 	bl	80069f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800611a:	e05c      	b.n	80061d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	6a39      	ldr	r1, [r7, #32]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 fafb 	bl	800671c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e07c      	b.n	800622a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800614c:	3b01      	subs	r3, #1
 800614e:	b29a      	uxth	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d034      	beq.n	80061d6 <HAL_I2C_Master_Receive+0x186>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	d130      	bne.n	80061d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	2200      	movs	r2, #0
 800617c:	2180      	movs	r1, #128	@ 0x80
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f9e8 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e04d      	b.n	800622a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006192:	b29b      	uxth	r3, r3
 8006194:	2bff      	cmp	r3, #255	@ 0xff
 8006196:	d90e      	bls.n	80061b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	22ff      	movs	r2, #255	@ 0xff
 800619c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	8979      	ldrh	r1, [r7, #10]
 80061a6:	2300      	movs	r3, #0
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fc20 	bl	80069f4 <I2C_TransferConfig>
 80061b4:	e00f      	b.n	80061d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	8979      	ldrh	r1, [r7, #10]
 80061c8:	2300      	movs	r3, #0
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fc0f 	bl	80069f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d19d      	bne.n	800611c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	6a39      	ldr	r1, [r7, #32]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fa55 	bl	8006694 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e01a      	b.n	800622a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2220      	movs	r2, #32
 80061fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6859      	ldr	r1, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4b0c      	ldr	r3, [pc, #48]	@ (8006238 <HAL_I2C_Master_Receive+0x1e8>)
 8006208:	400b      	ands	r3, r1
 800620a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006228:	2302      	movs	r3, #2
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	80002400 	.word	0x80002400
 8006238:	fe00e800 	.word	0xfe00e800

0800623c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	4608      	mov	r0, r1
 8006246:	4611      	mov	r1, r2
 8006248:	461a      	mov	r2, r3
 800624a:	4603      	mov	r3, r0
 800624c:	817b      	strh	r3, [r7, #10]
 800624e:	460b      	mov	r3, r1
 8006250:	813b      	strh	r3, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b20      	cmp	r3, #32
 8006260:	f040 80f9 	bne.w	8006456 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <HAL_I2C_Mem_Write+0x34>
 800626a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	d105      	bne.n	800627c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006276:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0ed      	b.n	8006458 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_I2C_Mem_Write+0x4e>
 8006286:	2302      	movs	r3, #2
 8006288:	e0e6      	b.n	8006458 <HAL_I2C_Mem_Write+0x21c>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006292:	f7fc f9b5 	bl	8002600 <HAL_GetTick>
 8006296:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	2319      	movs	r3, #25
 800629e:	2201      	movs	r2, #1
 80062a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f955 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0d1      	b.n	8006458 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2221      	movs	r2, #33	@ 0x21
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2240      	movs	r2, #64	@ 0x40
 80062c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a3a      	ldr	r2, [r7, #32]
 80062ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80062d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062dc:	88f8      	ldrh	r0, [r7, #6]
 80062de:	893a      	ldrh	r2, [r7, #8]
 80062e0:	8979      	ldrh	r1, [r7, #10]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	4603      	mov	r3, r0
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f8b9 	bl	8006464 <I2C_RequestMemoryWrite>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0a9      	b.n	8006458 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2bff      	cmp	r3, #255	@ 0xff
 800630c:	d90e      	bls.n	800632c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	22ff      	movs	r2, #255	@ 0xff
 8006312:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006318:	b2da      	uxtb	r2, r3
 800631a:	8979      	ldrh	r1, [r7, #10]
 800631c:	2300      	movs	r3, #0
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 fb65 	bl	80069f4 <I2C_TransferConfig>
 800632a:	e00f      	b.n	800634c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633a:	b2da      	uxtb	r2, r3
 800633c:	8979      	ldrh	r1, [r7, #10]
 800633e:	2300      	movs	r3, #0
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fb54 	bl	80069f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f958 	bl	8006606 <I2C_WaitOnTXISFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e07b      	b.n	8006458 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006364:	781a      	ldrb	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d034      	beq.n	8006404 <HAL_I2C_Mem_Write+0x1c8>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d130      	bne.n	8006404 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	2200      	movs	r2, #0
 80063aa:	2180      	movs	r1, #128	@ 0x80
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f8d1 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e04d      	b.n	8006458 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2bff      	cmp	r3, #255	@ 0xff
 80063c4:	d90e      	bls.n	80063e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	22ff      	movs	r2, #255	@ 0xff
 80063ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	8979      	ldrh	r1, [r7, #10]
 80063d4:	2300      	movs	r3, #0
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fb09 	bl	80069f4 <I2C_TransferConfig>
 80063e2:	e00f      	b.n	8006404 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	8979      	ldrh	r1, [r7, #10]
 80063f6:	2300      	movs	r3, #0
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 faf8 	bl	80069f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d19e      	bne.n	800634c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 f93e 	bl	8006694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e01a      	b.n	8006458 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2220      	movs	r2, #32
 8006428:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6859      	ldr	r1, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <HAL_I2C_Mem_Write+0x224>)
 8006436:	400b      	ands	r3, r1
 8006438:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	e000      	b.n	8006458 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006456:	2302      	movs	r3, #2
  }
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	fe00e800 	.word	0xfe00e800

08006464 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	4608      	mov	r0, r1
 800646e:	4611      	mov	r1, r2
 8006470:	461a      	mov	r2, r3
 8006472:	4603      	mov	r3, r0
 8006474:	817b      	strh	r3, [r7, #10]
 8006476:	460b      	mov	r3, r1
 8006478:	813b      	strh	r3, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	8979      	ldrh	r1, [r7, #10]
 8006484:	4b20      	ldr	r3, [pc, #128]	@ (8006508 <I2C_RequestMemoryWrite+0xa4>)
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fab1 	bl	80069f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	69b9      	ldr	r1, [r7, #24]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f8b5 	bl	8006606 <I2C_WaitOnTXISFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e02c      	b.n	8006500 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d105      	bne.n	80064b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064ac:	893b      	ldrh	r3, [r7, #8]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80064b6:	e015      	b.n	80064e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064b8:	893b      	ldrh	r3, [r7, #8]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	b29b      	uxth	r3, r3
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	69b9      	ldr	r1, [r7, #24]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f89b 	bl	8006606 <I2C_WaitOnTXISFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e012      	b.n	8006500 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064da:	893b      	ldrh	r3, [r7, #8]
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2200      	movs	r2, #0
 80064ec:	2180      	movs	r1, #128	@ 0x80
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f830 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	80002000 	.word	0x80002000

0800650c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d103      	bne.n	800652a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b01      	cmp	r3, #1
 8006536:	d007      	beq.n	8006548 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0201 	orr.w	r2, r2, #1
 8006546:	619a      	str	r2, [r3, #24]
  }
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	4613      	mov	r3, r2
 8006562:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006564:	e03b      	b.n	80065de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f962 	bl	8006834 <I2C_IsErrorOccurred>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e041      	b.n	80065fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d02d      	beq.n	80065de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006582:	f7fc f83d 	bl	8002600 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d302      	bcc.n	8006598 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d122      	bne.n	80065de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4013      	ands	r3, r2
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	bf0c      	ite	eq
 80065a8:	2301      	moveq	r3, #1
 80065aa:	2300      	movne	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d113      	bne.n	80065de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	f043 0220 	orr.w	r2, r3, #32
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e00f      	b.n	80065fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4013      	ands	r3, r2
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	bf0c      	ite	eq
 80065ee:	2301      	moveq	r3, #1
 80065f0:	2300      	movne	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d0b4      	beq.n	8006566 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006612:	e033      	b.n	800667c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f90b 	bl	8006834 <I2C_IsErrorOccurred>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e031      	b.n	800668c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d025      	beq.n	800667c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006630:	f7fb ffe6 	bl	8002600 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	429a      	cmp	r2, r3
 800663e:	d302      	bcc.n	8006646 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d11a      	bne.n	800667c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b02      	cmp	r3, #2
 8006652:	d013      	beq.n	800667c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006658:	f043 0220 	orr.w	r2, r3, #32
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e007      	b.n	800668c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b02      	cmp	r3, #2
 8006688:	d1c4      	bne.n	8006614 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066a0:	e02f      	b.n	8006702 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f8c4 	bl	8006834 <I2C_IsErrorOccurred>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e02d      	b.n	8006712 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b6:	f7fb ffa3 	bl	8002600 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d11a      	bne.n	8006702 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d013      	beq.n	8006702 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066de:	f043 0220 	orr.w	r2, r3, #32
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e007      	b.n	8006712 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b20      	cmp	r3, #32
 800670e:	d1c8      	bne.n	80066a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800672c:	e071      	b.n	8006812 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f87e 	bl	8006834 <I2C_IsErrorOccurred>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b20      	cmp	r3, #32
 800674e:	d13b      	bne.n	80067c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d138      	bne.n	80067c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b04      	cmp	r3, #4
 8006762:	d105      	bne.n	8006770 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b10      	cmp	r3, #16
 800677c:	d121      	bne.n	80067c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2210      	movs	r2, #16
 8006784:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2204      	movs	r2, #4
 800678a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2220      	movs	r2, #32
 8006792:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6859      	ldr	r1, [r3, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b24      	ldr	r3, [pc, #144]	@ (8006830 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80067a0:	400b      	ands	r3, r1
 80067a2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	75fb      	strb	r3, [r7, #23]
 80067c0:	e002      	b.n	80067c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80067c8:	f7fb ff1a 	bl	8002600 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d302      	bcc.n	80067de <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d119      	bne.n	8006812 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d116      	bne.n	8006812 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d00f      	beq.n	8006812 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f6:	f043 0220 	orr.w	r2, r3, #32
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b04      	cmp	r3, #4
 800681e:	d002      	beq.n	8006826 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d083      	beq.n	800672e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	fe00e800 	.word	0xfe00e800

08006834 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	@ 0x28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f003 0310 	and.w	r3, r3, #16
 800685c:	2b00      	cmp	r3, #0
 800685e:	d068      	beq.n	8006932 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2210      	movs	r2, #16
 8006866:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006868:	e049      	b.n	80068fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006870:	d045      	beq.n	80068fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006872:	f7fb fec5 	bl	8002600 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	d302      	bcc.n	8006888 <I2C_IsErrorOccurred+0x54>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d13a      	bne.n	80068fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006892:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800689a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068aa:	d121      	bne.n	80068f0 <I2C_IsErrorOccurred+0xbc>
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068b2:	d01d      	beq.n	80068f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80068b4:	7cfb      	ldrb	r3, [r7, #19]
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	d01a      	beq.n	80068f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068ca:	f7fb fe99 	bl	8002600 <HAL_GetTick>
 80068ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068d0:	e00e      	b.n	80068f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068d2:	f7fb fe95 	bl	8002600 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b19      	cmp	r3, #25
 80068de:	d907      	bls.n	80068f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	f043 0320 	orr.w	r3, r3, #32
 80068e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80068ee:	e006      	b.n	80068fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d1e9      	bne.n	80068d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b20      	cmp	r3, #32
 800690a:	d003      	beq.n	8006914 <I2C_IsErrorOccurred+0xe0>
 800690c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0aa      	beq.n	800686a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2220      	movs	r2, #32
 8006922:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	f043 0304 	orr.w	r3, r3, #4
 800692a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006954:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00b      	beq.n	800697e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	f043 0308 	orr.w	r3, r3, #8
 800696c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006976:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	f043 0302 	orr.w	r3, r3, #2
 800698e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006998:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80069a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01c      	beq.n	80069e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7ff fdaf 	bl	800650c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6859      	ldr	r1, [r3, #4]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <I2C_IsErrorOccurred+0x1bc>)
 80069ba:	400b      	ands	r3, r1
 80069bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	431a      	orrs	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80069e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3728      	adds	r7, #40	@ 0x28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	fe00e800 	.word	0xfe00e800

080069f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	607b      	str	r3, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	817b      	strh	r3, [r7, #10]
 8006a02:	4613      	mov	r3, r2
 8006a04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a06:	897b      	ldrh	r3, [r7, #10]
 8006a08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a0c:	7a7b      	ldrb	r3, [r7, #9]
 8006a0e:	041b      	lsls	r3, r3, #16
 8006a10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a14:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a22:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	0d5b      	lsrs	r3, r3, #21
 8006a2e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006a32:	4b08      	ldr	r3, [pc, #32]	@ (8006a54 <I2C_TransferConfig+0x60>)
 8006a34:	430b      	orrs	r3, r1
 8006a36:	43db      	mvns	r3, r3
 8006a38:	ea02 0103 	and.w	r1, r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	03ff63ff 	.word	0x03ff63ff

08006a58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	d138      	bne.n	8006ae0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e032      	b.n	8006ae2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2224      	movs	r2, #36	@ 0x24
 8006a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0201 	bic.w	r2, r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006aaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6819      	ldr	r1, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e000      	b.n	8006ae2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ae0:	2302      	movs	r3, #2
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d139      	bne.n	8006b78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e033      	b.n	8006b7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2224      	movs	r2, #36	@ 0x24
 8006b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006b40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0201 	orr.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e000      	b.n	8006b7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b78:	2302      	movs	r3, #2
  }
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b086      	sub	sp, #24
 8006b8a:	af02      	add	r7, sp, #8
 8006b8c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0fe      	b.n	8006d96 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f009 fd23 	bl	80105f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f006 f949 	bl	800ce56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	7c1a      	ldrb	r2, [r3, #16]
 8006bcc:	f88d 2000 	strb.w	r2, [sp]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bd4:	f006 f81a 	bl	800cc0c <USB_CoreInit>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2202      	movs	r2, #2
 8006be2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e0d5      	b.n	8006d96 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f006 f941 	bl	800ce78 <USB_SetCurrentMode>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0c6      	b.n	8006d96 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	73fb      	strb	r3, [r7, #15]
 8006c0c:	e04a      	b.n	8006ca4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c0e:	7bfa      	ldrb	r2, [r7, #15]
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	3315      	adds	r3, #21
 8006c1e:	2201      	movs	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c22:	7bfa      	ldrb	r2, [r7, #15]
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	3314      	adds	r3, #20
 8006c32:	7bfa      	ldrb	r2, [r7, #15]
 8006c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c36:	7bfa      	ldrb	r2, [r7, #15]
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	b298      	uxth	r0, r3
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	332e      	adds	r3, #46	@ 0x2e
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c4e:	7bfa      	ldrb	r2, [r7, #15]
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3318      	adds	r3, #24
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c62:	7bfa      	ldrb	r2, [r7, #15]
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	331c      	adds	r3, #28
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c76:	7bfa      	ldrb	r2, [r7, #15]
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	440b      	add	r3, r1
 8006c84:	3320      	adds	r3, #32
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c8a:	7bfa      	ldrb	r2, [r7, #15]
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	3324      	adds	r3, #36	@ 0x24
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	73fb      	strb	r3, [r7, #15]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	791b      	ldrb	r3, [r3, #4]
 8006ca8:	7bfa      	ldrb	r2, [r7, #15]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d3af      	bcc.n	8006c0e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
 8006cb2:	e044      	b.n	8006d3e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cb4:	7bfa      	ldrb	r2, [r7, #15]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cca:	7bfa      	ldrb	r2, [r7, #15]
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006cdc:	7bfa      	ldrb	r2, [r7, #15]
 8006cde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ce0:	7bfa      	ldrb	r2, [r7, #15]
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cf6:	7bfa      	ldrb	r2, [r7, #15]
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d0c:	7bfa      	ldrb	r2, [r7, #15]
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d22:	7bfa      	ldrb	r2, [r7, #15]
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	4613      	mov	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	440b      	add	r3, r1
 8006d30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	73fb      	strb	r3, [r7, #15]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	791b      	ldrb	r3, [r3, #4]
 8006d42:	7bfa      	ldrb	r2, [r7, #15]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d3b5      	bcc.n	8006cb4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	7c1a      	ldrb	r2, [r3, #16]
 8006d50:	f88d 2000 	strb.w	r2, [sp]
 8006d54:	3304      	adds	r3, #4
 8006d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d58:	f006 f8da 	bl	800cf10 <USB_DevInit>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2202      	movs	r2, #2
 8006d66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e013      	b.n	8006d96 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	7b1b      	ldrb	r3, [r3, #12]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d102      	bne.n	8006d8a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 f96f 	bl	8008068 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f007 f91d 	bl	800dfce <USB_DevDisconnect>

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_PCD_Start+0x1c>
 8006db6:	2302      	movs	r3, #2
 8006db8:	e022      	b.n	8006e00 <HAL_PCD_Start+0x62>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d105      	bne.n	8006de2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f006 f824 	bl	800ce34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f007 f8cb 	bl	800df8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e08:	b590      	push	{r4, r7, lr}
 8006e0a:	b08d      	sub	sp, #52	@ 0x34
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f007 f989 	bl	800e136 <USB_GetMode>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 84b9 	bne.w	800779e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f007 f8ed 	bl	800e010 <USB_ReadInterrupts>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 84af 	beq.w	800779c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f007 f8da 	bl	800e010 <USB_ReadInterrupts>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d107      	bne.n	8006e76 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f002 0202 	and.w	r2, r2, #2
 8006e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f007 f8c8 	bl	800e010 <USB_ReadInterrupts>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f003 0310 	and.w	r3, r3, #16
 8006e86:	2b10      	cmp	r3, #16
 8006e88:	d161      	bne.n	8006f4e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699a      	ldr	r2, [r3, #24]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0210 	bic.w	r2, r2, #16
 8006e98:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f003 020f 	and.w	r2, r3, #15
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006ec0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ec4:	d124      	bne.n	8006f10 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d035      	beq.n	8006f3e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	6a38      	ldr	r0, [r7, #32]
 8006ee6:	f006 feff 	bl	800dce8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	091b      	lsrs	r3, r3, #4
 8006ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ef6:	441a      	add	r2, r3
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	091b      	lsrs	r3, r3, #4
 8006f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f08:	441a      	add	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	615a      	str	r2, [r3, #20]
 8006f0e:	e016      	b.n	8006f3e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006f16:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f1a:	d110      	bne.n	8006f3e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f22:	2208      	movs	r2, #8
 8006f24:	4619      	mov	r1, r3
 8006f26:	6a38      	ldr	r0, [r7, #32]
 8006f28:	f006 fede 	bl	800dce8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	695a      	ldr	r2, [r3, #20]
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	091b      	lsrs	r3, r3, #4
 8006f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f38:	441a      	add	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0210 	orr.w	r2, r2, #16
 8006f4c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f007 f85c 	bl	800e010 <USB_ReadInterrupts>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f62:	f040 80a7 	bne.w	80070b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f007 f861 	bl	800e036 <USB_ReadDevAllOutEpInterrupt>
 8006f74:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006f76:	e099      	b.n	80070ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 808e 	beq.w	80070a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f007 f885 	bl	800e09e <USB_ReadDevOutEPInterrupt>
 8006f94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00c      	beq.n	8006fba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fac:	461a      	mov	r2, r3
 8006fae:	2301      	movs	r3, #1
 8006fb0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006fb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fed1 	bl	8007d5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00c      	beq.n	8006fde <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	2308      	movs	r3, #8
 8006fd4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006fd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 ffa7 	bl	8007f2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	2310      	movs	r3, #16
 8006ff8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d030      	beq.n	8007066 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800700c:	2b80      	cmp	r3, #128	@ 0x80
 800700e:	d109      	bne.n	8007024 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800701e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007022:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007026:	4613      	mov	r3, r2
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4413      	add	r3, r2
 8007036:	3304      	adds	r3, #4
 8007038:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	78db      	ldrb	r3, [r3, #3]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d108      	bne.n	8007054 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2200      	movs	r2, #0
 8007046:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	b2db      	uxtb	r3, r3
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f009 fc26 	bl	80108a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007060:	461a      	mov	r2, r3
 8007062:	2302      	movs	r3, #2
 8007064:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707c:	461a      	mov	r2, r3
 800707e:	2320      	movs	r3, #32
 8007080:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007098:	461a      	mov	r2, r3
 800709a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800709e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a2:	3301      	adds	r3, #1
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80070a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a8:	085b      	lsrs	r3, r3, #1
 80070aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80070ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f47f af62 	bne.w	8006f78 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f006 ffa9 	bl	800e010 <USB_ReadInterrupts>
 80070be:	4603      	mov	r3, r0
 80070c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070c8:	f040 80db 	bne.w	8007282 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f006 ffca 	bl	800e06a <USB_ReadDevAllInEpInterrupt>
 80070d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80070dc:	e0cd      	b.n	800727a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80070de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80c2 	beq.w	800726e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f006 fff0 	bl	800e0da <USB_ReadDevInEPInterrupt>
 80070fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d057      	beq.n	80071b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	f003 030f 	and.w	r3, r3, #15
 800710c:	2201      	movs	r2, #1
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800711a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	43db      	mvns	r3, r3
 8007120:	69f9      	ldr	r1, [r7, #28]
 8007122:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007126:	4013      	ands	r3, r2
 8007128:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007136:	461a      	mov	r2, r3
 8007138:	2301      	movs	r3, #1
 800713a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	799b      	ldrb	r3, [r3, #6]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d132      	bne.n	80071aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007148:	4613      	mov	r3, r2
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	4413      	add	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	440b      	add	r3, r1
 8007152:	3320      	adds	r3, #32
 8007154:	6819      	ldr	r1, [r3, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800715a:	4613      	mov	r3, r2
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	4413      	add	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4403      	add	r3, r0
 8007164:	331c      	adds	r3, #28
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4419      	add	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800716e:	4613      	mov	r3, r2
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4403      	add	r3, r0
 8007178:	3320      	adds	r3, #32
 800717a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	2b00      	cmp	r3, #0
 8007180:	d113      	bne.n	80071aa <HAL_PCD_IRQHandler+0x3a2>
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007186:	4613      	mov	r3, r2
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	3324      	adds	r3, #36	@ 0x24
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d108      	bne.n	80071aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071a2:	461a      	mov	r2, r3
 80071a4:	2101      	movs	r1, #1
 80071a6:	f006 fff9 	bl	800e19c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f009 faf0 	bl	8010796 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071cc:	461a      	mov	r2, r3
 80071ce:	2308      	movs	r3, #8
 80071d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f003 0310 	and.w	r3, r3, #16
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e8:	461a      	mov	r2, r3
 80071ea:	2310      	movs	r3, #16
 80071ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80071f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007204:	461a      	mov	r2, r3
 8007206:	2340      	movs	r3, #64	@ 0x40
 8007208:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d023      	beq.n	800725c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007214:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007216:	6a38      	ldr	r0, [r7, #32]
 8007218:	f005 ffd8 	bl	800d1cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800721c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800721e:	4613      	mov	r3, r2
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	3310      	adds	r3, #16
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4413      	add	r3, r2
 800722c:	3304      	adds	r3, #4
 800722e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	78db      	ldrb	r3, [r3, #3]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d108      	bne.n	800724a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2200      	movs	r2, #0
 800723c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	b2db      	uxtb	r3, r3
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f009 fb3d 	bl	80108c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007256:	461a      	mov	r2, r3
 8007258:	2302      	movs	r3, #2
 800725a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007266:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fcea 	bl	8007c42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	3301      	adds	r3, #1
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800727a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727c:	2b00      	cmp	r3, #0
 800727e:	f47f af2e 	bne.w	80070de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f006 fec2 	bl	800e010 <USB_ReadInterrupts>
 800728c:	4603      	mov	r3, r0
 800728e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007296:	d122      	bne.n	80072de <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072a6:	f023 0301 	bic.w	r3, r3, #1
 80072aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d108      	bne.n	80072c8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80072be:	2100      	movs	r1, #0
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fef5 	bl	80080b0 <HAL_PCDEx_LPM_Callback>
 80072c6:	e002      	b.n	80072ce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f009 fadb 	bl	8010884 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695a      	ldr	r2, [r3, #20]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80072dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f006 fe94 	bl	800e010 <USB_ReadInterrupts>
 80072e8:	4603      	mov	r3, r0
 80072ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072f2:	d112      	bne.n	800731a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b01      	cmp	r3, #1
 8007302:	d102      	bne.n	800730a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f009 fa97 	bl	8010838 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695a      	ldr	r2, [r3, #20]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007318:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f006 fe76 	bl	800e010 <USB_ReadInterrupts>
 8007324:	4603      	mov	r3, r0
 8007326:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800732a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800732e:	d121      	bne.n	8007374 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800733e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007346:	2b00      	cmp	r3, #0
 8007348:	d111      	bne.n	800736e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007358:	089b      	lsrs	r3, r3, #2
 800735a:	f003 020f 	and.w	r2, r3, #15
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007364:	2101      	movs	r1, #1
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fea2 	bl	80080b0 <HAL_PCDEx_LPM_Callback>
 800736c:	e002      	b.n	8007374 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f009 fa62 	bl	8010838 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f006 fe49 	bl	800e010 <USB_ReadInterrupts>
 800737e:	4603      	mov	r3, r0
 8007380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007388:	f040 80b7 	bne.w	80074fa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800739a:	f023 0301 	bic.w	r3, r3, #1
 800739e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2110      	movs	r1, #16
 80073a6:	4618      	mov	r0, r3
 80073a8:	f005 ff10 	bl	800d1cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ac:	2300      	movs	r3, #0
 80073ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073b0:	e046      	b.n	8007440 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80073b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073be:	461a      	mov	r2, r3
 80073c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f2:	461a      	mov	r2, r3
 80073f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	440a      	add	r2, r1
 8007410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007414:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007418:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800741a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800742a:	0151      	lsls	r1, r2, #5
 800742c:	69fa      	ldr	r2, [r7, #28]
 800742e:	440a      	add	r2, r1
 8007430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007434:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007438:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800743a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743c:	3301      	adds	r3, #1
 800743e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	791b      	ldrb	r3, [r3, #4]
 8007444:	461a      	mov	r2, r3
 8007446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007448:	4293      	cmp	r3, r2
 800744a:	d3b2      	bcc.n	80073b2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800745a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800745e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	7bdb      	ldrb	r3, [r3, #15]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d016      	beq.n	8007496 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800746e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007478:	f043 030b 	orr.w	r3, r3, #11
 800747c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800748e:	f043 030b 	orr.w	r3, r3, #11
 8007492:	6453      	str	r3, [r2, #68]	@ 0x44
 8007494:	e015      	b.n	80074c2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800749c:	695a      	ldr	r2, [r3, #20]
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a4:	4619      	mov	r1, r3
 80074a6:	f242 032b 	movw	r3, #8235	@ 0x202b
 80074aa:	4313      	orrs	r3, r2
 80074ac:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074bc:	f043 030b 	orr.w	r3, r3, #11
 80074c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074d0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80074d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074e4:	461a      	mov	r2, r3
 80074e6:	f006 fe59 	bl	800e19c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695a      	ldr	r2, [r3, #20]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80074f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f006 fd86 	bl	800e010 <USB_ReadInterrupts>
 8007504:	4603      	mov	r3, r0
 8007506:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800750a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800750e:	d123      	bne.n	8007558 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4618      	mov	r0, r3
 8007516:	f006 fe1d 	bl	800e154 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4618      	mov	r0, r3
 8007520:	f005 fecd 	bl	800d2be <USB_GetDevSpeed>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681c      	ldr	r4, [r3, #0]
 8007530:	f001 fde0 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 8007534:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800753a:	461a      	mov	r2, r3
 800753c:	4620      	mov	r0, r4
 800753e:	f005 fbd7 	bl	800ccf0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f009 f94f 	bl	80107e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695a      	ldr	r2, [r3, #20]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007556:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4618      	mov	r0, r3
 800755e:	f006 fd57 	bl	800e010 <USB_ReadInterrupts>
 8007562:	4603      	mov	r3, r0
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b08      	cmp	r3, #8
 800756a:	d10a      	bne.n	8007582 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f009 f92c 	bl	80107ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	695a      	ldr	r2, [r3, #20]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f002 0208 	and.w	r2, r2, #8
 8007580:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f006 fd42 	bl	800e010 <USB_ReadInterrupts>
 800758c:	4603      	mov	r3, r0
 800758e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007592:	2b80      	cmp	r3, #128	@ 0x80
 8007594:	d123      	bne.n	80075de <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075a2:	2301      	movs	r3, #1
 80075a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075a6:	e014      	b.n	80075d2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ac:	4613      	mov	r3, r2
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d105      	bne.n	80075cc <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fb0a 	bl	8007be0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	3301      	adds	r3, #1
 80075d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	791b      	ldrb	r3, [r3, #4]
 80075d6:	461a      	mov	r2, r3
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	4293      	cmp	r3, r2
 80075dc:	d3e4      	bcc.n	80075a8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f006 fd14 	bl	800e010 <USB_ReadInterrupts>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075f2:	d13c      	bne.n	800766e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075f4:	2301      	movs	r3, #1
 80075f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80075f8:	e02b      	b.n	8007652 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800760e:	4613      	mov	r3, r2
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	4413      	add	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	3318      	adds	r3, #24
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d115      	bne.n	800764c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007620:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007622:	2b00      	cmp	r3, #0
 8007624:	da12      	bge.n	800764c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800762a:	4613      	mov	r3, r2
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	440b      	add	r3, r1
 8007634:	3317      	adds	r3, #23
 8007636:	2201      	movs	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	b2db      	uxtb	r3, r3
 800763e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007642:	b2db      	uxtb	r3, r3
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 faca 	bl	8007be0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	3301      	adds	r3, #1
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	791b      	ldrb	r3, [r3, #4]
 8007656:	461a      	mov	r2, r3
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	4293      	cmp	r3, r2
 800765c:	d3cd      	bcc.n	80075fa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695a      	ldr	r2, [r3, #20]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800766c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f006 fccc 	bl	800e010 <USB_ReadInterrupts>
 8007678:	4603      	mov	r3, r0
 800767a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800767e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007682:	d156      	bne.n	8007732 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007684:	2301      	movs	r3, #1
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24
 8007688:	e045      	b.n	8007716 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800769e:	4613      	mov	r3, r2
 80076a0:	00db      	lsls	r3, r3, #3
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	440b      	add	r3, r1
 80076a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d12e      	bne.n	8007710 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	da2b      	bge.n	8007710 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	0c1a      	lsrs	r2, r3, #16
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80076c2:	4053      	eors	r3, r2
 80076c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d121      	bne.n	8007710 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80076cc:	6879      	ldr	r1, [r7, #4]
 80076ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076d0:	4613      	mov	r3, r2
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80076de:	2201      	movs	r2, #1
 80076e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	69fa      	ldr	r2, [r7, #28]
 8007704:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007708:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800770c:	6053      	str	r3, [r2, #4]
            break;
 800770e:	e008      	b.n	8007722 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	3301      	adds	r3, #1
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	791b      	ldrb	r3, [r3, #4]
 800771a:	461a      	mov	r2, r3
 800771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771e:	4293      	cmp	r3, r2
 8007720:	d3b3      	bcc.n	800768a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695a      	ldr	r2, [r3, #20]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f006 fc6a 	bl	800e010 <USB_ReadInterrupts>
 800773c:	4603      	mov	r3, r0
 800773e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007746:	d10a      	bne.n	800775e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f009 f8cd 	bl	80108e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800775c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f006 fc54 	bl	800e010 <USB_ReadInterrupts>
 8007768:	4603      	mov	r3, r0
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	2b04      	cmp	r3, #4
 8007770:	d115      	bne.n	800779e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f009 f8bd 	bl	8010904 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6859      	ldr	r1, [r3, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	e000      	b.n	800779e <HAL_PCD_IRQHandler+0x996>
      return;
 800779c:	bf00      	nop
    }
  }
}
 800779e:	3734      	adds	r7, #52	@ 0x34
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd90      	pop	{r4, r7, pc}

080077a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_PCD_SetAddress+0x1a>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e012      	b.n	80077e4 <HAL_PCD_SetAddress+0x40>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	78fa      	ldrb	r2, [r7, #3]
 80077ca:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	78fa      	ldrb	r2, [r7, #3]
 80077d2:	4611      	mov	r1, r2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f006 fbb3 	bl	800df40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	70fb      	strb	r3, [r7, #3]
 80077fe:	460b      	mov	r3, r1
 8007800:	803b      	strh	r3, [r7, #0]
 8007802:	4613      	mov	r3, r2
 8007804:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800780a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800780e:	2b00      	cmp	r3, #0
 8007810:	da0f      	bge.n	8007832 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007812:	78fb      	ldrb	r3, [r7, #3]
 8007814:	f003 020f 	and.w	r2, r3, #15
 8007818:	4613      	mov	r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4413      	add	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	3310      	adds	r3, #16
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	4413      	add	r3, r2
 8007826:	3304      	adds	r3, #4
 8007828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	705a      	strb	r2, [r3, #1]
 8007830:	e00f      	b.n	8007852 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	f003 020f 	and.w	r2, r3, #15
 8007838:	4613      	mov	r3, r2
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	4413      	add	r3, r2
 8007848:	3304      	adds	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	b2da      	uxtb	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800785e:	883b      	ldrh	r3, [r7, #0]
 8007860:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	78ba      	ldrb	r2, [r7, #2]
 800786c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	785b      	ldrb	r3, [r3, #1]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d004      	beq.n	8007880 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007880:	78bb      	ldrb	r3, [r7, #2]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d102      	bne.n	800788c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_PCD_EP_Open+0xae>
 8007896:	2302      	movs	r3, #2
 8007898:	e00e      	b.n	80078b8 <HAL_PCD_EP_Open+0xcc>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f005 fd2d 	bl	800d308 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80078b6:	7afb      	ldrb	r3, [r7, #11]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80078cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	da0f      	bge.n	80078f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	f003 020f 	and.w	r2, r3, #15
 80078da:	4613      	mov	r3, r2
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	3310      	adds	r3, #16
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	4413      	add	r3, r2
 80078e8:	3304      	adds	r3, #4
 80078ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	705a      	strb	r2, [r3, #1]
 80078f2:	e00f      	b.n	8007914 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	f003 020f 	and.w	r2, r3, #15
 80078fa:	4613      	mov	r3, r2
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	3304      	adds	r3, #4
 800790c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	b2da      	uxtb	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <HAL_PCD_EP_Close+0x6e>
 800792a:	2302      	movs	r3, #2
 800792c:	e00e      	b.n	800794c <HAL_PCD_EP_Close+0x8c>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68f9      	ldr	r1, [r7, #12]
 800793c:	4618      	mov	r0, r3
 800793e:	f005 fd6b 	bl	800d418 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	607a      	str	r2, [r7, #4]
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	460b      	mov	r3, r1
 8007962:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	f003 020f 	and.w	r2, r3, #15
 800796a:	4613      	mov	r3, r2
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	3304      	adds	r3, #4
 800797c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2200      	movs	r2, #0
 800798e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2200      	movs	r2, #0
 8007994:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	b2da      	uxtb	r2, r3
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	799b      	ldrb	r3, [r3, #6]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d102      	bne.n	80079b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	799b      	ldrb	r3, [r3, #6]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6979      	ldr	r1, [r7, #20]
 80079bc:	f005 fe08 	bl	800d5d0 <USB_EPStartXfer>

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	f003 020f 	and.w	r2, r3, #15
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80079ec:	681b      	ldr	r3, [r3, #0]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b086      	sub	sp, #24
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
 8007a06:	460b      	mov	r3, r1
 8007a08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a0a:	7afb      	ldrb	r3, [r7, #11]
 8007a0c:	f003 020f 	and.w	r2, r3, #15
 8007a10:	4613      	mov	r3, r2
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	3310      	adds	r3, #16
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3304      	adds	r3, #4
 8007a20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2200      	movs	r2, #0
 8007a32:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2201      	movs	r2, #1
 8007a38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	799b      	ldrb	r3, [r3, #6]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d102      	bne.n	8007a54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	799b      	ldrb	r3, [r3, #6]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6979      	ldr	r1, [r7, #20]
 8007a60:	f005 fdb6 	bl	800d5d0 <USB_EPStartXfer>

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	7912      	ldrb	r2, [r2, #4]
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d901      	bls.n	8007a8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e04f      	b.n	8007b2c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	da0f      	bge.n	8007ab4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	f003 020f 	and.w	r2, r3, #15
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	3310      	adds	r3, #16
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	705a      	strb	r2, [r3, #1]
 8007ab2:	e00d      	b.n	8007ad0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	f003 030f 	and.w	r3, r3, #15
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_PCD_EP_SetStall+0x82>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e01d      	b.n	8007b2c <HAL_PCD_EP_SetStall+0xbe>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68f9      	ldr	r1, [r7, #12]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f006 f94a 	bl	800dd98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	7999      	ldrb	r1, [r3, #6]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f006 fb3d 	bl	800e19c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	f003 030f 	and.w	r3, r3, #15
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	7912      	ldrb	r2, [r2, #4]
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d901      	bls.n	8007b52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e042      	b.n	8007bd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	da0f      	bge.n	8007b7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	f003 020f 	and.w	r2, r3, #15
 8007b60:	4613      	mov	r3, r2
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	3310      	adds	r3, #16
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3304      	adds	r3, #4
 8007b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2201      	movs	r2, #1
 8007b76:	705a      	strb	r2, [r3, #1]
 8007b78:	e00f      	b.n	8007b9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	f003 020f 	and.w	r2, r3, #15
 8007b80:	4613      	mov	r3, r2
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	4413      	add	r3, r2
 8007b90:	3304      	adds	r3, #4
 8007b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	f003 030f 	and.w	r3, r3, #15
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_PCD_EP_ClrStall+0x86>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e00e      	b.n	8007bd8 <HAL_PCD_EP_ClrStall+0xa4>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68f9      	ldr	r1, [r7, #12]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f006 f953 	bl	800de74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	da0c      	bge.n	8007c0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	f003 020f 	and.w	r2, r3, #15
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	3310      	adds	r3, #16
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	4413      	add	r3, r2
 8007c08:	3304      	adds	r3, #4
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	e00c      	b.n	8007c28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c0e:	78fb      	ldrb	r3, [r7, #3]
 8007c10:	f003 020f 	and.w	r2, r3, #15
 8007c14:	4613      	mov	r3, r2
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	4413      	add	r3, r2
 8007c24:	3304      	adds	r3, #4
 8007c26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68f9      	ldr	r1, [r7, #12]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f005 ff72 	bl	800db18 <USB_EPStopXfer>
 8007c34:	4603      	mov	r3, r0
 8007c36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007c38:	7afb      	ldrb	r3, [r7, #11]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b08a      	sub	sp, #40	@ 0x28
 8007c46:	af02      	add	r7, sp, #8
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	3310      	adds	r3, #16
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	4413      	add	r3, r2
 8007c66:	3304      	adds	r3, #4
 8007c68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	695a      	ldr	r2, [r3, #20]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d901      	bls.n	8007c7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e06b      	b.n	8007d52 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d902      	bls.n	8007c96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	3303      	adds	r3, #3
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c9e:	e02a      	b.n	8007cf6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d902      	bls.n	8007cbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	3303      	adds	r3, #3
 8007cc0:	089b      	lsrs	r3, r3, #2
 8007cc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	68d9      	ldr	r1, [r3, #12]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	6978      	ldr	r0, [r7, #20]
 8007cda:	f005 ffc7 	bl	800dc6c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	441a      	add	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	695a      	ldr	r2, [r3, #20]
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d809      	bhi.n	8007d20 <PCD_WriteEmptyTxFifo+0xde>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	695a      	ldr	r2, [r3, #20]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d203      	bcs.n	8007d20 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1bf      	bne.n	8007ca0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d811      	bhi.n	8007d50 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	2201      	movs	r2, #1
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	43db      	mvns	r3, r3
 8007d46:	6939      	ldr	r1, [r7, #16]
 8007d48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3720      	adds	r7, #32
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	333c      	adds	r3, #60	@ 0x3c
 8007d74:	3304      	adds	r3, #4
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	799b      	ldrb	r3, [r3, #6]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d17b      	bne.n	8007e8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d015      	beq.n	8007dc8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	4a61      	ldr	r2, [pc, #388]	@ (8007f24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	f240 80b9 	bls.w	8007f18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 80b3 	beq.w	8007f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dc4:	6093      	str	r3, [r2, #8]
 8007dc6:	e0a7      	b.n	8007f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d009      	beq.n	8007de6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dde:	461a      	mov	r2, r3
 8007de0:	2320      	movs	r3, #32
 8007de2:	6093      	str	r3, [r2, #8]
 8007de4:	e098      	b.n	8007f18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f040 8093 	bne.w	8007f18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	4a4b      	ldr	r2, [pc, #300]	@ (8007f24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d90f      	bls.n	8007e1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00a      	beq.n	8007e1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e10:	461a      	mov	r2, r3
 8007e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e16:	6093      	str	r3, [r2, #8]
 8007e18:	e07e      	b.n	8007f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a1a      	ldr	r2, [r3, #32]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	0159      	lsls	r1, r3, #5
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	440b      	add	r3, r1
 8007e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e46:	1ad2      	subs	r2, r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d114      	bne.n	8007e7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d109      	bne.n	8007e6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e64:	461a      	mov	r2, r3
 8007e66:	2101      	movs	r1, #1
 8007e68:	f006 f998 	bl	800e19c <USB_EP0_OutStart>
 8007e6c:	e006      	b.n	8007e7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	68da      	ldr	r2, [r3, #12]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	441a      	add	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f008 fc6c 	bl	8010760 <HAL_PCD_DataOutStageCallback>
 8007e88:	e046      	b.n	8007f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	4a26      	ldr	r2, [pc, #152]	@ (8007f28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d124      	bne.n	8007edc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eae:	6093      	str	r3, [r2, #8]
 8007eb0:	e032      	b.n	8007f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2320      	movs	r3, #32
 8007ecc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f008 fc43 	bl	8010760 <HAL_PCD_DataOutStageCallback>
 8007eda:	e01d      	b.n	8007f18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d114      	bne.n	8007f0c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	440b      	add	r3, r1
 8007ef0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d108      	bne.n	8007f0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f04:	461a      	mov	r2, r3
 8007f06:	2100      	movs	r1, #0
 8007f08:	f006 f948 	bl	800e19c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f008 fc24 	bl	8010760 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3720      	adds	r7, #32
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	4f54300a 	.word	0x4f54300a
 8007f28:	4f54310a 	.word	0x4f54310a

08007f2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	333c      	adds	r3, #60	@ 0x3c
 8007f44:	3304      	adds	r3, #4
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4a15      	ldr	r2, [pc, #84]	@ (8007fb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d90e      	bls.n	8007f80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d009      	beq.n	8007f80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f78:	461a      	mov	r2, r3
 8007f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f008 fbdb 	bl	801073c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4a0a      	ldr	r2, [pc, #40]	@ (8007fb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d90c      	bls.n	8007fa8 <PCD_EP_OutSetupPacket_int+0x7c>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	799b      	ldrb	r3, [r3, #6]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d108      	bne.n	8007fa8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	f006 f8fa 	bl	800e19c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	4f54300a 	.word	0x4f54300a

08007fb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007fd0:	78fb      	ldrb	r3, [r7, #3]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d107      	bne.n	8007fe6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007fd6:	883b      	ldrh	r3, [r7, #0]
 8007fd8:	0419      	lsls	r1, r3, #16
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fe4:	e028      	b.n	8008038 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fec:	0c1b      	lsrs	r3, r3, #16
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
 8007ff8:	e00d      	b.n	8008016 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	3340      	adds	r3, #64	@ 0x40
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	0c1b      	lsrs	r3, r3, #16
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	4413      	add	r3, r2
 800800e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	3301      	adds	r3, #1
 8008014:	73fb      	strb	r3, [r7, #15]
 8008016:	7bfa      	ldrb	r2, [r7, #15]
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	3b01      	subs	r3, #1
 800801c:	429a      	cmp	r2, r3
 800801e:	d3ec      	bcc.n	8007ffa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008020:	883b      	ldrh	r3, [r7, #0]
 8008022:	0418      	lsls	r0, r3, #16
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6819      	ldr	r1, [r3, #0]
 8008028:	78fb      	ldrb	r3, [r7, #3]
 800802a:	3b01      	subs	r3, #1
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	4302      	orrs	r2, r0
 8008030:	3340      	adds	r3, #64	@ 0x40
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	887a      	ldrh	r2, [r7, #2]
 8008058:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008096:	4b05      	ldr	r3, [pc, #20]	@ (80080ac <HAL_PCDEx_ActivateLPM+0x44>)
 8008098:	4313      	orrs	r3, r2
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	10000003 	.word	0x10000003

080080b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80080d0:	4b19      	ldr	r3, [pc, #100]	@ (8008138 <HAL_PWREx_ConfigSupply+0x70>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d00a      	beq.n	80080f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80080dc:	4b16      	ldr	r3, [pc, #88]	@ (8008138 <HAL_PWREx_ConfigSupply+0x70>)
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d001      	beq.n	80080ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e01f      	b.n	800812e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	e01d      	b.n	800812e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80080f2:	4b11      	ldr	r3, [pc, #68]	@ (8008138 <HAL_PWREx_ConfigSupply+0x70>)
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f023 0207 	bic.w	r2, r3, #7
 80080fa:	490f      	ldr	r1, [pc, #60]	@ (8008138 <HAL_PWREx_ConfigSupply+0x70>)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008102:	f7fa fa7d 	bl	8002600 <HAL_GetTick>
 8008106:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008108:	e009      	b.n	800811e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800810a:	f7fa fa79 	bl	8002600 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008118:	d901      	bls.n	800811e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e007      	b.n	800812e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800811e:	4b06      	ldr	r3, [pc, #24]	@ (8008138 <HAL_PWREx_ConfigSupply+0x70>)
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800812a:	d1ee      	bne.n	800810a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	58024800 	.word	0x58024800

0800813c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008140:	4b05      	ldr	r3, [pc, #20]	@ (8008158 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	4a04      	ldr	r2, [pc, #16]	@ (8008158 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800814a:	60d3      	str	r3, [r2, #12]
}
 800814c:	bf00      	nop
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	58024800 	.word	0x58024800

0800815c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b08c      	sub	sp, #48	@ 0x30
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d102      	bne.n	8008170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f000 bc1f 	b.w	80089ae <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 80b3 	beq.w	80082e4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800817e:	4b95      	ldr	r3, [pc, #596]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008188:	4b92      	ldr	r3, [pc, #584]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800818a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800818e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008190:	2b10      	cmp	r3, #16
 8008192:	d007      	beq.n	80081a4 <HAL_RCC_OscConfig+0x48>
 8008194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008196:	2b18      	cmp	r3, #24
 8008198:	d112      	bne.n	80081c0 <HAL_RCC_OscConfig+0x64>
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d10d      	bne.n	80081c0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081a4:	4b8b      	ldr	r3, [pc, #556]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8098 	beq.w	80082e2 <HAL_RCC_OscConfig+0x186>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f040 8093 	bne.w	80082e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e3f6      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081c8:	d106      	bne.n	80081d8 <HAL_RCC_OscConfig+0x7c>
 80081ca:	4b82      	ldr	r3, [pc, #520]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a81      	ldr	r2, [pc, #516]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80081d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	e058      	b.n	800828a <HAL_RCC_OscConfig+0x12e>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d112      	bne.n	8008206 <HAL_RCC_OscConfig+0xaa>
 80081e0:	4b7c      	ldr	r3, [pc, #496]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a7b      	ldr	r2, [pc, #492]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80081e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	4b79      	ldr	r3, [pc, #484]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a78      	ldr	r2, [pc, #480]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80081f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	4b76      	ldr	r3, [pc, #472]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a75      	ldr	r2, [pc, #468]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80081fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	e041      	b.n	800828a <HAL_RCC_OscConfig+0x12e>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800820e:	d112      	bne.n	8008236 <HAL_RCC_OscConfig+0xda>
 8008210:	4b70      	ldr	r3, [pc, #448]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a6f      	ldr	r2, [pc, #444]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008216:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	4b6d      	ldr	r3, [pc, #436]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a6c      	ldr	r2, [pc, #432]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008222:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	4b6a      	ldr	r3, [pc, #424]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a69      	ldr	r2, [pc, #420]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800822e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	e029      	b.n	800828a <HAL_RCC_OscConfig+0x12e>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800823e:	d112      	bne.n	8008266 <HAL_RCC_OscConfig+0x10a>
 8008240:	4b64      	ldr	r3, [pc, #400]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a63      	ldr	r2, [pc, #396]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008246:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	4b61      	ldr	r3, [pc, #388]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a60      	ldr	r2, [pc, #384]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	4b5e      	ldr	r3, [pc, #376]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a5d      	ldr	r2, [pc, #372]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800825e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	e011      	b.n	800828a <HAL_RCC_OscConfig+0x12e>
 8008266:	4b5b      	ldr	r3, [pc, #364]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a5a      	ldr	r2, [pc, #360]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800826c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008270:	6013      	str	r3, [r2, #0]
 8008272:	4b58      	ldr	r3, [pc, #352]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a57      	ldr	r2, [pc, #348]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	4b55      	ldr	r3, [pc, #340]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a54      	ldr	r2, [pc, #336]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008284:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008288:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d013      	beq.n	80082ba <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008292:	f7fa f9b5 	bl	8002600 <HAL_GetTick>
 8008296:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008298:	e008      	b.n	80082ac <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800829a:	f7fa f9b1 	bl	8002600 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	2b64      	cmp	r3, #100	@ 0x64
 80082a6:	d901      	bls.n	80082ac <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e380      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082ac:	4b49      	ldr	r3, [pc, #292]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0f0      	beq.n	800829a <HAL_RCC_OscConfig+0x13e>
 80082b8:	e014      	b.n	80082e4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ba:	f7fa f9a1 	bl	8002600 <HAL_GetTick>
 80082be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082c0:	e008      	b.n	80082d4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082c2:	f7fa f99d 	bl	8002600 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b64      	cmp	r3, #100	@ 0x64
 80082ce:	d901      	bls.n	80082d4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e36c      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082d4:	4b3f      	ldr	r3, [pc, #252]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1f0      	bne.n	80082c2 <HAL_RCC_OscConfig+0x166>
 80082e0:	e000      	b.n	80082e4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 808c 	beq.w	800840a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082f2:	4b38      	ldr	r3, [pc, #224]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082fc:	4b35      	ldr	r3, [pc, #212]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80082fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008300:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d007      	beq.n	8008318 <HAL_RCC_OscConfig+0x1bc>
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	2b18      	cmp	r3, #24
 800830c:	d137      	bne.n	800837e <HAL_RCC_OscConfig+0x222>
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f003 0303 	and.w	r3, r3, #3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d132      	bne.n	800837e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008318:	4b2e      	ldr	r3, [pc, #184]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_RCC_OscConfig+0x1d4>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e33e      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008330:	4b28      	ldr	r3, [pc, #160]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f023 0219 	bic.w	r2, r3, #25
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	4925      	ldr	r1, [pc, #148]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800833e:	4313      	orrs	r3, r2
 8008340:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008342:	f7fa f95d 	bl	8002600 <HAL_GetTick>
 8008346:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008348:	e008      	b.n	800835c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800834a:	f7fa f959 	bl	8002600 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d901      	bls.n	800835c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e328      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800835c:	4b1d      	ldr	r3, [pc, #116]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0f0      	beq.n	800834a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008368:	4b1a      	ldr	r3, [pc, #104]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	061b      	lsls	r3, r3, #24
 8008376:	4917      	ldr	r1, [pc, #92]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008378:	4313      	orrs	r3, r2
 800837a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800837c:	e045      	b.n	800840a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d028      	beq.n	80083d8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008386:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f023 0219 	bic.w	r2, r3, #25
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	4910      	ldr	r1, [pc, #64]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 8008394:	4313      	orrs	r3, r2
 8008396:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008398:	f7fa f932 	bl	8002600 <HAL_GetTick>
 800839c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083a0:	f7fa f92e 	bl	8002600 <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e2fd      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083b2:	4b08      	ldr	r3, [pc, #32]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0f0      	beq.n	80083a0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083be:	4b05      	ldr	r3, [pc, #20]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	061b      	lsls	r3, r3, #24
 80083cc:	4901      	ldr	r1, [pc, #4]	@ (80083d4 <HAL_RCC_OscConfig+0x278>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	604b      	str	r3, [r1, #4]
 80083d2:	e01a      	b.n	800840a <HAL_RCC_OscConfig+0x2ae>
 80083d4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083d8:	4b97      	ldr	r3, [pc, #604]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a96      	ldr	r2, [pc, #600]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80083de:	f023 0301 	bic.w	r3, r3, #1
 80083e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e4:	f7fa f90c 	bl	8002600 <HAL_GetTick>
 80083e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083ec:	f7fa f908 	bl	8002600 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e2d7      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083fe:	4b8e      	ldr	r3, [pc, #568]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f0      	bne.n	80083ec <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0310 	and.w	r3, r3, #16
 8008412:	2b00      	cmp	r3, #0
 8008414:	d06a      	beq.n	80084ec <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008416:	4b88      	ldr	r3, [pc, #544]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800841e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008420:	4b85      	ldr	r3, [pc, #532]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008424:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b08      	cmp	r3, #8
 800842a:	d007      	beq.n	800843c <HAL_RCC_OscConfig+0x2e0>
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b18      	cmp	r3, #24
 8008430:	d11b      	bne.n	800846a <HAL_RCC_OscConfig+0x30e>
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	2b01      	cmp	r3, #1
 800843a:	d116      	bne.n	800846a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800843c:	4b7e      	ldr	r3, [pc, #504]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <HAL_RCC_OscConfig+0x2f8>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	2b80      	cmp	r3, #128	@ 0x80
 800844e:	d001      	beq.n	8008454 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e2ac      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008454:	4b78      	ldr	r3, [pc, #480]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	061b      	lsls	r3, r3, #24
 8008462:	4975      	ldr	r1, [pc, #468]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008464:	4313      	orrs	r3, r2
 8008466:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008468:	e040      	b.n	80084ec <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d023      	beq.n	80084ba <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008472:	4b71      	ldr	r3, [pc, #452]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a70      	ldr	r2, [pc, #448]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800847c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847e:	f7fa f8bf 	bl	8002600 <HAL_GetTick>
 8008482:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008486:	f7fa f8bb 	bl	8002600 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e28a      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008498:	4b67      	ldr	r3, [pc, #412]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d0f0      	beq.n	8008486 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084a4:	4b64      	ldr	r3, [pc, #400]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	061b      	lsls	r3, r3, #24
 80084b2:	4961      	ldr	r1, [pc, #388]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60cb      	str	r3, [r1, #12]
 80084b8:	e018      	b.n	80084ec <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80084ba:	4b5f      	ldr	r3, [pc, #380]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a5e      	ldr	r2, [pc, #376]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80084c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c6:	f7fa f89b 	bl	8002600 <HAL_GetTick>
 80084ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084cc:	e008      	b.n	80084e0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80084ce:	f7fa f897 	bl	8002600 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d901      	bls.n	80084e0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e266      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084e0:	4b55      	ldr	r3, [pc, #340]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1f0      	bne.n	80084ce <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d036      	beq.n	8008566 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d019      	beq.n	8008534 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008500:	4b4d      	ldr	r3, [pc, #308]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008504:	4a4c      	ldr	r2, [pc, #304]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008506:	f043 0301 	orr.w	r3, r3, #1
 800850a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800850c:	f7fa f878 	bl	8002600 <HAL_GetTick>
 8008510:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008512:	e008      	b.n	8008526 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008514:	f7fa f874 	bl	8002600 <HAL_GetTick>
 8008518:	4602      	mov	r2, r0
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	2b02      	cmp	r3, #2
 8008520:	d901      	bls.n	8008526 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e243      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008526:	4b44      	ldr	r3, [pc, #272]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0f0      	beq.n	8008514 <HAL_RCC_OscConfig+0x3b8>
 8008532:	e018      	b.n	8008566 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008534:	4b40      	ldr	r3, [pc, #256]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008538:	4a3f      	ldr	r2, [pc, #252]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 800853a:	f023 0301 	bic.w	r3, r3, #1
 800853e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008540:	f7fa f85e 	bl	8002600 <HAL_GetTick>
 8008544:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008546:	e008      	b.n	800855a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008548:	f7fa f85a 	bl	8002600 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	2b02      	cmp	r3, #2
 8008554:	d901      	bls.n	800855a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e229      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800855a:	4b37      	ldr	r3, [pc, #220]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 800855c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1f0      	bne.n	8008548 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b00      	cmp	r3, #0
 8008570:	d036      	beq.n	80085e0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d019      	beq.n	80085ae <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800857a:	4b2f      	ldr	r3, [pc, #188]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a2e      	ldr	r2, [pc, #184]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 8008580:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008584:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008586:	f7fa f83b 	bl	8002600 <HAL_GetTick>
 800858a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800858c:	e008      	b.n	80085a0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800858e:	f7fa f837 	bl	8002600 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	2b02      	cmp	r3, #2
 800859a:	d901      	bls.n	80085a0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e206      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085a0:	4b25      	ldr	r3, [pc, #148]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0f0      	beq.n	800858e <HAL_RCC_OscConfig+0x432>
 80085ac:	e018      	b.n	80085e0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085ae:	4b22      	ldr	r3, [pc, #136]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a21      	ldr	r2, [pc, #132]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80085b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085ba:	f7fa f821 	bl	8002600 <HAL_GetTick>
 80085be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085c0:	e008      	b.n	80085d4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085c2:	f7fa f81d 	bl	8002600 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e1ec      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085d4:	4b18      	ldr	r3, [pc, #96]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f0      	bne.n	80085c2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80af 	beq.w	800874c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80085ee:	4b13      	ldr	r3, [pc, #76]	@ (800863c <HAL_RCC_OscConfig+0x4e0>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a12      	ldr	r2, [pc, #72]	@ (800863c <HAL_RCC_OscConfig+0x4e0>)
 80085f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085fa:	f7fa f801 	bl	8002600 <HAL_GetTick>
 80085fe:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008602:	f7f9 fffd 	bl	8002600 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b64      	cmp	r3, #100	@ 0x64
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e1cc      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008614:	4b09      	ldr	r3, [pc, #36]	@ (800863c <HAL_RCC_OscConfig+0x4e0>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0f0      	beq.n	8008602 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d10b      	bne.n	8008640 <HAL_RCC_OscConfig+0x4e4>
 8008628:	4b03      	ldr	r3, [pc, #12]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 800862a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800862c:	4a02      	ldr	r2, [pc, #8]	@ (8008638 <HAL_RCC_OscConfig+0x4dc>)
 800862e:	f043 0301 	orr.w	r3, r3, #1
 8008632:	6713      	str	r3, [r2, #112]	@ 0x70
 8008634:	e05b      	b.n	80086ee <HAL_RCC_OscConfig+0x592>
 8008636:	bf00      	nop
 8008638:	58024400 	.word	0x58024400
 800863c:	58024800 	.word	0x58024800
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d112      	bne.n	800866e <HAL_RCC_OscConfig+0x512>
 8008648:	4b9d      	ldr	r3, [pc, #628]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800864a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800864c:	4a9c      	ldr	r2, [pc, #624]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	6713      	str	r3, [r2, #112]	@ 0x70
 8008654:	4b9a      	ldr	r3, [pc, #616]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008658:	4a99      	ldr	r2, [pc, #612]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800865a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800865e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008660:	4b97      	ldr	r3, [pc, #604]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008664:	4a96      	ldr	r2, [pc, #600]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008666:	f023 0304 	bic.w	r3, r3, #4
 800866a:	6713      	str	r3, [r2, #112]	@ 0x70
 800866c:	e03f      	b.n	80086ee <HAL_RCC_OscConfig+0x592>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	2b05      	cmp	r3, #5
 8008674:	d112      	bne.n	800869c <HAL_RCC_OscConfig+0x540>
 8008676:	4b92      	ldr	r3, [pc, #584]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800867a:	4a91      	ldr	r2, [pc, #580]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800867c:	f043 0304 	orr.w	r3, r3, #4
 8008680:	6713      	str	r3, [r2, #112]	@ 0x70
 8008682:	4b8f      	ldr	r3, [pc, #572]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008686:	4a8e      	ldr	r2, [pc, #568]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800868c:	6713      	str	r3, [r2, #112]	@ 0x70
 800868e:	4b8c      	ldr	r3, [pc, #560]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008692:	4a8b      	ldr	r2, [pc, #556]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008694:	f043 0301 	orr.w	r3, r3, #1
 8008698:	6713      	str	r3, [r2, #112]	@ 0x70
 800869a:	e028      	b.n	80086ee <HAL_RCC_OscConfig+0x592>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	2b85      	cmp	r3, #133	@ 0x85
 80086a2:	d112      	bne.n	80086ca <HAL_RCC_OscConfig+0x56e>
 80086a4:	4b86      	ldr	r3, [pc, #536]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a8:	4a85      	ldr	r2, [pc, #532]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086aa:	f043 0304 	orr.w	r3, r3, #4
 80086ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80086b0:	4b83      	ldr	r3, [pc, #524]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b4:	4a82      	ldr	r2, [pc, #520]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80086bc:	4b80      	ldr	r3, [pc, #512]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c0:	4a7f      	ldr	r2, [pc, #508]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80086c8:	e011      	b.n	80086ee <HAL_RCC_OscConfig+0x592>
 80086ca:	4b7d      	ldr	r3, [pc, #500]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ce:	4a7c      	ldr	r2, [pc, #496]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086d0:	f023 0301 	bic.w	r3, r3, #1
 80086d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80086d6:	4b7a      	ldr	r3, [pc, #488]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086da:	4a79      	ldr	r2, [pc, #484]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086dc:	f023 0304 	bic.w	r3, r3, #4
 80086e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80086e2:	4b77      	ldr	r3, [pc, #476]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e6:	4a76      	ldr	r2, [pc, #472]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80086e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d015      	beq.n	8008722 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f6:	f7f9 ff83 	bl	8002600 <HAL_GetTick>
 80086fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086fc:	e00a      	b.n	8008714 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086fe:	f7f9 ff7f 	bl	8002600 <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800870c:	4293      	cmp	r3, r2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e14c      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008714:	4b6a      	ldr	r3, [pc, #424]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0ee      	beq.n	80086fe <HAL_RCC_OscConfig+0x5a2>
 8008720:	e014      	b.n	800874c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008722:	f7f9 ff6d 	bl	8002600 <HAL_GetTick>
 8008726:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008728:	e00a      	b.n	8008740 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800872a:	f7f9 ff69 	bl	8002600 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008738:	4293      	cmp	r3, r2
 800873a:	d901      	bls.n	8008740 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e136      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008740:	4b5f      	ldr	r3, [pc, #380]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1ee      	bne.n	800872a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 812b 	beq.w	80089ac <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008756:	4b5a      	ldr	r3, [pc, #360]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800875e:	2b18      	cmp	r3, #24
 8008760:	f000 80bb 	beq.w	80088da <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008768:	2b02      	cmp	r3, #2
 800876a:	f040 8095 	bne.w	8008898 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800876e:	4b54      	ldr	r3, [pc, #336]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a53      	ldr	r2, [pc, #332]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008774:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800877a:	f7f9 ff41 	bl	8002600 <HAL_GetTick>
 800877e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008782:	f7f9 ff3d 	bl	8002600 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e10c      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008794:	4b4a      	ldr	r3, [pc, #296]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1f0      	bne.n	8008782 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087a0:	4b47      	ldr	r3, [pc, #284]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80087a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087a4:	4b47      	ldr	r3, [pc, #284]	@ (80088c4 <HAL_RCC_OscConfig+0x768>)
 80087a6:	4013      	ands	r3, r2
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80087b0:	0112      	lsls	r2, r2, #4
 80087b2:	430a      	orrs	r2, r1
 80087b4:	4942      	ldr	r1, [pc, #264]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	628b      	str	r3, [r1, #40]	@ 0x28
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087be:	3b01      	subs	r3, #1
 80087c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087c8:	3b01      	subs	r3, #1
 80087ca:	025b      	lsls	r3, r3, #9
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d4:	3b01      	subs	r3, #1
 80087d6:	041b      	lsls	r3, r3, #16
 80087d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087dc:	431a      	orrs	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e2:	3b01      	subs	r3, #1
 80087e4:	061b      	lsls	r3, r3, #24
 80087e6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087ea:	4935      	ldr	r1, [pc, #212]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80087f0:	4b33      	ldr	r3, [pc, #204]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80087f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f4:	4a32      	ldr	r2, [pc, #200]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80087f6:	f023 0301 	bic.w	r3, r3, #1
 80087fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80087fc:	4b30      	ldr	r3, [pc, #192]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 80087fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008800:	4b31      	ldr	r3, [pc, #196]	@ (80088c8 <HAL_RCC_OscConfig+0x76c>)
 8008802:	4013      	ands	r3, r2
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008808:	00d2      	lsls	r2, r2, #3
 800880a:	492d      	ldr	r1, [pc, #180]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800880c:	4313      	orrs	r3, r2
 800880e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008810:	4b2b      	ldr	r3, [pc, #172]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008814:	f023 020c 	bic.w	r2, r3, #12
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881c:	4928      	ldr	r1, [pc, #160]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800881e:	4313      	orrs	r3, r2
 8008820:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008822:	4b27      	ldr	r3, [pc, #156]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008826:	f023 0202 	bic.w	r2, r3, #2
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882e:	4924      	ldr	r1, [pc, #144]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008830:	4313      	orrs	r3, r2
 8008832:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008834:	4b22      	ldr	r3, [pc, #136]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008838:	4a21      	ldr	r2, [pc, #132]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800883a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800883e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008840:	4b1f      	ldr	r3, [pc, #124]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008844:	4a1e      	ldr	r2, [pc, #120]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800884a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800884c:	4b1c      	ldr	r3, [pc, #112]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800884e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008850:	4a1b      	ldr	r2, [pc, #108]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008852:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008858:	4b19      	ldr	r3, [pc, #100]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800885a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885c:	4a18      	ldr	r2, [pc, #96]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800885e:	f043 0301 	orr.w	r3, r3, #1
 8008862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008864:	4b16      	ldr	r3, [pc, #88]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a15      	ldr	r2, [pc, #84]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800886a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800886e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008870:	f7f9 fec6 	bl	8002600 <HAL_GetTick>
 8008874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008876:	e008      	b.n	800888a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008878:	f7f9 fec2 	bl	8002600 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b02      	cmp	r3, #2
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e091      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800888a:	4b0d      	ldr	r3, [pc, #52]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0f0      	beq.n	8008878 <HAL_RCC_OscConfig+0x71c>
 8008896:	e089      	b.n	80089ac <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008898:	4b09      	ldr	r3, [pc, #36]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a08      	ldr	r2, [pc, #32]	@ (80088c0 <HAL_RCC_OscConfig+0x764>)
 800889e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a4:	f7f9 feac 	bl	8002600 <HAL_GetTick>
 80088a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088aa:	e00f      	b.n	80088cc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088ac:	f7f9 fea8 	bl	8002600 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d908      	bls.n	80088cc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e077      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
 80088be:	bf00      	nop
 80088c0:	58024400 	.word	0x58024400
 80088c4:	fffffc0c 	.word	0xfffffc0c
 80088c8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088cc:	4b3a      	ldr	r3, [pc, #232]	@ (80089b8 <HAL_RCC_OscConfig+0x85c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e9      	bne.n	80088ac <HAL_RCC_OscConfig+0x750>
 80088d8:	e068      	b.n	80089ac <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80088da:	4b37      	ldr	r3, [pc, #220]	@ (80089b8 <HAL_RCC_OscConfig+0x85c>)
 80088dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088de:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80088e0:	4b35      	ldr	r3, [pc, #212]	@ (80089b8 <HAL_RCC_OscConfig+0x85c>)
 80088e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d031      	beq.n	8008952 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f003 0203 	and.w	r2, r3, #3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d12a      	bne.n	8008952 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	091b      	lsrs	r3, r3, #4
 8008900:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008908:	429a      	cmp	r2, r3
 800890a:	d122      	bne.n	8008952 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008916:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008918:	429a      	cmp	r2, r3
 800891a:	d11a      	bne.n	8008952 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	0a5b      	lsrs	r3, r3, #9
 8008920:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008928:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800892a:	429a      	cmp	r2, r3
 800892c:	d111      	bne.n	8008952 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	0c1b      	lsrs	r3, r3, #16
 8008932:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800893c:	429a      	cmp	r2, r3
 800893e:	d108      	bne.n	8008952 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	0e1b      	lsrs	r3, r3, #24
 8008944:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800894c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800894e:	429a      	cmp	r2, r3
 8008950:	d001      	beq.n	8008956 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e02b      	b.n	80089ae <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008956:	4b18      	ldr	r3, [pc, #96]	@ (80089b8 <HAL_RCC_OscConfig+0x85c>)
 8008958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800895a:	08db      	lsrs	r3, r3, #3
 800895c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008960:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	429a      	cmp	r2, r3
 800896a:	d01f      	beq.n	80089ac <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800896c:	4b12      	ldr	r3, [pc, #72]	@ (80089b8 <HAL_RCC_OscConfig+0x85c>)
 800896e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008970:	4a11      	ldr	r2, [pc, #68]	@ (80089b8 <HAL_RCC_OscConfig+0x85c>)
 8008972:	f023 0301 	bic.w	r3, r3, #1
 8008976:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008978:	f7f9 fe42 	bl	8002600 <HAL_GetTick>
 800897c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800897e:	bf00      	nop
 8008980:	f7f9 fe3e 	bl	8002600 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	4293      	cmp	r3, r2
 800898a:	d0f9      	beq.n	8008980 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800898c:	4b0a      	ldr	r3, [pc, #40]	@ (80089b8 <HAL_RCC_OscConfig+0x85c>)
 800898e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008990:	4b0a      	ldr	r3, [pc, #40]	@ (80089bc <HAL_RCC_OscConfig+0x860>)
 8008992:	4013      	ands	r3, r2
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008998:	00d2      	lsls	r2, r2, #3
 800899a:	4907      	ldr	r1, [pc, #28]	@ (80089b8 <HAL_RCC_OscConfig+0x85c>)
 800899c:	4313      	orrs	r3, r2
 800899e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80089a0:	4b05      	ldr	r3, [pc, #20]	@ (80089b8 <HAL_RCC_OscConfig+0x85c>)
 80089a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a4:	4a04      	ldr	r2, [pc, #16]	@ (80089b8 <HAL_RCC_OscConfig+0x85c>)
 80089a6:	f043 0301 	orr.w	r3, r3, #1
 80089aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3730      	adds	r7, #48	@ 0x30
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	58024400 	.word	0x58024400
 80089bc:	ffff0007 	.word	0xffff0007

080089c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e19c      	b.n	8008d0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089d4:	4b8a      	ldr	r3, [pc, #552]	@ (8008c00 <HAL_RCC_ClockConfig+0x240>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 030f 	and.w	r3, r3, #15
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d910      	bls.n	8008a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089e2:	4b87      	ldr	r3, [pc, #540]	@ (8008c00 <HAL_RCC_ClockConfig+0x240>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f023 020f 	bic.w	r2, r3, #15
 80089ea:	4985      	ldr	r1, [pc, #532]	@ (8008c00 <HAL_RCC_ClockConfig+0x240>)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089f2:	4b83      	ldr	r3, [pc, #524]	@ (8008c00 <HAL_RCC_ClockConfig+0x240>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d001      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e184      	b.n	8008d0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d010      	beq.n	8008a32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691a      	ldr	r2, [r3, #16]
 8008a14:	4b7b      	ldr	r3, [pc, #492]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d908      	bls.n	8008a32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a20:	4b78      	ldr	r3, [pc, #480]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	4975      	ldr	r1, [pc, #468]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0308 	and.w	r3, r3, #8
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d010      	beq.n	8008a60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	4b70      	ldr	r3, [pc, #448]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d908      	bls.n	8008a60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	496a      	ldr	r1, [pc, #424]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0310 	and.w	r3, r3, #16
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d010      	beq.n	8008a8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699a      	ldr	r2, [r3, #24]
 8008a70:	4b64      	ldr	r3, [pc, #400]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d908      	bls.n	8008a8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a7c:	4b61      	ldr	r3, [pc, #388]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	495e      	ldr	r1, [pc, #376]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d010      	beq.n	8008abc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69da      	ldr	r2, [r3, #28]
 8008a9e:	4b59      	ldr	r3, [pc, #356]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d908      	bls.n	8008abc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008aaa:	4b56      	ldr	r3, [pc, #344]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	4953      	ldr	r1, [pc, #332]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d010      	beq.n	8008aea <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	4b4d      	ldr	r3, [pc, #308]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d908      	bls.n	8008aea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	f023 020f 	bic.w	r2, r3, #15
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	4947      	ldr	r1, [pc, #284]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d055      	beq.n	8008ba2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008af6:	4b43      	ldr	r3, [pc, #268]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	4940      	ldr	r1, [pc, #256]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d107      	bne.n	8008b20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b10:	4b3c      	ldr	r3, [pc, #240]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d121      	bne.n	8008b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e0f6      	b.n	8008d0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d107      	bne.n	8008b38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b28:	4b36      	ldr	r3, [pc, #216]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d115      	bne.n	8008b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e0ea      	b.n	8008d0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d107      	bne.n	8008b50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b40:	4b30      	ldr	r3, [pc, #192]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d109      	bne.n	8008b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e0de      	b.n	8008d0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b50:	4b2c      	ldr	r3, [pc, #176]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e0d6      	b.n	8008d0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b60:	4b28      	ldr	r3, [pc, #160]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	f023 0207 	bic.w	r2, r3, #7
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4925      	ldr	r1, [pc, #148]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b72:	f7f9 fd45 	bl	8002600 <HAL_GetTick>
 8008b76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b78:	e00a      	b.n	8008b90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b7a:	f7f9 fd41 	bl	8002600 <HAL_GetTick>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d901      	bls.n	8008b90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e0be      	b.n	8008d0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b90:	4b1c      	ldr	r3, [pc, #112]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d1eb      	bne.n	8008b7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d010      	beq.n	8008bd0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68da      	ldr	r2, [r3, #12]
 8008bb2:	4b14      	ldr	r3, [pc, #80]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d208      	bcs.n	8008bd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bbe:	4b11      	ldr	r3, [pc, #68]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	f023 020f 	bic.w	r2, r3, #15
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	490e      	ldr	r1, [pc, #56]	@ (8008c04 <HAL_RCC_ClockConfig+0x244>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008c00 <HAL_RCC_ClockConfig+0x240>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 030f 	and.w	r3, r3, #15
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d214      	bcs.n	8008c08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bde:	4b08      	ldr	r3, [pc, #32]	@ (8008c00 <HAL_RCC_ClockConfig+0x240>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f023 020f 	bic.w	r2, r3, #15
 8008be6:	4906      	ldr	r1, [pc, #24]	@ (8008c00 <HAL_RCC_ClockConfig+0x240>)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bee:	4b04      	ldr	r3, [pc, #16]	@ (8008c00 <HAL_RCC_ClockConfig+0x240>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 030f 	and.w	r3, r3, #15
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d005      	beq.n	8008c08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e086      	b.n	8008d0e <HAL_RCC_ClockConfig+0x34e>
 8008c00:	52002000 	.word	0x52002000
 8008c04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d010      	beq.n	8008c36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	4b3f      	ldr	r3, [pc, #252]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d208      	bcs.n	8008c36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c24:	4b3c      	ldr	r3, [pc, #240]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	4939      	ldr	r1, [pc, #228]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d010      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	695a      	ldr	r2, [r3, #20]
 8008c46:	4b34      	ldr	r3, [pc, #208]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d208      	bcs.n	8008c64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c52:	4b31      	ldr	r3, [pc, #196]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	492e      	ldr	r1, [pc, #184]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0310 	and.w	r3, r3, #16
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d010      	beq.n	8008c92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	4b28      	ldr	r3, [pc, #160]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d208      	bcs.n	8008c92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c80:	4b25      	ldr	r3, [pc, #148]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	4922      	ldr	r1, [pc, #136]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0320 	and.w	r3, r3, #32
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d010      	beq.n	8008cc0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69da      	ldr	r2, [r3, #28]
 8008ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d208      	bcs.n	8008cc0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008cae:	4b1a      	ldr	r3, [pc, #104]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	4917      	ldr	r1, [pc, #92]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008cc0:	f000 f89e 	bl	8008e00 <HAL_RCC_GetSysClockFreq>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	4b14      	ldr	r3, [pc, #80]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	0a1b      	lsrs	r3, r3, #8
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	4912      	ldr	r1, [pc, #72]	@ (8008d1c <HAL_RCC_ClockConfig+0x35c>)
 8008cd2:	5ccb      	ldrb	r3, [r1, r3]
 8008cd4:	f003 031f 	and.w	r3, r3, #31
 8008cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cdc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008cde:	4b0e      	ldr	r3, [pc, #56]	@ (8008d18 <HAL_RCC_ClockConfig+0x358>)
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	f003 030f 	and.w	r3, r3, #15
 8008ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8008d1c <HAL_RCC_ClockConfig+0x35c>)
 8008ce8:	5cd3      	ldrb	r3, [r2, r3]
 8008cea:	f003 031f 	and.w	r3, r3, #31
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8008d20 <HAL_RCC_ClockConfig+0x360>)
 8008cf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8008d24 <HAL_RCC_ClockConfig+0x364>)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8008d28 <HAL_RCC_ClockConfig+0x368>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f9 fc32 	bl	800256c <HAL_InitTick>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	58024400 	.word	0x58024400
 8008d1c:	080117ac 	.word	0x080117ac
 8008d20:	24000004 	.word	0x24000004
 8008d24:	24000000 	.word	0x24000000
 8008d28:	24000008 	.word	0x24000008

08008d2c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08c      	sub	sp, #48	@ 0x30
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d12a      	bne.n	8008d94 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8008df4 <HAL_RCC_MCOConfig+0xc8>)
 8008d40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008d44:	4a2b      	ldr	r2, [pc, #172]	@ (8008df4 <HAL_RCC_MCOConfig+0xc8>)
 8008d46:	f043 0301 	orr.w	r3, r3, #1
 8008d4a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8008d4e:	4b29      	ldr	r3, [pc, #164]	@ (8008df4 <HAL_RCC_MCOConfig+0xc8>)
 8008d50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	61bb      	str	r3, [r7, #24]
 8008d5a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d62:	2302      	movs	r3, #2
 8008d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d66:	2303      	movs	r3, #3
 8008d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008d72:	f107 031c 	add.w	r3, r7, #28
 8008d76:	4619      	mov	r1, r3
 8008d78:	481f      	ldr	r0, [pc, #124]	@ (8008df8 <HAL_RCC_MCOConfig+0xcc>)
 8008d7a:	f7fc fdd3 	bl	8005924 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008df4 <HAL_RCC_MCOConfig+0xc8>)
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	430b      	orrs	r3, r1
 8008d8c:	4919      	ldr	r1, [pc, #100]	@ (8008df4 <HAL_RCC_MCOConfig+0xc8>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8008d92:	e02a      	b.n	8008dea <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008d94:	4b17      	ldr	r3, [pc, #92]	@ (8008df4 <HAL_RCC_MCOConfig+0xc8>)
 8008d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008d9a:	4a16      	ldr	r2, [pc, #88]	@ (8008df4 <HAL_RCC_MCOConfig+0xc8>)
 8008d9c:	f043 0304 	orr.w	r3, r3, #4
 8008da0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8008da4:	4b13      	ldr	r3, [pc, #76]	@ (8008df4 <HAL_RCC_MCOConfig+0xc8>)
 8008da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008daa:	f003 0304 	and.w	r3, r3, #4
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008db2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008db8:	2302      	movs	r3, #2
 8008dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008dc8:	f107 031c 	add.w	r3, r7, #28
 8008dcc:	4619      	mov	r1, r3
 8008dce:	480b      	ldr	r0, [pc, #44]	@ (8008dfc <HAL_RCC_MCOConfig+0xd0>)
 8008dd0:	f7fc fda8 	bl	8005924 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8008dd4:	4b07      	ldr	r3, [pc, #28]	@ (8008df4 <HAL_RCC_MCOConfig+0xc8>)
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	01d9      	lsls	r1, r3, #7
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	430b      	orrs	r3, r1
 8008de4:	4903      	ldr	r1, [pc, #12]	@ (8008df4 <HAL_RCC_MCOConfig+0xc8>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	610b      	str	r3, [r1, #16]
}
 8008dea:	bf00      	nop
 8008dec:	3730      	adds	r7, #48	@ 0x30
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	58024400 	.word	0x58024400
 8008df8:	58020000 	.word	0x58020000
 8008dfc:	58020800 	.word	0x58020800

08008e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b089      	sub	sp, #36	@ 0x24
 8008e04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e06:	4bb3      	ldr	r3, [pc, #716]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e0e:	2b18      	cmp	r3, #24
 8008e10:	f200 8155 	bhi.w	80090be <HAL_RCC_GetSysClockFreq+0x2be>
 8008e14:	a201      	add	r2, pc, #4	@ (adr r2, 8008e1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e81 	.word	0x08008e81
 8008e20:	080090bf 	.word	0x080090bf
 8008e24:	080090bf 	.word	0x080090bf
 8008e28:	080090bf 	.word	0x080090bf
 8008e2c:	080090bf 	.word	0x080090bf
 8008e30:	080090bf 	.word	0x080090bf
 8008e34:	080090bf 	.word	0x080090bf
 8008e38:	080090bf 	.word	0x080090bf
 8008e3c:	08008ea7 	.word	0x08008ea7
 8008e40:	080090bf 	.word	0x080090bf
 8008e44:	080090bf 	.word	0x080090bf
 8008e48:	080090bf 	.word	0x080090bf
 8008e4c:	080090bf 	.word	0x080090bf
 8008e50:	080090bf 	.word	0x080090bf
 8008e54:	080090bf 	.word	0x080090bf
 8008e58:	080090bf 	.word	0x080090bf
 8008e5c:	08008ead 	.word	0x08008ead
 8008e60:	080090bf 	.word	0x080090bf
 8008e64:	080090bf 	.word	0x080090bf
 8008e68:	080090bf 	.word	0x080090bf
 8008e6c:	080090bf 	.word	0x080090bf
 8008e70:	080090bf 	.word	0x080090bf
 8008e74:	080090bf 	.word	0x080090bf
 8008e78:	080090bf 	.word	0x080090bf
 8008e7c:	08008eb3 	.word	0x08008eb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e80:	4b94      	ldr	r3, [pc, #592]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0320 	and.w	r3, r3, #32
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d009      	beq.n	8008ea0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e8c:	4b91      	ldr	r3, [pc, #580]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	08db      	lsrs	r3, r3, #3
 8008e92:	f003 0303 	and.w	r3, r3, #3
 8008e96:	4a90      	ldr	r2, [pc, #576]	@ (80090d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e98:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008e9e:	e111      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ea0:	4b8d      	ldr	r3, [pc, #564]	@ (80090d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ea2:	61bb      	str	r3, [r7, #24]
      break;
 8008ea4:	e10e      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80090dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ea8:	61bb      	str	r3, [r7, #24]
      break;
 8008eaa:	e10b      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008eac:	4b8c      	ldr	r3, [pc, #560]	@ (80090e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008eae:	61bb      	str	r3, [r7, #24]
      break;
 8008eb0:	e108      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008eb2:	4b88      	ldr	r3, [pc, #544]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008ebc:	4b85      	ldr	r3, [pc, #532]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec0:	091b      	lsrs	r3, r3, #4
 8008ec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ec6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ec8:	4b82      	ldr	r3, [pc, #520]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ed2:	4b80      	ldr	r3, [pc, #512]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ed6:	08db      	lsrs	r3, r3, #3
 8008ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	fb02 f303 	mul.w	r3, r2, r3
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 80e1 	beq.w	80090b8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	f000 8083 	beq.w	8009004 <HAL_RCC_GetSysClockFreq+0x204>
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	f200 80a1 	bhi.w	8009048 <HAL_RCC_GetSysClockFreq+0x248>
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_RCC_GetSysClockFreq+0x114>
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d056      	beq.n	8008fc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008f12:	e099      	b.n	8009048 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f14:	4b6f      	ldr	r3, [pc, #444]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d02d      	beq.n	8008f7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f20:	4b6c      	ldr	r3, [pc, #432]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	08db      	lsrs	r3, r3, #3
 8008f26:	f003 0303 	and.w	r3, r3, #3
 8008f2a:	4a6b      	ldr	r2, [pc, #428]	@ (80090d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	ee07 3a90 	vmov	s15, r3
 8008f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4a:	4b62      	ldr	r3, [pc, #392]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008f7a:	e087      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80090e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f8e:	4b51      	ldr	r3, [pc, #324]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fa2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fbe:	e065      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80090ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd2:	4b40      	ldr	r3, [pc, #256]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fe6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009002:	e043      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	ee07 3a90 	vmov	s15, r3
 800900a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80090f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009016:	4b2f      	ldr	r3, [pc, #188]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800901e:	ee07 3a90 	vmov	s15, r3
 8009022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009026:	ed97 6a02 	vldr	s12, [r7, #8]
 800902a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800902e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800903a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800903e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009046:	e021      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009052:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80090ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8009056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905a:	4b1e      	ldr	r3, [pc, #120]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800905c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800905e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009062:	ee07 3a90 	vmov	s15, r3
 8009066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906a:	ed97 6a02 	vldr	s12, [r7, #8]
 800906e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800907e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800908a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800908c:	4b11      	ldr	r3, [pc, #68]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800908e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009090:	0a5b      	lsrs	r3, r3, #9
 8009092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009096:	3301      	adds	r3, #1
 8009098:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	ee07 3a90 	vmov	s15, r3
 80090a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80090a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090b0:	ee17 3a90 	vmov	r3, s15
 80090b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80090b6:	e005      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61bb      	str	r3, [r7, #24]
      break;
 80090bc:	e002      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80090be:	4b07      	ldr	r3, [pc, #28]	@ (80090dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090c0:	61bb      	str	r3, [r7, #24]
      break;
 80090c2:	bf00      	nop
  }

  return sysclockfreq;
 80090c4:	69bb      	ldr	r3, [r7, #24]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3724      	adds	r7, #36	@ 0x24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	58024400 	.word	0x58024400
 80090d8:	03d09000 	.word	0x03d09000
 80090dc:	003d0900 	.word	0x003d0900
 80090e0:	007a1200 	.word	0x007a1200
 80090e4:	46000000 	.word	0x46000000
 80090e8:	4c742400 	.word	0x4c742400
 80090ec:	4a742400 	.word	0x4a742400
 80090f0:	4af42400 	.word	0x4af42400

080090f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80090fa:	f7ff fe81 	bl	8008e00 <HAL_RCC_GetSysClockFreq>
 80090fe:	4602      	mov	r2, r0
 8009100:	4b10      	ldr	r3, [pc, #64]	@ (8009144 <HAL_RCC_GetHCLKFreq+0x50>)
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	0a1b      	lsrs	r3, r3, #8
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	490f      	ldr	r1, [pc, #60]	@ (8009148 <HAL_RCC_GetHCLKFreq+0x54>)
 800910c:	5ccb      	ldrb	r3, [r1, r3]
 800910e:	f003 031f 	and.w	r3, r3, #31
 8009112:	fa22 f303 	lsr.w	r3, r2, r3
 8009116:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009118:	4b0a      	ldr	r3, [pc, #40]	@ (8009144 <HAL_RCC_GetHCLKFreq+0x50>)
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	4a09      	ldr	r2, [pc, #36]	@ (8009148 <HAL_RCC_GetHCLKFreq+0x54>)
 8009122:	5cd3      	ldrb	r3, [r2, r3]
 8009124:	f003 031f 	and.w	r3, r3, #31
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	fa22 f303 	lsr.w	r3, r2, r3
 800912e:	4a07      	ldr	r2, [pc, #28]	@ (800914c <HAL_RCC_GetHCLKFreq+0x58>)
 8009130:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009132:	4a07      	ldr	r2, [pc, #28]	@ (8009150 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009138:	4b04      	ldr	r3, [pc, #16]	@ (800914c <HAL_RCC_GetHCLKFreq+0x58>)
 800913a:	681b      	ldr	r3, [r3, #0]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	58024400 	.word	0x58024400
 8009148:	080117ac 	.word	0x080117ac
 800914c:	24000004 	.word	0x24000004
 8009150:	24000000 	.word	0x24000000

08009154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8009158:	f7ff ffcc 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 800915c:	4602      	mov	r2, r0
 800915e:	4b06      	ldr	r3, [pc, #24]	@ (8009178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	091b      	lsrs	r3, r3, #4
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	4904      	ldr	r1, [pc, #16]	@ (800917c <HAL_RCC_GetPCLK1Freq+0x28>)
 800916a:	5ccb      	ldrb	r3, [r1, r3]
 800916c:	f003 031f 	and.w	r3, r3, #31
 8009170:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009174:	4618      	mov	r0, r3
 8009176:	bd80      	pop	{r7, pc}
 8009178:	58024400 	.word	0x58024400
 800917c:	080117ac 	.word	0x080117ac

08009180 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009184:	b0c8      	sub	sp, #288	@ 0x120
 8009186:	af00      	add	r7, sp, #0
 8009188:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800918c:	2300      	movs	r3, #0
 800918e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009192:	2300      	movs	r3, #0
 8009194:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80091a4:	2500      	movs	r5, #0
 80091a6:	ea54 0305 	orrs.w	r3, r4, r5
 80091aa:	d049      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80091ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091b6:	d02f      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80091b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091bc:	d828      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80091be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091c2:	d01a      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80091c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091c8:	d822      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80091ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091d2:	d007      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80091d4:	e01c      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d6:	4ba7      	ldr	r3, [pc, #668]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091da:	4aa6      	ldr	r2, [pc, #664]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80091e2:	e01a      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091e8:	3308      	adds	r3, #8
 80091ea:	2102      	movs	r1, #2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f002 fa6d 	bl	800b6cc <RCCEx_PLL2_Config>
 80091f2:	4603      	mov	r3, r0
 80091f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80091f8:	e00f      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091fe:	3328      	adds	r3, #40	@ 0x28
 8009200:	2102      	movs	r1, #2
 8009202:	4618      	mov	r0, r3
 8009204:	f002 fb14 	bl	800b830 <RCCEx_PLL3_Config>
 8009208:	4603      	mov	r3, r0
 800920a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800920e:	e004      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009216:	e000      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800921a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10a      	bne.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009222:	4b94      	ldr	r3, [pc, #592]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009226:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800922a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800922e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009230:	4a90      	ldr	r2, [pc, #576]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009232:	430b      	orrs	r3, r1
 8009234:	6513      	str	r3, [r2, #80]	@ 0x50
 8009236:	e003      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009238:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800923c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800924c:	f04f 0900 	mov.w	r9, #0
 8009250:	ea58 0309 	orrs.w	r3, r8, r9
 8009254:	d047      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800925a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800925c:	2b04      	cmp	r3, #4
 800925e:	d82a      	bhi.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009260:	a201      	add	r2, pc, #4	@ (adr r2, 8009268 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009266:	bf00      	nop
 8009268:	0800927d 	.word	0x0800927d
 800926c:	0800928b 	.word	0x0800928b
 8009270:	080092a1 	.word	0x080092a1
 8009274:	080092bf 	.word	0x080092bf
 8009278:	080092bf 	.word	0x080092bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800927c:	4b7d      	ldr	r3, [pc, #500]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800927e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009280:	4a7c      	ldr	r2, [pc, #496]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009288:	e01a      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800928a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800928e:	3308      	adds	r3, #8
 8009290:	2100      	movs	r1, #0
 8009292:	4618      	mov	r0, r3
 8009294:	f002 fa1a 	bl	800b6cc <RCCEx_PLL2_Config>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800929e:	e00f      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092a4:	3328      	adds	r3, #40	@ 0x28
 80092a6:	2100      	movs	r1, #0
 80092a8:	4618      	mov	r0, r3
 80092aa:	f002 fac1 	bl	800b830 <RCCEx_PLL3_Config>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092b4:	e004      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092bc:	e000      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80092be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092c8:	4b6a      	ldr	r3, [pc, #424]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092cc:	f023 0107 	bic.w	r1, r3, #7
 80092d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d6:	4a67      	ldr	r2, [pc, #412]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092d8:	430b      	orrs	r3, r1
 80092da:	6513      	str	r3, [r2, #80]	@ 0x50
 80092dc:	e003      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80092e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80092f2:	f04f 0b00 	mov.w	fp, #0
 80092f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80092fa:	d054      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80092fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009302:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009306:	d036      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009308:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800930c:	d82f      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800930e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009312:	d032      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009318:	d829      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800931a:	2bc0      	cmp	r3, #192	@ 0xc0
 800931c:	d02f      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800931e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009320:	d825      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009322:	2b80      	cmp	r3, #128	@ 0x80
 8009324:	d018      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009326:	2b80      	cmp	r3, #128	@ 0x80
 8009328:	d821      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800932e:	2b40      	cmp	r3, #64	@ 0x40
 8009330:	d007      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8009332:	e01c      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009334:	4b4f      	ldr	r3, [pc, #316]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	4a4e      	ldr	r2, [pc, #312]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800933a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800933e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009340:	e01e      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009346:	3308      	adds	r3, #8
 8009348:	2100      	movs	r1, #0
 800934a:	4618      	mov	r0, r3
 800934c:	f002 f9be 	bl	800b6cc <RCCEx_PLL2_Config>
 8009350:	4603      	mov	r3, r0
 8009352:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009356:	e013      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800935c:	3328      	adds	r3, #40	@ 0x28
 800935e:	2100      	movs	r1, #0
 8009360:	4618      	mov	r0, r3
 8009362:	f002 fa65 	bl	800b830 <RCCEx_PLL3_Config>
 8009366:	4603      	mov	r3, r0
 8009368:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800936c:	e008      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009374:	e004      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009376:	bf00      	nop
 8009378:	e002      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800937a:	bf00      	nop
 800937c:	e000      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800937e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009380:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10a      	bne.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8009388:	4b3a      	ldr	r3, [pc, #232]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800938a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800938c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009396:	4a37      	ldr	r2, [pc, #220]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009398:	430b      	orrs	r3, r1
 800939a:	6513      	str	r3, [r2, #80]	@ 0x50
 800939c:	e003      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800939e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80093a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80093b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80093b6:	2300      	movs	r3, #0
 80093b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80093bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80093c0:	460b      	mov	r3, r1
 80093c2:	4313      	orrs	r3, r2
 80093c4:	d05c      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80093c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093cc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80093d0:	d03b      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093d2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80093d6:	d834      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80093d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093dc:	d037      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80093de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093e2:	d82e      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80093e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093e8:	d033      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80093ea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093ee:	d828      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80093f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093f4:	d01a      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80093f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093fa:	d822      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8009400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009404:	d007      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8009406:	e01c      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009408:	4b1a      	ldr	r3, [pc, #104]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800940a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940c:	4a19      	ldr	r2, [pc, #100]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800940e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009414:	e01e      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800941a:	3308      	adds	r3, #8
 800941c:	2100      	movs	r1, #0
 800941e:	4618      	mov	r0, r3
 8009420:	f002 f954 	bl	800b6cc <RCCEx_PLL2_Config>
 8009424:	4603      	mov	r3, r0
 8009426:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800942a:	e013      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800942c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009430:	3328      	adds	r3, #40	@ 0x28
 8009432:	2100      	movs	r1, #0
 8009434:	4618      	mov	r0, r3
 8009436:	f002 f9fb 	bl	800b830 <RCCEx_PLL3_Config>
 800943a:	4603      	mov	r3, r0
 800943c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009440:	e008      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009448:	e004      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800944a:	bf00      	nop
 800944c:	e002      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800944e:	bf00      	nop
 8009450:	e000      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009454:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10d      	bne.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800945c:	4b05      	ldr	r3, [pc, #20]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800945e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009460:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8009464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800946a:	4a02      	ldr	r2, [pc, #8]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800946c:	430b      	orrs	r3, r1
 800946e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009470:	e006      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009472:	bf00      	nop
 8009474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009478:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800947c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800948c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009490:	2300      	movs	r3, #0
 8009492:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009496:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800949a:	460b      	mov	r3, r1
 800949c:	4313      	orrs	r3, r2
 800949e:	d03a      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80094a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094a6:	2b30      	cmp	r3, #48	@ 0x30
 80094a8:	d01f      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80094aa:	2b30      	cmp	r3, #48	@ 0x30
 80094ac:	d819      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80094ae:	2b20      	cmp	r3, #32
 80094b0:	d00c      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80094b2:	2b20      	cmp	r3, #32
 80094b4:	d815      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d019      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80094ba:	2b10      	cmp	r3, #16
 80094bc:	d111      	bne.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094be:	4bae      	ldr	r3, [pc, #696]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c2:	4aad      	ldr	r2, [pc, #692]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80094ca:	e011      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094d0:	3308      	adds	r3, #8
 80094d2:	2102      	movs	r1, #2
 80094d4:	4618      	mov	r0, r3
 80094d6:	f002 f8f9 	bl	800b6cc <RCCEx_PLL2_Config>
 80094da:	4603      	mov	r3, r0
 80094dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80094e0:	e006      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80094e8:	e002      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80094ea:	bf00      	nop
 80094ec:	e000      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80094ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10a      	bne.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80094f8:	4b9f      	ldr	r3, [pc, #636]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009506:	4a9c      	ldr	r2, [pc, #624]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009508:	430b      	orrs	r3, r1
 800950a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800950c:	e003      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009512:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009516:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009522:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009526:	2300      	movs	r3, #0
 8009528:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800952c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009530:	460b      	mov	r3, r1
 8009532:	4313      	orrs	r3, r2
 8009534:	d051      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800953a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800953c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009540:	d035      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009546:	d82e      	bhi.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009548:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800954c:	d031      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800954e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009552:	d828      	bhi.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009558:	d01a      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800955a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800955e:	d822      	bhi.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009568:	d007      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800956a:	e01c      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800956c:	4b82      	ldr	r3, [pc, #520]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800956e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009570:	4a81      	ldr	r2, [pc, #516]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009578:	e01c      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800957a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800957e:	3308      	adds	r3, #8
 8009580:	2100      	movs	r1, #0
 8009582:	4618      	mov	r0, r3
 8009584:	f002 f8a2 	bl	800b6cc <RCCEx_PLL2_Config>
 8009588:	4603      	mov	r3, r0
 800958a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800958e:	e011      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009594:	3328      	adds	r3, #40	@ 0x28
 8009596:	2100      	movs	r1, #0
 8009598:	4618      	mov	r0, r3
 800959a:	f002 f949 	bl	800b830 <RCCEx_PLL3_Config>
 800959e:	4603      	mov	r3, r0
 80095a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80095a4:	e006      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80095ac:	e002      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80095ae:	bf00      	nop
 80095b0:	e000      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80095b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80095bc:	4b6e      	ldr	r3, [pc, #440]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80095be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80095c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ca:	4a6b      	ldr	r2, [pc, #428]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80095d0:	e003      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80095da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80095e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095ea:	2300      	movs	r3, #0
 80095ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80095f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80095f4:	460b      	mov	r3, r1
 80095f6:	4313      	orrs	r3, r2
 80095f8:	d053      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80095fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009604:	d033      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8009606:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800960a:	d82c      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800960c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009610:	d02f      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8009612:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009616:	d826      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009618:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800961c:	d02b      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800961e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009622:	d820      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009628:	d012      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800962a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800962e:	d81a      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009630:	2b00      	cmp	r3, #0
 8009632:	d022      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8009634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009638:	d115      	bne.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800963a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800963e:	3308      	adds	r3, #8
 8009640:	2101      	movs	r1, #1
 8009642:	4618      	mov	r0, r3
 8009644:	f002 f842 	bl	800b6cc <RCCEx_PLL2_Config>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800964e:	e015      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009654:	3328      	adds	r3, #40	@ 0x28
 8009656:	2101      	movs	r1, #1
 8009658:	4618      	mov	r0, r3
 800965a:	f002 f8e9 	bl	800b830 <RCCEx_PLL3_Config>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009664:	e00a      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800966c:	e006      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800966e:	bf00      	nop
 8009670:	e004      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009672:	bf00      	nop
 8009674:	e002      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009676:	bf00      	nop
 8009678:	e000      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800967a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800967c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009684:	4b3c      	ldr	r3, [pc, #240]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009688:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800968c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009692:	4a39      	ldr	r2, [pc, #228]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009694:	430b      	orrs	r3, r1
 8009696:	6513      	str	r3, [r2, #80]	@ 0x50
 8009698:	e003      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800969e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80096a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80096ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80096b2:	2300      	movs	r3, #0
 80096b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096b8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80096bc:	460b      	mov	r3, r1
 80096be:	4313      	orrs	r3, r2
 80096c0:	d060      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80096c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096ca:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80096ce:	d039      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80096d0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80096d4:	d832      	bhi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80096d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096da:	d035      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80096dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096e0:	d82c      	bhi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80096e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e6:	d031      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80096e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ec:	d826      	bhi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80096ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096f2:	d02d      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80096f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096f8:	d820      	bhi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80096fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096fe:	d012      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009704:	d81a      	bhi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009706:	2b00      	cmp	r3, #0
 8009708:	d024      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800970a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800970e:	d115      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009714:	3308      	adds	r3, #8
 8009716:	2101      	movs	r1, #1
 8009718:	4618      	mov	r0, r3
 800971a:	f001 ffd7 	bl	800b6cc <RCCEx_PLL2_Config>
 800971e:	4603      	mov	r3, r0
 8009720:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009724:	e017      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800972a:	3328      	adds	r3, #40	@ 0x28
 800972c:	2101      	movs	r1, #1
 800972e:	4618      	mov	r0, r3
 8009730:	f002 f87e 	bl	800b830 <RCCEx_PLL3_Config>
 8009734:	4603      	mov	r3, r0
 8009736:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800973a:	e00c      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009742:	e008      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009744:	bf00      	nop
 8009746:	e006      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009748:	bf00      	nop
 800974a:	e004      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800974c:	bf00      	nop
 800974e:	e002      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009750:	bf00      	nop
 8009752:	e000      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009756:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10e      	bne.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800975e:	4b06      	ldr	r3, [pc, #24]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009762:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800976a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800976e:	4a02      	ldr	r2, [pc, #8]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009770:	430b      	orrs	r3, r1
 8009772:	6593      	str	r3, [r2, #88]	@ 0x58
 8009774:	e006      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009776:	bf00      	nop
 8009778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800977c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009780:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009794:	2300      	movs	r3, #0
 8009796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800979a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800979e:	460b      	mov	r3, r1
 80097a0:	4313      	orrs	r3, r2
 80097a2:	d037      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80097a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097ae:	d00e      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80097b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097b4:	d816      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d018      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80097ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097be:	d111      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097c0:	4bc4      	ldr	r3, [pc, #784]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c4:	4ac3      	ldr	r2, [pc, #780]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80097cc:	e00f      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097d2:	3308      	adds	r3, #8
 80097d4:	2101      	movs	r1, #1
 80097d6:	4618      	mov	r0, r3
 80097d8:	f001 ff78 	bl	800b6cc <RCCEx_PLL2_Config>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80097e2:	e004      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097ea:	e000      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80097ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80097f6:	4bb7      	ldr	r3, [pc, #732]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80097fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009802:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009804:	4ab3      	ldr	r2, [pc, #716]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009806:	430b      	orrs	r3, r1
 8009808:	6513      	str	r3, [r2, #80]	@ 0x50
 800980a:	e003      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800980c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009810:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009824:	2300      	movs	r3, #0
 8009826:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800982a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800982e:	460b      	mov	r3, r1
 8009830:	4313      	orrs	r3, r2
 8009832:	d039      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800983a:	2b03      	cmp	r3, #3
 800983c:	d81c      	bhi.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800983e:	a201      	add	r2, pc, #4	@ (adr r2, 8009844 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009881 	.word	0x08009881
 8009848:	08009855 	.word	0x08009855
 800984c:	08009863 	.word	0x08009863
 8009850:	08009881 	.word	0x08009881
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009854:	4b9f      	ldr	r3, [pc, #636]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009858:	4a9e      	ldr	r2, [pc, #632]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800985a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800985e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009860:	e00f      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009866:	3308      	adds	r3, #8
 8009868:	2102      	movs	r1, #2
 800986a:	4618      	mov	r0, r3
 800986c:	f001 ff2e 	bl	800b6cc <RCCEx_PLL2_Config>
 8009870:	4603      	mov	r3, r0
 8009872:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009876:	e004      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800987e:	e000      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009882:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10a      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800988a:	4b92      	ldr	r3, [pc, #584]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800988c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800988e:	f023 0103 	bic.w	r1, r3, #3
 8009892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009898:	4a8e      	ldr	r2, [pc, #568]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800989a:	430b      	orrs	r3, r1
 800989c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800989e:	e003      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80098b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098b8:	2300      	movs	r3, #0
 80098ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80098be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80098c2:	460b      	mov	r3, r1
 80098c4:	4313      	orrs	r3, r2
 80098c6:	f000 8099 	beq.w	80099fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098ca:	4b83      	ldr	r3, [pc, #524]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a82      	ldr	r2, [pc, #520]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80098d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098d6:	f7f8 fe93 	bl	8002600 <HAL_GetTick>
 80098da:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098de:	e00b      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098e0:	f7f8 fe8e 	bl	8002600 <HAL_GetTick>
 80098e4:	4602      	mov	r2, r0
 80098e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	2b64      	cmp	r3, #100	@ 0x64
 80098ee:	d903      	bls.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80098f6:	e005      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098f8:	4b77      	ldr	r3, [pc, #476]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0ed      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009904:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009908:	2b00      	cmp	r3, #0
 800990a:	d173      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800990c:	4b71      	ldr	r3, [pc, #452]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800990e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009914:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009918:	4053      	eors	r3, r2
 800991a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800991e:	2b00      	cmp	r3, #0
 8009920:	d015      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009922:	4b6c      	ldr	r3, [pc, #432]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800992a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800992e:	4b69      	ldr	r3, [pc, #420]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009932:	4a68      	ldr	r2, [pc, #416]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009938:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800993a:	4b66      	ldr	r3, [pc, #408]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800993c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800993e:	4a65      	ldr	r2, [pc, #404]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009944:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009946:	4a63      	ldr	r2, [pc, #396]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800994e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800995a:	d118      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995c:	f7f8 fe50 	bl	8002600 <HAL_GetTick>
 8009960:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009964:	e00d      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009966:	f7f8 fe4b 	bl	8002600 <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009970:	1ad2      	subs	r2, r2, r3
 8009972:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009976:	429a      	cmp	r2, r3
 8009978:	d903      	bls.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009980:	e005      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009982:	4b54      	ldr	r3, [pc, #336]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009986:	f003 0302 	and.w	r3, r3, #2
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0eb      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800998e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009992:	2b00      	cmp	r3, #0
 8009994:	d129      	bne.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800999a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800999e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099a6:	d10e      	bne.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80099a8:	4b4a      	ldr	r3, [pc, #296]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80099b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80099b8:	091a      	lsrs	r2, r3, #4
 80099ba:	4b48      	ldr	r3, [pc, #288]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80099bc:	4013      	ands	r3, r2
 80099be:	4a45      	ldr	r2, [pc, #276]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099c0:	430b      	orrs	r3, r1
 80099c2:	6113      	str	r3, [r2, #16]
 80099c4:	e005      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80099c6:	4b43      	ldr	r3, [pc, #268]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	4a42      	ldr	r2, [pc, #264]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80099d0:	6113      	str	r3, [r2, #16]
 80099d2:	4b40      	ldr	r3, [pc, #256]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80099d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80099de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099e2:	4a3c      	ldr	r2, [pc, #240]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099e4:	430b      	orrs	r3, r1
 80099e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80099e8:	e008      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80099f2:	e003      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f002 0301 	and.w	r3, r2, #1
 8009a08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	f000 8090 	beq.w	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a26:	2b28      	cmp	r3, #40	@ 0x28
 8009a28:	d870      	bhi.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009b15 	.word	0x08009b15
 8009a34:	08009b0d 	.word	0x08009b0d
 8009a38:	08009b0d 	.word	0x08009b0d
 8009a3c:	08009b0d 	.word	0x08009b0d
 8009a40:	08009b0d 	.word	0x08009b0d
 8009a44:	08009b0d 	.word	0x08009b0d
 8009a48:	08009b0d 	.word	0x08009b0d
 8009a4c:	08009b0d 	.word	0x08009b0d
 8009a50:	08009ae1 	.word	0x08009ae1
 8009a54:	08009b0d 	.word	0x08009b0d
 8009a58:	08009b0d 	.word	0x08009b0d
 8009a5c:	08009b0d 	.word	0x08009b0d
 8009a60:	08009b0d 	.word	0x08009b0d
 8009a64:	08009b0d 	.word	0x08009b0d
 8009a68:	08009b0d 	.word	0x08009b0d
 8009a6c:	08009b0d 	.word	0x08009b0d
 8009a70:	08009af7 	.word	0x08009af7
 8009a74:	08009b0d 	.word	0x08009b0d
 8009a78:	08009b0d 	.word	0x08009b0d
 8009a7c:	08009b0d 	.word	0x08009b0d
 8009a80:	08009b0d 	.word	0x08009b0d
 8009a84:	08009b0d 	.word	0x08009b0d
 8009a88:	08009b0d 	.word	0x08009b0d
 8009a8c:	08009b0d 	.word	0x08009b0d
 8009a90:	08009b15 	.word	0x08009b15
 8009a94:	08009b0d 	.word	0x08009b0d
 8009a98:	08009b0d 	.word	0x08009b0d
 8009a9c:	08009b0d 	.word	0x08009b0d
 8009aa0:	08009b0d 	.word	0x08009b0d
 8009aa4:	08009b0d 	.word	0x08009b0d
 8009aa8:	08009b0d 	.word	0x08009b0d
 8009aac:	08009b0d 	.word	0x08009b0d
 8009ab0:	08009b15 	.word	0x08009b15
 8009ab4:	08009b0d 	.word	0x08009b0d
 8009ab8:	08009b0d 	.word	0x08009b0d
 8009abc:	08009b0d 	.word	0x08009b0d
 8009ac0:	08009b0d 	.word	0x08009b0d
 8009ac4:	08009b0d 	.word	0x08009b0d
 8009ac8:	08009b0d 	.word	0x08009b0d
 8009acc:	08009b0d 	.word	0x08009b0d
 8009ad0:	08009b15 	.word	0x08009b15
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	58024800 	.word	0x58024800
 8009adc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f001 fdef 	bl	800b6cc <RCCEx_PLL2_Config>
 8009aee:	4603      	mov	r3, r0
 8009af0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009af4:	e00f      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009afa:	3328      	adds	r3, #40	@ 0x28
 8009afc:	2101      	movs	r1, #1
 8009afe:	4618      	mov	r0, r3
 8009b00:	f001 fe96 	bl	800b830 <RCCEx_PLL3_Config>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009b0a:	e004      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b12:	e000      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10b      	bne.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b1e:	4bc0      	ldr	r3, [pc, #768]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b2e:	4abc      	ldr	r2, [pc, #752]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b30:	430b      	orrs	r3, r1
 8009b32:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b34:	e003      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	f002 0302 	and.w	r3, r2, #2
 8009b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b4e:	2300      	movs	r3, #0
 8009b50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b54:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	d043      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d824      	bhi.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b70 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009bbd 	.word	0x08009bbd
 8009b74:	08009b89 	.word	0x08009b89
 8009b78:	08009b9f 	.word	0x08009b9f
 8009b7c:	08009bbd 	.word	0x08009bbd
 8009b80:	08009bbd 	.word	0x08009bbd
 8009b84:	08009bbd 	.word	0x08009bbd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	2101      	movs	r1, #1
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 fd9b 	bl	800b6cc <RCCEx_PLL2_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b9c:	e00f      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba2:	3328      	adds	r3, #40	@ 0x28
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f001 fe42 	bl	800b830 <RCCEx_PLL3_Config>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009bb2:	e004      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009bba:	e000      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10b      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009bc6:	4b96      	ldr	r3, [pc, #600]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bca:	f023 0107 	bic.w	r1, r3, #7
 8009bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bd6:	4a92      	ldr	r2, [pc, #584]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bdc:	e003      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009be2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f002 0304 	and.w	r3, r2, #4
 8009bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bfc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4313      	orrs	r3, r2
 8009c04:	d043      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c0e:	2b05      	cmp	r3, #5
 8009c10:	d824      	bhi.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009c12:	a201      	add	r2, pc, #4	@ (adr r2, 8009c18 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c18:	08009c65 	.word	0x08009c65
 8009c1c:	08009c31 	.word	0x08009c31
 8009c20:	08009c47 	.word	0x08009c47
 8009c24:	08009c65 	.word	0x08009c65
 8009c28:	08009c65 	.word	0x08009c65
 8009c2c:	08009c65 	.word	0x08009c65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c34:	3308      	adds	r3, #8
 8009c36:	2101      	movs	r1, #1
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f001 fd47 	bl	800b6cc <RCCEx_PLL2_Config>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009c44:	e00f      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c4a:	3328      	adds	r3, #40	@ 0x28
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 fdee 	bl	800b830 <RCCEx_PLL3_Config>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009c5a:	e004      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009c62:	e000      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10b      	bne.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c6e:	4b6c      	ldr	r3, [pc, #432]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c72:	f023 0107 	bic.w	r1, r3, #7
 8009c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c7e:	4a68      	ldr	r2, [pc, #416]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c80:	430b      	orrs	r3, r1
 8009c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c84:	e003      	b.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	f002 0320 	and.w	r3, r2, #32
 8009c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4313      	orrs	r3, r2
 8009cac:	d055      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cba:	d033      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cc0:	d82c      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cc6:	d02f      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ccc:	d826      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009cce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009cd2:	d02b      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009cd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009cd8:	d820      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cde:	d012      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ce4:	d81a      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d022      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009cea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cee:	d115      	bne.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 fce7 	bl	800b6cc <RCCEx_PLL2_Config>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009d04:	e015      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d0a:	3328      	adds	r3, #40	@ 0x28
 8009d0c:	2102      	movs	r1, #2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 fd8e 	bl	800b830 <RCCEx_PLL3_Config>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009d1a:	e00a      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009d22:	e006      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009d24:	bf00      	nop
 8009d26:	e004      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009d28:	bf00      	nop
 8009d2a:	e002      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009d2c:	bf00      	nop
 8009d2e:	e000      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10b      	bne.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d3a:	4b39      	ldr	r3, [pc, #228]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d3e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d4a:	4a35      	ldr	r2, [pc, #212]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d4c:	430b      	orrs	r3, r1
 8009d4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d50:	e003      	b.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009d74:	460b      	mov	r3, r1
 8009d76:	4313      	orrs	r3, r2
 8009d78:	d058      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d82:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d86:	d033      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009d88:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d8c:	d82c      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d92:	d02f      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d98:	d826      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009d9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d9e:	d02b      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009da0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009da4:	d820      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009da6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009daa:	d012      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009db0:	d81a      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d022      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8009db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dba:	d115      	bne.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f001 fc81 	bl	800b6cc <RCCEx_PLL2_Config>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009dd0:	e015      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd6:	3328      	adds	r3, #40	@ 0x28
 8009dd8:	2102      	movs	r1, #2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 fd28 	bl	800b830 <RCCEx_PLL3_Config>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009de6:	e00a      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009dee:	e006      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009df0:	bf00      	nop
 8009df2:	e004      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009df4:	bf00      	nop
 8009df6:	e002      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009df8:	bf00      	nop
 8009dfa:	e000      	b.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10e      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009e06:	4b06      	ldr	r3, [pc, #24]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e0a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e16:	4a02      	ldr	r2, [pc, #8]	@ (8009e20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e1c:	e006      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009e1e:	bf00      	nop
 8009e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009e46:	460b      	mov	r3, r1
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	d055      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009e54:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009e58:	d033      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009e5a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009e5e:	d82c      	bhi.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e64:	d02f      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e6a:	d826      	bhi.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e6c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e70:	d02b      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009e72:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e76:	d820      	bhi.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e7c:	d012      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009e7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e82:	d81a      	bhi.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d022      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8009e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e8c:	d115      	bne.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e92:	3308      	adds	r3, #8
 8009e94:	2100      	movs	r1, #0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 fc18 	bl	800b6cc <RCCEx_PLL2_Config>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ea2:	e015      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea8:	3328      	adds	r3, #40	@ 0x28
 8009eaa:	2102      	movs	r1, #2
 8009eac:	4618      	mov	r0, r3
 8009eae:	f001 fcbf 	bl	800b830 <RCCEx_PLL3_Config>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009eb8:	e00a      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009ec0:	e006      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009ec2:	bf00      	nop
 8009ec4:	e004      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009ec6:	bf00      	nop
 8009ec8:	e002      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009eca:	bf00      	nop
 8009ecc:	e000      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ed0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10b      	bne.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ed8:	4ba1      	ldr	r3, [pc, #644]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009edc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ee4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009ee8:	4a9d      	ldr	r2, [pc, #628]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009eea:	430b      	orrs	r3, r1
 8009eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8009eee:	e003      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ef4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f002 0308 	and.w	r3, r2, #8
 8009f04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009f12:	460b      	mov	r3, r1
 8009f14:	4313      	orrs	r3, r2
 8009f16:	d01e      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f24:	d10c      	bne.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f2a:	3328      	adds	r3, #40	@ 0x28
 8009f2c:	2102      	movs	r1, #2
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f001 fc7e 	bl	800b830 <RCCEx_PLL3_Config>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009f40:	4b87      	ldr	r3, [pc, #540]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f44:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f50:	4a83      	ldr	r2, [pc, #524]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009f52:	430b      	orrs	r3, r1
 8009f54:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	f002 0310 	and.w	r3, r2, #16
 8009f62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f66:	2300      	movs	r3, #0
 8009f68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009f6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009f70:	460b      	mov	r3, r1
 8009f72:	4313      	orrs	r3, r2
 8009f74:	d01e      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f82:	d10c      	bne.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f88:	3328      	adds	r3, #40	@ 0x28
 8009f8a:	2102      	movs	r1, #2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f001 fc4f 	bl	800b830 <RCCEx_PLL3_Config>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d002      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f9e:	4b70      	ldr	r3, [pc, #448]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009faa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009fae:	4a6c      	ldr	r2, [pc, #432]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	d03e      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009fdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fe0:	d022      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8009fe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fe6:	d81b      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d003      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8009fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ff0:	d00b      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8009ff2:	e015      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f001 fb65 	bl	800b6cc <RCCEx_PLL2_Config>
 800a002:	4603      	mov	r3, r0
 800a004:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a008:	e00f      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a00a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a00e:	3328      	adds	r3, #40	@ 0x28
 800a010:	2102      	movs	r1, #2
 800a012:	4618      	mov	r0, r3
 800a014:	f001 fc0c 	bl	800b830 <RCCEx_PLL3_Config>
 800a018:	4603      	mov	r3, r0
 800a01a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a01e:	e004      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a026:	e000      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800a028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a02a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10b      	bne.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a032:	4b4b      	ldr	r3, [pc, #300]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a036:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a03e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a042:	4a47      	ldr	r2, [pc, #284]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a044:	430b      	orrs	r3, r1
 800a046:	6593      	str	r3, [r2, #88]	@ 0x58
 800a048:	e003      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a04a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a04e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a05e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a060:	2300      	movs	r3, #0
 800a062:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a064:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a068:	460b      	mov	r3, r1
 800a06a:	4313      	orrs	r3, r2
 800a06c:	d03b      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a06e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a076:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a07a:	d01f      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a07c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a080:	d818      	bhi.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a086:	d003      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a088:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a08c:	d007      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a08e:	e011      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a090:	4b33      	ldr	r3, [pc, #204]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a094:	4a32      	ldr	r2, [pc, #200]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a09a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a09c:	e00f      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a09e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0a2:	3328      	adds	r3, #40	@ 0x28
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f001 fbc2 	bl	800b830 <RCCEx_PLL3_Config>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a0b2:	e004      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a0ba:	e000      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a0bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10b      	bne.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a0c6:	4b26      	ldr	r3, [pc, #152]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0d6:	4a22      	ldr	r2, [pc, #136]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0d8:	430b      	orrs	r3, r1
 800a0da:	6553      	str	r3, [r2, #84]	@ 0x54
 800a0dc:	e003      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a0e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a0f2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	677b      	str	r3, [r7, #116]	@ 0x74
 800a0f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4313      	orrs	r3, r2
 800a100:	d034      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a10c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a110:	d007      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a112:	e011      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a114:	4b12      	ldr	r3, [pc, #72]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a118:	4a11      	ldr	r2, [pc, #68]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a11a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a11e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a120:	e00e      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a126:	3308      	adds	r3, #8
 800a128:	2102      	movs	r1, #2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 face 	bl	800b6cc <RCCEx_PLL2_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a136:	e003      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a13e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a140:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10d      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a148:	4b05      	ldr	r3, [pc, #20]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a14a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a14c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a156:	4a02      	ldr	r2, [pc, #8]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a158:	430b      	orrs	r3, r1
 800a15a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a15c:	e006      	b.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a15e:	bf00      	nop
 800a160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a168:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a16c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a17a:	2300      	movs	r3, #0
 800a17c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a17e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a182:	460b      	mov	r3, r1
 800a184:	4313      	orrs	r3, r2
 800a186:	d00c      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a18c:	3328      	adds	r3, #40	@ 0x28
 800a18e:	2102      	movs	r1, #2
 800a190:	4618      	mov	r0, r3
 800a192:	f001 fb4d 	bl	800b830 <RCCEx_PLL3_Config>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a1a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a1ae:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	667b      	str	r3, [r7, #100]	@ 0x64
 800a1b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	d038      	beq.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a1be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1ca:	d018      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a1cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1d0:	d811      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a1d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1d6:	d014      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a1d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1dc:	d80b      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d011      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a1e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1e6:	d106      	bne.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1e8:	4bc3      	ldr	r3, [pc, #780]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ec:	4ac2      	ldr	r2, [pc, #776]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a1ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a1f4:	e008      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a1fc:	e004      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a1fe:	bf00      	nop
 800a200:	e002      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a202:	bf00      	nop
 800a204:	e000      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a206:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a208:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10b      	bne.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a210:	4bb9      	ldr	r3, [pc, #740]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a214:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a220:	4ab5      	ldr	r2, [pc, #724]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a222:	430b      	orrs	r3, r1
 800a224:	6553      	str	r3, [r2, #84]	@ 0x54
 800a226:	e003      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a228:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a22c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a23c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a23e:	2300      	movs	r3, #0
 800a240:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a242:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a246:	460b      	mov	r3, r1
 800a248:	4313      	orrs	r3, r2
 800a24a:	d009      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a24c:	4baa      	ldr	r3, [pc, #680]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a24e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a250:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a25a:	4aa7      	ldr	r2, [pc, #668]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a25c:	430b      	orrs	r3, r1
 800a25e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a26c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a26e:	2300      	movs	r3, #0
 800a270:	657b      	str	r3, [r7, #84]	@ 0x54
 800a272:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a276:	460b      	mov	r3, r1
 800a278:	4313      	orrs	r3, r2
 800a27a:	d009      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a27c:	4b9e      	ldr	r3, [pc, #632]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a280:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a28a:	4a9b      	ldr	r2, [pc, #620]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a28c:	430b      	orrs	r3, r1
 800a28e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a29c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a29e:	2300      	movs	r3, #0
 800a2a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	d009      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a2ac:	4b92      	ldr	r3, [pc, #584]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2b0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800a2b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ba:	4a8f      	ldr	r2, [pc, #572]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2bc:	430b      	orrs	r3, r1
 800a2be:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a2c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a2cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	d00e      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a2dc:	4b86      	ldr	r3, [pc, #536]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	4a85      	ldr	r2, [pc, #532]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a2e6:	6113      	str	r3, [r2, #16]
 800a2e8:	4b83      	ldr	r3, [pc, #524]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2ea:	6919      	ldr	r1, [r3, #16]
 800a2ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a2f4:	4a80      	ldr	r2, [pc, #512]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2f6:	430b      	orrs	r3, r1
 800a2f8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a306:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a308:	2300      	movs	r3, #0
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a30c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a310:	460b      	mov	r3, r1
 800a312:	4313      	orrs	r3, r2
 800a314:	d009      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a316:	4b78      	ldr	r3, [pc, #480]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a31a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a31e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a324:	4a74      	ldr	r2, [pc, #464]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a326:	430b      	orrs	r3, r1
 800a328:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a32a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a336:	633b      	str	r3, [r7, #48]	@ 0x30
 800a338:	2300      	movs	r3, #0
 800a33a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a33c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a340:	460b      	mov	r3, r1
 800a342:	4313      	orrs	r3, r2
 800a344:	d00a      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a346:	4b6c      	ldr	r3, [pc, #432]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a34a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a356:	4a68      	ldr	r2, [pc, #416]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a358:	430b      	orrs	r3, r1
 800a35a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a35c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	2100      	movs	r1, #0
 800a366:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a36e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a372:	460b      	mov	r3, r1
 800a374:	4313      	orrs	r3, r2
 800a376:	d011      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a37c:	3308      	adds	r3, #8
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f001 f9a3 	bl	800b6cc <RCCEx_PLL2_Config>
 800a386:	4603      	mov	r3, r0
 800a388:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a38c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a394:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a398:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a39c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	6239      	str	r1, [r7, #32]
 800a3a8:	f003 0302 	and.w	r3, r3, #2
 800a3ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	d011      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3bc:	3308      	adds	r3, #8
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f001 f983 	bl	800b6cc <RCCEx_PLL2_Config>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a3cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d003      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a3dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	61b9      	str	r1, [r7, #24]
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	61fb      	str	r3, [r7, #28]
 800a3ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	d011      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3fc:	3308      	adds	r3, #8
 800a3fe:	2102      	movs	r1, #2
 800a400:	4618      	mov	r0, r3
 800a402:	f001 f963 	bl	800b6cc <RCCEx_PLL2_Config>
 800a406:	4603      	mov	r3, r0
 800a408:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a40c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a414:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a418:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a41c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	2100      	movs	r1, #0
 800a426:	6139      	str	r1, [r7, #16]
 800a428:	f003 0308 	and.w	r3, r3, #8
 800a42c:	617b      	str	r3, [r7, #20]
 800a42e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a432:	460b      	mov	r3, r1
 800a434:	4313      	orrs	r3, r2
 800a436:	d011      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a43c:	3328      	adds	r3, #40	@ 0x28
 800a43e:	2100      	movs	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f001 f9f5 	bl	800b830 <RCCEx_PLL3_Config>
 800a446:	4603      	mov	r3, r0
 800a448:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800a44c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a454:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a458:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a464:	2100      	movs	r1, #0
 800a466:	60b9      	str	r1, [r7, #8]
 800a468:	f003 0310 	and.w	r3, r3, #16
 800a46c:	60fb      	str	r3, [r7, #12]
 800a46e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a472:	460b      	mov	r3, r1
 800a474:	4313      	orrs	r3, r2
 800a476:	d011      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a47c:	3328      	adds	r3, #40	@ 0x28
 800a47e:	2101      	movs	r1, #1
 800a480:	4618      	mov	r0, r3
 800a482:	f001 f9d5 	bl	800b830 <RCCEx_PLL3_Config>
 800a486:	4603      	mov	r3, r0
 800a488:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a48c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a490:	2b00      	cmp	r3, #0
 800a492:	d003      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a494:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a498:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	6039      	str	r1, [r7, #0]
 800a4a8:	f003 0320 	and.w	r3, r3, #32
 800a4ac:	607b      	str	r3, [r7, #4]
 800a4ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	d011      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4bc:	3328      	adds	r3, #40	@ 0x28
 800a4be:	2102      	movs	r1, #2
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f001 f9b5 	bl	800b830 <RCCEx_PLL3_Config>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a4cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a4dc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e000      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4f6:	bf00      	nop
 800a4f8:	58024400 	.word	0x58024400

0800a4fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b090      	sub	sp, #64	@ 0x40
 800a500:	af00      	add	r7, sp, #0
 800a502:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a50e:	430b      	orrs	r3, r1
 800a510:	f040 8094 	bne.w	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a514:	4b97      	ldr	r3, [pc, #604]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a520:	2b04      	cmp	r3, #4
 800a522:	f200 8087 	bhi.w	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a526:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a541 	.word	0x0800a541
 800a530:	0800a569 	.word	0x0800a569
 800a534:	0800a591 	.word	0x0800a591
 800a538:	0800a62d 	.word	0x0800a62d
 800a53c:	0800a5b9 	.word	0x0800a5b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a540:	4b8c      	ldr	r3, [pc, #560]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a548:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a54c:	d108      	bne.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a54e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a552:	4618      	mov	r0, r3
 800a554:	f000 ff68 	bl	800b428 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a55c:	f000 bc97 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a564:	f000 bc93 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a568:	4b82      	ldr	r3, [pc, #520]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a570:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a574:	d108      	bne.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a576:	f107 0318 	add.w	r3, r7, #24
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 fcac 	bl	800aed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a584:	f000 bc83 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a588:	2300      	movs	r3, #0
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a58c:	f000 bc7f 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a590:	4b78      	ldr	r3, [pc, #480]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a59c:	d108      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a59e:	f107 030c 	add.w	r3, r7, #12
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 fdec 	bl	800b180 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ac:	f000 bc6f 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b4:	f000 bc6b 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5b8:	4b6e      	ldr	r3, [pc, #440]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5c2:	4b6c      	ldr	r3, [pc, #432]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0304 	and.w	r3, r3, #4
 800a5ca:	2b04      	cmp	r3, #4
 800a5cc:	d10c      	bne.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d109      	bne.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d4:	4b67      	ldr	r3, [pc, #412]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	08db      	lsrs	r3, r3, #3
 800a5da:	f003 0303 	and.w	r3, r3, #3
 800a5de:	4a66      	ldr	r2, [pc, #408]	@ (800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5e6:	e01f      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5e8:	4b62      	ldr	r3, [pc, #392]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5f4:	d106      	bne.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5fc:	d102      	bne.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5fe:	4b5f      	ldr	r3, [pc, #380]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a602:	e011      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a604:	4b5b      	ldr	r3, [pc, #364]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a60c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a610:	d106      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a618:	d102      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a61a:	4b59      	ldr	r3, [pc, #356]	@ (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a61e:	e003      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a624:	f000 bc33 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a628:	f000 bc31 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a62c:	4b55      	ldr	r3, [pc, #340]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a630:	f000 bc2d 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800a634:	2300      	movs	r3, #0
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a638:	f000 bc29 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800a63c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a640:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a644:	430b      	orrs	r3, r1
 800a646:	f040 809f 	bne.w	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800a64a:	4b4a      	ldr	r3, [pc, #296]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a64c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a64e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a652:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a65a:	d04d      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a662:	f200 8084 	bhi.w	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a668:	2bc0      	cmp	r3, #192	@ 0xc0
 800a66a:	d07d      	beq.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800a66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a670:	d87d      	bhi.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a674:	2b80      	cmp	r3, #128	@ 0x80
 800a676:	d02d      	beq.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	2b80      	cmp	r3, #128	@ 0x80
 800a67c:	d877      	bhi.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	2b00      	cmp	r3, #0
 800a682:	d003      	beq.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800a684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a686:	2b40      	cmp	r3, #64	@ 0x40
 800a688:	d012      	beq.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a68a:	e070      	b.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a68c:	4b39      	ldr	r3, [pc, #228]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a694:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a698:	d107      	bne.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a69a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fec2 	bl	800b428 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6a8:	e3f1      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ae:	e3ee      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6b0:	4b30      	ldr	r3, [pc, #192]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6bc:	d107      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6be:	f107 0318 	add.w	r3, r7, #24
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 fc08 	bl	800aed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6cc:	e3df      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d2:	e3dc      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6d4:	4b27      	ldr	r3, [pc, #156]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6e0:	d107      	bne.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6e2:	f107 030c 	add.w	r3, r7, #12
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fd4a 	bl	800b180 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f0:	e3cd      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f6:	e3ca      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6f8:	4b1e      	ldr	r3, [pc, #120]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a700:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a702:	4b1c      	ldr	r3, [pc, #112]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 0304 	and.w	r3, r3, #4
 800a70a:	2b04      	cmp	r3, #4
 800a70c:	d10c      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800a70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a710:	2b00      	cmp	r3, #0
 800a712:	d109      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a714:	4b17      	ldr	r3, [pc, #92]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	08db      	lsrs	r3, r3, #3
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	4a16      	ldr	r2, [pc, #88]	@ (800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a720:	fa22 f303 	lsr.w	r3, r2, r3
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a726:	e01e      	b.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a728:	4b12      	ldr	r3, [pc, #72]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a734:	d106      	bne.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800a736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a73c:	d102      	bne.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a73e:	4b0f      	ldr	r3, [pc, #60]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a742:	e010      	b.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a744:	4b0b      	ldr	r3, [pc, #44]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a74c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a750:	d106      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a758:	d102      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a75a:	4b09      	ldr	r3, [pc, #36]	@ (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a75e:	e002      	b.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a764:	e393      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a766:	e392      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a768:	4b06      	ldr	r3, [pc, #24]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a76c:	e38f      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a772:	e38c      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a774:	58024400 	.word	0x58024400
 800a778:	03d09000 	.word	0x03d09000
 800a77c:	003d0900 	.word	0x003d0900
 800a780:	007a1200 	.word	0x007a1200
 800a784:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800a788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a78c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a790:	430b      	orrs	r3, r1
 800a792:	f040 809c 	bne.w	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800a796:	4b9e      	ldr	r3, [pc, #632]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a79a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a79e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7a6:	d054      	beq.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7ae:	f200 808b 	bhi.w	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a7b8:	f000 8083 	beq.w	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a7c2:	f200 8081 	bhi.w	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7cc:	d02f      	beq.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7d4:	d878      	bhi.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d004      	beq.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7e2:	d012      	beq.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800a7e4:	e070      	b.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7e6:	4b8a      	ldr	r3, [pc, #552]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7f2:	d107      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fe15 	bl	800b428 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a802:	e344      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a808:	e341      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a80a:	4b81      	ldr	r3, [pc, #516]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a816:	d107      	bne.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a818:	f107 0318 	add.w	r3, r7, #24
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 fb5b 	bl	800aed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a826:	e332      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a82c:	e32f      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a82e:	4b78      	ldr	r3, [pc, #480]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a83a:	d107      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a83c:	f107 030c 	add.w	r3, r7, #12
 800a840:	4618      	mov	r0, r3
 800a842:	f000 fc9d 	bl	800b180 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a84a:	e320      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a850:	e31d      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a852:	4b6f      	ldr	r3, [pc, #444]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a856:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a85a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a85c:	4b6c      	ldr	r3, [pc, #432]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0304 	and.w	r3, r3, #4
 800a864:	2b04      	cmp	r3, #4
 800a866:	d10c      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800a868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d109      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a86e:	4b68      	ldr	r3, [pc, #416]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	08db      	lsrs	r3, r3, #3
 800a874:	f003 0303 	and.w	r3, r3, #3
 800a878:	4a66      	ldr	r2, [pc, #408]	@ (800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800a87a:	fa22 f303 	lsr.w	r3, r2, r3
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a880:	e01e      	b.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a882:	4b63      	ldr	r3, [pc, #396]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a88a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a88e:	d106      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a896:	d102      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a898:	4b5f      	ldr	r3, [pc, #380]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a89c:	e010      	b.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a89e:	4b5c      	ldr	r3, [pc, #368]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8aa:	d106      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8b2:	d102      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8b4:	4b59      	ldr	r3, [pc, #356]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8b8:	e002      	b.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800a8be:	e2e6      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a8c0:	e2e5      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8c2:	4b57      	ldr	r3, [pc, #348]	@ (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c6:	e2e2      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8cc:	e2df      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a8ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a8d6:	430b      	orrs	r3, r1
 800a8d8:	f040 80a7 	bne.w	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a8dc:	4b4c      	ldr	r3, [pc, #304]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a8de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a8e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8ec:	d055      	beq.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8f4:	f200 8096 	bhi.w	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a8fe:	f000 8084 	beq.w	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a908:	f200 808c 	bhi.w	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800a90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a912:	d030      	beq.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800a914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a91a:	f200 8083 	bhi.w	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800a91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a920:	2b00      	cmp	r3, #0
 800a922:	d004      	beq.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a92a:	d012      	beq.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800a92c:	e07a      	b.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a92e:	4b38      	ldr	r3, [pc, #224]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a93a:	d107      	bne.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a93c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a940:	4618      	mov	r0, r3
 800a942:	f000 fd71 	bl	800b428 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a94a:	e2a0      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a94c:	2300      	movs	r3, #0
 800a94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a950:	e29d      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a952:	4b2f      	ldr	r3, [pc, #188]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a95a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a95e:	d107      	bne.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a960:	f107 0318 	add.w	r3, r7, #24
 800a964:	4618      	mov	r0, r3
 800a966:	f000 fab7 	bl	800aed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a96e:	e28e      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a970:	2300      	movs	r3, #0
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a974:	e28b      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a976:	4b26      	ldr	r3, [pc, #152]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a97e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a982:	d107      	bne.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a984:	f107 030c 	add.w	r3, r7, #12
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fbf9 	bl	800b180 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a992:	e27c      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a994:	2300      	movs	r3, #0
 800a996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a998:	e279      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a99a:	4b1d      	ldr	r3, [pc, #116]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a99c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a99e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9a4:	4b1a      	ldr	r3, [pc, #104]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0304 	and.w	r3, r3, #4
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d10c      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d109      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9b6:	4b16      	ldr	r3, [pc, #88]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	08db      	lsrs	r3, r3, #3
 800a9bc:	f003 0303 	and.w	r3, r3, #3
 800a9c0:	4a14      	ldr	r2, [pc, #80]	@ (800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800a9c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9c8:	e01e      	b.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9ca:	4b11      	ldr	r3, [pc, #68]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9d6:	d106      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9de:	d102      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9e0:	4b0d      	ldr	r3, [pc, #52]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800a9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9e4:	e010      	b.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9e6:	4b0a      	ldr	r3, [pc, #40]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9f2:	d106      	bne.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9fa:	d102      	bne.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9fc:	4b07      	ldr	r3, [pc, #28]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa00:	e002      	b.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa06:	e242      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800aa08:	e241      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa0a:	4b05      	ldr	r3, [pc, #20]	@ (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa0e:	e23e      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800aa10:	58024400 	.word	0x58024400
 800aa14:	03d09000 	.word	0x03d09000
 800aa18:	003d0900 	.word	0x003d0900
 800aa1c:	007a1200 	.word	0x007a1200
 800aa20:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa28:	e231      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aa2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa2e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800aa32:	430b      	orrs	r3, r1
 800aa34:	f040 8085 	bne.w	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aa38:	4b9c      	ldr	r3, [pc, #624]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa3c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aa40:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800aa42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa48:	d06b      	beq.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa50:	d874      	bhi.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800aa52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa58:	d056      	beq.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa60:	d86c      	bhi.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800aa62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa68:	d03b      	beq.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa70:	d864      	bhi.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800aa72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa78:	d021      	beq.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa80:	d85c      	bhi.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800aa82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800aa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa8e:	d004      	beq.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800aa90:	e054      	b.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aa92:	f7fe fb5f 	bl	8009154 <HAL_RCC_GetPCLK1Freq>
 800aa96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa98:	e1f9      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa9a:	4b84      	ldr	r3, [pc, #528]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aaa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaa6:	d107      	bne.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa8:	f107 0318 	add.w	r3, r7, #24
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 fa13 	bl	800aed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aab6:	e1ea      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aabc:	e1e7      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aabe:	4b7b      	ldr	r3, [pc, #492]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaca:	d107      	bne.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aacc:	f107 030c 	add.w	r3, r7, #12
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fb55 	bl	800b180 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aada:	e1d8      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aae0:	e1d5      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aae2:	4b72      	ldr	r3, [pc, #456]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 0304 	and.w	r3, r3, #4
 800aaea:	2b04      	cmp	r3, #4
 800aaec:	d109      	bne.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaee:	4b6f      	ldr	r3, [pc, #444]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	08db      	lsrs	r3, r3, #3
 800aaf4:	f003 0303 	and.w	r3, r3, #3
 800aaf8:	4a6d      	ldr	r2, [pc, #436]	@ (800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aafa:	fa22 f303 	lsr.w	r3, r2, r3
 800aafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab00:	e1c5      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab06:	e1c2      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab08:	4b68      	ldr	r3, [pc, #416]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab14:	d102      	bne.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800ab16:	4b67      	ldr	r3, [pc, #412]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ab18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab1a:	e1b8      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab20:	e1b5      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab22:	4b62      	ldr	r3, [pc, #392]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab2e:	d102      	bne.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800ab30:	4b61      	ldr	r3, [pc, #388]	@ (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800ab32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab34:	e1ab      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab3a:	e1a8      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab40:	e1a5      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab46:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ab4a:	430b      	orrs	r3, r1
 800ab4c:	d173      	bne.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ab4e:	4b57      	ldr	r3, [pc, #348]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ab56:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab5e:	d02f      	beq.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab66:	d863      	bhi.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d004      	beq.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab74:	d012      	beq.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800ab76:	e05b      	b.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab78:	4b4c      	ldr	r3, [pc, #304]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab84:	d107      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab86:	f107 0318 	add.w	r3, r7, #24
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 f9a4 	bl	800aed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab94:	e17b      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab9a:	e178      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab9c:	4b43      	ldr	r3, [pc, #268]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aba8:	d107      	bne.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abaa:	f107 030c 	add.w	r3, r7, #12
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 fae6 	bl	800b180 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abb8:	e169      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abbe:	e166      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abc0:	4b3a      	ldr	r3, [pc, #232]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800abc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abc8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abca:	4b38      	ldr	r3, [pc, #224]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0304 	and.w	r3, r3, #4
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	d10c      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800abd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d109      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abdc:	4b33      	ldr	r3, [pc, #204]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	08db      	lsrs	r3, r3, #3
 800abe2:	f003 0303 	and.w	r3, r3, #3
 800abe6:	4a32      	ldr	r2, [pc, #200]	@ (800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800abe8:	fa22 f303 	lsr.w	r3, r2, r3
 800abec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abee:	e01e      	b.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abf0:	4b2e      	ldr	r3, [pc, #184]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abfc:	d106      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800abfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac04:	d102      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac06:	4b2b      	ldr	r3, [pc, #172]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ac08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac0a:	e010      	b.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac0c:	4b27      	ldr	r3, [pc, #156]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac18:	d106      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ac1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac20:	d102      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac22:	4b25      	ldr	r3, [pc, #148]	@ (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800ac24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac26:	e002      	b.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac2c:	e12f      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ac2e:	e12e      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac34:	e12b      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac3a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ac3e:	430b      	orrs	r3, r1
 800ac40:	d13c      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ac42:	4b1a      	ldr	r3, [pc, #104]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac4a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d004      	beq.n	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800ac52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac58:	d012      	beq.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ac5a:	e023      	b.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac5c:	4b13      	ldr	r3, [pc, #76]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac68:	d107      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 fbda 	bl	800b428 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac78:	e109      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac7e:	e106      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac80:	4b0a      	ldr	r3, [pc, #40]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac8c:	d107      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac8e:	f107 0318 	add.w	r3, r7, #24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 f920 	bl	800aed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac9c:	e0f7      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca2:	e0f4      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca8:	e0f1      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800acaa:	bf00      	nop
 800acac:	58024400 	.word	0x58024400
 800acb0:	03d09000 	.word	0x03d09000
 800acb4:	003d0900 	.word	0x003d0900
 800acb8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800acbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acc0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800acc4:	430b      	orrs	r3, r1
 800acc6:	f040 8091 	bne.w	800adec <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800acca:	4b73      	ldr	r3, [pc, #460]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800accc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800acd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800acd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800acda:	f000 8081 	beq.w	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800acde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800ace4:	d87f      	bhi.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ace6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acec:	d06b      	beq.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800acee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acf4:	d877      	bhi.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800acf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acfc:	d056      	beq.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800acfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad04:	d86f      	bhi.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ad06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad0c:	d03b      	beq.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad14:	d867      	bhi.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ad16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad1c:	d021      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad24:	d85f      	bhi.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ad26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d004      	beq.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad32:	d004      	beq.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800ad34:	e057      	b.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad36:	f000 f8b9 	bl	800aeac <HAL_RCCEx_GetD3PCLK1Freq>
 800ad3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad3c:	e0a7      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad3e:	4b56      	ldr	r3, [pc, #344]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad4a:	d107      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad4c:	f107 0318 	add.w	r3, r7, #24
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 f8c1 	bl	800aed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad5a:	e098      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad60:	e095      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad62:	4b4d      	ldr	r3, [pc, #308]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad6e:	d107      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad70:	f107 030c 	add.w	r3, r7, #12
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 fa03 	bl	800b180 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad7e:	e086      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad84:	e083      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad86:	4b44      	ldr	r3, [pc, #272]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 0304 	and.w	r3, r3, #4
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	d109      	bne.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad92:	4b41      	ldr	r3, [pc, #260]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	08db      	lsrs	r3, r3, #3
 800ad98:	f003 0303 	and.w	r3, r3, #3
 800ad9c:	4a3f      	ldr	r2, [pc, #252]	@ (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ad9e:	fa22 f303 	lsr.w	r3, r2, r3
 800ada2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ada4:	e073      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adaa:	e070      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800adac:	4b3a      	ldr	r3, [pc, #232]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adb8:	d102      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800adba:	4b39      	ldr	r3, [pc, #228]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800adbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adbe:	e066      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adc4:	e063      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800adc6:	4b34      	ldr	r3, [pc, #208]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800add2:	d102      	bne.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800add4:	4b33      	ldr	r3, [pc, #204]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800add6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800add8:	e059      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adde:	e056      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ade0:	4b31      	ldr	r3, [pc, #196]	@ (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800ade2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ade4:	e053      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adea:	e050      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800adec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adf0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800adf4:	430b      	orrs	r3, r1
 800adf6:	d148      	bne.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800adf8:	4b27      	ldr	r3, [pc, #156]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800adfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae08:	d02a      	beq.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae10:	d838      	bhi.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ae12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae1e:	d00d      	beq.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800ae20:	e030      	b.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae22:	4b1d      	ldr	r3, [pc, #116]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae2e:	d102      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800ae30:	4b1c      	ldr	r3, [pc, #112]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800ae32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae34:	e02b      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae3a:	e028      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae3c:	4b16      	ldr	r3, [pc, #88]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae48:	d107      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 faea 	bl	800b428 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae58:	e019      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae5e:	e016      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae60:	4b0d      	ldr	r3, [pc, #52]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae6c:	d107      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6e:	f107 0318 	add.w	r3, r7, #24
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 f830 	bl	800aed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae7c:	e007      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae82:	e004      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae88:	e001      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ae8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3740      	adds	r7, #64	@ 0x40
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	58024400 	.word	0x58024400
 800ae9c:	03d09000 	.word	0x03d09000
 800aea0:	003d0900 	.word	0x003d0900
 800aea4:	007a1200 	.word	0x007a1200
 800aea8:	00bb8000 	.word	0x00bb8000

0800aeac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800aeb0:	f7fe f920 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	4b06      	ldr	r3, [pc, #24]	@ (800aed0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	091b      	lsrs	r3, r3, #4
 800aebc:	f003 0307 	and.w	r3, r3, #7
 800aec0:	4904      	ldr	r1, [pc, #16]	@ (800aed4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aec2:	5ccb      	ldrb	r3, [r1, r3]
 800aec4:	f003 031f 	and.w	r3, r3, #31
 800aec8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800aecc:	4618      	mov	r0, r3
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	58024400 	.word	0x58024400
 800aed4:	080117ac 	.word	0x080117ac

0800aed8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b089      	sub	sp, #36	@ 0x24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aee0:	4ba1      	ldr	r3, [pc, #644]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee4:	f003 0303 	and.w	r3, r3, #3
 800aee8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aeea:	4b9f      	ldr	r3, [pc, #636]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeee:	0b1b      	lsrs	r3, r3, #12
 800aef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aef4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aef6:	4b9c      	ldr	r3, [pc, #624]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefa:	091b      	lsrs	r3, r3, #4
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af02:	4b99      	ldr	r3, [pc, #612]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af06:	08db      	lsrs	r3, r3, #3
 800af08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	fb02 f303 	mul.w	r3, r2, r3
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8111 	beq.w	800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	f000 8083 	beq.w	800b034 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	2b02      	cmp	r3, #2
 800af32:	f200 80a1 	bhi.w	800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d056      	beq.n	800aff0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af42:	e099      	b.n	800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af44:	4b88      	ldr	r3, [pc, #544]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0320 	and.w	r3, r3, #32
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d02d      	beq.n	800afac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af50:	4b85      	ldr	r3, [pc, #532]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	08db      	lsrs	r3, r3, #3
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	4a84      	ldr	r2, [pc, #528]	@ (800b16c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af5c:	fa22 f303 	lsr.w	r3, r2, r3
 800af60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	ee07 3a90 	vmov	s15, r3
 800af68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	ee07 3a90 	vmov	s15, r3
 800af72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af7a:	4b7b      	ldr	r3, [pc, #492]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afaa:	e087      	b.n	800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afbe:	4b6a      	ldr	r3, [pc, #424]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afc6:	ee07 3a90 	vmov	s15, r3
 800afca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afce:	ed97 6a03 	vldr	s12, [r7, #12]
 800afd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afee:	e065      	b.n	800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800affa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800affe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b002:	4b59      	ldr	r3, [pc, #356]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b012:	ed97 6a03 	vldr	s12, [r7, #12]
 800b016:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b02e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b032:	e043      	b.n	800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b046:	4b48      	ldr	r3, [pc, #288]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b04e:	ee07 3a90 	vmov	s15, r3
 800b052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b056:	ed97 6a03 	vldr	s12, [r7, #12]
 800b05a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b076:	e021      	b.n	800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	ee07 3a90 	vmov	s15, r3
 800b07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b082:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b08a:	4b37      	ldr	r3, [pc, #220]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b092:	ee07 3a90 	vmov	s15, r3
 800b096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b09a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b09e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b0bc:	4b2a      	ldr	r3, [pc, #168]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c0:	0a5b      	lsrs	r3, r3, #9
 800b0c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0c6:	ee07 3a90 	vmov	s15, r3
 800b0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0e2:	ee17 2a90 	vmov	r2, s15
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b0ea:	4b1f      	ldr	r3, [pc, #124]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ee:	0c1b      	lsrs	r3, r3, #16
 800b0f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0f4:	ee07 3a90 	vmov	s15, r3
 800b0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b100:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b104:	edd7 6a07 	vldr	s13, [r7, #28]
 800b108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b10c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b110:	ee17 2a90 	vmov	r2, s15
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b118:	4b13      	ldr	r3, [pc, #76]	@ (800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b11c:	0e1b      	lsrs	r3, r3, #24
 800b11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b122:	ee07 3a90 	vmov	s15, r3
 800b126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b12e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b132:	edd7 6a07 	vldr	s13, [r7, #28]
 800b136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b13a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b13e:	ee17 2a90 	vmov	r2, s15
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b146:	e008      	b.n	800b15a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	609a      	str	r2, [r3, #8]
}
 800b15a:	bf00      	nop
 800b15c:	3724      	adds	r7, #36	@ 0x24
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	58024400 	.word	0x58024400
 800b16c:	03d09000 	.word	0x03d09000
 800b170:	46000000 	.word	0x46000000
 800b174:	4c742400 	.word	0x4c742400
 800b178:	4a742400 	.word	0x4a742400
 800b17c:	4af42400 	.word	0x4af42400

0800b180 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b180:	b480      	push	{r7}
 800b182:	b089      	sub	sp, #36	@ 0x24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b188:	4ba1      	ldr	r3, [pc, #644]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b18c:	f003 0303 	and.w	r3, r3, #3
 800b190:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b192:	4b9f      	ldr	r3, [pc, #636]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b196:	0d1b      	lsrs	r3, r3, #20
 800b198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b19c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b19e:	4b9c      	ldr	r3, [pc, #624]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a2:	0a1b      	lsrs	r3, r3, #8
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b1aa:	4b99      	ldr	r3, [pc, #612]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ae:	08db      	lsrs	r3, r3, #3
 800b1b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1b4:	693a      	ldr	r2, [r7, #16]
 800b1b6:	fb02 f303 	mul.w	r3, r2, r3
 800b1ba:	ee07 3a90 	vmov	s15, r3
 800b1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 8111 	beq.w	800b3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	f000 8083 	beq.w	800b2dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	f200 80a1 	bhi.w	800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d003      	beq.n	800b1ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d056      	beq.n	800b298 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b1ea:	e099      	b.n	800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1ec:	4b88      	ldr	r3, [pc, #544]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 0320 	and.w	r3, r3, #32
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d02d      	beq.n	800b254 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1f8:	4b85      	ldr	r3, [pc, #532]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	08db      	lsrs	r3, r3, #3
 800b1fe:	f003 0303 	and.w	r3, r3, #3
 800b202:	4a84      	ldr	r2, [pc, #528]	@ (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b204:	fa22 f303 	lsr.w	r3, r2, r3
 800b208:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	ee07 3a90 	vmov	s15, r3
 800b210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	ee07 3a90 	vmov	s15, r3
 800b21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b222:	4b7b      	ldr	r3, [pc, #492]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b232:	ed97 6a03 	vldr	s12, [r7, #12]
 800b236:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b252:	e087      	b.n	800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b266:	4b6a      	ldr	r3, [pc, #424]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26e:	ee07 3a90 	vmov	s15, r3
 800b272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b276:	ed97 6a03 	vldr	s12, [r7, #12]
 800b27a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b296:	e065      	b.n	800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2aa:	4b59      	ldr	r3, [pc, #356]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2da:	e043      	b.n	800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ee:	4b48      	ldr	r3, [pc, #288]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b302:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b30e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b31a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b31e:	e021      	b.n	800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b332:	4b37      	ldr	r3, [pc, #220]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b33a:	ee07 3a90 	vmov	s15, r3
 800b33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b342:	ed97 6a03 	vldr	s12, [r7, #12]
 800b346:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b35e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b362:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b364:	4b2a      	ldr	r3, [pc, #168]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b368:	0a5b      	lsrs	r3, r3, #9
 800b36a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b36e:	ee07 3a90 	vmov	s15, r3
 800b372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b376:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b37a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b37e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b38a:	ee17 2a90 	vmov	r2, s15
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b392:	4b1f      	ldr	r3, [pc, #124]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b396:	0c1b      	lsrs	r3, r3, #16
 800b398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b39c:	ee07 3a90 	vmov	s15, r3
 800b3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3b8:	ee17 2a90 	vmov	r2, s15
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b3c0:	4b13      	ldr	r3, [pc, #76]	@ (800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c4:	0e1b      	lsrs	r3, r3, #24
 800b3c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3da:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3e6:	ee17 2a90 	vmov	r2, s15
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b3ee:	e008      	b.n	800b402 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	609a      	str	r2, [r3, #8]
}
 800b402:	bf00      	nop
 800b404:	3724      	adds	r7, #36	@ 0x24
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	58024400 	.word	0x58024400
 800b414:	03d09000 	.word	0x03d09000
 800b418:	46000000 	.word	0x46000000
 800b41c:	4c742400 	.word	0x4c742400
 800b420:	4a742400 	.word	0x4a742400
 800b424:	4af42400 	.word	0x4af42400

0800b428 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b428:	b480      	push	{r7}
 800b42a:	b089      	sub	sp, #36	@ 0x24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b430:	4ba0      	ldr	r3, [pc, #640]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b434:	f003 0303 	and.w	r3, r3, #3
 800b438:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b43a:	4b9e      	ldr	r3, [pc, #632]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b43e:	091b      	lsrs	r3, r3, #4
 800b440:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b444:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b446:	4b9b      	ldr	r3, [pc, #620]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44a:	f003 0301 	and.w	r3, r3, #1
 800b44e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b450:	4b98      	ldr	r3, [pc, #608]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b454:	08db      	lsrs	r3, r3, #3
 800b456:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	fb02 f303 	mul.w	r3, r2, r3
 800b460:	ee07 3a90 	vmov	s15, r3
 800b464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b468:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f000 8111 	beq.w	800b696 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	2b02      	cmp	r3, #2
 800b478:	f000 8083 	beq.w	800b582 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	2b02      	cmp	r3, #2
 800b480:	f200 80a1 	bhi.w	800b5c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d003      	beq.n	800b492 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d056      	beq.n	800b53e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b490:	e099      	b.n	800b5c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b492:	4b88      	ldr	r3, [pc, #544]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0320 	and.w	r3, r3, #32
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d02d      	beq.n	800b4fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b49e:	4b85      	ldr	r3, [pc, #532]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	08db      	lsrs	r3, r3, #3
 800b4a4:	f003 0303 	and.w	r3, r3, #3
 800b4a8:	4a83      	ldr	r2, [pc, #524]	@ (800b6b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	ee07 3a90 	vmov	s15, r3
 800b4b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	ee07 3a90 	vmov	s15, r3
 800b4c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4c8:	4b7a      	ldr	r3, [pc, #488]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d0:	ee07 3a90 	vmov	s15, r3
 800b4d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4dc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b6bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b4f8:	e087      	b.n	800b60a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	ee07 3a90 	vmov	s15, r3
 800b500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b504:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b50c:	4b69      	ldr	r3, [pc, #420]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b50e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b514:	ee07 3a90 	vmov	s15, r3
 800b518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b51c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b520:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b6bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b52c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b534:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b538:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b53c:	e065      	b.n	800b60a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	ee07 3a90 	vmov	s15, r3
 800b544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b548:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b6c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b54c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b550:	4b58      	ldr	r3, [pc, #352]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b558:	ee07 3a90 	vmov	s15, r3
 800b55c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b560:	ed97 6a03 	vldr	s12, [r7, #12]
 800b564:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b6bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b56c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b57c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b580:	e043      	b.n	800b60a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	ee07 3a90 	vmov	s15, r3
 800b588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b594:	4b47      	ldr	r3, [pc, #284]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59c:	ee07 3a90 	vmov	s15, r3
 800b5a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5a8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b6bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5c4:	e021      	b.n	800b60a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	ee07 3a90 	vmov	s15, r3
 800b5cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5d8:	4b36      	ldr	r3, [pc, #216]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e0:	ee07 3a90 	vmov	s15, r3
 800b5e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b6bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b600:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b604:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b608:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b60a:	4b2a      	ldr	r3, [pc, #168]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b60c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b60e:	0a5b      	lsrs	r3, r3, #9
 800b610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b614:	ee07 3a90 	vmov	s15, r3
 800b618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b61c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b620:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b624:	edd7 6a07 	vldr	s13, [r7, #28]
 800b628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b62c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b630:	ee17 2a90 	vmov	r2, s15
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b638:	4b1e      	ldr	r3, [pc, #120]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b63a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b63c:	0c1b      	lsrs	r3, r3, #16
 800b63e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b642:	ee07 3a90 	vmov	s15, r3
 800b646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b64e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b652:	edd7 6a07 	vldr	s13, [r7, #28]
 800b656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b65a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b65e:	ee17 2a90 	vmov	r2, s15
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b666:	4b13      	ldr	r3, [pc, #76]	@ (800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b66a:	0e1b      	lsrs	r3, r3, #24
 800b66c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b670:	ee07 3a90 	vmov	s15, r3
 800b674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b67c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b680:	edd7 6a07 	vldr	s13, [r7, #28]
 800b684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b68c:	ee17 2a90 	vmov	r2, s15
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b694:	e008      	b.n	800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	609a      	str	r2, [r3, #8]
}
 800b6a8:	bf00      	nop
 800b6aa:	3724      	adds	r7, #36	@ 0x24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr
 800b6b4:	58024400 	.word	0x58024400
 800b6b8:	03d09000 	.word	0x03d09000
 800b6bc:	46000000 	.word	0x46000000
 800b6c0:	4c742400 	.word	0x4c742400
 800b6c4:	4a742400 	.word	0x4a742400
 800b6c8:	4af42400 	.word	0x4af42400

0800b6cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6da:	4b53      	ldr	r3, [pc, #332]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6de:	f003 0303 	and.w	r3, r3, #3
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d101      	bne.n	800b6ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e099      	b.n	800b81e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b6ea:	4b4f      	ldr	r3, [pc, #316]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a4e      	ldr	r2, [pc, #312]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b6f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b6f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6f6:	f7f6 ff83 	bl	8002600 <HAL_GetTick>
 800b6fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b6fc:	e008      	b.n	800b710 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b6fe:	f7f6 ff7f 	bl	8002600 <HAL_GetTick>
 800b702:	4602      	mov	r2, r0
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d901      	bls.n	800b710 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b70c:	2303      	movs	r3, #3
 800b70e:	e086      	b.n	800b81e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b710:	4b45      	ldr	r3, [pc, #276]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1f0      	bne.n	800b6fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b71c:	4b42      	ldr	r3, [pc, #264]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b71e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b720:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	031b      	lsls	r3, r3, #12
 800b72a:	493f      	ldr	r1, [pc, #252]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b72c:	4313      	orrs	r3, r2
 800b72e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	3b01      	subs	r3, #1
 800b736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	3b01      	subs	r3, #1
 800b740:	025b      	lsls	r3, r3, #9
 800b742:	b29b      	uxth	r3, r3
 800b744:	431a      	orrs	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	041b      	lsls	r3, r3, #16
 800b74e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b752:	431a      	orrs	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	691b      	ldr	r3, [r3, #16]
 800b758:	3b01      	subs	r3, #1
 800b75a:	061b      	lsls	r3, r3, #24
 800b75c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b760:	4931      	ldr	r1, [pc, #196]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b762:	4313      	orrs	r3, r2
 800b764:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b766:	4b30      	ldr	r3, [pc, #192]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	695b      	ldr	r3, [r3, #20]
 800b772:	492d      	ldr	r1, [pc, #180]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b774:	4313      	orrs	r3, r2
 800b776:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b778:	4b2b      	ldr	r3, [pc, #172]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b77c:	f023 0220 	bic.w	r2, r3, #32
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	4928      	ldr	r1, [pc, #160]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b786:	4313      	orrs	r3, r2
 800b788:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b78a:	4b27      	ldr	r3, [pc, #156]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b78e:	4a26      	ldr	r2, [pc, #152]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b790:	f023 0310 	bic.w	r3, r3, #16
 800b794:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b796:	4b24      	ldr	r3, [pc, #144]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b798:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b79a:	4b24      	ldr	r3, [pc, #144]	@ (800b82c <RCCEx_PLL2_Config+0x160>)
 800b79c:	4013      	ands	r3, r2
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	69d2      	ldr	r2, [r2, #28]
 800b7a2:	00d2      	lsls	r2, r2, #3
 800b7a4:	4920      	ldr	r1, [pc, #128]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b7aa:	4b1f      	ldr	r3, [pc, #124]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7b0:	f043 0310 	orr.w	r3, r3, #16
 800b7b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d106      	bne.n	800b7ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7bc:	4b1a      	ldr	r3, [pc, #104]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c0:	4a19      	ldr	r2, [pc, #100]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b7c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7c8:	e00f      	b.n	800b7ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d106      	bne.n	800b7de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7d0:	4b15      	ldr	r3, [pc, #84]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d4:	4a14      	ldr	r2, [pc, #80]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7dc:	e005      	b.n	800b7ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7de:	4b12      	ldr	r3, [pc, #72]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e2:	4a11      	ldr	r2, [pc, #68]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b7e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b7ea:	4b0f      	ldr	r3, [pc, #60]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a0e      	ldr	r2, [pc, #56]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b7f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b7f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7f6:	f7f6 ff03 	bl	8002600 <HAL_GetTick>
 800b7fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b7fc:	e008      	b.n	800b810 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b7fe:	f7f6 feff 	bl	8002600 <HAL_GetTick>
 800b802:	4602      	mov	r2, r0
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d901      	bls.n	800b810 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e006      	b.n	800b81e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b810:	4b05      	ldr	r3, [pc, #20]	@ (800b828 <RCCEx_PLL2_Config+0x15c>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d0f0      	beq.n	800b7fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	58024400 	.word	0x58024400
 800b82c:	ffff0007 	.word	0xffff0007

0800b830 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b83a:	2300      	movs	r3, #0
 800b83c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b83e:	4b53      	ldr	r3, [pc, #332]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b842:	f003 0303 	and.w	r3, r3, #3
 800b846:	2b03      	cmp	r3, #3
 800b848:	d101      	bne.n	800b84e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	e099      	b.n	800b982 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b84e:	4b4f      	ldr	r3, [pc, #316]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a4e      	ldr	r2, [pc, #312]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b85a:	f7f6 fed1 	bl	8002600 <HAL_GetTick>
 800b85e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b860:	e008      	b.n	800b874 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b862:	f7f6 fecd 	bl	8002600 <HAL_GetTick>
 800b866:	4602      	mov	r2, r0
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d901      	bls.n	800b874 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b870:	2303      	movs	r3, #3
 800b872:	e086      	b.n	800b982 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b874:	4b45      	ldr	r3, [pc, #276]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1f0      	bne.n	800b862 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b880:	4b42      	ldr	r3, [pc, #264]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b884:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	051b      	lsls	r3, r3, #20
 800b88e:	493f      	ldr	r1, [pc, #252]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b890:	4313      	orrs	r3, r2
 800b892:	628b      	str	r3, [r1, #40]	@ 0x28
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	3b01      	subs	r3, #1
 800b89a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	025b      	lsls	r3, r3, #9
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	431a      	orrs	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	041b      	lsls	r3, r3, #16
 800b8b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b8b6:	431a      	orrs	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	061b      	lsls	r3, r3, #24
 800b8c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b8c4:	4931      	ldr	r1, [pc, #196]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8ca:	4b30      	ldr	r3, [pc, #192]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	492d      	ldr	r1, [pc, #180]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8dc:	4b2b      	ldr	r3, [pc, #172]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	4928      	ldr	r1, [pc, #160]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b8ee:	4b27      	ldr	r3, [pc, #156]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f2:	4a26      	ldr	r2, [pc, #152]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b8f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b8fa:	4b24      	ldr	r3, [pc, #144]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b8fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8fe:	4b24      	ldr	r3, [pc, #144]	@ (800b990 <RCCEx_PLL3_Config+0x160>)
 800b900:	4013      	ands	r3, r2
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	69d2      	ldr	r2, [r2, #28]
 800b906:	00d2      	lsls	r2, r2, #3
 800b908:	4920      	ldr	r1, [pc, #128]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b90e:	4b1f      	ldr	r3, [pc, #124]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b912:	4a1e      	ldr	r2, [pc, #120]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b918:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d106      	bne.n	800b92e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b920:	4b1a      	ldr	r3, [pc, #104]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b924:	4a19      	ldr	r2, [pc, #100]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b926:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b92a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b92c:	e00f      	b.n	800b94e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d106      	bne.n	800b942 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b934:	4b15      	ldr	r3, [pc, #84]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b938:	4a14      	ldr	r2, [pc, #80]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b93a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b93e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b940:	e005      	b.n	800b94e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b942:	4b12      	ldr	r3, [pc, #72]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b946:	4a11      	ldr	r2, [pc, #68]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b948:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b94c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b94e:	4b0f      	ldr	r3, [pc, #60]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a0e      	ldr	r2, [pc, #56]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b95a:	f7f6 fe51 	bl	8002600 <HAL_GetTick>
 800b95e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b960:	e008      	b.n	800b974 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b962:	f7f6 fe4d 	bl	8002600 <HAL_GetTick>
 800b966:	4602      	mov	r2, r0
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d901      	bls.n	800b974 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b970:	2303      	movs	r3, #3
 800b972:	e006      	b.n	800b982 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b974:	4b05      	ldr	r3, [pc, #20]	@ (800b98c <RCCEx_PLL3_Config+0x15c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0f0      	beq.n	800b962 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b980:	7bfb      	ldrb	r3, [r7, #15]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	58024400 	.word	0x58024400
 800b990:	ffff0007 	.word	0xffff0007

0800b994 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d101      	bne.n	800b9a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e10f      	b.n	800bbc6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a87      	ldr	r2, [pc, #540]	@ (800bbd0 <HAL_SPI_Init+0x23c>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d00f      	beq.n	800b9d6 <HAL_SPI_Init+0x42>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a86      	ldr	r2, [pc, #536]	@ (800bbd4 <HAL_SPI_Init+0x240>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d00a      	beq.n	800b9d6 <HAL_SPI_Init+0x42>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a84      	ldr	r2, [pc, #528]	@ (800bbd8 <HAL_SPI_Init+0x244>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d005      	beq.n	800b9d6 <HAL_SPI_Init+0x42>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	2b0f      	cmp	r3, #15
 800b9d0:	d901      	bls.n	800b9d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e0f7      	b.n	800bbc6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f001 f8fc 	bl	800cbd4 <SPI_GetPacketSize>
 800b9dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a7b      	ldr	r2, [pc, #492]	@ (800bbd0 <HAL_SPI_Init+0x23c>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d00c      	beq.n	800ba02 <HAL_SPI_Init+0x6e>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a79      	ldr	r2, [pc, #484]	@ (800bbd4 <HAL_SPI_Init+0x240>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d007      	beq.n	800ba02 <HAL_SPI_Init+0x6e>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a78      	ldr	r2, [pc, #480]	@ (800bbd8 <HAL_SPI_Init+0x244>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d002      	beq.n	800ba02 <HAL_SPI_Init+0x6e>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b08      	cmp	r3, #8
 800ba00:	d811      	bhi.n	800ba26 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba06:	4a72      	ldr	r2, [pc, #456]	@ (800bbd0 <HAL_SPI_Init+0x23c>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d009      	beq.n	800ba20 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a70      	ldr	r2, [pc, #448]	@ (800bbd4 <HAL_SPI_Init+0x240>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d004      	beq.n	800ba20 <HAL_SPI_Init+0x8c>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a6f      	ldr	r2, [pc, #444]	@ (800bbd8 <HAL_SPI_Init+0x244>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d104      	bne.n	800ba2a <HAL_SPI_Init+0x96>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b10      	cmp	r3, #16
 800ba24:	d901      	bls.n	800ba2a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e0cd      	b.n	800bbc6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7f6 fad4 	bl	8001fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2202      	movs	r2, #2
 800ba48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 0201 	bic.w	r2, r2, #1
 800ba5a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ba66:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba70:	d119      	bne.n	800baa6 <HAL_SPI_Init+0x112>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba7a:	d103      	bne.n	800ba84 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d008      	beq.n	800ba96 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10c      	bne.n	800baa6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba94:	d107      	bne.n	800baa6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800baa4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00f      	beq.n	800bad2 <HAL_SPI_Init+0x13e>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	2b06      	cmp	r3, #6
 800bab8:	d90b      	bls.n	800bad2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	430a      	orrs	r2, r1
 800bace:	601a      	str	r2, [r3, #0]
 800bad0:	e007      	b.n	800bae2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bae0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	69da      	ldr	r2, [r3, #28]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baea:	431a      	orrs	r2, r3
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	431a      	orrs	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baf4:	ea42 0103 	orr.w	r1, r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68da      	ldr	r2, [r3, #12]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	430a      	orrs	r2, r1
 800bb02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb0c:	431a      	orrs	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb12:	431a      	orrs	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	431a      	orrs	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	431a      	orrs	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	431a      	orrs	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	431a      	orrs	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb36:	431a      	orrs	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	431a      	orrs	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb42:	ea42 0103 	orr.w	r1, r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	430a      	orrs	r2, r1
 800bb50:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d113      	bne.n	800bb82 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb6c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bb80:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f022 0201 	bic.w	r2, r2, #1
 800bb90:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00a      	beq.n	800bbb4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	40013000 	.word	0x40013000
 800bbd4:	40003800 	.word	0x40003800
 800bbd8:	40003c00 	.word	0x40003c00

0800bbdc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3320      	adds	r3, #32
 800bbf2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbf4:	f7f6 fd04 	bl	8002600 <HAL_GetTick>
 800bbf8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d001      	beq.n	800bc0a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800bc06:	2302      	movs	r3, #2
 800bc08:	e1d1      	b.n	800bfae <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <HAL_SPI_Transmit+0x3a>
 800bc10:	88fb      	ldrh	r3, [r7, #6]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e1c9      	b.n	800bfae <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d101      	bne.n	800bc28 <HAL_SPI_Transmit+0x4c>
 800bc24:	2302      	movs	r3, #2
 800bc26:	e1c2      	b.n	800bfae <HAL_SPI_Transmit+0x3d2>
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2203      	movs	r2, #3
 800bc34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	88fa      	ldrh	r2, [r7, #6]
 800bc4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	88fa      	ldrh	r2, [r7, #6]
 800bc52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bc80:	d108      	bne.n	800bc94 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc90:	601a      	str	r2, [r3, #0]
 800bc92:	e009      	b.n	800bca8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bca6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	4b96      	ldr	r3, [pc, #600]	@ (800bf08 <HAL_SPI_Transmit+0x32c>)
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	88f9      	ldrh	r1, [r7, #6]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	6812      	ldr	r2, [r2, #0]
 800bcb8:	430b      	orrs	r3, r1
 800bcba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f042 0201 	orr.w	r2, r2, #1
 800bcca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bcd4:	d107      	bne.n	800bce6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bce4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	2b0f      	cmp	r3, #15
 800bcec:	d947      	bls.n	800bd7e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bcee:	e03f      	b.n	800bd70 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	f003 0302 	and.w	r3, r3, #2
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d114      	bne.n	800bd28 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6812      	ldr	r2, [r2, #0]
 800bd08:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd0e:	1d1a      	adds	r2, r3, #4
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bd26:	e023      	b.n	800bd70 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd28:	f7f6 fc6a 	bl	8002600 <HAL_GetTick>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d803      	bhi.n	800bd40 <HAL_SPI_Transmit+0x164>
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3e:	d102      	bne.n	800bd46 <HAL_SPI_Transmit+0x16a>
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d114      	bne.n	800bd70 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f000 fe76 	bl	800ca38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	e11e      	b.n	800bfae <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1b9      	bne.n	800bcf0 <HAL_SPI_Transmit+0x114>
 800bd7c:	e0f1      	b.n	800bf62 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	2b07      	cmp	r3, #7
 800bd84:	f240 80e6 	bls.w	800bf54 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bd88:	e05d      	b.n	800be46 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	695b      	ldr	r3, [r3, #20]
 800bd90:	f003 0302 	and.w	r3, r3, #2
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d132      	bne.n	800bdfe <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d918      	bls.n	800bdd6 <HAL_SPI_Transmit+0x1fa>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d014      	beq.n	800bdd6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6812      	ldr	r2, [r2, #0]
 800bdb6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdbc:	1d1a      	adds	r2, r3, #4
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	3b02      	subs	r3, #2
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bdd4:	e037      	b.n	800be46 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdda:	881a      	ldrh	r2, [r3, #0]
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bde4:	1c9a      	adds	r2, r3, #2
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bdfc:	e023      	b.n	800be46 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdfe:	f7f6 fbff 	bl	8002600 <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d803      	bhi.n	800be16 <HAL_SPI_Transmit+0x23a>
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be14:	d102      	bne.n	800be1c <HAL_SPI_Transmit+0x240>
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d114      	bne.n	800be46 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 fe0b 	bl	800ca38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e0b3      	b.n	800bfae <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d19b      	bne.n	800bd8a <HAL_SPI_Transmit+0x1ae>
 800be52:	e086      	b.n	800bf62 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	f003 0302 	and.w	r3, r3, #2
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d154      	bne.n	800bf0c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be68:	b29b      	uxth	r3, r3
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	d918      	bls.n	800bea0 <HAL_SPI_Transmit+0x2c4>
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be72:	2b40      	cmp	r3, #64	@ 0x40
 800be74:	d914      	bls.n	800bea0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6812      	ldr	r2, [r2, #0]
 800be80:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be86:	1d1a      	adds	r2, r3, #4
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be92:	b29b      	uxth	r3, r3
 800be94:	3b04      	subs	r3, #4
 800be96:	b29a      	uxth	r2, r3
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800be9e:	e059      	b.n	800bf54 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d917      	bls.n	800bedc <HAL_SPI_Transmit+0x300>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d013      	beq.n	800bedc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800beb8:	881a      	ldrh	r2, [r3, #0]
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bec2:	1c9a      	adds	r2, r3, #2
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bece:	b29b      	uxth	r3, r3
 800bed0:	3b02      	subs	r3, #2
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800beda:	e03b      	b.n	800bf54 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	3320      	adds	r3, #32
 800bee6:	7812      	ldrb	r2, [r2, #0]
 800bee8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800befa:	b29b      	uxth	r3, r3
 800befc:	3b01      	subs	r3, #1
 800befe:	b29a      	uxth	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bf06:	e025      	b.n	800bf54 <HAL_SPI_Transmit+0x378>
 800bf08:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf0c:	f7f6 fb78 	bl	8002600 <HAL_GetTick>
 800bf10:	4602      	mov	r2, r0
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d803      	bhi.n	800bf24 <HAL_SPI_Transmit+0x348>
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf22:	d102      	bne.n	800bf2a <HAL_SPI_Transmit+0x34e>
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d114      	bne.n	800bf54 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f000 fd84 	bl	800ca38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e02c      	b.n	800bfae <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f47f af79 	bne.w	800be54 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	2108      	movs	r1, #8
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 fe03 	bl	800cb78 <SPI_WaitOnFlagUntilTimeout>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d007      	beq.n	800bf88 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf7e:	f043 0220 	orr.w	r2, r3, #32
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f000 fd55 	bl	800ca38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d001      	beq.n	800bfac <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e000      	b.n	800bfae <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800bfac:	2300      	movs	r3, #0
  }
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop

0800bfb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08e      	sub	sp, #56	@ 0x38
 800bfbc:	af02      	add	r7, sp, #8
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
 800bfc4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	3320      	adds	r3, #32
 800bfcc:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	3330      	adds	r3, #48	@ 0x30
 800bfd4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfda:	095b      	lsrs	r3, r3, #5
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	3301      	adds	r3, #1
 800bfe0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bfe2:	f7f6 fb0d 	bl	8002600 <HAL_GetTick>
 800bfe6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800bfe8:	887b      	ldrh	r3, [r7, #2]
 800bfea:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800bfec:	887b      	ldrh	r3, [r7, #2]
 800bfee:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d001      	beq.n	800c000 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800bffc:	2302      	movs	r3, #2
 800bffe:	e310      	b.n	800c622 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d005      	beq.n	800c012 <HAL_SPI_TransmitReceive+0x5a>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <HAL_SPI_TransmitReceive+0x5a>
 800c00c:	887b      	ldrh	r3, [r7, #2]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e305      	b.n	800c622 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d101      	bne.n	800c024 <HAL_SPI_TransmitReceive+0x6c>
 800c020:	2302      	movs	r3, #2
 800c022:	e2fe      	b.n	800c622 <HAL_SPI_TransmitReceive+0x66a>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2205      	movs	r2, #5
 800c030:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	887a      	ldrh	r2, [r7, #2]
 800c046:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	887a      	ldrh	r2, [r7, #2]
 800c04e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	887a      	ldrh	r2, [r7, #2]
 800c05c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	887a      	ldrh	r2, [r7, #2]
 800c064:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2200      	movs	r2, #0
 800c06c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68da      	ldr	r2, [r3, #12]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800c082:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a70      	ldr	r2, [pc, #448]	@ (800c24c <HAL_SPI_TransmitReceive+0x294>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d009      	beq.n	800c0a2 <HAL_SPI_TransmitReceive+0xea>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a6f      	ldr	r2, [pc, #444]	@ (800c250 <HAL_SPI_TransmitReceive+0x298>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d004      	beq.n	800c0a2 <HAL_SPI_TransmitReceive+0xea>
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a6d      	ldr	r2, [pc, #436]	@ (800c254 <HAL_SPI_TransmitReceive+0x29c>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d102      	bne.n	800c0a8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800c0a2:	2310      	movs	r3, #16
 800c0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0a6:	e001      	b.n	800c0ac <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800c0a8:	2308      	movs	r3, #8
 800c0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	685a      	ldr	r2, [r3, #4]
 800c0b2:	4b69      	ldr	r3, [pc, #420]	@ (800c258 <HAL_SPI_TransmitReceive+0x2a0>)
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	8879      	ldrh	r1, [r7, #2]
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	6812      	ldr	r2, [r2, #0]
 800c0bc:	430b      	orrs	r3, r1
 800c0be:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f042 0201 	orr.w	r2, r2, #1
 800c0ce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c0d8:	d107      	bne.n	800c0ea <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	2b0f      	cmp	r3, #15
 800c0f0:	f240 80a2 	bls.w	800c238 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800c0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f6:	089b      	lsrs	r3, r3, #2
 800c0f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c0fa:	e094      	b.n	800c226 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	f003 0302 	and.w	r3, r3, #2
 800c106:	2b02      	cmp	r3, #2
 800c108:	d120      	bne.n	800c14c <HAL_SPI_TransmitReceive+0x194>
 800c10a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d01d      	beq.n	800c14c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800c110:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c112:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800c114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c116:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c118:	429a      	cmp	r2, r3
 800c11a:	d217      	bcs.n	800c14c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6812      	ldr	r2, [r2, #0]
 800c126:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c12c:	1d1a      	adds	r2, r3, #4
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c138:	b29b      	uxth	r3, r3
 800c13a:	3b01      	subs	r3, #1
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c14a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800c154:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c156:	2b00      	cmp	r3, #0
 800c158:	d065      	beq.n	800c226 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	f003 0301 	and.w	r3, r3, #1
 800c164:	2b01      	cmp	r3, #1
 800c166:	d118      	bne.n	800c19a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c170:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c172:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c178:	1d1a      	adds	r2, r3, #4
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c184:	b29b      	uxth	r3, r3
 800c186:	3b01      	subs	r3, #1
 800c188:	b29a      	uxth	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c196:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c198:	e045      	b.n	800c226 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c19a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c19c:	8bfb      	ldrh	r3, [r7, #30]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d21d      	bcs.n	800c1de <HAL_SPI_TransmitReceive+0x226>
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d018      	beq.n	800c1de <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c1b6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1bc:	1d1a      	adds	r2, r3, #4
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c1da:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c1dc:	e023      	b.n	800c226 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1de:	f7f6 fa0f 	bl	8002600 <HAL_GetTick>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d803      	bhi.n	800c1f6 <HAL_SPI_TransmitReceive+0x23e>
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f4:	d102      	bne.n	800c1fc <HAL_SPI_TransmitReceive+0x244>
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d114      	bne.n	800c226 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 fc1b 	bl	800ca38 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c208:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2201      	movs	r2, #1
 800c216:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800c222:	2303      	movs	r3, #3
 800c224:	e1fd      	b.n	800c622 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c226:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f47f af67 	bne.w	800c0fc <HAL_SPI_TransmitReceive+0x144>
 800c22e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c230:	2b00      	cmp	r3, #0
 800c232:	f47f af63 	bne.w	800c0fc <HAL_SPI_TransmitReceive+0x144>
 800c236:	e1ce      	b.n	800c5d6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	2b07      	cmp	r3, #7
 800c23e:	f240 81c2 	bls.w	800c5c6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800c242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c244:	085b      	lsrs	r3, r3, #1
 800c246:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c248:	e0c9      	b.n	800c3de <HAL_SPI_TransmitReceive+0x426>
 800c24a:	bf00      	nop
 800c24c:	40013000 	.word	0x40013000
 800c250:	40003800 	.word	0x40003800
 800c254:	40003c00 	.word	0x40003c00
 800c258:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	695b      	ldr	r3, [r3, #20]
 800c262:	f003 0302 	and.w	r3, r3, #2
 800c266:	2b02      	cmp	r3, #2
 800c268:	d11f      	bne.n	800c2aa <HAL_SPI_TransmitReceive+0x2f2>
 800c26a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d01c      	beq.n	800c2aa <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800c270:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c272:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800c274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c276:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c278:	429a      	cmp	r2, r3
 800c27a:	d216      	bcs.n	800c2aa <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c280:	881a      	ldrh	r2, [r3, #0]
 800c282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c284:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c28a:	1c9a      	adds	r2, r3, #2
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c296:	b29b      	uxth	r3, r3
 800c298:	3b01      	subs	r3, #1
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c2a8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	695b      	ldr	r3, [r3, #20]
 800c2b0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800c2b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f000 8092 	beq.w	800c3de <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	695b      	ldr	r3, [r3, #20]
 800c2c0:	f003 0301 	and.w	r3, r3, #1
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d118      	bne.n	800c2fa <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2cc:	6a3a      	ldr	r2, [r7, #32]
 800c2ce:	8812      	ldrh	r2, [r2, #0]
 800c2d0:	b292      	uxth	r2, r2
 800c2d2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2d8:	1c9a      	adds	r2, r3, #2
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c2f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c2f8:	e071      	b.n	800c3de <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c2fa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c2fc:	8bfb      	ldrh	r3, [r7, #30]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d228      	bcs.n	800c354 <HAL_SPI_TransmitReceive+0x39c>
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d023      	beq.n	800c354 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c310:	6a3a      	ldr	r2, [r7, #32]
 800c312:	8812      	ldrh	r2, [r2, #0]
 800c314:	b292      	uxth	r2, r2
 800c316:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c31c:	1c9a      	adds	r2, r3, #2
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c326:	6a3a      	ldr	r2, [r7, #32]
 800c328:	8812      	ldrh	r2, [r2, #0]
 800c32a:	b292      	uxth	r2, r2
 800c32c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c332:	1c9a      	adds	r2, r3, #2
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c33e:	b29b      	uxth	r3, r3
 800c340:	3b02      	subs	r3, #2
 800c342:	b29a      	uxth	r2, r3
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c350:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c352:	e044      	b.n	800c3de <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c354:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c356:	2b01      	cmp	r3, #1
 800c358:	d11d      	bne.n	800c396 <HAL_SPI_TransmitReceive+0x3de>
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c360:	2b00      	cmp	r3, #0
 800c362:	d018      	beq.n	800c396 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c368:	6a3a      	ldr	r2, [r7, #32]
 800c36a:	8812      	ldrh	r2, [r2, #0]
 800c36c:	b292      	uxth	r2, r2
 800c36e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c374:	1c9a      	adds	r2, r3, #2
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c380:	b29b      	uxth	r3, r3
 800c382:	3b01      	subs	r3, #1
 800c384:	b29a      	uxth	r2, r3
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c392:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c394:	e023      	b.n	800c3de <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c396:	f7f6 f933 	bl	8002600 <HAL_GetTick>
 800c39a:	4602      	mov	r2, r0
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d803      	bhi.n	800c3ae <HAL_SPI_TransmitReceive+0x3f6>
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ac:	d102      	bne.n	800c3b4 <HAL_SPI_TransmitReceive+0x3fc>
 800c3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d114      	bne.n	800c3de <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f000 fb3f 	bl	800ca38 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	e121      	b.n	800c622 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c3de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f47f af3b 	bne.w	800c25c <HAL_SPI_TransmitReceive+0x2a4>
 800c3e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	f47f af37 	bne.w	800c25c <HAL_SPI_TransmitReceive+0x2a4>
 800c3ee:	e0f2      	b.n	800c5d6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	f003 0302 	and.w	r3, r3, #2
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d121      	bne.n	800c442 <HAL_SPI_TransmitReceive+0x48a>
 800c3fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c400:	2b00      	cmp	r3, #0
 800c402:	d01e      	beq.n	800c442 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800c404:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c406:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800c408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d218      	bcs.n	800c442 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3320      	adds	r3, #32
 800c41a:	7812      	ldrb	r2, [r2, #0]
 800c41c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c42e:	b29b      	uxth	r3, r3
 800c430:	3b01      	subs	r3, #1
 800c432:	b29a      	uxth	r2, r3
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c440:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800c44a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 80ba 	beq.w	800c5c6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d11b      	bne.n	800c498 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c46c:	7812      	ldrb	r2, [r2, #0]
 800c46e:	b2d2      	uxtb	r2, r2
 800c470:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c482:	b29b      	uxth	r3, r3
 800c484:	3b01      	subs	r3, #1
 800c486:	b29a      	uxth	r2, r3
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c494:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c496:	e096      	b.n	800c5c6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c498:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c49a:	8bfb      	ldrh	r3, [r7, #30]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d24a      	bcs.n	800c536 <HAL_SPI_TransmitReceive+0x57e>
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d045      	beq.n	800c536 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4b6:	7812      	ldrb	r2, [r2, #0]
 800c4b8:	b2d2      	uxtb	r2, r2
 800c4ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4d2:	7812      	ldrb	r2, [r2, #0]
 800c4d4:	b2d2      	uxtb	r2, r2
 800c4d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4dc:	1c5a      	adds	r2, r3, #1
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4ee:	7812      	ldrb	r2, [r2, #0]
 800c4f0:	b2d2      	uxtb	r2, r2
 800c4f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c50a:	7812      	ldrb	r2, [r2, #0]
 800c50c:	b2d2      	uxtb	r2, r2
 800c50e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c514:	1c5a      	adds	r2, r3, #1
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c520:	b29b      	uxth	r3, r3
 800c522:	3b04      	subs	r3, #4
 800c524:	b29a      	uxth	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c532:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c534:	e047      	b.n	800c5c6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c536:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c538:	2b03      	cmp	r3, #3
 800c53a:	d820      	bhi.n	800c57e <HAL_SPI_TransmitReceive+0x5c6>
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c542:	2b00      	cmp	r3, #0
 800c544:	d01b      	beq.n	800c57e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c552:	7812      	ldrb	r2, [r2, #0]
 800c554:	b2d2      	uxtb	r2, r2
 800c556:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c55c:	1c5a      	adds	r2, r3, #1
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c568:	b29b      	uxth	r3, r3
 800c56a:	3b01      	subs	r3, #1
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c57a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c57c:	e023      	b.n	800c5c6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c57e:	f7f6 f83f 	bl	8002600 <HAL_GetTick>
 800c582:	4602      	mov	r2, r0
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d803      	bhi.n	800c596 <HAL_SPI_TransmitReceive+0x5de>
 800c58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c594:	d102      	bne.n	800c59c <HAL_SPI_TransmitReceive+0x5e4>
 800c596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d114      	bne.n	800c5c6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f000 fa4b 	bl	800ca38 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800c5c2:	2303      	movs	r3, #3
 800c5c4:	e02d      	b.n	800c622 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c5c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f47f af11 	bne.w	800c3f0 <HAL_SPI_TransmitReceive+0x438>
 800c5ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f47f af0d 	bne.w	800c3f0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2108      	movs	r1, #8
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f000 fac9 	bl	800cb78 <SPI_WaitOnFlagUntilTimeout>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d007      	beq.n	800c5fc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5f2:	f043 0220 	orr.w	r2, r3, #32
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f000 fa1b 	bl	800ca38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2201      	movs	r2, #1
 800c606:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2200      	movs	r2, #0
 800c60e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d001      	beq.n	800c620 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e000      	b.n	800c622 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800c620:	2300      	movs	r3, #0
  }
}
 800c622:	4618      	mov	r0, r3
 800c624:	3730      	adds	r7, #48	@ 0x30
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop

0800c62c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08a      	sub	sp, #40	@ 0x28
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c644:	6a3a      	ldr	r2, [r7, #32]
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	4013      	ands	r3, r2
 800c64a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c654:	2300      	movs	r3, #0
 800c656:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c65e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3330      	adds	r3, #48	@ 0x30
 800c666:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d010      	beq.n	800c694 <HAL_SPI_IRQHandler+0x68>
 800c672:	6a3b      	ldr	r3, [r7, #32]
 800c674:	f003 0308 	and.w	r3, r3, #8
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00b      	beq.n	800c694 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	699a      	ldr	r2, [r3, #24]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c68a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 f9af 	bl	800c9f0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800c692:	e192      	b.n	800c9ba <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d113      	bne.n	800c6c6 <HAL_SPI_IRQHandler+0x9a>
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	f003 0320 	and.w	r3, r3, #32
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10e      	bne.n	800c6c6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d009      	beq.n	800c6c6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	4798      	blx	r3
    handled = 1UL;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10f      	bne.n	800c6f0 <HAL_SPI_IRQHandler+0xc4>
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	f003 0301 	and.w	r3, r3, #1
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00a      	beq.n	800c6f0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d105      	bne.n	800c6f0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	4798      	blx	r3
    handled = 1UL;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	f003 0320 	and.w	r3, r3, #32
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10f      	bne.n	800c71a <HAL_SPI_IRQHandler+0xee>
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	f003 0302 	and.w	r3, r3, #2
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00a      	beq.n	800c71a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d105      	bne.n	800c71a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	4798      	blx	r3
    handled = 1UL;
 800c716:	2301      	movs	r3, #1
 800c718:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f040 8147 	bne.w	800c9b0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	f003 0308 	and.w	r3, r3, #8
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f000 808b 	beq.w	800c844 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	699a      	ldr	r2, [r3, #24]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f042 0208 	orr.w	r2, r2, #8
 800c73c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	699a      	ldr	r2, [r3, #24]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f042 0210 	orr.w	r2, r2, #16
 800c74c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	699a      	ldr	r2, [r3, #24]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c75c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	691a      	ldr	r2, [r3, #16]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f022 0208 	bic.w	r2, r2, #8
 800c76c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d13d      	bne.n	800c7f8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c77c:	e036      	b.n	800c7ec <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	2b0f      	cmp	r3, #15
 800c784:	d90b      	bls.n	800c79e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c78e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c790:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c796:	1d1a      	adds	r2, r3, #4
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	665a      	str	r2, [r3, #100]	@ 0x64
 800c79c:	e01d      	b.n	800c7da <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	2b07      	cmp	r3, #7
 800c7a4:	d90b      	bls.n	800c7be <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	8812      	ldrh	r2, [r2, #0]
 800c7ae:	b292      	uxth	r2, r2
 800c7b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7b6:	1c9a      	adds	r2, r3, #2
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	665a      	str	r2, [r3, #100]	@ 0x64
 800c7bc:	e00d      	b.n	800c7da <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ca:	7812      	ldrb	r2, [r2, #0]
 800c7cc:	b2d2      	uxtb	r2, r2
 800c7ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d1c2      	bne.n	800c77e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f91d 	bl	800ca38 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2201      	movs	r2, #1
 800c802:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d003      	beq.n	800c818 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 f8e3 	bl	800c9dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c816:	e0d0      	b.n	800c9ba <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c818:	7cfb      	ldrb	r3, [r7, #19]
 800c81a:	2b05      	cmp	r3, #5
 800c81c:	d103      	bne.n	800c826 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7f3 feba 	bl	8000598 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c824:	e0c6      	b.n	800c9b4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c826:	7cfb      	ldrb	r3, [r7, #19]
 800c828:	2b04      	cmp	r3, #4
 800c82a:	d103      	bne.n	800c834 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f8cb 	bl	800c9c8 <HAL_SPI_RxCpltCallback>
    return;
 800c832:	e0bf      	b.n	800c9b4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c834:	7cfb      	ldrb	r3, [r7, #19]
 800c836:	2b03      	cmp	r3, #3
 800c838:	f040 80bc 	bne.w	800c9b4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7f3 fe9b 	bl	8000578 <HAL_SPI_TxCpltCallback>
    return;
 800c842:	e0b7      	b.n	800c9b4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 80b5 	beq.w	800c9ba <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00f      	beq.n	800c87a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c860:	f043 0204 	orr.w	r2, r3, #4
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	699a      	ldr	r2, [r3, #24]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c878:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00f      	beq.n	800c8a4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c88a:	f043 0201 	orr.w	r2, r3, #1
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	699a      	ldr	r2, [r3, #24]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c8a2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00f      	beq.n	800c8ce <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8b4:	f043 0208 	orr.w	r2, r3, #8
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	699a      	ldr	r2, [r3, #24]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c8cc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00f      	beq.n	800c8f8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	699a      	ldr	r2, [r3, #24]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f042 0220 	orr.w	r2, r2, #32
 800c8f6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d05a      	beq.n	800c9b8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f022 0201 	bic.w	r2, r2, #1
 800c910:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6919      	ldr	r1, [r3, #16]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	4b28      	ldr	r3, [pc, #160]	@ (800c9c0 <HAL_SPI_IRQHandler+0x394>)
 800c91e:	400b      	ands	r3, r1
 800c920:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c928:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c92c:	d138      	bne.n	800c9a0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	689a      	ldr	r2, [r3, #8]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c93c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c942:	2b00      	cmp	r3, #0
 800c944:	d013      	beq.n	800c96e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c94a:	4a1e      	ldr	r2, [pc, #120]	@ (800c9c4 <HAL_SPI_IRQHandler+0x398>)
 800c94c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c952:	4618      	mov	r0, r3
 800c954:	f7f7 fc02 	bl	800415c <HAL_DMA_Abort_IT>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d007      	beq.n	800c96e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c964:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c972:	2b00      	cmp	r3, #0
 800c974:	d020      	beq.n	800c9b8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c97a:	4a12      	ldr	r2, [pc, #72]	@ (800c9c4 <HAL_SPI_IRQHandler+0x398>)
 800c97c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c982:	4618      	mov	r0, r3
 800c984:	f7f7 fbea 	bl	800415c <HAL_DMA_Abort_IT>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d014      	beq.n	800c9b8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c994:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c99e:	e00b      	b.n	800c9b8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f817 	bl	800c9dc <HAL_SPI_ErrorCallback>
    return;
 800c9ae:	e003      	b.n	800c9b8 <HAL_SPI_IRQHandler+0x38c>
    return;
 800c9b0:	bf00      	nop
 800c9b2:	e002      	b.n	800c9ba <HAL_SPI_IRQHandler+0x38e>
    return;
 800c9b4:	bf00      	nop
 800c9b6:	e000      	b.n	800c9ba <HAL_SPI_IRQHandler+0x38e>
    return;
 800c9b8:	bf00      	nop
  }
}
 800c9ba:	3728      	adds	r7, #40	@ 0x28
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	fffffc94 	.word	0xfffffc94
 800c9c4:	0800ca05 	.word	0x0800ca05

0800c9c8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f7ff ffd6 	bl	800c9dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ca30:	bf00      	nop
 800ca32:	3710      	adds	r7, #16
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	695b      	ldr	r3, [r3, #20]
 800ca46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	699a      	ldr	r2, [r3, #24]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f042 0208 	orr.w	r2, r2, #8
 800ca56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	699a      	ldr	r2, [r3, #24]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f042 0210 	orr.w	r2, r2, #16
 800ca66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f022 0201 	bic.w	r2, r2, #1
 800ca76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6919      	ldr	r1, [r3, #16]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	4b3c      	ldr	r3, [pc, #240]	@ (800cb74 <SPI_CloseTransfer+0x13c>)
 800ca84:	400b      	ands	r3, r1
 800ca86:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	689a      	ldr	r2, [r3, #8]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ca96:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	2b04      	cmp	r3, #4
 800caa2:	d014      	beq.n	800cace <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f003 0320 	and.w	r3, r3, #32
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00f      	beq.n	800cace <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cab4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	699a      	ldr	r2, [r3, #24]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f042 0220 	orr.w	r2, r2, #32
 800cacc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b03      	cmp	r3, #3
 800cad8:	d014      	beq.n	800cb04 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00f      	beq.n	800cb04 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800caea:	f043 0204 	orr.w	r2, r3, #4
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	699a      	ldr	r2, [r3, #24]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb02:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00f      	beq.n	800cb2e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb14:	f043 0201 	orr.w	r2, r3, #1
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	699a      	ldr	r2, [r3, #24]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb2c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00f      	beq.n	800cb58 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb3e:	f043 0208 	orr.w	r2, r3, #8
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	699a      	ldr	r2, [r3, #24]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cb56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800cb68:	bf00      	nop
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	fffffc90 	.word	0xfffffc90

0800cb78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	603b      	str	r3, [r7, #0]
 800cb84:	4613      	mov	r3, r2
 800cb86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cb88:	e010      	b.n	800cbac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb8a:	f7f5 fd39 	bl	8002600 <HAL_GetTick>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	683a      	ldr	r2, [r7, #0]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d803      	bhi.n	800cba2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba0:	d102      	bne.n	800cba8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d101      	bne.n	800cbac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	e00f      	b.n	800cbcc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	695a      	ldr	r2, [r3, #20]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	bf0c      	ite	eq
 800cbbc:	2301      	moveq	r3, #1
 800cbbe:	2300      	movne	r3, #0
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d0df      	beq.n	800cb8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbe0:	095b      	lsrs	r3, r3, #5
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	3301      	adds	r3, #1
 800cbec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	3307      	adds	r3, #7
 800cbf2:	08db      	lsrs	r3, r3, #3
 800cbf4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	fb02 f303 	mul.w	r3, r2, r3
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3714      	adds	r7, #20
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr
	...

0800cc0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc0c:	b084      	sub	sp, #16
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	f107 001c 	add.w	r0, r7, #28
 800cc1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d121      	bne.n	800cc6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	68da      	ldr	r2, [r3, #12]
 800cc36:	4b2c      	ldr	r3, [pc, #176]	@ (800cce8 <USB_CoreInit+0xdc>)
 800cc38:	4013      	ands	r3, r2
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cc4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d105      	bne.n	800cc5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f001 fafa 	bl	800e258 <USB_CoreReset>
 800cc64:	4603      	mov	r3, r0
 800cc66:	73fb      	strb	r3, [r7, #15]
 800cc68:	e01b      	b.n	800cca2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f001 faee 	bl	800e258 <USB_CoreReset>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cc80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d106      	bne.n	800cc96 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	639a      	str	r2, [r3, #56]	@ 0x38
 800cc94:	e005      	b.n	800cca2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cca2:	7fbb      	ldrb	r3, [r7, #30]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d116      	bne.n	800ccd6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ccb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ccec <USB_CoreInit+0xe0>)
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	f043 0206 	orr.w	r2, r3, #6
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f043 0220 	orr.w	r2, r3, #32
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ccd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cce2:	b004      	add	sp, #16
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	ffbdffbf 	.word	0xffbdffbf
 800ccec:	03ee0000 	.word	0x03ee0000

0800ccf0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b087      	sub	sp, #28
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d165      	bne.n	800cdd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	4a41      	ldr	r2, [pc, #260]	@ (800ce0c <USB_SetTurnaroundTime+0x11c>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d906      	bls.n	800cd1a <USB_SetTurnaroundTime+0x2a>
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	4a40      	ldr	r2, [pc, #256]	@ (800ce10 <USB_SetTurnaroundTime+0x120>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d202      	bcs.n	800cd1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cd14:	230f      	movs	r3, #15
 800cd16:	617b      	str	r3, [r7, #20]
 800cd18:	e062      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	4a3c      	ldr	r2, [pc, #240]	@ (800ce10 <USB_SetTurnaroundTime+0x120>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d306      	bcc.n	800cd30 <USB_SetTurnaroundTime+0x40>
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	4a3b      	ldr	r2, [pc, #236]	@ (800ce14 <USB_SetTurnaroundTime+0x124>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d202      	bcs.n	800cd30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cd2a:	230e      	movs	r3, #14
 800cd2c:	617b      	str	r3, [r7, #20]
 800cd2e:	e057      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	4a38      	ldr	r2, [pc, #224]	@ (800ce14 <USB_SetTurnaroundTime+0x124>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d306      	bcc.n	800cd46 <USB_SetTurnaroundTime+0x56>
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	4a37      	ldr	r2, [pc, #220]	@ (800ce18 <USB_SetTurnaroundTime+0x128>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d202      	bcs.n	800cd46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cd40:	230d      	movs	r3, #13
 800cd42:	617b      	str	r3, [r7, #20]
 800cd44:	e04c      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	4a33      	ldr	r2, [pc, #204]	@ (800ce18 <USB_SetTurnaroundTime+0x128>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d306      	bcc.n	800cd5c <USB_SetTurnaroundTime+0x6c>
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	4a32      	ldr	r2, [pc, #200]	@ (800ce1c <USB_SetTurnaroundTime+0x12c>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d802      	bhi.n	800cd5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cd56:	230c      	movs	r3, #12
 800cd58:	617b      	str	r3, [r7, #20]
 800cd5a:	e041      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	4a2f      	ldr	r2, [pc, #188]	@ (800ce1c <USB_SetTurnaroundTime+0x12c>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d906      	bls.n	800cd72 <USB_SetTurnaroundTime+0x82>
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	4a2e      	ldr	r2, [pc, #184]	@ (800ce20 <USB_SetTurnaroundTime+0x130>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d802      	bhi.n	800cd72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cd6c:	230b      	movs	r3, #11
 800cd6e:	617b      	str	r3, [r7, #20]
 800cd70:	e036      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	4a2a      	ldr	r2, [pc, #168]	@ (800ce20 <USB_SetTurnaroundTime+0x130>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d906      	bls.n	800cd88 <USB_SetTurnaroundTime+0x98>
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	4a29      	ldr	r2, [pc, #164]	@ (800ce24 <USB_SetTurnaroundTime+0x134>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d802      	bhi.n	800cd88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cd82:	230a      	movs	r3, #10
 800cd84:	617b      	str	r3, [r7, #20]
 800cd86:	e02b      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	4a26      	ldr	r2, [pc, #152]	@ (800ce24 <USB_SetTurnaroundTime+0x134>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d906      	bls.n	800cd9e <USB_SetTurnaroundTime+0xae>
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	4a25      	ldr	r2, [pc, #148]	@ (800ce28 <USB_SetTurnaroundTime+0x138>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d202      	bcs.n	800cd9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cd98:	2309      	movs	r3, #9
 800cd9a:	617b      	str	r3, [r7, #20]
 800cd9c:	e020      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	4a21      	ldr	r2, [pc, #132]	@ (800ce28 <USB_SetTurnaroundTime+0x138>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d306      	bcc.n	800cdb4 <USB_SetTurnaroundTime+0xc4>
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	4a20      	ldr	r2, [pc, #128]	@ (800ce2c <USB_SetTurnaroundTime+0x13c>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d802      	bhi.n	800cdb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cdae:	2308      	movs	r3, #8
 800cdb0:	617b      	str	r3, [r7, #20]
 800cdb2:	e015      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	4a1d      	ldr	r2, [pc, #116]	@ (800ce2c <USB_SetTurnaroundTime+0x13c>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d906      	bls.n	800cdca <USB_SetTurnaroundTime+0xda>
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	4a1c      	ldr	r2, [pc, #112]	@ (800ce30 <USB_SetTurnaroundTime+0x140>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d202      	bcs.n	800cdca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cdc4:	2307      	movs	r3, #7
 800cdc6:	617b      	str	r3, [r7, #20]
 800cdc8:	e00a      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cdca:	2306      	movs	r3, #6
 800cdcc:	617b      	str	r3, [r7, #20]
 800cdce:	e007      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d102      	bne.n	800cddc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cdd6:	2309      	movs	r3, #9
 800cdd8:	617b      	str	r3, [r7, #20]
 800cdda:	e001      	b.n	800cde0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cddc:	2309      	movs	r3, #9
 800cdde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	68da      	ldr	r2, [r3, #12]
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	029b      	lsls	r3, r3, #10
 800cdf4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800cdf8:	431a      	orrs	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	371c      	adds	r7, #28
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	00d8acbf 	.word	0x00d8acbf
 800ce10:	00e4e1c0 	.word	0x00e4e1c0
 800ce14:	00f42400 	.word	0x00f42400
 800ce18:	01067380 	.word	0x01067380
 800ce1c:	011a499f 	.word	0x011a499f
 800ce20:	01312cff 	.word	0x01312cff
 800ce24:	014ca43f 	.word	0x014ca43f
 800ce28:	016e3600 	.word	0x016e3600
 800ce2c:	01a6ab1f 	.word	0x01a6ab1f
 800ce30:	01e84800 	.word	0x01e84800

0800ce34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	f043 0201 	orr.w	r2, r3, #1
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	370c      	adds	r7, #12
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce56:	b480      	push	{r7}
 800ce58:	b083      	sub	sp, #12
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	f023 0201 	bic.w	r2, r3, #1
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	460b      	mov	r3, r1
 800ce82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ce84:	2300      	movs	r3, #0
 800ce86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ce94:	78fb      	ldrb	r3, [r7, #3]
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d115      	bne.n	800cec6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cea6:	200a      	movs	r0, #10
 800cea8:	f7f5 fbb6 	bl	8002618 <HAL_Delay>
      ms += 10U;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	330a      	adds	r3, #10
 800ceb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f001 f93f 	bl	800e136 <USB_GetMode>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d01e      	beq.n	800cefc <USB_SetCurrentMode+0x84>
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2bc7      	cmp	r3, #199	@ 0xc7
 800cec2:	d9f0      	bls.n	800cea6 <USB_SetCurrentMode+0x2e>
 800cec4:	e01a      	b.n	800cefc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cec6:	78fb      	ldrb	r3, [r7, #3]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d115      	bne.n	800cef8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ced8:	200a      	movs	r0, #10
 800ceda:	f7f5 fb9d 	bl	8002618 <HAL_Delay>
      ms += 10U;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	330a      	adds	r3, #10
 800cee2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f001 f926 	bl	800e136 <USB_GetMode>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d005      	beq.n	800cefc <USB_SetCurrentMode+0x84>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2bc7      	cmp	r3, #199	@ 0xc7
 800cef4:	d9f0      	bls.n	800ced8 <USB_SetCurrentMode+0x60>
 800cef6:	e001      	b.n	800cefc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	e005      	b.n	800cf08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2bc8      	cmp	r3, #200	@ 0xc8
 800cf00:	d101      	bne.n	800cf06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e000      	b.n	800cf08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3710      	adds	r7, #16
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf10:	b084      	sub	sp, #16
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b086      	sub	sp, #24
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800cf1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	613b      	str	r3, [r7, #16]
 800cf2e:	e009      	b.n	800cf44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	3340      	adds	r3, #64	@ 0x40
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	4413      	add	r3, r2
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	3301      	adds	r3, #1
 800cf42:	613b      	str	r3, [r7, #16]
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	2b0e      	cmp	r3, #14
 800cf48:	d9f2      	bls.n	800cf30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cf4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d11c      	bne.n	800cf8c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cf60:	f043 0302 	orr.w	r3, r3, #2
 800cf64:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf6a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	e005      	b.n	800cf98 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cfa4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d10d      	bne.n	800cfc8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cfac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d104      	bne.n	800cfbe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f968 	bl	800d28c <USB_SetDevSpeed>
 800cfbc:	e008      	b.n	800cfd0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cfbe:	2101      	movs	r1, #1
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 f963 	bl	800d28c <USB_SetDevSpeed>
 800cfc6:	e003      	b.n	800cfd0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cfc8:	2103      	movs	r1, #3
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 f95e 	bl	800d28c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cfd0:	2110      	movs	r1, #16
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f8fa 	bl	800d1cc <USB_FlushTxFifo>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d001      	beq.n	800cfe2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f924 	bl	800d230 <USB_FlushRxFifo>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cff8:	461a      	mov	r2, r3
 800cffa:	2300      	movs	r3, #0
 800cffc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d004:	461a      	mov	r2, r3
 800d006:	2300      	movs	r3, #0
 800d008:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d010:	461a      	mov	r2, r3
 800d012:	2300      	movs	r3, #0
 800d014:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d016:	2300      	movs	r3, #0
 800d018:	613b      	str	r3, [r7, #16]
 800d01a:	e043      	b.n	800d0a4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	015a      	lsls	r2, r3, #5
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4413      	add	r3, r2
 800d024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d02e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d032:	d118      	bne.n	800d066 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10a      	bne.n	800d050 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	015a      	lsls	r2, r3, #5
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	4413      	add	r3, r2
 800d042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d046:	461a      	mov	r2, r3
 800d048:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	e013      	b.n	800d078 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	015a      	lsls	r2, r3, #5
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	4413      	add	r3, r2
 800d058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d05c:	461a      	mov	r2, r3
 800d05e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d062:	6013      	str	r3, [r2, #0]
 800d064:	e008      	b.n	800d078 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	015a      	lsls	r2, r3, #5
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	4413      	add	r3, r2
 800d06e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d072:	461a      	mov	r2, r3
 800d074:	2300      	movs	r3, #0
 800d076:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	015a      	lsls	r2, r3, #5
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	4413      	add	r3, r2
 800d080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d084:	461a      	mov	r2, r3
 800d086:	2300      	movs	r3, #0
 800d088:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	015a      	lsls	r2, r3, #5
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	4413      	add	r3, r2
 800d092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d096:	461a      	mov	r2, r3
 800d098:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d09c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	613b      	str	r3, [r7, #16]
 800d0a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d3b5      	bcc.n	800d01c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	613b      	str	r3, [r7, #16]
 800d0b4:	e043      	b.n	800d13e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	015a      	lsls	r2, r3, #5
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	4413      	add	r3, r2
 800d0be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d0c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d0cc:	d118      	bne.n	800d100 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10a      	bne.n	800d0ea <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	015a      	lsls	r2, r3, #5
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	4413      	add	r3, r2
 800d0dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d0e6:	6013      	str	r3, [r2, #0]
 800d0e8:	e013      	b.n	800d112 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d0fc:	6013      	str	r3, [r2, #0]
 800d0fe:	e008      	b.n	800d112 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	015a      	lsls	r2, r3, #5
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	4413      	add	r3, r2
 800d108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d10c:	461a      	mov	r2, r3
 800d10e:	2300      	movs	r3, #0
 800d110:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	015a      	lsls	r2, r3, #5
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	4413      	add	r3, r2
 800d11a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d11e:	461a      	mov	r2, r3
 800d120:	2300      	movs	r3, #0
 800d122:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	015a      	lsls	r2, r3, #5
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	4413      	add	r3, r2
 800d12c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d130:	461a      	mov	r2, r3
 800d132:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d136:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	3301      	adds	r3, #1
 800d13c:	613b      	str	r3, [r7, #16]
 800d13e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d142:	461a      	mov	r2, r3
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	4293      	cmp	r3, r2
 800d148:	d3b5      	bcc.n	800d0b6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d150:	691b      	ldr	r3, [r3, #16]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d15c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d16a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d16c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d170:	2b00      	cmp	r3, #0
 800d172:	d105      	bne.n	800d180 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	f043 0210 	orr.w	r2, r3, #16
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	699a      	ldr	r2, [r3, #24]
 800d184:	4b0f      	ldr	r3, [pc, #60]	@ (800d1c4 <USB_DevInit+0x2b4>)
 800d186:	4313      	orrs	r3, r2
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d18c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d190:	2b00      	cmp	r3, #0
 800d192:	d005      	beq.n	800d1a0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	699b      	ldr	r3, [r3, #24]
 800d198:	f043 0208 	orr.w	r2, r3, #8
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d1a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d105      	bne.n	800d1b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	699a      	ldr	r2, [r3, #24]
 800d1ac:	4b06      	ldr	r3, [pc, #24]	@ (800d1c8 <USB_DevInit+0x2b8>)
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3718      	adds	r7, #24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d1c0:	b004      	add	sp, #16
 800d1c2:	4770      	bx	lr
 800d1c4:	803c3800 	.word	0x803c3800
 800d1c8:	40000004 	.word	0x40000004

0800d1cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d1e6:	d901      	bls.n	800d1ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d1e8:	2303      	movs	r3, #3
 800d1ea:	e01b      	b.n	800d224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	daf2      	bge.n	800d1da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	019b      	lsls	r3, r3, #6
 800d1fc:	f043 0220 	orr.w	r2, r3, #32
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	3301      	adds	r3, #1
 800d208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d210:	d901      	bls.n	800d216 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d212:	2303      	movs	r3, #3
 800d214:	e006      	b.n	800d224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	f003 0320 	and.w	r3, r3, #32
 800d21e:	2b20      	cmp	r3, #32
 800d220:	d0f0      	beq.n	800d204 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d238:	2300      	movs	r3, #0
 800d23a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	3301      	adds	r3, #1
 800d240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d248:	d901      	bls.n	800d24e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d24a:	2303      	movs	r3, #3
 800d24c:	e018      	b.n	800d280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	2b00      	cmp	r3, #0
 800d254:	daf2      	bge.n	800d23c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d256:	2300      	movs	r3, #0
 800d258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2210      	movs	r2, #16
 800d25e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	3301      	adds	r3, #1
 800d264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d26c:	d901      	bls.n	800d272 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d26e:	2303      	movs	r3, #3
 800d270:	e006      	b.n	800d280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	f003 0310 	and.w	r3, r3, #16
 800d27a:	2b10      	cmp	r3, #16
 800d27c:	d0f0      	beq.n	800d260 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d27e:	2300      	movs	r3, #0
}
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	78fb      	ldrb	r3, [r7, #3]
 800d2a6:	68f9      	ldr	r1, [r7, #12]
 800d2a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3714      	adds	r7, #20
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr

0800d2be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800d2be:	b480      	push	{r7}
 800d2c0:	b087      	sub	sp, #28
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	f003 0306 	and.w	r3, r3, #6
 800d2d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d102      	bne.n	800d2e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	75fb      	strb	r3, [r7, #23]
 800d2e2:	e00a      	b.n	800d2fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	d002      	beq.n	800d2f0 <USB_GetDevSpeed+0x32>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2b06      	cmp	r3, #6
 800d2ee:	d102      	bne.n	800d2f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d2f0:	2302      	movs	r3, #2
 800d2f2:	75fb      	strb	r3, [r7, #23]
 800d2f4:	e001      	b.n	800d2fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d2f6:	230f      	movs	r3, #15
 800d2f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d2fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	371c      	adds	r7, #28
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	785b      	ldrb	r3, [r3, #1]
 800d320:	2b01      	cmp	r3, #1
 800d322:	d139      	bne.n	800d398 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d32a:	69da      	ldr	r2, [r3, #28]
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	f003 030f 	and.w	r3, r3, #15
 800d334:	2101      	movs	r1, #1
 800d336:	fa01 f303 	lsl.w	r3, r1, r3
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	68f9      	ldr	r1, [r7, #12]
 800d33e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d342:	4313      	orrs	r3, r2
 800d344:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	015a      	lsls	r2, r3, #5
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	4413      	add	r3, r2
 800d34e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d153      	bne.n	800d404 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	015a      	lsls	r2, r3, #5
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	4413      	add	r3, r2
 800d364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	791b      	ldrb	r3, [r3, #4]
 800d376:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d378:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	059b      	lsls	r3, r3, #22
 800d37e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d380:	431a      	orrs	r2, r3
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	0159      	lsls	r1, r3, #5
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	440b      	add	r3, r1
 800d38a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d38e:	4619      	mov	r1, r3
 800d390:	4b20      	ldr	r3, [pc, #128]	@ (800d414 <USB_ActivateEndpoint+0x10c>)
 800d392:	4313      	orrs	r3, r2
 800d394:	600b      	str	r3, [r1, #0]
 800d396:	e035      	b.n	800d404 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d39e:	69da      	ldr	r2, [r3, #28]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	f003 030f 	and.w	r3, r3, #15
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d3ae:	041b      	lsls	r3, r3, #16
 800d3b0:	68f9      	ldr	r1, [r7, #12]
 800d3b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	015a      	lsls	r2, r3, #5
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d119      	bne.n	800d404 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	015a      	lsls	r2, r3, #5
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	791b      	ldrb	r3, [r3, #4]
 800d3ea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d3ec:	430b      	orrs	r3, r1
 800d3ee:	431a      	orrs	r2, r3
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	0159      	lsls	r1, r3, #5
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	440b      	add	r3, r1
 800d3f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	4b05      	ldr	r3, [pc, #20]	@ (800d414 <USB_ActivateEndpoint+0x10c>)
 800d400:	4313      	orrs	r3, r2
 800d402:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	10008000 	.word	0x10008000

0800d418 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	785b      	ldrb	r3, [r3, #1]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d161      	bne.n	800d4f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	015a      	lsls	r2, r3, #5
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	4413      	add	r3, r2
 800d43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d446:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d44a:	d11f      	bne.n	800d48c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	015a      	lsls	r2, r3, #5
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	4413      	add	r3, r2
 800d454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	0151      	lsls	r1, r2, #5
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	440a      	add	r2, r1
 800d462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d466:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d46a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	015a      	lsls	r2, r3, #5
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	4413      	add	r3, r2
 800d474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	0151      	lsls	r1, r2, #5
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	440a      	add	r2, r1
 800d482:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d486:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d48a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	f003 030f 	and.w	r3, r3, #15
 800d49c:	2101      	movs	r1, #1
 800d49e:	fa01 f303 	lsl.w	r3, r1, r3
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	43db      	mvns	r3, r3
 800d4a6:	68f9      	ldr	r1, [r7, #12]
 800d4a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d4ac:	4013      	ands	r3, r2
 800d4ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4b6:	69da      	ldr	r2, [r3, #28]
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	f003 030f 	and.w	r3, r3, #15
 800d4c0:	2101      	movs	r1, #1
 800d4c2:	fa01 f303 	lsl.w	r3, r1, r3
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	43db      	mvns	r3, r3
 800d4ca:	68f9      	ldr	r1, [r7, #12]
 800d4cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	015a      	lsls	r2, r3, #5
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	4413      	add	r3, r2
 800d4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	0159      	lsls	r1, r3, #5
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	440b      	add	r3, r1
 800d4ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4b35      	ldr	r3, [pc, #212]	@ (800d5c8 <USB_DeactivateEndpoint+0x1b0>)
 800d4f2:	4013      	ands	r3, r2
 800d4f4:	600b      	str	r3, [r1, #0]
 800d4f6:	e060      	b.n	800d5ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	015a      	lsls	r2, r3, #5
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	4413      	add	r3, r2
 800d500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d50a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d50e:	d11f      	bne.n	800d550 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	015a      	lsls	r2, r3, #5
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	4413      	add	r3, r2
 800d518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	0151      	lsls	r1, r2, #5
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	440a      	add	r2, r1
 800d526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d52a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d52e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	015a      	lsls	r2, r3, #5
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	4413      	add	r3, r2
 800d538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	0151      	lsls	r1, r2, #5
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	440a      	add	r2, r1
 800d546:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d54a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d54e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	f003 030f 	and.w	r3, r3, #15
 800d560:	2101      	movs	r1, #1
 800d562:	fa01 f303 	lsl.w	r3, r1, r3
 800d566:	041b      	lsls	r3, r3, #16
 800d568:	43db      	mvns	r3, r3
 800d56a:	68f9      	ldr	r1, [r7, #12]
 800d56c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d570:	4013      	ands	r3, r2
 800d572:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d57a:	69da      	ldr	r2, [r3, #28]
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	f003 030f 	and.w	r3, r3, #15
 800d584:	2101      	movs	r1, #1
 800d586:	fa01 f303 	lsl.w	r3, r1, r3
 800d58a:	041b      	lsls	r3, r3, #16
 800d58c:	43db      	mvns	r3, r3
 800d58e:	68f9      	ldr	r1, [r7, #12]
 800d590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d594:	4013      	ands	r3, r2
 800d596:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	015a      	lsls	r2, r3, #5
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	4413      	add	r3, r2
 800d5a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	0159      	lsls	r1, r3, #5
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	440b      	add	r3, r1
 800d5ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	4b05      	ldr	r3, [pc, #20]	@ (800d5cc <USB_DeactivateEndpoint+0x1b4>)
 800d5b6:	4013      	ands	r3, r2
 800d5b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3714      	adds	r7, #20
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	ec337800 	.word	0xec337800
 800d5cc:	eff37800 	.word	0xeff37800

0800d5d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b08a      	sub	sp, #40	@ 0x28
 800d5d4:	af02      	add	r7, sp, #8
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	4613      	mov	r3, r2
 800d5dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	785b      	ldrb	r3, [r3, #1]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	f040 8185 	bne.w	800d8fc <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	691b      	ldr	r3, [r3, #16]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d132      	bne.n	800d660 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	015a      	lsls	r2, r3, #5
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	4413      	add	r3, r2
 800d602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d606:	691a      	ldr	r2, [r3, #16]
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	0159      	lsls	r1, r3, #5
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	440b      	add	r3, r1
 800d610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d614:	4619      	mov	r1, r3
 800d616:	4ba7      	ldr	r3, [pc, #668]	@ (800d8b4 <USB_EPStartXfer+0x2e4>)
 800d618:	4013      	ands	r3, r2
 800d61a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	015a      	lsls	r2, r3, #5
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	4413      	add	r3, r2
 800d624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	69ba      	ldr	r2, [r7, #24]
 800d62c:	0151      	lsls	r1, r2, #5
 800d62e:	69fa      	ldr	r2, [r7, #28]
 800d630:	440a      	add	r2, r1
 800d632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d636:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d63a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	015a      	lsls	r2, r3, #5
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	4413      	add	r3, r2
 800d644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d648:	691a      	ldr	r2, [r3, #16]
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	0159      	lsls	r1, r3, #5
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	440b      	add	r3, r1
 800d652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d656:	4619      	mov	r1, r3
 800d658:	4b97      	ldr	r3, [pc, #604]	@ (800d8b8 <USB_EPStartXfer+0x2e8>)
 800d65a:	4013      	ands	r3, r2
 800d65c:	610b      	str	r3, [r1, #16]
 800d65e:	e097      	b.n	800d790 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	015a      	lsls	r2, r3, #5
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	4413      	add	r3, r2
 800d668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d66c:	691a      	ldr	r2, [r3, #16]
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	0159      	lsls	r1, r3, #5
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	440b      	add	r3, r1
 800d676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d67a:	4619      	mov	r1, r3
 800d67c:	4b8e      	ldr	r3, [pc, #568]	@ (800d8b8 <USB_EPStartXfer+0x2e8>)
 800d67e:	4013      	ands	r3, r2
 800d680:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	015a      	lsls	r2, r3, #5
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	4413      	add	r3, r2
 800d68a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d68e:	691a      	ldr	r2, [r3, #16]
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	0159      	lsls	r1, r3, #5
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	440b      	add	r3, r1
 800d698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d69c:	4619      	mov	r1, r3
 800d69e:	4b85      	ldr	r3, [pc, #532]	@ (800d8b4 <USB_EPStartXfer+0x2e4>)
 800d6a0:	4013      	ands	r3, r2
 800d6a2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d11a      	bne.n	800d6e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	691a      	ldr	r2, [r3, #16]
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d903      	bls.n	800d6be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	689a      	ldr	r2, [r3, #8]
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	015a      	lsls	r2, r3, #5
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6ca:	691b      	ldr	r3, [r3, #16]
 800d6cc:	69ba      	ldr	r2, [r7, #24]
 800d6ce:	0151      	lsls	r1, r2, #5
 800d6d0:	69fa      	ldr	r2, [r7, #28]
 800d6d2:	440a      	add	r2, r1
 800d6d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d6dc:	6113      	str	r3, [r2, #16]
 800d6de:	e044      	b.n	800d76a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	691a      	ldr	r2, [r3, #16]
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	1e5a      	subs	r2, r3, #1
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6f4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	015a      	lsls	r2, r3, #5
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d702:	691a      	ldr	r2, [r3, #16]
 800d704:	8afb      	ldrh	r3, [r7, #22]
 800d706:	04d9      	lsls	r1, r3, #19
 800d708:	4b6c      	ldr	r3, [pc, #432]	@ (800d8bc <USB_EPStartXfer+0x2ec>)
 800d70a:	400b      	ands	r3, r1
 800d70c:	69b9      	ldr	r1, [r7, #24]
 800d70e:	0148      	lsls	r0, r1, #5
 800d710:	69f9      	ldr	r1, [r7, #28]
 800d712:	4401      	add	r1, r0
 800d714:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d718:	4313      	orrs	r3, r2
 800d71a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	791b      	ldrb	r3, [r3, #4]
 800d720:	2b01      	cmp	r3, #1
 800d722:	d122      	bne.n	800d76a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	015a      	lsls	r2, r3, #5
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	4413      	add	r3, r2
 800d72c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	69ba      	ldr	r2, [r7, #24]
 800d734:	0151      	lsls	r1, r2, #5
 800d736:	69fa      	ldr	r2, [r7, #28]
 800d738:	440a      	add	r2, r1
 800d73a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d73e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d742:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	015a      	lsls	r2, r3, #5
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	4413      	add	r3, r2
 800d74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d750:	691a      	ldr	r2, [r3, #16]
 800d752:	8afb      	ldrh	r3, [r7, #22]
 800d754:	075b      	lsls	r3, r3, #29
 800d756:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d75a:	69b9      	ldr	r1, [r7, #24]
 800d75c:	0148      	lsls	r0, r1, #5
 800d75e:	69f9      	ldr	r1, [r7, #28]
 800d760:	4401      	add	r1, r0
 800d762:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d766:	4313      	orrs	r3, r2
 800d768:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	015a      	lsls	r2, r3, #5
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	4413      	add	r3, r2
 800d772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d776:	691a      	ldr	r2, [r3, #16]
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d780:	69b9      	ldr	r1, [r7, #24]
 800d782:	0148      	lsls	r0, r1, #5
 800d784:	69f9      	ldr	r1, [r7, #28]
 800d786:	4401      	add	r1, r0
 800d788:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d78c:	4313      	orrs	r3, r2
 800d78e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d790:	79fb      	ldrb	r3, [r7, #7]
 800d792:	2b01      	cmp	r3, #1
 800d794:	d14b      	bne.n	800d82e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	69db      	ldr	r3, [r3, #28]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d009      	beq.n	800d7b2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	015a      	lsls	r2, r3, #5
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	69db      	ldr	r3, [r3, #28]
 800d7b0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	791b      	ldrb	r3, [r3, #4]
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d128      	bne.n	800d80c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d110      	bne.n	800d7ec <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	015a      	lsls	r2, r3, #5
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	69ba      	ldr	r2, [r7, #24]
 800d7da:	0151      	lsls	r1, r2, #5
 800d7dc:	69fa      	ldr	r2, [r7, #28]
 800d7de:	440a      	add	r2, r1
 800d7e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d7e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d7e8:	6013      	str	r3, [r2, #0]
 800d7ea:	e00f      	b.n	800d80c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	015a      	lsls	r2, r3, #5
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	69ba      	ldr	r2, [r7, #24]
 800d7fc:	0151      	lsls	r1, r2, #5
 800d7fe:	69fa      	ldr	r2, [r7, #28]
 800d800:	440a      	add	r2, r1
 800d802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d80a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	69ba      	ldr	r2, [r7, #24]
 800d81c:	0151      	lsls	r1, r2, #5
 800d81e:	69fa      	ldr	r2, [r7, #28]
 800d820:	440a      	add	r2, r1
 800d822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d826:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d82a:	6013      	str	r3, [r2, #0]
 800d82c:	e169      	b.n	800db02 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	015a      	lsls	r2, r3, #5
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	4413      	add	r3, r2
 800d836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	69ba      	ldr	r2, [r7, #24]
 800d83e:	0151      	lsls	r1, r2, #5
 800d840:	69fa      	ldr	r2, [r7, #28]
 800d842:	440a      	add	r2, r1
 800d844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d848:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d84c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	791b      	ldrb	r3, [r3, #4]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d015      	beq.n	800d882 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f000 8151 	beq.w	800db02 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	f003 030f 	and.w	r3, r3, #15
 800d870:	2101      	movs	r1, #1
 800d872:	fa01 f303 	lsl.w	r3, r1, r3
 800d876:	69f9      	ldr	r1, [r7, #28]
 800d878:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d87c:	4313      	orrs	r3, r2
 800d87e:	634b      	str	r3, [r1, #52]	@ 0x34
 800d880:	e13f      	b.n	800db02 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d116      	bne.n	800d8c0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	015a      	lsls	r2, r3, #5
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	4413      	add	r3, r2
 800d89a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	69ba      	ldr	r2, [r7, #24]
 800d8a2:	0151      	lsls	r1, r2, #5
 800d8a4:	69fa      	ldr	r2, [r7, #28]
 800d8a6:	440a      	add	r2, r1
 800d8a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d8ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d8b0:	6013      	str	r3, [r2, #0]
 800d8b2:	e015      	b.n	800d8e0 <USB_EPStartXfer+0x310>
 800d8b4:	e007ffff 	.word	0xe007ffff
 800d8b8:	fff80000 	.word	0xfff80000
 800d8bc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	015a      	lsls	r2, r3, #5
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	69ba      	ldr	r2, [r7, #24]
 800d8d0:	0151      	lsls	r1, r2, #5
 800d8d2:	69fa      	ldr	r2, [r7, #28]
 800d8d4:	440a      	add	r2, r1
 800d8d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d8da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d8de:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	68d9      	ldr	r1, [r3, #12]
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	781a      	ldrb	r2, [r3, #0]
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	b298      	uxth	r0, r3
 800d8ee:	79fb      	ldrb	r3, [r7, #7]
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f000 f9b9 	bl	800dc6c <USB_WritePacket>
 800d8fa:	e102      	b.n	800db02 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	015a      	lsls	r2, r3, #5
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	4413      	add	r3, r2
 800d904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d908:	691a      	ldr	r2, [r3, #16]
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	0159      	lsls	r1, r3, #5
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	440b      	add	r3, r1
 800d912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d916:	4619      	mov	r1, r3
 800d918:	4b7c      	ldr	r3, [pc, #496]	@ (800db0c <USB_EPStartXfer+0x53c>)
 800d91a:	4013      	ands	r3, r2
 800d91c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	015a      	lsls	r2, r3, #5
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	4413      	add	r3, r2
 800d926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d92a:	691a      	ldr	r2, [r3, #16]
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	0159      	lsls	r1, r3, #5
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	440b      	add	r3, r1
 800d934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d938:	4619      	mov	r1, r3
 800d93a:	4b75      	ldr	r3, [pc, #468]	@ (800db10 <USB_EPStartXfer+0x540>)
 800d93c:	4013      	ands	r3, r2
 800d93e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d12f      	bne.n	800d9a6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d003      	beq.n	800d956 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	689a      	ldr	r2, [r3, #8]
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	689a      	ldr	r2, [r3, #8]
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	015a      	lsls	r2, r3, #5
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	4413      	add	r3, r2
 800d966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d96a:	691a      	ldr	r2, [r3, #16]
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	6a1b      	ldr	r3, [r3, #32]
 800d970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d974:	69b9      	ldr	r1, [r7, #24]
 800d976:	0148      	lsls	r0, r1, #5
 800d978:	69f9      	ldr	r1, [r7, #28]
 800d97a:	4401      	add	r1, r0
 800d97c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d980:	4313      	orrs	r3, r2
 800d982:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	015a      	lsls	r2, r3, #5
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	4413      	add	r3, r2
 800d98c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	69ba      	ldr	r2, [r7, #24]
 800d994:	0151      	lsls	r1, r2, #5
 800d996:	69fa      	ldr	r2, [r7, #28]
 800d998:	440a      	add	r2, r1
 800d99a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d99e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d9a2:	6113      	str	r3, [r2, #16]
 800d9a4:	e05f      	b.n	800da66 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	691b      	ldr	r3, [r3, #16]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d123      	bne.n	800d9f6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	015a      	lsls	r2, r3, #5
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9ba:	691a      	ldr	r2, [r3, #16]
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d9c4:	69b9      	ldr	r1, [r7, #24]
 800d9c6:	0148      	lsls	r0, r1, #5
 800d9c8:	69f9      	ldr	r1, [r7, #28]
 800d9ca:	4401      	add	r1, r0
 800d9cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	015a      	lsls	r2, r3, #5
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	4413      	add	r3, r2
 800d9dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	69ba      	ldr	r2, [r7, #24]
 800d9e4:	0151      	lsls	r1, r2, #5
 800d9e6:	69fa      	ldr	r2, [r7, #28]
 800d9e8:	440a      	add	r2, r1
 800d9ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d9f2:	6113      	str	r3, [r2, #16]
 800d9f4:	e037      	b.n	800da66 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	691a      	ldr	r2, [r3, #16]
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	689b      	ldr	r3, [r3, #8]
 800d9fe:	4413      	add	r3, r2
 800da00:	1e5a      	subs	r2, r3, #1
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	fbb2 f3f3 	udiv	r3, r2, r3
 800da0a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	8afa      	ldrh	r2, [r7, #22]
 800da12:	fb03 f202 	mul.w	r2, r3, r2
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	015a      	lsls	r2, r3, #5
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	4413      	add	r3, r2
 800da22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da26:	691a      	ldr	r2, [r3, #16]
 800da28:	8afb      	ldrh	r3, [r7, #22]
 800da2a:	04d9      	lsls	r1, r3, #19
 800da2c:	4b39      	ldr	r3, [pc, #228]	@ (800db14 <USB_EPStartXfer+0x544>)
 800da2e:	400b      	ands	r3, r1
 800da30:	69b9      	ldr	r1, [r7, #24]
 800da32:	0148      	lsls	r0, r1, #5
 800da34:	69f9      	ldr	r1, [r7, #28]
 800da36:	4401      	add	r1, r0
 800da38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800da3c:	4313      	orrs	r3, r2
 800da3e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	015a      	lsls	r2, r3, #5
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	4413      	add	r3, r2
 800da48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da4c:	691a      	ldr	r2, [r3, #16]
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da56:	69b9      	ldr	r1, [r7, #24]
 800da58:	0148      	lsls	r0, r1, #5
 800da5a:	69f9      	ldr	r1, [r7, #28]
 800da5c:	4401      	add	r1, r0
 800da5e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800da62:	4313      	orrs	r3, r2
 800da64:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800da66:	79fb      	ldrb	r3, [r7, #7]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d10d      	bne.n	800da88 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d009      	beq.n	800da88 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	68d9      	ldr	r1, [r3, #12]
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	015a      	lsls	r2, r3, #5
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	4413      	add	r3, r2
 800da80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da84:	460a      	mov	r2, r1
 800da86:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	791b      	ldrb	r3, [r3, #4]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d128      	bne.n	800dae2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d110      	bne.n	800dac2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	015a      	lsls	r2, r3, #5
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	4413      	add	r3, r2
 800daa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	69ba      	ldr	r2, [r7, #24]
 800dab0:	0151      	lsls	r1, r2, #5
 800dab2:	69fa      	ldr	r2, [r7, #28]
 800dab4:	440a      	add	r2, r1
 800dab6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800daba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dabe:	6013      	str	r3, [r2, #0]
 800dac0:	e00f      	b.n	800dae2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	015a      	lsls	r2, r3, #5
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	4413      	add	r3, r2
 800daca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	69ba      	ldr	r2, [r7, #24]
 800dad2:	0151      	lsls	r1, r2, #5
 800dad4:	69fa      	ldr	r2, [r7, #28]
 800dad6:	440a      	add	r2, r1
 800dad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dadc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dae0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	015a      	lsls	r2, r3, #5
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	4413      	add	r3, r2
 800daea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	69ba      	ldr	r2, [r7, #24]
 800daf2:	0151      	lsls	r1, r2, #5
 800daf4:	69fa      	ldr	r2, [r7, #28]
 800daf6:	440a      	add	r2, r1
 800daf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dafc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800db00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3720      	adds	r7, #32
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	fff80000 	.word	0xfff80000
 800db10:	e007ffff 	.word	0xe007ffff
 800db14:	1ff80000 	.word	0x1ff80000

0800db18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db18:	b480      	push	{r7}
 800db1a:	b087      	sub	sp, #28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800db22:	2300      	movs	r3, #0
 800db24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	785b      	ldrb	r3, [r3, #1]
 800db32:	2b01      	cmp	r3, #1
 800db34:	d14a      	bne.n	800dbcc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	015a      	lsls	r2, r3, #5
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	4413      	add	r3, r2
 800db40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db4e:	f040 8086 	bne.w	800dc5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	015a      	lsls	r2, r3, #5
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	683a      	ldr	r2, [r7, #0]
 800db64:	7812      	ldrb	r2, [r2, #0]
 800db66:	0151      	lsls	r1, r2, #5
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	440a      	add	r2, r1
 800db6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800db74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	015a      	lsls	r2, r3, #5
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	4413      	add	r3, r2
 800db80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	7812      	ldrb	r2, [r2, #0]
 800db8a:	0151      	lsls	r1, r2, #5
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	440a      	add	r2, r1
 800db90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800db98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	3301      	adds	r3, #1
 800db9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d902      	bls.n	800dbb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	75fb      	strb	r3, [r7, #23]
          break;
 800dbae:	e056      	b.n	800dc5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	015a      	lsls	r2, r3, #5
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	4413      	add	r3, r2
 800dbba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dbc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dbc8:	d0e7      	beq.n	800db9a <USB_EPStopXfer+0x82>
 800dbca:	e048      	b.n	800dc5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	015a      	lsls	r2, r3, #5
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dbe0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dbe4:	d13b      	bne.n	800dc5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	015a      	lsls	r2, r3, #5
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	4413      	add	r3, r2
 800dbf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	7812      	ldrb	r2, [r2, #0]
 800dbfa:	0151      	lsls	r1, r2, #5
 800dbfc:	693a      	ldr	r2, [r7, #16]
 800dbfe:	440a      	add	r2, r1
 800dc00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dc08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	015a      	lsls	r2, r3, #5
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	4413      	add	r3, r2
 800dc14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	683a      	ldr	r2, [r7, #0]
 800dc1c:	7812      	ldrb	r2, [r2, #0]
 800dc1e:	0151      	lsls	r1, r2, #5
 800dc20:	693a      	ldr	r2, [r7, #16]
 800dc22:	440a      	add	r2, r1
 800dc24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dc2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3301      	adds	r3, #1
 800dc32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f242 7210 	movw	r2, #10000	@ 0x2710
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d902      	bls.n	800dc44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	75fb      	strb	r3, [r7, #23]
          break;
 800dc42:	e00c      	b.n	800dc5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc5c:	d0e7      	beq.n	800dc2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	371c      	adds	r7, #28
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b089      	sub	sp, #36	@ 0x24
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	4611      	mov	r1, r2
 800dc78:	461a      	mov	r2, r3
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	71fb      	strb	r3, [r7, #7]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800dc8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d123      	bne.n	800dcda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dc92:	88bb      	ldrh	r3, [r7, #4]
 800dc94:	3303      	adds	r3, #3
 800dc96:	089b      	lsrs	r3, r3, #2
 800dc98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	61bb      	str	r3, [r7, #24]
 800dc9e:	e018      	b.n	800dcd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dca0:	79fb      	ldrb	r3, [r7, #7]
 800dca2:	031a      	lsls	r2, r3, #12
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	4413      	add	r3, r2
 800dca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dcac:	461a      	mov	r2, r3
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	61bb      	str	r3, [r7, #24]
 800dcd2:	69ba      	ldr	r2, [r7, #24]
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d3e2      	bcc.n	800dca0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3724      	adds	r7, #36	@ 0x24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b08b      	sub	sp, #44	@ 0x2c
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800dcfe:	88fb      	ldrh	r3, [r7, #6]
 800dd00:	089b      	lsrs	r3, r3, #2
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800dd06:	88fb      	ldrh	r3, [r7, #6]
 800dd08:	f003 0303 	and.w	r3, r3, #3
 800dd0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800dd0e:	2300      	movs	r3, #0
 800dd10:	623b      	str	r3, [r7, #32]
 800dd12:	e014      	b.n	800dd3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd1e:	601a      	str	r2, [r3, #0]
    pDest++;
 800dd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd22:	3301      	adds	r3, #1
 800dd24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800dd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd28:	3301      	adds	r3, #1
 800dd2a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2e:	3301      	adds	r3, #1
 800dd30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800dd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd34:	3301      	adds	r3, #1
 800dd36:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800dd38:	6a3b      	ldr	r3, [r7, #32]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	623b      	str	r3, [r7, #32]
 800dd3e:	6a3a      	ldr	r2, [r7, #32]
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d3e6      	bcc.n	800dd14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dd46:	8bfb      	ldrh	r3, [r7, #30]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d01e      	beq.n	800dd8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd56:	461a      	mov	r2, r3
 800dd58:	f107 0310 	add.w	r3, r7, #16
 800dd5c:	6812      	ldr	r2, [r2, #0]
 800dd5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dd60:	693a      	ldr	r2, [r7, #16]
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	00db      	lsls	r3, r3, #3
 800dd68:	fa22 f303 	lsr.w	r3, r2, r3
 800dd6c:	b2da      	uxtb	r2, r3
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd70:	701a      	strb	r2, [r3, #0]
      i++;
 800dd72:	6a3b      	ldr	r3, [r7, #32]
 800dd74:	3301      	adds	r3, #1
 800dd76:	623b      	str	r3, [r7, #32]
      pDest++;
 800dd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800dd7e:	8bfb      	ldrh	r3, [r7, #30]
 800dd80:	3b01      	subs	r3, #1
 800dd82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dd84:	8bfb      	ldrh	r3, [r7, #30]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1ea      	bne.n	800dd60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	372c      	adds	r7, #44	@ 0x2c
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	785b      	ldrb	r3, [r3, #1]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d12c      	bne.n	800de0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	015a      	lsls	r2, r3, #5
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	4413      	add	r3, r2
 800ddbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	db12      	blt.n	800ddec <USB_EPSetStall+0x54>
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00f      	beq.n	800ddec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	015a      	lsls	r2, r3, #5
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	0151      	lsls	r1, r2, #5
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	440a      	add	r2, r1
 800dde2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dde6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ddea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	015a      	lsls	r2, r3, #5
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	0151      	lsls	r1, r2, #5
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	440a      	add	r2, r1
 800de02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800de06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800de0a:	6013      	str	r3, [r2, #0]
 800de0c:	e02b      	b.n	800de66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	015a      	lsls	r2, r3, #5
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	4413      	add	r3, r2
 800de16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	db12      	blt.n	800de46 <USB_EPSetStall+0xae>
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00f      	beq.n	800de46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	015a      	lsls	r2, r3, #5
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	4413      	add	r3, r2
 800de2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	0151      	lsls	r1, r2, #5
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	440a      	add	r2, r1
 800de3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800de44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	015a      	lsls	r2, r3, #5
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	4413      	add	r3, r2
 800de4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68ba      	ldr	r2, [r7, #8]
 800de56:	0151      	lsls	r1, r2, #5
 800de58:	68fa      	ldr	r2, [r7, #12]
 800de5a:	440a      	add	r2, r1
 800de5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800de64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3714      	adds	r7, #20
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	785b      	ldrb	r3, [r3, #1]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d128      	bne.n	800dee2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	015a      	lsls	r2, r3, #5
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	4413      	add	r3, r2
 800de98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	0151      	lsls	r1, r2, #5
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	440a      	add	r2, r1
 800dea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800deaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800deae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	791b      	ldrb	r3, [r3, #4]
 800deb4:	2b03      	cmp	r3, #3
 800deb6:	d003      	beq.n	800dec0 <USB_EPClearStall+0x4c>
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	791b      	ldrb	r3, [r3, #4]
 800debc:	2b02      	cmp	r3, #2
 800debe:	d138      	bne.n	800df32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	015a      	lsls	r2, r3, #5
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	4413      	add	r3, r2
 800dec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	68ba      	ldr	r2, [r7, #8]
 800ded0:	0151      	lsls	r1, r2, #5
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	440a      	add	r2, r1
 800ded6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800deda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	e027      	b.n	800df32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	015a      	lsls	r2, r3, #5
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	4413      	add	r3, r2
 800deea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	0151      	lsls	r1, r2, #5
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	440a      	add	r2, r1
 800def8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800defc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800df00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	791b      	ldrb	r3, [r3, #4]
 800df06:	2b03      	cmp	r3, #3
 800df08:	d003      	beq.n	800df12 <USB_EPClearStall+0x9e>
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	791b      	ldrb	r3, [r3, #4]
 800df0e:	2b02      	cmp	r3, #2
 800df10:	d10f      	bne.n	800df32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	015a      	lsls	r2, r3, #5
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	4413      	add	r3, r2
 800df1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	0151      	lsls	r1, r2, #5
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	440a      	add	r2, r1
 800df28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800df2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	460b      	mov	r3, r1
 800df4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68fa      	ldr	r2, [r7, #12]
 800df5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800df62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	78fb      	ldrb	r3, [r7, #3]
 800df6e:	011b      	lsls	r3, r3, #4
 800df70:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800df74:	68f9      	ldr	r1, [r7, #12]
 800df76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df7a:	4313      	orrs	r3, r2
 800df7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	3714      	adds	r7, #20
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b085      	sub	sp, #20
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dfa6:	f023 0303 	bic.w	r3, r3, #3
 800dfaa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dfba:	f023 0302 	bic.w	r3, r3, #2
 800dfbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3714      	adds	r7, #20
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b085      	sub	sp, #20
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dfe8:	f023 0303 	bic.w	r3, r3, #3
 800dfec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dffc:	f043 0302 	orr.w	r3, r3, #2
 800e000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	3714      	adds	r7, #20
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e010:	b480      	push	{r7}
 800e012:	b085      	sub	sp, #20
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	695b      	ldr	r3, [r3, #20]
 800e01c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	699b      	ldr	r3, [r3, #24]
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	4013      	ands	r3, r2
 800e026:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e028:	68fb      	ldr	r3, [r7, #12]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3714      	adds	r7, #20
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e036:	b480      	push	{r7}
 800e038:	b085      	sub	sp, #20
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e052:	69db      	ldr	r3, [r3, #28]
 800e054:	68ba      	ldr	r2, [r7, #8]
 800e056:	4013      	ands	r3, r2
 800e058:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	0c1b      	lsrs	r3, r3, #16
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3714      	adds	r7, #20
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr

0800e06a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e06a:	b480      	push	{r7}
 800e06c:	b085      	sub	sp, #20
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e086:	69db      	ldr	r3, [r3, #28]
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	4013      	ands	r3, r2
 800e08c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	b29b      	uxth	r3, r3
}
 800e092:	4618      	mov	r0, r3
 800e094:	3714      	adds	r7, #20
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr

0800e09e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e09e:	b480      	push	{r7}
 800e0a0:	b085      	sub	sp, #20
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	6078      	str	r0, [r7, #4]
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e0ae:	78fb      	ldrb	r3, [r7, #3]
 800e0b0:	015a      	lsls	r2, r3, #5
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	68ba      	ldr	r2, [r7, #8]
 800e0c8:	4013      	ands	r3, r2
 800e0ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e0cc:	68bb      	ldr	r3, [r7, #8]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3714      	adds	r7, #20
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e0da:	b480      	push	{r7}
 800e0dc:	b087      	sub	sp, #28
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0f0:	691b      	ldr	r3, [r3, #16]
 800e0f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e0fe:	78fb      	ldrb	r3, [r7, #3]
 800e100:	f003 030f 	and.w	r3, r3, #15
 800e104:	68fa      	ldr	r2, [r7, #12]
 800e106:	fa22 f303 	lsr.w	r3, r2, r3
 800e10a:	01db      	lsls	r3, r3, #7
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	4313      	orrs	r3, r2
 800e112:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e114:	78fb      	ldrb	r3, [r7, #3]
 800e116:	015a      	lsls	r2, r3, #5
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	4413      	add	r3, r2
 800e11c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	693a      	ldr	r2, [r7, #16]
 800e124:	4013      	ands	r3, r2
 800e126:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e128:	68bb      	ldr	r3, [r7, #8]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	371c      	adds	r7, #28
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr

0800e136 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e136:	b480      	push	{r7}
 800e138:	b083      	sub	sp, #12
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	695b      	ldr	r3, [r3, #20]
 800e142:	f003 0301 	and.w	r3, r3, #1
}
 800e146:	4618      	mov	r0, r3
 800e148:	370c      	adds	r7, #12
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
	...

0800e154 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800e154:	b480      	push	{r7}
 800e156:	b085      	sub	sp, #20
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e16e:	4619      	mov	r1, r3
 800e170:	4b09      	ldr	r3, [pc, #36]	@ (800e198 <USB_ActivateSetup+0x44>)
 800e172:	4013      	ands	r3, r2
 800e174:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e188:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e18a:	2300      	movs	r3, #0
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3714      	adds	r7, #20
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr
 800e198:	fffff800 	.word	0xfffff800

0800e19c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b087      	sub	sp, #28
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	607a      	str	r2, [r7, #4]
 800e1a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	333c      	adds	r3, #60	@ 0x3c
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	4a26      	ldr	r2, [pc, #152]	@ (800e254 <USB_EP0_OutStart+0xb8>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d90a      	bls.n	800e1d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1d0:	d101      	bne.n	800e1d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	e037      	b.n	800e246 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1dc:	461a      	mov	r2, r3
 800e1de:	2300      	movs	r3, #0
 800e1e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1e8:	691b      	ldr	r3, [r3, #16]
 800e1ea:	697a      	ldr	r2, [r7, #20]
 800e1ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e1f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e1f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1fc:	691b      	ldr	r3, [r3, #16]
 800e1fe:	697a      	ldr	r2, [r7, #20]
 800e200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e204:	f043 0318 	orr.w	r3, r3, #24
 800e208:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e218:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e21c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e21e:	7afb      	ldrb	r3, [r7, #11]
 800e220:	2b01      	cmp	r3, #1
 800e222:	d10f      	bne.n	800e244 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e22a:	461a      	mov	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	697a      	ldr	r2, [r7, #20]
 800e23a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e23e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800e242:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e244:	2300      	movs	r3, #0
}
 800e246:	4618      	mov	r0, r3
 800e248:	371c      	adds	r7, #28
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	4f54300a 	.word	0x4f54300a

0800e258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e260:	2300      	movs	r3, #0
 800e262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	3301      	adds	r3, #1
 800e268:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e270:	d901      	bls.n	800e276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e272:	2303      	movs	r3, #3
 800e274:	e01b      	b.n	800e2ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	691b      	ldr	r3, [r3, #16]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	daf2      	bge.n	800e264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e27e:	2300      	movs	r3, #0
 800e280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	f043 0201 	orr.w	r2, r3, #1
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	3301      	adds	r3, #1
 800e292:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e29a:	d901      	bls.n	800e2a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e29c:	2303      	movs	r3, #3
 800e29e:	e006      	b.n	800e2ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	f003 0301 	and.w	r3, r3, #1
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d0f0      	beq.n	800e28e <USB_CoreReset+0x36>

  return HAL_OK;
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3714      	adds	r7, #20
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr
	...

0800e2bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e2c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e2cc:	f002 fcb8 	bl	8010c40 <USBD_static_malloc>
 800e2d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d109      	bne.n	800e2ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	32b0      	adds	r2, #176	@ 0xb0
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	e0d4      	b.n	800e496 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e2ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f002 fd0a 	bl	8010d0c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	32b0      	adds	r2, #176	@ 0xb0
 800e302:	68f9      	ldr	r1, [r7, #12]
 800e304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	32b0      	adds	r2, #176	@ 0xb0
 800e312:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	7c1b      	ldrb	r3, [r3, #16]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d138      	bne.n	800e396 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e324:	4b5e      	ldr	r3, [pc, #376]	@ (800e4a0 <USBD_CDC_Init+0x1e4>)
 800e326:	7819      	ldrb	r1, [r3, #0]
 800e328:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e32c:	2202      	movs	r2, #2
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f002 fb63 	bl	80109fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e334:	4b5a      	ldr	r3, [pc, #360]	@ (800e4a0 <USBD_CDC_Init+0x1e4>)
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	f003 020f 	and.w	r2, r3, #15
 800e33c:	6879      	ldr	r1, [r7, #4]
 800e33e:	4613      	mov	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	4413      	add	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	440b      	add	r3, r1
 800e348:	3324      	adds	r3, #36	@ 0x24
 800e34a:	2201      	movs	r2, #1
 800e34c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e34e:	4b55      	ldr	r3, [pc, #340]	@ (800e4a4 <USBD_CDC_Init+0x1e8>)
 800e350:	7819      	ldrb	r1, [r3, #0]
 800e352:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e356:	2202      	movs	r2, #2
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f002 fb4e 	bl	80109fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e35e:	4b51      	ldr	r3, [pc, #324]	@ (800e4a4 <USBD_CDC_Init+0x1e8>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	f003 020f 	and.w	r2, r3, #15
 800e366:	6879      	ldr	r1, [r7, #4]
 800e368:	4613      	mov	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	440b      	add	r3, r1
 800e372:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e376:	2201      	movs	r2, #1
 800e378:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e37a:	4b4b      	ldr	r3, [pc, #300]	@ (800e4a8 <USBD_CDC_Init+0x1ec>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	f003 020f 	and.w	r2, r3, #15
 800e382:	6879      	ldr	r1, [r7, #4]
 800e384:	4613      	mov	r3, r2
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	4413      	add	r3, r2
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	440b      	add	r3, r1
 800e38e:	3326      	adds	r3, #38	@ 0x26
 800e390:	2210      	movs	r2, #16
 800e392:	801a      	strh	r2, [r3, #0]
 800e394:	e035      	b.n	800e402 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e396:	4b42      	ldr	r3, [pc, #264]	@ (800e4a0 <USBD_CDC_Init+0x1e4>)
 800e398:	7819      	ldrb	r1, [r3, #0]
 800e39a:	2340      	movs	r3, #64	@ 0x40
 800e39c:	2202      	movs	r2, #2
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f002 fb2b 	bl	80109fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e3a4:	4b3e      	ldr	r3, [pc, #248]	@ (800e4a0 <USBD_CDC_Init+0x1e4>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	f003 020f 	and.w	r2, r3, #15
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	4413      	add	r3, r2
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	440b      	add	r3, r1
 800e3b8:	3324      	adds	r3, #36	@ 0x24
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e3be:	4b39      	ldr	r3, [pc, #228]	@ (800e4a4 <USBD_CDC_Init+0x1e8>)
 800e3c0:	7819      	ldrb	r1, [r3, #0]
 800e3c2:	2340      	movs	r3, #64	@ 0x40
 800e3c4:	2202      	movs	r2, #2
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f002 fb17 	bl	80109fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e3cc:	4b35      	ldr	r3, [pc, #212]	@ (800e4a4 <USBD_CDC_Init+0x1e8>)
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	f003 020f 	and.w	r2, r3, #15
 800e3d4:	6879      	ldr	r1, [r7, #4]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4413      	add	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	440b      	add	r3, r1
 800e3e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e3e8:	4b2f      	ldr	r3, [pc, #188]	@ (800e4a8 <USBD_CDC_Init+0x1ec>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	f003 020f 	and.w	r2, r3, #15
 800e3f0:	6879      	ldr	r1, [r7, #4]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4413      	add	r3, r2
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	440b      	add	r3, r1
 800e3fc:	3326      	adds	r3, #38	@ 0x26
 800e3fe:	2210      	movs	r2, #16
 800e400:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e402:	4b29      	ldr	r3, [pc, #164]	@ (800e4a8 <USBD_CDC_Init+0x1ec>)
 800e404:	7819      	ldrb	r1, [r3, #0]
 800e406:	2308      	movs	r3, #8
 800e408:	2203      	movs	r2, #3
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f002 faf5 	bl	80109fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e410:	4b25      	ldr	r3, [pc, #148]	@ (800e4a8 <USBD_CDC_Init+0x1ec>)
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	f003 020f 	and.w	r2, r3, #15
 800e418:	6879      	ldr	r1, [r7, #4]
 800e41a:	4613      	mov	r3, r2
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	4413      	add	r3, r2
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	440b      	add	r3, r1
 800e424:	3324      	adds	r3, #36	@ 0x24
 800e426:	2201      	movs	r2, #1
 800e428:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2200      	movs	r2, #0
 800e42e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	33b0      	adds	r3, #176	@ 0xb0
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4413      	add	r3, r2
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2200      	movs	r2, #0
 800e44a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2200      	movs	r2, #0
 800e452:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d101      	bne.n	800e464 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e460:	2302      	movs	r3, #2
 800e462:	e018      	b.n	800e496 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	7c1b      	ldrb	r3, [r3, #16]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d10a      	bne.n	800e482 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e46c:	4b0d      	ldr	r3, [pc, #52]	@ (800e4a4 <USBD_CDC_Init+0x1e8>)
 800e46e:	7819      	ldrb	r1, [r3, #0]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e476:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f002 fbac 	bl	8010bd8 <USBD_LL_PrepareReceive>
 800e480:	e008      	b.n	800e494 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e482:	4b08      	ldr	r3, [pc, #32]	@ (800e4a4 <USBD_CDC_Init+0x1e8>)
 800e484:	7819      	ldrb	r1, [r3, #0]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e48c:	2340      	movs	r3, #64	@ 0x40
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f002 fba2 	bl	8010bd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	24000097 	.word	0x24000097
 800e4a4:	24000098 	.word	0x24000098
 800e4a8:	24000099 	.word	0x24000099

0800e4ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e4b8:	4b3a      	ldr	r3, [pc, #232]	@ (800e5a4 <USBD_CDC_DeInit+0xf8>)
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	4619      	mov	r1, r3
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f002 fac1 	bl	8010a46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e4c4:	4b37      	ldr	r3, [pc, #220]	@ (800e5a4 <USBD_CDC_DeInit+0xf8>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	f003 020f 	and.w	r2, r3, #15
 800e4cc:	6879      	ldr	r1, [r7, #4]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4413      	add	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	440b      	add	r3, r1
 800e4d8:	3324      	adds	r3, #36	@ 0x24
 800e4da:	2200      	movs	r2, #0
 800e4dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e4de:	4b32      	ldr	r3, [pc, #200]	@ (800e5a8 <USBD_CDC_DeInit+0xfc>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f002 faae 	bl	8010a46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800e5a8 <USBD_CDC_DeInit+0xfc>)
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	f003 020f 	and.w	r2, r3, #15
 800e4f2:	6879      	ldr	r1, [r7, #4]
 800e4f4:	4613      	mov	r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	4413      	add	r3, r2
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	440b      	add	r3, r1
 800e4fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e502:	2200      	movs	r2, #0
 800e504:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e506:	4b29      	ldr	r3, [pc, #164]	@ (800e5ac <USBD_CDC_DeInit+0x100>)
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	4619      	mov	r1, r3
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f002 fa9a 	bl	8010a46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e512:	4b26      	ldr	r3, [pc, #152]	@ (800e5ac <USBD_CDC_DeInit+0x100>)
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	f003 020f 	and.w	r2, r3, #15
 800e51a:	6879      	ldr	r1, [r7, #4]
 800e51c:	4613      	mov	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	4413      	add	r3, r2
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	440b      	add	r3, r1
 800e526:	3324      	adds	r3, #36	@ 0x24
 800e528:	2200      	movs	r2, #0
 800e52a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e52c:	4b1f      	ldr	r3, [pc, #124]	@ (800e5ac <USBD_CDC_DeInit+0x100>)
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	f003 020f 	and.w	r2, r3, #15
 800e534:	6879      	ldr	r1, [r7, #4]
 800e536:	4613      	mov	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4413      	add	r3, r2
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	440b      	add	r3, r1
 800e540:	3326      	adds	r3, #38	@ 0x26
 800e542:	2200      	movs	r2, #0
 800e544:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	32b0      	adds	r2, #176	@ 0xb0
 800e550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d01f      	beq.n	800e598 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	33b0      	adds	r3, #176	@ 0xb0
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	4413      	add	r3, r2
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	32b0      	adds	r2, #176	@ 0xb0
 800e576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f002 fb6e 	bl	8010c5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	32b0      	adds	r2, #176	@ 0xb0
 800e58a:	2100      	movs	r1, #0
 800e58c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3708      	adds	r7, #8
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	24000097 	.word	0x24000097
 800e5a8:	24000098 	.word	0x24000098
 800e5ac:	24000099 	.word	0x24000099

0800e5b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	32b0      	adds	r2, #176	@ 0xb0
 800e5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d101      	bne.n	800e5e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	e0bf      	b.n	800e760 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d050      	beq.n	800e68e <USBD_CDC_Setup+0xde>
 800e5ec:	2b20      	cmp	r3, #32
 800e5ee:	f040 80af 	bne.w	800e750 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	88db      	ldrh	r3, [r3, #6]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d03a      	beq.n	800e670 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	b25b      	sxtb	r3, r3
 800e600:	2b00      	cmp	r3, #0
 800e602:	da1b      	bge.n	800e63c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	33b0      	adds	r3, #176	@ 0xb0
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	4413      	add	r3, r2
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	689b      	ldr	r3, [r3, #8]
 800e616:	683a      	ldr	r2, [r7, #0]
 800e618:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e61a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e61c:	683a      	ldr	r2, [r7, #0]
 800e61e:	88d2      	ldrh	r2, [r2, #6]
 800e620:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	88db      	ldrh	r3, [r3, #6]
 800e626:	2b07      	cmp	r3, #7
 800e628:	bf28      	it	cs
 800e62a:	2307      	movcs	r3, #7
 800e62c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	89fa      	ldrh	r2, [r7, #14]
 800e632:	4619      	mov	r1, r3
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f001 fd7d 	bl	8010134 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e63a:	e090      	b.n	800e75e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	785a      	ldrb	r2, [r3, #1]
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	88db      	ldrh	r3, [r3, #6]
 800e64a:	2b3f      	cmp	r3, #63	@ 0x3f
 800e64c:	d803      	bhi.n	800e656 <USBD_CDC_Setup+0xa6>
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	88db      	ldrh	r3, [r3, #6]
 800e652:	b2da      	uxtb	r2, r3
 800e654:	e000      	b.n	800e658 <USBD_CDC_Setup+0xa8>
 800e656:	2240      	movs	r2, #64	@ 0x40
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e65e:	6939      	ldr	r1, [r7, #16]
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e666:	461a      	mov	r2, r3
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f001 fd8f 	bl	801018c <USBD_CtlPrepareRx>
      break;
 800e66e:	e076      	b.n	800e75e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	33b0      	adds	r3, #176	@ 0xb0
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	4413      	add	r3, r2
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	683a      	ldr	r2, [r7, #0]
 800e684:	7850      	ldrb	r0, [r2, #1]
 800e686:	2200      	movs	r2, #0
 800e688:	6839      	ldr	r1, [r7, #0]
 800e68a:	4798      	blx	r3
      break;
 800e68c:	e067      	b.n	800e75e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	785b      	ldrb	r3, [r3, #1]
 800e692:	2b0b      	cmp	r3, #11
 800e694:	d851      	bhi.n	800e73a <USBD_CDC_Setup+0x18a>
 800e696:	a201      	add	r2, pc, #4	@ (adr r2, 800e69c <USBD_CDC_Setup+0xec>)
 800e698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e69c:	0800e6cd 	.word	0x0800e6cd
 800e6a0:	0800e749 	.word	0x0800e749
 800e6a4:	0800e73b 	.word	0x0800e73b
 800e6a8:	0800e73b 	.word	0x0800e73b
 800e6ac:	0800e73b 	.word	0x0800e73b
 800e6b0:	0800e73b 	.word	0x0800e73b
 800e6b4:	0800e73b 	.word	0x0800e73b
 800e6b8:	0800e73b 	.word	0x0800e73b
 800e6bc:	0800e73b 	.word	0x0800e73b
 800e6c0:	0800e73b 	.word	0x0800e73b
 800e6c4:	0800e6f7 	.word	0x0800e6f7
 800e6c8:	0800e721 	.word	0x0800e721
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	2b03      	cmp	r3, #3
 800e6d6:	d107      	bne.n	800e6e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e6d8:	f107 030a 	add.w	r3, r7, #10
 800e6dc:	2202      	movs	r2, #2
 800e6de:	4619      	mov	r1, r3
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f001 fd27 	bl	8010134 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e6e6:	e032      	b.n	800e74e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e6e8:	6839      	ldr	r1, [r7, #0]
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f001 fca5 	bl	801003a <USBD_CtlError>
            ret = USBD_FAIL;
 800e6f0:	2303      	movs	r3, #3
 800e6f2:	75fb      	strb	r3, [r7, #23]
          break;
 800e6f4:	e02b      	b.n	800e74e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2b03      	cmp	r3, #3
 800e700:	d107      	bne.n	800e712 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e702:	f107 030d 	add.w	r3, r7, #13
 800e706:	2201      	movs	r2, #1
 800e708:	4619      	mov	r1, r3
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f001 fd12 	bl	8010134 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e710:	e01d      	b.n	800e74e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e712:	6839      	ldr	r1, [r7, #0]
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f001 fc90 	bl	801003a <USBD_CtlError>
            ret = USBD_FAIL;
 800e71a:	2303      	movs	r3, #3
 800e71c:	75fb      	strb	r3, [r7, #23]
          break;
 800e71e:	e016      	b.n	800e74e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2b03      	cmp	r3, #3
 800e72a:	d00f      	beq.n	800e74c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e72c:	6839      	ldr	r1, [r7, #0]
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f001 fc83 	bl	801003a <USBD_CtlError>
            ret = USBD_FAIL;
 800e734:	2303      	movs	r3, #3
 800e736:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e738:	e008      	b.n	800e74c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f001 fc7c 	bl	801003a <USBD_CtlError>
          ret = USBD_FAIL;
 800e742:	2303      	movs	r3, #3
 800e744:	75fb      	strb	r3, [r7, #23]
          break;
 800e746:	e002      	b.n	800e74e <USBD_CDC_Setup+0x19e>
          break;
 800e748:	bf00      	nop
 800e74a:	e008      	b.n	800e75e <USBD_CDC_Setup+0x1ae>
          break;
 800e74c:	bf00      	nop
      }
      break;
 800e74e:	e006      	b.n	800e75e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e750:	6839      	ldr	r1, [r7, #0]
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f001 fc71 	bl	801003a <USBD_CtlError>
      ret = USBD_FAIL;
 800e758:	2303      	movs	r3, #3
 800e75a:	75fb      	strb	r3, [r7, #23]
      break;
 800e75c:	bf00      	nop
  }

  return (uint8_t)ret;
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e760:	4618      	mov	r0, r3
 800e762:	3718      	adds	r7, #24
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	460b      	mov	r3, r1
 800e772:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e77a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	32b0      	adds	r2, #176	@ 0xb0
 800e786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d101      	bne.n	800e792 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e78e:	2303      	movs	r3, #3
 800e790:	e065      	b.n	800e85e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	32b0      	adds	r2, #176	@ 0xb0
 800e79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e7a2:	78fb      	ldrb	r3, [r7, #3]
 800e7a4:	f003 020f 	and.w	r2, r3, #15
 800e7a8:	6879      	ldr	r1, [r7, #4]
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	4413      	add	r3, r2
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	440b      	add	r3, r1
 800e7b4:	3318      	adds	r3, #24
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d02f      	beq.n	800e81c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e7bc:	78fb      	ldrb	r3, [r7, #3]
 800e7be:	f003 020f 	and.w	r2, r3, #15
 800e7c2:	6879      	ldr	r1, [r7, #4]
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	440b      	add	r3, r1
 800e7ce:	3318      	adds	r3, #24
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	78fb      	ldrb	r3, [r7, #3]
 800e7d4:	f003 010f 	and.w	r1, r3, #15
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	460b      	mov	r3, r1
 800e7dc:	00db      	lsls	r3, r3, #3
 800e7de:	440b      	add	r3, r1
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4403      	add	r3, r0
 800e7e4:	331c      	adds	r3, #28
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	fbb2 f1f3 	udiv	r1, r2, r3
 800e7ec:	fb01 f303 	mul.w	r3, r1, r3
 800e7f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d112      	bne.n	800e81c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e7f6:	78fb      	ldrb	r3, [r7, #3]
 800e7f8:	f003 020f 	and.w	r2, r3, #15
 800e7fc:	6879      	ldr	r1, [r7, #4]
 800e7fe:	4613      	mov	r3, r2
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	4413      	add	r3, r2
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	440b      	add	r3, r1
 800e808:	3318      	adds	r3, #24
 800e80a:	2200      	movs	r2, #0
 800e80c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e80e:	78f9      	ldrb	r1, [r7, #3]
 800e810:	2300      	movs	r3, #0
 800e812:	2200      	movs	r2, #0
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f002 f9be 	bl	8010b96 <USBD_LL_Transmit>
 800e81a:	e01f      	b.n	800e85c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	2200      	movs	r2, #0
 800e820:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	33b0      	adds	r3, #176	@ 0xb0
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	4413      	add	r3, r2
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	691b      	ldr	r3, [r3, #16]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d010      	beq.n	800e85c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	33b0      	adds	r3, #176	@ 0xb0
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	4413      	add	r3, r2
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	691b      	ldr	r3, [r3, #16]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e858:	78fa      	ldrb	r2, [r7, #3]
 800e85a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3710      	adds	r7, #16
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e866:	b580      	push	{r7, lr}
 800e868:	b084      	sub	sp, #16
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	460b      	mov	r3, r1
 800e870:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	32b0      	adds	r2, #176	@ 0xb0
 800e87c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e880:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	32b0      	adds	r2, #176	@ 0xb0
 800e88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d101      	bne.n	800e898 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e894:	2303      	movs	r3, #3
 800e896:	e01a      	b.n	800e8ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e898:	78fb      	ldrb	r3, [r7, #3]
 800e89a:	4619      	mov	r1, r3
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f002 f9bc 	bl	8010c1a <USBD_LL_GetRxDataSize>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	33b0      	adds	r3, #176	@ 0xb0
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	4413      	add	r3, r2
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e8c8:	4611      	mov	r1, r2
 800e8ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e8cc:	2300      	movs	r3, #0
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b084      	sub	sp, #16
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	32b0      	adds	r2, #176	@ 0xb0
 800e8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d101      	bne.n	800e8f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	e024      	b.n	800e942 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	33b0      	adds	r3, #176	@ 0xb0
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	4413      	add	r3, r2
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d019      	beq.n	800e940 <USBD_CDC_EP0_RxReady+0x6a>
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e912:	2bff      	cmp	r3, #255	@ 0xff
 800e914:	d014      	beq.n	800e940 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	33b0      	adds	r3, #176	@ 0xb0
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	4413      	add	r3, r2
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e92e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e936:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	22ff      	movs	r2, #255	@ 0xff
 800e93c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3710      	adds	r7, #16
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
	...

0800e94c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b086      	sub	sp, #24
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e954:	2182      	movs	r1, #130	@ 0x82
 800e956:	4818      	ldr	r0, [pc, #96]	@ (800e9b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e958:	f000 fd0f 	bl	800f37a <USBD_GetEpDesc>
 800e95c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e95e:	2101      	movs	r1, #1
 800e960:	4815      	ldr	r0, [pc, #84]	@ (800e9b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e962:	f000 fd0a 	bl	800f37a <USBD_GetEpDesc>
 800e966:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e968:	2181      	movs	r1, #129	@ 0x81
 800e96a:	4813      	ldr	r0, [pc, #76]	@ (800e9b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e96c:	f000 fd05 	bl	800f37a <USBD_GetEpDesc>
 800e970:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d002      	beq.n	800e97e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	2210      	movs	r2, #16
 800e97c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d006      	beq.n	800e992 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	2200      	movs	r2, #0
 800e988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e98c:	711a      	strb	r2, [r3, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d006      	beq.n	800e9a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e9a0:	711a      	strb	r2, [r3, #4]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2243      	movs	r2, #67	@ 0x43
 800e9aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e9ac:	4b02      	ldr	r3, [pc, #8]	@ (800e9b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3718      	adds	r7, #24
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	24000054 	.word	0x24000054

0800e9bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b086      	sub	sp, #24
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e9c4:	2182      	movs	r1, #130	@ 0x82
 800e9c6:	4818      	ldr	r0, [pc, #96]	@ (800ea28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e9c8:	f000 fcd7 	bl	800f37a <USBD_GetEpDesc>
 800e9cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e9ce:	2101      	movs	r1, #1
 800e9d0:	4815      	ldr	r0, [pc, #84]	@ (800ea28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e9d2:	f000 fcd2 	bl	800f37a <USBD_GetEpDesc>
 800e9d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e9d8:	2181      	movs	r1, #129	@ 0x81
 800e9da:	4813      	ldr	r0, [pc, #76]	@ (800ea28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e9dc:	f000 fccd 	bl	800f37a <USBD_GetEpDesc>
 800e9e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d002      	beq.n	800e9ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	2210      	movs	r2, #16
 800e9ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d006      	beq.n	800ea02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	711a      	strb	r2, [r3, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f042 0202 	orr.w	r2, r2, #2
 800ea00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d006      	beq.n	800ea16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	711a      	strb	r2, [r3, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f042 0202 	orr.w	r2, r2, #2
 800ea14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2243      	movs	r2, #67	@ 0x43
 800ea1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ea1c:	4b02      	ldr	r3, [pc, #8]	@ (800ea28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3718      	adds	r7, #24
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	24000054 	.word	0x24000054

0800ea2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ea34:	2182      	movs	r1, #130	@ 0x82
 800ea36:	4818      	ldr	r0, [pc, #96]	@ (800ea98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ea38:	f000 fc9f 	bl	800f37a <USBD_GetEpDesc>
 800ea3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ea3e:	2101      	movs	r1, #1
 800ea40:	4815      	ldr	r0, [pc, #84]	@ (800ea98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ea42:	f000 fc9a 	bl	800f37a <USBD_GetEpDesc>
 800ea46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ea48:	2181      	movs	r1, #129	@ 0x81
 800ea4a:	4813      	ldr	r0, [pc, #76]	@ (800ea98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ea4c:	f000 fc95 	bl	800f37a <USBD_GetEpDesc>
 800ea50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d002      	beq.n	800ea5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	2210      	movs	r2, #16
 800ea5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d006      	beq.n	800ea72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	2200      	movs	r2, #0
 800ea68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea6c:	711a      	strb	r2, [r3, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d006      	beq.n	800ea86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea80:	711a      	strb	r2, [r3, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2243      	movs	r2, #67	@ 0x43
 800ea8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ea8c:	4b02      	ldr	r3, [pc, #8]	@ (800ea98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3718      	adds	r7, #24
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	24000054 	.word	0x24000054

0800ea9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	220a      	movs	r2, #10
 800eaa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800eaaa:	4b03      	ldr	r3, [pc, #12]	@ (800eab8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr
 800eab8:	24000010 	.word	0x24000010

0800eabc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d101      	bne.n	800ead0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eacc:	2303      	movs	r3, #3
 800eace:	e009      	b.n	800eae4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	33b0      	adds	r3, #176	@ 0xb0
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4413      	add	r3, r2
 800eade:	683a      	ldr	r2, [r7, #0]
 800eae0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b087      	sub	sp, #28
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	32b0      	adds	r2, #176	@ 0xb0
 800eb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb0a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d101      	bne.n	800eb16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800eb12:	2303      	movs	r3, #3
 800eb14:	e008      	b.n	800eb28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800eb26:	2300      	movs	r3, #0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	371c      	adds	r7, #28
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b085      	sub	sp, #20
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	32b0      	adds	r2, #176	@ 0xb0
 800eb48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d101      	bne.n	800eb58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800eb54:	2303      	movs	r3, #3
 800eb56:	e004      	b.n	800eb62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3714      	adds	r7, #20
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr
	...

0800eb70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b084      	sub	sp, #16
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	32b0      	adds	r2, #176	@ 0xb0
 800eb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	32b0      	adds	r2, #176	@ 0xb0
 800eb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d101      	bne.n	800eb9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800eb9a:	2303      	movs	r3, #3
 800eb9c:	e018      	b.n	800ebd0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	7c1b      	ldrb	r3, [r3, #16]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d10a      	bne.n	800ebbc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eba6:	4b0c      	ldr	r3, [pc, #48]	@ (800ebd8 <USBD_CDC_ReceivePacket+0x68>)
 800eba8:	7819      	ldrb	r1, [r3, #0]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ebb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f002 f80f 	bl	8010bd8 <USBD_LL_PrepareReceive>
 800ebba:	e008      	b.n	800ebce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ebbc:	4b06      	ldr	r3, [pc, #24]	@ (800ebd8 <USBD_CDC_ReceivePacket+0x68>)
 800ebbe:	7819      	ldrb	r1, [r3, #0]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ebc6:	2340      	movs	r3, #64	@ 0x40
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f002 f805 	bl	8010bd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	24000098 	.word	0x24000098

0800ebdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b086      	sub	sp, #24
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d101      	bne.n	800ebf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	e01f      	b.n	800ec34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d003      	beq.n	800ec1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	79fa      	ldrb	r2, [r7, #7]
 800ec26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f001 fe79 	bl	8010920 <USBD_LL_Init>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ec32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3718      	adds	r7, #24
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec46:	2300      	movs	r3, #0
 800ec48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d101      	bne.n	800ec54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ec50:	2303      	movs	r3, #3
 800ec52:	e025      	b.n	800eca0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	683a      	ldr	r2, [r7, #0]
 800ec58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	32ae      	adds	r2, #174	@ 0xae
 800ec66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d00f      	beq.n	800ec90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	32ae      	adds	r2, #174	@ 0xae
 800ec7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec80:	f107 020e 	add.w	r2, r7, #14
 800ec84:	4610      	mov	r0, r2
 800ec86:	4798      	blx	r3
 800ec88:	4602      	mov	r2, r0
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ec96:	1c5a      	adds	r2, r3, #1
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ec9e:	2300      	movs	r3, #0
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f001 fe87 	bl	80109c4 <USBD_LL_Start>
 800ecb6:	4603      	mov	r3, r0
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3708      	adds	r7, #8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ecc8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr

0800ecd6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b084      	sub	sp, #16
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
 800ecde:	460b      	mov	r3, r1
 800ece0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d009      	beq.n	800ed04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	78fa      	ldrb	r2, [r7, #3]
 800ecfa:	4611      	mov	r1, r2
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	4798      	blx	r3
 800ed00:	4603      	mov	r3, r0
 800ed02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ed04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b084      	sub	sp, #16
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
 800ed16:	460b      	mov	r3, r1
 800ed18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	78fa      	ldrb	r2, [r7, #3]
 800ed28:	4611      	mov	r1, r2
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	4798      	blx	r3
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ed34:	2303      	movs	r3, #3
 800ed36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b084      	sub	sp, #16
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed52:	6839      	ldr	r1, [r7, #0]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f001 f936 	bl	800ffc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ed68:	461a      	mov	r2, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ed76:	f003 031f 	and.w	r3, r3, #31
 800ed7a:	2b02      	cmp	r3, #2
 800ed7c:	d01a      	beq.n	800edb4 <USBD_LL_SetupStage+0x72>
 800ed7e:	2b02      	cmp	r3, #2
 800ed80:	d822      	bhi.n	800edc8 <USBD_LL_SetupStage+0x86>
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d002      	beq.n	800ed8c <USBD_LL_SetupStage+0x4a>
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	d00a      	beq.n	800eda0 <USBD_LL_SetupStage+0x5e>
 800ed8a:	e01d      	b.n	800edc8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed92:	4619      	mov	r1, r3
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f000 fb63 	bl	800f460 <USBD_StdDevReq>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ed9e:	e020      	b.n	800ede2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eda6:	4619      	mov	r1, r3
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 fbcb 	bl	800f544 <USBD_StdItfReq>
 800edae:	4603      	mov	r3, r0
 800edb0:	73fb      	strb	r3, [r7, #15]
      break;
 800edb2:	e016      	b.n	800ede2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800edba:	4619      	mov	r1, r3
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 fc2d 	bl	800f61c <USBD_StdEPReq>
 800edc2:	4603      	mov	r3, r0
 800edc4:	73fb      	strb	r3, [r7, #15]
      break;
 800edc6:	e00c      	b.n	800ede2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800edce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	4619      	mov	r1, r3
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f001 fe54 	bl	8010a84 <USBD_LL_StallEP>
 800eddc:	4603      	mov	r3, r0
 800edde:	73fb      	strb	r3, [r7, #15]
      break;
 800ede0:	bf00      	nop
  }

  return ret;
 800ede2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	460b      	mov	r3, r1
 800edf6:	607a      	str	r2, [r7, #4]
 800edf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800edfe:	7afb      	ldrb	r3, [r7, #11]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d16e      	bne.n	800eee2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ee0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ee12:	2b03      	cmp	r3, #3
 800ee14:	f040 8098 	bne.w	800ef48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	689a      	ldr	r2, [r3, #8]
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d913      	bls.n	800ee4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	689a      	ldr	r2, [r3, #8]
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	1ad2      	subs	r2, r2, r3
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	68da      	ldr	r2, [r3, #12]
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	689b      	ldr	r3, [r3, #8]
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	bf28      	it	cs
 800ee3e:	4613      	movcs	r3, r2
 800ee40:	461a      	mov	r2, r3
 800ee42:	6879      	ldr	r1, [r7, #4]
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	f001 f9be 	bl	80101c6 <USBD_CtlContinueRx>
 800ee4a:	e07d      	b.n	800ef48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ee52:	f003 031f 	and.w	r3, r3, #31
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d014      	beq.n	800ee84 <USBD_LL_DataOutStage+0x98>
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d81d      	bhi.n	800ee9a <USBD_LL_DataOutStage+0xae>
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d002      	beq.n	800ee68 <USBD_LL_DataOutStage+0x7c>
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	d003      	beq.n	800ee6e <USBD_LL_DataOutStage+0x82>
 800ee66:	e018      	b.n	800ee9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	75bb      	strb	r3, [r7, #22]
            break;
 800ee6c:	e018      	b.n	800eea0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	4619      	mov	r1, r3
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f000 fa64 	bl	800f346 <USBD_CoreFindIF>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	75bb      	strb	r3, [r7, #22]
            break;
 800ee82:	e00d      	b.n	800eea0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	68f8      	ldr	r0, [r7, #12]
 800ee90:	f000 fa66 	bl	800f360 <USBD_CoreFindEP>
 800ee94:	4603      	mov	r3, r0
 800ee96:	75bb      	strb	r3, [r7, #22]
            break;
 800ee98:	e002      	b.n	800eea0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	75bb      	strb	r3, [r7, #22]
            break;
 800ee9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eea0:	7dbb      	ldrb	r3, [r7, #22]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d119      	bne.n	800eeda <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b03      	cmp	r3, #3
 800eeb0:	d113      	bne.n	800eeda <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800eeb2:	7dba      	ldrb	r2, [r7, #22]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	32ae      	adds	r2, #174	@ 0xae
 800eeb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eebc:	691b      	ldr	r3, [r3, #16]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00b      	beq.n	800eeda <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800eec2:	7dba      	ldrb	r2, [r7, #22]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800eeca:	7dba      	ldrb	r2, [r7, #22]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	32ae      	adds	r2, #174	@ 0xae
 800eed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	f001 f984 	bl	80101e8 <USBD_CtlSendStatus>
 800eee0:	e032      	b.n	800ef48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800eee2:	7afb      	ldrb	r3, [r7, #11]
 800eee4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	4619      	mov	r1, r3
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f000 fa37 	bl	800f360 <USBD_CoreFindEP>
 800eef2:	4603      	mov	r3, r0
 800eef4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eef6:	7dbb      	ldrb	r3, [r7, #22]
 800eef8:	2bff      	cmp	r3, #255	@ 0xff
 800eefa:	d025      	beq.n	800ef48 <USBD_LL_DataOutStage+0x15c>
 800eefc:	7dbb      	ldrb	r3, [r7, #22]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d122      	bne.n	800ef48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	d117      	bne.n	800ef3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ef0e:	7dba      	ldrb	r2, [r7, #22]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	32ae      	adds	r2, #174	@ 0xae
 800ef14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef18:	699b      	ldr	r3, [r3, #24]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00f      	beq.n	800ef3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ef1e:	7dba      	ldrb	r2, [r7, #22]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ef26:	7dba      	ldrb	r2, [r7, #22]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	32ae      	adds	r2, #174	@ 0xae
 800ef2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef30:	699b      	ldr	r3, [r3, #24]
 800ef32:	7afa      	ldrb	r2, [r7, #11]
 800ef34:	4611      	mov	r1, r2
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	4798      	blx	r3
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ef3e:	7dfb      	ldrb	r3, [r7, #23]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ef44:	7dfb      	ldrb	r3, [r7, #23]
 800ef46:	e000      	b.n	800ef4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b086      	sub	sp, #24
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	60f8      	str	r0, [r7, #12]
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	607a      	str	r2, [r7, #4]
 800ef5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ef60:	7afb      	ldrb	r3, [r7, #11]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d16f      	bne.n	800f046 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	3314      	adds	r3, #20
 800ef6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ef72:	2b02      	cmp	r3, #2
 800ef74:	d15a      	bne.n	800f02c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	689a      	ldr	r2, [r3, #8]
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d914      	bls.n	800efac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	689a      	ldr	r2, [r3, #8]
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	1ad2      	subs	r2, r2, r3
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	461a      	mov	r2, r3
 800ef96:	6879      	ldr	r1, [r7, #4]
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f001 f8e6 	bl	801016a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef9e:	2300      	movs	r3, #0
 800efa0:	2200      	movs	r2, #0
 800efa2:	2100      	movs	r1, #0
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f001 fe17 	bl	8010bd8 <USBD_LL_PrepareReceive>
 800efaa:	e03f      	b.n	800f02c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	68da      	ldr	r2, [r3, #12]
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d11c      	bne.n	800eff2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	685a      	ldr	r2, [r3, #4]
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d316      	bcc.n	800eff2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	685a      	ldr	r2, [r3, #4]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800efce:	429a      	cmp	r2, r3
 800efd0:	d20f      	bcs.n	800eff2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800efd2:	2200      	movs	r2, #0
 800efd4:	2100      	movs	r1, #0
 800efd6:	68f8      	ldr	r0, [r7, #12]
 800efd8:	f001 f8c7 	bl	801016a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800efe4:	2300      	movs	r3, #0
 800efe6:	2200      	movs	r2, #0
 800efe8:	2100      	movs	r1, #0
 800efea:	68f8      	ldr	r0, [r7, #12]
 800efec:	f001 fdf4 	bl	8010bd8 <USBD_LL_PrepareReceive>
 800eff0:	e01c      	b.n	800f02c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b03      	cmp	r3, #3
 800effc:	d10f      	bne.n	800f01e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d009      	beq.n	800f01e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2200      	movs	r2, #0
 800f00e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	68f8      	ldr	r0, [r7, #12]
 800f01c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f01e:	2180      	movs	r1, #128	@ 0x80
 800f020:	68f8      	ldr	r0, [r7, #12]
 800f022:	f001 fd2f 	bl	8010a84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f001 f8f1 	bl	801020e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f032:	2b00      	cmp	r3, #0
 800f034:	d03a      	beq.n	800f0ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f036:	68f8      	ldr	r0, [r7, #12]
 800f038:	f7ff fe42 	bl	800ecc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f044:	e032      	b.n	800f0ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f046:	7afb      	ldrb	r3, [r7, #11]
 800f048:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	4619      	mov	r1, r3
 800f050:	68f8      	ldr	r0, [r7, #12]
 800f052:	f000 f985 	bl	800f360 <USBD_CoreFindEP>
 800f056:	4603      	mov	r3, r0
 800f058:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f05a:	7dfb      	ldrb	r3, [r7, #23]
 800f05c:	2bff      	cmp	r3, #255	@ 0xff
 800f05e:	d025      	beq.n	800f0ac <USBD_LL_DataInStage+0x15a>
 800f060:	7dfb      	ldrb	r3, [r7, #23]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d122      	bne.n	800f0ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	2b03      	cmp	r3, #3
 800f070:	d11c      	bne.n	800f0ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f072:	7dfa      	ldrb	r2, [r7, #23]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	32ae      	adds	r2, #174	@ 0xae
 800f078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f07c:	695b      	ldr	r3, [r3, #20]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d014      	beq.n	800f0ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f082:	7dfa      	ldrb	r2, [r7, #23]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f08a:	7dfa      	ldrb	r2, [r7, #23]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	32ae      	adds	r2, #174	@ 0xae
 800f090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f094:	695b      	ldr	r3, [r3, #20]
 800f096:	7afa      	ldrb	r2, [r7, #11]
 800f098:	4611      	mov	r1, r2
 800f09a:	68f8      	ldr	r0, [r7, #12]
 800f09c:	4798      	blx	r3
 800f09e:	4603      	mov	r3, r0
 800f0a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f0a2:	7dbb      	ldrb	r3, [r7, #22]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d001      	beq.n	800f0ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f0a8:	7dbb      	ldrb	r3, [r7, #22]
 800f0aa:	e000      	b.n	800f0ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f0ac:	2300      	movs	r3, #0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3718      	adds	r7, #24
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b084      	sub	sp, #16
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d014      	beq.n	800f11c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00e      	beq.n	800f11c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	6852      	ldr	r2, [r2, #4]
 800f10a:	b2d2      	uxtb	r2, r2
 800f10c:	4611      	mov	r1, r2
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	4798      	blx	r3
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d001      	beq.n	800f11c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f118:	2303      	movs	r3, #3
 800f11a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f11c:	2340      	movs	r3, #64	@ 0x40
 800f11e:	2200      	movs	r2, #0
 800f120:	2100      	movs	r1, #0
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f001 fc69 	bl	80109fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2201      	movs	r2, #1
 800f12c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2240      	movs	r2, #64	@ 0x40
 800f134:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f138:	2340      	movs	r3, #64	@ 0x40
 800f13a:	2200      	movs	r2, #0
 800f13c:	2180      	movs	r1, #128	@ 0x80
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f001 fc5b 	bl	80109fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2201      	movs	r2, #1
 800f148:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2240      	movs	r2, #64	@ 0x40
 800f14e:	621a      	str	r2, [r3, #32]

  return ret;
 800f150:	7bfb      	ldrb	r3, [r7, #15]
}
 800f152:	4618      	mov	r0, r3
 800f154:	3710      	adds	r7, #16
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}

0800f15a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f15a:	b480      	push	{r7}
 800f15c:	b083      	sub	sp, #12
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
 800f162:	460b      	mov	r3, r1
 800f164:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	78fa      	ldrb	r2, [r7, #3]
 800f16a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f16c:	2300      	movs	r3, #0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	370c      	adds	r7, #12
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr

0800f17a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f17a:	b480      	push	{r7}
 800f17c:	b083      	sub	sp, #12
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b04      	cmp	r3, #4
 800f18c:	d006      	beq.n	800f19c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f194:	b2da      	uxtb	r2, r3
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2204      	movs	r2, #4
 800f1a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	370c      	adds	r7, #12
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f1b2:	b480      	push	{r7}
 800f1b4:	b083      	sub	sp, #12
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1c0:	b2db      	uxtb	r3, r3
 800f1c2:	2b04      	cmp	r3, #4
 800f1c4:	d106      	bne.n	800f1d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f1cc:	b2da      	uxtb	r2, r3
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	370c      	adds	r7, #12
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr

0800f1e2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b082      	sub	sp, #8
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	2b03      	cmp	r3, #3
 800f1f4:	d110      	bne.n	800f218 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00b      	beq.n	800f218 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f206:	69db      	ldr	r3, [r3, #28]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d005      	beq.n	800f218 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f212:	69db      	ldr	r3, [r3, #28]
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b082      	sub	sp, #8
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
 800f22a:	460b      	mov	r3, r1
 800f22c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	32ae      	adds	r2, #174	@ 0xae
 800f238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d101      	bne.n	800f244 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f240:	2303      	movs	r3, #3
 800f242:	e01c      	b.n	800f27e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	2b03      	cmp	r3, #3
 800f24e:	d115      	bne.n	800f27c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	32ae      	adds	r2, #174	@ 0xae
 800f25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f25e:	6a1b      	ldr	r3, [r3, #32]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00b      	beq.n	800f27c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	32ae      	adds	r2, #174	@ 0xae
 800f26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f272:	6a1b      	ldr	r3, [r3, #32]
 800f274:	78fa      	ldrb	r2, [r7, #3]
 800f276:	4611      	mov	r1, r2
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3708      	adds	r7, #8
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}

0800f286 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f286:	b580      	push	{r7, lr}
 800f288:	b082      	sub	sp, #8
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
 800f28e:	460b      	mov	r3, r1
 800f290:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	32ae      	adds	r2, #174	@ 0xae
 800f29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f2a4:	2303      	movs	r3, #3
 800f2a6:	e01c      	b.n	800f2e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	d115      	bne.n	800f2e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	32ae      	adds	r2, #174	@ 0xae
 800f2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d00b      	beq.n	800f2e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	32ae      	adds	r2, #174	@ 0xae
 800f2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2d8:	78fa      	ldrb	r2, [r7, #3]
 800f2da:	4611      	mov	r1, r2
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f2e0:	2300      	movs	r3, #0
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f2ea:	b480      	push	{r7}
 800f2ec:	b083      	sub	sp, #12
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f2f2:	2300      	movs	r3, #0
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f308:	2300      	movs	r3, #0
 800f30a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2201      	movs	r2, #1
 800f310:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d00e      	beq.n	800f33c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	6852      	ldr	r2, [r2, #4]
 800f32a:	b2d2      	uxtb	r2, r2
 800f32c:	4611      	mov	r1, r2
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	4798      	blx	r3
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f338:	2303      	movs	r3, #3
 800f33a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f346:	b480      	push	{r7}
 800f348:	b083      	sub	sp, #12
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
 800f34e:	460b      	mov	r3, r1
 800f350:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f352:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f354:	4618      	mov	r0, r3
 800f356:	370c      	adds	r7, #12
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr

0800f360 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f360:	b480      	push	{r7}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	460b      	mov	r3, r1
 800f36a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f36c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f36e:	4618      	mov	r0, r3
 800f370:	370c      	adds	r7, #12
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr

0800f37a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f37a:	b580      	push	{r7, lr}
 800f37c:	b086      	sub	sp, #24
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
 800f382:	460b      	mov	r3, r1
 800f384:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f38e:	2300      	movs	r3, #0
 800f390:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	885b      	ldrh	r3, [r3, #2]
 800f396:	b29b      	uxth	r3, r3
 800f398:	68fa      	ldr	r2, [r7, #12]
 800f39a:	7812      	ldrb	r2, [r2, #0]
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d91f      	bls.n	800f3e0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f3a6:	e013      	b.n	800f3d0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f3a8:	f107 030a 	add.w	r3, r7, #10
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	6978      	ldr	r0, [r7, #20]
 800f3b0:	f000 f81b 	bl	800f3ea <USBD_GetNextDesc>
 800f3b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	785b      	ldrb	r3, [r3, #1]
 800f3ba:	2b05      	cmp	r3, #5
 800f3bc:	d108      	bne.n	800f3d0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	789b      	ldrb	r3, [r3, #2]
 800f3c6:	78fa      	ldrb	r2, [r7, #3]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d008      	beq.n	800f3de <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	885b      	ldrh	r3, [r3, #2]
 800f3d4:	b29a      	uxth	r2, r3
 800f3d6:	897b      	ldrh	r3, [r7, #10]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d8e5      	bhi.n	800f3a8 <USBD_GetEpDesc+0x2e>
 800f3dc:	e000      	b.n	800f3e0 <USBD_GetEpDesc+0x66>
          break;
 800f3de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f3e0:	693b      	ldr	r3, [r7, #16]
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3718      	adds	r7, #24
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}

0800f3ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f3ea:	b480      	push	{r7}
 800f3ec:	b085      	sub	sp, #20
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	881b      	ldrh	r3, [r3, #0]
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	7812      	ldrb	r2, [r2, #0]
 800f400:	4413      	add	r3, r2
 800f402:	b29a      	uxth	r2, r3
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	461a      	mov	r2, r3
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4413      	add	r3, r2
 800f412:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f414:	68fb      	ldr	r3, [r7, #12]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3714      	adds	r7, #20
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f422:	b480      	push	{r7}
 800f424:	b087      	sub	sp, #28
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	3301      	adds	r3, #1
 800f438:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f440:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f444:	021b      	lsls	r3, r3, #8
 800f446:	b21a      	sxth	r2, r3
 800f448:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f44c:	4313      	orrs	r3, r2
 800f44e:	b21b      	sxth	r3, r3
 800f450:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f452:	89fb      	ldrh	r3, [r7, #14]
}
 800f454:	4618      	mov	r0, r3
 800f456:	371c      	adds	r7, #28
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr

0800f460 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f46a:	2300      	movs	r3, #0
 800f46c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f476:	2b40      	cmp	r3, #64	@ 0x40
 800f478:	d005      	beq.n	800f486 <USBD_StdDevReq+0x26>
 800f47a:	2b40      	cmp	r3, #64	@ 0x40
 800f47c:	d857      	bhi.n	800f52e <USBD_StdDevReq+0xce>
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00f      	beq.n	800f4a2 <USBD_StdDevReq+0x42>
 800f482:	2b20      	cmp	r3, #32
 800f484:	d153      	bne.n	800f52e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	32ae      	adds	r2, #174	@ 0xae
 800f490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	6839      	ldr	r1, [r7, #0]
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	4798      	blx	r3
 800f49c:	4603      	mov	r3, r0
 800f49e:	73fb      	strb	r3, [r7, #15]
      break;
 800f4a0:	e04a      	b.n	800f538 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	785b      	ldrb	r3, [r3, #1]
 800f4a6:	2b09      	cmp	r3, #9
 800f4a8:	d83b      	bhi.n	800f522 <USBD_StdDevReq+0xc2>
 800f4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800f4b0 <USBD_StdDevReq+0x50>)
 800f4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b0:	0800f505 	.word	0x0800f505
 800f4b4:	0800f519 	.word	0x0800f519
 800f4b8:	0800f523 	.word	0x0800f523
 800f4bc:	0800f50f 	.word	0x0800f50f
 800f4c0:	0800f523 	.word	0x0800f523
 800f4c4:	0800f4e3 	.word	0x0800f4e3
 800f4c8:	0800f4d9 	.word	0x0800f4d9
 800f4cc:	0800f523 	.word	0x0800f523
 800f4d0:	0800f4fb 	.word	0x0800f4fb
 800f4d4:	0800f4ed 	.word	0x0800f4ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 fa3c 	bl	800f958 <USBD_GetDescriptor>
          break;
 800f4e0:	e024      	b.n	800f52c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 fbcb 	bl	800fc80 <USBD_SetAddress>
          break;
 800f4ea:	e01f      	b.n	800f52c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f4ec:	6839      	ldr	r1, [r7, #0]
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f000 fc0a 	bl	800fd08 <USBD_SetConfig>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	73fb      	strb	r3, [r7, #15]
          break;
 800f4f8:	e018      	b.n	800f52c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f4fa:	6839      	ldr	r1, [r7, #0]
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 fcad 	bl	800fe5c <USBD_GetConfig>
          break;
 800f502:	e013      	b.n	800f52c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f504:	6839      	ldr	r1, [r7, #0]
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fcde 	bl	800fec8 <USBD_GetStatus>
          break;
 800f50c:	e00e      	b.n	800f52c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f50e:	6839      	ldr	r1, [r7, #0]
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f000 fd0d 	bl	800ff30 <USBD_SetFeature>
          break;
 800f516:	e009      	b.n	800f52c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 fd31 	bl	800ff82 <USBD_ClrFeature>
          break;
 800f520:	e004      	b.n	800f52c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f522:	6839      	ldr	r1, [r7, #0]
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 fd88 	bl	801003a <USBD_CtlError>
          break;
 800f52a:	bf00      	nop
      }
      break;
 800f52c:	e004      	b.n	800f538 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f52e:	6839      	ldr	r1, [r7, #0]
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 fd82 	bl	801003a <USBD_CtlError>
      break;
 800f536:	bf00      	nop
  }

  return ret;
 800f538:	7bfb      	ldrb	r3, [r7, #15]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop

0800f544 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f54e:	2300      	movs	r3, #0
 800f550:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f55a:	2b40      	cmp	r3, #64	@ 0x40
 800f55c:	d005      	beq.n	800f56a <USBD_StdItfReq+0x26>
 800f55e:	2b40      	cmp	r3, #64	@ 0x40
 800f560:	d852      	bhi.n	800f608 <USBD_StdItfReq+0xc4>
 800f562:	2b00      	cmp	r3, #0
 800f564:	d001      	beq.n	800f56a <USBD_StdItfReq+0x26>
 800f566:	2b20      	cmp	r3, #32
 800f568:	d14e      	bne.n	800f608 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f570:	b2db      	uxtb	r3, r3
 800f572:	3b01      	subs	r3, #1
 800f574:	2b02      	cmp	r3, #2
 800f576:	d840      	bhi.n	800f5fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	889b      	ldrh	r3, [r3, #4]
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d836      	bhi.n	800f5f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	889b      	ldrh	r3, [r3, #4]
 800f586:	b2db      	uxtb	r3, r3
 800f588:	4619      	mov	r1, r3
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f7ff fedb 	bl	800f346 <USBD_CoreFindIF>
 800f590:	4603      	mov	r3, r0
 800f592:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f594:	7bbb      	ldrb	r3, [r7, #14]
 800f596:	2bff      	cmp	r3, #255	@ 0xff
 800f598:	d01d      	beq.n	800f5d6 <USBD_StdItfReq+0x92>
 800f59a:	7bbb      	ldrb	r3, [r7, #14]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d11a      	bne.n	800f5d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f5a0:	7bba      	ldrb	r2, [r7, #14]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	32ae      	adds	r2, #174	@ 0xae
 800f5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00f      	beq.n	800f5d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f5b0:	7bba      	ldrb	r2, [r7, #14]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f5b8:	7bba      	ldrb	r2, [r7, #14]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	32ae      	adds	r2, #174	@ 0xae
 800f5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	6839      	ldr	r1, [r7, #0]
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	4798      	blx	r3
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f5ce:	e004      	b.n	800f5da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f5d0:	2303      	movs	r3, #3
 800f5d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f5d4:	e001      	b.n	800f5da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	88db      	ldrh	r3, [r3, #6]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d110      	bne.n	800f604 <USBD_StdItfReq+0xc0>
 800f5e2:	7bfb      	ldrb	r3, [r7, #15]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d10d      	bne.n	800f604 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 fdfd 	bl	80101e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f5ee:	e009      	b.n	800f604 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f5f0:	6839      	ldr	r1, [r7, #0]
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 fd21 	bl	801003a <USBD_CtlError>
          break;
 800f5f8:	e004      	b.n	800f604 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f5fa:	6839      	ldr	r1, [r7, #0]
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f000 fd1c 	bl	801003a <USBD_CtlError>
          break;
 800f602:	e000      	b.n	800f606 <USBD_StdItfReq+0xc2>
          break;
 800f604:	bf00      	nop
      }
      break;
 800f606:	e004      	b.n	800f612 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f608:	6839      	ldr	r1, [r7, #0]
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f000 fd15 	bl	801003a <USBD_CtlError>
      break;
 800f610:	bf00      	nop
  }

  return ret;
 800f612:	7bfb      	ldrb	r3, [r7, #15]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f626:	2300      	movs	r3, #0
 800f628:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	889b      	ldrh	r3, [r3, #4]
 800f62e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f638:	2b40      	cmp	r3, #64	@ 0x40
 800f63a:	d007      	beq.n	800f64c <USBD_StdEPReq+0x30>
 800f63c:	2b40      	cmp	r3, #64	@ 0x40
 800f63e:	f200 817f 	bhi.w	800f940 <USBD_StdEPReq+0x324>
 800f642:	2b00      	cmp	r3, #0
 800f644:	d02a      	beq.n	800f69c <USBD_StdEPReq+0x80>
 800f646:	2b20      	cmp	r3, #32
 800f648:	f040 817a 	bne.w	800f940 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f64c:	7bbb      	ldrb	r3, [r7, #14]
 800f64e:	4619      	mov	r1, r3
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f7ff fe85 	bl	800f360 <USBD_CoreFindEP>
 800f656:	4603      	mov	r3, r0
 800f658:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f65a:	7b7b      	ldrb	r3, [r7, #13]
 800f65c:	2bff      	cmp	r3, #255	@ 0xff
 800f65e:	f000 8174 	beq.w	800f94a <USBD_StdEPReq+0x32e>
 800f662:	7b7b      	ldrb	r3, [r7, #13]
 800f664:	2b00      	cmp	r3, #0
 800f666:	f040 8170 	bne.w	800f94a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f66a:	7b7a      	ldrb	r2, [r7, #13]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f672:	7b7a      	ldrb	r2, [r7, #13]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	32ae      	adds	r2, #174	@ 0xae
 800f678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f000 8163 	beq.w	800f94a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f684:	7b7a      	ldrb	r2, [r7, #13]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	32ae      	adds	r2, #174	@ 0xae
 800f68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f68e:	689b      	ldr	r3, [r3, #8]
 800f690:	6839      	ldr	r1, [r7, #0]
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	4798      	blx	r3
 800f696:	4603      	mov	r3, r0
 800f698:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f69a:	e156      	b.n	800f94a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	785b      	ldrb	r3, [r3, #1]
 800f6a0:	2b03      	cmp	r3, #3
 800f6a2:	d008      	beq.n	800f6b6 <USBD_StdEPReq+0x9a>
 800f6a4:	2b03      	cmp	r3, #3
 800f6a6:	f300 8145 	bgt.w	800f934 <USBD_StdEPReq+0x318>
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	f000 809b 	beq.w	800f7e6 <USBD_StdEPReq+0x1ca>
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d03c      	beq.n	800f72e <USBD_StdEPReq+0x112>
 800f6b4:	e13e      	b.n	800f934 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	2b02      	cmp	r3, #2
 800f6c0:	d002      	beq.n	800f6c8 <USBD_StdEPReq+0xac>
 800f6c2:	2b03      	cmp	r3, #3
 800f6c4:	d016      	beq.n	800f6f4 <USBD_StdEPReq+0xd8>
 800f6c6:	e02c      	b.n	800f722 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6c8:	7bbb      	ldrb	r3, [r7, #14]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00d      	beq.n	800f6ea <USBD_StdEPReq+0xce>
 800f6ce:	7bbb      	ldrb	r3, [r7, #14]
 800f6d0:	2b80      	cmp	r3, #128	@ 0x80
 800f6d2:	d00a      	beq.n	800f6ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f6d4:	7bbb      	ldrb	r3, [r7, #14]
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f001 f9d3 	bl	8010a84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6de:	2180      	movs	r1, #128	@ 0x80
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f001 f9cf 	bl	8010a84 <USBD_LL_StallEP>
 800f6e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f6e8:	e020      	b.n	800f72c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f6ea:	6839      	ldr	r1, [r7, #0]
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 fca4 	bl	801003a <USBD_CtlError>
              break;
 800f6f2:	e01b      	b.n	800f72c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	885b      	ldrh	r3, [r3, #2]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d10e      	bne.n	800f71a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f6fc:	7bbb      	ldrb	r3, [r7, #14]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00b      	beq.n	800f71a <USBD_StdEPReq+0xfe>
 800f702:	7bbb      	ldrb	r3, [r7, #14]
 800f704:	2b80      	cmp	r3, #128	@ 0x80
 800f706:	d008      	beq.n	800f71a <USBD_StdEPReq+0xfe>
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	88db      	ldrh	r3, [r3, #6]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d104      	bne.n	800f71a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f710:	7bbb      	ldrb	r3, [r7, #14]
 800f712:	4619      	mov	r1, r3
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f001 f9b5 	bl	8010a84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 fd64 	bl	80101e8 <USBD_CtlSendStatus>

              break;
 800f720:	e004      	b.n	800f72c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f722:	6839      	ldr	r1, [r7, #0]
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 fc88 	bl	801003a <USBD_CtlError>
              break;
 800f72a:	bf00      	nop
          }
          break;
 800f72c:	e107      	b.n	800f93e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f734:	b2db      	uxtb	r3, r3
 800f736:	2b02      	cmp	r3, #2
 800f738:	d002      	beq.n	800f740 <USBD_StdEPReq+0x124>
 800f73a:	2b03      	cmp	r3, #3
 800f73c:	d016      	beq.n	800f76c <USBD_StdEPReq+0x150>
 800f73e:	e04b      	b.n	800f7d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f740:	7bbb      	ldrb	r3, [r7, #14]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00d      	beq.n	800f762 <USBD_StdEPReq+0x146>
 800f746:	7bbb      	ldrb	r3, [r7, #14]
 800f748:	2b80      	cmp	r3, #128	@ 0x80
 800f74a:	d00a      	beq.n	800f762 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f74c:	7bbb      	ldrb	r3, [r7, #14]
 800f74e:	4619      	mov	r1, r3
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f001 f997 	bl	8010a84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f756:	2180      	movs	r1, #128	@ 0x80
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f001 f993 	bl	8010a84 <USBD_LL_StallEP>
 800f75e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f760:	e040      	b.n	800f7e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f762:	6839      	ldr	r1, [r7, #0]
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 fc68 	bl	801003a <USBD_CtlError>
              break;
 800f76a:	e03b      	b.n	800f7e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	885b      	ldrh	r3, [r3, #2]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d136      	bne.n	800f7e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f774:	7bbb      	ldrb	r3, [r7, #14]
 800f776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d004      	beq.n	800f788 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f77e:	7bbb      	ldrb	r3, [r7, #14]
 800f780:	4619      	mov	r1, r3
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f001 f99d 	bl	8010ac2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 fd2d 	bl	80101e8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f78e:	7bbb      	ldrb	r3, [r7, #14]
 800f790:	4619      	mov	r1, r3
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f7ff fde4 	bl	800f360 <USBD_CoreFindEP>
 800f798:	4603      	mov	r3, r0
 800f79a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f79c:	7b7b      	ldrb	r3, [r7, #13]
 800f79e:	2bff      	cmp	r3, #255	@ 0xff
 800f7a0:	d01f      	beq.n	800f7e2 <USBD_StdEPReq+0x1c6>
 800f7a2:	7b7b      	ldrb	r3, [r7, #13]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d11c      	bne.n	800f7e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f7a8:	7b7a      	ldrb	r2, [r7, #13]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f7b0:	7b7a      	ldrb	r2, [r7, #13]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	32ae      	adds	r2, #174	@ 0xae
 800f7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7ba:	689b      	ldr	r3, [r3, #8]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d010      	beq.n	800f7e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f7c0:	7b7a      	ldrb	r2, [r7, #13]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	32ae      	adds	r2, #174	@ 0xae
 800f7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7ca:	689b      	ldr	r3, [r3, #8]
 800f7cc:	6839      	ldr	r1, [r7, #0]
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	4798      	blx	r3
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f7d6:	e004      	b.n	800f7e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f7d8:	6839      	ldr	r1, [r7, #0]
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f000 fc2d 	bl	801003a <USBD_CtlError>
              break;
 800f7e0:	e000      	b.n	800f7e4 <USBD_StdEPReq+0x1c8>
              break;
 800f7e2:	bf00      	nop
          }
          break;
 800f7e4:	e0ab      	b.n	800f93e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b02      	cmp	r3, #2
 800f7f0:	d002      	beq.n	800f7f8 <USBD_StdEPReq+0x1dc>
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	d032      	beq.n	800f85c <USBD_StdEPReq+0x240>
 800f7f6:	e097      	b.n	800f928 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7f8:	7bbb      	ldrb	r3, [r7, #14]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d007      	beq.n	800f80e <USBD_StdEPReq+0x1f2>
 800f7fe:	7bbb      	ldrb	r3, [r7, #14]
 800f800:	2b80      	cmp	r3, #128	@ 0x80
 800f802:	d004      	beq.n	800f80e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f804:	6839      	ldr	r1, [r7, #0]
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 fc17 	bl	801003a <USBD_CtlError>
                break;
 800f80c:	e091      	b.n	800f932 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f80e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f812:	2b00      	cmp	r3, #0
 800f814:	da0b      	bge.n	800f82e <USBD_StdEPReq+0x212>
 800f816:	7bbb      	ldrb	r3, [r7, #14]
 800f818:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f81c:	4613      	mov	r3, r2
 800f81e:	009b      	lsls	r3, r3, #2
 800f820:	4413      	add	r3, r2
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	3310      	adds	r3, #16
 800f826:	687a      	ldr	r2, [r7, #4]
 800f828:	4413      	add	r3, r2
 800f82a:	3304      	adds	r3, #4
 800f82c:	e00b      	b.n	800f846 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f82e:	7bbb      	ldrb	r3, [r7, #14]
 800f830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f834:	4613      	mov	r3, r2
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	4413      	add	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	4413      	add	r3, r2
 800f844:	3304      	adds	r3, #4
 800f846:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	2200      	movs	r2, #0
 800f84c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	2202      	movs	r2, #2
 800f852:	4619      	mov	r1, r3
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fc6d 	bl	8010134 <USBD_CtlSendData>
              break;
 800f85a:	e06a      	b.n	800f932 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f85c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f860:	2b00      	cmp	r3, #0
 800f862:	da11      	bge.n	800f888 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f864:	7bbb      	ldrb	r3, [r7, #14]
 800f866:	f003 020f 	and.w	r2, r3, #15
 800f86a:	6879      	ldr	r1, [r7, #4]
 800f86c:	4613      	mov	r3, r2
 800f86e:	009b      	lsls	r3, r3, #2
 800f870:	4413      	add	r3, r2
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	440b      	add	r3, r1
 800f876:	3324      	adds	r3, #36	@ 0x24
 800f878:	881b      	ldrh	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d117      	bne.n	800f8ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f87e:	6839      	ldr	r1, [r7, #0]
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 fbda 	bl	801003a <USBD_CtlError>
                  break;
 800f886:	e054      	b.n	800f932 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f888:	7bbb      	ldrb	r3, [r7, #14]
 800f88a:	f003 020f 	and.w	r2, r3, #15
 800f88e:	6879      	ldr	r1, [r7, #4]
 800f890:	4613      	mov	r3, r2
 800f892:	009b      	lsls	r3, r3, #2
 800f894:	4413      	add	r3, r2
 800f896:	009b      	lsls	r3, r3, #2
 800f898:	440b      	add	r3, r1
 800f89a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f89e:	881b      	ldrh	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d104      	bne.n	800f8ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f8a4:	6839      	ldr	r1, [r7, #0]
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 fbc7 	bl	801003a <USBD_CtlError>
                  break;
 800f8ac:	e041      	b.n	800f932 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	da0b      	bge.n	800f8ce <USBD_StdEPReq+0x2b2>
 800f8b6:	7bbb      	ldrb	r3, [r7, #14]
 800f8b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f8bc:	4613      	mov	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4413      	add	r3, r2
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	3310      	adds	r3, #16
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	4413      	add	r3, r2
 800f8ca:	3304      	adds	r3, #4
 800f8cc:	e00b      	b.n	800f8e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f8ce:	7bbb      	ldrb	r3, [r7, #14]
 800f8d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	4413      	add	r3, r2
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	4413      	add	r3, r2
 800f8e4:	3304      	adds	r3, #4
 800f8e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f8e8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d002      	beq.n	800f8f4 <USBD_StdEPReq+0x2d8>
 800f8ee:	7bbb      	ldrb	r3, [r7, #14]
 800f8f0:	2b80      	cmp	r3, #128	@ 0x80
 800f8f2:	d103      	bne.n	800f8fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	601a      	str	r2, [r3, #0]
 800f8fa:	e00e      	b.n	800f91a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f8fc:	7bbb      	ldrb	r3, [r7, #14]
 800f8fe:	4619      	mov	r1, r3
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f001 f8fd 	bl	8010b00 <USBD_LL_IsStallEP>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d003      	beq.n	800f914 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	2201      	movs	r2, #1
 800f910:	601a      	str	r2, [r3, #0]
 800f912:	e002      	b.n	800f91a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	2200      	movs	r2, #0
 800f918:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	2202      	movs	r2, #2
 800f91e:	4619      	mov	r1, r3
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 fc07 	bl	8010134 <USBD_CtlSendData>
              break;
 800f926:	e004      	b.n	800f932 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f928:	6839      	ldr	r1, [r7, #0]
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 fb85 	bl	801003a <USBD_CtlError>
              break;
 800f930:	bf00      	nop
          }
          break;
 800f932:	e004      	b.n	800f93e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f934:	6839      	ldr	r1, [r7, #0]
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f000 fb7f 	bl	801003a <USBD_CtlError>
          break;
 800f93c:	bf00      	nop
      }
      break;
 800f93e:	e005      	b.n	800f94c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f940:	6839      	ldr	r1, [r7, #0]
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 fb79 	bl	801003a <USBD_CtlError>
      break;
 800f948:	e000      	b.n	800f94c <USBD_StdEPReq+0x330>
      break;
 800f94a:	bf00      	nop
  }

  return ret;
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
	...

0800f958 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f962:	2300      	movs	r3, #0
 800f964:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f966:	2300      	movs	r3, #0
 800f968:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f96a:	2300      	movs	r3, #0
 800f96c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	885b      	ldrh	r3, [r3, #2]
 800f972:	0a1b      	lsrs	r3, r3, #8
 800f974:	b29b      	uxth	r3, r3
 800f976:	3b01      	subs	r3, #1
 800f978:	2b0e      	cmp	r3, #14
 800f97a:	f200 8152 	bhi.w	800fc22 <USBD_GetDescriptor+0x2ca>
 800f97e:	a201      	add	r2, pc, #4	@ (adr r2, 800f984 <USBD_GetDescriptor+0x2c>)
 800f980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f984:	0800f9f5 	.word	0x0800f9f5
 800f988:	0800fa0d 	.word	0x0800fa0d
 800f98c:	0800fa4d 	.word	0x0800fa4d
 800f990:	0800fc23 	.word	0x0800fc23
 800f994:	0800fc23 	.word	0x0800fc23
 800f998:	0800fbc3 	.word	0x0800fbc3
 800f99c:	0800fbef 	.word	0x0800fbef
 800f9a0:	0800fc23 	.word	0x0800fc23
 800f9a4:	0800fc23 	.word	0x0800fc23
 800f9a8:	0800fc23 	.word	0x0800fc23
 800f9ac:	0800fc23 	.word	0x0800fc23
 800f9b0:	0800fc23 	.word	0x0800fc23
 800f9b4:	0800fc23 	.word	0x0800fc23
 800f9b8:	0800fc23 	.word	0x0800fc23
 800f9bc:	0800f9c1 	.word	0x0800f9c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9c6:	69db      	ldr	r3, [r3, #28]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00b      	beq.n	800f9e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9d2:	69db      	ldr	r3, [r3, #28]
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	7c12      	ldrb	r2, [r2, #16]
 800f9d8:	f107 0108 	add.w	r1, r7, #8
 800f9dc:	4610      	mov	r0, r2
 800f9de:	4798      	blx	r3
 800f9e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f9e2:	e126      	b.n	800fc32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f9e4:	6839      	ldr	r1, [r7, #0]
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 fb27 	bl	801003a <USBD_CtlError>
        err++;
 800f9ec:	7afb      	ldrb	r3, [r7, #11]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	72fb      	strb	r3, [r7, #11]
      break;
 800f9f2:	e11e      	b.n	800fc32 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	7c12      	ldrb	r2, [r2, #16]
 800fa00:	f107 0108 	add.w	r1, r7, #8
 800fa04:	4610      	mov	r0, r2
 800fa06:	4798      	blx	r3
 800fa08:	60f8      	str	r0, [r7, #12]
      break;
 800fa0a:	e112      	b.n	800fc32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	7c1b      	ldrb	r3, [r3, #16]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d10d      	bne.n	800fa30 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa1c:	f107 0208 	add.w	r2, r7, #8
 800fa20:	4610      	mov	r0, r2
 800fa22:	4798      	blx	r3
 800fa24:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	2202      	movs	r2, #2
 800fa2c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fa2e:	e100      	b.n	800fc32 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa38:	f107 0208 	add.w	r2, r7, #8
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	4798      	blx	r3
 800fa40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	3301      	adds	r3, #1
 800fa46:	2202      	movs	r2, #2
 800fa48:	701a      	strb	r2, [r3, #0]
      break;
 800fa4a:	e0f2      	b.n	800fc32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	885b      	ldrh	r3, [r3, #2]
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b05      	cmp	r3, #5
 800fa54:	f200 80ac 	bhi.w	800fbb0 <USBD_GetDescriptor+0x258>
 800fa58:	a201      	add	r2, pc, #4	@ (adr r2, 800fa60 <USBD_GetDescriptor+0x108>)
 800fa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa5e:	bf00      	nop
 800fa60:	0800fa79 	.word	0x0800fa79
 800fa64:	0800faad 	.word	0x0800faad
 800fa68:	0800fae1 	.word	0x0800fae1
 800fa6c:	0800fb15 	.word	0x0800fb15
 800fa70:	0800fb49 	.word	0x0800fb49
 800fa74:	0800fb7d 	.word	0x0800fb7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00b      	beq.n	800fa9c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	7c12      	ldrb	r2, [r2, #16]
 800fa90:	f107 0108 	add.w	r1, r7, #8
 800fa94:	4610      	mov	r0, r2
 800fa96:	4798      	blx	r3
 800fa98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa9a:	e091      	b.n	800fbc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fa9c:	6839      	ldr	r1, [r7, #0]
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 facb 	bl	801003a <USBD_CtlError>
            err++;
 800faa4:	7afb      	ldrb	r3, [r7, #11]
 800faa6:	3301      	adds	r3, #1
 800faa8:	72fb      	strb	r3, [r7, #11]
          break;
 800faaa:	e089      	b.n	800fbc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fab2:	689b      	ldr	r3, [r3, #8]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00b      	beq.n	800fad0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	7c12      	ldrb	r2, [r2, #16]
 800fac4:	f107 0108 	add.w	r1, r7, #8
 800fac8:	4610      	mov	r0, r2
 800faca:	4798      	blx	r3
 800facc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800face:	e077      	b.n	800fbc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fad0:	6839      	ldr	r1, [r7, #0]
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 fab1 	bl	801003a <USBD_CtlError>
            err++;
 800fad8:	7afb      	ldrb	r3, [r7, #11]
 800fada:	3301      	adds	r3, #1
 800fadc:	72fb      	strb	r3, [r7, #11]
          break;
 800fade:	e06f      	b.n	800fbc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00b      	beq.n	800fb04 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	7c12      	ldrb	r2, [r2, #16]
 800faf8:	f107 0108 	add.w	r1, r7, #8
 800fafc:	4610      	mov	r0, r2
 800fafe:	4798      	blx	r3
 800fb00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb02:	e05d      	b.n	800fbc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb04:	6839      	ldr	r1, [r7, #0]
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 fa97 	bl	801003a <USBD_CtlError>
            err++;
 800fb0c:	7afb      	ldrb	r3, [r7, #11]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	72fb      	strb	r3, [r7, #11]
          break;
 800fb12:	e055      	b.n	800fbc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb1a:	691b      	ldr	r3, [r3, #16]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00b      	beq.n	800fb38 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	7c12      	ldrb	r2, [r2, #16]
 800fb2c:	f107 0108 	add.w	r1, r7, #8
 800fb30:	4610      	mov	r0, r2
 800fb32:	4798      	blx	r3
 800fb34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb36:	e043      	b.n	800fbc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb38:	6839      	ldr	r1, [r7, #0]
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 fa7d 	bl	801003a <USBD_CtlError>
            err++;
 800fb40:	7afb      	ldrb	r3, [r7, #11]
 800fb42:	3301      	adds	r3, #1
 800fb44:	72fb      	strb	r3, [r7, #11]
          break;
 800fb46:	e03b      	b.n	800fbc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb4e:	695b      	ldr	r3, [r3, #20]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00b      	beq.n	800fb6c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb5a:	695b      	ldr	r3, [r3, #20]
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	7c12      	ldrb	r2, [r2, #16]
 800fb60:	f107 0108 	add.w	r1, r7, #8
 800fb64:	4610      	mov	r0, r2
 800fb66:	4798      	blx	r3
 800fb68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb6a:	e029      	b.n	800fbc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb6c:	6839      	ldr	r1, [r7, #0]
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fa63 	bl	801003a <USBD_CtlError>
            err++;
 800fb74:	7afb      	ldrb	r3, [r7, #11]
 800fb76:	3301      	adds	r3, #1
 800fb78:	72fb      	strb	r3, [r7, #11]
          break;
 800fb7a:	e021      	b.n	800fbc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb82:	699b      	ldr	r3, [r3, #24]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00b      	beq.n	800fba0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb8e:	699b      	ldr	r3, [r3, #24]
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	7c12      	ldrb	r2, [r2, #16]
 800fb94:	f107 0108 	add.w	r1, r7, #8
 800fb98:	4610      	mov	r0, r2
 800fb9a:	4798      	blx	r3
 800fb9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb9e:	e00f      	b.n	800fbc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 fa49 	bl	801003a <USBD_CtlError>
            err++;
 800fba8:	7afb      	ldrb	r3, [r7, #11]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	72fb      	strb	r3, [r7, #11]
          break;
 800fbae:	e007      	b.n	800fbc0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fbb0:	6839      	ldr	r1, [r7, #0]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 fa41 	bl	801003a <USBD_CtlError>
          err++;
 800fbb8:	7afb      	ldrb	r3, [r7, #11]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fbbe:	bf00      	nop
      }
      break;
 800fbc0:	e037      	b.n	800fc32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	7c1b      	ldrb	r3, [r3, #16]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d109      	bne.n	800fbde <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbd2:	f107 0208 	add.w	r2, r7, #8
 800fbd6:	4610      	mov	r0, r2
 800fbd8:	4798      	blx	r3
 800fbda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fbdc:	e029      	b.n	800fc32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fbde:	6839      	ldr	r1, [r7, #0]
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 fa2a 	bl	801003a <USBD_CtlError>
        err++;
 800fbe6:	7afb      	ldrb	r3, [r7, #11]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	72fb      	strb	r3, [r7, #11]
      break;
 800fbec:	e021      	b.n	800fc32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	7c1b      	ldrb	r3, [r3, #16]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d10d      	bne.n	800fc12 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbfe:	f107 0208 	add.w	r2, r7, #8
 800fc02:	4610      	mov	r0, r2
 800fc04:	4798      	blx	r3
 800fc06:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	2207      	movs	r2, #7
 800fc0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc10:	e00f      	b.n	800fc32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fc12:	6839      	ldr	r1, [r7, #0]
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 fa10 	bl	801003a <USBD_CtlError>
        err++;
 800fc1a:	7afb      	ldrb	r3, [r7, #11]
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	72fb      	strb	r3, [r7, #11]
      break;
 800fc20:	e007      	b.n	800fc32 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fc22:	6839      	ldr	r1, [r7, #0]
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f000 fa08 	bl	801003a <USBD_CtlError>
      err++;
 800fc2a:	7afb      	ldrb	r3, [r7, #11]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	72fb      	strb	r3, [r7, #11]
      break;
 800fc30:	bf00      	nop
  }

  if (err != 0U)
 800fc32:	7afb      	ldrb	r3, [r7, #11]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d11e      	bne.n	800fc76 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	88db      	ldrh	r3, [r3, #6]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d016      	beq.n	800fc6e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fc40:	893b      	ldrh	r3, [r7, #8]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d00e      	beq.n	800fc64 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	88da      	ldrh	r2, [r3, #6]
 800fc4a:	893b      	ldrh	r3, [r7, #8]
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	bf28      	it	cs
 800fc50:	4613      	movcs	r3, r2
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fc56:	893b      	ldrh	r3, [r7, #8]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	68f9      	ldr	r1, [r7, #12]
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 fa69 	bl	8010134 <USBD_CtlSendData>
 800fc62:	e009      	b.n	800fc78 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fc64:	6839      	ldr	r1, [r7, #0]
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 f9e7 	bl	801003a <USBD_CtlError>
 800fc6c:	e004      	b.n	800fc78 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 faba 	bl	80101e8 <USBD_CtlSendStatus>
 800fc74:	e000      	b.n	800fc78 <USBD_GetDescriptor+0x320>
    return;
 800fc76:	bf00      	nop
  }
}
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop

0800fc80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	889b      	ldrh	r3, [r3, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d131      	bne.n	800fcf6 <USBD_SetAddress+0x76>
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	88db      	ldrh	r3, [r3, #6]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d12d      	bne.n	800fcf6 <USBD_SetAddress+0x76>
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	885b      	ldrh	r3, [r3, #2]
 800fc9e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fca0:	d829      	bhi.n	800fcf6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	885b      	ldrh	r3, [r3, #2]
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	2b03      	cmp	r3, #3
 800fcb8:	d104      	bne.n	800fcc4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fcba:	6839      	ldr	r1, [r7, #0]
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 f9bc 	bl	801003a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcc2:	e01d      	b.n	800fd00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	7bfa      	ldrb	r2, [r7, #15]
 800fcc8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fccc:	7bfb      	ldrb	r3, [r7, #15]
 800fcce:	4619      	mov	r1, r3
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 ff41 	bl	8010b58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 fa86 	bl	80101e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fcdc:	7bfb      	ldrb	r3, [r7, #15]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d004      	beq.n	800fcec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2202      	movs	r2, #2
 800fce6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcea:	e009      	b.n	800fd00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcf4:	e004      	b.n	800fd00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fcf6:	6839      	ldr	r1, [r7, #0]
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 f99e 	bl	801003a <USBD_CtlError>
  }
}
 800fcfe:	bf00      	nop
 800fd00:	bf00      	nop
 800fd02:	3710      	adds	r7, #16
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b084      	sub	sp, #16
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd12:	2300      	movs	r3, #0
 800fd14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	885b      	ldrh	r3, [r3, #2]
 800fd1a:	b2da      	uxtb	r2, r3
 800fd1c:	4b4e      	ldr	r3, [pc, #312]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fd1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd20:	4b4d      	ldr	r3, [pc, #308]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	d905      	bls.n	800fd34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fd28:	6839      	ldr	r1, [r7, #0]
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 f985 	bl	801003a <USBD_CtlError>
    return USBD_FAIL;
 800fd30:	2303      	movs	r3, #3
 800fd32:	e08c      	b.n	800fe4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	2b02      	cmp	r3, #2
 800fd3e:	d002      	beq.n	800fd46 <USBD_SetConfig+0x3e>
 800fd40:	2b03      	cmp	r3, #3
 800fd42:	d029      	beq.n	800fd98 <USBD_SetConfig+0x90>
 800fd44:	e075      	b.n	800fe32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fd46:	4b44      	ldr	r3, [pc, #272]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d020      	beq.n	800fd90 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fd4e:	4b42      	ldr	r3, [pc, #264]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	461a      	mov	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd58:	4b3f      	ldr	r3, [pc, #252]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f7fe ffb9 	bl	800ecd6 <USBD_SetClassConfig>
 800fd64:	4603      	mov	r3, r0
 800fd66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fd68:	7bfb      	ldrb	r3, [r7, #15]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d008      	beq.n	800fd80 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 f962 	bl	801003a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2202      	movs	r2, #2
 800fd7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fd7e:	e065      	b.n	800fe4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 fa31 	bl	80101e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2203      	movs	r2, #3
 800fd8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fd8e:	e05d      	b.n	800fe4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f000 fa29 	bl	80101e8 <USBD_CtlSendStatus>
      break;
 800fd96:	e059      	b.n	800fe4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fd98:	4b2f      	ldr	r3, [pc, #188]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d112      	bne.n	800fdc6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2202      	movs	r2, #2
 800fda4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fda8:	4b2b      	ldr	r3, [pc, #172]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	461a      	mov	r2, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fdb2:	4b29      	ldr	r3, [pc, #164]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f7fe ffa8 	bl	800ed0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 fa12 	bl	80101e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fdc4:	e042      	b.n	800fe4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fdc6:	4b24      	ldr	r3, [pc, #144]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	461a      	mov	r2, r3
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d02a      	beq.n	800fe2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	4619      	mov	r1, r3
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7fe ff96 	bl	800ed0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fde2:	4b1d      	ldr	r3, [pc, #116]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	461a      	mov	r2, r3
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fdec:	4b1a      	ldr	r3, [pc, #104]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f7fe ff6f 	bl	800ecd6 <USBD_SetClassConfig>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fdfc:	7bfb      	ldrb	r3, [r7, #15]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00f      	beq.n	800fe22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fe02:	6839      	ldr	r1, [r7, #0]
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 f918 	bl	801003a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	4619      	mov	r1, r3
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f7fe ff7b 	bl	800ed0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2202      	movs	r2, #2
 800fe1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fe20:	e014      	b.n	800fe4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 f9e0 	bl	80101e8 <USBD_CtlSendStatus>
      break;
 800fe28:	e010      	b.n	800fe4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 f9dc 	bl	80101e8 <USBD_CtlSendStatus>
      break;
 800fe30:	e00c      	b.n	800fe4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fe32:	6839      	ldr	r1, [r7, #0]
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 f900 	bl	801003a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe3a:	4b07      	ldr	r3, [pc, #28]	@ (800fe58 <USBD_SetConfig+0x150>)
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	4619      	mov	r1, r3
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f7fe ff64 	bl	800ed0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fe46:	2303      	movs	r3, #3
 800fe48:	73fb      	strb	r3, [r7, #15]
      break;
 800fe4a:	bf00      	nop
  }

  return ret;
 800fe4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	24000520 	.word	0x24000520

0800fe5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	88db      	ldrh	r3, [r3, #6]
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	d004      	beq.n	800fe78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fe6e:	6839      	ldr	r1, [r7, #0]
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 f8e2 	bl	801003a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fe76:	e023      	b.n	800fec0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	2b02      	cmp	r3, #2
 800fe82:	dc02      	bgt.n	800fe8a <USBD_GetConfig+0x2e>
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	dc03      	bgt.n	800fe90 <USBD_GetConfig+0x34>
 800fe88:	e015      	b.n	800feb6 <USBD_GetConfig+0x5a>
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	d00b      	beq.n	800fea6 <USBD_GetConfig+0x4a>
 800fe8e:	e012      	b.n	800feb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	3308      	adds	r3, #8
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f000 f948 	bl	8010134 <USBD_CtlSendData>
        break;
 800fea4:	e00c      	b.n	800fec0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	3304      	adds	r3, #4
 800feaa:	2201      	movs	r2, #1
 800feac:	4619      	mov	r1, r3
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 f940 	bl	8010134 <USBD_CtlSendData>
        break;
 800feb4:	e004      	b.n	800fec0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800feb6:	6839      	ldr	r1, [r7, #0]
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 f8be 	bl	801003a <USBD_CtlError>
        break;
 800febe:	bf00      	nop
}
 800fec0:	bf00      	nop
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	3b01      	subs	r3, #1
 800fedc:	2b02      	cmp	r3, #2
 800fede:	d81e      	bhi.n	800ff1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	88db      	ldrh	r3, [r3, #6]
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d004      	beq.n	800fef2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fee8:	6839      	ldr	r1, [r7, #0]
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 f8a5 	bl	801003a <USBD_CtlError>
        break;
 800fef0:	e01a      	b.n	800ff28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2201      	movs	r2, #1
 800fef6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d005      	beq.n	800ff0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	f043 0202 	orr.w	r2, r3, #2
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	330c      	adds	r3, #12
 800ff12:	2202      	movs	r2, #2
 800ff14:	4619      	mov	r1, r3
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f000 f90c 	bl	8010134 <USBD_CtlSendData>
      break;
 800ff1c:	e004      	b.n	800ff28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ff1e:	6839      	ldr	r1, [r7, #0]
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 f88a 	bl	801003a <USBD_CtlError>
      break;
 800ff26:	bf00      	nop
  }
}
 800ff28:	bf00      	nop
 800ff2a:	3708      	adds	r7, #8
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	885b      	ldrh	r3, [r3, #2]
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d107      	bne.n	800ff52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2201      	movs	r2, #1
 800ff46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 f94c 	bl	80101e8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ff50:	e013      	b.n	800ff7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	885b      	ldrh	r3, [r3, #2]
 800ff56:	2b02      	cmp	r3, #2
 800ff58:	d10b      	bne.n	800ff72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	889b      	ldrh	r3, [r3, #4]
 800ff5e:	0a1b      	lsrs	r3, r3, #8
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	b2da      	uxtb	r2, r3
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f93c 	bl	80101e8 <USBD_CtlSendStatus>
}
 800ff70:	e003      	b.n	800ff7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ff72:	6839      	ldr	r1, [r7, #0]
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f000 f860 	bl	801003a <USBD_CtlError>
}
 800ff7a:	bf00      	nop
 800ff7c:	3708      	adds	r7, #8
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b082      	sub	sp, #8
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
 800ff8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	3b01      	subs	r3, #1
 800ff96:	2b02      	cmp	r3, #2
 800ff98:	d80b      	bhi.n	800ffb2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	885b      	ldrh	r3, [r3, #2]
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d10c      	bne.n	800ffbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 f91c 	bl	80101e8 <USBD_CtlSendStatus>
      }
      break;
 800ffb0:	e004      	b.n	800ffbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ffb2:	6839      	ldr	r1, [r7, #0]
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 f840 	bl	801003a <USBD_CtlError>
      break;
 800ffba:	e000      	b.n	800ffbe <USBD_ClrFeature+0x3c>
      break;
 800ffbc:	bf00      	nop
  }
}
 800ffbe:	bf00      	nop
 800ffc0:	3708      	adds	r7, #8
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b084      	sub	sp, #16
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	781a      	ldrb	r2, [r3, #0]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	781a      	ldrb	r2, [r3, #0]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	3301      	adds	r3, #1
 800ffee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f7ff fa16 	bl	800f422 <SWAPBYTE>
 800fff6:	4603      	mov	r3, r0
 800fff8:	461a      	mov	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	3301      	adds	r3, #1
 8010002:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	3301      	adds	r3, #1
 8010008:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801000a:	68f8      	ldr	r0, [r7, #12]
 801000c:	f7ff fa09 	bl	800f422 <SWAPBYTE>
 8010010:	4603      	mov	r3, r0
 8010012:	461a      	mov	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	3301      	adds	r3, #1
 801001c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	3301      	adds	r3, #1
 8010022:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010024:	68f8      	ldr	r0, [r7, #12]
 8010026:	f7ff f9fc 	bl	800f422 <SWAPBYTE>
 801002a:	4603      	mov	r3, r0
 801002c:	461a      	mov	r2, r3
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	80da      	strh	r2, [r3, #6]
}
 8010032:	bf00      	nop
 8010034:	3710      	adds	r7, #16
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b082      	sub	sp, #8
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
 8010042:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010044:	2180      	movs	r1, #128	@ 0x80
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 fd1c 	bl	8010a84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801004c:	2100      	movs	r1, #0
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 fd18 	bl	8010a84 <USBD_LL_StallEP>
}
 8010054:	bf00      	nop
 8010056:	3708      	adds	r7, #8
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b086      	sub	sp, #24
 8010060:	af00      	add	r7, sp, #0
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010068:	2300      	movs	r3, #0
 801006a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d042      	beq.n	80100f8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8010076:	6938      	ldr	r0, [r7, #16]
 8010078:	f000 f842 	bl	8010100 <USBD_GetLen>
 801007c:	4603      	mov	r3, r0
 801007e:	3301      	adds	r3, #1
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010086:	d808      	bhi.n	801009a <USBD_GetString+0x3e>
 8010088:	6938      	ldr	r0, [r7, #16]
 801008a:	f000 f839 	bl	8010100 <USBD_GetLen>
 801008e:	4603      	mov	r3, r0
 8010090:	3301      	adds	r3, #1
 8010092:	b29b      	uxth	r3, r3
 8010094:	005b      	lsls	r3, r3, #1
 8010096:	b29a      	uxth	r2, r3
 8010098:	e001      	b.n	801009e <USBD_GetString+0x42>
 801009a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80100a2:	7dfb      	ldrb	r3, [r7, #23]
 80100a4:	68ba      	ldr	r2, [r7, #8]
 80100a6:	4413      	add	r3, r2
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	7812      	ldrb	r2, [r2, #0]
 80100ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80100ae:	7dfb      	ldrb	r3, [r7, #23]
 80100b0:	3301      	adds	r3, #1
 80100b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80100b4:	7dfb      	ldrb	r3, [r7, #23]
 80100b6:	68ba      	ldr	r2, [r7, #8]
 80100b8:	4413      	add	r3, r2
 80100ba:	2203      	movs	r2, #3
 80100bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80100be:	7dfb      	ldrb	r3, [r7, #23]
 80100c0:	3301      	adds	r3, #1
 80100c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80100c4:	e013      	b.n	80100ee <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80100c6:	7dfb      	ldrb	r3, [r7, #23]
 80100c8:	68ba      	ldr	r2, [r7, #8]
 80100ca:	4413      	add	r3, r2
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	7812      	ldrb	r2, [r2, #0]
 80100d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	3301      	adds	r3, #1
 80100d6:	613b      	str	r3, [r7, #16]
    idx++;
 80100d8:	7dfb      	ldrb	r3, [r7, #23]
 80100da:	3301      	adds	r3, #1
 80100dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80100de:	7dfb      	ldrb	r3, [r7, #23]
 80100e0:	68ba      	ldr	r2, [r7, #8]
 80100e2:	4413      	add	r3, r2
 80100e4:	2200      	movs	r2, #0
 80100e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80100e8:	7dfb      	ldrb	r3, [r7, #23]
 80100ea:	3301      	adds	r3, #1
 80100ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d1e7      	bne.n	80100c6 <USBD_GetString+0x6a>
 80100f6:	e000      	b.n	80100fa <USBD_GetString+0x9e>
    return;
 80100f8:	bf00      	nop
  }
}
 80100fa:	3718      	adds	r7, #24
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010100:	b480      	push	{r7}
 8010102:	b085      	sub	sp, #20
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010108:	2300      	movs	r3, #0
 801010a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010110:	e005      	b.n	801011e <USBD_GetLen+0x1e>
  {
    len++;
 8010112:	7bfb      	ldrb	r3, [r7, #15]
 8010114:	3301      	adds	r3, #1
 8010116:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	3301      	adds	r3, #1
 801011c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d1f5      	bne.n	8010112 <USBD_GetLen+0x12>
  }

  return len;
 8010126:	7bfb      	ldrb	r3, [r7, #15]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3714      	adds	r7, #20
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2202      	movs	r2, #2
 8010144:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	687a      	ldr	r2, [r7, #4]
 801014c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	68ba      	ldr	r2, [r7, #8]
 8010158:	2100      	movs	r1, #0
 801015a:	68f8      	ldr	r0, [r7, #12]
 801015c:	f000 fd1b 	bl	8010b96 <USBD_LL_Transmit>

  return USBD_OK;
 8010160:	2300      	movs	r3, #0
}
 8010162:	4618      	mov	r0, r3
 8010164:	3710      	adds	r7, #16
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b084      	sub	sp, #16
 801016e:	af00      	add	r7, sp, #0
 8010170:	60f8      	str	r0, [r7, #12]
 8010172:	60b9      	str	r1, [r7, #8]
 8010174:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	2100      	movs	r1, #0
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	f000 fd0a 	bl	8010b96 <USBD_LL_Transmit>

  return USBD_OK;
 8010182:	2300      	movs	r3, #0
}
 8010184:	4618      	mov	r0, r3
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2203      	movs	r2, #3
 801019c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	68ba      	ldr	r2, [r7, #8]
 80101b4:	2100      	movs	r1, #0
 80101b6:	68f8      	ldr	r0, [r7, #12]
 80101b8:	f000 fd0e 	bl	8010bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80101bc:	2300      	movs	r3, #0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3710      	adds	r7, #16
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}

080101c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80101c6:	b580      	push	{r7, lr}
 80101c8:	b084      	sub	sp, #16
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	60f8      	str	r0, [r7, #12]
 80101ce:	60b9      	str	r1, [r7, #8]
 80101d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	68ba      	ldr	r2, [r7, #8]
 80101d6:	2100      	movs	r1, #0
 80101d8:	68f8      	ldr	r0, [r7, #12]
 80101da:	f000 fcfd 	bl	8010bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2204      	movs	r2, #4
 80101f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80101f8:	2300      	movs	r3, #0
 80101fa:	2200      	movs	r2, #0
 80101fc:	2100      	movs	r1, #0
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f000 fcc9 	bl	8010b96 <USBD_LL_Transmit>

  return USBD_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3708      	adds	r7, #8
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b082      	sub	sp, #8
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2205      	movs	r2, #5
 801021a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801021e:	2300      	movs	r3, #0
 8010220:	2200      	movs	r2, #0
 8010222:	2100      	movs	r1, #0
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 fcd7 	bl	8010bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801022a:	2300      	movs	r3, #0
}
 801022c:	4618      	mov	r0, r3
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8010238:	2201      	movs	r2, #1
 801023a:	4913      	ldr	r1, [pc, #76]	@ (8010288 <MX_USB_DEVICE_Init+0x54>)
 801023c:	4813      	ldr	r0, [pc, #76]	@ (801028c <MX_USB_DEVICE_Init+0x58>)
 801023e:	f7fe fccd 	bl	800ebdc <USBD_Init>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d001      	beq.n	801024c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010248:	f7f0 feb2 	bl	8000fb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801024c:	4910      	ldr	r1, [pc, #64]	@ (8010290 <MX_USB_DEVICE_Init+0x5c>)
 801024e:	480f      	ldr	r0, [pc, #60]	@ (801028c <MX_USB_DEVICE_Init+0x58>)
 8010250:	f7fe fcf4 	bl	800ec3c <USBD_RegisterClass>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d001      	beq.n	801025e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801025a:	f7f0 fea9 	bl	8000fb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801025e:	490d      	ldr	r1, [pc, #52]	@ (8010294 <MX_USB_DEVICE_Init+0x60>)
 8010260:	480a      	ldr	r0, [pc, #40]	@ (801028c <MX_USB_DEVICE_Init+0x58>)
 8010262:	f7fe fc2b 	bl	800eabc <USBD_CDC_RegisterInterface>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d001      	beq.n	8010270 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801026c:	f7f0 fea0 	bl	8000fb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8010270:	4806      	ldr	r0, [pc, #24]	@ (801028c <MX_USB_DEVICE_Init+0x58>)
 8010272:	f7fe fd19 	bl	800eca8 <USBD_Start>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d001      	beq.n	8010280 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801027c:	f7f0 fe98 	bl	8000fb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010280:	f7f7 ff5c 	bl	800813c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010284:	bf00      	nop
 8010286:	bd80      	pop	{r7, pc}
 8010288:	240000b0 	.word	0x240000b0
 801028c:	24000524 	.word	0x24000524
 8010290:	2400001c 	.word	0x2400001c
 8010294:	2400009c 	.word	0x2400009c

08010298 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801029c:	2200      	movs	r2, #0
 801029e:	4905      	ldr	r1, [pc, #20]	@ (80102b4 <CDC_Init_HS+0x1c>)
 80102a0:	4805      	ldr	r0, [pc, #20]	@ (80102b8 <CDC_Init_HS+0x20>)
 80102a2:	f7fe fc25 	bl	800eaf0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80102a6:	4905      	ldr	r1, [pc, #20]	@ (80102bc <CDC_Init_HS+0x24>)
 80102a8:	4803      	ldr	r0, [pc, #12]	@ (80102b8 <CDC_Init_HS+0x20>)
 80102aa:	f7fe fc43 	bl	800eb34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80102ae:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	24001000 	.word	0x24001000
 80102b8:	24000524 	.word	0x24000524
 80102bc:	24000800 	.word	0x24000800

080102c0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80102c0:	b480      	push	{r7}
 80102c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80102c4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	4603      	mov	r3, r0
 80102d8:	6039      	str	r1, [r7, #0]
 80102da:	71fb      	strb	r3, [r7, #7]
 80102dc:	4613      	mov	r3, r2
 80102de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80102e0:	79fb      	ldrb	r3, [r7, #7]
 80102e2:	2b23      	cmp	r3, #35	@ 0x23
 80102e4:	d84a      	bhi.n	801037c <CDC_Control_HS+0xac>
 80102e6:	a201      	add	r2, pc, #4	@ (adr r2, 80102ec <CDC_Control_HS+0x1c>)
 80102e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ec:	0801037d 	.word	0x0801037d
 80102f0:	0801037d 	.word	0x0801037d
 80102f4:	0801037d 	.word	0x0801037d
 80102f8:	0801037d 	.word	0x0801037d
 80102fc:	0801037d 	.word	0x0801037d
 8010300:	0801037d 	.word	0x0801037d
 8010304:	0801037d 	.word	0x0801037d
 8010308:	0801037d 	.word	0x0801037d
 801030c:	0801037d 	.word	0x0801037d
 8010310:	0801037d 	.word	0x0801037d
 8010314:	0801037d 	.word	0x0801037d
 8010318:	0801037d 	.word	0x0801037d
 801031c:	0801037d 	.word	0x0801037d
 8010320:	0801037d 	.word	0x0801037d
 8010324:	0801037d 	.word	0x0801037d
 8010328:	0801037d 	.word	0x0801037d
 801032c:	0801037d 	.word	0x0801037d
 8010330:	0801037d 	.word	0x0801037d
 8010334:	0801037d 	.word	0x0801037d
 8010338:	0801037d 	.word	0x0801037d
 801033c:	0801037d 	.word	0x0801037d
 8010340:	0801037d 	.word	0x0801037d
 8010344:	0801037d 	.word	0x0801037d
 8010348:	0801037d 	.word	0x0801037d
 801034c:	0801037d 	.word	0x0801037d
 8010350:	0801037d 	.word	0x0801037d
 8010354:	0801037d 	.word	0x0801037d
 8010358:	0801037d 	.word	0x0801037d
 801035c:	0801037d 	.word	0x0801037d
 8010360:	0801037d 	.word	0x0801037d
 8010364:	0801037d 	.word	0x0801037d
 8010368:	0801037d 	.word	0x0801037d
 801036c:	0801037d 	.word	0x0801037d
 8010370:	0801037d 	.word	0x0801037d
 8010374:	0801037d 	.word	0x0801037d
 8010378:	0801037d 	.word	0x0801037d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801037c:	bf00      	nop
  }

  return (USBD_OK);
 801037e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8010380:	4618      	mov	r0, r3
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr

0801038c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8010396:	6879      	ldr	r1, [r7, #4]
 8010398:	4805      	ldr	r0, [pc, #20]	@ (80103b0 <CDC_Receive_HS+0x24>)
 801039a:	f7fe fbcb 	bl	800eb34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801039e:	4804      	ldr	r0, [pc, #16]	@ (80103b0 <CDC_Receive_HS+0x24>)
 80103a0:	f7fe fbe6 	bl	800eb70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80103a4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	24000524 	.word	0x24000524

080103b4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b087      	sub	sp, #28
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	4613      	mov	r3, r2
 80103c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80103c2:	2300      	movs	r3, #0
 80103c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80103c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	371c      	adds	r7, #28
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
	...

080103d8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	4603      	mov	r3, r0
 80103e0:	6039      	str	r1, [r7, #0]
 80103e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	2212      	movs	r2, #18
 80103e8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80103ea:	4b03      	ldr	r3, [pc, #12]	@ (80103f8 <USBD_HS_DeviceDescriptor+0x20>)
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	240000d0 	.word	0x240000d0

080103fc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	4603      	mov	r3, r0
 8010404:	6039      	str	r1, [r7, #0]
 8010406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	2204      	movs	r2, #4
 801040c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801040e:	4b03      	ldr	r3, [pc, #12]	@ (801041c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8010410:	4618      	mov	r0, r3
 8010412:	370c      	adds	r7, #12
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr
 801041c:	240000e4 	.word	0x240000e4

08010420 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	4603      	mov	r3, r0
 8010428:	6039      	str	r1, [r7, #0]
 801042a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801042c:	79fb      	ldrb	r3, [r7, #7]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d105      	bne.n	801043e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010432:	683a      	ldr	r2, [r7, #0]
 8010434:	4907      	ldr	r1, [pc, #28]	@ (8010454 <USBD_HS_ProductStrDescriptor+0x34>)
 8010436:	4808      	ldr	r0, [pc, #32]	@ (8010458 <USBD_HS_ProductStrDescriptor+0x38>)
 8010438:	f7ff fe10 	bl	801005c <USBD_GetString>
 801043c:	e004      	b.n	8010448 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801043e:	683a      	ldr	r2, [r7, #0]
 8010440:	4904      	ldr	r1, [pc, #16]	@ (8010454 <USBD_HS_ProductStrDescriptor+0x34>)
 8010442:	4805      	ldr	r0, [pc, #20]	@ (8010458 <USBD_HS_ProductStrDescriptor+0x38>)
 8010444:	f7ff fe0a 	bl	801005c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010448:	4b02      	ldr	r3, [pc, #8]	@ (8010454 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801044a:	4618      	mov	r0, r3
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	24001800 	.word	0x24001800
 8010458:	08011764 	.word	0x08011764

0801045c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	4603      	mov	r3, r0
 8010464:	6039      	str	r1, [r7, #0]
 8010466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010468:	683a      	ldr	r2, [r7, #0]
 801046a:	4904      	ldr	r1, [pc, #16]	@ (801047c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801046c:	4804      	ldr	r0, [pc, #16]	@ (8010480 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801046e:	f7ff fdf5 	bl	801005c <USBD_GetString>
  return USBD_StrDesc;
 8010472:	4b02      	ldr	r3, [pc, #8]	@ (801047c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010474:	4618      	mov	r0, r3
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	24001800 	.word	0x24001800
 8010480:	0801177c 	.word	0x0801177c

08010484 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	6039      	str	r1, [r7, #0]
 801048e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	221a      	movs	r2, #26
 8010494:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010496:	f000 f843 	bl	8010520 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801049a:	4b02      	ldr	r3, [pc, #8]	@ (80104a4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801049c:	4618      	mov	r0, r3
 801049e:	3708      	adds	r7, #8
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	240000e8 	.word	0x240000e8

080104a8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	4603      	mov	r3, r0
 80104b0:	6039      	str	r1, [r7, #0]
 80104b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80104b4:	79fb      	ldrb	r3, [r7, #7]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d105      	bne.n	80104c6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80104ba:	683a      	ldr	r2, [r7, #0]
 80104bc:	4907      	ldr	r1, [pc, #28]	@ (80104dc <USBD_HS_ConfigStrDescriptor+0x34>)
 80104be:	4808      	ldr	r0, [pc, #32]	@ (80104e0 <USBD_HS_ConfigStrDescriptor+0x38>)
 80104c0:	f7ff fdcc 	bl	801005c <USBD_GetString>
 80104c4:	e004      	b.n	80104d0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80104c6:	683a      	ldr	r2, [r7, #0]
 80104c8:	4904      	ldr	r1, [pc, #16]	@ (80104dc <USBD_HS_ConfigStrDescriptor+0x34>)
 80104ca:	4805      	ldr	r0, [pc, #20]	@ (80104e0 <USBD_HS_ConfigStrDescriptor+0x38>)
 80104cc:	f7ff fdc6 	bl	801005c <USBD_GetString>
  }
  return USBD_StrDesc;
 80104d0:	4b02      	ldr	r3, [pc, #8]	@ (80104dc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3708      	adds	r7, #8
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	24001800 	.word	0x24001800
 80104e0:	08011790 	.word	0x08011790

080104e4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	4603      	mov	r3, r0
 80104ec:	6039      	str	r1, [r7, #0]
 80104ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80104f0:	79fb      	ldrb	r3, [r7, #7]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d105      	bne.n	8010502 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80104f6:	683a      	ldr	r2, [r7, #0]
 80104f8:	4907      	ldr	r1, [pc, #28]	@ (8010518 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80104fa:	4808      	ldr	r0, [pc, #32]	@ (801051c <USBD_HS_InterfaceStrDescriptor+0x38>)
 80104fc:	f7ff fdae 	bl	801005c <USBD_GetString>
 8010500:	e004      	b.n	801050c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010502:	683a      	ldr	r2, [r7, #0]
 8010504:	4904      	ldr	r1, [pc, #16]	@ (8010518 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010506:	4805      	ldr	r0, [pc, #20]	@ (801051c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010508:	f7ff fda8 	bl	801005c <USBD_GetString>
  }
  return USBD_StrDesc;
 801050c:	4b02      	ldr	r3, [pc, #8]	@ (8010518 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801050e:	4618      	mov	r0, r3
 8010510:	3708      	adds	r7, #8
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	24001800 	.word	0x24001800
 801051c:	0801179c 	.word	0x0801179c

08010520 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010526:	4b0f      	ldr	r3, [pc, #60]	@ (8010564 <Get_SerialNum+0x44>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801052c:	4b0e      	ldr	r3, [pc, #56]	@ (8010568 <Get_SerialNum+0x48>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010532:	4b0e      	ldr	r3, [pc, #56]	@ (801056c <Get_SerialNum+0x4c>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010538:	68fa      	ldr	r2, [r7, #12]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	4413      	add	r3, r2
 801053e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d009      	beq.n	801055a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010546:	2208      	movs	r2, #8
 8010548:	4909      	ldr	r1, [pc, #36]	@ (8010570 <Get_SerialNum+0x50>)
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f000 f814 	bl	8010578 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010550:	2204      	movs	r2, #4
 8010552:	4908      	ldr	r1, [pc, #32]	@ (8010574 <Get_SerialNum+0x54>)
 8010554:	68b8      	ldr	r0, [r7, #8]
 8010556:	f000 f80f 	bl	8010578 <IntToUnicode>
  }
}
 801055a:	bf00      	nop
 801055c:	3710      	adds	r7, #16
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	08fff800 	.word	0x08fff800
 8010568:	08fff804 	.word	0x08fff804
 801056c:	08fff808 	.word	0x08fff808
 8010570:	240000ea 	.word	0x240000ea
 8010574:	240000fa 	.word	0x240000fa

08010578 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010578:	b480      	push	{r7}
 801057a:	b087      	sub	sp, #28
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	4613      	mov	r3, r2
 8010584:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010586:	2300      	movs	r3, #0
 8010588:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801058a:	2300      	movs	r3, #0
 801058c:	75fb      	strb	r3, [r7, #23]
 801058e:	e027      	b.n	80105e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	0f1b      	lsrs	r3, r3, #28
 8010594:	2b09      	cmp	r3, #9
 8010596:	d80b      	bhi.n	80105b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	0f1b      	lsrs	r3, r3, #28
 801059c:	b2da      	uxtb	r2, r3
 801059e:	7dfb      	ldrb	r3, [r7, #23]
 80105a0:	005b      	lsls	r3, r3, #1
 80105a2:	4619      	mov	r1, r3
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	440b      	add	r3, r1
 80105a8:	3230      	adds	r2, #48	@ 0x30
 80105aa:	b2d2      	uxtb	r2, r2
 80105ac:	701a      	strb	r2, [r3, #0]
 80105ae:	e00a      	b.n	80105c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	0f1b      	lsrs	r3, r3, #28
 80105b4:	b2da      	uxtb	r2, r3
 80105b6:	7dfb      	ldrb	r3, [r7, #23]
 80105b8:	005b      	lsls	r3, r3, #1
 80105ba:	4619      	mov	r1, r3
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	440b      	add	r3, r1
 80105c0:	3237      	adds	r2, #55	@ 0x37
 80105c2:	b2d2      	uxtb	r2, r2
 80105c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	011b      	lsls	r3, r3, #4
 80105ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80105cc:	7dfb      	ldrb	r3, [r7, #23]
 80105ce:	005b      	lsls	r3, r3, #1
 80105d0:	3301      	adds	r3, #1
 80105d2:	68ba      	ldr	r2, [r7, #8]
 80105d4:	4413      	add	r3, r2
 80105d6:	2200      	movs	r2, #0
 80105d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80105da:	7dfb      	ldrb	r3, [r7, #23]
 80105dc:	3301      	adds	r3, #1
 80105de:	75fb      	strb	r3, [r7, #23]
 80105e0:	7dfa      	ldrb	r2, [r7, #23]
 80105e2:	79fb      	ldrb	r3, [r7, #7]
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d3d3      	bcc.n	8010590 <IntToUnicode+0x18>
  }
}
 80105e8:	bf00      	nop
 80105ea:	bf00      	nop
 80105ec:	371c      	adds	r7, #28
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
	...

080105f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b0ba      	sub	sp, #232	@ 0xe8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010600:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010604:	2200      	movs	r2, #0
 8010606:	601a      	str	r2, [r3, #0]
 8010608:	605a      	str	r2, [r3, #4]
 801060a:	609a      	str	r2, [r3, #8]
 801060c:	60da      	str	r2, [r3, #12]
 801060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010610:	f107 0310 	add.w	r3, r7, #16
 8010614:	22c0      	movs	r2, #192	@ 0xc0
 8010616:	2100      	movs	r1, #0
 8010618:	4618      	mov	r0, r3
 801061a:	f000 fb77 	bl	8010d0c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	4a43      	ldr	r2, [pc, #268]	@ (8010730 <HAL_PCD_MspInit+0x138>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d17f      	bne.n	8010728 <HAL_PCD_MspInit+0x130>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010628:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801062c:	f04f 0300 	mov.w	r3, #0
 8010630:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8010634:	2301      	movs	r3, #1
 8010636:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8010638:	2312      	movs	r3, #18
 801063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801063c:	2302      	movs	r3, #2
 801063e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8010640:	2303      	movs	r3, #3
 8010642:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8010644:	2302      	movs	r3, #2
 8010646:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8010648:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 801064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 801064e:	2300      	movs	r3, #0
 8010650:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8010652:	2300      	movs	r3, #0
 8010654:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8010656:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801065a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801065e:	f107 0310 	add.w	r3, r7, #16
 8010662:	4618      	mov	r0, r3
 8010664:	f7f8 fd8c 	bl	8009180 <HAL_RCCEx_PeriphCLKConfig>
 8010668:	4603      	mov	r3, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	d001      	beq.n	8010672 <HAL_PCD_MspInit+0x7a>
    {
      Error_Handler();
 801066e:	f7f0 fc9f 	bl	8000fb0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010672:	f7f7 fd63 	bl	800813c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010676:	4b2f      	ldr	r3, [pc, #188]	@ (8010734 <HAL_PCD_MspInit+0x13c>)
 8010678:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801067c:	4a2d      	ldr	r2, [pc, #180]	@ (8010734 <HAL_PCD_MspInit+0x13c>)
 801067e:	f043 0301 	orr.w	r3, r3, #1
 8010682:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8010686:	4b2b      	ldr	r3, [pc, #172]	@ (8010734 <HAL_PCD_MspInit+0x13c>)
 8010688:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801068c:	f003 0301 	and.w	r3, r3, #1
 8010690:	60fb      	str	r3, [r7, #12]
 8010692:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010694:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010698:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801069c:	2300      	movs	r3, #0
 801069e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80106ac:	4619      	mov	r1, r3
 80106ae:	4822      	ldr	r0, [pc, #136]	@ (8010738 <HAL_PCD_MspInit+0x140>)
 80106b0:	f7f5 f938 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80106b4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80106b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106bc:	2302      	movs	r3, #2
 80106be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106c2:	2300      	movs	r3, #0
 80106c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106c8:	2300      	movs	r3, #0
 80106ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80106d2:	4619      	mov	r1, r3
 80106d4:	4818      	ldr	r0, [pc, #96]	@ (8010738 <HAL_PCD_MspInit+0x140>)
 80106d6:	f7f5 f925 	bl	8005924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80106da:	4b16      	ldr	r3, [pc, #88]	@ (8010734 <HAL_PCD_MspInit+0x13c>)
 80106dc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80106e0:	4a14      	ldr	r2, [pc, #80]	@ (8010734 <HAL_PCD_MspInit+0x13c>)
 80106e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80106e6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80106ea:	4b12      	ldr	r3, [pc, #72]	@ (8010734 <HAL_PCD_MspInit+0x13c>)
 80106ec:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80106f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80106f4:	60bb      	str	r3, [r7, #8]
 80106f6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 80106f8:	2200      	movs	r2, #0
 80106fa:	2100      	movs	r1, #0
 80106fc:	204a      	movs	r0, #74	@ 0x4a
 80106fe:	f7f2 ffb0 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8010702:	204a      	movs	r0, #74	@ 0x4a
 8010704:	f7f2 ffc7 	bl	8003696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8010708:	2200      	movs	r2, #0
 801070a:	2100      	movs	r1, #0
 801070c:	204b      	movs	r0, #75	@ 0x4b
 801070e:	f7f2 ffa8 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8010712:	204b      	movs	r0, #75	@ 0x4b
 8010714:	f7f2 ffbf 	bl	8003696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8010718:	2200      	movs	r2, #0
 801071a:	2100      	movs	r1, #0
 801071c:	204d      	movs	r0, #77	@ 0x4d
 801071e:	f7f2 ffa0 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010722:	204d      	movs	r0, #77	@ 0x4d
 8010724:	f7f2 ffb7 	bl	8003696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010728:	bf00      	nop
 801072a:	37e8      	adds	r7, #232	@ 0xe8
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}
 8010730:	40040000 	.word	0x40040000
 8010734:	58024400 	.word	0x58024400
 8010738:	58020000 	.word	0x58020000

0801073c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010750:	4619      	mov	r1, r3
 8010752:	4610      	mov	r0, r2
 8010754:	f7fe faf5 	bl	800ed42 <USBD_LL_SetupStage>
}
 8010758:	bf00      	nop
 801075a:	3708      	adds	r7, #8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	460b      	mov	r3, r1
 801076a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010772:	78fa      	ldrb	r2, [r7, #3]
 8010774:	6879      	ldr	r1, [r7, #4]
 8010776:	4613      	mov	r3, r2
 8010778:	00db      	lsls	r3, r3, #3
 801077a:	4413      	add	r3, r2
 801077c:	009b      	lsls	r3, r3, #2
 801077e:	440b      	add	r3, r1
 8010780:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	78fb      	ldrb	r3, [r7, #3]
 8010788:	4619      	mov	r1, r3
 801078a:	f7fe fb2f 	bl	800edec <USBD_LL_DataOutStage>
}
 801078e:	bf00      	nop
 8010790:	3708      	adds	r7, #8
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010796:	b580      	push	{r7, lr}
 8010798:	b082      	sub	sp, #8
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
 801079e:	460b      	mov	r3, r1
 80107a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80107a8:	78fa      	ldrb	r2, [r7, #3]
 80107aa:	6879      	ldr	r1, [r7, #4]
 80107ac:	4613      	mov	r3, r2
 80107ae:	00db      	lsls	r3, r3, #3
 80107b0:	4413      	add	r3, r2
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	440b      	add	r3, r1
 80107b6:	3320      	adds	r3, #32
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	78fb      	ldrb	r3, [r7, #3]
 80107bc:	4619      	mov	r1, r3
 80107be:	f7fe fbc8 	bl	800ef52 <USBD_LL_DataInStage>
}
 80107c2:	bf00      	nop
 80107c4:	3708      	adds	r7, #8
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}

080107ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107ca:	b580      	push	{r7, lr}
 80107cc:	b082      	sub	sp, #8
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fe fd02 	bl	800f1e2 <USBD_LL_SOF>
}
 80107de:	bf00      	nop
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}

080107e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107e6:	b580      	push	{r7, lr}
 80107e8:	b084      	sub	sp, #16
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80107ee:	2301      	movs	r3, #1
 80107f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	79db      	ldrb	r3, [r3, #7]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d102      	bne.n	8010800 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80107fa:	2300      	movs	r3, #0
 80107fc:	73fb      	strb	r3, [r7, #15]
 80107fe:	e008      	b.n	8010812 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	79db      	ldrb	r3, [r3, #7]
 8010804:	2b02      	cmp	r3, #2
 8010806:	d102      	bne.n	801080e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010808:	2301      	movs	r3, #1
 801080a:	73fb      	strb	r3, [r7, #15]
 801080c:	e001      	b.n	8010812 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801080e:	f7f0 fbcf 	bl	8000fb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010818:	7bfa      	ldrb	r2, [r7, #15]
 801081a:	4611      	mov	r1, r2
 801081c:	4618      	mov	r0, r3
 801081e:	f7fe fc9c 	bl	800f15a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010828:	4618      	mov	r0, r3
 801082a:	f7fe fc44 	bl	800f0b6 <USBD_LL_Reset>
}
 801082e:	bf00      	nop
 8010830:	3710      	adds	r7, #16
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
	...

08010838 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010846:	4618      	mov	r0, r3
 8010848:	f7fe fc97 	bl	800f17a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	6812      	ldr	r2, [r2, #0]
 801085a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801085e:	f043 0301 	orr.w	r3, r3, #1
 8010862:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	7adb      	ldrb	r3, [r3, #11]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d005      	beq.n	8010878 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801086c:	4b04      	ldr	r3, [pc, #16]	@ (8010880 <HAL_PCD_SuspendCallback+0x48>)
 801086e:	691b      	ldr	r3, [r3, #16]
 8010870:	4a03      	ldr	r2, [pc, #12]	@ (8010880 <HAL_PCD_SuspendCallback+0x48>)
 8010872:	f043 0306 	orr.w	r3, r3, #6
 8010876:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010878:	bf00      	nop
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	e000ed00 	.word	0xe000ed00

08010884 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010892:	4618      	mov	r0, r3
 8010894:	f7fe fc8d 	bl	800f1b2 <USBD_LL_Resume>
}
 8010898:	bf00      	nop
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	460b      	mov	r3, r1
 80108aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80108b2:	78fa      	ldrb	r2, [r7, #3]
 80108b4:	4611      	mov	r1, r2
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fe fce5 	bl	800f286 <USBD_LL_IsoOUTIncomplete>
}
 80108bc:	bf00      	nop
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	460b      	mov	r3, r1
 80108ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80108d6:	78fa      	ldrb	r2, [r7, #3]
 80108d8:	4611      	mov	r1, r2
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fe fca1 	bl	800f222 <USBD_LL_IsoINIncomplete>
}
 80108e0:	bf00      	nop
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fe fcf7 	bl	800f2ea <USBD_LL_DevConnected>
}
 80108fc:	bf00      	nop
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010912:	4618      	mov	r0, r3
 8010914:	f7fe fcf4 	bl	800f300 <USBD_LL_DevDisconnected>
}
 8010918:	bf00      	nop
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	2b01      	cmp	r3, #1
 801092e:	d140      	bne.n	80109b2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8010930:	4a22      	ldr	r2, [pc, #136]	@ (80109bc <USBD_LL_Init+0x9c>)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	4a20      	ldr	r2, [pc, #128]	@ (80109bc <USBD_LL_Init+0x9c>)
 801093c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8010940:	4b1e      	ldr	r3, [pc, #120]	@ (80109bc <USBD_LL_Init+0x9c>)
 8010942:	4a1f      	ldr	r2, [pc, #124]	@ (80109c0 <USBD_LL_Init+0xa0>)
 8010944:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8010946:	4b1d      	ldr	r3, [pc, #116]	@ (80109bc <USBD_LL_Init+0x9c>)
 8010948:	2209      	movs	r2, #9
 801094a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801094c:	4b1b      	ldr	r3, [pc, #108]	@ (80109bc <USBD_LL_Init+0x9c>)
 801094e:	2202      	movs	r2, #2
 8010950:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010952:	4b1a      	ldr	r3, [pc, #104]	@ (80109bc <USBD_LL_Init+0x9c>)
 8010954:	2200      	movs	r2, #0
 8010956:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010958:	4b18      	ldr	r3, [pc, #96]	@ (80109bc <USBD_LL_Init+0x9c>)
 801095a:	2202      	movs	r2, #2
 801095c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801095e:	4b17      	ldr	r3, [pc, #92]	@ (80109bc <USBD_LL_Init+0x9c>)
 8010960:	2200      	movs	r2, #0
 8010962:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010964:	4b15      	ldr	r3, [pc, #84]	@ (80109bc <USBD_LL_Init+0x9c>)
 8010966:	2200      	movs	r2, #0
 8010968:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801096a:	4b14      	ldr	r3, [pc, #80]	@ (80109bc <USBD_LL_Init+0x9c>)
 801096c:	2200      	movs	r2, #0
 801096e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8010970:	4b12      	ldr	r3, [pc, #72]	@ (80109bc <USBD_LL_Init+0x9c>)
 8010972:	2201      	movs	r2, #1
 8010974:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8010976:	4b11      	ldr	r3, [pc, #68]	@ (80109bc <USBD_LL_Init+0x9c>)
 8010978:	2200      	movs	r2, #0
 801097a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801097c:	4b0f      	ldr	r3, [pc, #60]	@ (80109bc <USBD_LL_Init+0x9c>)
 801097e:	2200      	movs	r2, #0
 8010980:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8010982:	480e      	ldr	r0, [pc, #56]	@ (80109bc <USBD_LL_Init+0x9c>)
 8010984:	f7f6 f8ff 	bl	8006b86 <HAL_PCD_Init>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	d001      	beq.n	8010992 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801098e:	f7f0 fb0f 	bl	8000fb0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8010992:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010996:	4809      	ldr	r0, [pc, #36]	@ (80109bc <USBD_LL_Init+0x9c>)
 8010998:	f7f7 fb55 	bl	8008046 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801099c:	2280      	movs	r2, #128	@ 0x80
 801099e:	2100      	movs	r1, #0
 80109a0:	4806      	ldr	r0, [pc, #24]	@ (80109bc <USBD_LL_Init+0x9c>)
 80109a2:	f7f7 fb09 	bl	8007fb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80109a6:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80109aa:	2101      	movs	r1, #1
 80109ac:	4803      	ldr	r0, [pc, #12]	@ (80109bc <USBD_LL_Init+0x9c>)
 80109ae:	f7f7 fb03 	bl	8007fb8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80109b2:	2300      	movs	r3, #0
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3708      	adds	r7, #8
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	24001a00 	.word	0x24001a00
 80109c0:	40040000 	.word	0x40040000

080109c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109cc:	2300      	movs	r3, #0
 80109ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109d0:	2300      	movs	r3, #0
 80109d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109da:	4618      	mov	r0, r3
 80109dc:	f7f6 f9df 	bl	8006d9e <HAL_PCD_Start>
 80109e0:	4603      	mov	r3, r0
 80109e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109e4:	7bfb      	ldrb	r3, [r7, #15]
 80109e6:	4618      	mov	r0, r3
 80109e8:	f000 f942 	bl	8010c70 <USBD_Get_USB_Status>
 80109ec:	4603      	mov	r3, r0
 80109ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b084      	sub	sp, #16
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
 8010a02:	4608      	mov	r0, r1
 8010a04:	4611      	mov	r1, r2
 8010a06:	461a      	mov	r2, r3
 8010a08:	4603      	mov	r3, r0
 8010a0a:	70fb      	strb	r3, [r7, #3]
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	70bb      	strb	r3, [r7, #2]
 8010a10:	4613      	mov	r3, r2
 8010a12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a14:	2300      	movs	r3, #0
 8010a16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010a22:	78bb      	ldrb	r3, [r7, #2]
 8010a24:	883a      	ldrh	r2, [r7, #0]
 8010a26:	78f9      	ldrb	r1, [r7, #3]
 8010a28:	f7f6 fee0 	bl	80077ec <HAL_PCD_EP_Open>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a30:	7bfb      	ldrb	r3, [r7, #15]
 8010a32:	4618      	mov	r0, r3
 8010a34:	f000 f91c 	bl	8010c70 <USBD_Get_USB_Status>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}

08010a46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a46:	b580      	push	{r7, lr}
 8010a48:	b084      	sub	sp, #16
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
 8010a4e:	460b      	mov	r3, r1
 8010a50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a52:	2300      	movs	r3, #0
 8010a54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a56:	2300      	movs	r3, #0
 8010a58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a60:	78fa      	ldrb	r2, [r7, #3]
 8010a62:	4611      	mov	r1, r2
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7f6 ff2b 	bl	80078c0 <HAL_PCD_EP_Close>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a6e:	7bfb      	ldrb	r3, [r7, #15]
 8010a70:	4618      	mov	r0, r3
 8010a72:	f000 f8fd 	bl	8010c70 <USBD_Get_USB_Status>
 8010a76:	4603      	mov	r3, r0
 8010a78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3710      	adds	r7, #16
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a90:	2300      	movs	r3, #0
 8010a92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a9e:	78fa      	ldrb	r2, [r7, #3]
 8010aa0:	4611      	mov	r1, r2
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7f6 ffe3 	bl	8007a6e <HAL_PCD_EP_SetStall>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010aac:	7bfb      	ldrb	r3, [r7, #15]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 f8de 	bl	8010c70 <USBD_Get_USB_Status>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b084      	sub	sp, #16
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
 8010aca:	460b      	mov	r3, r1
 8010acc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010adc:	78fa      	ldrb	r2, [r7, #3]
 8010ade:	4611      	mov	r1, r2
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7f7 f827 	bl	8007b34 <HAL_PCD_EP_ClrStall>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010aea:	7bfb      	ldrb	r3, [r7, #15]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f000 f8bf 	bl	8010c70 <USBD_Get_USB_Status>
 8010af2:	4603      	mov	r3, r0
 8010af4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010af6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b085      	sub	sp, #20
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	460b      	mov	r3, r1
 8010b0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010b12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	da0b      	bge.n	8010b34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010b1c:	78fb      	ldrb	r3, [r7, #3]
 8010b1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b22:	68f9      	ldr	r1, [r7, #12]
 8010b24:	4613      	mov	r3, r2
 8010b26:	00db      	lsls	r3, r3, #3
 8010b28:	4413      	add	r3, r2
 8010b2a:	009b      	lsls	r3, r3, #2
 8010b2c:	440b      	add	r3, r1
 8010b2e:	3316      	adds	r3, #22
 8010b30:	781b      	ldrb	r3, [r3, #0]
 8010b32:	e00b      	b.n	8010b4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010b34:	78fb      	ldrb	r3, [r7, #3]
 8010b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b3a:	68f9      	ldr	r1, [r7, #12]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	00db      	lsls	r3, r3, #3
 8010b40:	4413      	add	r3, r2
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	440b      	add	r3, r1
 8010b46:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010b4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3714      	adds	r7, #20
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	460b      	mov	r3, r1
 8010b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b64:	2300      	movs	r3, #0
 8010b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010b72:	78fa      	ldrb	r2, [r7, #3]
 8010b74:	4611      	mov	r1, r2
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7f6 fe14 	bl	80077a4 <HAL_PCD_SetAddress>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
 8010b82:	4618      	mov	r0, r3
 8010b84:	f000 f874 	bl	8010c70 <USBD_Get_USB_Status>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3710      	adds	r7, #16
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}

08010b96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010b96:	b580      	push	{r7, lr}
 8010b98:	b086      	sub	sp, #24
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	60f8      	str	r0, [r7, #12]
 8010b9e:	607a      	str	r2, [r7, #4]
 8010ba0:	603b      	str	r3, [r7, #0]
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010baa:	2300      	movs	r3, #0
 8010bac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010bb4:	7af9      	ldrb	r1, [r7, #11]
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	f7f6 ff1e 	bl	80079fa <HAL_PCD_EP_Transmit>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bc2:	7dfb      	ldrb	r3, [r7, #23]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f000 f853 	bl	8010c70 <USBD_Get_USB_Status>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010bce:	7dbb      	ldrb	r3, [r7, #22]
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3718      	adds	r7, #24
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b086      	sub	sp, #24
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	607a      	str	r2, [r7, #4]
 8010be2:	603b      	str	r3, [r7, #0]
 8010be4:	460b      	mov	r3, r1
 8010be6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010be8:	2300      	movs	r3, #0
 8010bea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bec:	2300      	movs	r3, #0
 8010bee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010bf6:	7af9      	ldrb	r1, [r7, #11]
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	f7f6 feaa 	bl	8007954 <HAL_PCD_EP_Receive>
 8010c00:	4603      	mov	r3, r0
 8010c02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c04:	7dfb      	ldrb	r3, [r7, #23]
 8010c06:	4618      	mov	r0, r3
 8010c08:	f000 f832 	bl	8010c70 <USBD_Get_USB_Status>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c10:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3718      	adds	r7, #24
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c1a:	b580      	push	{r7, lr}
 8010c1c:	b082      	sub	sp, #8
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
 8010c22:	460b      	mov	r3, r1
 8010c24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c2c:	78fa      	ldrb	r2, [r7, #3]
 8010c2e:	4611      	mov	r1, r2
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7f6 feca 	bl	80079ca <HAL_PCD_EP_GetRxCount>
 8010c36:	4603      	mov	r3, r0
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010c48:	4b03      	ldr	r3, [pc, #12]	@ (8010c58 <USBD_static_malloc+0x18>)
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	370c      	adds	r7, #12
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop
 8010c58:	24001ee4 	.word	0x24001ee4

08010c5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010c64:	bf00      	nop
 8010c66:	370c      	adds	r7, #12
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010c7e:	79fb      	ldrb	r3, [r7, #7]
 8010c80:	2b03      	cmp	r3, #3
 8010c82:	d817      	bhi.n	8010cb4 <USBD_Get_USB_Status+0x44>
 8010c84:	a201      	add	r2, pc, #4	@ (adr r2, 8010c8c <USBD_Get_USB_Status+0x1c>)
 8010c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c8a:	bf00      	nop
 8010c8c:	08010c9d 	.word	0x08010c9d
 8010c90:	08010ca3 	.word	0x08010ca3
 8010c94:	08010ca9 	.word	0x08010ca9
 8010c98:	08010caf 	.word	0x08010caf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8010ca0:	e00b      	b.n	8010cba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010ca2:	2303      	movs	r3, #3
 8010ca4:	73fb      	strb	r3, [r7, #15]
    break;
 8010ca6:	e008      	b.n	8010cba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	73fb      	strb	r3, [r7, #15]
    break;
 8010cac:	e005      	b.n	8010cba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010cae:	2303      	movs	r3, #3
 8010cb0:	73fb      	strb	r3, [r7, #15]
    break;
 8010cb2:	e002      	b.n	8010cba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010cb4:	2303      	movs	r3, #3
 8010cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8010cb8:	bf00      	nop
  }
  return usb_status;
 8010cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3714      	adds	r7, #20
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr

08010cc8 <siprintf>:
 8010cc8:	b40e      	push	{r1, r2, r3}
 8010cca:	b510      	push	{r4, lr}
 8010ccc:	b09d      	sub	sp, #116	@ 0x74
 8010cce:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010cd0:	9002      	str	r0, [sp, #8]
 8010cd2:	9006      	str	r0, [sp, #24]
 8010cd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010cd8:	480a      	ldr	r0, [pc, #40]	@ (8010d04 <siprintf+0x3c>)
 8010cda:	9107      	str	r1, [sp, #28]
 8010cdc:	9104      	str	r1, [sp, #16]
 8010cde:	490a      	ldr	r1, [pc, #40]	@ (8010d08 <siprintf+0x40>)
 8010ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ce4:	9105      	str	r1, [sp, #20]
 8010ce6:	2400      	movs	r4, #0
 8010ce8:	a902      	add	r1, sp, #8
 8010cea:	6800      	ldr	r0, [r0, #0]
 8010cec:	9301      	str	r3, [sp, #4]
 8010cee:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010cf0:	f000 f994 	bl	801101c <_svfiprintf_r>
 8010cf4:	9b02      	ldr	r3, [sp, #8]
 8010cf6:	701c      	strb	r4, [r3, #0]
 8010cf8:	b01d      	add	sp, #116	@ 0x74
 8010cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cfe:	b003      	add	sp, #12
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop
 8010d04:	24000104 	.word	0x24000104
 8010d08:	ffff0208 	.word	0xffff0208

08010d0c <memset>:
 8010d0c:	4402      	add	r2, r0
 8010d0e:	4603      	mov	r3, r0
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d100      	bne.n	8010d16 <memset+0xa>
 8010d14:	4770      	bx	lr
 8010d16:	f803 1b01 	strb.w	r1, [r3], #1
 8010d1a:	e7f9      	b.n	8010d10 <memset+0x4>

08010d1c <__errno>:
 8010d1c:	4b01      	ldr	r3, [pc, #4]	@ (8010d24 <__errno+0x8>)
 8010d1e:	6818      	ldr	r0, [r3, #0]
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	24000104 	.word	0x24000104

08010d28 <__libc_init_array>:
 8010d28:	b570      	push	{r4, r5, r6, lr}
 8010d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8010d60 <__libc_init_array+0x38>)
 8010d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8010d64 <__libc_init_array+0x3c>)
 8010d2e:	1b64      	subs	r4, r4, r5
 8010d30:	10a4      	asrs	r4, r4, #2
 8010d32:	2600      	movs	r6, #0
 8010d34:	42a6      	cmp	r6, r4
 8010d36:	d109      	bne.n	8010d4c <__libc_init_array+0x24>
 8010d38:	4d0b      	ldr	r5, [pc, #44]	@ (8010d68 <__libc_init_array+0x40>)
 8010d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8010d6c <__libc_init_array+0x44>)
 8010d3c:	f000 fc64 	bl	8011608 <_init>
 8010d40:	1b64      	subs	r4, r4, r5
 8010d42:	10a4      	asrs	r4, r4, #2
 8010d44:	2600      	movs	r6, #0
 8010d46:	42a6      	cmp	r6, r4
 8010d48:	d105      	bne.n	8010d56 <__libc_init_array+0x2e>
 8010d4a:	bd70      	pop	{r4, r5, r6, pc}
 8010d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d50:	4798      	blx	r3
 8010d52:	3601      	adds	r6, #1
 8010d54:	e7ee      	b.n	8010d34 <__libc_init_array+0xc>
 8010d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d5a:	4798      	blx	r3
 8010d5c:	3601      	adds	r6, #1
 8010d5e:	e7f2      	b.n	8010d46 <__libc_init_array+0x1e>
 8010d60:	08011800 	.word	0x08011800
 8010d64:	08011800 	.word	0x08011800
 8010d68:	08011800 	.word	0x08011800
 8010d6c:	08011804 	.word	0x08011804

08010d70 <__retarget_lock_acquire_recursive>:
 8010d70:	4770      	bx	lr

08010d72 <__retarget_lock_release_recursive>:
 8010d72:	4770      	bx	lr

08010d74 <_free_r>:
 8010d74:	b538      	push	{r3, r4, r5, lr}
 8010d76:	4605      	mov	r5, r0
 8010d78:	2900      	cmp	r1, #0
 8010d7a:	d041      	beq.n	8010e00 <_free_r+0x8c>
 8010d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d80:	1f0c      	subs	r4, r1, #4
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	bfb8      	it	lt
 8010d86:	18e4      	addlt	r4, r4, r3
 8010d88:	f000 f8e0 	bl	8010f4c <__malloc_lock>
 8010d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8010e04 <_free_r+0x90>)
 8010d8e:	6813      	ldr	r3, [r2, #0]
 8010d90:	b933      	cbnz	r3, 8010da0 <_free_r+0x2c>
 8010d92:	6063      	str	r3, [r4, #4]
 8010d94:	6014      	str	r4, [r2, #0]
 8010d96:	4628      	mov	r0, r5
 8010d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d9c:	f000 b8dc 	b.w	8010f58 <__malloc_unlock>
 8010da0:	42a3      	cmp	r3, r4
 8010da2:	d908      	bls.n	8010db6 <_free_r+0x42>
 8010da4:	6820      	ldr	r0, [r4, #0]
 8010da6:	1821      	adds	r1, r4, r0
 8010da8:	428b      	cmp	r3, r1
 8010daa:	bf01      	itttt	eq
 8010dac:	6819      	ldreq	r1, [r3, #0]
 8010dae:	685b      	ldreq	r3, [r3, #4]
 8010db0:	1809      	addeq	r1, r1, r0
 8010db2:	6021      	streq	r1, [r4, #0]
 8010db4:	e7ed      	b.n	8010d92 <_free_r+0x1e>
 8010db6:	461a      	mov	r2, r3
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	b10b      	cbz	r3, 8010dc0 <_free_r+0x4c>
 8010dbc:	42a3      	cmp	r3, r4
 8010dbe:	d9fa      	bls.n	8010db6 <_free_r+0x42>
 8010dc0:	6811      	ldr	r1, [r2, #0]
 8010dc2:	1850      	adds	r0, r2, r1
 8010dc4:	42a0      	cmp	r0, r4
 8010dc6:	d10b      	bne.n	8010de0 <_free_r+0x6c>
 8010dc8:	6820      	ldr	r0, [r4, #0]
 8010dca:	4401      	add	r1, r0
 8010dcc:	1850      	adds	r0, r2, r1
 8010dce:	4283      	cmp	r3, r0
 8010dd0:	6011      	str	r1, [r2, #0]
 8010dd2:	d1e0      	bne.n	8010d96 <_free_r+0x22>
 8010dd4:	6818      	ldr	r0, [r3, #0]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	6053      	str	r3, [r2, #4]
 8010dda:	4408      	add	r0, r1
 8010ddc:	6010      	str	r0, [r2, #0]
 8010dde:	e7da      	b.n	8010d96 <_free_r+0x22>
 8010de0:	d902      	bls.n	8010de8 <_free_r+0x74>
 8010de2:	230c      	movs	r3, #12
 8010de4:	602b      	str	r3, [r5, #0]
 8010de6:	e7d6      	b.n	8010d96 <_free_r+0x22>
 8010de8:	6820      	ldr	r0, [r4, #0]
 8010dea:	1821      	adds	r1, r4, r0
 8010dec:	428b      	cmp	r3, r1
 8010dee:	bf04      	itt	eq
 8010df0:	6819      	ldreq	r1, [r3, #0]
 8010df2:	685b      	ldreq	r3, [r3, #4]
 8010df4:	6063      	str	r3, [r4, #4]
 8010df6:	bf04      	itt	eq
 8010df8:	1809      	addeq	r1, r1, r0
 8010dfa:	6021      	streq	r1, [r4, #0]
 8010dfc:	6054      	str	r4, [r2, #4]
 8010dfe:	e7ca      	b.n	8010d96 <_free_r+0x22>
 8010e00:	bd38      	pop	{r3, r4, r5, pc}
 8010e02:	bf00      	nop
 8010e04:	24002248 	.word	0x24002248

08010e08 <sbrk_aligned>:
 8010e08:	b570      	push	{r4, r5, r6, lr}
 8010e0a:	4e0f      	ldr	r6, [pc, #60]	@ (8010e48 <sbrk_aligned+0x40>)
 8010e0c:	460c      	mov	r4, r1
 8010e0e:	6831      	ldr	r1, [r6, #0]
 8010e10:	4605      	mov	r5, r0
 8010e12:	b911      	cbnz	r1, 8010e1a <sbrk_aligned+0x12>
 8010e14:	f000 fba4 	bl	8011560 <_sbrk_r>
 8010e18:	6030      	str	r0, [r6, #0]
 8010e1a:	4621      	mov	r1, r4
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	f000 fb9f 	bl	8011560 <_sbrk_r>
 8010e22:	1c43      	adds	r3, r0, #1
 8010e24:	d103      	bne.n	8010e2e <sbrk_aligned+0x26>
 8010e26:	f04f 34ff 	mov.w	r4, #4294967295
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	bd70      	pop	{r4, r5, r6, pc}
 8010e2e:	1cc4      	adds	r4, r0, #3
 8010e30:	f024 0403 	bic.w	r4, r4, #3
 8010e34:	42a0      	cmp	r0, r4
 8010e36:	d0f8      	beq.n	8010e2a <sbrk_aligned+0x22>
 8010e38:	1a21      	subs	r1, r4, r0
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f000 fb90 	bl	8011560 <_sbrk_r>
 8010e40:	3001      	adds	r0, #1
 8010e42:	d1f2      	bne.n	8010e2a <sbrk_aligned+0x22>
 8010e44:	e7ef      	b.n	8010e26 <sbrk_aligned+0x1e>
 8010e46:	bf00      	nop
 8010e48:	24002244 	.word	0x24002244

08010e4c <_malloc_r>:
 8010e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e50:	1ccd      	adds	r5, r1, #3
 8010e52:	f025 0503 	bic.w	r5, r5, #3
 8010e56:	3508      	adds	r5, #8
 8010e58:	2d0c      	cmp	r5, #12
 8010e5a:	bf38      	it	cc
 8010e5c:	250c      	movcc	r5, #12
 8010e5e:	2d00      	cmp	r5, #0
 8010e60:	4606      	mov	r6, r0
 8010e62:	db01      	blt.n	8010e68 <_malloc_r+0x1c>
 8010e64:	42a9      	cmp	r1, r5
 8010e66:	d904      	bls.n	8010e72 <_malloc_r+0x26>
 8010e68:	230c      	movs	r3, #12
 8010e6a:	6033      	str	r3, [r6, #0]
 8010e6c:	2000      	movs	r0, #0
 8010e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010f48 <_malloc_r+0xfc>
 8010e76:	f000 f869 	bl	8010f4c <__malloc_lock>
 8010e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8010e7e:	461c      	mov	r4, r3
 8010e80:	bb44      	cbnz	r4, 8010ed4 <_malloc_r+0x88>
 8010e82:	4629      	mov	r1, r5
 8010e84:	4630      	mov	r0, r6
 8010e86:	f7ff ffbf 	bl	8010e08 <sbrk_aligned>
 8010e8a:	1c43      	adds	r3, r0, #1
 8010e8c:	4604      	mov	r4, r0
 8010e8e:	d158      	bne.n	8010f42 <_malloc_r+0xf6>
 8010e90:	f8d8 4000 	ldr.w	r4, [r8]
 8010e94:	4627      	mov	r7, r4
 8010e96:	2f00      	cmp	r7, #0
 8010e98:	d143      	bne.n	8010f22 <_malloc_r+0xd6>
 8010e9a:	2c00      	cmp	r4, #0
 8010e9c:	d04b      	beq.n	8010f36 <_malloc_r+0xea>
 8010e9e:	6823      	ldr	r3, [r4, #0]
 8010ea0:	4639      	mov	r1, r7
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	eb04 0903 	add.w	r9, r4, r3
 8010ea8:	f000 fb5a 	bl	8011560 <_sbrk_r>
 8010eac:	4581      	cmp	r9, r0
 8010eae:	d142      	bne.n	8010f36 <_malloc_r+0xea>
 8010eb0:	6821      	ldr	r1, [r4, #0]
 8010eb2:	1a6d      	subs	r5, r5, r1
 8010eb4:	4629      	mov	r1, r5
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	f7ff ffa6 	bl	8010e08 <sbrk_aligned>
 8010ebc:	3001      	adds	r0, #1
 8010ebe:	d03a      	beq.n	8010f36 <_malloc_r+0xea>
 8010ec0:	6823      	ldr	r3, [r4, #0]
 8010ec2:	442b      	add	r3, r5
 8010ec4:	6023      	str	r3, [r4, #0]
 8010ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8010eca:	685a      	ldr	r2, [r3, #4]
 8010ecc:	bb62      	cbnz	r2, 8010f28 <_malloc_r+0xdc>
 8010ece:	f8c8 7000 	str.w	r7, [r8]
 8010ed2:	e00f      	b.n	8010ef4 <_malloc_r+0xa8>
 8010ed4:	6822      	ldr	r2, [r4, #0]
 8010ed6:	1b52      	subs	r2, r2, r5
 8010ed8:	d420      	bmi.n	8010f1c <_malloc_r+0xd0>
 8010eda:	2a0b      	cmp	r2, #11
 8010edc:	d917      	bls.n	8010f0e <_malloc_r+0xc2>
 8010ede:	1961      	adds	r1, r4, r5
 8010ee0:	42a3      	cmp	r3, r4
 8010ee2:	6025      	str	r5, [r4, #0]
 8010ee4:	bf18      	it	ne
 8010ee6:	6059      	strne	r1, [r3, #4]
 8010ee8:	6863      	ldr	r3, [r4, #4]
 8010eea:	bf08      	it	eq
 8010eec:	f8c8 1000 	streq.w	r1, [r8]
 8010ef0:	5162      	str	r2, [r4, r5]
 8010ef2:	604b      	str	r3, [r1, #4]
 8010ef4:	4630      	mov	r0, r6
 8010ef6:	f000 f82f 	bl	8010f58 <__malloc_unlock>
 8010efa:	f104 000b 	add.w	r0, r4, #11
 8010efe:	1d23      	adds	r3, r4, #4
 8010f00:	f020 0007 	bic.w	r0, r0, #7
 8010f04:	1ac2      	subs	r2, r0, r3
 8010f06:	bf1c      	itt	ne
 8010f08:	1a1b      	subne	r3, r3, r0
 8010f0a:	50a3      	strne	r3, [r4, r2]
 8010f0c:	e7af      	b.n	8010e6e <_malloc_r+0x22>
 8010f0e:	6862      	ldr	r2, [r4, #4]
 8010f10:	42a3      	cmp	r3, r4
 8010f12:	bf0c      	ite	eq
 8010f14:	f8c8 2000 	streq.w	r2, [r8]
 8010f18:	605a      	strne	r2, [r3, #4]
 8010f1a:	e7eb      	b.n	8010ef4 <_malloc_r+0xa8>
 8010f1c:	4623      	mov	r3, r4
 8010f1e:	6864      	ldr	r4, [r4, #4]
 8010f20:	e7ae      	b.n	8010e80 <_malloc_r+0x34>
 8010f22:	463c      	mov	r4, r7
 8010f24:	687f      	ldr	r7, [r7, #4]
 8010f26:	e7b6      	b.n	8010e96 <_malloc_r+0x4a>
 8010f28:	461a      	mov	r2, r3
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	42a3      	cmp	r3, r4
 8010f2e:	d1fb      	bne.n	8010f28 <_malloc_r+0xdc>
 8010f30:	2300      	movs	r3, #0
 8010f32:	6053      	str	r3, [r2, #4]
 8010f34:	e7de      	b.n	8010ef4 <_malloc_r+0xa8>
 8010f36:	230c      	movs	r3, #12
 8010f38:	6033      	str	r3, [r6, #0]
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	f000 f80c 	bl	8010f58 <__malloc_unlock>
 8010f40:	e794      	b.n	8010e6c <_malloc_r+0x20>
 8010f42:	6005      	str	r5, [r0, #0]
 8010f44:	e7d6      	b.n	8010ef4 <_malloc_r+0xa8>
 8010f46:	bf00      	nop
 8010f48:	24002248 	.word	0x24002248

08010f4c <__malloc_lock>:
 8010f4c:	4801      	ldr	r0, [pc, #4]	@ (8010f54 <__malloc_lock+0x8>)
 8010f4e:	f7ff bf0f 	b.w	8010d70 <__retarget_lock_acquire_recursive>
 8010f52:	bf00      	nop
 8010f54:	24002240 	.word	0x24002240

08010f58 <__malloc_unlock>:
 8010f58:	4801      	ldr	r0, [pc, #4]	@ (8010f60 <__malloc_unlock+0x8>)
 8010f5a:	f7ff bf0a 	b.w	8010d72 <__retarget_lock_release_recursive>
 8010f5e:	bf00      	nop
 8010f60:	24002240 	.word	0x24002240

08010f64 <__ssputs_r>:
 8010f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f68:	688e      	ldr	r6, [r1, #8]
 8010f6a:	461f      	mov	r7, r3
 8010f6c:	42be      	cmp	r6, r7
 8010f6e:	680b      	ldr	r3, [r1, #0]
 8010f70:	4682      	mov	sl, r0
 8010f72:	460c      	mov	r4, r1
 8010f74:	4690      	mov	r8, r2
 8010f76:	d82d      	bhi.n	8010fd4 <__ssputs_r+0x70>
 8010f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010f80:	d026      	beq.n	8010fd0 <__ssputs_r+0x6c>
 8010f82:	6965      	ldr	r5, [r4, #20]
 8010f84:	6909      	ldr	r1, [r1, #16]
 8010f86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f8a:	eba3 0901 	sub.w	r9, r3, r1
 8010f8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f92:	1c7b      	adds	r3, r7, #1
 8010f94:	444b      	add	r3, r9
 8010f96:	106d      	asrs	r5, r5, #1
 8010f98:	429d      	cmp	r5, r3
 8010f9a:	bf38      	it	cc
 8010f9c:	461d      	movcc	r5, r3
 8010f9e:	0553      	lsls	r3, r2, #21
 8010fa0:	d527      	bpl.n	8010ff2 <__ssputs_r+0x8e>
 8010fa2:	4629      	mov	r1, r5
 8010fa4:	f7ff ff52 	bl	8010e4c <_malloc_r>
 8010fa8:	4606      	mov	r6, r0
 8010faa:	b360      	cbz	r0, 8011006 <__ssputs_r+0xa2>
 8010fac:	6921      	ldr	r1, [r4, #16]
 8010fae:	464a      	mov	r2, r9
 8010fb0:	f000 fae6 	bl	8011580 <memcpy>
 8010fb4:	89a3      	ldrh	r3, [r4, #12]
 8010fb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fbe:	81a3      	strh	r3, [r4, #12]
 8010fc0:	6126      	str	r6, [r4, #16]
 8010fc2:	6165      	str	r5, [r4, #20]
 8010fc4:	444e      	add	r6, r9
 8010fc6:	eba5 0509 	sub.w	r5, r5, r9
 8010fca:	6026      	str	r6, [r4, #0]
 8010fcc:	60a5      	str	r5, [r4, #8]
 8010fce:	463e      	mov	r6, r7
 8010fd0:	42be      	cmp	r6, r7
 8010fd2:	d900      	bls.n	8010fd6 <__ssputs_r+0x72>
 8010fd4:	463e      	mov	r6, r7
 8010fd6:	6820      	ldr	r0, [r4, #0]
 8010fd8:	4632      	mov	r2, r6
 8010fda:	4641      	mov	r1, r8
 8010fdc:	f000 faa6 	bl	801152c <memmove>
 8010fe0:	68a3      	ldr	r3, [r4, #8]
 8010fe2:	1b9b      	subs	r3, r3, r6
 8010fe4:	60a3      	str	r3, [r4, #8]
 8010fe6:	6823      	ldr	r3, [r4, #0]
 8010fe8:	4433      	add	r3, r6
 8010fea:	6023      	str	r3, [r4, #0]
 8010fec:	2000      	movs	r0, #0
 8010fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ff2:	462a      	mov	r2, r5
 8010ff4:	f000 fad2 	bl	801159c <_realloc_r>
 8010ff8:	4606      	mov	r6, r0
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	d1e0      	bne.n	8010fc0 <__ssputs_r+0x5c>
 8010ffe:	6921      	ldr	r1, [r4, #16]
 8011000:	4650      	mov	r0, sl
 8011002:	f7ff feb7 	bl	8010d74 <_free_r>
 8011006:	230c      	movs	r3, #12
 8011008:	f8ca 3000 	str.w	r3, [sl]
 801100c:	89a3      	ldrh	r3, [r4, #12]
 801100e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011012:	81a3      	strh	r3, [r4, #12]
 8011014:	f04f 30ff 	mov.w	r0, #4294967295
 8011018:	e7e9      	b.n	8010fee <__ssputs_r+0x8a>
	...

0801101c <_svfiprintf_r>:
 801101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011020:	4698      	mov	r8, r3
 8011022:	898b      	ldrh	r3, [r1, #12]
 8011024:	061b      	lsls	r3, r3, #24
 8011026:	b09d      	sub	sp, #116	@ 0x74
 8011028:	4607      	mov	r7, r0
 801102a:	460d      	mov	r5, r1
 801102c:	4614      	mov	r4, r2
 801102e:	d510      	bpl.n	8011052 <_svfiprintf_r+0x36>
 8011030:	690b      	ldr	r3, [r1, #16]
 8011032:	b973      	cbnz	r3, 8011052 <_svfiprintf_r+0x36>
 8011034:	2140      	movs	r1, #64	@ 0x40
 8011036:	f7ff ff09 	bl	8010e4c <_malloc_r>
 801103a:	6028      	str	r0, [r5, #0]
 801103c:	6128      	str	r0, [r5, #16]
 801103e:	b930      	cbnz	r0, 801104e <_svfiprintf_r+0x32>
 8011040:	230c      	movs	r3, #12
 8011042:	603b      	str	r3, [r7, #0]
 8011044:	f04f 30ff 	mov.w	r0, #4294967295
 8011048:	b01d      	add	sp, #116	@ 0x74
 801104a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104e:	2340      	movs	r3, #64	@ 0x40
 8011050:	616b      	str	r3, [r5, #20]
 8011052:	2300      	movs	r3, #0
 8011054:	9309      	str	r3, [sp, #36]	@ 0x24
 8011056:	2320      	movs	r3, #32
 8011058:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801105c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011060:	2330      	movs	r3, #48	@ 0x30
 8011062:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011200 <_svfiprintf_r+0x1e4>
 8011066:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801106a:	f04f 0901 	mov.w	r9, #1
 801106e:	4623      	mov	r3, r4
 8011070:	469a      	mov	sl, r3
 8011072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011076:	b10a      	cbz	r2, 801107c <_svfiprintf_r+0x60>
 8011078:	2a25      	cmp	r2, #37	@ 0x25
 801107a:	d1f9      	bne.n	8011070 <_svfiprintf_r+0x54>
 801107c:	ebba 0b04 	subs.w	fp, sl, r4
 8011080:	d00b      	beq.n	801109a <_svfiprintf_r+0x7e>
 8011082:	465b      	mov	r3, fp
 8011084:	4622      	mov	r2, r4
 8011086:	4629      	mov	r1, r5
 8011088:	4638      	mov	r0, r7
 801108a:	f7ff ff6b 	bl	8010f64 <__ssputs_r>
 801108e:	3001      	adds	r0, #1
 8011090:	f000 80a7 	beq.w	80111e2 <_svfiprintf_r+0x1c6>
 8011094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011096:	445a      	add	r2, fp
 8011098:	9209      	str	r2, [sp, #36]	@ 0x24
 801109a:	f89a 3000 	ldrb.w	r3, [sl]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	f000 809f 	beq.w	80111e2 <_svfiprintf_r+0x1c6>
 80110a4:	2300      	movs	r3, #0
 80110a6:	f04f 32ff 	mov.w	r2, #4294967295
 80110aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110ae:	f10a 0a01 	add.w	sl, sl, #1
 80110b2:	9304      	str	r3, [sp, #16]
 80110b4:	9307      	str	r3, [sp, #28]
 80110b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80110ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80110bc:	4654      	mov	r4, sl
 80110be:	2205      	movs	r2, #5
 80110c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110c4:	484e      	ldr	r0, [pc, #312]	@ (8011200 <_svfiprintf_r+0x1e4>)
 80110c6:	f7ef f913 	bl	80002f0 <memchr>
 80110ca:	9a04      	ldr	r2, [sp, #16]
 80110cc:	b9d8      	cbnz	r0, 8011106 <_svfiprintf_r+0xea>
 80110ce:	06d0      	lsls	r0, r2, #27
 80110d0:	bf44      	itt	mi
 80110d2:	2320      	movmi	r3, #32
 80110d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110d8:	0711      	lsls	r1, r2, #28
 80110da:	bf44      	itt	mi
 80110dc:	232b      	movmi	r3, #43	@ 0x2b
 80110de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110e2:	f89a 3000 	ldrb.w	r3, [sl]
 80110e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80110e8:	d015      	beq.n	8011116 <_svfiprintf_r+0xfa>
 80110ea:	9a07      	ldr	r2, [sp, #28]
 80110ec:	4654      	mov	r4, sl
 80110ee:	2000      	movs	r0, #0
 80110f0:	f04f 0c0a 	mov.w	ip, #10
 80110f4:	4621      	mov	r1, r4
 80110f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110fa:	3b30      	subs	r3, #48	@ 0x30
 80110fc:	2b09      	cmp	r3, #9
 80110fe:	d94b      	bls.n	8011198 <_svfiprintf_r+0x17c>
 8011100:	b1b0      	cbz	r0, 8011130 <_svfiprintf_r+0x114>
 8011102:	9207      	str	r2, [sp, #28]
 8011104:	e014      	b.n	8011130 <_svfiprintf_r+0x114>
 8011106:	eba0 0308 	sub.w	r3, r0, r8
 801110a:	fa09 f303 	lsl.w	r3, r9, r3
 801110e:	4313      	orrs	r3, r2
 8011110:	9304      	str	r3, [sp, #16]
 8011112:	46a2      	mov	sl, r4
 8011114:	e7d2      	b.n	80110bc <_svfiprintf_r+0xa0>
 8011116:	9b03      	ldr	r3, [sp, #12]
 8011118:	1d19      	adds	r1, r3, #4
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	9103      	str	r1, [sp, #12]
 801111e:	2b00      	cmp	r3, #0
 8011120:	bfbb      	ittet	lt
 8011122:	425b      	neglt	r3, r3
 8011124:	f042 0202 	orrlt.w	r2, r2, #2
 8011128:	9307      	strge	r3, [sp, #28]
 801112a:	9307      	strlt	r3, [sp, #28]
 801112c:	bfb8      	it	lt
 801112e:	9204      	strlt	r2, [sp, #16]
 8011130:	7823      	ldrb	r3, [r4, #0]
 8011132:	2b2e      	cmp	r3, #46	@ 0x2e
 8011134:	d10a      	bne.n	801114c <_svfiprintf_r+0x130>
 8011136:	7863      	ldrb	r3, [r4, #1]
 8011138:	2b2a      	cmp	r3, #42	@ 0x2a
 801113a:	d132      	bne.n	80111a2 <_svfiprintf_r+0x186>
 801113c:	9b03      	ldr	r3, [sp, #12]
 801113e:	1d1a      	adds	r2, r3, #4
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	9203      	str	r2, [sp, #12]
 8011144:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011148:	3402      	adds	r4, #2
 801114a:	9305      	str	r3, [sp, #20]
 801114c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011210 <_svfiprintf_r+0x1f4>
 8011150:	7821      	ldrb	r1, [r4, #0]
 8011152:	2203      	movs	r2, #3
 8011154:	4650      	mov	r0, sl
 8011156:	f7ef f8cb 	bl	80002f0 <memchr>
 801115a:	b138      	cbz	r0, 801116c <_svfiprintf_r+0x150>
 801115c:	9b04      	ldr	r3, [sp, #16]
 801115e:	eba0 000a 	sub.w	r0, r0, sl
 8011162:	2240      	movs	r2, #64	@ 0x40
 8011164:	4082      	lsls	r2, r0
 8011166:	4313      	orrs	r3, r2
 8011168:	3401      	adds	r4, #1
 801116a:	9304      	str	r3, [sp, #16]
 801116c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011170:	4824      	ldr	r0, [pc, #144]	@ (8011204 <_svfiprintf_r+0x1e8>)
 8011172:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011176:	2206      	movs	r2, #6
 8011178:	f7ef f8ba 	bl	80002f0 <memchr>
 801117c:	2800      	cmp	r0, #0
 801117e:	d036      	beq.n	80111ee <_svfiprintf_r+0x1d2>
 8011180:	4b21      	ldr	r3, [pc, #132]	@ (8011208 <_svfiprintf_r+0x1ec>)
 8011182:	bb1b      	cbnz	r3, 80111cc <_svfiprintf_r+0x1b0>
 8011184:	9b03      	ldr	r3, [sp, #12]
 8011186:	3307      	adds	r3, #7
 8011188:	f023 0307 	bic.w	r3, r3, #7
 801118c:	3308      	adds	r3, #8
 801118e:	9303      	str	r3, [sp, #12]
 8011190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011192:	4433      	add	r3, r6
 8011194:	9309      	str	r3, [sp, #36]	@ 0x24
 8011196:	e76a      	b.n	801106e <_svfiprintf_r+0x52>
 8011198:	fb0c 3202 	mla	r2, ip, r2, r3
 801119c:	460c      	mov	r4, r1
 801119e:	2001      	movs	r0, #1
 80111a0:	e7a8      	b.n	80110f4 <_svfiprintf_r+0xd8>
 80111a2:	2300      	movs	r3, #0
 80111a4:	3401      	adds	r4, #1
 80111a6:	9305      	str	r3, [sp, #20]
 80111a8:	4619      	mov	r1, r3
 80111aa:	f04f 0c0a 	mov.w	ip, #10
 80111ae:	4620      	mov	r0, r4
 80111b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111b4:	3a30      	subs	r2, #48	@ 0x30
 80111b6:	2a09      	cmp	r2, #9
 80111b8:	d903      	bls.n	80111c2 <_svfiprintf_r+0x1a6>
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d0c6      	beq.n	801114c <_svfiprintf_r+0x130>
 80111be:	9105      	str	r1, [sp, #20]
 80111c0:	e7c4      	b.n	801114c <_svfiprintf_r+0x130>
 80111c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80111c6:	4604      	mov	r4, r0
 80111c8:	2301      	movs	r3, #1
 80111ca:	e7f0      	b.n	80111ae <_svfiprintf_r+0x192>
 80111cc:	ab03      	add	r3, sp, #12
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	462a      	mov	r2, r5
 80111d2:	4b0e      	ldr	r3, [pc, #56]	@ (801120c <_svfiprintf_r+0x1f0>)
 80111d4:	a904      	add	r1, sp, #16
 80111d6:	4638      	mov	r0, r7
 80111d8:	f3af 8000 	nop.w
 80111dc:	1c42      	adds	r2, r0, #1
 80111de:	4606      	mov	r6, r0
 80111e0:	d1d6      	bne.n	8011190 <_svfiprintf_r+0x174>
 80111e2:	89ab      	ldrh	r3, [r5, #12]
 80111e4:	065b      	lsls	r3, r3, #25
 80111e6:	f53f af2d 	bmi.w	8011044 <_svfiprintf_r+0x28>
 80111ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111ec:	e72c      	b.n	8011048 <_svfiprintf_r+0x2c>
 80111ee:	ab03      	add	r3, sp, #12
 80111f0:	9300      	str	r3, [sp, #0]
 80111f2:	462a      	mov	r2, r5
 80111f4:	4b05      	ldr	r3, [pc, #20]	@ (801120c <_svfiprintf_r+0x1f0>)
 80111f6:	a904      	add	r1, sp, #16
 80111f8:	4638      	mov	r0, r7
 80111fa:	f000 f879 	bl	80112f0 <_printf_i>
 80111fe:	e7ed      	b.n	80111dc <_svfiprintf_r+0x1c0>
 8011200:	080117c4 	.word	0x080117c4
 8011204:	080117ce 	.word	0x080117ce
 8011208:	00000000 	.word	0x00000000
 801120c:	08010f65 	.word	0x08010f65
 8011210:	080117ca 	.word	0x080117ca

08011214 <_printf_common>:
 8011214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011218:	4616      	mov	r6, r2
 801121a:	4698      	mov	r8, r3
 801121c:	688a      	ldr	r2, [r1, #8]
 801121e:	690b      	ldr	r3, [r1, #16]
 8011220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011224:	4293      	cmp	r3, r2
 8011226:	bfb8      	it	lt
 8011228:	4613      	movlt	r3, r2
 801122a:	6033      	str	r3, [r6, #0]
 801122c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011230:	4607      	mov	r7, r0
 8011232:	460c      	mov	r4, r1
 8011234:	b10a      	cbz	r2, 801123a <_printf_common+0x26>
 8011236:	3301      	adds	r3, #1
 8011238:	6033      	str	r3, [r6, #0]
 801123a:	6823      	ldr	r3, [r4, #0]
 801123c:	0699      	lsls	r1, r3, #26
 801123e:	bf42      	ittt	mi
 8011240:	6833      	ldrmi	r3, [r6, #0]
 8011242:	3302      	addmi	r3, #2
 8011244:	6033      	strmi	r3, [r6, #0]
 8011246:	6825      	ldr	r5, [r4, #0]
 8011248:	f015 0506 	ands.w	r5, r5, #6
 801124c:	d106      	bne.n	801125c <_printf_common+0x48>
 801124e:	f104 0a19 	add.w	sl, r4, #25
 8011252:	68e3      	ldr	r3, [r4, #12]
 8011254:	6832      	ldr	r2, [r6, #0]
 8011256:	1a9b      	subs	r3, r3, r2
 8011258:	42ab      	cmp	r3, r5
 801125a:	dc26      	bgt.n	80112aa <_printf_common+0x96>
 801125c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011260:	6822      	ldr	r2, [r4, #0]
 8011262:	3b00      	subs	r3, #0
 8011264:	bf18      	it	ne
 8011266:	2301      	movne	r3, #1
 8011268:	0692      	lsls	r2, r2, #26
 801126a:	d42b      	bmi.n	80112c4 <_printf_common+0xb0>
 801126c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011270:	4641      	mov	r1, r8
 8011272:	4638      	mov	r0, r7
 8011274:	47c8      	blx	r9
 8011276:	3001      	adds	r0, #1
 8011278:	d01e      	beq.n	80112b8 <_printf_common+0xa4>
 801127a:	6823      	ldr	r3, [r4, #0]
 801127c:	6922      	ldr	r2, [r4, #16]
 801127e:	f003 0306 	and.w	r3, r3, #6
 8011282:	2b04      	cmp	r3, #4
 8011284:	bf02      	ittt	eq
 8011286:	68e5      	ldreq	r5, [r4, #12]
 8011288:	6833      	ldreq	r3, [r6, #0]
 801128a:	1aed      	subeq	r5, r5, r3
 801128c:	68a3      	ldr	r3, [r4, #8]
 801128e:	bf0c      	ite	eq
 8011290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011294:	2500      	movne	r5, #0
 8011296:	4293      	cmp	r3, r2
 8011298:	bfc4      	itt	gt
 801129a:	1a9b      	subgt	r3, r3, r2
 801129c:	18ed      	addgt	r5, r5, r3
 801129e:	2600      	movs	r6, #0
 80112a0:	341a      	adds	r4, #26
 80112a2:	42b5      	cmp	r5, r6
 80112a4:	d11a      	bne.n	80112dc <_printf_common+0xc8>
 80112a6:	2000      	movs	r0, #0
 80112a8:	e008      	b.n	80112bc <_printf_common+0xa8>
 80112aa:	2301      	movs	r3, #1
 80112ac:	4652      	mov	r2, sl
 80112ae:	4641      	mov	r1, r8
 80112b0:	4638      	mov	r0, r7
 80112b2:	47c8      	blx	r9
 80112b4:	3001      	adds	r0, #1
 80112b6:	d103      	bne.n	80112c0 <_printf_common+0xac>
 80112b8:	f04f 30ff 	mov.w	r0, #4294967295
 80112bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112c0:	3501      	adds	r5, #1
 80112c2:	e7c6      	b.n	8011252 <_printf_common+0x3e>
 80112c4:	18e1      	adds	r1, r4, r3
 80112c6:	1c5a      	adds	r2, r3, #1
 80112c8:	2030      	movs	r0, #48	@ 0x30
 80112ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80112ce:	4422      	add	r2, r4
 80112d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80112d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80112d8:	3302      	adds	r3, #2
 80112da:	e7c7      	b.n	801126c <_printf_common+0x58>
 80112dc:	2301      	movs	r3, #1
 80112de:	4622      	mov	r2, r4
 80112e0:	4641      	mov	r1, r8
 80112e2:	4638      	mov	r0, r7
 80112e4:	47c8      	blx	r9
 80112e6:	3001      	adds	r0, #1
 80112e8:	d0e6      	beq.n	80112b8 <_printf_common+0xa4>
 80112ea:	3601      	adds	r6, #1
 80112ec:	e7d9      	b.n	80112a2 <_printf_common+0x8e>
	...

080112f0 <_printf_i>:
 80112f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112f4:	7e0f      	ldrb	r7, [r1, #24]
 80112f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80112f8:	2f78      	cmp	r7, #120	@ 0x78
 80112fa:	4691      	mov	r9, r2
 80112fc:	4680      	mov	r8, r0
 80112fe:	460c      	mov	r4, r1
 8011300:	469a      	mov	sl, r3
 8011302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011306:	d807      	bhi.n	8011318 <_printf_i+0x28>
 8011308:	2f62      	cmp	r7, #98	@ 0x62
 801130a:	d80a      	bhi.n	8011322 <_printf_i+0x32>
 801130c:	2f00      	cmp	r7, #0
 801130e:	f000 80d1 	beq.w	80114b4 <_printf_i+0x1c4>
 8011312:	2f58      	cmp	r7, #88	@ 0x58
 8011314:	f000 80b8 	beq.w	8011488 <_printf_i+0x198>
 8011318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801131c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011320:	e03a      	b.n	8011398 <_printf_i+0xa8>
 8011322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011326:	2b15      	cmp	r3, #21
 8011328:	d8f6      	bhi.n	8011318 <_printf_i+0x28>
 801132a:	a101      	add	r1, pc, #4	@ (adr r1, 8011330 <_printf_i+0x40>)
 801132c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011330:	08011389 	.word	0x08011389
 8011334:	0801139d 	.word	0x0801139d
 8011338:	08011319 	.word	0x08011319
 801133c:	08011319 	.word	0x08011319
 8011340:	08011319 	.word	0x08011319
 8011344:	08011319 	.word	0x08011319
 8011348:	0801139d 	.word	0x0801139d
 801134c:	08011319 	.word	0x08011319
 8011350:	08011319 	.word	0x08011319
 8011354:	08011319 	.word	0x08011319
 8011358:	08011319 	.word	0x08011319
 801135c:	0801149b 	.word	0x0801149b
 8011360:	080113c7 	.word	0x080113c7
 8011364:	08011455 	.word	0x08011455
 8011368:	08011319 	.word	0x08011319
 801136c:	08011319 	.word	0x08011319
 8011370:	080114bd 	.word	0x080114bd
 8011374:	08011319 	.word	0x08011319
 8011378:	080113c7 	.word	0x080113c7
 801137c:	08011319 	.word	0x08011319
 8011380:	08011319 	.word	0x08011319
 8011384:	0801145d 	.word	0x0801145d
 8011388:	6833      	ldr	r3, [r6, #0]
 801138a:	1d1a      	adds	r2, r3, #4
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	6032      	str	r2, [r6, #0]
 8011390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011398:	2301      	movs	r3, #1
 801139a:	e09c      	b.n	80114d6 <_printf_i+0x1e6>
 801139c:	6833      	ldr	r3, [r6, #0]
 801139e:	6820      	ldr	r0, [r4, #0]
 80113a0:	1d19      	adds	r1, r3, #4
 80113a2:	6031      	str	r1, [r6, #0]
 80113a4:	0606      	lsls	r6, r0, #24
 80113a6:	d501      	bpl.n	80113ac <_printf_i+0xbc>
 80113a8:	681d      	ldr	r5, [r3, #0]
 80113aa:	e003      	b.n	80113b4 <_printf_i+0xc4>
 80113ac:	0645      	lsls	r5, r0, #25
 80113ae:	d5fb      	bpl.n	80113a8 <_printf_i+0xb8>
 80113b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80113b4:	2d00      	cmp	r5, #0
 80113b6:	da03      	bge.n	80113c0 <_printf_i+0xd0>
 80113b8:	232d      	movs	r3, #45	@ 0x2d
 80113ba:	426d      	negs	r5, r5
 80113bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80113c0:	4858      	ldr	r0, [pc, #352]	@ (8011524 <_printf_i+0x234>)
 80113c2:	230a      	movs	r3, #10
 80113c4:	e011      	b.n	80113ea <_printf_i+0xfa>
 80113c6:	6821      	ldr	r1, [r4, #0]
 80113c8:	6833      	ldr	r3, [r6, #0]
 80113ca:	0608      	lsls	r0, r1, #24
 80113cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80113d0:	d402      	bmi.n	80113d8 <_printf_i+0xe8>
 80113d2:	0649      	lsls	r1, r1, #25
 80113d4:	bf48      	it	mi
 80113d6:	b2ad      	uxthmi	r5, r5
 80113d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80113da:	4852      	ldr	r0, [pc, #328]	@ (8011524 <_printf_i+0x234>)
 80113dc:	6033      	str	r3, [r6, #0]
 80113de:	bf14      	ite	ne
 80113e0:	230a      	movne	r3, #10
 80113e2:	2308      	moveq	r3, #8
 80113e4:	2100      	movs	r1, #0
 80113e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80113ea:	6866      	ldr	r6, [r4, #4]
 80113ec:	60a6      	str	r6, [r4, #8]
 80113ee:	2e00      	cmp	r6, #0
 80113f0:	db05      	blt.n	80113fe <_printf_i+0x10e>
 80113f2:	6821      	ldr	r1, [r4, #0]
 80113f4:	432e      	orrs	r6, r5
 80113f6:	f021 0104 	bic.w	r1, r1, #4
 80113fa:	6021      	str	r1, [r4, #0]
 80113fc:	d04b      	beq.n	8011496 <_printf_i+0x1a6>
 80113fe:	4616      	mov	r6, r2
 8011400:	fbb5 f1f3 	udiv	r1, r5, r3
 8011404:	fb03 5711 	mls	r7, r3, r1, r5
 8011408:	5dc7      	ldrb	r7, [r0, r7]
 801140a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801140e:	462f      	mov	r7, r5
 8011410:	42bb      	cmp	r3, r7
 8011412:	460d      	mov	r5, r1
 8011414:	d9f4      	bls.n	8011400 <_printf_i+0x110>
 8011416:	2b08      	cmp	r3, #8
 8011418:	d10b      	bne.n	8011432 <_printf_i+0x142>
 801141a:	6823      	ldr	r3, [r4, #0]
 801141c:	07df      	lsls	r7, r3, #31
 801141e:	d508      	bpl.n	8011432 <_printf_i+0x142>
 8011420:	6923      	ldr	r3, [r4, #16]
 8011422:	6861      	ldr	r1, [r4, #4]
 8011424:	4299      	cmp	r1, r3
 8011426:	bfde      	ittt	le
 8011428:	2330      	movle	r3, #48	@ 0x30
 801142a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801142e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011432:	1b92      	subs	r2, r2, r6
 8011434:	6122      	str	r2, [r4, #16]
 8011436:	f8cd a000 	str.w	sl, [sp]
 801143a:	464b      	mov	r3, r9
 801143c:	aa03      	add	r2, sp, #12
 801143e:	4621      	mov	r1, r4
 8011440:	4640      	mov	r0, r8
 8011442:	f7ff fee7 	bl	8011214 <_printf_common>
 8011446:	3001      	adds	r0, #1
 8011448:	d14a      	bne.n	80114e0 <_printf_i+0x1f0>
 801144a:	f04f 30ff 	mov.w	r0, #4294967295
 801144e:	b004      	add	sp, #16
 8011450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011454:	6823      	ldr	r3, [r4, #0]
 8011456:	f043 0320 	orr.w	r3, r3, #32
 801145a:	6023      	str	r3, [r4, #0]
 801145c:	4832      	ldr	r0, [pc, #200]	@ (8011528 <_printf_i+0x238>)
 801145e:	2778      	movs	r7, #120	@ 0x78
 8011460:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011464:	6823      	ldr	r3, [r4, #0]
 8011466:	6831      	ldr	r1, [r6, #0]
 8011468:	061f      	lsls	r7, r3, #24
 801146a:	f851 5b04 	ldr.w	r5, [r1], #4
 801146e:	d402      	bmi.n	8011476 <_printf_i+0x186>
 8011470:	065f      	lsls	r7, r3, #25
 8011472:	bf48      	it	mi
 8011474:	b2ad      	uxthmi	r5, r5
 8011476:	6031      	str	r1, [r6, #0]
 8011478:	07d9      	lsls	r1, r3, #31
 801147a:	bf44      	itt	mi
 801147c:	f043 0320 	orrmi.w	r3, r3, #32
 8011480:	6023      	strmi	r3, [r4, #0]
 8011482:	b11d      	cbz	r5, 801148c <_printf_i+0x19c>
 8011484:	2310      	movs	r3, #16
 8011486:	e7ad      	b.n	80113e4 <_printf_i+0xf4>
 8011488:	4826      	ldr	r0, [pc, #152]	@ (8011524 <_printf_i+0x234>)
 801148a:	e7e9      	b.n	8011460 <_printf_i+0x170>
 801148c:	6823      	ldr	r3, [r4, #0]
 801148e:	f023 0320 	bic.w	r3, r3, #32
 8011492:	6023      	str	r3, [r4, #0]
 8011494:	e7f6      	b.n	8011484 <_printf_i+0x194>
 8011496:	4616      	mov	r6, r2
 8011498:	e7bd      	b.n	8011416 <_printf_i+0x126>
 801149a:	6833      	ldr	r3, [r6, #0]
 801149c:	6825      	ldr	r5, [r4, #0]
 801149e:	6961      	ldr	r1, [r4, #20]
 80114a0:	1d18      	adds	r0, r3, #4
 80114a2:	6030      	str	r0, [r6, #0]
 80114a4:	062e      	lsls	r6, r5, #24
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	d501      	bpl.n	80114ae <_printf_i+0x1be>
 80114aa:	6019      	str	r1, [r3, #0]
 80114ac:	e002      	b.n	80114b4 <_printf_i+0x1c4>
 80114ae:	0668      	lsls	r0, r5, #25
 80114b0:	d5fb      	bpl.n	80114aa <_printf_i+0x1ba>
 80114b2:	8019      	strh	r1, [r3, #0]
 80114b4:	2300      	movs	r3, #0
 80114b6:	6123      	str	r3, [r4, #16]
 80114b8:	4616      	mov	r6, r2
 80114ba:	e7bc      	b.n	8011436 <_printf_i+0x146>
 80114bc:	6833      	ldr	r3, [r6, #0]
 80114be:	1d1a      	adds	r2, r3, #4
 80114c0:	6032      	str	r2, [r6, #0]
 80114c2:	681e      	ldr	r6, [r3, #0]
 80114c4:	6862      	ldr	r2, [r4, #4]
 80114c6:	2100      	movs	r1, #0
 80114c8:	4630      	mov	r0, r6
 80114ca:	f7ee ff11 	bl	80002f0 <memchr>
 80114ce:	b108      	cbz	r0, 80114d4 <_printf_i+0x1e4>
 80114d0:	1b80      	subs	r0, r0, r6
 80114d2:	6060      	str	r0, [r4, #4]
 80114d4:	6863      	ldr	r3, [r4, #4]
 80114d6:	6123      	str	r3, [r4, #16]
 80114d8:	2300      	movs	r3, #0
 80114da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80114de:	e7aa      	b.n	8011436 <_printf_i+0x146>
 80114e0:	6923      	ldr	r3, [r4, #16]
 80114e2:	4632      	mov	r2, r6
 80114e4:	4649      	mov	r1, r9
 80114e6:	4640      	mov	r0, r8
 80114e8:	47d0      	blx	sl
 80114ea:	3001      	adds	r0, #1
 80114ec:	d0ad      	beq.n	801144a <_printf_i+0x15a>
 80114ee:	6823      	ldr	r3, [r4, #0]
 80114f0:	079b      	lsls	r3, r3, #30
 80114f2:	d413      	bmi.n	801151c <_printf_i+0x22c>
 80114f4:	68e0      	ldr	r0, [r4, #12]
 80114f6:	9b03      	ldr	r3, [sp, #12]
 80114f8:	4298      	cmp	r0, r3
 80114fa:	bfb8      	it	lt
 80114fc:	4618      	movlt	r0, r3
 80114fe:	e7a6      	b.n	801144e <_printf_i+0x15e>
 8011500:	2301      	movs	r3, #1
 8011502:	4632      	mov	r2, r6
 8011504:	4649      	mov	r1, r9
 8011506:	4640      	mov	r0, r8
 8011508:	47d0      	blx	sl
 801150a:	3001      	adds	r0, #1
 801150c:	d09d      	beq.n	801144a <_printf_i+0x15a>
 801150e:	3501      	adds	r5, #1
 8011510:	68e3      	ldr	r3, [r4, #12]
 8011512:	9903      	ldr	r1, [sp, #12]
 8011514:	1a5b      	subs	r3, r3, r1
 8011516:	42ab      	cmp	r3, r5
 8011518:	dcf2      	bgt.n	8011500 <_printf_i+0x210>
 801151a:	e7eb      	b.n	80114f4 <_printf_i+0x204>
 801151c:	2500      	movs	r5, #0
 801151e:	f104 0619 	add.w	r6, r4, #25
 8011522:	e7f5      	b.n	8011510 <_printf_i+0x220>
 8011524:	080117d5 	.word	0x080117d5
 8011528:	080117e6 	.word	0x080117e6

0801152c <memmove>:
 801152c:	4288      	cmp	r0, r1
 801152e:	b510      	push	{r4, lr}
 8011530:	eb01 0402 	add.w	r4, r1, r2
 8011534:	d902      	bls.n	801153c <memmove+0x10>
 8011536:	4284      	cmp	r4, r0
 8011538:	4623      	mov	r3, r4
 801153a:	d807      	bhi.n	801154c <memmove+0x20>
 801153c:	1e43      	subs	r3, r0, #1
 801153e:	42a1      	cmp	r1, r4
 8011540:	d008      	beq.n	8011554 <memmove+0x28>
 8011542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011546:	f803 2f01 	strb.w	r2, [r3, #1]!
 801154a:	e7f8      	b.n	801153e <memmove+0x12>
 801154c:	4402      	add	r2, r0
 801154e:	4601      	mov	r1, r0
 8011550:	428a      	cmp	r2, r1
 8011552:	d100      	bne.n	8011556 <memmove+0x2a>
 8011554:	bd10      	pop	{r4, pc}
 8011556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801155a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801155e:	e7f7      	b.n	8011550 <memmove+0x24>

08011560 <_sbrk_r>:
 8011560:	b538      	push	{r3, r4, r5, lr}
 8011562:	4d06      	ldr	r5, [pc, #24]	@ (801157c <_sbrk_r+0x1c>)
 8011564:	2300      	movs	r3, #0
 8011566:	4604      	mov	r4, r0
 8011568:	4608      	mov	r0, r1
 801156a:	602b      	str	r3, [r5, #0]
 801156c:	f7f0 feb8 	bl	80022e0 <_sbrk>
 8011570:	1c43      	adds	r3, r0, #1
 8011572:	d102      	bne.n	801157a <_sbrk_r+0x1a>
 8011574:	682b      	ldr	r3, [r5, #0]
 8011576:	b103      	cbz	r3, 801157a <_sbrk_r+0x1a>
 8011578:	6023      	str	r3, [r4, #0]
 801157a:	bd38      	pop	{r3, r4, r5, pc}
 801157c:	2400223c 	.word	0x2400223c

08011580 <memcpy>:
 8011580:	440a      	add	r2, r1
 8011582:	4291      	cmp	r1, r2
 8011584:	f100 33ff 	add.w	r3, r0, #4294967295
 8011588:	d100      	bne.n	801158c <memcpy+0xc>
 801158a:	4770      	bx	lr
 801158c:	b510      	push	{r4, lr}
 801158e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011596:	4291      	cmp	r1, r2
 8011598:	d1f9      	bne.n	801158e <memcpy+0xe>
 801159a:	bd10      	pop	{r4, pc}

0801159c <_realloc_r>:
 801159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a0:	4607      	mov	r7, r0
 80115a2:	4614      	mov	r4, r2
 80115a4:	460d      	mov	r5, r1
 80115a6:	b921      	cbnz	r1, 80115b2 <_realloc_r+0x16>
 80115a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115ac:	4611      	mov	r1, r2
 80115ae:	f7ff bc4d 	b.w	8010e4c <_malloc_r>
 80115b2:	b92a      	cbnz	r2, 80115c0 <_realloc_r+0x24>
 80115b4:	f7ff fbde 	bl	8010d74 <_free_r>
 80115b8:	4625      	mov	r5, r4
 80115ba:	4628      	mov	r0, r5
 80115bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115c0:	f000 f81a 	bl	80115f8 <_malloc_usable_size_r>
 80115c4:	4284      	cmp	r4, r0
 80115c6:	4606      	mov	r6, r0
 80115c8:	d802      	bhi.n	80115d0 <_realloc_r+0x34>
 80115ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80115ce:	d8f4      	bhi.n	80115ba <_realloc_r+0x1e>
 80115d0:	4621      	mov	r1, r4
 80115d2:	4638      	mov	r0, r7
 80115d4:	f7ff fc3a 	bl	8010e4c <_malloc_r>
 80115d8:	4680      	mov	r8, r0
 80115da:	b908      	cbnz	r0, 80115e0 <_realloc_r+0x44>
 80115dc:	4645      	mov	r5, r8
 80115de:	e7ec      	b.n	80115ba <_realloc_r+0x1e>
 80115e0:	42b4      	cmp	r4, r6
 80115e2:	4622      	mov	r2, r4
 80115e4:	4629      	mov	r1, r5
 80115e6:	bf28      	it	cs
 80115e8:	4632      	movcs	r2, r6
 80115ea:	f7ff ffc9 	bl	8011580 <memcpy>
 80115ee:	4629      	mov	r1, r5
 80115f0:	4638      	mov	r0, r7
 80115f2:	f7ff fbbf 	bl	8010d74 <_free_r>
 80115f6:	e7f1      	b.n	80115dc <_realloc_r+0x40>

080115f8 <_malloc_usable_size_r>:
 80115f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115fc:	1f18      	subs	r0, r3, #4
 80115fe:	2b00      	cmp	r3, #0
 8011600:	bfbc      	itt	lt
 8011602:	580b      	ldrlt	r3, [r1, r0]
 8011604:	18c0      	addlt	r0, r0, r3
 8011606:	4770      	bx	lr

08011608 <_init>:
 8011608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801160a:	bf00      	nop
 801160c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801160e:	bc08      	pop	{r3}
 8011610:	469e      	mov	lr, r3
 8011612:	4770      	bx	lr

08011614 <_fini>:
 8011614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011616:	bf00      	nop
 8011618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801161a:	bc08      	pop	{r3}
 801161c:	469e      	mov	lr, r3
 801161e:	4770      	bx	lr
