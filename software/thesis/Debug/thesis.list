
thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013068  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08013314  08013314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080134c4  080134c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080134c8  080134c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000108  24000000  080134cc  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001fbc  24000108  080135d4  00015108  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240020c4  080135d4  000160c4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00015108  2**0
                  CONTENTS, READONLY
  9 .debug_info   000247e8  00000000  00000000  00015136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000509d  00000000  00000000  0003991e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001c80  00000000  00000000  0003e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000015a3  00000000  00000000  00040640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036b8e  00000000  00000000  00041be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00028504  00000000  00000000  00078771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014e0ae  00000000  00000000  000a0c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001eed23  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007864  00000000  00000000  001eed68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000056  00000000  00000000  001f65cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000108 	.word	0x24000108
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080132fc 	.word	0x080132fc

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400010c 	.word	0x2400010c
 80002e8:	080132fc 	.word	0x080132fc

080002ec <I2C_write>:
#include "comms.h"


// I2C
void I2C_write(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af04      	add	r7, sp, #16
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	72fb      	strb	r3, [r7, #11]
 80002fa:	4613      	mov	r3, r2
 80002fc:	72bb      	strb	r3, [r7, #10]
	*status = HAL_I2C_Mem_Write(&hi2c2, dev_adress, reg_adress, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	b299      	uxth	r1, r3
 8000302:	7abb      	ldrb	r3, [r7, #10]
 8000304:	b29a      	uxth	r2, r3
 8000306:	2364      	movs	r3, #100	@ 0x64
 8000308:	9302      	str	r3, [sp, #8]
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2301      	movs	r3, #1
 8000314:	4805      	ldr	r0, [pc, #20]	@ (800032c <I2C_write+0x40>)
 8000316:	f008 fa63 	bl	80087e0 <HAL_I2C_Mem_Write>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	240002f8 	.word	0x240002f8

08000330 <I2C_read>:

void I2C_read(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af02      	add	r7, sp, #8
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	460b      	mov	r3, r1
 800033c:	72fb      	strb	r3, [r7, #11]
 800033e:	4613      	mov	r3, r2
 8000340:	72bb      	strb	r3, [r7, #10]
	dev_adress += 1;
 8000342:	7afb      	ldrb	r3, [r7, #11]
 8000344:	3301      	adds	r3, #1
 8000346:	72fb      	strb	r3, [r7, #11]
	*status = HAL_I2C_Master_Transmit(&hi2c2, dev_adress, &reg_adress, 1, 500);
 8000348:	7afb      	ldrb	r3, [r7, #11]
 800034a:	b299      	uxth	r1, r3
 800034c:	f107 020a 	add.w	r2, r7, #10
 8000350:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2301      	movs	r3, #1
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <I2C_read+0x60>)
 800035a:	f008 f833 	bl	80083c4 <HAL_I2C_Master_Transmit>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	701a      	strb	r2, [r3, #0]
	*status |= HAL_I2C_Master_Receive(&hi2c2, dev_adress, data, 1, 100);
 8000366:	7afb      	ldrb	r3, [r7, #11]
 8000368:	b299      	uxth	r1, r3
 800036a:	2364      	movs	r3, #100	@ 0x64
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2301      	movs	r3, #1
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4807      	ldr	r0, [pc, #28]	@ (8000390 <I2C_read+0x60>)
 8000374:	f008 f93e 	bl	80085f4 <HAL_I2C_Master_Receive>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b2da      	uxtb	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	701a      	strb	r2, [r3, #0]
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	240002f8 	.word	0x240002f8

08000394 <close_SPI>:




// SPI
void close_SPI(SPI_HandleTypeDef* hspi) {
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	uint32_t itflag = hspi->Instance->SR;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	60fb      	str	r3, [r7, #12]

	  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	699a      	ldr	r2, [r3, #24]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f042 0208 	orr.w	r2, r2, #8
 80003b2:	619a      	str	r2, [r3, #24]
	  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	699a      	ldr	r2, [r3, #24]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f042 0210 	orr.w	r2, r2, #16
 80003c2:	619a      	str	r2, [r3, #24]

	  /* Disable SPI peripheral */
	  __HAL_SPI_DISABLE(hspi);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f022 0201 	bic.w	r2, r2, #1
 80003d2:	601a      	str	r2, [r3, #0]

	  /* Disable ITs */
	  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6919      	ldr	r1, [r3, #16]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b3c      	ldr	r3, [pc, #240]	@ (80004d0 <close_SPI+0x13c>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	6113      	str	r3, [r2, #16]
	                              SPI_IT_FRE | SPI_IT_MODF));

	  /* Disable Tx DMA Request */
	  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	689a      	ldr	r2, [r3, #8]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80003f2:	609a      	str	r2, [r3, #8]

	  /* Report UnderRun error for non RX Only communication */
	  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	2b04      	cmp	r3, #4
 80003fe:	d014      	beq.n	800042a <close_SPI+0x96>
	  {
	    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f003 0320 	and.w	r3, r3, #32
 8000406:	2b00      	cmp	r3, #0
 8000408:	d00f      	beq.n	800042a <close_SPI+0x96>
	    {
	      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000410:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	699a      	ldr	r2, [r3, #24]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f042 0220 	orr.w	r2, r2, #32
 8000428:	619a      	str	r2, [r3, #24]
	    }
	  }

	  /* Report OverRun error for non TX Only communication */
	  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2b03      	cmp	r3, #3
 8000434:	d014      	beq.n	8000460 <close_SPI+0xcc>
	  {
	    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00f      	beq.n	8000460 <close_SPI+0xcc>
	    {
	      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000446:	f043 0204 	orr.w	r2, r3, #4
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	699a      	ldr	r2, [r3, #24]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800045e:	619a      	str	r2, [r3, #24]
	    }
	#endif /* USE_SPI_CRC */
	  }

	  /* SPI Mode Fault error interrupt occurred -------------------------------*/
	  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000466:	2b00      	cmp	r3, #0
 8000468:	d00f      	beq.n	800048a <close_SPI+0xf6>
	  {
	    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000470:	f043 0201 	orr.w	r2, r3, #1
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	699a      	ldr	r2, [r3, #24]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000488:	619a      	str	r2, [r3, #24]
	  }

	  /* SPI Frame error interrupt occurred ------------------------------------*/
	  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000490:	2b00      	cmp	r3, #0
 8000492:	d00f      	beq.n	80004b4 <close_SPI+0x120>
	  {
	    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800049a:	f043 0208 	orr.w	r2, r3, #8
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	699a      	ldr	r2, [r3, #24]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80004b2:	619a      	str	r2, [r3, #24]
	  }

	  hspi->TxXferCount = (uint16_t)0UL;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	  hspi->RxXferCount = (uint16_t)0UL;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80004c4:	bf00      	nop
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	fffffc90 	.word	0xfffffc90

080004d4 <HAL_SPI_TxCpltCallback>:

// DMA callbacks, when SPI finishes
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80004dc:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <HAL_SPI_TxCpltCallback+0x1c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	24000124 	.word	0x24000124

080004f4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80004fc:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	24000124 	.word	0x24000124

08000514 <SPI_check_CTS>:

void SPI_check_CTS(HAL_StatusTypeDef* status) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint8_t attempt = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]
	//uint8_t data[] = {0x20, 0, 0, 0}; //GET_INT_STATUS to clear CTS
	// Wait until Clear To Send (CTS) signal appears
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 8000520:	e00c      	b.n	800053c <SPI_check_CTS+0x28>
		attempt++;
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	3301      	adds	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
		if (attempt > 100) {
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	2b64      	cmp	r3, #100	@ 0x64
 800052c:	d903      	bls.n	8000536 <SPI_check_CTS+0x22>
			*status = 0x3; // Timeout
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2203      	movs	r2, #3
 8000532:	701a      	strb	r2, [r3, #0]
			return;
 8000534:	e00a      	b.n	800054c <SPI_check_CTS+0x38>
		}
		HAL_Delay(100);
 8000536:	2064      	movs	r0, #100	@ 0x64
 8000538:	f002 fd56 	bl	8002fe8 <HAL_Delay>
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800053c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <SPI_check_CTS+0x40>)
 8000542:	f007 fe57 	bl	80081f4 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0ea      	beq.n	8000522 <SPI_check_CTS+0xe>

	//*status |= HAL_SPI_Transmit(&hspi4, data, 4, 100);

	// SI is now ready to receive data

}
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	58021000 	.word	0x58021000

08000558 <SPI_write>:


void SPI_write(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
	// Transmit data array
	SPI_check_CTS(status);
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f7ff ffd5 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d110      	bne.n	8000594 <SPI_write+0x3c>
	*status |= HAL_SPI_Transmit(&hspi4, data, *size, 100);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	2364      	movs	r3, #100	@ 0x64
 800057a:	68b9      	ldr	r1, [r7, #8]
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <SPI_write+0x44>)
 800057e:	f00d fdff 	bl	800e180 <HAL_SPI_Transmit>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4313      	orrs	r3, r2
 800058c:	b2da      	uxtb	r2, r3
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e000      	b.n	8000596 <SPI_write+0x3e>
	if (*status != 0) {return;}
 8000594:	bf00      	nop
}
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2400034c 	.word	0x2400034c

080005a0 <SPI_read>:

// SPI functions
void SPI_read(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* TxSize, uint8_t* RxSize) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < *TxSize; i++) {
		data_buffer[i] = data[i];
	}
	*/

	SPI_check_CTS(status);
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f7ff ffb0 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d14a      	bne.n	8000652 <SPI_read+0xb2>
	// Duplicate data array with command and zeros (use static buffer)
	data_buffer[0] = data[0];
	*/

	// Address of requested register
	*status |= HAL_SPI_Transmit(&hspi4, data, *TxSize, 70);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	2346      	movs	r3, #70	@ 0x46
 80005c4:	68b9      	ldr	r1, [r7, #8]
 80005c6:	4826      	ldr	r0, [pc, #152]	@ (8000660 <SPI_read+0xc0>)
 80005c8:	f00d fdda 	bl	800e180 <HAL_SPI_Transmit>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	701a      	strb	r2, [r3, #0]

	// Wait for CTS
	SPI_check_CTS(status);
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f7ff ff99 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d135      	bne.n	8000656 <SPI_read+0xb6>


	// Once approved, prepare for reading (READ_CMD_BUFF)
	data[0] = 0x44;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	2244      	movs	r2, #68	@ 0x44
 80005ee:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	3301      	adds	r3, #1
 80005f4:	22ff      	movs	r2, #255	@ 0xff
 80005f6:	701a      	strb	r2, [r3, #0]

	// Insert padding (Tx delay + CTS byte)
	*RxSize += 2;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3302      	adds	r3, #2
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	701a      	strb	r2, [r3, #0]

	// Issue reading command
	*status |= HAL_SPI_TransmitReceive(&hspi4, data, data_buffer, *RxSize, 100);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	2364      	movs	r3, #100	@ 0x64
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	4613      	mov	r3, r2
 8000610:	4a14      	ldr	r2, [pc, #80]	@ (8000664 <SPI_read+0xc4>)
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	4812      	ldr	r0, [pc, #72]	@ (8000660 <SPI_read+0xc0>)
 8000616:	f00d ffa1 	bl	800e55c <HAL_SPI_TransmitReceive>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	701a      	strb	r2, [r3, #0]


	// Load read data into data array and remove padding at the beginning
	for (uint8_t i = 2; i < *RxSize; i++) {
 800062a:	2302      	movs	r3, #2
 800062c:	75fb      	strb	r3, [r7, #23]
 800062e:	e00a      	b.n	8000646 <SPI_read+0xa6>
		data[i-2] = data_buffer[i];
 8000630:	7dfa      	ldrb	r2, [r7, #23]
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	3b02      	subs	r3, #2
 8000636:	68b9      	ldr	r1, [r7, #8]
 8000638:	440b      	add	r3, r1
 800063a:	490a      	ldr	r1, [pc, #40]	@ (8000664 <SPI_read+0xc4>)
 800063c:	5c8a      	ldrb	r2, [r1, r2]
 800063e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 2; i < *RxSize; i++) {
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	3301      	adds	r3, #1
 8000644:	75fb      	strb	r3, [r7, #23]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	7dfa      	ldrb	r2, [r7, #23]
 800064c:	429a      	cmp	r2, r3
 800064e:	d3ef      	bcc.n	8000630 <SPI_read+0x90>
 8000650:	e002      	b.n	8000658 <SPI_read+0xb8>
	if (*status != 0) {return;}
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <SPI_read+0xb8>
	if (*status != 0) {return;}
 8000656:	bf00      	nop
	}

}
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2400034c 	.word	0x2400034c
 8000664:	24000128 	.word	0x24000128

08000668 <PowerReset>:
	}
	strcpy(IDs[1], temp);
	return;
}

void PowerReset(HAL_StatusTypeDef* status) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers to default state
	I2C_read(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	220c      	movs	r2, #12
 8000676:	2144      	movs	r1, #68	@ 0x44
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff fe59 	bl	8000330 <I2C_read>
	reg_val++;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000686:	f107 030f 	add.w	r3, r7, #15
 800068a:	220c      	movs	r2, #12
 800068c:	2144      	movs	r1, #68	@ 0x44
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff fe2c 	bl	80002ec <I2C_write>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <PowerInit>:


void PowerInit(HAL_StatusTypeDef* status) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers
	PowerReset(status);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffdf 	bl	8000668 <PowerReset>

	// Set device as SINK (Disable SRC/SNK toggle and poll CC lines only)
	// CONTROL2:(MODE, TOGGLE)
	I2C_read(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 80006aa:	f107 030f 	add.w	r3, r7, #15
 80006ae:	2208      	movs	r2, #8
 80006b0:	2144      	movs	r1, #68	@ 0x44
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff fe3c 	bl	8000330 <I2C_read>
	reg_val |= ((1<<2) | 1);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	f043 0305 	orr.w	r3, r3, #5
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]
	reg_val &= ~(1<<1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	f023 0302 	bic.w	r3, r3, #2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 80006cc:	f107 030f 	add.w	r3, r7, #15
 80006d0:	2208      	movs	r2, #8
 80006d2:	2144      	movs	r1, #68	@ 0x44
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fe09 	bl	80002ec <I2C_write>


	// Initially, set current to USB default  (recommended by doc.)
	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80006da:	f107 030f 	add.w	r3, r7, #15
 80006de:	2206      	movs	r2, #6
 80006e0:	2144      	movs	r1, #68	@ 0x44
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff fe24 	bl	8000330 <I2C_read>
	reg_val &= ~(1<<3);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]
	reg_val |= (1 << 2);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80006fc:	f107 030f 	add.w	r3, r7, #15
 8000700:	2206      	movs	r2, #6
 8000702:	2144      	movs	r1, #68	@ 0x44
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff fdf1 	bl	80002ec <I2C_write>

	// Disable current source(s) at CC lines
	I2C_read(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 800070a:	f107 030f 	add.w	r3, r7, #15
 800070e:	2202      	movs	r2, #2
 8000710:	2144      	movs	r1, #68	@ 0x44
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff fe0c 	bl	8000330 <I2C_read>
	reg_val &= ~((1 << 5) | (1 << 4));
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 8000722:	f107 030f 	add.w	r3, r7, #15
 8000726:	2202      	movs	r2, #2
 8000728:	2144      	movs	r1, #68	@ 0x44
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff fdde 	bl	80002ec <I2C_write>

	// Mask interrupt for current level request
	reg_val = 0xFE;
 8000730:	23fe      	movs	r3, #254	@ 0xfe
 8000732:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASK, &reg_val);
 8000734:	f107 030f 	add.w	r3, r7, #15
 8000738:	220a      	movs	r2, #10
 800073a:	2144      	movs	r1, #68	@ 0x44
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fdd5 	bl	80002ec <I2C_write>

	// Mask interrupt for toggle status
	reg_val = 0xBF;
 8000742:	23bf      	movs	r3, #191	@ 0xbf
 8000744:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKA, &reg_val);
 8000746:	f107 030f 	add.w	r3, r7, #15
 800074a:	220e      	movs	r2, #14
 800074c:	2144      	movs	r1, #68	@ 0x44
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff fdcc 	bl	80002ec <I2C_write>

	// Mask interrupt for GoodCRC acknowledge (BMC is not used)
	reg_val = 0x01;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKB, &reg_val);
 8000758:	f107 030f 	add.w	r3, r7, #15
 800075c:	220f      	movs	r2, #15
 800075e:	2144      	movs	r1, #68	@ 0x44
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fdc3 	bl	80002ec <I2C_write>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <PowerIncreaseCurrent>:

void PowerIncreaseCurrent(HAL_StatusTypeDef* status) {
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 8000776:	f107 030f 	add.w	r3, r7, #15
 800077a:	2206      	movs	r2, #6
 800077c:	2144      	movs	r1, #68	@ 0x44
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fdd6 	bl	8000330 <I2C_read>
	reg_val |= ((1<<3) | (1<<2));
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f043 030c 	orr.w	r3, r3, #12
 800078a:	b2db      	uxtb	r3, r3
 800078c:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 800078e:	f107 030f 	add.w	r3, r7, #15
 8000792:	2206      	movs	r2, #6
 8000794:	2144      	movs	r1, #68	@ 0x44
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fda8 	bl	80002ec <I2C_write>

	return;
 800079c:	bf00      	nop
}
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <USB_CDC_RxHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void USB_CDC_RxHandler(uint8_t *buffer, uint32_t size) {
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	char cmd_temp = buffer[0];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	73fb      	strb	r3, [r7, #15]
	if (cmd_temp == '\r') {
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	2b0d      	cmp	r3, #13
 80007b8:	d019      	beq.n	80007ee <USB_CDC_RxHandler+0x4a>
		return;
	}
	else if (size == 1) {
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d104      	bne.n	80007ca <USB_CDC_RxHandler+0x26>
		cmd_index = (char) buffer[0];
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <USB_CDC_RxHandler+0x58>)
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e012      	b.n	80007f0 <USB_CDC_RxHandler+0x4c>
	}
	else {
		uint8_t first = (uint8_t) buffer[0] - '1';
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	3b31      	subs	r3, #49	@ 0x31
 80007d0:	73bb      	strb	r3, [r7, #14]
		uint8_t second = (uint8_t) buffer[1] - '1';
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3301      	adds	r3, #1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3b31      	subs	r3, #49	@ 0x31
 80007da:	737b      	strb	r3, [r7, #13]

		cam_mode_select = first * 16 + second;
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	7b7b      	ldrb	r3, [r7, #13]
 80007e4:	4413      	add	r3, r2
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <USB_CDC_RxHandler+0x5c>)
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e000      	b.n	80007f0 <USB_CDC_RxHandler+0x4c>
		return;
 80007ee:	bf00      	nop
			default: {
				cam_mode_select = 0xAA; //ERROR
			}
		}*/
	}
}
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	24000001 	.word	0x24000001

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	f5ad 2d16 	sub.w	sp, sp, #614400	@ 0x96000
 800080a:	b082      	sub	sp, #8
 800080c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800080e:	f000 fbe7 	bl	8000fe0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f002 fb57 	bl	8002ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000816:	f000 f84f 	bl	80008b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800081a:	f000 f8cf 	bl	80009bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 fac7 	bl	8000db0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000822:	f000 fa95 	bl	8000d50 <MX_DMA_Init>
  MX_DCMI_Init();
 8000826:	f000 f9c9 	bl	8000bbc <MX_DCMI_Init>
  MX_I2C2_Init();
 800082a:	f000 f9fb 	bl	8000c24 <MX_I2C2_Init>
  MX_ADC1_Init();
 800082e:	f000 f8e5 	bl	80009fc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000832:	f000 f95d 	bl	8000af0 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8000836:	f011 ffcf 	bl	80127d8 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 800083a:	f000 fa33 	bl	8000ca4 <MX_SPI4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setup(&status, &error_index);
 800083e:	4917      	ldr	r1, [pc, #92]	@ (800089c <main+0x98>)
 8000840:	4817      	ldr	r0, [pc, #92]	@ (80008a0 <main+0x9c>)
 8000842:	f001 fb60 	bl	8001f06 <setup>
  uint8_t img_buffer[614400] = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	4618      	mov	r0, r3
 800084a:	f44f 2316 	mov.w	r3, #614400	@ 0x96000
 800084e:	461a      	mov	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f012 fd19 	bl	8013288 <memset>
#ifdef GROUND_STATION
  cmd_main_win();
#endif
  //HAL_NVIC_EnableIRQ(nIRQ_EXTI_IRQn);
  while (1) {
 	  if (radio_nirq) {
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <main+0xa0>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00c      	beq.n	8000878 <main+0x74>
		  // Handling of the packet IRQ
		  //HAL_NVIC_DisableIRQ(nIRQ_EXTI_IRQn);
		  nirq_handler(&status, &error_index, &ping_in_progress, &ack, img_buffer, &img_progress);
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <main+0xa4>)
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	463b      	mov	r3, r7
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <main+0xa8>)
 8000868:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <main+0xac>)
 800086a:	490c      	ldr	r1, [pc, #48]	@ (800089c <main+0x98>)
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <main+0x9c>)
 800086e:	f001 fceb 	bl	8002248 <nirq_handler>
		  //HAL_NVIC_EnableIRQ(nIRQ_EXTI_IRQn);
		  radio_nirq = 0;
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <main+0xa0>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
	  }
	  if (img_flag && ack) {
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <main+0xb0>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0ea      	beq.n	8000856 <main+0x52>
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <main+0xa8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0e6      	beq.n	8000856 <main+0x52>
		  transmit_img(&status, &error_index, img_buffer, &img_progress);
 8000888:	463a      	mov	r2, r7
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <main+0xa4>)
 800088c:	4903      	ldr	r1, [pc, #12]	@ (800089c <main+0x98>)
 800088e:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <main+0x9c>)
 8000890:	f001 fc96 	bl	80021c0 <transmit_img>
		  ack = 0;
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <main+0xa8>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
 	  if (radio_nirq) {
 800089a:	e7dc      	b.n	8000856 <main+0x52>
 800089c:	240004c5 	.word	0x240004c5
 80008a0:	240004c4 	.word	0x240004c4
 80008a4:	240004c6 	.word	0x240004c6
 80008a8:	240004d0 	.word	0x240004d0
 80008ac:	240004d4 	.word	0x240004d4
 80008b0:	240004c7 	.word	0x240004c7
 80008b4:	240004cc 	.word	0x240004cc

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	@ 0x70
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c2:	224c      	movs	r2, #76	@ 0x4c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f012 fcde 	bl	8013288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2220      	movs	r2, #32
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f012 fcd8 	bl	8013288 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008d8:	4b36      	ldr	r3, [pc, #216]	@ (80009b4 <SystemClock_Config+0xfc>)
 80008da:	f04f 32ff 	mov.w	r2, #4294967295
 80008de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008e2:	2002      	movs	r0, #2
 80008e4:	f009 fec2 	bl	800a66c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008e8:	2300      	movs	r3, #0
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b32      	ldr	r3, [pc, #200]	@ (80009b8 <SystemClock_Config+0x100>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a31      	ldr	r2, [pc, #196]	@ (80009b8 <SystemClock_Config+0x100>)
 80008f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b2f      	ldr	r3, [pc, #188]	@ (80009b8 <SystemClock_Config+0x100>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	bf00      	nop
 8000906:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <SystemClock_Config+0x100>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800090e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000912:	d1f8      	bne.n	8000906 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2301      	movs	r3, #1
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000918:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	2302      	movs	r3, #2
 8000924:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 800092a:	2346      	movs	r3, #70	@ 0x46
 800092c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 25;
 8000932:	2319      	movs	r3, #25
 8000934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000936:	2304      	movs	r3, #4
 8000938:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800093a:	230c      	movs	r3, #12
 800093c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093e:	2300      	movs	r3, #0
 8000940:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	4618      	mov	r0, r3
 800094c:	f009 fed8 	bl	800a700 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000956:	f000 fb6f 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	233f      	movs	r3, #63	@ 0x3f
 800095c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096e:	2340      	movs	r3, #64	@ 0x40
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000976:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000978:	2340      	movs	r3, #64	@ 0x40
 800097a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2106      	movs	r1, #6
 8000980:	4618      	mov	r0, r3
 8000982:	f00a faef 	bl	800af64 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800098c:	f000 fb54 	bl	8001038 <Error_Handler>
  }
  __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <SystemClock_Config+0xfc>)
 8000992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000994:	4a07      	ldr	r2, [pc, #28]	@ (80009b4 <SystemClock_Config+0xfc>)
 8000996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 800099c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009a0:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 80009a4:	2000      	movs	r0, #0
 80009a6:	f00a fc93 	bl	800b2d0 <HAL_RCC_MCOConfig>
}
 80009aa:	bf00      	nop
 80009ac:	3770      	adds	r7, #112	@ 0x70
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58024800 	.word	0x58024800

080009bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0b0      	sub	sp, #192	@ 0xc0
 80009c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	22c0      	movs	r2, #192	@ 0xc0
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f012 fc5d 	bl	8013288 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80009ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80009d2:	f04f 0300 	mov.w	r3, #0
 80009d6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 80009da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	4618      	mov	r0, r3
 80009e4:	f00a fe9e 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <PeriphCommonClock_Config+0x36>
  {
    Error_Handler();
 80009ee:	f000 fb23 	bl	8001038 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	37c0      	adds	r7, #192	@ 0xc0
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]
 8000a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a20:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a22:	4a31      	ldr	r2, [pc, #196]	@ (8000ae8 <MX_ADC1_Init+0xec>)
 8000a24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a28:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a40:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a46:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a52:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a58:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7e:	4819      	ldr	r0, [pc, #100]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a80:	f002 fc94 	bl	80033ac <HAL_ADC_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a8a:	f000 fad5 	bl	8001038 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a9a:	f003 f953 	bl	8003d44 <HAL_ADCEx_MultiModeConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000aa4:	f000 fac8 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_ADC1_Init+0xf0>)
 8000aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aac:	2306      	movs	r3, #6
 8000aae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ab8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aba:	2304      	movs	r3, #4
 8000abc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000acc:	f002 fdc8 	bl	8003660 <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ad6:	f000 faaf 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	@ 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000168 	.word	0x24000168
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	25b00200 	.word	0x25b00200

08000af0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b0e:	4b28      	ldr	r3, [pc, #160]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b10:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b14:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b16:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b22:	4b23      	ldr	r3, [pc, #140]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b28:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b52:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b66:	4812      	ldr	r0, [pc, #72]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b68:	f002 fc20 	bl	80033ac <HAL_ADC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000b72:	f000 fa61 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <MX_ADC2_Init+0xc8>)
 8000b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7a:	2306      	movs	r3, #6
 8000b7c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b82:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b86:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <MX_ADC2_Init+0xc0>)
 8000b9a:	f002 fd61 	bl	8003660 <HAL_ADC_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000ba4:	f000 fa48 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	240001cc 	.word	0x240001cc
 8000bb4:	40022100 	.word	0x40022100
 8000bb8:	21800100 	.word	0x21800100

08000bbc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <MX_DCMI_Init+0x64>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000bce:	2220      	movs	r2, #32
 8000bd0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000bd4:	2280      	movs	r2, #128	@ 0x80
 8000bd6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_DCMI_Init+0x60>)
 8000c0a:	f003 fabf 	bl	800418c <HAL_DCMI_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000c14:	f000 fa10 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	24000230 	.word	0x24000230
 8000c20:	48020000 	.word	0x48020000

08000c24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <MX_I2C2_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <MX_I2C2_Init+0x7c>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c5e:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c60:	f007 fb14 	bl	800828c <HAL_I2C_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c6a:	f000 f9e5 	bl	8001038 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c72:	f008 f9c3 	bl	8008ffc <HAL_I2CEx_ConfigAnalogFilter>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c7c:	f000 f9dc 	bl	8001038 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c80:	2100      	movs	r1, #0
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c84:	f008 fa05 	bl	8009092 <HAL_I2CEx_ConfigDigitalFilter>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c8e:	f000 f9d3 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	240002f8 	.word	0x240002f8
 8000c9c:	40005800 	.word	0x40005800
 8000ca0:	20b0ccff 	.word	0x20b0ccff

08000ca4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000caa:	4a28      	ldr	r2, [pc, #160]	@ (8000d4c <MX_SPI4_Init+0xa8>)
 8000cac:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cae:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cb0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cb4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb6:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cbc:	4b22      	ldr	r3, [pc, #136]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cd0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cd4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000cee:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cf6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cfa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_SPI4_Init+0xa4>)
 8000d34:	f00d f900 	bl	800df38 <HAL_SPI_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000d3e:	f000 f97b 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2400034c 	.word	0x2400034c
 8000d4c:	40013400 	.word	0x40013400

08000d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <MX_DMA_Init+0x5c>)
 8000d58:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d5c:	4a13      	ldr	r2, [pc, #76]	@ (8000dac <MX_DMA_Init+0x5c>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_DMA_Init+0x5c>)
 8000d68:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	200b      	movs	r0, #11
 8000d7a:	f003 f95a 	bl	8004032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d7e:	200b      	movs	r0, #11
 8000d80:	f003 f971 	bl	8004066 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	200c      	movs	r0, #12
 8000d8a:	f003 f952 	bl	8004032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d8e:	200c      	movs	r0, #12
 8000d90:	f003 f969 	bl	8004066 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	200d      	movs	r0, #13
 8000d9a:	f003 f94a 	bl	8004032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d9e:	200d      	movs	r0, #13
 8000da0:	f003 f961 	bl	8004066 <HAL_NVIC_EnableIRQ>

}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	58024400 	.word	0x58024400

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	@ 0x30
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b77      	ldr	r3, [pc, #476]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000dc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dcc:	4a75      	ldr	r2, [pc, #468]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dd6:	4b73      	ldr	r3, [pc, #460]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b6f      	ldr	r3, [pc, #444]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000de6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dea:	4a6e      	ldr	r2, [pc, #440]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000df4:	4b6b      	ldr	r3, [pc, #428]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b68      	ldr	r3, [pc, #416]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e08:	4a66      	ldr	r2, [pc, #408]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e12:	4b64      	ldr	r3, [pc, #400]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4b60      	ldr	r3, [pc, #384]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e26:	4a5f      	ldr	r2, [pc, #380]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e30:	4b5c      	ldr	r3, [pc, #368]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3e:	4b59      	ldr	r3, [pc, #356]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e44:	4a57      	ldr	r2, [pc, #348]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e4e:	4b55      	ldr	r3, [pc, #340]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5c:	4b51      	ldr	r3, [pc, #324]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e62:	4a50      	ldr	r2, [pc, #320]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8000fa4 <MX_GPIO_Init+0x1f4>)
 8000e6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_3V3_GPIO_Port, DCMI_3V3_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e80:	4849      	ldr	r0, [pc, #292]	@ (8000fa8 <MX_GPIO_Init+0x1f8>)
 8000e82:	f007 f9cf 	bl	8008224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e8c:	4847      	ldr	r0, [pc, #284]	@ (8000fac <MX_GPIO_Init+0x1fc>)
 8000e8e:	f007 f9c9 	bl	8008224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e98:	4845      	ldr	r0, [pc, #276]	@ (8000fb0 <MX_GPIO_Init+0x200>)
 8000e9a:	f007 f9c3 	bl	8008224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ea4:	4842      	ldr	r0, [pc, #264]	@ (8000fb0 <MX_GPIO_Init+0x200>)
 8000ea6:	f007 f9bd 	bl	8008224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_N_Pin */
  GPIO_InitStruct.Pin = INT_N_Pin;
 8000eaa:	2380      	movs	r3, #128	@ 0x80
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	483d      	ldr	r0, [pc, #244]	@ (8000fb4 <MX_GPIO_Init+0x204>)
 8000ebe:	f006 ffe9 	bl	8007e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT__Pin */
  GPIO_InitStruct.Pin = FLT__Pin;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(FLT__GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4835      	ldr	r0, [pc, #212]	@ (8000fac <MX_GPIO_Init+0x1fc>)
 8000ed6:	f006 ffdd 	bl	8007e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : COMMAND_DONE_Pin */
  GPIO_InitStruct.Pin = COMMAND_DONE_Pin;
 8000eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COMMAND_DONE_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	482e      	ldr	r0, [pc, #184]	@ (8000fa8 <MX_GPIO_Init+0x1f8>)
 8000ef0:	f006 ffd0 	bl	8007e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : nIRQ_Pin */
  GPIO_InitStruct.Pin = nIRQ_Pin;
 8000ef4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000efa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nIRQ_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4827      	ldr	r0, [pc, #156]	@ (8000fa8 <MX_GPIO_Init+0x1f8>)
 8000f0c:	f006 ffc2 	bl	8007e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_3V3_Pin */
  GPIO_InitStruct.Pin = DCMI_3V3_Pin;
 8000f10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DCMI_3V3_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481f      	ldr	r0, [pc, #124]	@ (8000fa8 <MX_GPIO_Init+0x1f8>)
 8000f2a:	f006 ffb3 	bl	8007e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDN_Pin */
  GPIO_InitStruct.Pin = SDN_Pin;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SDN_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4819      	ldr	r0, [pc, #100]	@ (8000fac <MX_GPIO_Init+0x1fc>)
 8000f48:	f006 ffa4 	bl	8007e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_RST_Pin DCMI_PWDN_Pin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin|DCMI_PWDN_Pin;
 8000f4c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <MX_GPIO_Init+0x200>)
 8000f66:	f006 ff95 	bl	8007e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_MCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_MCLK_Pin;
 8000f6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DCMI_MCLK_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <MX_GPIO_Init+0x204>)
 8000f88:	f006 ff84 	bl	8007e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(nIRQ_EXTI_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2028      	movs	r0, #40	@ 0x28
 8000f92:	f003 f84e 	bl	8004032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(nIRQ_EXTI_IRQn);
 8000f96:	2028      	movs	r0, #40	@ 0x28
 8000f98:	f003 f865 	bl	8004066 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	@ 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58021000 	.word	0x58021000
 8000fac:	58020400 	.word	0x58020400
 8000fb0:	58020c00 	.word	0x58020c00
 8000fb4:	58020000 	.word	0x58020000

08000fb8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_10) {
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fc8:	d102      	bne.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x18>
    radio_nirq = 1;
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <HAL_GPIO_EXTI_Callback+0x24>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	240004c6 	.word	0x240004c6

08000fe0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ff2:	f003 f853 	bl	800409c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001002:	231f      	movs	r3, #31
 8001004:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001006:	2387      	movs	r3, #135	@ 0x87
 8001008:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800100a:	2300      	movs	r3, #0
 800100c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800100e:	2300      	movs	r3, #0
 8001010:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001012:	2301      	movs	r3, #1
 8001014:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001016:	2301      	movs	r3, #1
 8001018:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001022:	463b      	mov	r3, r7
 8001024:	4618      	mov	r0, r3
 8001026:	f003 f871 	bl	800410c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800102a:	2004      	movs	r0, #4
 800102c:	f003 f84e 	bl	80040cc <HAL_MPU_Enable>

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <camera_init>:
	status |= HAL_I2C_Master_Receive(p_I2C, CAM_READ, data, 1, 100);
	return status;
}
*/

void camera_init(HAL_StatusTypeDef* status, uint8_t* mode){
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	//uint8_t read_value;



	// Power-up camera
	HAL_GPIO_WritePin(CAM_PWR_PORT, CAM_PWR_PIN, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001054:	48bc      	ldr	r0, [pc, #752]	@ (8001348 <camera_init+0x304>)
 8001056:	f007 f8e5 	bl	8008224 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800105a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800105e:	f001 ffc3 	bl	8002fe8 <HAL_Delay>

	// Enable camera
	HAL_GPIO_WritePin(CAM_PWDN_PORT, CAM_PWDN_PIN, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001068:	48b8      	ldr	r0, [pc, #736]	@ (800134c <camera_init+0x308>)
 800106a:	f007 f8db 	bl	8008224 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800106e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001072:	f001 ffb9 	bl	8002fe8 <HAL_Delay>

	// Reset camera
	HAL_GPIO_WritePin(CAM_RESET_PORT, CAM_RESET_PIN, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800107c:	48b3      	ldr	r0, [pc, #716]	@ (800134c <camera_init+0x308>)
 800107e:	f007 f8d1 	bl	8008224 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001082:	2064      	movs	r0, #100	@ 0x64
 8001084:	f001 ffb0 	bl	8002fe8 <HAL_Delay>
	HAL_GPIO_WritePin(CAM_RESET_PORT, CAM_RESET_PIN, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800108e:	48af      	ldr	r0, [pc, #700]	@ (800134c <camera_init+0x308>)
 8001090:	f007 f8c8 	bl	8008224 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001094:	2064      	movs	r0, #100	@ 0x64
 8001096:	f001 ffa7 	bl	8002fe8 <HAL_Delay>


	// Initialization common for all modes
	uint8_t data = 0x80;
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 800109e:	f107 030f 	add.w	r3, r7, #15
 80010a2:	2212      	movs	r2, #18
 80010a4:	2142      	movs	r1, #66	@ 0x42
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff f920 	bl	80002ec <I2C_write>
	//status = camera_write(CAM_COM7, 0x80);			// Reset all registers
	I2C_read(status, CAM_WRITE, CAM_CLKRC, &data);
 80010ac:	f107 030f 	add.w	r3, r7, #15
 80010b0:	2211      	movs	r2, #17
 80010b2:	2142      	movs	r1, #66	@ 0x42
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff f93b 	bl	8000330 <I2C_read>
	data |= 0b1;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_CLKRC, &data);
 80010c4:	f107 030f 	add.w	r3, r7, #15
 80010c8:	2211      	movs	r2, #17
 80010ca:	2142      	movs	r1, #66	@ 0x42
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f90d 	bl	80002ec <I2C_write>
	//status |= camera_write(CAM_CLKRC, 0x01);		// Set clock pre-scaler /2, since A/C converter operates up to 12 MHz and input CLK is 24 MHz
	I2C_read(status, CAM_WRITE, CAM_DBLV, &data);
 80010d2:	f107 030f 	add.w	r3, r7, #15
 80010d6:	226b      	movs	r2, #107	@ 0x6b
 80010d8:	2142      	movs	r1, #66	@ 0x42
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff f928 	bl	8000330 <I2C_read>
	data &= ~(1<<7 | 1<<6);
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	73fb      	strb	r3, [r7, #15]
	//data = 0x0A;
	I2C_write(status, CAM_WRITE, CAM_DBLV, &data);
 80010ea:	f107 030f 	add.w	r3, r7, #15
 80010ee:	226b      	movs	r2, #107	@ 0x6b
 80010f0:	2142      	movs	r1, #66	@ 0x42
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff f8fa 	bl	80002ec <I2C_write>
	//status |= camera_write(CAM_DBLV, 0x0A);			// Bypass PLL

	// Enable scaling for resolutions smaller than VGA
	if ((*mode != 0x00) && (*mode != 0x01)) {
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d016      	beq.n	800112e <camera_init+0xea>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d012      	beq.n	800112e <camera_init+0xea>
		//status |= camera_write(CAM_COM3, 0x08);
		I2C_read(status, CAM_WRITE, CAM_COM3, &data);
 8001108:	f107 030f 	add.w	r3, r7, #15
 800110c:	220c      	movs	r2, #12
 800110e:	2142      	movs	r1, #66	@ 0x42
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f90d 	bl	8000330 <I2C_read>
		//data = 0x08;
		data |= 1<<3;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	b2db      	uxtb	r3, r3
 800111e:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM3, &data);
 8001120:	f107 030f 	add.w	r3, r7, #15
 8001124:	220c      	movs	r2, #12
 8001126:	2142      	movs	r1, #66	@ 0x42
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff f8df 	bl	80002ec <I2C_write>
	}

	// Settings depending on choice of mode
	switch (*mode) {
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b31      	cmp	r3, #49	@ 0x31
 8001134:	f200 80fa 	bhi.w	800132c <camera_init+0x2e8>
 8001138:	a201      	add	r2, pc, #4	@ (adr r2, 8001140 <camera_init+0xfc>)
 800113a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113e:	bf00      	nop
 8001140:	08001209 	.word	0x08001209
 8001144:	0800121d 	.word	0x0800121d
 8001148:	0800132d 	.word	0x0800132d
 800114c:	0800132d 	.word	0x0800132d
 8001150:	0800132d 	.word	0x0800132d
 8001154:	0800132d 	.word	0x0800132d
 8001158:	0800132d 	.word	0x0800132d
 800115c:	0800132d 	.word	0x0800132d
 8001160:	0800132d 	.word	0x0800132d
 8001164:	0800132d 	.word	0x0800132d
 8001168:	0800132d 	.word	0x0800132d
 800116c:	0800132d 	.word	0x0800132d
 8001170:	0800132d 	.word	0x0800132d
 8001174:	0800132d 	.word	0x0800132d
 8001178:	0800132d 	.word	0x0800132d
 800117c:	0800132d 	.word	0x0800132d
 8001180:	08001243 	.word	0x08001243
 8001184:	08001257 	.word	0x08001257
 8001188:	0800132d 	.word	0x0800132d
 800118c:	0800132d 	.word	0x0800132d
 8001190:	0800132d 	.word	0x0800132d
 8001194:	0800132d 	.word	0x0800132d
 8001198:	0800132d 	.word	0x0800132d
 800119c:	0800132d 	.word	0x0800132d
 80011a0:	0800132d 	.word	0x0800132d
 80011a4:	0800132d 	.word	0x0800132d
 80011a8:	0800132d 	.word	0x0800132d
 80011ac:	0800132d 	.word	0x0800132d
 80011b0:	0800132d 	.word	0x0800132d
 80011b4:	0800132d 	.word	0x0800132d
 80011b8:	0800132d 	.word	0x0800132d
 80011bc:	0800132d 	.word	0x0800132d
 80011c0:	0800127d 	.word	0x0800127d
 80011c4:	08001291 	.word	0x08001291
 80011c8:	0800132d 	.word	0x0800132d
 80011cc:	0800132d 	.word	0x0800132d
 80011d0:	0800132d 	.word	0x0800132d
 80011d4:	0800132d 	.word	0x0800132d
 80011d8:	0800132d 	.word	0x0800132d
 80011dc:	0800132d 	.word	0x0800132d
 80011e0:	0800132d 	.word	0x0800132d
 80011e4:	0800132d 	.word	0x0800132d
 80011e8:	0800132d 	.word	0x0800132d
 80011ec:	0800132d 	.word	0x0800132d
 80011f0:	0800132d 	.word	0x0800132d
 80011f4:	0800132d 	.word	0x0800132d
 80011f8:	0800132d 	.word	0x0800132d
 80011fc:	0800132d 	.word	0x0800132d
 8001200:	080012b7 	.word	0x080012b7
 8001204:	080012cb 	.word	0x080012cb
	// VGA - YUV
	case 0x00: {
		//status |= camera_write(CAM_COM7, 0x00);		// Set output format
		data = 0x00;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 800120c:	f107 030f 	add.w	r3, r7, #15
 8001210:	2212      	movs	r2, #18
 8001212:	2142      	movs	r1, #66	@ 0x42
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff f869 	bl	80002ec <I2C_write>
		break;
 800121a:	e087      	b.n	800132c <camera_init+0x2e8>
	}
	// VGA - RGB565
	case 0x01: {
		//status |= camera_write(CAM_COM7, 0x04);		// Set output format
		data = 0x04;
 800121c:	2304      	movs	r3, #4
 800121e:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001220:	f107 030f 	add.w	r3, r7, #15
 8001224:	2212      	movs	r2, #18
 8001226:	2142      	movs	r1, #66	@ 0x42
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff f85f 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 800122e:	23d0      	movs	r3, #208	@ 0xd0
 8001230:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 8001232:	f107 030f 	add.w	r3, r7, #15
 8001236:	2240      	movs	r2, #64	@ 0x40
 8001238:	2142      	movs	r1, #66	@ 0x42
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f856 	bl	80002ec <I2C_write>
		break;
 8001240:	e074      	b.n	800132c <camera_init+0x2e8>
	}
	// CIF - YUV
	case 0x10: {
		//status |= camera_write(CAM_COM7, 0x20);		// Set output format
		data = 0x20;
 8001242:	2320      	movs	r3, #32
 8001244:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001246:	f107 030f 	add.w	r3, r7, #15
 800124a:	2212      	movs	r2, #18
 800124c:	2142      	movs	r1, #66	@ 0x42
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff f84c 	bl	80002ec <I2C_write>
		break;
 8001254:	e06a      	b.n	800132c <camera_init+0x2e8>
	}
	// CIF - RGB565
	case 0x11: {
		//status |= camera_write(CAM_COM7, 0x24);		// Set output format
		data = 0x24;
 8001256:	2324      	movs	r3, #36	@ 0x24
 8001258:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 800125a:	f107 030f 	add.w	r3, r7, #15
 800125e:	2212      	movs	r2, #18
 8001260:	2142      	movs	r1, #66	@ 0x42
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff f842 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 8001268:	23d0      	movs	r3, #208	@ 0xd0
 800126a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 800126c:	f107 030f 	add.w	r3, r7, #15
 8001270:	2240      	movs	r2, #64	@ 0x40
 8001272:	2142      	movs	r1, #66	@ 0x42
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff f839 	bl	80002ec <I2C_write>
		break;
 800127a:	e057      	b.n	800132c <camera_init+0x2e8>
	}
	// QVGA - YUV
	case 0x20: {
		//status |= camera_write(CAM_COM7, 0x10);		// Set output format
		data = 0x10;
 800127c:	2310      	movs	r3, #16
 800127e:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001280:	f107 030f 	add.w	r3, r7, #15
 8001284:	2212      	movs	r2, #18
 8001286:	2142      	movs	r1, #66	@ 0x42
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff f82f 	bl	80002ec <I2C_write>
		break;
 800128e:	e04d      	b.n	800132c <camera_init+0x2e8>
	}
	// QVGA - RGB565
	case 0x21: {
		//status |= camera_write(CAM_COM7, 0x14);		// Set output format
		data = 0x14;
 8001290:	2314      	movs	r3, #20
 8001292:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001294:	f107 030f 	add.w	r3, r7, #15
 8001298:	2212      	movs	r2, #18
 800129a:	2142      	movs	r1, #66	@ 0x42
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff f825 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 80012a2:	23d0      	movs	r3, #208	@ 0xd0
 80012a4:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 80012a6:	f107 030f 	add.w	r3, r7, #15
 80012aa:	2240      	movs	r2, #64	@ 0x40
 80012ac:	2142      	movs	r1, #66	@ 0x42
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f81c 	bl	80002ec <I2C_write>
		break;
 80012b4:	e03a      	b.n	800132c <camera_init+0x2e8>
	}
	// QCIF - YUV
	case 0x30: {
		//status |= camera_write(CAM_COM7, 0x08);		// Set output format
		data = 0x08;
 80012b6:	2308      	movs	r3, #8
 80012b8:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	2212      	movs	r2, #18
 80012c0:	2142      	movs	r1, #66	@ 0x42
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff f812 	bl	80002ec <I2C_write>
		break;
 80012c8:	e030      	b.n	800132c <camera_init+0x2e8>
	}
	// QCIF - RGB565
	case 0x31: {
		//status |= camera_write(CAM_COM7, 0x0C);		// Set output format
		I2C_read(status, CAM_WRITE, CAM_COM7, &data);
 80012ca:	f107 030f 	add.w	r3, r7, #15
 80012ce:	2212      	movs	r2, #18
 80012d0:	2142      	movs	r1, #66	@ 0x42
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff f82c 	bl	8000330 <I2C_read>
		//data = 0x0C;
		data |= (1 << 2);
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	73fb      	strb	r3, [r7, #15]
		data &= ~(1);
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	73fb      	strb	r3, [r7, #15]
		//data = 0x0C;
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80012ec:	f107 030f 	add.w	r3, r7, #15
 80012f0:	2212      	movs	r2, #18
 80012f2:	2142      	movs	r1, #66	@ 0x42
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7fe fff9 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		//data = 0xD0;
		I2C_read(status, CAM_WRITE, CAM_COM15, &data);
 80012fa:	f107 030f 	add.w	r3, r7, #15
 80012fe:	2240      	movs	r2, #64	@ 0x40
 8001300:	2142      	movs	r1, #66	@ 0x42
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff f814 	bl	8000330 <I2C_read>
		data &= ~(1<<5);
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	f023 0320 	bic.w	r3, r3, #32
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73fb      	strb	r3, [r7, #15]
		data |= (1<<4);
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	b2db      	uxtb	r3, r3
 800131a:	73fb      	strb	r3, [r7, #15]
		//data = 0xD0;
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 800131c:	f107 030f 	add.w	r3, r7, #15
 8001320:	2240      	movs	r2, #64	@ 0x40
 8001322:	2142      	movs	r1, #66	@ 0x42
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7fe ffe1 	bl	80002ec <I2C_write>
		break;
 800132a:	bf00      	nop
	}


	//status |= camera_write(CAM_COM8, 0x8F);		// Automatic exposure & gain control
	//status |= camera_write(CAM_RSVD, 0x84);			// Colour correction
	data = 0x84;
 800132c:	2384      	movs	r3, #132	@ 0x84
 800132e:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_RSVD, &data);
 8001330:	f107 030f 	add.w	r3, r7, #15
 8001334:	22b0      	movs	r2, #176	@ 0xb0
 8001336:	2142      	movs	r1, #66	@ 0x42
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7fe ffd7 	bl	80002ec <I2C_write>

	//return status;
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	58021000 	.word	0x58021000
 800134c:	58020c00 	.word	0x58020c00

08001350 <camera_capture_photo>:


void camera_capture_photo(HAL_StatusTypeDef* status, uint8_t* destination_adress, uint32_t* size) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
	//HAL_StatusTypeDef status;

	// Begin transmission of data from camera to memory
	*status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, destination_adress, *size);
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2102      	movs	r1, #2
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <camera_capture_photo+0x48>)
 8001366:	f002 ff8b 	bl	8004280 <HAL_DCMI_Start_DMA>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5000);
 8001372:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001376:	f001 fe37 	bl	8002fe8 <HAL_Delay>

	// End transmission
	*status |= HAL_DCMI_Stop(&hdcmi);
 800137a:	4807      	ldr	r0, [pc, #28]	@ (8001398 <camera_capture_photo+0x48>)
 800137c:	f003 f842 	bl	8004404 <HAL_DCMI_Stop>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4313      	orrs	r3, r2
 800138a:	b2da      	uxtb	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	701a      	strb	r2, [r3, #0]

	//return status;
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	24000230 	.word	0x24000230

0800139c <radio_power_up>:
#include "radio.h"

void radio_power_up(HAL_StatusTypeDef *status) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013aa:	4890      	ldr	r0, [pc, #576]	@ (80015ec <radio_power_up+0x250>)
 80013ac:	f006 ff3a 	bl	8008224 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013b0:	2064      	movs	r0, #100	@ 0x64
 80013b2:	f001 fe19 	bl	8002fe8 <HAL_Delay>
	uint8_t data[] = {RF_POWER_UP};
 80013b6:	4a8e      	ldr	r2, [pc, #568]	@ (80015f0 <radio_power_up+0x254>)
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c0:	6018      	str	r0, [r3, #0]
 80013c2:	3304      	adds	r3, #4
 80013c4:	8019      	strh	r1, [r3, #0]
 80013c6:	3302      	adds	r3, #2
 80013c8:	0c0a      	lsrs	r2, r1, #16
 80013ca:	701a      	strb	r2, [r3, #0]
	//uint8_t data[9] = {0x02, 0x01, 0x01, 0x01, 0xC9, 0xC3, 0x80, 0x44, 0xFF};
	uint8_t size = sizeof(data);
 80013cc:	2307      	movs	r3, #7
 80013ce:	777b      	strb	r3, [r7, #29]
	uint16_t attempt = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	83fb      	strh	r3, [r7, #30]
	//uint8_t NOP = 0x00;
	uint8_t *pData = data;
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	61bb      	str	r3, [r7, #24]
	SPI_HandleTypeDef *hspi = &hspi4;
 80013da:	4b86      	ldr	r3, [pc, #536]	@ (80015f4 <radio_power_up+0x258>)
 80013dc:	617b      	str	r3, [r7, #20]

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3320      	adds	r3, #32
 80013e4:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

	// Optimization of HAL_SPI_Transmit

	if (hspi->State != HAL_SPI_STATE_READY) {
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d003      	beq.n	80013fa <radio_power_up+0x5e>
		*status = HAL_BUSY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2202      	movs	r2, #2
 80013f6:	701a      	strb	r2, [r3, #0]
		return;
 80013f8:	e0f4      	b.n	80015e4 <radio_power_up+0x248>
	}
	/* Lock the process */
	__HAL_LOCK(&hspi4);
 80013fa:	4b7e      	ldr	r3, [pc, #504]	@ (80015f4 <radio_power_up+0x258>)
 80013fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001400:	2b01      	cmp	r3, #1
 8001402:	f000 80ef 	beq.w	80015e4 <radio_power_up+0x248>
 8001406:	4b7b      	ldr	r3, [pc, #492]	@ (80015f4 <radio_power_up+0x258>)
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2203      	movs	r2, #3
 8001412:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	hspi->pTxBuffPtr = (const uint8_t*) pData;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi->TxXferSize = size; // One byte
 8001424:	7f7b      	ldrb	r3, [r7, #29]
 8001426:	b29a      	uxth	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	hspi->TxXferCount = size;
 800142e:	7f7b      	ldrb	r3, [r7, #29]
 8001430:	b29a      	uxth	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

	/*Init field not used in handle to zero */
	hspi->pRxBuffPtr = NULL;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2200      	movs	r2, #0
 800143c:	665a      	str	r2, [r3, #100]	@ 0x64
	hspi->RxXferSize = (uint16_t) 0UL;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2200      	movs	r2, #0
 8001442:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	hspi->RxXferCount = (uint16_t) 0UL;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2200      	movs	r2, #0
 800144a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
	hspi->TxISR = NULL;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2200      	movs	r2, #0
 8001452:	675a      	str	r2, [r3, #116]	@ 0x74
	hspi->RxISR = NULL;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2200      	movs	r2, #0
 8001458:	671a      	str	r2, [r3, #112]	@ 0x70

	// Communication direction
	SPI_2LINES_TX(hspi);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800146c:	60da      	str	r2, [r3, #12]

	/* Set the number of data at current transfer */
	MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, size);
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4b60      	ldr	r3, [pc, #384]	@ (80015f8 <radio_power_up+0x25c>)
 8001476:	4013      	ands	r3, r2
 8001478:	7f79      	ldrb	r1, [r7, #29]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	430b      	orrs	r3, r1
 8001480:	6053      	str	r3, [r2, #4]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001488:	4858      	ldr	r0, [pc, #352]	@ (80015ec <radio_power_up+0x250>)
 800148a:	f006 fecb 	bl	8008224 <HAL_GPIO_WritePin>

	// Wait for CTS to go high
	if (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800148e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001492:	485a      	ldr	r0, [pc, #360]	@ (80015fc <radio_power_up+0x260>)
 8001494:	f006 feae 	bl	80081f4 <HAL_GPIO_ReadPin>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d11f      	bne.n	80014de <radio_power_up+0x142>
		// Wait until Clear To Send (CTS) signal appears
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800149e:	e016      	b.n	80014ce <radio_power_up+0x132>
			attempt++;
 80014a0:	8bfb      	ldrh	r3, [r7, #30]
 80014a2:	3301      	adds	r3, #1
 80014a4:	83fb      	strh	r3, [r7, #30]
			if (attempt > 10000) {
 80014a6:	8bfb      	ldrh	r3, [r7, #30]
 80014a8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d90e      	bls.n	80014ce <radio_power_up+0x132>
				*status = 0x3; // Timeout
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	701a      	strb	r2, [r3, #0]
				// End process
				close_SPI(hspi);
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7fe ff6c 	bl	8000394 <close_SPI>
				hspi->State = HAL_SPI_STATE_READY;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

				/* Unlock the process */
				__HAL_UNLOCK(hspi);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				return;
 80014cc:	e08a      	b.n	80015e4 <radio_power_up+0x248>
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80014ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d2:	484a      	ldr	r0, [pc, #296]	@ (80015fc <radio_power_up+0x260>)
 80014d4:	f006 fe8e 	bl	80081f4 <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0e0      	beq.n	80014a0 <radio_power_up+0x104>
			}
		}
	}
	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(hspi);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014fc:	601a      	str	r2, [r3, #0]

	// Loop until the byte is sent
	// While this seems unnecessary, it covers 2 requirements - wait until SPI is ready to send and then send only one byte
	while (hspi->TxXferCount > 0UL) {
 80014fe:	e058      	b.n	80015b2 <radio_power_up+0x216>
		/* Wait until TXP flag is set to send data */
		if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) {
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b02      	cmp	r3, #2
 800150c:	d151      	bne.n	80015b2 <radio_power_up+0x216>
			if ((hspi->TxXferCount > 3UL)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001514:	b29b      	uxth	r3, r3
 8001516:	2b03      	cmp	r3, #3
 8001518:	d918      	bls.n	800154c <radio_power_up+0x1b0>
					&& (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA)) {
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800151e:	2b40      	cmp	r3, #64	@ 0x40
 8001520:	d914      	bls.n	800154c <radio_power_up+0x1b0>
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
						*((const uint32_t*) hspi->pTxBuffPtr);
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	681b      	ldr	r3, [r3, #0]
						*((const uint32_t*) hspi->pTxBuffPtr);
 800152a:	6812      	ldr	r2, [r2, #0]
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
 800152c:	621a      	str	r2, [r3, #32]
				hspi->pTxBuffPtr += sizeof(uint32_t);
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001532:	1d1a      	adds	r2, r3, #4
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount -= (uint16_t) 4UL;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800153e:	b29b      	uxth	r3, r3
 8001540:	3b04      	subs	r3, #4
 8001542:	b29a      	uxth	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800154a:	e032      	b.n	80015b2 <radio_power_up+0x216>
			} else if ((hspi->TxXferCount > 1UL)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001552:	b29b      	uxth	r3, r3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d917      	bls.n	8001588 <radio_power_up+0x1ec>
					&& (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA)) {
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800155c:	2b00      	cmp	r3, #0
 800155e:	d013      	beq.n	8001588 <radio_power_up+0x1ec>
#if defined (__GNUC__)
				*ptxdr_16bits = *((const uint16_t*) hspi->pTxBuffPtr);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001564:	881a      	ldrh	r2, [r3, #0]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	801a      	strh	r2, [r3, #0]
#else
		          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
		#endif /* __GNUC__ */
				hspi->pTxBuffPtr += sizeof(uint16_t);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156e:	1c9a      	adds	r2, r3, #2
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount -= (uint16_t) 2UL;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800157a:	b29b      	uxth	r3, r3
 800157c:	3b02      	subs	r3, #2
 800157e:	b29a      	uxth	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8001586:	e014      	b.n	80015b2 <radio_power_up+0x216>
			} else {
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
						*((const uint8_t*) hspi->pTxBuffPtr);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3320      	adds	r3, #32
						*((const uint8_t*) hspi->pTxBuffPtr);
 8001592:	7812      	ldrb	r2, [r2, #0]
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
 8001594:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr += sizeof(uint8_t);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount--;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	while (hspi->TxXferCount > 0UL) {
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1a0      	bne.n	8001500 <radio_power_up+0x164>
		 }
		 */
	}

	// Wait until transfer is completed
	while (!(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_EOT))) {
 80015be:	bf00      	nop
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d1f8      	bne.n	80015c0 <radio_power_up+0x224>
	}

	// End process
	close_SPI(hspi);
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7fe fee0 	bl	8000394 <close_SPI>
	hspi->State = HAL_SPI_STATE_READY;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	/* Unlock the process */
	__HAL_UNLOCK(hspi);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	//*status = HAL_SPI_Transmit(&hspi4, &NOP, 1, 10);
	//*status = HAL_SPI_Transmit(&hspi4, data, size, 50);
	//SPI_write(status, data, &size);
}
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	58020400 	.word	0x58020400
 80015f0:	08013314 	.word	0x08013314
 80015f4:	2400034c 	.word	0x2400034c
 80015f8:	ffff0000 	.word	0xffff0000
 80015fc:	58021000 	.word	0x58021000

08001600 <radio_pins>:

void radio_pins(HAL_StatusTypeDef* status) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GPIO_PIN_CFG};
 8001608:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <radio_pins+0x34>)
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001612:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8001616:	2308      	movs	r3, #8
 8001618:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800161a:	f107 020f 	add.w	r2, r7, #15
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7fe ff97 	bl	8000558 <SPI_write>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	0801331c 	.word	0x0801331c

08001638 <radio_TCXO>:

void radio_TCXO(HAL_StatusTypeDef* status) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_XO_TUNE_2};
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <radio_TCXO+0x2c>)
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	2300      	movs	r3, #0
 8001646:	82bb      	strh	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001648:	2306      	movs	r3, #6
 800164a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800164c:	f107 020f 	add.w	r2, r7, #15
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7fe ff7e 	bl	8000558 <SPI_write>
}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	00020011 	.word	0x00020011

08001668 <radio_global>:

void radio_global(HAL_StatusTypeDef* status) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_CONFIG_1};
 8001670:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <radio_global+0x34>)
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800167a:	6018      	str	r0, [r3, #0]
 800167c:	3304      	adds	r3, #4
 800167e:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001680:	2305      	movs	r3, #5
 8001682:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001684:	f107 020f 	add.w	r2, r7, #15
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7fe ff62 	bl	8000558 <SPI_write>
}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	08013324 	.word	0x08013324

080016a0 <radio_interrupts>:

void radio_interrupts(HAL_StatusTypeDef* status) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_INT_CTL_ENABLE_2};
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <radio_interrupts+0x34>)
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b2:	6018      	str	r0, [r3, #0]
 80016b4:	3304      	adds	r3, #4
 80016b6:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80016b8:	2306      	movs	r3, #6
 80016ba:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80016bc:	f107 020f 	add.w	r2, r7, #15
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7fe ff46 	bl	8000558 <SPI_write>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	0801332c 	.word	0x0801332c

080016d8 <radio_fast_registers>:

void radio_fast_registers(HAL_StatusTypeDef* status) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FRR_CTL_A_MODE_4};
 80016e0:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <radio_fast_registers+0x34>)
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ea:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 80016ee:	2308      	movs	r3, #8
 80016f0:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80016f2:	f107 020f 	add.w	r2, r7, #15
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	4619      	mov	r1, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7fe ff2b 	bl	8000558 <SPI_write>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	08013334 	.word	0x08013334

08001710 <radio_Tx>:

void radio_Tx(HAL_StatusTypeDef* status) {
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b089      	sub	sp, #36	@ 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PREAMBLE_TX_LENGTH_9};
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <radio_Tx+0x30>)
 800171a:	f107 0410 	add.w	r4, r7, #16
 800171e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001720:	c407      	stmia	r4!, {r0, r1, r2}
 8001722:	7023      	strb	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001724:	230d      	movs	r3, #13
 8001726:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001728:	f107 020f 	add.w	r2, r7, #15
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe ff10 	bl	8000558 <SPI_write>
}
 8001738:	bf00      	nop
 800173a:	3724      	adds	r7, #36	@ 0x24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}
 8001740:	0801333c 	.word	0x0801333c

08001744 <radio_sync>:

void radio_sync(HAL_StatusTypeDef* status) {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNC_CONFIG_10};
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <radio_sync+0x30>)
 800174e:	f107 0410 	add.w	r4, r7, #16
 8001752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001754:	c407      	stmia	r4!, {r0, r1, r2}
 8001756:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001758:	230e      	movs	r3, #14
 800175a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800175c:	f107 020f 	add.w	r2, r7, #15
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7fe fef6 	bl	8000558 <SPI_write>
}
 800176c:	bf00      	nop
 800176e:	3724      	adds	r7, #36	@ 0x24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	0801334c 	.word	0x0801334c

08001778 <radio_packet_CRC>:

void radio_packet_CRC(HAL_StatusTypeDef* status) {
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_CONFIG_12};
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <radio_packet_CRC+0x30>)
 8001782:	f107 0410 	add.w	r4, r7, #16
 8001786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 800178c:	2310      	movs	r3, #16
 800178e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001790:	f107 020f 	add.w	r2, r7, #15
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7fe fedc 	bl	8000558 <SPI_write>
}
 80017a0:	bf00      	nop
 80017a2:	3724      	adds	r7, #36	@ 0x24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}
 80017a8:	0801335c 	.word	0x0801335c

080017ac <radio_Rx_thr>:

void radio_Rx_thr(HAL_StatusTypeDef* status) {
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_THRESHOLD_12};
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <radio_Rx_thr+0x30>)
 80017b6:	f107 0410 	add.w	r4, r7, #16
 80017ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80017c0:	2310      	movs	r3, #16
 80017c2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80017c4:	f107 020f 	add.w	r2, r7, #15
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7fe fec2 	bl	8000558 <SPI_write>
}
 80017d4:	bf00      	nop
 80017d6:	3724      	adds	r7, #36	@ 0x24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd90      	pop	{r4, r7, pc}
 80017dc:	0801336c 	.word	0x0801336c

080017e0 <radio_Rx_CRC_1>:

void radio_Rx_CRC_1(HAL_StatusTypeDef* status) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_FIELD_3_CRC_CONFIG_12};
 80017e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <radio_Rx_CRC_1+0x34>)
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 80017f8:	2310      	movs	r3, #16
 80017fa:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80017fc:	f107 020f 	add.w	r2, r7, #15
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7fe fea6 	bl	8000558 <SPI_write>
}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	180c1211 	.word	0x180c1211

08001818 <radio_Rx_CRC_2>:

void radio_Rx_CRC_2(HAL_StatusTypeDef* status) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_1_CRC_CONFIG_12};
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <radio_Rx_CRC_2+0x34>)
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 8001830:	2310      	movs	r3, #16
 8001832:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001834:	f107 020f 	add.w	r2, r7, #15
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7fe fe8a 	bl	8000558 <SPI_write>
}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	240c1211 	.word	0x240c1211

08001850 <radio_Rx_CRC_3>:

void radio_Rx_CRC_3(HAL_StatusTypeDef* status) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_4_CRC_CONFIG_5};
 8001858:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <radio_Rx_CRC_3+0x34>)
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	711a      	strb	r2, [r3, #4]
	uint8_t size = sizeof(data);
 8001866:	2309      	movs	r3, #9
 8001868:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 800186a:	f107 020b 	add.w	r2, r7, #11
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7fe fe6f 	bl	8000558 <SPI_write>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	30051211 	.word	0x30051211

08001888 <radio_Rx_CRC_seed>:

void radio_Rx_CRC_seed(HAL_StatusTypeDef* status) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_SEED_31_24_4};
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <radio_Rx_CRC_seed+0x2c>)
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001898:	2308      	movs	r3, #8
 800189a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800189c:	f107 020f 	add.w	r2, r7, #15
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe fe56 	bl	8000558 <SPI_write>
}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	36041211 	.word	0x36041211

080018b8 <radio_mod>:

void radio_mod(HAL_StatusTypeDef* status) {
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_MOD_TYPE_12};
 80018c0:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <radio_mod+0x30>)
 80018c2:	f107 0410 	add.w	r4, r7, #16
 80018c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80018cc:	2310      	movs	r3, #16
 80018ce:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80018d0:	f107 020f 	add.w	r2, r7, #15
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe fe3c 	bl	8000558 <SPI_write>
}
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	@ 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	0801337c 	.word	0x0801337c

080018ec <radio_freq_dev>:

void radio_freq_dev(HAL_StatusTypeDef* status) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_FREQ_DEV_0_1};
 80018f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <radio_freq_dev+0x34>)
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018fe:	6018      	str	r0, [r3, #0]
 8001900:	3304      	adds	r3, #4
 8001902:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001904:	2305      	movs	r3, #5
 8001906:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001908:	f107 020f 	add.w	r2, r7, #15
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4619      	mov	r1, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7fe fe20 	bl	8000558 <SPI_write>
}
 8001918:	bf00      	nop
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	0801338c 	.word	0x0801338c

08001924 <radio_Tx_ramp>:

void radio_Tx_ramp(HAL_StatusTypeDef* status) {
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_TX_RAMP_DELAY_12};
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <radio_Tx_ramp+0x30>)
 800192e:	f107 0410 	add.w	r4, r7, #16
 8001932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001938:	2310      	movs	r3, #16
 800193a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800193c:	f107 020f 	add.w	r2, r7, #15
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe fe06 	bl	8000558 <SPI_write>
}
 800194c:	bf00      	nop
 800194e:	3724      	adds	r7, #36	@ 0x24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	08013394 	.word	0x08013394

08001958 <radio_NCO_offset>:

void radio_NCO_offset(HAL_StatusTypeDef* status) {
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_BCR_NCO_OFFSET_2_12};
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <radio_NCO_offset+0x30>)
 8001962:	f107 0410 	add.w	r4, r7, #16
 8001966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 800196c:	2310      	movs	r3, #16
 800196e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001970:	f107 020f 	add.w	r2, r7, #15
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	4619      	mov	r1, r3
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7fe fdec 	bl	8000558 <SPI_write>
}
 8001980:	bf00      	nop
 8001982:	3724      	adds	r7, #36	@ 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}
 8001988:	080133a4 	.word	0x080133a4

0800198c <radio_AFC>:

void radio_AFC(HAL_StatusTypeDef* status) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AFC_LIMITER_1_3};
 8001994:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <radio_AFC+0x3c>)
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800199e:	6018      	str	r0, [r3, #0]
 80019a0:	3304      	adds	r3, #4
 80019a2:	8019      	strh	r1, [r3, #0]
 80019a4:	3302      	adds	r3, #2
 80019a6:	0c0a      	lsrs	r2, r1, #16
 80019a8:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 80019aa:	2307      	movs	r3, #7
 80019ac:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80019ae:	f107 020f 	add.w	r2, r7, #15
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4619      	mov	r1, r3
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7fe fdcd 	bl	8000558 <SPI_write>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	080133b4 	.word	0x080133b4

080019cc <radio_AGC_1>:

void radio_AGC_1(HAL_StatusTypeDef* status) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_CONTROL_1};
 80019d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <radio_AGC_1+0x34>)
 80019d6:	f107 0310 	add.w	r3, r7, #16
 80019da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019de:	6018      	str	r0, [r3, #0]
 80019e0:	3304      	adds	r3, #4
 80019e2:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80019e4:	2305      	movs	r3, #5
 80019e6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80019e8:	f107 020f 	add.w	r2, r7, #15
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7fe fdb0 	bl	8000558 <SPI_write>
}
 80019f8:	bf00      	nop
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	080133bc 	.word	0x080133bc

08001a04 <radio_AGC_2>:

void radio_AGC_2(HAL_StatusTypeDef* status) {
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b089      	sub	sp, #36	@ 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_WINDOW_SIZE_12};
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <radio_AGC_2+0x30>)
 8001a0e:	f107 0410 	add.w	r4, r7, #16
 8001a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001a18:	2310      	movs	r3, #16
 8001a1a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a1c:	f107 020f 	add.w	r2, r7, #15
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe fd96 	bl	8000558 <SPI_write>
}
 8001a2c:	bf00      	nop
 8001a2e:	3724      	adds	r7, #36	@ 0x24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	080133c4 	.word	0x080133c4

08001a38 <radio_RAW>:

void radio_RAW(HAL_StatusTypeDef* status) {
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b089      	sub	sp, #36	@ 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_CONTROL_10};
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <radio_RAW+0x30>)
 8001a42:	f107 0410 	add.w	r4, r7, #16
 8001a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a48:	c407      	stmia	r4!, {r0, r1, r2}
 8001a4a:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001a4c:	230e      	movs	r3, #14
 8001a4e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a50:	f107 020f 	add.w	r2, r7, #15
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe fd7c 	bl	8000558 <SPI_write>
}
 8001a60:	bf00      	nop
 8001a62:	3724      	adds	r7, #36	@ 0x24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	080133d4 	.word	0x080133d4

08001a6c <radio_search_period>:

void radio_search_period(HAL_StatusTypeDef* status) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_SEARCH2_2};
 8001a74:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <radio_search_period+0x34>)
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a7e:	6018      	str	r0, [r3, #0]
 8001a80:	3304      	adds	r3, #4
 8001a82:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001a84:	2306      	movs	r3, #6
 8001a86:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a88:	f107 020f 	add.w	r2, r7, #15
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4619      	mov	r1, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7fe fd60 	bl	8000558 <SPI_write>
}
 8001a98:	bf00      	nop
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	080133e4 	.word	0x080133e4

08001aa4 <radio_GFSK_thr>:

void radio_GFSK_thr(HAL_StatusTypeDef* status) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_SPIKE_DET_2};
 8001aac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <radio_GFSK_thr+0x34>)
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab6:	6018      	str	r0, [r3, #0]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001abc:	2306      	movs	r3, #6
 8001abe:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001ac0:	f107 020f 	add.w	r2, r7, #15
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7fe fd44 	bl	8000558 <SPI_write>
}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	080133ec 	.word	0x080133ec

08001adc <radio_RSSI_thr>:

void radio_RSSI_thr(HAL_StatusTypeDef* status) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RSSI_MUTE_1};
 8001ae4:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <radio_RSSI_thr+0x2c>)
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	753b      	strb	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001aec:	2305      	movs	r3, #5
 8001aee:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001af0:	f107 020f 	add.w	r2, r7, #15
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7fe fd2c 	bl	8000558 <SPI_write>
}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	57012011 	.word	0x57012011

08001b0c <radio_RSSI_att>:

void radio_RSSI_att(HAL_StatusTypeDef* status) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_DSA_CTRL1_5};
 8001b14:	4a09      	ldr	r2, [pc, #36]	@ (8001b3c <radio_RSSI_att+0x30>)
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b1c:	c303      	stmia	r3!, {r0, r1}
 8001b1e:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001b20:	2309      	movs	r3, #9
 8001b22:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001b24:	f107 020b 	add.w	r2, r7, #11
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fd12 	bl	8000558 <SPI_write>
}
 8001b34:	bf00      	nop
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	080133f4 	.word	0x080133f4

08001b40 <radio_Rx_filter_1>:

void radio_Rx_filter_1(HAL_StatusTypeDef* status) {
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b089      	sub	sp, #36	@ 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12};
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <radio_Rx_filter_1+0x30>)
 8001b4a:	f107 0410 	add.w	r4, r7, #16
 8001b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001b54:	2310      	movs	r3, #16
 8001b56:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b58:	f107 020f 	add.w	r2, r7, #15
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe fcf8 	bl	8000558 <SPI_write>
}
 8001b68:	bf00      	nop
 8001b6a:	3724      	adds	r7, #36	@ 0x24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}
 8001b70:	08013400 	.word	0x08013400

08001b74 <radio_Rx_filter_2>:

void radio_Rx_filter_2(HAL_StatusTypeDef* status) {
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12};
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <radio_Rx_filter_2+0x30>)
 8001b7e:	f107 0410 	add.w	r4, r7, #16
 8001b82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001b88:	2310      	movs	r3, #16
 8001b8a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b8c:	f107 020f 	add.w	r2, r7, #15
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7fe fcde 	bl	8000558 <SPI_write>
}
 8001b9c:	bf00      	nop
 8001b9e:	3724      	adds	r7, #36	@ 0x24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	08013410 	.word	0x08013410

08001ba8 <radio_Rx_filter_3>:

void radio_Rx_filter_3(HAL_StatusTypeDef* status) {
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b089      	sub	sp, #36	@ 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12};
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <radio_Rx_filter_3+0x30>)
 8001bb2:	f107 0410 	add.w	r4, r7, #16
 8001bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001bc0:	f107 020f 	add.w	r2, r7, #15
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fcc4 	bl	8000558 <SPI_write>
}
 8001bd0:	bf00      	nop
 8001bd2:	3724      	adds	r7, #36	@ 0x24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	08013420 	.word	0x08013420

08001bdc <radio_PA_1>:

void radio_PA_1(HAL_StatusTypeDef* status) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PA_MODE_4};
 8001be4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <radio_PA_1+0x34>)
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bee:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001bf6:	f107 020f 	add.w	r2, r7, #15
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7fe fca9 	bl	8000558 <SPI_write>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	08013430 	.word	0x08013430

08001c14 <radio_PA_2>:

void radio_PA_2(HAL_StatusTypeDef* status) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNTH_PFDCP_CPFF_7};
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c4c <radio_PA_2+0x38>)
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c24:	c303      	stmia	r3!, {r0, r1}
 8001c26:	801a      	strh	r2, [r3, #0]
 8001c28:	3302      	adds	r3, #2
 8001c2a:	0c12      	lsrs	r2, r2, #16
 8001c2c:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001c2e:	230b      	movs	r3, #11
 8001c30:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001c32:	f107 020b 	add.w	r2, r7, #11
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7fe fc8b 	bl	8000558 <SPI_write>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	08013438 	.word	0x08013438

08001c50 <radio_masks>:

void radio_masks(HAL_StatusTypeDef* status) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MATCH_VALUE_1_12};
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <radio_masks+0x34>)
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 8001c68:	2310      	movs	r3, #16
 8001c6a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001c6c:	f107 020f 	add.w	r2, r7, #15
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7fe fc6e 	bl	8000558 <SPI_write>
}
 8001c7c:	bf00      	nop
 8001c7e:	3720      	adds	r7, #32
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	000c3011 	.word	0x000c3011

08001c88 <radio_PLL>:

void radio_PLL(HAL_StatusTypeDef* status) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FREQ_CONTROL_INTE_8};
 8001c90:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <radio_PLL+0x30>)
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t size = sizeof(data);
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001ca0:	f107 020b 	add.w	r2, r7, #11
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fc54 	bl	8000558 <SPI_write>
}
 8001cb0:	bf00      	nop
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	08013444 	.word	0x08013444

08001cbc <radio_mode_Rx>:

// Modes
void radio_mode_Rx(HAL_StatusTypeDef* status) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	// Enable Rx and then enter ready mode
	uint8_t data[] = {0x32, 0, 0, 0, 60, 0, 8, 8, 8};
 8001cc4:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <radio_mode_Rx+0x30>)
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ccc:	c303      	stmia	r3!, {r0, r1}
 8001cce:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001cd0:	2309      	movs	r3, #9
 8001cd2:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001cd4:	f107 020b 	add.w	r2, r7, #11
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe fc3a 	bl	8000558 <SPI_write>
}
 8001ce4:	bf00      	nop
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	08013450 	.word	0x08013450

08001cf0 <radio_write_FIFO>:

void radio_write_FIFO(HAL_StatusTypeDef* status, uint8_t* data) {
 8001cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cf4:	b087      	sub	sp, #28
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
 8001cfc:	466b      	mov	r3, sp
 8001cfe:	461e      	mov	r6, r3
	uint8_t size = 61;
 8001d00:	233d      	movs	r3, #61	@ 0x3d
 8001d02:	72fb      	strb	r3, [r7, #11]
	uint8_t command[size];
 8001d04:	7af9      	ldrb	r1, [r7, #11]
 8001d06:	460b      	mov	r3, r1
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	b2cb      	uxtb	r3, r1
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4698      	mov	r8, r3
 8001d12:	4691      	mov	r9, r2
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d28:	b2cb      	uxtb	r3, r1
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	461c      	mov	r4, r3
 8001d2e:	4615      	mov	r5, r2
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	00eb      	lsls	r3, r5, #3
 8001d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d3e:	00e2      	lsls	r2, r4, #3
 8001d40:	460b      	mov	r3, r1
 8001d42:	3307      	adds	r3, #7
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	ebad 0d03 	sub.w	sp, sp, r3
 8001d4c:	466b      	mov	r3, sp
 8001d4e:	3300      	adds	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
	command[0] = 0x66;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2266      	movs	r2, #102	@ 0x66
 8001d56:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i < size; i++) {
 8001d58:	2301      	movs	r3, #1
 8001d5a:	75fb      	strb	r3, [r7, #23]
 8001d5c:	e00a      	b.n	8001d74 <radio_write_FIFO+0x84>
		command[i] = data[i-1];
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	441a      	add	r2, r3
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	7811      	ldrb	r1, [r2, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < size; i++) {
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	3301      	adds	r3, #1
 8001d72:	75fb      	strb	r3, [r7, #23]
 8001d74:	7afb      	ldrb	r3, [r7, #11]
 8001d76:	7dfa      	ldrb	r2, [r7, #23]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d3f0      	bcc.n	8001d5e <radio_write_FIFO+0x6e>
	}

	SPI_write(status, command, &size);
 8001d7c:	f107 030b 	add.w	r3, r7, #11
 8001d80:	461a      	mov	r2, r3
 8001d82:	68f9      	ldr	r1, [r7, #12]
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7fe fbe7 	bl	8000558 <SPI_write>
 8001d8a:	46b5      	mov	sp, r6
}
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001d98 <radio_mode_Tx>:

void radio_mode_Tx(HAL_StatusTypeDef* status) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	// Enable Tx mode. After transmission switch to Rx
	uint8_t data[] = {0x31, 0, 0x80, 0, 60, 0, 0};
 8001da0:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd4 <radio_mode_Tx+0x3c>)
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001daa:	6018      	str	r0, [r3, #0]
 8001dac:	3304      	adds	r3, #4
 8001dae:	8019      	strh	r1, [r3, #0]
 8001db0:	3302      	adds	r3, #2
 8001db2:	0c0a      	lsrs	r2, r1, #16
 8001db4:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001db6:	2307      	movs	r3, #7
 8001db8:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001dba:	f107 020f 	add.w	r2, r7, #15
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7fe fbc7 	bl	8000558 <SPI_write>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	0801345c 	.word	0x0801345c

08001dd8 <radio_send_packet>:

void radio_send_packet(HAL_StatusTypeDef* status, uint8_t* data) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
	// Fill FIFO
	radio_write_FIFO(status, data);
 8001de2:	6839      	ldr	r1, [r7, #0]
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff83 	bl	8001cf0 <radio_write_FIFO>
	// Begin transmission
	radio_mode_Tx(status);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffd4 	bl	8001d98 <radio_mode_Tx>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <radio_read_fifo>:

void radio_read_fifo(HAL_StatusTypeDef* status, uint8_t* data) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b094      	sub	sp, #80	@ 0x50
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	uint8_t dummy_data[61];
	dummy_data[0] = 0x77;
 8001e02:	2377      	movs	r3, #119	@ 0x77
 8001e04:	723b      	strb	r3, [r7, #8]

	HAL_SPI_TransmitReceive(&hspi4, dummy_data, data, 61, 500);
 8001e06:	f107 0108 	add.w	r1, r7, #8
 8001e0a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	233d      	movs	r3, #61	@ 0x3d
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4803      	ldr	r0, [pc, #12]	@ (8001e24 <radio_read_fifo+0x2c>)
 8001e16:	f00c fba1 	bl	800e55c <HAL_SPI_TransmitReceive>
}
 8001e1a:	bf00      	nop
 8001e1c:	3748      	adds	r7, #72	@ 0x48
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2400034c 	.word	0x2400034c

08001e28 <radio_read_PH_status>:

uint8_t radio_read_PH_status(HAL_StatusTypeDef* status) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x21, 0xFF}; //Leave all interrupts pending or they will reset themselves
 8001e30:	f64f 7321 	movw	r3, #65313	@ 0xff21
 8001e34:	81bb      	strh	r3, [r7, #12]
	uint8_t size = 2;
 8001e36:	2302      	movs	r3, #2
 8001e38:	72fb      	strb	r3, [r7, #11]
	SPI_read(status, data, &size, &size);
 8001e3a:	f107 030b 	add.w	r3, r7, #11
 8001e3e:	f107 020b 	add.w	r2, r7, #11
 8001e42:	f107 010c 	add.w	r1, r7, #12
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fbaa 	bl	80005a0 <SPI_read>

	uint8_t ph_status = data[0];
 8001e4c:	7b3b      	ldrb	r3, [r7, #12]
 8001e4e:	73fb      	strb	r3, [r7, #15]
		// Incoming packet matched the filter


	}
	*/
	return ph_status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <radio_clear_PH_status>:

void radio_clear_PH_status(HAL_StatusTypeDef* status) {
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x21, 0x00}; //Leave all interrupts pending or they will reset themselves
 8001e62:	2321      	movs	r3, #33	@ 0x21
 8001e64:	81bb      	strh	r3, [r7, #12]
	uint8_t size = 2;
 8001e66:	2302      	movs	r3, #2
 8001e68:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001e6a:	f107 020b 	add.w	r2, r7, #11
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	4619      	mov	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7fe fb6f 	bl	8000558 <SPI_write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <radio_request_repetition>:

void radio_request_repetition(HAL_StatusTypeDef* status) {
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b092      	sub	sp, #72	@ 0x48
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	uint8_t data[60] = {0};
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	223c      	movs	r2, #60	@ 0x3c
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f011 f9f8 	bl	8013288 <memset>
	radio_send_packet(status, data);
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ff9a 	bl	8001dd8 <radio_send_packet>
}
 8001ea4:	bf00      	nop
 8001ea6:	3748      	adds	r7, #72	@ 0x48
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <radio_repetition_requested>:
void radio_repetition_requested (HAL_StatusTypeDef* status) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	radio_mode_Tx(status); // Reuse data in TX FIFO
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff6f 	bl	8001d98 <radio_mode_Tx>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <radio_send_ACK>:
void radio_send_ACK(HAL_StatusTypeDef* status) {
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b092      	sub	sp, #72	@ 0x48
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
	uint8_t ack_packet[60];
	for (uint8_t i = 0; i < 60; i++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001ed0:	e00b      	b.n	8001eea <radio_send_ACK+0x28>
		ack_packet[i] = 0x11;
 8001ed2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001ed6:	3348      	adds	r3, #72	@ 0x48
 8001ed8:	443b      	add	r3, r7
 8001eda:	2211      	movs	r2, #17
 8001edc:	f803 2c40 	strb.w	r2, [r3, #-64]
	for (uint8_t i = 0; i < 60; i++) {
 8001ee0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001eea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001eee:	2b3b      	cmp	r3, #59	@ 0x3b
 8001ef0:	d9ef      	bls.n	8001ed2 <radio_send_ACK+0x10>
	}
	radio_send_packet(status, ack_packet);
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff6d 	bl	8001dd8 <radio_send_packet>
}
 8001efe:	bf00      	nop
 8001f00:	3748      	adds	r7, #72	@ 0x48
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <setup>:
#include <routines.h>

void setup(HAL_StatusTypeDef* status, fault_flag* error_index) {
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]

	/// Issue POWER_UP command - wake transceiver up
		radio_power_up(status);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fa43 	bl	800139c <radio_power_up>
		if (*status != 0) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <setup+0x20>
			*error_index = RADIO_PWUP;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2204      	movs	r2, #4
 8001f22:	701a      	strb	r2, [r3, #0]
			return;
 8001f24:	e088      	b.n	8002038 <setup+0x132>
		}

	// USB-C
	PowerInit(status);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fbb8 	bl	800069c <PowerInit>

	/// Check for errors, if non are found -> increase supply current
	if (*status == 0) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <setup+0x3e>
		PowerIncreaseCurrent(status);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7fe fc1a 	bl	800076e <PowerIncreaseCurrent>
		*error_index = POWER_INIT;
		return;
	}

	/// Check for error
	if (*status != 0) {
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <setup+0x4e>
 8001f42:	e003      	b.n	8001f4c <setup+0x46>
		*error_index = POWER_INIT;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
		return;
 8001f4a:	e075      	b.n	8002038 <setup+0x132>
		*error_index = POWER_INC;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	701a      	strb	r2, [r3, #0]
		return;
 8001f52:	e071      	b.n	8002038 <setup+0x132>

	*/


	/// Issue radio setup
	radio_pins(status);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fb53 	bl	8001600 <radio_pins>
	radio_TCXO(status);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fb6c 	bl	8001638 <radio_TCXO>
	radio_global(status);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fb81 	bl	8001668 <radio_global>
	radio_interrupts(status);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fb9a 	bl	80016a0 <radio_interrupts>
	radio_fast_registers(status);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff fbb3 	bl	80016d8 <radio_fast_registers>
	radio_Tx(status);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fbcc 	bl	8001710 <radio_Tx>
	radio_sync(status);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fbe3 	bl	8001744 <radio_sync>
	radio_packet_CRC(status);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fbfa 	bl	8001778 <radio_packet_CRC>
	radio_Rx_thr(status);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fc11 	bl	80017ac <radio_Rx_thr>
	radio_Rx_CRC_1(status);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fc28 	bl	80017e0 <radio_Rx_CRC_1>
	radio_Rx_CRC_2(status);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff fc41 	bl	8001818 <radio_Rx_CRC_2>
	radio_Rx_CRC_3(status);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fc5a 	bl	8001850 <radio_Rx_CRC_3>
	radio_Rx_CRC_seed(status);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fc73 	bl	8001888 <radio_Rx_CRC_seed>
	radio_mod(status);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fc88 	bl	80018b8 <radio_mod>
	radio_freq_dev(status);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fc9f 	bl	80018ec <radio_freq_dev>
	radio_Tx_ramp(status);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fcb8 	bl	8001924 <radio_Tx_ramp>
	radio_NCO_offset(status);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fccf 	bl	8001958 <radio_NCO_offset>
	radio_AFC(status);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fce6 	bl	800198c <radio_AFC>
	radio_AGC_1(status);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fd03 	bl	80019cc <radio_AGC_1>
	radio_AGC_2(status);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fd1c 	bl	8001a04 <radio_AGC_2>
	radio_RAW(status);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fd33 	bl	8001a38 <radio_RAW>
	radio_search_period(status);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fd4a 	bl	8001a6c <radio_search_period>
	radio_GFSK_thr(status);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fd63 	bl	8001aa4 <radio_GFSK_thr>
	radio_RSSI_thr(status);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fd7c 	bl	8001adc <radio_RSSI_thr>
	radio_RSSI_att(status);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fd91 	bl	8001b0c <radio_RSSI_att>
	radio_Rx_filter_1(status);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fda8 	bl	8001b40 <radio_Rx_filter_1>
	radio_Rx_filter_2(status);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff fdbf 	bl	8001b74 <radio_Rx_filter_2>
	radio_Rx_filter_3(status);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fdd6 	bl	8001ba8 <radio_Rx_filter_3>
	radio_PA_1(status);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fded 	bl	8001bdc <radio_PA_1>
	radio_PA_2(status);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fe06 	bl	8001c14 <radio_PA_2>
	radio_masks(status);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fe21 	bl	8001c50 <radio_masks>
	radio_PLL(status);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fe3a 	bl	8001c88 <radio_PLL>

	// Check for errors
	if (*status != 0) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <setup+0x11e>
		*error_index = RADIO_SETUP;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2205      	movs	r2, #5
 8002020:	701a      	strb	r2, [r3, #0]
		return;
 8002022:	e009      	b.n	8002038 <setup+0x132>
	}

	// Init. radio into receive mode
	radio_mode_Rx(status);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fe49 	bl	8001cbc <radio_mode_Rx>
	if (*status != 0) {
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <setup+0x132>
		*error_index = RADIO_SET_RX;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2206      	movs	r2, #6
 8002036:	701a      	strb	r2, [r3, #0]
	}

}
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <radio_ping>:
						 "==================================================\r\n";
	uint16_t TxBufferLen = sizeof(TxBuffer);
	CDC_Transmit_HS(TxBuffer, TxBufferLen);
}

void radio_ping(HAL_StatusTypeDef* status) {
 800203e:	b580      	push	{r7, lr}
 8002040:	b092      	sub	sp, #72	@ 0x48
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
	// Fill 60byte packet with dummy data (all ones)
	uint8_t data[60];
	for (uint8_t i = 0; i < 60; i++) {
 8002046:	2300      	movs	r3, #0
 8002048:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800204c:	e00b      	b.n	8002066 <radio_ping+0x28>
		data[i] = 0xFF;
 800204e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002052:	3348      	adds	r3, #72	@ 0x48
 8002054:	443b      	add	r3, r7
 8002056:	22ff      	movs	r2, #255	@ 0xff
 8002058:	f803 2c40 	strb.w	r2, [r3, #-64]
	for (uint8_t i = 0; i < 60; i++) {
 800205c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002060:	3301      	adds	r3, #1
 8002062:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002066:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800206a:	2b3b      	cmp	r3, #59	@ 0x3b
 800206c:	d9ef      	bls.n	800204e <radio_ping+0x10>
	}
	radio_send_packet(status, data);
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff feaf 	bl	8001dd8 <radio_send_packet>
}
 800207a:	bf00      	nop
 800207c:	3748      	adds	r7, #72	@ 0x48
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <get_img_res>:
void get_img_res(HAL_StatusTypeDef* status, uint8_t* img_mode) {
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
		/// VGA = 640 * 480 * 2 = 614400
		/// CIF = 352 * 288 * 2 = 202752
		/// QVGA = 320 * 240 * 2 = 153600
		/// QCIF = 176 * 144 * 2 = 50688

			uint8_t res = (*img_mode & 0b11110000);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	f023 030f 	bic.w	r3, r3, #15
 8002096:	73fb      	strb	r3, [r7, #15]
			switch (res) {
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b30      	cmp	r3, #48	@ 0x30
 800209c:	d019      	beq.n	80020d2 <get_img_res+0x4e>
 800209e:	2b30      	cmp	r3, #48	@ 0x30
 80020a0:	dc1c      	bgt.n	80020dc <get_img_res+0x58>
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d010      	beq.n	80020c8 <get_img_res+0x44>
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	dc18      	bgt.n	80020dc <get_img_res+0x58>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <get_img_res+0x30>
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d005      	beq.n	80020be <get_img_res+0x3a>
 80020b2:	e013      	b.n	80020dc <get_img_res+0x58>
				case (0x00): {
					img_size = 614400;
 80020b4:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <get_img_res+0x74>)
 80020b6:	f44f 2216 	mov.w	r2, #614400	@ 0x96000
 80020ba:	601a      	str	r2, [r3, #0]
					break;
 80020bc:	e015      	b.n	80020ea <get_img_res+0x66>
				}
				case (0x10): {
					img_size = 202752;
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <get_img_res+0x74>)
 80020c0:	f44f 3246 	mov.w	r2, #202752	@ 0x31800
 80020c4:	601a      	str	r2, [r3, #0]
					break;
 80020c6:	e010      	b.n	80020ea <get_img_res+0x66>
				}
				case (0x20): {
					img_size = 153600;
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <get_img_res+0x74>)
 80020ca:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 80020ce:	601a      	str	r2, [r3, #0]
					break;
 80020d0:	e00b      	b.n	80020ea <get_img_res+0x66>
				}
				case (0x30): {
					img_size = 50688;
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <get_img_res+0x74>)
 80020d4:	f44f 4246 	mov.w	r2, #50688	@ 0xc600
 80020d8:	601a      	str	r2, [r3, #0]
					break;
 80020da:	e006      	b.n	80020ea <get_img_res+0x66>
				}
				default: {
					*status = HAL_ERROR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
					img_size = 0;
 80020e2:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <get_img_res+0x74>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
				}
			}
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	240004c8 	.word	0x240004c8

080020fc <capture_img>:
		packet_buffer[1] = *img_mode;
		radio_send_packet(status, packet_buffer);
		img_flag = 1; // Activate flag
}

void capture_img(HAL_StatusTypeDef* status, fault_flag* error_index, uint8_t* img_buffer, uint8_t* img_mode) {
 80020fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002100:	b087      	sub	sp, #28
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	466b      	mov	r3, sp
 800210e:	461e      	mov	r6, r3
	get_img_res(status, img_mode);
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff ffb6 	bl	8002084 <get_img_res>
		*status = HAL_ERROR;
		*error_index = MEM_REALLOC;
		return;
	}
	*/
	uint8_t data[img_size];
 8002118:	4b27      	ldr	r3, [pc, #156]	@ (80021b8 <capture_img+0xbc>)
 800211a:	6819      	ldr	r1, [r3, #0]
 800211c:	460b      	mov	r3, r1
 800211e:	3b01      	subs	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	2300      	movs	r3, #0
 8002124:	4688      	mov	r8, r1
 8002126:	4699      	mov	r9, r3
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002134:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002138:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800213c:	2300      	movs	r3, #0
 800213e:	460c      	mov	r4, r1
 8002140:	461d      	mov	r5, r3
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	00eb      	lsls	r3, r5, #3
 800214c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002150:	00e2      	lsls	r2, r4, #3
 8002152:	1dcb      	adds	r3, r1, #7
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	ebad 0d03 	sub.w	sp, sp, r3
 800215c:	466b      	mov	r3, sp
 800215e:	3300      	adds	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
	camera_init(status, img_mode);
 8002162:	6839      	ldr	r1, [r7, #0]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7fe ff6d 	bl	8001044 <camera_init>
	if (*status != 0) {
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <capture_img+0x7e>
		*error_index = CAM_INIT;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2209      	movs	r2, #9
 8002176:	701a      	strb	r2, [r3, #0]
		return;
 8002178:	e018      	b.n	80021ac <capture_img+0xb0>
	}
	camera_capture_photo(status, data, &img_size);
 800217a:	4a0f      	ldr	r2, [pc, #60]	@ (80021b8 <capture_img+0xbc>)
 800217c:	6939      	ldr	r1, [r7, #16]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff f8e6 	bl	8001350 <camera_capture_photo>

	if (*status != 0) {
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <capture_img+0x98>
		*error_index = CAM_CAPTURE;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	220a      	movs	r2, #10
 8002190:	701a      	strb	r2, [r3, #0]
		return;
 8002192:	e00b      	b.n	80021ac <capture_img+0xb0>
	}
	memcpy(img_buffer, data, img_size);
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <capture_img+0xbc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	6939      	ldr	r1, [r7, #16]
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f011 f89f 	bl	80132e0 <memcpy>
	img_flag = 1; // Set flag to indicate that image is stored in buffer and ready to be transmitted
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <capture_img+0xc0>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	46b5      	mov	sp, r6
 80021aa:	e000      	b.n	80021ae <capture_img+0xb2>
		return;
 80021ac:	46b5      	mov	sp, r6

}
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021b6:	bf00      	nop
 80021b8:	240004c8 	.word	0x240004c8
 80021bc:	240004cc 	.word	0x240004cc

080021c0 <transmit_img>:

void transmit_img(HAL_StatusTypeDef* status, fault_flag* error_index, uint8_t* img_buffer, uint32_t* index) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b094      	sub	sp, #80	@ 0x50
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
	uint8_t packet[60];
	uint8_t prev_idex = *index;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	// Load data block to packet
	for (uint8_t i = 0; i < 60; i++) {
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80021dc:	e021      	b.n	8002222 <transmit_img+0x62>
		if (*index >= img_size) {
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <transmit_img+0x80>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d306      	bcc.n	80021f8 <transmit_img+0x38>
			img_flag = 0;
 80021ea:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <transmit_img+0x84>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
			img_size = 0x100000000;
 80021f0:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <transmit_img+0x80>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
			break;
 80021f6:	e018      	b.n	800222a <transmit_img+0x6a>
		}
		packet[i] = img_buffer[*index];
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	441a      	add	r2, r3
 8002200:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	3350      	adds	r3, #80	@ 0x50
 8002208:	443b      	add	r3, r7
 800220a:	f803 2c40 	strb.w	r2, [r3, #-64]
		(*index)++;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 60; i++) {
 8002218:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800221c:	3301      	adds	r3, #1
 800221e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002222:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002226:	2b3b      	cmp	r3, #59	@ 0x3b
 8002228:	d9d9      	bls.n	80021de <transmit_img+0x1e>
	}

	// Send packet
	radio_send_packet(status, &packet);
 800222a:	f107 0310 	add.w	r3, r7, #16
 800222e:	4619      	mov	r1, r3
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fdd1 	bl	8001dd8 <radio_send_packet>
}
 8002236:	bf00      	nop
 8002238:	3750      	adds	r7, #80	@ 0x50
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	240004c8 	.word	0x240004c8
 8002244:	240004cc 	.word	0x240004cc

08002248 <nirq_handler>:

void nirq_handler(HAL_StatusTypeDef* status, fault_flag* error_index, uint8_t* ping, uint8_t* ack, uint8_t* img_buffer, uint32_t* index) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b098      	sub	sp, #96	@ 0x60
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]

	// Packet handling
	uint8_t pending_interrupts = radio_read_PH_status(status);
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff fde6 	bl	8001e28 <radio_read_PH_status>
 800225c:	4603      	mov	r3, r0
 800225e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	uint8_t reg = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	uint8_t control = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	reg = pending_interrupts & (1 << 4);
 800226e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	control = (1 << 4);
 800227a:	2310      	movs	r3, #16
 800227c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Directly receiving
	if (reg == control) {
 8002280:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002284:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002288:	429a      	cmp	r2, r3
 800228a:	f040 80bd 	bne.w	8002408 <nirq_handler+0x1c0>
		// Read packet from FIFO
		uint8_t packet[61]; //Ignore the first byte
		uint8_t AAs = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		uint8_t CCs = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
		uint8_t FFs = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
		uint8_t zeros = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

		radio_read_fifo(status, packet);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff fda3 	bl	8001df8 <radio_read_fifo>
		if (*status != 0) {
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <nirq_handler+0x78>
			*status = HAL_ERROR;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]

		}


		for (uint8_t i = 1; i < 61; i++) {
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80022c6:	e03b      	b.n	8002340 <nirq_handler+0xf8>
			if (packet[i] == 0xAA) {
 80022c8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80022cc:	3360      	adds	r3, #96	@ 0x60
 80022ce:	443b      	add	r3, r7
 80022d0:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80022d4:	2baa      	cmp	r3, #170	@ 0xaa
 80022d6:	d105      	bne.n	80022e4 <nirq_handler+0x9c>
				AAs++;
 80022d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80022dc:	3301      	adds	r3, #1
 80022de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80022e2:	e028      	b.n	8002336 <nirq_handler+0xee>
			}
			else if (packet[i] == 0xCC) {
 80022e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80022e8:	3360      	adds	r3, #96	@ 0x60
 80022ea:	443b      	add	r3, r7
 80022ec:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80022f0:	2bcc      	cmp	r3, #204	@ 0xcc
 80022f2:	d105      	bne.n	8002300 <nirq_handler+0xb8>
				CCs++;
 80022f4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80022f8:	3301      	adds	r3, #1
 80022fa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80022fe:	e01a      	b.n	8002336 <nirq_handler+0xee>
			}
			else if (packet[i] == 0xFF) {
 8002300:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002304:	3360      	adds	r3, #96	@ 0x60
 8002306:	443b      	add	r3, r7
 8002308:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800230c:	2bff      	cmp	r3, #255	@ 0xff
 800230e:	d105      	bne.n	800231c <nirq_handler+0xd4>
				FFs++;
 8002310:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8002314:	3301      	adds	r3, #1
 8002316:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 800231a:	e00c      	b.n	8002336 <nirq_handler+0xee>
			}
			else if (packet[i] == 0) {
 800231c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002320:	3360      	adds	r3, #96	@ 0x60
 8002322:	443b      	add	r3, r7
 8002324:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <nirq_handler+0xee>
				zeros++;
 800232c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8002330:	3301      	adds	r3, #1
 8002332:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
		for (uint8_t i = 1; i < 61; i++) {
 8002336:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800233a:	3301      	adds	r3, #1
 800233c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8002340:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002344:	2b3c      	cmp	r3, #60	@ 0x3c
 8002346:	d9bf      	bls.n	80022c8 <nirq_handler+0x80>
		// NOTE: When B&W data are transmitted, expect only half of RF_FIFO usage due to erased chrominance
		/// After Tx receives ACK packet, transmission of 60 bytes of image data interleaved with ACKs begins
		//--------------------------------------------------------------------------------------------------------

		// PING
		if (FFs == 60) {
 8002348:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800234c:	2b3c      	cmp	r3, #60	@ 0x3c
 800234e:	d10e      	bne.n	800236e <nirq_handler+0x126>
			if (*ping == 1) { // Response to ping received
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d103      	bne.n	8002360 <nirq_handler+0x118>
				*ping = 2;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	e04f      	b.n	8002400 <nirq_handler+0x1b8>

			} else {
				HAL_Delay(100);
 8002360:	2064      	movs	r0, #100	@ 0x64
 8002362:	f000 fe41 	bl	8002fe8 <HAL_Delay>
				radio_ping(status); // Send ping response
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f7ff fe69 	bl	800203e <radio_ping>
 800236c:	e048      	b.n	8002400 <nirq_handler+0x1b8>
			}
		}

		// Data retransmission request
		else if (zeros == 60) {
 800236e:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8002372:	2b3c      	cmp	r3, #60	@ 0x3c
 8002374:	d103      	bne.n	800237e <nirq_handler+0x136>
			radio_repetition_requested(status);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7ff fd98 	bl	8001eac <radio_repetition_requested>
 800237c:	e040      	b.n	8002400 <nirq_handler+0x1b8>
		}
		/// ACK
		else if (AAs == 60) {
 800237e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002382:	2b3c      	cmp	r3, #60	@ 0x3c
 8002384:	d103      	bne.n	800238e <nirq_handler+0x146>
			*ack = 1;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	e038      	b.n	8002400 <nirq_handler+0x1b8>
		}

		/// TELEMETRY

		/// IMG
		else if (CCs == 59) {
 800238e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002392:	2b3b      	cmp	r3, #59	@ 0x3b
 8002394:	d110      	bne.n	80023b8 <nirq_handler+0x170>
			uint8_t img_mode = packet[2];
 8002396:	7dbb      	ldrb	r3, [r7, #22]
 8002398:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			capture_img(status, error_index, img_buffer, &img_mode);
 800239c:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 80023a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fea9 	bl	80020fc <capture_img>
			transmit_img(status, error_index, img_buffer, index);
 80023aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f7ff ff05 	bl	80021c0 <transmit_img>
 80023b6:	e023      	b.n	8002400 <nirq_handler+0x1b8>

		}
		else if (img_flag) {
 80023b8:	4b59      	ldr	r3, [pc, #356]	@ (8002520 <nirq_handler+0x2d8>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01f      	beq.n	8002400 <nirq_handler+0x1b8>
			for (uint8_t i = 1; i < 61; i++) {
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80023c6:	e014      	b.n	80023f2 <nirq_handler+0x1aa>
				img_buffer[*index] = packet[i];
 80023c8:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80023cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023d2:	440b      	add	r3, r1
 80023d4:	3260      	adds	r2, #96	@ 0x60
 80023d6:	443a      	add	r2, r7
 80023d8:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 80023dc:	701a      	strb	r2, [r3, #0]
				(*index)++;
 80023de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023e6:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 1; i < 61; i++) {
 80023e8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80023ec:	3301      	adds	r3, #1
 80023ee:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80023f2:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80023f6:	2b3c      	cmp	r3, #60	@ 0x3c
 80023f8:	d9e6      	bls.n	80023c8 <nirq_handler+0x180>
			}
			radio_send_ACK(status);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff fd61 	bl	8001ec2 <radio_send_ACK>
		}

		// Return from function as data are about to be transmitted
		radio_clear_PH_status(status);
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff fd2a 	bl	8001e5a <radio_clear_PH_status>
 8002406:	e087      	b.n	8002518 <nirq_handler+0x2d0>
	// Receiving process - transceiver is not using this for some reason
	// 1. detect packet header
	// 2. Control CRC
	// 3. Read RX_FIFO

	reg = pending_interrupts & (1 << 7);
 8002408:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800240c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002410:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	control = (1 << 7);
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54


	if (reg == control) {
 800241a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800241e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002422:	429a      	cmp	r2, r3
 8002424:	d172      	bne.n	800250c <nirq_handler+0x2c4>
		// An incoming packet matched filter, check CRC
		reg = pending_interrupts & ((1 << 3) | (1 << 2));
 8002426:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		control = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		if (reg == control) {
 8002438:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800243c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002440:	429a      	cmp	r2, r3
 8002442:	d160      	bne.n	8002506 <nirq_handler+0x2be>
			// Read packet from FIFO
			uint8_t packet[60];
			uint8_t ones = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
			uint8_t zeros = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
			uint8_t rs= 60;
 8002450:	233c      	movs	r3, #60	@ 0x3c
 8002452:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
			uint8_t ts = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51

			packet[0] = 0x77;
 800245c:	2377      	movs	r3, #119	@ 0x77
 800245e:	753b      	strb	r3, [r7, #20]
			SPI_read(status, packet, &ts, &rs);
 8002460:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 8002464:	f107 0251 	add.w	r2, r7, #81	@ 0x51
 8002468:	f107 0114 	add.w	r1, r7, #20
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f7fe f897 	bl	80005a0 <SPI_read>
			if (*status != 0) {
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <nirq_handler+0x238>
				*status = HAL_ERROR;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]

			}
			for (uint8_t i = 0; i < 60; i++) {
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002486:	e01f      	b.n	80024c8 <nirq_handler+0x280>
				if (packet[i] == 0xFF) {
 8002488:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800248c:	3360      	adds	r3, #96	@ 0x60
 800248e:	443b      	add	r3, r7
 8002490:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8002494:	2bff      	cmp	r3, #255	@ 0xff
 8002496:	d105      	bne.n	80024a4 <nirq_handler+0x25c>
					ones++;
 8002498:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800249c:	3301      	adds	r3, #1
 800249e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 80024a2:	e00c      	b.n	80024be <nirq_handler+0x276>
				}
				else if (packet[i] == 0) {
 80024a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80024a8:	3360      	adds	r3, #96	@ 0x60
 80024aa:	443b      	add	r3, r7
 80024ac:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d104      	bne.n	80024be <nirq_handler+0x276>
					zeros++;
 80024b4:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80024b8:	3301      	adds	r3, #1
 80024ba:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
			for (uint8_t i = 0; i < 60; i++) {
 80024be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80024c2:	3301      	adds	r3, #1
 80024c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80024c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80024cc:	2b3b      	cmp	r3, #59	@ 0x3b
 80024ce:	d9db      	bls.n	8002488 <nirq_handler+0x240>
				}
			}

			// Data handling logic
			/// PING
			if (ones == 60) {
 80024d0:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80024d4:	2b3c      	cmp	r3, #60	@ 0x3c
 80024d6:	d10b      	bne.n	80024f0 <nirq_handler+0x2a8>
				if (*ping == 1) { // Response to ping received
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d103      	bne.n	80024e8 <nirq_handler+0x2a0>
					*ping = 2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e00a      	b.n	80024fe <nirq_handler+0x2b6>

				}
				else {
					radio_ping(status); // Send ping response
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff fda8 	bl	800203e <radio_ping>
 80024ee:	e006      	b.n	80024fe <nirq_handler+0x2b6>
				}
			}

			// Data retransmission request
			else if (zeros == 60) {
 80024f0:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80024f4:	2b3c      	cmp	r3, #60	@ 0x3c
 80024f6:	d102      	bne.n	80024fe <nirq_handler+0x2b6>
				radio_repetition_requested(status);
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7ff fcd7 	bl	8001eac <radio_repetition_requested>
			/// TELEMETRY

			/// IMG

			// Clear IRQ and wait for transmission
			radio_clear_PH_status(status);
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7ff fcab 	bl	8001e5a <radio_clear_PH_status>
 8002504:	e008      	b.n	8002518 <nirq_handler+0x2d0>
			return;
		}

		// Request packet retransmission
		else {
			radio_request_repetition(status);
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff fcbb 	bl	8001e82 <radio_request_repetition>
		// Buffer transmitted - switch to RX and listen
		radio_mode_Rx(status);
	}

	*/
	radio_clear_PH_status(status);
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f7ff fca4 	bl	8001e5a <radio_clear_PH_status>
	radio_mode_Rx(status);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fbd2 	bl	8001cbc <radio_mode_Rx>



}
 8002518:	3760      	adds	r7, #96	@ 0x60
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	240004cc 	.word	0x240004cc

08002524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_MspInit+0x30>)
 800252c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002530:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <HAL_MspInit+0x30>)
 8002532:	f043 0302 	orr.w	r3, r3, #2
 8002536:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_MspInit+0x30>)
 800253c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	58024400 	.word	0x58024400

08002558 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b0be      	sub	sp, #248	@ 0xf8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002570:	f107 0320 	add.w	r3, r7, #32
 8002574:	22c0      	movs	r2, #192	@ 0xc0
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f010 fe85 	bl	8013288 <memset>
  if(hadc->Instance==ADC1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6f      	ldr	r2, [pc, #444]	@ (8002740 <HAL_ADC_MspInit+0x1e8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	f040 8087 	bne.w	8002698 <HAL_ADC_MspInit+0x140>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800258a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002596:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800259a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800259e:	f107 0320 	add.w	r3, r7, #32
 80025a2:	4618      	mov	r0, r3
 80025a4:	f009 f8be 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 80025ae:	f7fe fd43 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025b2:	4b64      	ldr	r3, [pc, #400]	@ (8002744 <HAL_ADC_MspInit+0x1ec>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	4a62      	ldr	r2, [pc, #392]	@ (8002744 <HAL_ADC_MspInit+0x1ec>)
 80025ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025bc:	4b61      	ldr	r3, [pc, #388]	@ (8002744 <HAL_ADC_MspInit+0x1ec>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d10e      	bne.n	80025e2 <HAL_ADC_MspInit+0x8a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80025c4:	4b60      	ldr	r3, [pc, #384]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 80025c6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80025ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 80025cc:	f043 0320 	orr.w	r3, r3, #32
 80025d0:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80025d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 80025d6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	4b59      	ldr	r3, [pc, #356]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 80025e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025e8:	4a57      	ldr	r2, [pc, #348]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80025f2:	4b55      	ldr	r3, [pc, #340]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 80025f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002600:	4b51      	ldr	r3, [pc, #324]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 8002602:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002606:	4a50      	ldr	r2, [pc, #320]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002610:	4b4d      	ldr	r3, [pc, #308]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 8002612:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	4b4a      	ldr	r3, [pc, #296]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 8002620:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002624:	4a48      	ldr	r2, [pc, #288]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800262e:	4b46      	ldr	r3, [pc, #280]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 8002630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INN16
    PC4     ------> ADC1_INP4
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = NTC_2__Pin|NTC_2_A1_Pin;
 800263c:	2303      	movs	r3, #3
 800263e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002642:	2303      	movs	r3, #3
 8002644:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002652:	4619      	mov	r1, r3
 8002654:	483d      	ldr	r0, [pc, #244]	@ (800274c <HAL_ADC_MspInit+0x1f4>)
 8002656:	f005 fc1d 	bl	8007e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CC1_Pin;
 800265a:	2310      	movs	r3, #16
 800265c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002660:	2303      	movs	r3, #3
 8002662:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC1_GPIO_Port, &GPIO_InitStruct);
 800266c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002670:	4619      	mov	r1, r3
 8002672:	4837      	ldr	r0, [pc, #220]	@ (8002750 <HAL_ADC_MspInit+0x1f8>)
 8002674:	f005 fc0e 	bl	8007e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VBUS_Pin;
 8002678:	2301      	movs	r3, #1
 800267a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800267e:	2303      	movs	r3, #3
 8002680:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ADC_VBUS_GPIO_Port, &GPIO_InitStruct);
 800268a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800268e:	4619      	mov	r1, r3
 8002690:	4830      	ldr	r0, [pc, #192]	@ (8002754 <HAL_ADC_MspInit+0x1fc>)
 8002692:	f005 fbff 	bl	8007e94 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002696:	e04e      	b.n	8002736 <HAL_ADC_MspInit+0x1de>
  else if(hadc->Instance==ADC2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2e      	ldr	r2, [pc, #184]	@ (8002758 <HAL_ADC_MspInit+0x200>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d149      	bne.n	8002736 <HAL_ADC_MspInit+0x1de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80026ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b6:	f107 0320 	add.w	r3, r7, #32
 80026ba:	4618      	mov	r0, r3
 80026bc:	f009 f832 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_ADC_MspInit+0x172>
      Error_Handler();
 80026c6:	f7fe fcb7 	bl	8001038 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80026ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002744 <HAL_ADC_MspInit+0x1ec>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002744 <HAL_ADC_MspInit+0x1ec>)
 80026d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <HAL_ADC_MspInit+0x1ec>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10e      	bne.n	80026fa <HAL_ADC_MspInit+0x1a2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80026dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 80026de:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80026e2:	4a19      	ldr	r2, [pc, #100]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 80026e4:	f043 0320 	orr.w	r3, r3, #32
 80026e8:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80026ec:	4b16      	ldr	r3, [pc, #88]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 80026ee:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fa:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 80026fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002700:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800270a:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <HAL_ADC_MspInit+0x1f0>)
 800270c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CC2_Pin;
 8002718:	2320      	movs	r3, #32
 800271a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800271e:	2303      	movs	r3, #3
 8002720:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC2_GPIO_Port, &GPIO_InitStruct);
 800272a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800272e:	4619      	mov	r1, r3
 8002730:	4807      	ldr	r0, [pc, #28]	@ (8002750 <HAL_ADC_MspInit+0x1f8>)
 8002732:	f005 fbaf 	bl	8007e94 <HAL_GPIO_Init>
}
 8002736:	bf00      	nop
 8002738:	37f8      	adds	r7, #248	@ 0xf8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40022000 	.word	0x40022000
 8002744:	240004d8 	.word	0x240004d8
 8002748:	58024400 	.word	0x58024400
 800274c:	58020000 	.word	0x58020000
 8002750:	58020800 	.word	0x58020800
 8002754:	58020400 	.word	0x58020400
 8002758:	40022100 	.word	0x40022100

0800275c <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	@ 0x30
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6a      	ldr	r2, [pc, #424]	@ (8002924 <HAL_DCMI_MspInit+0x1c8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	f040 80ce 	bne.w	800291c <HAL_DCMI_MspInit+0x1c0>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002780:	4b69      	ldr	r3, [pc, #420]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 8002782:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002786:	4a68      	ldr	r2, [pc, #416]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
 8002790:	4b65      	ldr	r3, [pc, #404]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 8002792:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	4b62      	ldr	r3, [pc, #392]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 80027a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027a4:	4a60      	ldr	r2, [pc, #384]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80027ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 80027b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 80027be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027c2:	4a59      	ldr	r2, [pc, #356]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80027cc:	4b56      	ldr	r3, [pc, #344]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 80027ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027da:	4b53      	ldr	r3, [pc, #332]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 80027dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027e0:	4a51      	ldr	r2, [pc, #324]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 80027e2:	f043 0308 	orr.w	r3, r3, #8
 80027e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80027ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 80027ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 80027fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027fe:	4a4a      	ldr	r2, [pc, #296]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002808:	4b47      	ldr	r3, [pc, #284]	@ (8002928 <HAL_DCMI_MspInit+0x1cc>)
 800280a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002816:	2350      	movs	r3, #80	@ 0x50
 8002818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002826:	230d      	movs	r3, #13
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	483e      	ldr	r0, [pc, #248]	@ (800292c <HAL_DCMI_MspInit+0x1d0>)
 8002832:	f005 fb2f 	bl	8007e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002836:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 800283a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002848:	230d      	movs	r3, #13
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	4619      	mov	r1, r3
 8002852:	4837      	ldr	r0, [pc, #220]	@ (8002930 <HAL_DCMI_MspInit+0x1d4>)
 8002854:	f005 fb1e 	bl	8007e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002858:	2308      	movs	r3, #8
 800285a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002868:	230d      	movs	r3, #13
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	4619      	mov	r1, r3
 8002872:	4830      	ldr	r0, [pc, #192]	@ (8002934 <HAL_DCMI_MspInit+0x1d8>)
 8002874:	f005 fb0e 	bl	8007e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002878:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800287c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800288a:	230d      	movs	r3, #13
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4619      	mov	r1, r3
 8002894:	4828      	ldr	r0, [pc, #160]	@ (8002938 <HAL_DCMI_MspInit+0x1dc>)
 8002896:	f005 fafd 	bl	8007e94 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 800289a:	4b28      	ldr	r3, [pc, #160]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 800289c:	4a28      	ldr	r2, [pc, #160]	@ (8002940 <HAL_DCMI_MspInit+0x1e4>)
 800289e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 80028a0:	4b26      	ldr	r3, [pc, #152]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028a2:	224b      	movs	r2, #75	@ 0x4b
 80028a4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a6:	4b25      	ldr	r3, [pc, #148]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ac:	4b23      	ldr	r3, [pc, #140]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80028b2:	4b22      	ldr	r3, [pc, #136]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028b8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028ba:	4b20      	ldr	r3, [pc, #128]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028c0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028c2:	4b1e      	ldr	r3, [pc, #120]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028c8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80028ca:	4b1c      	ldr	r3, [pc, #112]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028d0:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028d2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80028d6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028d8:	4b18      	ldr	r3, [pc, #96]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028da:	2204      	movs	r2, #4
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028de:	4b17      	ldr	r3, [pc, #92]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028e0:	2203      	movs	r2, #3
 80028e2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80028e4:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80028f0:	4812      	ldr	r0, [pc, #72]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 80028f2:	f001 ff41 	bl	8004778 <HAL_DMA_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_DCMI_MspInit+0x1a4>
    {
      Error_Handler();
 80028fc:	f7fe fb9c 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0e      	ldr	r2, [pc, #56]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 8002904:	649a      	str	r2, [r3, #72]	@ 0x48
 8002906:	4a0d      	ldr	r2, [pc, #52]	@ (800293c <HAL_DCMI_MspInit+0x1e0>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2100      	movs	r1, #0
 8002910:	204e      	movs	r0, #78	@ 0x4e
 8002912:	f001 fb8e 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8002916:	204e      	movs	r0, #78	@ 0x4e
 8002918:	f001 fba5 	bl	8004066 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 800291c:	bf00      	nop
 800291e:	3730      	adds	r7, #48	@ 0x30
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	48020000 	.word	0x48020000
 8002928:	58024400 	.word	0x58024400
 800292c:	58020000 	.word	0x58020000
 8002930:	58020800 	.word	0x58020800
 8002934:	58020c00 	.word	0x58020c00
 8002938:	58020400 	.word	0x58020400
 800293c:	24000280 	.word	0x24000280
 8002940:	40020010 	.word	0x40020010

08002944 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b0ba      	sub	sp, #232	@ 0xe8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	22c0      	movs	r2, #192	@ 0xc0
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f010 fc8f 	bl	8013288 <memset>
  if(hi2c->Instance==I2C2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a27      	ldr	r2, [pc, #156]	@ (8002a0c <HAL_I2C_MspInit+0xc8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d146      	bne.n	8002a02 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002974:	f04f 0208 	mov.w	r2, #8
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002980:	2300      	movs	r3, #0
 8002982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	4618      	mov	r0, r3
 800298c:	f008 feca 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002996:	f7fe fb4f 	bl	8001038 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <HAL_I2C_MspInit+0xcc>)
 800299c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a10 <HAL_I2C_MspInit+0xcc>)
 80029a2:	f043 0302 	orr.w	r3, r3, #2
 80029a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80029aa:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <HAL_I2C_MspInit+0xcc>)
 80029ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80029bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c0:	2312      	movs	r3, #18
 80029c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029d2:	2304      	movs	r3, #4
 80029d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029dc:	4619      	mov	r1, r3
 80029de:	480d      	ldr	r0, [pc, #52]	@ (8002a14 <HAL_I2C_MspInit+0xd0>)
 80029e0:	f005 fa58 	bl	8007e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_I2C_MspInit+0xcc>)
 80029e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <HAL_I2C_MspInit+0xcc>)
 80029ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029f0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80029f4:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_I2C_MspInit+0xcc>)
 80029f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002a02:	bf00      	nop
 8002a04:	37e8      	adds	r7, #232	@ 0xe8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40005800 	.word	0x40005800
 8002a10:	58024400 	.word	0x58024400
 8002a14:	58020400 	.word	0x58020400

08002a18 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b0ba      	sub	sp, #232	@ 0xe8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a30:	f107 0310 	add.w	r3, r7, #16
 8002a34:	22c0      	movs	r2, #192	@ 0xc0
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f010 fc25 	bl	8013288 <memset>
  if(hspi->Instance==SPI4)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6b      	ldr	r2, [pc, #428]	@ (8002bf0 <HAL_SPI_MspInit+0x1d8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	f040 80cf 	bne.w	8002be8 <HAL_SPI_MspInit+0x1d0>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002a4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 16;
 8002a62:	2310      	movs	r3, #16
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002a66:	2302      	movs	r3, #2
 8002a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002a6a:	23c0      	movs	r3, #192	@ 0xc0
 8002a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8002a76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a7a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a7c:	f107 0310 	add.w	r3, r7, #16
 8002a80:	4618      	mov	r0, r3
 8002a82:	f008 fe4f 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8002a8c:	f7fe fad4 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002a90:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <HAL_SPI_MspInit+0x1dc>)
 8002a92:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002a96:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <HAL_SPI_MspInit+0x1dc>)
 8002a98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a9c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002aa0:	4b54      	ldr	r3, [pc, #336]	@ (8002bf4 <HAL_SPI_MspInit+0x1dc>)
 8002aa2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aae:	4b51      	ldr	r3, [pc, #324]	@ (8002bf4 <HAL_SPI_MspInit+0x1dc>)
 8002ab0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002ab4:	4a4f      	ldr	r2, [pc, #316]	@ (8002bf4 <HAL_SPI_MspInit+0x1dc>)
 8002ab6:	f043 0310 	orr.w	r3, r3, #16
 8002aba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002abe:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf4 <HAL_SPI_MspInit+0x1dc>)
 8002ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_nSEL_Pin;
 8002acc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002ae6:	2305      	movs	r3, #5
 8002ae8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(SPI4_nSEL_GPIO_Port, &GPIO_InitStruct);
 8002aec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4841      	ldr	r0, [pc, #260]	@ (8002bf8 <HAL_SPI_MspInit+0x1e0>)
 8002af4:	f005 f9ce 	bl	8007e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002af8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002afc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b12:	2305      	movs	r3, #5
 8002b14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4836      	ldr	r0, [pc, #216]	@ (8002bf8 <HAL_SPI_MspInit+0x1e0>)
 8002b20:	f005 f9b8 	bl	8007e94 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream1;
 8002b24:	4b35      	ldr	r3, [pc, #212]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b26:	4a36      	ldr	r2, [pc, #216]	@ (8002c00 <HAL_SPI_MspInit+0x1e8>)
 8002b28:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002b2a:	4b34      	ldr	r3, [pc, #208]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b2c:	2254      	movs	r2, #84	@ 0x54
 8002b2e:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b30:	4b32      	ldr	r3, [pc, #200]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b32:	2240      	movs	r2, #64	@ 0x40
 8002b34:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b36:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b42:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b44:	4b2d      	ldr	r3, [pc, #180]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002b50:	4b2a      	ldr	r3, [pc, #168]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b56:	4b29      	ldr	r3, [pc, #164]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b5c:	4b27      	ldr	r3, [pc, #156]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002b62:	4826      	ldr	r0, [pc, #152]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b64:	f001 fe08 	bl	8004778 <HAL_DMA_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_SPI_MspInit+0x15a>
    {
      Error_Handler();
 8002b6e:	f7fe fa63 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a21      	ldr	r2, [pc, #132]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b76:	679a      	str	r2, [r3, #120]	@ 0x78
 8002b78:	4a20      	ldr	r2, [pc, #128]	@ (8002bfc <HAL_SPI_MspInit+0x1e4>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream2;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002b80:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <HAL_SPI_MspInit+0x1f0>)
 8002b82:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002b86:	2253      	movs	r2, #83	@ 0x53
 8002b88:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002b98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b9c:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b9e:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ba4:	4b17      	ldr	r3, [pc, #92]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8002baa:	4b16      	ldr	r3, [pc, #88]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bb6:	4b13      	ldr	r3, [pc, #76]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002bbc:	4811      	ldr	r0, [pc, #68]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002bbe:	f001 fddb 	bl	8004778 <HAL_DMA_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 8002bc8:	f7fe fa36 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a0d      	ldr	r2, [pc, #52]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002bd0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8002c04 <HAL_SPI_MspInit+0x1ec>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2054      	movs	r0, #84	@ 0x54
 8002bde:	f001 fa28 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002be2:	2054      	movs	r0, #84	@ 0x54
 8002be4:	f001 fa3f 	bl	8004066 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8002be8:	bf00      	nop
 8002bea:	37e8      	adds	r7, #232	@ 0xe8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40013400 	.word	0x40013400
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	58021000 	.word	0x58021000
 8002bfc:	240003d4 	.word	0x240003d4
 8002c00:	40020028 	.word	0x40020028
 8002c04:	2400044c 	.word	0x2400044c
 8002c08:	40020040 	.word	0x40020040

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <NMI_Handler+0x4>

08002c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <MemManage_Handler+0x4>

08002c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c62:	f000 f9a1 	bl	8002fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002c70:	4802      	ldr	r0, [pc, #8]	@ (8002c7c <DMA1_Stream0_IRQHandler+0x10>)
 8002c72:	f003 f8dd 	bl	8005e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	24000280 	.word	0x24000280

08002c80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002c84:	4802      	ldr	r0, [pc, #8]	@ (8002c90 <DMA1_Stream1_IRQHandler+0x10>)
 8002c86:	f003 f8d3 	bl	8005e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	240003d4 	.word	0x240003d4

08002c94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002c98:	4802      	ldr	r0, [pc, #8]	@ (8002ca4 <DMA1_Stream2_IRQHandler+0x10>)
 8002c9a:	f003 f8c9 	bl	8005e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2400044c 	.word	0x2400044c

08002ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nIRQ_Pin);
 8002cac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002cb0:	f005 fad1 	bl	8008256 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002cbc:	4802      	ldr	r0, [pc, #8]	@ (8002cc8 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8002cbe:	f006 fb75 	bl	80093ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	240019c0 	.word	0x240019c0

08002ccc <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002cd0:	4802      	ldr	r0, [pc, #8]	@ (8002cdc <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8002cd2:	f006 fb6b 	bl	80093ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	240019c0 	.word	0x240019c0

08002ce0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002ce4:	4802      	ldr	r0, [pc, #8]	@ (8002cf0 <OTG_HS_IRQHandler+0x10>)
 8002ce6:	f006 fb61 	bl	80093ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	240019c0 	.word	0x240019c0

08002cf4 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002cf8:	4802      	ldr	r0, [pc, #8]	@ (8002d04 <DCMI_PSSI_IRQHandler+0x10>)
 8002cfa:	f001 fbe3 	bl	80044c4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	24000230 	.word	0x24000230

08002d08 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002d0c:	4802      	ldr	r0, [pc, #8]	@ (8002d18 <SPI4_IRQHandler+0x10>)
 8002d0e:	f00b ff5f 	bl	800ebd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2400034c 	.word	0x2400034c

08002d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d20:	4b3e      	ldr	r3, [pc, #248]	@ (8002e1c <SystemInit+0x100>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	4a3d      	ldr	r2, [pc, #244]	@ (8002e1c <SystemInit+0x100>)
 8002d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d30:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <SystemInit+0x104>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d807      	bhi.n	8002d4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d3c:	4b38      	ldr	r3, [pc, #224]	@ (8002e20 <SystemInit+0x104>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 030f 	bic.w	r3, r3, #15
 8002d44:	4a36      	ldr	r2, [pc, #216]	@ (8002e20 <SystemInit+0x104>)
 8002d46:	f043 0303 	orr.w	r3, r3, #3
 8002d4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d4c:	4b35      	ldr	r3, [pc, #212]	@ (8002e24 <SystemInit+0x108>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a34      	ldr	r2, [pc, #208]	@ (8002e24 <SystemInit+0x108>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d58:	4b32      	ldr	r3, [pc, #200]	@ (8002e24 <SystemInit+0x108>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d5e:	4b31      	ldr	r3, [pc, #196]	@ (8002e24 <SystemInit+0x108>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4930      	ldr	r1, [pc, #192]	@ (8002e24 <SystemInit+0x108>)
 8002d64:	4b30      	ldr	r3, [pc, #192]	@ (8002e28 <SystemInit+0x10c>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e20 <SystemInit+0x104>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d76:	4b2a      	ldr	r3, [pc, #168]	@ (8002e20 <SystemInit+0x104>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 030f 	bic.w	r3, r3, #15
 8002d7e:	4a28      	ldr	r2, [pc, #160]	@ (8002e20 <SystemInit+0x104>)
 8002d80:	f043 0303 	orr.w	r3, r3, #3
 8002d84:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002d86:	4b27      	ldr	r3, [pc, #156]	@ (8002e24 <SystemInit+0x108>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002d8c:	4b25      	ldr	r3, [pc, #148]	@ (8002e24 <SystemInit+0x108>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002d92:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <SystemInit+0x108>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d98:	4b22      	ldr	r3, [pc, #136]	@ (8002e24 <SystemInit+0x108>)
 8002d9a:	4a24      	ldr	r2, [pc, #144]	@ (8002e2c <SystemInit+0x110>)
 8002d9c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d9e:	4b21      	ldr	r3, [pc, #132]	@ (8002e24 <SystemInit+0x108>)
 8002da0:	4a23      	ldr	r2, [pc, #140]	@ (8002e30 <SystemInit+0x114>)
 8002da2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002da4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e24 <SystemInit+0x108>)
 8002da6:	4a23      	ldr	r2, [pc, #140]	@ (8002e34 <SystemInit+0x118>)
 8002da8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002daa:	4b1e      	ldr	r3, [pc, #120]	@ (8002e24 <SystemInit+0x108>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002db0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e24 <SystemInit+0x108>)
 8002db2:	4a20      	ldr	r2, [pc, #128]	@ (8002e34 <SystemInit+0x118>)
 8002db4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002db6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <SystemInit+0x108>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002dbc:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <SystemInit+0x108>)
 8002dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8002e34 <SystemInit+0x118>)
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002dc2:	4b18      	ldr	r3, [pc, #96]	@ (8002e24 <SystemInit+0x108>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dc8:	4b16      	ldr	r3, [pc, #88]	@ (8002e24 <SystemInit+0x108>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a15      	ldr	r2, [pc, #84]	@ (8002e24 <SystemInit+0x108>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002dd4:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <SystemInit+0x108>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002dda:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <SystemInit+0x108>)
 8002ddc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d113      	bne.n	8002e10 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002de8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e24 <SystemInit+0x108>)
 8002dea:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002dee:	4a0d      	ldr	r2, [pc, #52]	@ (8002e24 <SystemInit+0x108>)
 8002df0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002df4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002df8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <SystemInit+0x11c>)
 8002dfa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002e00:	4b08      	ldr	r3, [pc, #32]	@ (8002e24 <SystemInit+0x108>)
 8002e02:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002e06:	4a07      	ldr	r2, [pc, #28]	@ (8002e24 <SystemInit+0x108>)
 8002e08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e0c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000ed00 	.word	0xe000ed00
 8002e20:	52002000 	.word	0x52002000
 8002e24:	58024400 	.word	0x58024400
 8002e28:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e2c:	02020200 	.word	0x02020200
 8002e30:	01ff0000 	.word	0x01ff0000
 8002e34:	01010280 	.word	0x01010280
 8002e38:	52004000 	.word	0x52004000

08002e3c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002e40:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <ExitRun0Mode+0x2c>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a08      	ldr	r2, [pc, #32]	@ (8002e68 <ExitRun0Mode+0x2c>)
 8002e46:	f043 0302 	orr.w	r3, r3, #2
 8002e4a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002e4c:	bf00      	nop
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <ExitRun0Mode+0x2c>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f9      	beq.n	8002e4e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	58024800 	.word	0x58024800

08002e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e6c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002ea8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002e70:	f7ff ffe4 	bl	8002e3c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e74:	f7ff ff52 	bl	8002d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e78:	480c      	ldr	r0, [pc, #48]	@ (8002eac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e7a:	490d      	ldr	r1, [pc, #52]	@ (8002eb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e80:	e002      	b.n	8002e88 <LoopCopyDataInit>

08002e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e86:	3304      	adds	r3, #4

08002e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e8c:	d3f9      	bcc.n	8002e82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e90:	4c0a      	ldr	r4, [pc, #40]	@ (8002ebc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e94:	e001      	b.n	8002e9a <LoopFillZerobss>

08002e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e98:	3204      	adds	r2, #4

08002e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e9c:	d3fb      	bcc.n	8002e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e9e:	f010 f9fb 	bl	8013298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ea2:	f7fd fcaf 	bl	8000804 <main>
  bx  lr
 8002ea6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ea8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002eac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002eb0:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8002eb4:	080134cc 	.word	0x080134cc
  ldr r2, =_sbss
 8002eb8:	24000108 	.word	0x24000108
  ldr r4, =_ebss
 8002ebc:	240020c4 	.word	0x240020c4

08002ec0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ec0:	e7fe      	b.n	8002ec0 <ADC_IRQHandler>
	...

08002ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eca:	2003      	movs	r0, #3
 8002ecc:	f001 f8a6 	bl	800401c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ed0:	f008 fa68 	bl	800b3a4 <HAL_RCC_GetSysClockFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <HAL_Init+0x68>)
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	4913      	ldr	r1, [pc, #76]	@ (8002f30 <HAL_Init+0x6c>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002eee:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <HAL_Init+0x68>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8002f30 <HAL_Init+0x6c>)
 8002ef8:	5cd3      	ldrb	r3, [r2, r3]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
 8002f04:	4a0b      	ldr	r2, [pc, #44]	@ (8002f34 <HAL_Init+0x70>)
 8002f06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f08:	4a0b      	ldr	r2, [pc, #44]	@ (8002f38 <HAL_Init+0x74>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f0e:	200f      	movs	r0, #15
 8002f10:	f000 f814 	bl	8002f3c <HAL_InitTick>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e002      	b.n	8002f24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f1e:	f7ff fb01 	bl	8002524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	080134ac 	.word	0x080134ac
 8002f34:	24000008 	.word	0x24000008
 8002f38:	24000004 	.word	0x24000004

08002f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f44:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <HAL_InitTick+0x60>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e021      	b.n	8002f94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f50:	4b13      	ldr	r3, [pc, #76]	@ (8002fa0 <HAL_InitTick+0x64>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <HAL_InitTick+0x60>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 f88b 	bl	8004082 <HAL_SYSTICK_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00e      	b.n	8002f94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b0f      	cmp	r3, #15
 8002f7a:	d80a      	bhi.n	8002f92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f001 f855 	bl	8004032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f88:	4a06      	ldr	r2, [pc, #24]	@ (8002fa4 <HAL_InitTick+0x68>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	24000010 	.word	0x24000010
 8002fa0:	24000004 	.word	0x24000004
 8002fa4:	2400000c 	.word	0x2400000c

08002fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_IncTick+0x20>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_IncTick+0x24>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <HAL_IncTick+0x24>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	24000010 	.word	0x24000010
 8002fcc:	240004dc 	.word	0x240004dc

08002fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_GetTick+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	240004dc 	.word	0x240004dc

08002fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff ffee 	bl	8002fd0 <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d005      	beq.n	800300e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003002:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <HAL_Delay+0x44>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800300e:	bf00      	nop
 8003010:	f7ff ffde 	bl	8002fd0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d8f7      	bhi.n	8003010 <HAL_Delay+0x28>
  {
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	24000010 	.word	0x24000010

08003030 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	609a      	str	r2, [r3, #8]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	609a      	str	r2, [r3, #8]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <LL_ADC_SetChannelPreselection+0x24>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2201      	movs	r2, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	e015      	b.n	80030e8 <LL_ADC_SetChannelPreselection+0x50>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80030d2:	2320      	movs	r3, #32
 80030d4:	e003      	b.n	80030de <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2201      	movs	r2, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	69d2      	ldr	r2, [r2, #28]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3360      	adds	r3, #96	@ 0x60
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	430b      	orrs	r3, r1
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	431a      	orrs	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	611a      	str	r2, [r3, #16]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3360      	adds	r3, #96	@ 0x60
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	431a      	orrs	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	601a      	str	r2, [r3, #0]
  }
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3330      	adds	r3, #48	@ 0x30
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	4413      	add	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	211f      	movs	r1, #31
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	401a      	ands	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	0e9b      	lsrs	r3, r3, #26
 80031de:	f003 011f 	and.w	r1, r3, #31
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	431a      	orrs	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031fe:	b480      	push	{r7}
 8003200:	b087      	sub	sp, #28
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3314      	adds	r3, #20
 800320e:	461a      	mov	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	0e5b      	lsrs	r3, r3, #25
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	4413      	add	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	0d1b      	lsrs	r3, r3, #20
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2107      	movs	r1, #7
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	0d1b      	lsrs	r3, r3, #20
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003248:	bf00      	nop
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f003 0318 	and.w	r3, r3, #24
 8003276:	4908      	ldr	r1, [pc, #32]	@ (8003298 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003278:	40d9      	lsrs	r1, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	400b      	ands	r3, r1
 800327e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003282:	431a      	orrs	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	000fffff 	.word	0x000fffff

0800329c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b04      	ldr	r3, [pc, #16]	@ (80032bc <LL_ADC_DisableDeepPowerDown+0x20>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6093      	str	r3, [r2, #8]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	5fffffc0 	.word	0x5fffffc0

080032c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032d4:	d101      	bne.n	80032da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <LL_ADC_EnableInternalRegulator+0x24>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	6fffffc0 	.word	0x6fffffc0

08003310 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003324:	d101      	bne.n	800332a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <LL_ADC_IsEnabled+0x18>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <LL_ADC_IsEnabled+0x1a>
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d101      	bne.n	8003376 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b08      	cmp	r3, #8
 8003396:	d101      	bne.n	800339c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b089      	sub	sp, #36	@ 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e138      	b.n	8003638 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff f8bf 	bl	8002558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff67 	bl	80032c0 <LL_ADC_IsDeepPowerDownEnabled>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff4d 	bl	800329c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ff82 	bl	8003310 <LL_ADC_IsInternalRegulatorEnabled>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d114      	bne.n	800343c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff ff66 	bl	80032e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800341c:	4b88      	ldr	r3, [pc, #544]	@ (8003640 <HAL_ADC_Init+0x294>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	099b      	lsrs	r3, r3, #6
 8003422:	4a88      	ldr	r2, [pc, #544]	@ (8003644 <HAL_ADC_Init+0x298>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	3301      	adds	r3, #1
 800342c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800342e:	e002      	b.n	8003436 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3b01      	subs	r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f9      	bne.n	8003430 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff65 	bl	8003310 <LL_ADC_IsInternalRegulatorEnabled>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003450:	f043 0210 	orr.w	r2, r3, #16
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ff76 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 8003472:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	f040 80d2 	bne.w	8003626 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 80ce 	bne.w	8003626 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003492:	f043 0202 	orr.w	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff4a 	bl	8003338 <LL_ADC_IsEnabled>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d110      	bne.n	80034cc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034aa:	4867      	ldr	r0, [pc, #412]	@ (8003648 <HAL_ADC_Init+0x29c>)
 80034ac:	f7ff ff44 	bl	8003338 <LL_ADC_IsEnabled>
 80034b0:	4604      	mov	r4, r0
 80034b2:	4866      	ldr	r0, [pc, #408]	@ (800364c <HAL_ADC_Init+0x2a0>)
 80034b4:	f7ff ff40 	bl	8003338 <LL_ADC_IsEnabled>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4323      	orrs	r3, r4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4619      	mov	r1, r3
 80034c6:	4862      	ldr	r0, [pc, #392]	@ (8003650 <HAL_ADC_Init+0x2a4>)
 80034c8:	f7ff fdb2 	bl	8003030 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7d5b      	ldrb	r3, [r3, #21]
 80034d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034d6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80034dc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7f1b      	ldrb	r3, [r3, #28]
 80034e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7f1b      	ldrb	r3, [r3, #28]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	045b      	lsls	r3, r3, #17
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	4b4c      	ldr	r3, [pc, #304]	@ (8003654 <HAL_ADC_Init+0x2a8>)
 8003522:	4013      	ands	r3, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	69b9      	ldr	r1, [r7, #24]
 800352a:	430b      	orrs	r3, r1
 800352c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ff13 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 8003538:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff ff20 	bl	8003384 <LL_ADC_INJ_IsConversionOngoing>
 8003544:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d14a      	bne.n	80035e2 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d147      	bne.n	80035e2 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	7d1b      	ldrb	r3, [r3, #20]
 8003556:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	4b3c      	ldr	r3, [pc, #240]	@ (8003658 <HAL_ADC_Init+0x2ac>)
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	430b      	orrs	r3, r1
 8003572:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800357a:	2b01      	cmp	r3, #1
 800357c:	d11b      	bne.n	80035b6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	4b34      	ldr	r3, [pc, #208]	@ (800365c <HAL_ADC_Init+0x2b0>)
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003592:	3a01      	subs	r2, #1
 8003594:	0411      	lsls	r1, r2, #16
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800359a:	4311      	orrs	r1, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035a0:	4311      	orrs	r1, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035a6:	430a      	orrs	r2, r1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	611a      	str	r2, [r3, #16]
 80035b4:	e007      	b.n	80035c6 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fabd 	bl	8003b5c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10c      	bne.n	8003604 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	f023 010f 	bic.w	r1, r3, #15
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30
 8003602:	e007      	b.n	8003614 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 020f 	bic.w	r2, r2, #15
 8003612:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003618:	f023 0303 	bic.w	r3, r3, #3
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	655a      	str	r2, [r3, #84]	@ 0x54
 8003624:	e007      	b.n	8003636 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362a:	f043 0210 	orr.w	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003636:	7ffb      	ldrb	r3, [r7, #31]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3724      	adds	r7, #36	@ 0x24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd90      	pop	{r4, r7, pc}
 8003640:	24000004 	.word	0x24000004
 8003644:	053e2d63 	.word	0x053e2d63
 8003648:	40022000 	.word	0x40022000
 800364c:	40022100 	.word	0x40022100
 8003650:	40022300 	.word	0x40022300
 8003654:	fff0c003 	.word	0xfff0c003
 8003658:	ffffbffc 	.word	0xffffbffc
 800365c:	fc00f81e 	.word	0xfc00f81e

08003660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b08d      	sub	sp, #52	@ 0x34
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a5b      	ldr	r2, [pc, #364]	@ (80037e8 <HAL_ADC_ConfigChannel+0x188>)
 800367a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x2a>
 8003686:	2302      	movs	r3, #2
 8003688:	e263      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x4f2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fe61 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 8248 	bne.w	8003b34 <HAL_ADC_ConfigChannel+0x4d4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	db2c      	blt.n	8003706 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d108      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x6a>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0e9b      	lsrs	r3, r3, #26
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2201      	movs	r2, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	e016      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x98>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	613b      	str	r3, [r7, #16]
  return result;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e003      	b.n	80036ee <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2201      	movs	r2, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	69d1      	ldr	r1, [r2, #28]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	430b      	orrs	r3, r1
 8003704:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	f7ff fd47 	bl	80031a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fe1e 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 8003722:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fe2b 	bl	8003384 <LL_ADC_INJ_IsConversionOngoing>
 800372e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 80a2 	bne.w	800387c <HAL_ADC_ConfigChannel+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 809e 	bne.w	800387c <HAL_ADC_ConfigChannel+0x21c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6819      	ldr	r1, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	461a      	mov	r2, r3
 800374e:	f7ff fd56 	bl	80031fe <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x118>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	e00a      	b.n	800378e <HAL_ADC_ConfigChannel+0x12e>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d029      	beq.n	80037ec <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6919      	ldr	r1, [r3, #16]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f7ff fcaa 	bl	80030fe <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6919      	ldr	r1, [r3, #16]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	7e5b      	ldrb	r3, [r3, #25]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x160>
 80037ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80037be:	e000      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x162>
 80037c0:	2300      	movs	r3, #0
 80037c2:	461a      	mov	r2, r3
 80037c4:	f7ff fcd4 	bl	8003170 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6919      	ldr	r1, [r3, #16]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	7e1b      	ldrb	r3, [r3, #24]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d102      	bne.n	80037de <HAL_ADC_ConfigChannel+0x17e>
 80037d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80037dc:	e000      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x180>
 80037de:	2300      	movs	r3, #0
 80037e0:	461a      	mov	r2, r3
 80037e2:	f7ff fcac 	bl	800313e <LL_ADC_SetDataRightShift>
 80037e6:	e049      	b.n	800387c <HAL_ADC_ConfigChannel+0x21c>
 80037e8:	47ff0000 	.word	0x47ff0000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	069b      	lsls	r3, r3, #26
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d107      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x1b0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800380e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003816:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	069b      	lsls	r3, r3, #26
 8003820:	429a      	cmp	r2, r3
 8003822:	d107      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x1d4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003832:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800383a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	069b      	lsls	r3, r3, #26
 8003844:	429a      	cmp	r2, r3
 8003846:	d107      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x1f8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003856:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800385e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	069b      	lsls	r3, r3, #26
 8003868:	429a      	cmp	r2, r3
 800386a:	d107      	bne.n	800387c <HAL_ADC_ConfigChannel+0x21c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800387a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fd59 	bl	8003338 <LL_ADC_IsEnabled>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 815c 	bne.w	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	461a      	mov	r2, r3
 800389c:	f7ff fcda 	bl	8003254 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a89      	ldr	r2, [pc, #548]	@ (8003acc <HAL_ADC_ConfigChannel+0x46c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	f040 809a 	bne.w	80039e0 <HAL_ADC_ConfigChannel+0x380>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4986      	ldr	r1, [pc, #536]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x470>)
 80038b6:	428b      	cmp	r3, r1
 80038b8:	d147      	bne.n	800394a <HAL_ADC_ConfigChannel+0x2ea>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4985      	ldr	r1, [pc, #532]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x474>)
 80038c0:	428b      	cmp	r3, r1
 80038c2:	d040      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x2e6>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4983      	ldr	r1, [pc, #524]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x478>)
 80038ca:	428b      	cmp	r3, r1
 80038cc:	d039      	beq.n	8003942 <HAL_ADC_ConfigChannel+0x2e2>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4982      	ldr	r1, [pc, #520]	@ (8003adc <HAL_ADC_ConfigChannel+0x47c>)
 80038d4:	428b      	cmp	r3, r1
 80038d6:	d032      	beq.n	800393e <HAL_ADC_ConfigChannel+0x2de>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4980      	ldr	r1, [pc, #512]	@ (8003ae0 <HAL_ADC_ConfigChannel+0x480>)
 80038de:	428b      	cmp	r3, r1
 80038e0:	d02b      	beq.n	800393a <HAL_ADC_ConfigChannel+0x2da>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	497f      	ldr	r1, [pc, #508]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x484>)
 80038e8:	428b      	cmp	r3, r1
 80038ea:	d024      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x2d6>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	497d      	ldr	r1, [pc, #500]	@ (8003ae8 <HAL_ADC_ConfigChannel+0x488>)
 80038f2:	428b      	cmp	r3, r1
 80038f4:	d01d      	beq.n	8003932 <HAL_ADC_ConfigChannel+0x2d2>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	497c      	ldr	r1, [pc, #496]	@ (8003aec <HAL_ADC_ConfigChannel+0x48c>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	d016      	beq.n	800392e <HAL_ADC_ConfigChannel+0x2ce>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	497a      	ldr	r1, [pc, #488]	@ (8003af0 <HAL_ADC_ConfigChannel+0x490>)
 8003906:	428b      	cmp	r3, r1
 8003908:	d00f      	beq.n	800392a <HAL_ADC_ConfigChannel+0x2ca>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4979      	ldr	r1, [pc, #484]	@ (8003af4 <HAL_ADC_ConfigChannel+0x494>)
 8003910:	428b      	cmp	r3, r1
 8003912:	d008      	beq.n	8003926 <HAL_ADC_ConfigChannel+0x2c6>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4977      	ldr	r1, [pc, #476]	@ (8003af8 <HAL_ADC_ConfigChannel+0x498>)
 800391a:	428b      	cmp	r3, r1
 800391c:	d101      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x2c2>
 800391e:	4b77      	ldr	r3, [pc, #476]	@ (8003afc <HAL_ADC_ConfigChannel+0x49c>)
 8003920:	e05a      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 8003922:	2300      	movs	r3, #0
 8003924:	e058      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 8003926:	4b76      	ldr	r3, [pc, #472]	@ (8003b00 <HAL_ADC_ConfigChannel+0x4a0>)
 8003928:	e056      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 800392a:	4b76      	ldr	r3, [pc, #472]	@ (8003b04 <HAL_ADC_ConfigChannel+0x4a4>)
 800392c:	e054      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 800392e:	4b70      	ldr	r3, [pc, #448]	@ (8003af0 <HAL_ADC_ConfigChannel+0x490>)
 8003930:	e052      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 8003932:	4b6e      	ldr	r3, [pc, #440]	@ (8003aec <HAL_ADC_ConfigChannel+0x48c>)
 8003934:	e050      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 8003936:	4b74      	ldr	r3, [pc, #464]	@ (8003b08 <HAL_ADC_ConfigChannel+0x4a8>)
 8003938:	e04e      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 800393a:	4b74      	ldr	r3, [pc, #464]	@ (8003b0c <HAL_ADC_ConfigChannel+0x4ac>)
 800393c:	e04c      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 800393e:	4b74      	ldr	r3, [pc, #464]	@ (8003b10 <HAL_ADC_ConfigChannel+0x4b0>)
 8003940:	e04a      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 8003942:	4b74      	ldr	r3, [pc, #464]	@ (8003b14 <HAL_ADC_ConfigChannel+0x4b4>)
 8003944:	e048      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 8003946:	2301      	movs	r3, #1
 8003948:	e046      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4972      	ldr	r1, [pc, #456]	@ (8003b18 <HAL_ADC_ConfigChannel+0x4b8>)
 8003950:	428b      	cmp	r3, r1
 8003952:	d140      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x376>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	495e      	ldr	r1, [pc, #376]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x474>)
 800395a:	428b      	cmp	r3, r1
 800395c:	d039      	beq.n	80039d2 <HAL_ADC_ConfigChannel+0x372>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	495d      	ldr	r1, [pc, #372]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x478>)
 8003964:	428b      	cmp	r3, r1
 8003966:	d032      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x36e>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	495b      	ldr	r1, [pc, #364]	@ (8003adc <HAL_ADC_ConfigChannel+0x47c>)
 800396e:	428b      	cmp	r3, r1
 8003970:	d02b      	beq.n	80039ca <HAL_ADC_ConfigChannel+0x36a>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	495a      	ldr	r1, [pc, #360]	@ (8003ae0 <HAL_ADC_ConfigChannel+0x480>)
 8003978:	428b      	cmp	r3, r1
 800397a:	d024      	beq.n	80039c6 <HAL_ADC_ConfigChannel+0x366>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4958      	ldr	r1, [pc, #352]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x484>)
 8003982:	428b      	cmp	r3, r1
 8003984:	d01d      	beq.n	80039c2 <HAL_ADC_ConfigChannel+0x362>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4957      	ldr	r1, [pc, #348]	@ (8003ae8 <HAL_ADC_ConfigChannel+0x488>)
 800398c:	428b      	cmp	r3, r1
 800398e:	d016      	beq.n	80039be <HAL_ADC_ConfigChannel+0x35e>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4955      	ldr	r1, [pc, #340]	@ (8003aec <HAL_ADC_ConfigChannel+0x48c>)
 8003996:	428b      	cmp	r3, r1
 8003998:	d00f      	beq.n	80039ba <HAL_ADC_ConfigChannel+0x35a>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4954      	ldr	r1, [pc, #336]	@ (8003af0 <HAL_ADC_ConfigChannel+0x490>)
 80039a0:	428b      	cmp	r3, r1
 80039a2:	d008      	beq.n	80039b6 <HAL_ADC_ConfigChannel+0x356>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4953      	ldr	r1, [pc, #332]	@ (8003af8 <HAL_ADC_ConfigChannel+0x498>)
 80039aa:	428b      	cmp	r3, r1
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x352>
 80039ae:	4b53      	ldr	r3, [pc, #332]	@ (8003afc <HAL_ADC_ConfigChannel+0x49c>)
 80039b0:	e012      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 80039b2:	2300      	movs	r3, #0
 80039b4:	e010      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 80039b6:	4b53      	ldr	r3, [pc, #332]	@ (8003b04 <HAL_ADC_ConfigChannel+0x4a4>)
 80039b8:	e00e      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 80039ba:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <HAL_ADC_ConfigChannel+0x490>)
 80039bc:	e00c      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 80039be:	4b4b      	ldr	r3, [pc, #300]	@ (8003aec <HAL_ADC_ConfigChannel+0x48c>)
 80039c0:	e00a      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 80039c2:	4b51      	ldr	r3, [pc, #324]	@ (8003b08 <HAL_ADC_ConfigChannel+0x4a8>)
 80039c4:	e008      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 80039c6:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <HAL_ADC_ConfigChannel+0x4ac>)
 80039c8:	e006      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 80039ca:	4b51      	ldr	r3, [pc, #324]	@ (8003b10 <HAL_ADC_ConfigChannel+0x4b0>)
 80039cc:	e004      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 80039ce:	4b51      	ldr	r3, [pc, #324]	@ (8003b14 <HAL_ADC_ConfigChannel+0x4b4>)
 80039d0:	e002      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x378>
 80039d6:	2300      	movs	r3, #0
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7ff fb5c 	bl	8003098 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f280 80ae 	bge.w	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039ea:	484c      	ldr	r0, [pc, #304]	@ (8003b1c <HAL_ADC_ConfigChannel+0x4bc>)
 80039ec:	f7ff fb46 	bl	800307c <LL_ADC_GetCommonPathInternalCh>
 80039f0:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039f2:	4837      	ldr	r0, [pc, #220]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x470>)
 80039f4:	f7ff fca0 	bl	8003338 <LL_ADC_IsEnabled>
 80039f8:	4604      	mov	r4, r0
 80039fa:	4847      	ldr	r0, [pc, #284]	@ (8003b18 <HAL_ADC_ConfigChannel+0x4b8>)
 80039fc:	f7ff fc9c 	bl	8003338 <LL_ADC_IsEnabled>
 8003a00:	4603      	mov	r3, r0
 8003a02:	4323      	orrs	r3, r4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d156      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x456>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a44      	ldr	r2, [pc, #272]	@ (8003b20 <HAL_ADC_ConfigChannel+0x4c0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d123      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x3fa>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11e      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x3fa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a3d      	ldr	r2, [pc, #244]	@ (8003b18 <HAL_ADC_ConfigChannel+0x4b8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f040 808f 	bne.w	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a2e:	4619      	mov	r1, r3
 8003a30:	483a      	ldr	r0, [pc, #232]	@ (8003b1c <HAL_ADC_ConfigChannel+0x4bc>)
 8003a32:	f7ff fb10 	bl	8003056 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a36:	4b3b      	ldr	r3, [pc, #236]	@ (8003b24 <HAL_ADC_ConfigChannel+0x4c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b28 <HAL_ADC_ConfigChannel+0x4c8>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	3301      	adds	r3, #1
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003a4a:	e002      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x3f2>
              {
                wait_loop_index--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f9      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a58:	e075      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a33      	ldr	r2, [pc, #204]	@ (8003b2c <HAL_ADC_ConfigChannel+0x4cc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d111      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x428>
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10c      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x428>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a29      	ldr	r2, [pc, #164]	@ (8003b18 <HAL_ADC_ConfigChannel+0x4b8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d166      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4826      	ldr	r0, [pc, #152]	@ (8003b1c <HAL_ADC_ConfigChannel+0x4bc>)
 8003a82:	f7ff fae8 	bl	8003056 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a86:	e05e      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	@ (8003b30 <HAL_ADC_ConfigChannel+0x4d0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d159      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d154      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b18 <HAL_ADC_ConfigChannel+0x4b8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d14f      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003aac:	4619      	mov	r1, r3
 8003aae:	481b      	ldr	r0, [pc, #108]	@ (8003b1c <HAL_ADC_ConfigChannel+0x4bc>)
 8003ab0:	f7ff fad1 	bl	8003056 <LL_ADC_SetCommonPathInternalCh>
 8003ab4:	e047      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aba:	f043 0220 	orr.w	r2, r3, #32
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003ac8:	e03d      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
 8003aca:	bf00      	nop
 8003acc:	47ff0000 	.word	0x47ff0000
 8003ad0:	40022000 	.word	0x40022000
 8003ad4:	04300002 	.word	0x04300002
 8003ad8:	08600004 	.word	0x08600004
 8003adc:	0c900008 	.word	0x0c900008
 8003ae0:	10c00010 	.word	0x10c00010
 8003ae4:	14f00020 	.word	0x14f00020
 8003ae8:	2a000400 	.word	0x2a000400
 8003aec:	2e300800 	.word	0x2e300800
 8003af0:	32601000 	.word	0x32601000
 8003af4:	43210000 	.word	0x43210000
 8003af8:	4b840000 	.word	0x4b840000
 8003afc:	4fb80000 	.word	0x4fb80000
 8003b00:	47520000 	.word	0x47520000
 8003b04:	36902000 	.word	0x36902000
 8003b08:	25b00200 	.word	0x25b00200
 8003b0c:	21800100 	.word	0x21800100
 8003b10:	1d500080 	.word	0x1d500080
 8003b14:	19200040 	.word	0x19200040
 8003b18:	40022100 	.word	0x40022100
 8003b1c:	40022300 	.word	0x40022300
 8003b20:	cb840000 	.word	0xcb840000
 8003b24:	24000004 	.word	0x24000004
 8003b28:	053e2d63 	.word	0x053e2d63
 8003b2c:	bac04000 	.word	0xbac04000
 8003b30:	cfb80000 	.word	0xcfb80000
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3734      	adds	r7, #52	@ 0x34
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd90      	pop	{r4, r7, pc}
 8003b5a:	bf00      	nop

08003b5c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b64:	4b60      	ldr	r3, [pc, #384]	@ (8003ce8 <ADC_ConfigureBoostMode+0x18c>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01c      	beq.n	8003baa <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b70:	f007 fd92 	bl	800b698 <HAL_RCC_GetHCLKFreq>
 8003b74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b7e:	d010      	beq.n	8003ba2 <ADC_ConfigureBoostMode+0x46>
 8003b80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b84:	d873      	bhi.n	8003c6e <ADC_ConfigureBoostMode+0x112>
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8a:	d002      	beq.n	8003b92 <ADC_ConfigureBoostMode+0x36>
 8003b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b90:	d16d      	bne.n	8003c6e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	60fb      	str	r3, [r7, #12]
        break;
 8003ba0:	e068      	b.n	8003c74 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	60fb      	str	r3, [r7, #12]
        break;
 8003ba8:	e064      	b.n	8003c74 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003baa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	f008 ff75 	bl	800caa0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bb6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003bc0:	d051      	beq.n	8003c66 <ADC_ConfigureBoostMode+0x10a>
 8003bc2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003bc6:	d854      	bhi.n	8003c72 <ADC_ConfigureBoostMode+0x116>
 8003bc8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003bcc:	d047      	beq.n	8003c5e <ADC_ConfigureBoostMode+0x102>
 8003bce:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003bd2:	d84e      	bhi.n	8003c72 <ADC_ConfigureBoostMode+0x116>
 8003bd4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003bd8:	d03d      	beq.n	8003c56 <ADC_ConfigureBoostMode+0xfa>
 8003bda:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003bde:	d848      	bhi.n	8003c72 <ADC_ConfigureBoostMode+0x116>
 8003be0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003be4:	d033      	beq.n	8003c4e <ADC_ConfigureBoostMode+0xf2>
 8003be6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bea:	d842      	bhi.n	8003c72 <ADC_ConfigureBoostMode+0x116>
 8003bec:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003bf0:	d029      	beq.n	8003c46 <ADC_ConfigureBoostMode+0xea>
 8003bf2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003bf6:	d83c      	bhi.n	8003c72 <ADC_ConfigureBoostMode+0x116>
 8003bf8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003bfc:	d01a      	beq.n	8003c34 <ADC_ConfigureBoostMode+0xd8>
 8003bfe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003c02:	d836      	bhi.n	8003c72 <ADC_ConfigureBoostMode+0x116>
 8003c04:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003c08:	d014      	beq.n	8003c34 <ADC_ConfigureBoostMode+0xd8>
 8003c0a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003c0e:	d830      	bhi.n	8003c72 <ADC_ConfigureBoostMode+0x116>
 8003c10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c14:	d00e      	beq.n	8003c34 <ADC_ConfigureBoostMode+0xd8>
 8003c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c1a:	d82a      	bhi.n	8003c72 <ADC_ConfigureBoostMode+0x116>
 8003c1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c20:	d008      	beq.n	8003c34 <ADC_ConfigureBoostMode+0xd8>
 8003c22:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c26:	d824      	bhi.n	8003c72 <ADC_ConfigureBoostMode+0x116>
 8003c28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c2c:	d002      	beq.n	8003c34 <ADC_ConfigureBoostMode+0xd8>
 8003c2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c32:	d11e      	bne.n	8003c72 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	0c9b      	lsrs	r3, r3, #18
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	60fb      	str	r3, [r7, #12]
        break;
 8003c44:	e016      	b.n	8003c74 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	60fb      	str	r3, [r7, #12]
        break;
 8003c4c:	e012      	b.n	8003c74 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	60fb      	str	r3, [r7, #12]
        break;
 8003c54:	e00e      	b.n	8003c74 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	099b      	lsrs	r3, r3, #6
 8003c5a:	60fb      	str	r3, [r7, #12]
        break;
 8003c5c:	e00a      	b.n	8003c74 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	09db      	lsrs	r3, r3, #7
 8003c62:	60fb      	str	r3, [r7, #12]
        break;
 8003c64:	e006      	b.n	8003c74 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	60fb      	str	r3, [r7, #12]
        break;
 8003c6c:	e002      	b.n	8003c74 <ADC_ConfigureBoostMode+0x118>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003c72:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cec <ADC_ConfigureBoostMode+0x190>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d808      	bhi.n	8003c94 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c90:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003c92:	e025      	b.n	8003ce0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a16      	ldr	r2, [pc, #88]	@ (8003cf0 <ADC_ConfigureBoostMode+0x194>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d80a      	bhi.n	8003cb2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cae:	609a      	str	r2, [r3, #8]
}
 8003cb0:	e016      	b.n	8003ce0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf4 <ADC_ConfigureBoostMode+0x198>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d80a      	bhi.n	8003cd0 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ccc:	609a      	str	r2, [r3, #8]
}
 8003cce:	e007      	b.n	8003ce0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003cde:	609a      	str	r2, [r3, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40022300 	.word	0x40022300
 8003cec:	005f5e10 	.word	0x005f5e10
 8003cf0:	00bebc20 	.word	0x00bebc20
 8003cf4:	017d7840 	.word	0x017d7840

08003cf8 <LL_ADC_IsEnabled>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <LL_ADC_IsEnabled+0x18>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <LL_ADC_IsEnabled+0x1a>
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <LL_ADC_REG_IsConversionOngoing>:
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d101      	bne.n	8003d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b09f      	sub	sp, #124	@ 0x7c
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e080      	b.n	8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a3d      	ldr	r2, [pc, #244]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d102      	bne.n	8003d82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	e001      	b.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e05f      	b.n	8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ffb9 	bl	8003d1e <LL_ADC_REG_IsConversionOngoing>
 8003dac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff ffb3 	bl	8003d1e <LL_ADC_REG_IsConversionOngoing>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d141      	bne.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d13e      	bne.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003de0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003de2:	4822      	ldr	r0, [pc, #136]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003de4:	f7ff ff88 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003de8:	4604      	mov	r4, r0
 8003dea:	4821      	ldr	r0, [pc, #132]	@ (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003dec:	f7ff ff84 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003df0:	4603      	mov	r3, r0
 8003df2:	4323      	orrs	r3, r4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d12e      	bne.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	6811      	ldr	r1, [r2, #0]
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	6892      	ldr	r2, [r2, #8]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e0e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e10:	e021      	b.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e1e:	4813      	ldr	r0, [pc, #76]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003e20:	f7ff ff6a 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003e24:	4604      	mov	r4, r0
 8003e26:	4812      	ldr	r0, [pc, #72]	@ (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003e28:	f7ff ff66 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4323      	orrs	r3, r4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d110      	bne.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	4b0f      	ldr	r3, [pc, #60]	@ (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e3e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e40:	e009      	b.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003e54:	e000      	b.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e56:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e60:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	377c      	adds	r7, #124	@ 0x7c
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}
 8003e6c:	40022000 	.word	0x40022000
 8003e70:	40022100 	.word	0x40022100
 8003e74:	40022300 	.word	0x40022300
 8003e78:	fffff0e0 	.word	0xfffff0e0

08003e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <__NVIC_SetPriorityGrouping+0x40>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ea4:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eaa:	4a04      	ldr	r2, [pc, #16]	@ (8003ebc <__NVIC_SetPriorityGrouping+0x40>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	60d3      	str	r3, [r2, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00
 8003ec0:	05fa0000 	.word	0x05fa0000

08003ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <__NVIC_GetPriorityGrouping+0x18>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	f003 0307 	and.w	r3, r3, #7
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	db0b      	blt.n	8003f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	f003 021f 	and.w	r2, r3, #31
 8003ef8:	4907      	ldr	r1, [pc, #28]	@ (8003f18 <__NVIC_EnableIRQ+0x38>)
 8003efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2001      	movs	r0, #1
 8003f02:	fa00 f202 	lsl.w	r2, r0, r2
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000e100 	.word	0xe000e100

08003f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db0a      	blt.n	8003f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	490c      	ldr	r1, [pc, #48]	@ (8003f68 <__NVIC_SetPriority+0x4c>)
 8003f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f44:	e00a      	b.n	8003f5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4908      	ldr	r1, [pc, #32]	@ (8003f6c <__NVIC_SetPriority+0x50>)
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	3b04      	subs	r3, #4
 8003f54:	0112      	lsls	r2, r2, #4
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	440b      	add	r3, r1
 8003f5a:	761a      	strb	r2, [r3, #24]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000e100 	.word	0xe000e100
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	@ 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f1c3 0307 	rsb	r3, r3, #7
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	bf28      	it	cs
 8003f8e:	2304      	movcs	r3, #4
 8003f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <NVIC_EncodePriority+0x30>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3b03      	subs	r3, #3
 8003f9e:	e000      	b.n	8003fa2 <NVIC_EncodePriority+0x32>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43d9      	mvns	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	4313      	orrs	r3, r2
         );
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	@ 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fe8:	d301      	bcc.n	8003fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00f      	b.n	800400e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fee:	4a0a      	ldr	r2, [pc, #40]	@ (8004018 <SysTick_Config+0x40>)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff6:	210f      	movs	r1, #15
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	f7ff ff8e 	bl	8003f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <SysTick_Config+0x40>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004006:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <SysTick_Config+0x40>)
 8004008:	2207      	movs	r2, #7
 800400a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	e000e010 	.word	0xe000e010

0800401c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ff29 	bl	8003e7c <__NVIC_SetPriorityGrouping>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	4603      	mov	r3, r0
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004040:	f7ff ff40 	bl	8003ec4 <__NVIC_GetPriorityGrouping>
 8004044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff ff90 	bl	8003f70 <NVIC_EncodePriority>
 8004050:	4602      	mov	r2, r0
 8004052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff5f 	bl	8003f1c <__NVIC_SetPriority>
}
 800405e:	bf00      	nop
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	4603      	mov	r3, r0
 800406e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff33 	bl	8003ee0 <__NVIC_EnableIRQ>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ffa4 	bl	8003fd8 <SysTick_Config>
 8004090:	4603      	mov	r3, r0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80040a0:	f3bf 8f5f 	dmb	sy
}
 80040a4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80040a6:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <HAL_MPU_Disable+0x28>)
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	4a06      	ldr	r2, [pc, #24]	@ (80040c4 <HAL_MPU_Disable+0x28>)
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80040b2:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_MPU_Disable+0x2c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	605a      	str	r2, [r3, #4]
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	e000ed00 	.word	0xe000ed00
 80040c8:	e000ed90 	.word	0xe000ed90

080040cc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80040d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004104 <HAL_MPU_Enable+0x38>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80040de:	4b0a      	ldr	r3, [pc, #40]	@ (8004108 <HAL_MPU_Enable+0x3c>)
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	4a09      	ldr	r2, [pc, #36]	@ (8004108 <HAL_MPU_Enable+0x3c>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80040ea:	f3bf 8f4f 	dsb	sy
}
 80040ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040f0:	f3bf 8f6f 	isb	sy
}
 80040f4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	e000ed90 	.word	0xe000ed90
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	785a      	ldrb	r2, [r3, #1]
 8004118:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <HAL_MPU_ConfigRegion+0x7c>)
 800411a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800411c:	4b1a      	ldr	r3, [pc, #104]	@ (8004188 <HAL_MPU_ConfigRegion+0x7c>)
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	4a19      	ldr	r2, [pc, #100]	@ (8004188 <HAL_MPU_ConfigRegion+0x7c>)
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004128:	4a17      	ldr	r2, [pc, #92]	@ (8004188 <HAL_MPU_ConfigRegion+0x7c>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	7b1b      	ldrb	r3, [r3, #12]
 8004134:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7adb      	ldrb	r3, [r3, #11]
 800413a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800413c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	7a9b      	ldrb	r3, [r3, #10]
 8004142:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004144:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	7b5b      	ldrb	r3, [r3, #13]
 800414a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800414c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7b9b      	ldrb	r3, [r3, #14]
 8004152:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004154:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	7bdb      	ldrb	r3, [r3, #15]
 800415a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800415c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7a5b      	ldrb	r3, [r3, #9]
 8004162:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004164:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	7a1b      	ldrb	r3, [r3, #8]
 800416a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800416c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	7812      	ldrb	r2, [r2, #0]
 8004172:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004174:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004176:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004178:	6113      	str	r3, [r2, #16]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	e000ed90 	.word	0xe000ed90

0800418c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e069      	b.n	8004272 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fe fad6 	bl	800275c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6819      	ldr	r1, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b2a      	ldr	r3, [pc, #168]	@ (800427c <HAL_DCMI_Init+0xf0>)
 80041d2:	400b      	ands	r3, r1
 80041d4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6819      	ldr	r1, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80041ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80041f6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004202:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800420e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800421a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b10      	cmp	r3, #16
 800422a:	d112      	bne.n	8004252 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	7f1b      	ldrb	r3, [r3, #28]
 8004230:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	7f5b      	ldrb	r3, [r3, #29]
 8004236:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004238:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	7f9b      	ldrb	r3, [r3, #30]
 800423e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004240:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	7fdb      	ldrb	r3, [r3, #31]
 8004248:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800424e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004250:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 021e 	orr.w	r2, r2, #30
 8004260:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	ffe0f007 	.word	0xffe0f007

08004280 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_DCMI_Start_DMA+0x1c>
 8004298:	2302      	movs	r3, #2
 800429a:	e0ab      	b.n	80043f4 <HAL_DCMI_Start_DMA+0x174>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042ba:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0202 	bic.w	r2, r2, #2
 80042ca:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e0:	4a46      	ldr	r2, [pc, #280]	@ (80043fc <HAL_DCMI_Start_DMA+0x17c>)
 80042e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e8:	4a45      	ldr	r2, [pc, #276]	@ (8004400 <HAL_DCMI_Start_DMA+0x180>)
 80042ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f0:	2200      	movs	r2, #0
 80042f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004312:	d219      	bcs.n	8004348 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3328      	adds	r3, #40	@ 0x28
 800431e:	4619      	mov	r1, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	f000 fdb6 	bl	8004e94 <HAL_DMA_Start_IT>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d055      	beq.n	80043da <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2240      	movs	r2, #64	@ 0x40
 8004332:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e055      	b.n	80043f4 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434c:	4a2b      	ldr	r2, [pc, #172]	@ (80043fc <HAL_DCMI_Start_DMA+0x17c>)
 800434e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004362:	e009      	b.n	8004378 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	085a      	lsrs	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004372:	005a      	lsls	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004380:	d2f0      	bcs.n	8004364 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004386:	1e9a      	subs	r2, r3, #2
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3328      	adds	r3, #40	@ 0x28
 80043aa:	4619      	mov	r1, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	f003 f8bd 	bl	8007534 <HAL_DMAEx_MultiBufferStart_IT>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00c      	beq.n	80043da <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2240      	movs	r2, #64	@ 0x40
 80043c4:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e00c      	b.n	80043f4 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	08004619 	.word	0x08004619
 8004400:	0800473f 	.word	0x0800473f

08004404 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800440c:	4b2b      	ldr	r3, [pc, #172]	@ (80044bc <HAL_DCMI_Stop+0xb8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2b      	ldr	r2, [pc, #172]	@ (80044c0 <HAL_DCMI_Stop+0xbc>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0a5b      	lsrs	r3, r3, #9
 8004418:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_DCMI_Stop+0x30>
 8004430:	2302      	movs	r3, #2
 8004432:	e03f      	b.n	80044b4 <HAL_DCMI_Stop+0xb0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b01      	subs	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d108      	bne.n	8004472 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004464:	f043 0220 	orr.w	r2, r3, #32
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	72fb      	strb	r3, [r7, #11]
      break;
 8004470:	e006      	b.n	8004480 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e9      	bne.n	8004454 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800448e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004494:	4618      	mov	r0, r3
 8004496:	f000 ff67 	bl	8005368 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 80044b2:	7afb      	ldrb	r3, [r7, #11]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	24000004 	.word	0x24000004
 80044c0:	10624dd3 	.word	0x10624dd3

080044c4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d016      	beq.n	800450c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2204      	movs	r2, #4
 80044e4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ea:	f043 0202 	orr.w	r2, r3, #2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2204      	movs	r2, #4
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044fe:	4a31      	ldr	r2, [pc, #196]	@ (80045c4 <HAL_DCMI_IRQHandler+0x100>)
 8004500:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fa4c 	bl	80059a4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2202      	movs	r2, #2
 800451c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004522:	f043 0201 	orr.w	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2204      	movs	r2, #4
 800452e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004536:	4a23      	ldr	r2, [pc, #140]	@ (80045c4 <HAL_DCMI_IRQHandler+0x100>)
 8004538:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453e:	4618      	mov	r0, r3
 8004540:	f001 fa30 	bl	80059a4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2210      	movs	r2, #16
 8004554:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f840 	bl	80045dc <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d006      	beq.n	8004574 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2208      	movs	r2, #8
 800456c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f83e 	bl	80045f0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01d      	beq.n	80045ba <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d107      	bne.n	800459c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 021e 	bic.w	r2, r2, #30
 800459a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2201      	movs	r2, #1
 80045b2:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f825 	bl	8004604 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	0800473f 	.word	0x0800473f

080045c8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004624:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462a:	2b00      	cmp	r3, #0
 800462c:	d043      	beq.n	80046b6 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800463a:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d118      	bne.n	800467a <DCMI_DMAXferCplt+0x62>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d015      	beq.n	800467a <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004660:	00da      	lsls	r2, r3, #3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4413      	add	r3, r2
 8004666:	2200      	movs	r2, #0
 8004668:	4619      	mov	r1, r3
 800466a:	f003 fac1 	bl	8007bf0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	639a      	str	r2, [r3, #56]	@ 0x38
 8004678:	e044      	b.n	8004704 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d13c      	bne.n	8004704 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469c:	00da      	lsls	r2, r3, #3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4413      	add	r3, r2
 80046a2:	2201      	movs	r2, #1
 80046a4:	4619      	mov	r1, r3
 80046a6:	f003 faa3 	bl	8007bf0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ae:	1e5a      	subs	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80046b4:	e026      	b.n	8004704 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d006      	beq.n	80046d4 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	e017      	b.n	8004704 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e8:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	0099      	lsls	r1, r3, #2
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	440a      	add	r2, r1
 80046fa:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	429a      	cmp	r2, r3
 800470e:	d112      	bne.n	8004736 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d103      	bne.n	8004736 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474a:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004752:	2b02      	cmp	r3, #2
 8004754:	d009      	beq.n	800476a <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004762:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff ff2c 	bl	80045c8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004780:	f7fe fc26 	bl	8002fd0 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e37d      	b.n	8004e8c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a66      	ldr	r2, [pc, #408]	@ (8004930 <HAL_DMA_Init+0x1b8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d04a      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a65      	ldr	r2, [pc, #404]	@ (8004934 <HAL_DMA_Init+0x1bc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d045      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a63      	ldr	r2, [pc, #396]	@ (8004938 <HAL_DMA_Init+0x1c0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d040      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a62      	ldr	r2, [pc, #392]	@ (800493c <HAL_DMA_Init+0x1c4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d03b      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a60      	ldr	r2, [pc, #384]	@ (8004940 <HAL_DMA_Init+0x1c8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d036      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004944 <HAL_DMA_Init+0x1cc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d031      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004948 <HAL_DMA_Init+0x1d0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d02c      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a5c      	ldr	r2, [pc, #368]	@ (800494c <HAL_DMA_Init+0x1d4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d027      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004950 <HAL_DMA_Init+0x1d8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d022      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a59      	ldr	r2, [pc, #356]	@ (8004954 <HAL_DMA_Init+0x1dc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d01d      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a57      	ldr	r2, [pc, #348]	@ (8004958 <HAL_DMA_Init+0x1e0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d018      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a56      	ldr	r2, [pc, #344]	@ (800495c <HAL_DMA_Init+0x1e4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a54      	ldr	r2, [pc, #336]	@ (8004960 <HAL_DMA_Init+0x1e8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00e      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a53      	ldr	r2, [pc, #332]	@ (8004964 <HAL_DMA_Init+0x1ec>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d009      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a51      	ldr	r2, [pc, #324]	@ (8004968 <HAL_DMA_Init+0x1f0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_DMA_Init+0xb8>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a50      	ldr	r2, [pc, #320]	@ (800496c <HAL_DMA_Init+0x1f4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <HAL_DMA_Init+0xbc>
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <HAL_DMA_Init+0xbe>
 8004834:	2300      	movs	r3, #0
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 813c 	beq.w	8004ab4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a37      	ldr	r2, [pc, #220]	@ (8004930 <HAL_DMA_Init+0x1b8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d04a      	beq.n	80048ec <HAL_DMA_Init+0x174>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a36      	ldr	r2, [pc, #216]	@ (8004934 <HAL_DMA_Init+0x1bc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d045      	beq.n	80048ec <HAL_DMA_Init+0x174>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a34      	ldr	r2, [pc, #208]	@ (8004938 <HAL_DMA_Init+0x1c0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d040      	beq.n	80048ec <HAL_DMA_Init+0x174>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a33      	ldr	r2, [pc, #204]	@ (800493c <HAL_DMA_Init+0x1c4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d03b      	beq.n	80048ec <HAL_DMA_Init+0x174>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a31      	ldr	r2, [pc, #196]	@ (8004940 <HAL_DMA_Init+0x1c8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d036      	beq.n	80048ec <HAL_DMA_Init+0x174>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a30      	ldr	r2, [pc, #192]	@ (8004944 <HAL_DMA_Init+0x1cc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d031      	beq.n	80048ec <HAL_DMA_Init+0x174>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2e      	ldr	r2, [pc, #184]	@ (8004948 <HAL_DMA_Init+0x1d0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d02c      	beq.n	80048ec <HAL_DMA_Init+0x174>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2d      	ldr	r2, [pc, #180]	@ (800494c <HAL_DMA_Init+0x1d4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d027      	beq.n	80048ec <HAL_DMA_Init+0x174>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004950 <HAL_DMA_Init+0x1d8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d022      	beq.n	80048ec <HAL_DMA_Init+0x174>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <HAL_DMA_Init+0x1dc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d01d      	beq.n	80048ec <HAL_DMA_Init+0x174>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a28      	ldr	r2, [pc, #160]	@ (8004958 <HAL_DMA_Init+0x1e0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d018      	beq.n	80048ec <HAL_DMA_Init+0x174>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a27      	ldr	r2, [pc, #156]	@ (800495c <HAL_DMA_Init+0x1e4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d013      	beq.n	80048ec <HAL_DMA_Init+0x174>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a25      	ldr	r2, [pc, #148]	@ (8004960 <HAL_DMA_Init+0x1e8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00e      	beq.n	80048ec <HAL_DMA_Init+0x174>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a24      	ldr	r2, [pc, #144]	@ (8004964 <HAL_DMA_Init+0x1ec>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d009      	beq.n	80048ec <HAL_DMA_Init+0x174>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a22      	ldr	r2, [pc, #136]	@ (8004968 <HAL_DMA_Init+0x1f0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_DMA_Init+0x174>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a21      	ldr	r2, [pc, #132]	@ (800496c <HAL_DMA_Init+0x1f4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d108      	bne.n	80048fe <HAL_DMA_Init+0x186>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e007      	b.n	800490e <HAL_DMA_Init+0x196>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800490e:	e02f      	b.n	8004970 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004910:	f7fe fb5e 	bl	8002fd0 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b05      	cmp	r3, #5
 800491c:	d928      	bls.n	8004970 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2203      	movs	r2, #3
 8004928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e2ad      	b.n	8004e8c <HAL_DMA_Init+0x714>
 8004930:	40020010 	.word	0x40020010
 8004934:	40020028 	.word	0x40020028
 8004938:	40020040 	.word	0x40020040
 800493c:	40020058 	.word	0x40020058
 8004940:	40020070 	.word	0x40020070
 8004944:	40020088 	.word	0x40020088
 8004948:	400200a0 	.word	0x400200a0
 800494c:	400200b8 	.word	0x400200b8
 8004950:	40020410 	.word	0x40020410
 8004954:	40020428 	.word	0x40020428
 8004958:	40020440 	.word	0x40020440
 800495c:	40020458 	.word	0x40020458
 8004960:	40020470 	.word	0x40020470
 8004964:	40020488 	.word	0x40020488
 8004968:	400204a0 	.word	0x400204a0
 800496c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1c8      	bne.n	8004910 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4b73      	ldr	r3, [pc, #460]	@ (8004b58 <HAL_DMA_Init+0x3e0>)
 800498a:	4013      	ands	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004996:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d107      	bne.n	80049d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049cc:	4313      	orrs	r3, r2
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b28      	cmp	r3, #40	@ 0x28
 80049da:	d903      	bls.n	80049e4 <HAL_DMA_Init+0x26c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80049e2:	d91f      	bls.n	8004a24 <HAL_DMA_Init+0x2ac>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80049ea:	d903      	bls.n	80049f4 <HAL_DMA_Init+0x27c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b42      	cmp	r3, #66	@ 0x42
 80049f2:	d917      	bls.n	8004a24 <HAL_DMA_Init+0x2ac>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b46      	cmp	r3, #70	@ 0x46
 80049fa:	d903      	bls.n	8004a04 <HAL_DMA_Init+0x28c>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b48      	cmp	r3, #72	@ 0x48
 8004a02:	d90f      	bls.n	8004a24 <HAL_DMA_Init+0x2ac>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b4e      	cmp	r3, #78	@ 0x4e
 8004a0a:	d903      	bls.n	8004a14 <HAL_DMA_Init+0x29c>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b52      	cmp	r3, #82	@ 0x52
 8004a12:	d907      	bls.n	8004a24 <HAL_DMA_Init+0x2ac>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b73      	cmp	r3, #115	@ 0x73
 8004a1a:	d905      	bls.n	8004a28 <HAL_DMA_Init+0x2b0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b77      	cmp	r3, #119	@ 0x77
 8004a22:	d801      	bhi.n	8004a28 <HAL_DMA_Init+0x2b0>
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <HAL_DMA_Init+0x2b2>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a34:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f023 0307 	bic.w	r3, r3, #7
 8004a4c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d117      	bne.n	8004a90 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00e      	beq.n	8004a90 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f002 fbd4 	bl	8007220 <DMA_CheckFifoParam>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2240      	movs	r2, #64	@ 0x40
 8004a82:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e1fd      	b.n	8004e8c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f002 fb0f 	bl	80070bc <DMA_CalcBaseAndBitshift>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	223f      	movs	r2, #63	@ 0x3f
 8004aac:	409a      	lsls	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	609a      	str	r2, [r3, #8]
 8004ab2:	e0fd      	b.n	8004cb0 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a28      	ldr	r2, [pc, #160]	@ (8004b5c <HAL_DMA_Init+0x3e4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d04a      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a27      	ldr	r2, [pc, #156]	@ (8004b60 <HAL_DMA_Init+0x3e8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d045      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a25      	ldr	r2, [pc, #148]	@ (8004b64 <HAL_DMA_Init+0x3ec>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d040      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a24      	ldr	r2, [pc, #144]	@ (8004b68 <HAL_DMA_Init+0x3f0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d03b      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a22      	ldr	r2, [pc, #136]	@ (8004b6c <HAL_DMA_Init+0x3f4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d036      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a21      	ldr	r2, [pc, #132]	@ (8004b70 <HAL_DMA_Init+0x3f8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d031      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b74 <HAL_DMA_Init+0x3fc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d02c      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1e      	ldr	r2, [pc, #120]	@ (8004b78 <HAL_DMA_Init+0x400>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d027      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	@ (8004b7c <HAL_DMA_Init+0x404>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d022      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1b      	ldr	r2, [pc, #108]	@ (8004b80 <HAL_DMA_Init+0x408>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d01d      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a19      	ldr	r2, [pc, #100]	@ (8004b84 <HAL_DMA_Init+0x40c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d018      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a18      	ldr	r2, [pc, #96]	@ (8004b88 <HAL_DMA_Init+0x410>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d013      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a16      	ldr	r2, [pc, #88]	@ (8004b8c <HAL_DMA_Init+0x414>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00e      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a15      	ldr	r2, [pc, #84]	@ (8004b90 <HAL_DMA_Init+0x418>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a13      	ldr	r2, [pc, #76]	@ (8004b94 <HAL_DMA_Init+0x41c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_DMA_Init+0x3dc>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a12      	ldr	r2, [pc, #72]	@ (8004b98 <HAL_DMA_Init+0x420>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d123      	bne.n	8004b9c <HAL_DMA_Init+0x424>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e022      	b.n	8004b9e <HAL_DMA_Init+0x426>
 8004b58:	fe10803f 	.word	0xfe10803f
 8004b5c:	48022c08 	.word	0x48022c08
 8004b60:	48022c1c 	.word	0x48022c1c
 8004b64:	48022c30 	.word	0x48022c30
 8004b68:	48022c44 	.word	0x48022c44
 8004b6c:	48022c58 	.word	0x48022c58
 8004b70:	48022c6c 	.word	0x48022c6c
 8004b74:	48022c80 	.word	0x48022c80
 8004b78:	48022c94 	.word	0x48022c94
 8004b7c:	58025408 	.word	0x58025408
 8004b80:	5802541c 	.word	0x5802541c
 8004b84:	58025430 	.word	0x58025430
 8004b88:	58025444 	.word	0x58025444
 8004b8c:	58025458 	.word	0x58025458
 8004b90:	5802546c 	.word	0x5802546c
 8004b94:	58025480 	.word	0x58025480
 8004b98:	58025494 	.word	0x58025494
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d07d      	beq.n	8004c9e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a7f      	ldr	r2, [pc, #508]	@ (8004da4 <HAL_DMA_Init+0x62c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d021      	beq.n	8004bf0 <HAL_DMA_Init+0x478>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a7d      	ldr	r2, [pc, #500]	@ (8004da8 <HAL_DMA_Init+0x630>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01c      	beq.n	8004bf0 <HAL_DMA_Init+0x478>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a7c      	ldr	r2, [pc, #496]	@ (8004dac <HAL_DMA_Init+0x634>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d017      	beq.n	8004bf0 <HAL_DMA_Init+0x478>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a7a      	ldr	r2, [pc, #488]	@ (8004db0 <HAL_DMA_Init+0x638>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d012      	beq.n	8004bf0 <HAL_DMA_Init+0x478>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a79      	ldr	r2, [pc, #484]	@ (8004db4 <HAL_DMA_Init+0x63c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00d      	beq.n	8004bf0 <HAL_DMA_Init+0x478>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a77      	ldr	r2, [pc, #476]	@ (8004db8 <HAL_DMA_Init+0x640>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d008      	beq.n	8004bf0 <HAL_DMA_Init+0x478>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a76      	ldr	r2, [pc, #472]	@ (8004dbc <HAL_DMA_Init+0x644>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <HAL_DMA_Init+0x478>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a74      	ldr	r2, [pc, #464]	@ (8004dc0 <HAL_DMA_Init+0x648>)
 8004bee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4b6e      	ldr	r3, [pc, #440]	@ (8004dc4 <HAL_DMA_Init+0x64c>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b40      	cmp	r3, #64	@ 0x40
 8004c16:	d008      	beq.n	8004c2a <HAL_DMA_Init+0x4b2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b80      	cmp	r3, #128	@ 0x80
 8004c1e:	d102      	bne.n	8004c26 <HAL_DMA_Init+0x4ae>
 8004c20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c24:	e002      	b.n	8004c2c <HAL_DMA_Init+0x4b4>
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <HAL_DMA_Init+0x4b4>
 8004c2a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68d2      	ldr	r2, [r2, #12]
 8004c30:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c32:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c3a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c42:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c4a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c52:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c5a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4b55      	ldr	r3, [pc, #340]	@ (8004dc8 <HAL_DMA_Init+0x650>)
 8004c72:	4413      	add	r3, r2
 8004c74:	4a55      	ldr	r2, [pc, #340]	@ (8004dcc <HAL_DMA_Init+0x654>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	091b      	lsrs	r3, r3, #4
 8004c7c:	009a      	lsls	r2, r3, #2
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f002 fa1a 	bl	80070bc <DMA_CalcBaseAndBitshift>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	2201      	movs	r2, #1
 8004c96:	409a      	lsls	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	605a      	str	r2, [r3, #4]
 8004c9c:	e008      	b.n	8004cb0 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2240      	movs	r2, #64	@ 0x40
 8004ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0ed      	b.n	8004e8c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a46      	ldr	r2, [pc, #280]	@ (8004dd0 <HAL_DMA_Init+0x658>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d072      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a45      	ldr	r2, [pc, #276]	@ (8004dd4 <HAL_DMA_Init+0x65c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d06d      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a43      	ldr	r2, [pc, #268]	@ (8004dd8 <HAL_DMA_Init+0x660>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d068      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a42      	ldr	r2, [pc, #264]	@ (8004ddc <HAL_DMA_Init+0x664>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d063      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a40      	ldr	r2, [pc, #256]	@ (8004de0 <HAL_DMA_Init+0x668>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d05e      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a3f      	ldr	r2, [pc, #252]	@ (8004de4 <HAL_DMA_Init+0x66c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d059      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a3d      	ldr	r2, [pc, #244]	@ (8004de8 <HAL_DMA_Init+0x670>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d054      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3c      	ldr	r2, [pc, #240]	@ (8004dec <HAL_DMA_Init+0x674>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d04f      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a3a      	ldr	r2, [pc, #232]	@ (8004df0 <HAL_DMA_Init+0x678>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d04a      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a39      	ldr	r2, [pc, #228]	@ (8004df4 <HAL_DMA_Init+0x67c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d045      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a37      	ldr	r2, [pc, #220]	@ (8004df8 <HAL_DMA_Init+0x680>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d040      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a36      	ldr	r2, [pc, #216]	@ (8004dfc <HAL_DMA_Init+0x684>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d03b      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a34      	ldr	r2, [pc, #208]	@ (8004e00 <HAL_DMA_Init+0x688>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d036      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a33      	ldr	r2, [pc, #204]	@ (8004e04 <HAL_DMA_Init+0x68c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d031      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a31      	ldr	r2, [pc, #196]	@ (8004e08 <HAL_DMA_Init+0x690>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d02c      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a30      	ldr	r2, [pc, #192]	@ (8004e0c <HAL_DMA_Init+0x694>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d027      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a13      	ldr	r2, [pc, #76]	@ (8004da4 <HAL_DMA_Init+0x62c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d022      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a12      	ldr	r2, [pc, #72]	@ (8004da8 <HAL_DMA_Init+0x630>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d01d      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a10      	ldr	r2, [pc, #64]	@ (8004dac <HAL_DMA_Init+0x634>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d018      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a0f      	ldr	r2, [pc, #60]	@ (8004db0 <HAL_DMA_Init+0x638>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d013      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004db4 <HAL_DMA_Init+0x63c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00e      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a0c      	ldr	r2, [pc, #48]	@ (8004db8 <HAL_DMA_Init+0x640>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d009      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0a      	ldr	r2, [pc, #40]	@ (8004dbc <HAL_DMA_Init+0x644>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <HAL_DMA_Init+0x628>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a09      	ldr	r2, [pc, #36]	@ (8004dc0 <HAL_DMA_Init+0x648>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d137      	bne.n	8004e10 <HAL_DMA_Init+0x698>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e036      	b.n	8004e12 <HAL_DMA_Init+0x69a>
 8004da4:	58025408 	.word	0x58025408
 8004da8:	5802541c 	.word	0x5802541c
 8004dac:	58025430 	.word	0x58025430
 8004db0:	58025444 	.word	0x58025444
 8004db4:	58025458 	.word	0x58025458
 8004db8:	5802546c 	.word	0x5802546c
 8004dbc:	58025480 	.word	0x58025480
 8004dc0:	58025494 	.word	0x58025494
 8004dc4:	fffe000f 	.word	0xfffe000f
 8004dc8:	a7fdabf8 	.word	0xa7fdabf8
 8004dcc:	cccccccd 	.word	0xcccccccd
 8004dd0:	40020010 	.word	0x40020010
 8004dd4:	40020028 	.word	0x40020028
 8004dd8:	40020040 	.word	0x40020040
 8004ddc:	40020058 	.word	0x40020058
 8004de0:	40020070 	.word	0x40020070
 8004de4:	40020088 	.word	0x40020088
 8004de8:	400200a0 	.word	0x400200a0
 8004dec:	400200b8 	.word	0x400200b8
 8004df0:	40020410 	.word	0x40020410
 8004df4:	40020428 	.word	0x40020428
 8004df8:	40020440 	.word	0x40020440
 8004dfc:	40020458 	.word	0x40020458
 8004e00:	40020470 	.word	0x40020470
 8004e04:	40020488 	.word	0x40020488
 8004e08:	400204a0 	.word	0x400204a0
 8004e0c:	400204b8 	.word	0x400204b8
 8004e10:	2300      	movs	r3, #0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d032      	beq.n	8004e7c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f002 fa7e 	bl	8007318 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b80      	cmp	r3, #128	@ 0x80
 8004e22:	d102      	bne.n	8004e2a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e3e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d010      	beq.n	8004e6a <HAL_DMA_Init+0x6f2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d80c      	bhi.n	8004e6a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f002 fafb 	bl	800744c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e66:	605a      	str	r2, [r3, #4]
 8004e68:	e008      	b.n	8004e7c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e226      	b.n	80052fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_DMA_Start_IT+0x2a>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e21f      	b.n	80052fe <HAL_DMA_Start_IT+0x46a>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	f040 820a 	bne.w	80052e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a68      	ldr	r2, [pc, #416]	@ (8005088 <HAL_DMA_Start_IT+0x1f4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d04a      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a66      	ldr	r2, [pc, #408]	@ (800508c <HAL_DMA_Start_IT+0x1f8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d045      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a65      	ldr	r2, [pc, #404]	@ (8005090 <HAL_DMA_Start_IT+0x1fc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d040      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a63      	ldr	r2, [pc, #396]	@ (8005094 <HAL_DMA_Start_IT+0x200>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d03b      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a62      	ldr	r2, [pc, #392]	@ (8005098 <HAL_DMA_Start_IT+0x204>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d036      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a60      	ldr	r2, [pc, #384]	@ (800509c <HAL_DMA_Start_IT+0x208>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d031      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a5f      	ldr	r2, [pc, #380]	@ (80050a0 <HAL_DMA_Start_IT+0x20c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d02c      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a5d      	ldr	r2, [pc, #372]	@ (80050a4 <HAL_DMA_Start_IT+0x210>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d027      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a5c      	ldr	r2, [pc, #368]	@ (80050a8 <HAL_DMA_Start_IT+0x214>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a5a      	ldr	r2, [pc, #360]	@ (80050ac <HAL_DMA_Start_IT+0x218>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a59      	ldr	r2, [pc, #356]	@ (80050b0 <HAL_DMA_Start_IT+0x21c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a57      	ldr	r2, [pc, #348]	@ (80050b4 <HAL_DMA_Start_IT+0x220>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a56      	ldr	r2, [pc, #344]	@ (80050b8 <HAL_DMA_Start_IT+0x224>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a54      	ldr	r2, [pc, #336]	@ (80050bc <HAL_DMA_Start_IT+0x228>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a53      	ldr	r2, [pc, #332]	@ (80050c0 <HAL_DMA_Start_IT+0x22c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_DMA_Start_IT+0xee>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a51      	ldr	r2, [pc, #324]	@ (80050c4 <HAL_DMA_Start_IT+0x230>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d108      	bne.n	8004f94 <HAL_DMA_Start_IT+0x100>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e007      	b.n	8004fa4 <HAL_DMA_Start_IT+0x110>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f001 fea2 	bl	8006cf4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a34      	ldr	r2, [pc, #208]	@ (8005088 <HAL_DMA_Start_IT+0x1f4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d04a      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a33      	ldr	r2, [pc, #204]	@ (800508c <HAL_DMA_Start_IT+0x1f8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d045      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a31      	ldr	r2, [pc, #196]	@ (8005090 <HAL_DMA_Start_IT+0x1fc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d040      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a30      	ldr	r2, [pc, #192]	@ (8005094 <HAL_DMA_Start_IT+0x200>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d03b      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8005098 <HAL_DMA_Start_IT+0x204>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d036      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2d      	ldr	r2, [pc, #180]	@ (800509c <HAL_DMA_Start_IT+0x208>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d031      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80050a0 <HAL_DMA_Start_IT+0x20c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d02c      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80050a4 <HAL_DMA_Start_IT+0x210>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d027      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a28      	ldr	r2, [pc, #160]	@ (80050a8 <HAL_DMA_Start_IT+0x214>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d022      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a27      	ldr	r2, [pc, #156]	@ (80050ac <HAL_DMA_Start_IT+0x218>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d01d      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a25      	ldr	r2, [pc, #148]	@ (80050b0 <HAL_DMA_Start_IT+0x21c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d018      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a24      	ldr	r2, [pc, #144]	@ (80050b4 <HAL_DMA_Start_IT+0x220>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a22      	ldr	r2, [pc, #136]	@ (80050b8 <HAL_DMA_Start_IT+0x224>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00e      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a21      	ldr	r2, [pc, #132]	@ (80050bc <HAL_DMA_Start_IT+0x228>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d009      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1f      	ldr	r2, [pc, #124]	@ (80050c0 <HAL_DMA_Start_IT+0x22c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_DMA_Start_IT+0x1bc>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1e      	ldr	r2, [pc, #120]	@ (80050c4 <HAL_DMA_Start_IT+0x230>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d101      	bne.n	8005054 <HAL_DMA_Start_IT+0x1c0>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_DMA_Start_IT+0x1c2>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d036      	beq.n	80050c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f023 021e 	bic.w	r2, r3, #30
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0216 	orr.w	r2, r2, #22
 800506c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d03e      	beq.n	80050f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0208 	orr.w	r2, r2, #8
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e035      	b.n	80050f4 <HAL_DMA_Start_IT+0x260>
 8005088:	40020010 	.word	0x40020010
 800508c:	40020028 	.word	0x40020028
 8005090:	40020040 	.word	0x40020040
 8005094:	40020058 	.word	0x40020058
 8005098:	40020070 	.word	0x40020070
 800509c:	40020088 	.word	0x40020088
 80050a0:	400200a0 	.word	0x400200a0
 80050a4:	400200b8 	.word	0x400200b8
 80050a8:	40020410 	.word	0x40020410
 80050ac:	40020428 	.word	0x40020428
 80050b0:	40020440 	.word	0x40020440
 80050b4:	40020458 	.word	0x40020458
 80050b8:	40020470 	.word	0x40020470
 80050bc:	40020488 	.word	0x40020488
 80050c0:	400204a0 	.word	0x400204a0
 80050c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 020e 	bic.w	r2, r3, #14
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 020a 	orr.w	r2, r2, #10
 80050da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0204 	orr.w	r2, r2, #4
 80050f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a83      	ldr	r2, [pc, #524]	@ (8005308 <HAL_DMA_Start_IT+0x474>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d072      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a82      	ldr	r2, [pc, #520]	@ (800530c <HAL_DMA_Start_IT+0x478>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d06d      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a80      	ldr	r2, [pc, #512]	@ (8005310 <HAL_DMA_Start_IT+0x47c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d068      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a7f      	ldr	r2, [pc, #508]	@ (8005314 <HAL_DMA_Start_IT+0x480>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d063      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a7d      	ldr	r2, [pc, #500]	@ (8005318 <HAL_DMA_Start_IT+0x484>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d05e      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a7c      	ldr	r2, [pc, #496]	@ (800531c <HAL_DMA_Start_IT+0x488>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d059      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a7a      	ldr	r2, [pc, #488]	@ (8005320 <HAL_DMA_Start_IT+0x48c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d054      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a79      	ldr	r2, [pc, #484]	@ (8005324 <HAL_DMA_Start_IT+0x490>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d04f      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a77      	ldr	r2, [pc, #476]	@ (8005328 <HAL_DMA_Start_IT+0x494>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d04a      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a76      	ldr	r2, [pc, #472]	@ (800532c <HAL_DMA_Start_IT+0x498>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d045      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a74      	ldr	r2, [pc, #464]	@ (8005330 <HAL_DMA_Start_IT+0x49c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d040      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a73      	ldr	r2, [pc, #460]	@ (8005334 <HAL_DMA_Start_IT+0x4a0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d03b      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a71      	ldr	r2, [pc, #452]	@ (8005338 <HAL_DMA_Start_IT+0x4a4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d036      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a70      	ldr	r2, [pc, #448]	@ (800533c <HAL_DMA_Start_IT+0x4a8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d031      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a6e      	ldr	r2, [pc, #440]	@ (8005340 <HAL_DMA_Start_IT+0x4ac>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d02c      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a6d      	ldr	r2, [pc, #436]	@ (8005344 <HAL_DMA_Start_IT+0x4b0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d027      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a6b      	ldr	r2, [pc, #428]	@ (8005348 <HAL_DMA_Start_IT+0x4b4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d022      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a6a      	ldr	r2, [pc, #424]	@ (800534c <HAL_DMA_Start_IT+0x4b8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d01d      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a68      	ldr	r2, [pc, #416]	@ (8005350 <HAL_DMA_Start_IT+0x4bc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d018      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a67      	ldr	r2, [pc, #412]	@ (8005354 <HAL_DMA_Start_IT+0x4c0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a65      	ldr	r2, [pc, #404]	@ (8005358 <HAL_DMA_Start_IT+0x4c4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a64      	ldr	r2, [pc, #400]	@ (800535c <HAL_DMA_Start_IT+0x4c8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d009      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a62      	ldr	r2, [pc, #392]	@ (8005360 <HAL_DMA_Start_IT+0x4cc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_DMA_Start_IT+0x350>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a61      	ldr	r2, [pc, #388]	@ (8005364 <HAL_DMA_Start_IT+0x4d0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d101      	bne.n	80051e8 <HAL_DMA_Start_IT+0x354>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_DMA_Start_IT+0x356>
 80051e8:	2300      	movs	r3, #0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d01a      	beq.n	8005224 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005206:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800520a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800521e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005222:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a37      	ldr	r2, [pc, #220]	@ (8005308 <HAL_DMA_Start_IT+0x474>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d04a      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a36      	ldr	r2, [pc, #216]	@ (800530c <HAL_DMA_Start_IT+0x478>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d045      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a34      	ldr	r2, [pc, #208]	@ (8005310 <HAL_DMA_Start_IT+0x47c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d040      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a33      	ldr	r2, [pc, #204]	@ (8005314 <HAL_DMA_Start_IT+0x480>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d03b      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a31      	ldr	r2, [pc, #196]	@ (8005318 <HAL_DMA_Start_IT+0x484>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d036      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a30      	ldr	r2, [pc, #192]	@ (800531c <HAL_DMA_Start_IT+0x488>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d031      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2e      	ldr	r2, [pc, #184]	@ (8005320 <HAL_DMA_Start_IT+0x48c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d02c      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2d      	ldr	r2, [pc, #180]	@ (8005324 <HAL_DMA_Start_IT+0x490>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d027      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a2b      	ldr	r2, [pc, #172]	@ (8005328 <HAL_DMA_Start_IT+0x494>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a2a      	ldr	r2, [pc, #168]	@ (800532c <HAL_DMA_Start_IT+0x498>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d01d      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a28      	ldr	r2, [pc, #160]	@ (8005330 <HAL_DMA_Start_IT+0x49c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a27      	ldr	r2, [pc, #156]	@ (8005334 <HAL_DMA_Start_IT+0x4a0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a25      	ldr	r2, [pc, #148]	@ (8005338 <HAL_DMA_Start_IT+0x4a4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a24      	ldr	r2, [pc, #144]	@ (800533c <HAL_DMA_Start_IT+0x4a8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a22      	ldr	r2, [pc, #136]	@ (8005340 <HAL_DMA_Start_IT+0x4ac>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_DMA_Start_IT+0x430>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a21      	ldr	r2, [pc, #132]	@ (8005344 <HAL_DMA_Start_IT+0x4b0>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d108      	bne.n	80052d6 <HAL_DMA_Start_IT+0x442>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e012      	b.n	80052fc <HAL_DMA_Start_IT+0x468>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e009      	b.n	80052fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40020010 	.word	0x40020010
 800530c:	40020028 	.word	0x40020028
 8005310:	40020040 	.word	0x40020040
 8005314:	40020058 	.word	0x40020058
 8005318:	40020070 	.word	0x40020070
 800531c:	40020088 	.word	0x40020088
 8005320:	400200a0 	.word	0x400200a0
 8005324:	400200b8 	.word	0x400200b8
 8005328:	40020410 	.word	0x40020410
 800532c:	40020428 	.word	0x40020428
 8005330:	40020440 	.word	0x40020440
 8005334:	40020458 	.word	0x40020458
 8005338:	40020470 	.word	0x40020470
 800533c:	40020488 	.word	0x40020488
 8005340:	400204a0 	.word	0x400204a0
 8005344:	400204b8 	.word	0x400204b8
 8005348:	58025408 	.word	0x58025408
 800534c:	5802541c 	.word	0x5802541c
 8005350:	58025430 	.word	0x58025430
 8005354:	58025444 	.word	0x58025444
 8005358:	58025458 	.word	0x58025458
 800535c:	5802546c 	.word	0x5802546c
 8005360:	58025480 	.word	0x58025480
 8005364:	58025494 	.word	0x58025494

08005368 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005370:	f7fd fe2e 	bl	8002fd0 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e2dc      	b.n	800593a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d008      	beq.n	800539e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2280      	movs	r2, #128	@ 0x80
 8005390:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e2cd      	b.n	800593a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a76      	ldr	r2, [pc, #472]	@ (800557c <HAL_DMA_Abort+0x214>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d04a      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a74      	ldr	r2, [pc, #464]	@ (8005580 <HAL_DMA_Abort+0x218>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d045      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a73      	ldr	r2, [pc, #460]	@ (8005584 <HAL_DMA_Abort+0x21c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d040      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a71      	ldr	r2, [pc, #452]	@ (8005588 <HAL_DMA_Abort+0x220>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d03b      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a70      	ldr	r2, [pc, #448]	@ (800558c <HAL_DMA_Abort+0x224>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d036      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a6e      	ldr	r2, [pc, #440]	@ (8005590 <HAL_DMA_Abort+0x228>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d031      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6d      	ldr	r2, [pc, #436]	@ (8005594 <HAL_DMA_Abort+0x22c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d02c      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a6b      	ldr	r2, [pc, #428]	@ (8005598 <HAL_DMA_Abort+0x230>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d027      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6a      	ldr	r2, [pc, #424]	@ (800559c <HAL_DMA_Abort+0x234>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d022      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a68      	ldr	r2, [pc, #416]	@ (80055a0 <HAL_DMA_Abort+0x238>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d01d      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a67      	ldr	r2, [pc, #412]	@ (80055a4 <HAL_DMA_Abort+0x23c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d018      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a65      	ldr	r2, [pc, #404]	@ (80055a8 <HAL_DMA_Abort+0x240>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a64      	ldr	r2, [pc, #400]	@ (80055ac <HAL_DMA_Abort+0x244>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00e      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a62      	ldr	r2, [pc, #392]	@ (80055b0 <HAL_DMA_Abort+0x248>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a61      	ldr	r2, [pc, #388]	@ (80055b4 <HAL_DMA_Abort+0x24c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_DMA_Abort+0xd6>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a5f      	ldr	r2, [pc, #380]	@ (80055b8 <HAL_DMA_Abort+0x250>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d101      	bne.n	8005442 <HAL_DMA_Abort+0xda>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <HAL_DMA_Abort+0xdc>
 8005442:	2300      	movs	r3, #0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d013      	beq.n	8005470 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 021e 	bic.w	r2, r2, #30
 8005456:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005466:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e00a      	b.n	8005486 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 020e 	bic.w	r2, r2, #14
 800547e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a3c      	ldr	r2, [pc, #240]	@ (800557c <HAL_DMA_Abort+0x214>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d072      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a3a      	ldr	r2, [pc, #232]	@ (8005580 <HAL_DMA_Abort+0x218>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d06d      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a39      	ldr	r2, [pc, #228]	@ (8005584 <HAL_DMA_Abort+0x21c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d068      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a37      	ldr	r2, [pc, #220]	@ (8005588 <HAL_DMA_Abort+0x220>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d063      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a36      	ldr	r2, [pc, #216]	@ (800558c <HAL_DMA_Abort+0x224>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d05e      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a34      	ldr	r2, [pc, #208]	@ (8005590 <HAL_DMA_Abort+0x228>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d059      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a33      	ldr	r2, [pc, #204]	@ (8005594 <HAL_DMA_Abort+0x22c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d054      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a31      	ldr	r2, [pc, #196]	@ (8005598 <HAL_DMA_Abort+0x230>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d04f      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a30      	ldr	r2, [pc, #192]	@ (800559c <HAL_DMA_Abort+0x234>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d04a      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2e      	ldr	r2, [pc, #184]	@ (80055a0 <HAL_DMA_Abort+0x238>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d045      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a2d      	ldr	r2, [pc, #180]	@ (80055a4 <HAL_DMA_Abort+0x23c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d040      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a2b      	ldr	r2, [pc, #172]	@ (80055a8 <HAL_DMA_Abort+0x240>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d03b      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a2a      	ldr	r2, [pc, #168]	@ (80055ac <HAL_DMA_Abort+0x244>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d036      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a28      	ldr	r2, [pc, #160]	@ (80055b0 <HAL_DMA_Abort+0x248>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d031      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a27      	ldr	r2, [pc, #156]	@ (80055b4 <HAL_DMA_Abort+0x24c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d02c      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a25      	ldr	r2, [pc, #148]	@ (80055b8 <HAL_DMA_Abort+0x250>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d027      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a24      	ldr	r2, [pc, #144]	@ (80055bc <HAL_DMA_Abort+0x254>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d022      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a22      	ldr	r2, [pc, #136]	@ (80055c0 <HAL_DMA_Abort+0x258>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01d      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a21      	ldr	r2, [pc, #132]	@ (80055c4 <HAL_DMA_Abort+0x25c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d018      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	@ (80055c8 <HAL_DMA_Abort+0x260>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1e      	ldr	r2, [pc, #120]	@ (80055cc <HAL_DMA_Abort+0x264>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00e      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1c      	ldr	r2, [pc, #112]	@ (80055d0 <HAL_DMA_Abort+0x268>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d009      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1b      	ldr	r2, [pc, #108]	@ (80055d4 <HAL_DMA_Abort+0x26c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_DMA_Abort+0x20e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a19      	ldr	r2, [pc, #100]	@ (80055d8 <HAL_DMA_Abort+0x270>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d132      	bne.n	80055dc <HAL_DMA_Abort+0x274>
 8005576:	2301      	movs	r3, #1
 8005578:	e031      	b.n	80055de <HAL_DMA_Abort+0x276>
 800557a:	bf00      	nop
 800557c:	40020010 	.word	0x40020010
 8005580:	40020028 	.word	0x40020028
 8005584:	40020040 	.word	0x40020040
 8005588:	40020058 	.word	0x40020058
 800558c:	40020070 	.word	0x40020070
 8005590:	40020088 	.word	0x40020088
 8005594:	400200a0 	.word	0x400200a0
 8005598:	400200b8 	.word	0x400200b8
 800559c:	40020410 	.word	0x40020410
 80055a0:	40020428 	.word	0x40020428
 80055a4:	40020440 	.word	0x40020440
 80055a8:	40020458 	.word	0x40020458
 80055ac:	40020470 	.word	0x40020470
 80055b0:	40020488 	.word	0x40020488
 80055b4:	400204a0 	.word	0x400204a0
 80055b8:	400204b8 	.word	0x400204b8
 80055bc:	58025408 	.word	0x58025408
 80055c0:	5802541c 	.word	0x5802541c
 80055c4:	58025430 	.word	0x58025430
 80055c8:	58025444 	.word	0x58025444
 80055cc:	58025458 	.word	0x58025458
 80055d0:	5802546c 	.word	0x5802546c
 80055d4:	58025480 	.word	0x58025480
 80055d8:	58025494 	.word	0x58025494
 80055dc:	2300      	movs	r3, #0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a6d      	ldr	r2, [pc, #436]	@ (80057ac <HAL_DMA_Abort+0x444>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d04a      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a6b      	ldr	r2, [pc, #428]	@ (80057b0 <HAL_DMA_Abort+0x448>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d045      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a6a      	ldr	r2, [pc, #424]	@ (80057b4 <HAL_DMA_Abort+0x44c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d040      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a68      	ldr	r2, [pc, #416]	@ (80057b8 <HAL_DMA_Abort+0x450>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d03b      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a67      	ldr	r2, [pc, #412]	@ (80057bc <HAL_DMA_Abort+0x454>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d036      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a65      	ldr	r2, [pc, #404]	@ (80057c0 <HAL_DMA_Abort+0x458>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d031      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a64      	ldr	r2, [pc, #400]	@ (80057c4 <HAL_DMA_Abort+0x45c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d02c      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a62      	ldr	r2, [pc, #392]	@ (80057c8 <HAL_DMA_Abort+0x460>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d027      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a61      	ldr	r2, [pc, #388]	@ (80057cc <HAL_DMA_Abort+0x464>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d022      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a5f      	ldr	r2, [pc, #380]	@ (80057d0 <HAL_DMA_Abort+0x468>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d01d      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a5e      	ldr	r2, [pc, #376]	@ (80057d4 <HAL_DMA_Abort+0x46c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d018      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a5c      	ldr	r2, [pc, #368]	@ (80057d8 <HAL_DMA_Abort+0x470>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a5b      	ldr	r2, [pc, #364]	@ (80057dc <HAL_DMA_Abort+0x474>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00e      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a59      	ldr	r2, [pc, #356]	@ (80057e0 <HAL_DMA_Abort+0x478>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a58      	ldr	r2, [pc, #352]	@ (80057e4 <HAL_DMA_Abort+0x47c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_DMA_Abort+0x32a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a56      	ldr	r2, [pc, #344]	@ (80057e8 <HAL_DMA_Abort+0x480>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d108      	bne.n	80056a4 <HAL_DMA_Abort+0x33c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e007      	b.n	80056b4 <HAL_DMA_Abort+0x34c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0201 	bic.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80056b4:	e013      	b.n	80056de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056b6:	f7fd fc8b 	bl	8002fd0 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b05      	cmp	r3, #5
 80056c2:	d90c      	bls.n	80056de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2203      	movs	r2, #3
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e12d      	b.n	800593a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e5      	bne.n	80056b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2f      	ldr	r2, [pc, #188]	@ (80057ac <HAL_DMA_Abort+0x444>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d04a      	beq.n	800578a <HAL_DMA_Abort+0x422>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2d      	ldr	r2, [pc, #180]	@ (80057b0 <HAL_DMA_Abort+0x448>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d045      	beq.n	800578a <HAL_DMA_Abort+0x422>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a2c      	ldr	r2, [pc, #176]	@ (80057b4 <HAL_DMA_Abort+0x44c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d040      	beq.n	800578a <HAL_DMA_Abort+0x422>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a2a      	ldr	r2, [pc, #168]	@ (80057b8 <HAL_DMA_Abort+0x450>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d03b      	beq.n	800578a <HAL_DMA_Abort+0x422>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a29      	ldr	r2, [pc, #164]	@ (80057bc <HAL_DMA_Abort+0x454>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d036      	beq.n	800578a <HAL_DMA_Abort+0x422>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a27      	ldr	r2, [pc, #156]	@ (80057c0 <HAL_DMA_Abort+0x458>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_DMA_Abort+0x422>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a26      	ldr	r2, [pc, #152]	@ (80057c4 <HAL_DMA_Abort+0x45c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d02c      	beq.n	800578a <HAL_DMA_Abort+0x422>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a24      	ldr	r2, [pc, #144]	@ (80057c8 <HAL_DMA_Abort+0x460>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d027      	beq.n	800578a <HAL_DMA_Abort+0x422>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a23      	ldr	r2, [pc, #140]	@ (80057cc <HAL_DMA_Abort+0x464>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_DMA_Abort+0x422>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a21      	ldr	r2, [pc, #132]	@ (80057d0 <HAL_DMA_Abort+0x468>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_DMA_Abort+0x422>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a20      	ldr	r2, [pc, #128]	@ (80057d4 <HAL_DMA_Abort+0x46c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_DMA_Abort+0x422>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1e      	ldr	r2, [pc, #120]	@ (80057d8 <HAL_DMA_Abort+0x470>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_DMA_Abort+0x422>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1d      	ldr	r2, [pc, #116]	@ (80057dc <HAL_DMA_Abort+0x474>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_DMA_Abort+0x422>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1b      	ldr	r2, [pc, #108]	@ (80057e0 <HAL_DMA_Abort+0x478>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_DMA_Abort+0x422>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1a      	ldr	r2, [pc, #104]	@ (80057e4 <HAL_DMA_Abort+0x47c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_DMA_Abort+0x422>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a18      	ldr	r2, [pc, #96]	@ (80057e8 <HAL_DMA_Abort+0x480>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d101      	bne.n	800578e <HAL_DMA_Abort+0x426>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <HAL_DMA_Abort+0x428>
 800578e:	2300      	movs	r3, #0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d02b      	beq.n	80057ec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005798:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	223f      	movs	r2, #63	@ 0x3f
 80057a4:	409a      	lsls	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	609a      	str	r2, [r3, #8]
 80057aa:	e02a      	b.n	8005802 <HAL_DMA_Abort+0x49a>
 80057ac:	40020010 	.word	0x40020010
 80057b0:	40020028 	.word	0x40020028
 80057b4:	40020040 	.word	0x40020040
 80057b8:	40020058 	.word	0x40020058
 80057bc:	40020070 	.word	0x40020070
 80057c0:	40020088 	.word	0x40020088
 80057c4:	400200a0 	.word	0x400200a0
 80057c8:	400200b8 	.word	0x400200b8
 80057cc:	40020410 	.word	0x40020410
 80057d0:	40020428 	.word	0x40020428
 80057d4:	40020440 	.word	0x40020440
 80057d8:	40020458 	.word	0x40020458
 80057dc:	40020470 	.word	0x40020470
 80057e0:	40020488 	.word	0x40020488
 80057e4:	400204a0 	.word	0x400204a0
 80057e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2201      	movs	r2, #1
 80057fc:	409a      	lsls	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a4f      	ldr	r2, [pc, #316]	@ (8005944 <HAL_DMA_Abort+0x5dc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d072      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a4d      	ldr	r2, [pc, #308]	@ (8005948 <HAL_DMA_Abort+0x5e0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d06d      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a4c      	ldr	r2, [pc, #304]	@ (800594c <HAL_DMA_Abort+0x5e4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d068      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a4a      	ldr	r2, [pc, #296]	@ (8005950 <HAL_DMA_Abort+0x5e8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d063      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a49      	ldr	r2, [pc, #292]	@ (8005954 <HAL_DMA_Abort+0x5ec>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d05e      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a47      	ldr	r2, [pc, #284]	@ (8005958 <HAL_DMA_Abort+0x5f0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d059      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a46      	ldr	r2, [pc, #280]	@ (800595c <HAL_DMA_Abort+0x5f4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d054      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a44      	ldr	r2, [pc, #272]	@ (8005960 <HAL_DMA_Abort+0x5f8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d04f      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a43      	ldr	r2, [pc, #268]	@ (8005964 <HAL_DMA_Abort+0x5fc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d04a      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a41      	ldr	r2, [pc, #260]	@ (8005968 <HAL_DMA_Abort+0x600>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d045      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a40      	ldr	r2, [pc, #256]	@ (800596c <HAL_DMA_Abort+0x604>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d040      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a3e      	ldr	r2, [pc, #248]	@ (8005970 <HAL_DMA_Abort+0x608>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d03b      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a3d      	ldr	r2, [pc, #244]	@ (8005974 <HAL_DMA_Abort+0x60c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d036      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a3b      	ldr	r2, [pc, #236]	@ (8005978 <HAL_DMA_Abort+0x610>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d031      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a3a      	ldr	r2, [pc, #232]	@ (800597c <HAL_DMA_Abort+0x614>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d02c      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a38      	ldr	r2, [pc, #224]	@ (8005980 <HAL_DMA_Abort+0x618>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d027      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a37      	ldr	r2, [pc, #220]	@ (8005984 <HAL_DMA_Abort+0x61c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d022      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a35      	ldr	r2, [pc, #212]	@ (8005988 <HAL_DMA_Abort+0x620>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01d      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a34      	ldr	r2, [pc, #208]	@ (800598c <HAL_DMA_Abort+0x624>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d018      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a32      	ldr	r2, [pc, #200]	@ (8005990 <HAL_DMA_Abort+0x628>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a31      	ldr	r2, [pc, #196]	@ (8005994 <HAL_DMA_Abort+0x62c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00e      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005998 <HAL_DMA_Abort+0x630>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d009      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a2e      	ldr	r2, [pc, #184]	@ (800599c <HAL_DMA_Abort+0x634>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_DMA_Abort+0x58a>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a2c      	ldr	r2, [pc, #176]	@ (80059a0 <HAL_DMA_Abort+0x638>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d101      	bne.n	80058f6 <HAL_DMA_Abort+0x58e>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <HAL_DMA_Abort+0x590>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d015      	beq.n	8005928 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005904:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00c      	beq.n	8005928 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005918:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800591c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005926:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40020010 	.word	0x40020010
 8005948:	40020028 	.word	0x40020028
 800594c:	40020040 	.word	0x40020040
 8005950:	40020058 	.word	0x40020058
 8005954:	40020070 	.word	0x40020070
 8005958:	40020088 	.word	0x40020088
 800595c:	400200a0 	.word	0x400200a0
 8005960:	400200b8 	.word	0x400200b8
 8005964:	40020410 	.word	0x40020410
 8005968:	40020428 	.word	0x40020428
 800596c:	40020440 	.word	0x40020440
 8005970:	40020458 	.word	0x40020458
 8005974:	40020470 	.word	0x40020470
 8005978:	40020488 	.word	0x40020488
 800597c:	400204a0 	.word	0x400204a0
 8005980:	400204b8 	.word	0x400204b8
 8005984:	58025408 	.word	0x58025408
 8005988:	5802541c 	.word	0x5802541c
 800598c:	58025430 	.word	0x58025430
 8005990:	58025444 	.word	0x58025444
 8005994:	58025458 	.word	0x58025458
 8005998:	5802546c 	.word	0x5802546c
 800599c:	58025480 	.word	0x58025480
 80059a0:	58025494 	.word	0x58025494

080059a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e237      	b.n	8005e26 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d004      	beq.n	80059cc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2280      	movs	r2, #128	@ 0x80
 80059c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e22c      	b.n	8005e26 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a5c      	ldr	r2, [pc, #368]	@ (8005b44 <HAL_DMA_Abort_IT+0x1a0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d04a      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a5b      	ldr	r2, [pc, #364]	@ (8005b48 <HAL_DMA_Abort_IT+0x1a4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d045      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a59      	ldr	r2, [pc, #356]	@ (8005b4c <HAL_DMA_Abort_IT+0x1a8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d040      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a58      	ldr	r2, [pc, #352]	@ (8005b50 <HAL_DMA_Abort_IT+0x1ac>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d03b      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a56      	ldr	r2, [pc, #344]	@ (8005b54 <HAL_DMA_Abort_IT+0x1b0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d036      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a55      	ldr	r2, [pc, #340]	@ (8005b58 <HAL_DMA_Abort_IT+0x1b4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d031      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a53      	ldr	r2, [pc, #332]	@ (8005b5c <HAL_DMA_Abort_IT+0x1b8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d02c      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a52      	ldr	r2, [pc, #328]	@ (8005b60 <HAL_DMA_Abort_IT+0x1bc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d027      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a50      	ldr	r2, [pc, #320]	@ (8005b64 <HAL_DMA_Abort_IT+0x1c0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d022      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a4f      	ldr	r2, [pc, #316]	@ (8005b68 <HAL_DMA_Abort_IT+0x1c4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d01d      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a4d      	ldr	r2, [pc, #308]	@ (8005b6c <HAL_DMA_Abort_IT+0x1c8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d018      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a4c      	ldr	r2, [pc, #304]	@ (8005b70 <HAL_DMA_Abort_IT+0x1cc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a4a      	ldr	r2, [pc, #296]	@ (8005b74 <HAL_DMA_Abort_IT+0x1d0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a49      	ldr	r2, [pc, #292]	@ (8005b78 <HAL_DMA_Abort_IT+0x1d4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d009      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a47      	ldr	r2, [pc, #284]	@ (8005b7c <HAL_DMA_Abort_IT+0x1d8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a46      	ldr	r2, [pc, #280]	@ (8005b80 <HAL_DMA_Abort_IT+0x1dc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d101      	bne.n	8005a70 <HAL_DMA_Abort_IT+0xcc>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <HAL_DMA_Abort_IT+0xce>
 8005a70:	2300      	movs	r3, #0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 8086 	beq.w	8005b84 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a2f      	ldr	r2, [pc, #188]	@ (8005b44 <HAL_DMA_Abort_IT+0x1a0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d04a      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8005b48 <HAL_DMA_Abort_IT+0x1a4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d045      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2c      	ldr	r2, [pc, #176]	@ (8005b4c <HAL_DMA_Abort_IT+0x1a8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d040      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8005b50 <HAL_DMA_Abort_IT+0x1ac>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d03b      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a29      	ldr	r2, [pc, #164]	@ (8005b54 <HAL_DMA_Abort_IT+0x1b0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d036      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a28      	ldr	r2, [pc, #160]	@ (8005b58 <HAL_DMA_Abort_IT+0x1b4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d031      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a26      	ldr	r2, [pc, #152]	@ (8005b5c <HAL_DMA_Abort_IT+0x1b8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d02c      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a25      	ldr	r2, [pc, #148]	@ (8005b60 <HAL_DMA_Abort_IT+0x1bc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d027      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a23      	ldr	r2, [pc, #140]	@ (8005b64 <HAL_DMA_Abort_IT+0x1c0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d022      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a22      	ldr	r2, [pc, #136]	@ (8005b68 <HAL_DMA_Abort_IT+0x1c4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d01d      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a20      	ldr	r2, [pc, #128]	@ (8005b6c <HAL_DMA_Abort_IT+0x1c8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d018      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b70 <HAL_DMA_Abort_IT+0x1cc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b74 <HAL_DMA_Abort_IT+0x1d0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00e      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1c      	ldr	r2, [pc, #112]	@ (8005b78 <HAL_DMA_Abort_IT+0x1d4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d009      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1a      	ldr	r2, [pc, #104]	@ (8005b7c <HAL_DMA_Abort_IT+0x1d8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x17c>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a19      	ldr	r2, [pc, #100]	@ (8005b80 <HAL_DMA_Abort_IT+0x1dc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d108      	bne.n	8005b32 <HAL_DMA_Abort_IT+0x18e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	e178      	b.n	8005e24 <HAL_DMA_Abort_IT+0x480>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0201 	bic.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e16f      	b.n	8005e24 <HAL_DMA_Abort_IT+0x480>
 8005b44:	40020010 	.word	0x40020010
 8005b48:	40020028 	.word	0x40020028
 8005b4c:	40020040 	.word	0x40020040
 8005b50:	40020058 	.word	0x40020058
 8005b54:	40020070 	.word	0x40020070
 8005b58:	40020088 	.word	0x40020088
 8005b5c:	400200a0 	.word	0x400200a0
 8005b60:	400200b8 	.word	0x400200b8
 8005b64:	40020410 	.word	0x40020410
 8005b68:	40020428 	.word	0x40020428
 8005b6c:	40020440 	.word	0x40020440
 8005b70:	40020458 	.word	0x40020458
 8005b74:	40020470 	.word	0x40020470
 8005b78:	40020488 	.word	0x40020488
 8005b7c:	400204a0 	.word	0x400204a0
 8005b80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 020e 	bic.w	r2, r2, #14
 8005b92:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a6c      	ldr	r2, [pc, #432]	@ (8005d4c <HAL_DMA_Abort_IT+0x3a8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d04a      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a6b      	ldr	r2, [pc, #428]	@ (8005d50 <HAL_DMA_Abort_IT+0x3ac>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d045      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a69      	ldr	r2, [pc, #420]	@ (8005d54 <HAL_DMA_Abort_IT+0x3b0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d040      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a68      	ldr	r2, [pc, #416]	@ (8005d58 <HAL_DMA_Abort_IT+0x3b4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d03b      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a66      	ldr	r2, [pc, #408]	@ (8005d5c <HAL_DMA_Abort_IT+0x3b8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d036      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a65      	ldr	r2, [pc, #404]	@ (8005d60 <HAL_DMA_Abort_IT+0x3bc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d031      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a63      	ldr	r2, [pc, #396]	@ (8005d64 <HAL_DMA_Abort_IT+0x3c0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d02c      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a62      	ldr	r2, [pc, #392]	@ (8005d68 <HAL_DMA_Abort_IT+0x3c4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d027      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a60      	ldr	r2, [pc, #384]	@ (8005d6c <HAL_DMA_Abort_IT+0x3c8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d022      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a5f      	ldr	r2, [pc, #380]	@ (8005d70 <HAL_DMA_Abort_IT+0x3cc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d01d      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8005d74 <HAL_DMA_Abort_IT+0x3d0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d018      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a5c      	ldr	r2, [pc, #368]	@ (8005d78 <HAL_DMA_Abort_IT+0x3d4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d013      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a5a      	ldr	r2, [pc, #360]	@ (8005d7c <HAL_DMA_Abort_IT+0x3d8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00e      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a59      	ldr	r2, [pc, #356]	@ (8005d80 <HAL_DMA_Abort_IT+0x3dc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a57      	ldr	r2, [pc, #348]	@ (8005d84 <HAL_DMA_Abort_IT+0x3e0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d004      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x290>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a56      	ldr	r2, [pc, #344]	@ (8005d88 <HAL_DMA_Abort_IT+0x3e4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d108      	bne.n	8005c46 <HAL_DMA_Abort_IT+0x2a2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e007      	b.n	8005c56 <HAL_DMA_Abort_IT+0x2b2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3c      	ldr	r2, [pc, #240]	@ (8005d4c <HAL_DMA_Abort_IT+0x3a8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d072      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a3a      	ldr	r2, [pc, #232]	@ (8005d50 <HAL_DMA_Abort_IT+0x3ac>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d06d      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a39      	ldr	r2, [pc, #228]	@ (8005d54 <HAL_DMA_Abort_IT+0x3b0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d068      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a37      	ldr	r2, [pc, #220]	@ (8005d58 <HAL_DMA_Abort_IT+0x3b4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d063      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a36      	ldr	r2, [pc, #216]	@ (8005d5c <HAL_DMA_Abort_IT+0x3b8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d05e      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a34      	ldr	r2, [pc, #208]	@ (8005d60 <HAL_DMA_Abort_IT+0x3bc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d059      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a33      	ldr	r2, [pc, #204]	@ (8005d64 <HAL_DMA_Abort_IT+0x3c0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d054      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a31      	ldr	r2, [pc, #196]	@ (8005d68 <HAL_DMA_Abort_IT+0x3c4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d04f      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a30      	ldr	r2, [pc, #192]	@ (8005d6c <HAL_DMA_Abort_IT+0x3c8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d04a      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8005d70 <HAL_DMA_Abort_IT+0x3cc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d045      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8005d74 <HAL_DMA_Abort_IT+0x3d0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d040      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8005d78 <HAL_DMA_Abort_IT+0x3d4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d03b      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8005d7c <HAL_DMA_Abort_IT+0x3d8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d036      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a28      	ldr	r2, [pc, #160]	@ (8005d80 <HAL_DMA_Abort_IT+0x3dc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d031      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a27      	ldr	r2, [pc, #156]	@ (8005d84 <HAL_DMA_Abort_IT+0x3e0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d02c      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a25      	ldr	r2, [pc, #148]	@ (8005d88 <HAL_DMA_Abort_IT+0x3e4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d027      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a24      	ldr	r2, [pc, #144]	@ (8005d8c <HAL_DMA_Abort_IT+0x3e8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d022      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a22      	ldr	r2, [pc, #136]	@ (8005d90 <HAL_DMA_Abort_IT+0x3ec>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d01d      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a21      	ldr	r2, [pc, #132]	@ (8005d94 <HAL_DMA_Abort_IT+0x3f0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d018      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1f      	ldr	r2, [pc, #124]	@ (8005d98 <HAL_DMA_Abort_IT+0x3f4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1e      	ldr	r2, [pc, #120]	@ (8005d9c <HAL_DMA_Abort_IT+0x3f8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00e      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005da0 <HAL_DMA_Abort_IT+0x3fc>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d009      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1b      	ldr	r2, [pc, #108]	@ (8005da4 <HAL_DMA_Abort_IT+0x400>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d004      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x3a2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a19      	ldr	r2, [pc, #100]	@ (8005da8 <HAL_DMA_Abort_IT+0x404>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d132      	bne.n	8005dac <HAL_DMA_Abort_IT+0x408>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e031      	b.n	8005dae <HAL_DMA_Abort_IT+0x40a>
 8005d4a:	bf00      	nop
 8005d4c:	40020010 	.word	0x40020010
 8005d50:	40020028 	.word	0x40020028
 8005d54:	40020040 	.word	0x40020040
 8005d58:	40020058 	.word	0x40020058
 8005d5c:	40020070 	.word	0x40020070
 8005d60:	40020088 	.word	0x40020088
 8005d64:	400200a0 	.word	0x400200a0
 8005d68:	400200b8 	.word	0x400200b8
 8005d6c:	40020410 	.word	0x40020410
 8005d70:	40020428 	.word	0x40020428
 8005d74:	40020440 	.word	0x40020440
 8005d78:	40020458 	.word	0x40020458
 8005d7c:	40020470 	.word	0x40020470
 8005d80:	40020488 	.word	0x40020488
 8005d84:	400204a0 	.word	0x400204a0
 8005d88:	400204b8 	.word	0x400204b8
 8005d8c:	58025408 	.word	0x58025408
 8005d90:	5802541c 	.word	0x5802541c
 8005d94:	58025430 	.word	0x58025430
 8005d98:	58025444 	.word	0x58025444
 8005d9c:	58025458 	.word	0x58025458
 8005da0:	5802546c 	.word	0x5802546c
 8005da4:	58025480 	.word	0x58025480
 8005da8:	58025494 	.word	0x58025494
 8005dac:	2300      	movs	r3, #0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d028      	beq.n	8005e04 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dc0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	409a      	lsls	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005de0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00c      	beq.n	8005e04 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005df4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005df8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e02:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop

08005e30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	@ 0x28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e3c:	4b67      	ldr	r3, [pc, #412]	@ (8005fdc <HAL_DMA_IRQHandler+0x1ac>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a67      	ldr	r2, [pc, #412]	@ (8005fe0 <HAL_DMA_IRQHandler+0x1b0>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	0a9b      	lsrs	r3, r3, #10
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a5f      	ldr	r2, [pc, #380]	@ (8005fe4 <HAL_DMA_IRQHandler+0x1b4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d04a      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a5d      	ldr	r2, [pc, #372]	@ (8005fe8 <HAL_DMA_IRQHandler+0x1b8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d045      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a5c      	ldr	r2, [pc, #368]	@ (8005fec <HAL_DMA_IRQHandler+0x1bc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d040      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a5a      	ldr	r2, [pc, #360]	@ (8005ff0 <HAL_DMA_IRQHandler+0x1c0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d03b      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a59      	ldr	r2, [pc, #356]	@ (8005ff4 <HAL_DMA_IRQHandler+0x1c4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d036      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a57      	ldr	r2, [pc, #348]	@ (8005ff8 <HAL_DMA_IRQHandler+0x1c8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d031      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a56      	ldr	r2, [pc, #344]	@ (8005ffc <HAL_DMA_IRQHandler+0x1cc>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d02c      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a54      	ldr	r2, [pc, #336]	@ (8006000 <HAL_DMA_IRQHandler+0x1d0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d027      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a53      	ldr	r2, [pc, #332]	@ (8006004 <HAL_DMA_IRQHandler+0x1d4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d022      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a51      	ldr	r2, [pc, #324]	@ (8006008 <HAL_DMA_IRQHandler+0x1d8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d01d      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a50      	ldr	r2, [pc, #320]	@ (800600c <HAL_DMA_IRQHandler+0x1dc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d018      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a4e      	ldr	r2, [pc, #312]	@ (8006010 <HAL_DMA_IRQHandler+0x1e0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d013      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a4d      	ldr	r2, [pc, #308]	@ (8006014 <HAL_DMA_IRQHandler+0x1e4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00e      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8006018 <HAL_DMA_IRQHandler+0x1e8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800601c <HAL_DMA_IRQHandler+0x1ec>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a48      	ldr	r2, [pc, #288]	@ (8006020 <HAL_DMA_IRQHandler+0x1f0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d101      	bne.n	8005f06 <HAL_DMA_IRQHandler+0xd6>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <HAL_DMA_IRQHandler+0xd8>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 842b 	beq.w	8006764 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2208      	movs	r2, #8
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 80a2 	beq.w	8006068 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2e      	ldr	r2, [pc, #184]	@ (8005fe4 <HAL_DMA_IRQHandler+0x1b4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04a      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe8 <HAL_DMA_IRQHandler+0x1b8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d045      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8005fec <HAL_DMA_IRQHandler+0x1bc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d040      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a2a      	ldr	r2, [pc, #168]	@ (8005ff0 <HAL_DMA_IRQHandler+0x1c0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d03b      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a28      	ldr	r2, [pc, #160]	@ (8005ff4 <HAL_DMA_IRQHandler+0x1c4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d036      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a27      	ldr	r2, [pc, #156]	@ (8005ff8 <HAL_DMA_IRQHandler+0x1c8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d031      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a25      	ldr	r2, [pc, #148]	@ (8005ffc <HAL_DMA_IRQHandler+0x1cc>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d02c      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a24      	ldr	r2, [pc, #144]	@ (8006000 <HAL_DMA_IRQHandler+0x1d0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d027      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a22      	ldr	r2, [pc, #136]	@ (8006004 <HAL_DMA_IRQHandler+0x1d4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d022      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a21      	ldr	r2, [pc, #132]	@ (8006008 <HAL_DMA_IRQHandler+0x1d8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d01d      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800600c <HAL_DMA_IRQHandler+0x1dc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d018      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1e      	ldr	r2, [pc, #120]	@ (8006010 <HAL_DMA_IRQHandler+0x1e0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8006014 <HAL_DMA_IRQHandler+0x1e4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1b      	ldr	r2, [pc, #108]	@ (8006018 <HAL_DMA_IRQHandler+0x1e8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a19      	ldr	r2, [pc, #100]	@ (800601c <HAL_DMA_IRQHandler+0x1ec>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x194>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a18      	ldr	r2, [pc, #96]	@ (8006020 <HAL_DMA_IRQHandler+0x1f0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d12f      	bne.n	8006024 <HAL_DMA_IRQHandler+0x1f4>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bf14      	ite	ne
 8005fd2:	2301      	movne	r3, #1
 8005fd4:	2300      	moveq	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	e02e      	b.n	8006038 <HAL_DMA_IRQHandler+0x208>
 8005fda:	bf00      	nop
 8005fdc:	24000004 	.word	0x24000004
 8005fe0:	1b4e81b5 	.word	0x1b4e81b5
 8005fe4:	40020010 	.word	0x40020010
 8005fe8:	40020028 	.word	0x40020028
 8005fec:	40020040 	.word	0x40020040
 8005ff0:	40020058 	.word	0x40020058
 8005ff4:	40020070 	.word	0x40020070
 8005ff8:	40020088 	.word	0x40020088
 8005ffc:	400200a0 	.word	0x400200a0
 8006000:	400200b8 	.word	0x400200b8
 8006004:	40020410 	.word	0x40020410
 8006008:	40020428 	.word	0x40020428
 800600c:	40020440 	.word	0x40020440
 8006010:	40020458 	.word	0x40020458
 8006014:	40020470 	.word	0x40020470
 8006018:	40020488 	.word	0x40020488
 800601c:	400204a0 	.word	0x400204a0
 8006020:	400204b8 	.word	0x400204b8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	bf14      	ite	ne
 8006032:	2301      	movne	r3, #1
 8006034:	2300      	moveq	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d015      	beq.n	8006068 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0204 	bic.w	r2, r2, #4
 800604a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	2208      	movs	r2, #8
 8006056:	409a      	lsls	r2, r3
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006060:	f043 0201 	orr.w	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	fa22 f303 	lsr.w	r3, r2, r3
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d06e      	beq.n	800615c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a69      	ldr	r2, [pc, #420]	@ (8006228 <HAL_DMA_IRQHandler+0x3f8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d04a      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a67      	ldr	r2, [pc, #412]	@ (800622c <HAL_DMA_IRQHandler+0x3fc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d045      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a66      	ldr	r2, [pc, #408]	@ (8006230 <HAL_DMA_IRQHandler+0x400>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d040      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a64      	ldr	r2, [pc, #400]	@ (8006234 <HAL_DMA_IRQHandler+0x404>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d03b      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a63      	ldr	r2, [pc, #396]	@ (8006238 <HAL_DMA_IRQHandler+0x408>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d036      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a61      	ldr	r2, [pc, #388]	@ (800623c <HAL_DMA_IRQHandler+0x40c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d031      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a60      	ldr	r2, [pc, #384]	@ (8006240 <HAL_DMA_IRQHandler+0x410>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d02c      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a5e      	ldr	r2, [pc, #376]	@ (8006244 <HAL_DMA_IRQHandler+0x414>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d027      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a5d      	ldr	r2, [pc, #372]	@ (8006248 <HAL_DMA_IRQHandler+0x418>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d022      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5b      	ldr	r2, [pc, #364]	@ (800624c <HAL_DMA_IRQHandler+0x41c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01d      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a5a      	ldr	r2, [pc, #360]	@ (8006250 <HAL_DMA_IRQHandler+0x420>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d018      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a58      	ldr	r2, [pc, #352]	@ (8006254 <HAL_DMA_IRQHandler+0x424>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d013      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a57      	ldr	r2, [pc, #348]	@ (8006258 <HAL_DMA_IRQHandler+0x428>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00e      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a55      	ldr	r2, [pc, #340]	@ (800625c <HAL_DMA_IRQHandler+0x42c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d009      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a54      	ldr	r2, [pc, #336]	@ (8006260 <HAL_DMA_IRQHandler+0x430>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d004      	beq.n	800611e <HAL_DMA_IRQHandler+0x2ee>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a52      	ldr	r2, [pc, #328]	@ (8006264 <HAL_DMA_IRQHandler+0x434>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d10a      	bne.n	8006134 <HAL_DMA_IRQHandler+0x304>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf14      	ite	ne
 800612c:	2301      	movne	r3, #1
 800612e:	2300      	moveq	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	e003      	b.n	800613c <HAL_DMA_IRQHandler+0x30c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00d      	beq.n	800615c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	2201      	movs	r2, #1
 800614a:	409a      	lsls	r2, r3
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006154:	f043 0202 	orr.w	r2, r3, #2
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	2204      	movs	r2, #4
 8006166:	409a      	lsls	r2, r3
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	4013      	ands	r3, r2
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 808f 	beq.w	8006290 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2c      	ldr	r2, [pc, #176]	@ (8006228 <HAL_DMA_IRQHandler+0x3f8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d04a      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a2a      	ldr	r2, [pc, #168]	@ (800622c <HAL_DMA_IRQHandler+0x3fc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d045      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a29      	ldr	r2, [pc, #164]	@ (8006230 <HAL_DMA_IRQHandler+0x400>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d040      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a27      	ldr	r2, [pc, #156]	@ (8006234 <HAL_DMA_IRQHandler+0x404>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d03b      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a26      	ldr	r2, [pc, #152]	@ (8006238 <HAL_DMA_IRQHandler+0x408>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d036      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a24      	ldr	r2, [pc, #144]	@ (800623c <HAL_DMA_IRQHandler+0x40c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d031      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a23      	ldr	r2, [pc, #140]	@ (8006240 <HAL_DMA_IRQHandler+0x410>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d02c      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a21      	ldr	r2, [pc, #132]	@ (8006244 <HAL_DMA_IRQHandler+0x414>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d027      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a20      	ldr	r2, [pc, #128]	@ (8006248 <HAL_DMA_IRQHandler+0x418>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d022      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a1e      	ldr	r2, [pc, #120]	@ (800624c <HAL_DMA_IRQHandler+0x41c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01d      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1d      	ldr	r2, [pc, #116]	@ (8006250 <HAL_DMA_IRQHandler+0x420>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d018      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006254 <HAL_DMA_IRQHandler+0x424>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d013      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006258 <HAL_DMA_IRQHandler+0x428>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00e      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a18      	ldr	r2, [pc, #96]	@ (800625c <HAL_DMA_IRQHandler+0x42c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d009      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a17      	ldr	r2, [pc, #92]	@ (8006260 <HAL_DMA_IRQHandler+0x430>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_DMA_IRQHandler+0x3e2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a15      	ldr	r2, [pc, #84]	@ (8006264 <HAL_DMA_IRQHandler+0x434>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d12a      	bne.n	8006268 <HAL_DMA_IRQHandler+0x438>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	bf14      	ite	ne
 8006220:	2301      	movne	r3, #1
 8006222:	2300      	moveq	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	e023      	b.n	8006270 <HAL_DMA_IRQHandler+0x440>
 8006228:	40020010 	.word	0x40020010
 800622c:	40020028 	.word	0x40020028
 8006230:	40020040 	.word	0x40020040
 8006234:	40020058 	.word	0x40020058
 8006238:	40020070 	.word	0x40020070
 800623c:	40020088 	.word	0x40020088
 8006240:	400200a0 	.word	0x400200a0
 8006244:	400200b8 	.word	0x400200b8
 8006248:	40020410 	.word	0x40020410
 800624c:	40020428 	.word	0x40020428
 8006250:	40020440 	.word	0x40020440
 8006254:	40020458 	.word	0x40020458
 8006258:	40020470 	.word	0x40020470
 800625c:	40020488 	.word	0x40020488
 8006260:	400204a0 	.word	0x400204a0
 8006264:	400204b8 	.word	0x400204b8
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2300      	movs	r3, #0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00d      	beq.n	8006290 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	2204      	movs	r2, #4
 800627e:	409a      	lsls	r2, r3
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006288:	f043 0204 	orr.w	r2, r3, #4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	2210      	movs	r2, #16
 800629a:	409a      	lsls	r2, r3
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	4013      	ands	r3, r2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80a6 	beq.w	80063f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a85      	ldr	r2, [pc, #532]	@ (80064c0 <HAL_DMA_IRQHandler+0x690>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d04a      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a83      	ldr	r2, [pc, #524]	@ (80064c4 <HAL_DMA_IRQHandler+0x694>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d045      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a82      	ldr	r2, [pc, #520]	@ (80064c8 <HAL_DMA_IRQHandler+0x698>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d040      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a80      	ldr	r2, [pc, #512]	@ (80064cc <HAL_DMA_IRQHandler+0x69c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d03b      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a7f      	ldr	r2, [pc, #508]	@ (80064d0 <HAL_DMA_IRQHandler+0x6a0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d036      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a7d      	ldr	r2, [pc, #500]	@ (80064d4 <HAL_DMA_IRQHandler+0x6a4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d031      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a7c      	ldr	r2, [pc, #496]	@ (80064d8 <HAL_DMA_IRQHandler+0x6a8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d02c      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a7a      	ldr	r2, [pc, #488]	@ (80064dc <HAL_DMA_IRQHandler+0x6ac>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d027      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a79      	ldr	r2, [pc, #484]	@ (80064e0 <HAL_DMA_IRQHandler+0x6b0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d022      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a77      	ldr	r2, [pc, #476]	@ (80064e4 <HAL_DMA_IRQHandler+0x6b4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d01d      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a76      	ldr	r2, [pc, #472]	@ (80064e8 <HAL_DMA_IRQHandler+0x6b8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d018      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a74      	ldr	r2, [pc, #464]	@ (80064ec <HAL_DMA_IRQHandler+0x6bc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a73      	ldr	r2, [pc, #460]	@ (80064f0 <HAL_DMA_IRQHandler+0x6c0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00e      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a71      	ldr	r2, [pc, #452]	@ (80064f4 <HAL_DMA_IRQHandler+0x6c4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a70      	ldr	r2, [pc, #448]	@ (80064f8 <HAL_DMA_IRQHandler+0x6c8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_DMA_IRQHandler+0x516>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a6e      	ldr	r2, [pc, #440]	@ (80064fc <HAL_DMA_IRQHandler+0x6cc>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d10a      	bne.n	800635c <HAL_DMA_IRQHandler+0x52c>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b00      	cmp	r3, #0
 8006352:	bf14      	ite	ne
 8006354:	2301      	movne	r3, #1
 8006356:	2300      	moveq	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e009      	b.n	8006370 <HAL_DMA_IRQHandler+0x540>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf14      	ite	ne
 800636a:	2301      	movne	r3, #1
 800636c:	2300      	moveq	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d03e      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2210      	movs	r2, #16
 800637e:	409a      	lsls	r2, r3
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d018      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d108      	bne.n	80063b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d024      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
 80063b0:	e01f      	b.n	80063f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01b      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
 80063c2:	e016      	b.n	80063f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d107      	bne.n	80063e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0208 	bic.w	r2, r2, #8
 80063e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2220      	movs	r2, #32
 80063fc:	409a      	lsls	r2, r3
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	4013      	ands	r3, r2
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8110 	beq.w	8006628 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a2c      	ldr	r2, [pc, #176]	@ (80064c0 <HAL_DMA_IRQHandler+0x690>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d04a      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a2b      	ldr	r2, [pc, #172]	@ (80064c4 <HAL_DMA_IRQHandler+0x694>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d045      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a29      	ldr	r2, [pc, #164]	@ (80064c8 <HAL_DMA_IRQHandler+0x698>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d040      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a28      	ldr	r2, [pc, #160]	@ (80064cc <HAL_DMA_IRQHandler+0x69c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d03b      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a26      	ldr	r2, [pc, #152]	@ (80064d0 <HAL_DMA_IRQHandler+0x6a0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d036      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a25      	ldr	r2, [pc, #148]	@ (80064d4 <HAL_DMA_IRQHandler+0x6a4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d031      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a23      	ldr	r2, [pc, #140]	@ (80064d8 <HAL_DMA_IRQHandler+0x6a8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d02c      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a22      	ldr	r2, [pc, #136]	@ (80064dc <HAL_DMA_IRQHandler+0x6ac>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d027      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a20      	ldr	r2, [pc, #128]	@ (80064e0 <HAL_DMA_IRQHandler+0x6b0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d022      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1f      	ldr	r2, [pc, #124]	@ (80064e4 <HAL_DMA_IRQHandler+0x6b4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d01d      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1d      	ldr	r2, [pc, #116]	@ (80064e8 <HAL_DMA_IRQHandler+0x6b8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d018      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1c      	ldr	r2, [pc, #112]	@ (80064ec <HAL_DMA_IRQHandler+0x6bc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d013      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1a      	ldr	r2, [pc, #104]	@ (80064f0 <HAL_DMA_IRQHandler+0x6c0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00e      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a19      	ldr	r2, [pc, #100]	@ (80064f4 <HAL_DMA_IRQHandler+0x6c4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d009      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a17      	ldr	r2, [pc, #92]	@ (80064f8 <HAL_DMA_IRQHandler+0x6c8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d004      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x678>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a16      	ldr	r2, [pc, #88]	@ (80064fc <HAL_DMA_IRQHandler+0x6cc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d12b      	bne.n	8006500 <HAL_DMA_IRQHandler+0x6d0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0310 	and.w	r3, r3, #16
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	bf14      	ite	ne
 80064b6:	2301      	movne	r3, #1
 80064b8:	2300      	moveq	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	e02a      	b.n	8006514 <HAL_DMA_IRQHandler+0x6e4>
 80064be:	bf00      	nop
 80064c0:	40020010 	.word	0x40020010
 80064c4:	40020028 	.word	0x40020028
 80064c8:	40020040 	.word	0x40020040
 80064cc:	40020058 	.word	0x40020058
 80064d0:	40020070 	.word	0x40020070
 80064d4:	40020088 	.word	0x40020088
 80064d8:	400200a0 	.word	0x400200a0
 80064dc:	400200b8 	.word	0x400200b8
 80064e0:	40020410 	.word	0x40020410
 80064e4:	40020428 	.word	0x40020428
 80064e8:	40020440 	.word	0x40020440
 80064ec:	40020458 	.word	0x40020458
 80064f0:	40020470 	.word	0x40020470
 80064f4:	40020488 	.word	0x40020488
 80064f8:	400204a0 	.word	0x400204a0
 80064fc:	400204b8 	.word	0x400204b8
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	bf14      	ite	ne
 800650e:	2301      	movne	r3, #1
 8006510:	2300      	moveq	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8087 	beq.w	8006628 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	2220      	movs	r2, #32
 8006524:	409a      	lsls	r2, r3
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b04      	cmp	r3, #4
 8006534:	d139      	bne.n	80065aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0216 	bic.w	r2, r2, #22
 8006544:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695a      	ldr	r2, [r3, #20]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006554:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <HAL_DMA_IRQHandler+0x736>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0208 	bic.w	r2, r2, #8
 8006574:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	223f      	movs	r2, #63	@ 0x3f
 8006580:	409a      	lsls	r2, r3
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8382 	beq.w	8006ca4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
          }
          return;
 80065a8:	e37c      	b.n	8006ca4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d018      	beq.n	80065ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d108      	bne.n	80065d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d02c      	beq.n	8006628 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	4798      	blx	r3
 80065d6:	e027      	b.n	8006628 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d023      	beq.n	8006628 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
 80065e8:	e01e      	b.n	8006628 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10f      	bne.n	8006618 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0210 	bic.w	r2, r2, #16
 8006606:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 833e 	beq.w	8006cae <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 8088 	beq.w	8006750 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2204      	movs	r2, #4
 8006644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a89      	ldr	r2, [pc, #548]	@ (8006874 <HAL_DMA_IRQHandler+0xa44>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d04a      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a88      	ldr	r2, [pc, #544]	@ (8006878 <HAL_DMA_IRQHandler+0xa48>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d045      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a86      	ldr	r2, [pc, #536]	@ (800687c <HAL_DMA_IRQHandler+0xa4c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d040      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a85      	ldr	r2, [pc, #532]	@ (8006880 <HAL_DMA_IRQHandler+0xa50>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d03b      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a83      	ldr	r2, [pc, #524]	@ (8006884 <HAL_DMA_IRQHandler+0xa54>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d036      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a82      	ldr	r2, [pc, #520]	@ (8006888 <HAL_DMA_IRQHandler+0xa58>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d031      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a80      	ldr	r2, [pc, #512]	@ (800688c <HAL_DMA_IRQHandler+0xa5c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d02c      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a7f      	ldr	r2, [pc, #508]	@ (8006890 <HAL_DMA_IRQHandler+0xa60>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d027      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a7d      	ldr	r2, [pc, #500]	@ (8006894 <HAL_DMA_IRQHandler+0xa64>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d022      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006898 <HAL_DMA_IRQHandler+0xa68>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d01d      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a7a      	ldr	r2, [pc, #488]	@ (800689c <HAL_DMA_IRQHandler+0xa6c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d018      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a79      	ldr	r2, [pc, #484]	@ (80068a0 <HAL_DMA_IRQHandler+0xa70>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d013      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a77      	ldr	r2, [pc, #476]	@ (80068a4 <HAL_DMA_IRQHandler+0xa74>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00e      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a76      	ldr	r2, [pc, #472]	@ (80068a8 <HAL_DMA_IRQHandler+0xa78>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d009      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a74      	ldr	r2, [pc, #464]	@ (80068ac <HAL_DMA_IRQHandler+0xa7c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d004      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x8b8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a73      	ldr	r2, [pc, #460]	@ (80068b0 <HAL_DMA_IRQHandler+0xa80>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d108      	bne.n	80066fa <HAL_DMA_IRQHandler+0x8ca>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0201 	bic.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	e007      	b.n	800670a <HAL_DMA_IRQHandler+0x8da>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0201 	bic.w	r2, r2, #1
 8006708:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3301      	adds	r3, #1
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006712:	429a      	cmp	r2, r3
 8006714:	d307      	bcc.n	8006726 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f2      	bne.n	800670a <HAL_DMA_IRQHandler+0x8da>
 8006724:	e000      	b.n	8006728 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006726:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2203      	movs	r2, #3
 800673a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800673e:	e003      	b.n	8006748 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 82aa 	beq.w	8006cae <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
 8006762:	e2a4      	b.n	8006cae <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a52      	ldr	r2, [pc, #328]	@ (80068b4 <HAL_DMA_IRQHandler+0xa84>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d04a      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a51      	ldr	r2, [pc, #324]	@ (80068b8 <HAL_DMA_IRQHandler+0xa88>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d045      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a4f      	ldr	r2, [pc, #316]	@ (80068bc <HAL_DMA_IRQHandler+0xa8c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d040      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a4e      	ldr	r2, [pc, #312]	@ (80068c0 <HAL_DMA_IRQHandler+0xa90>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d03b      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a4c      	ldr	r2, [pc, #304]	@ (80068c4 <HAL_DMA_IRQHandler+0xa94>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d036      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a4b      	ldr	r2, [pc, #300]	@ (80068c8 <HAL_DMA_IRQHandler+0xa98>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d031      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a49      	ldr	r2, [pc, #292]	@ (80068cc <HAL_DMA_IRQHandler+0xa9c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d02c      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a48      	ldr	r2, [pc, #288]	@ (80068d0 <HAL_DMA_IRQHandler+0xaa0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d027      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a46      	ldr	r2, [pc, #280]	@ (80068d4 <HAL_DMA_IRQHandler+0xaa4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d022      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a45      	ldr	r2, [pc, #276]	@ (80068d8 <HAL_DMA_IRQHandler+0xaa8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d01d      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a43      	ldr	r2, [pc, #268]	@ (80068dc <HAL_DMA_IRQHandler+0xaac>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d018      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a42      	ldr	r2, [pc, #264]	@ (80068e0 <HAL_DMA_IRQHandler+0xab0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d013      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a40      	ldr	r2, [pc, #256]	@ (80068e4 <HAL_DMA_IRQHandler+0xab4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00e      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3f      	ldr	r2, [pc, #252]	@ (80068e8 <HAL_DMA_IRQHandler+0xab8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a3d      	ldr	r2, [pc, #244]	@ (80068ec <HAL_DMA_IRQHandler+0xabc>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <HAL_DMA_IRQHandler+0x9d4>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a3c      	ldr	r2, [pc, #240]	@ (80068f0 <HAL_DMA_IRQHandler+0xac0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d101      	bne.n	8006808 <HAL_DMA_IRQHandler+0x9d8>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <HAL_DMA_IRQHandler+0x9da>
 8006808:	2300      	movs	r3, #0
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 824f 	beq.w	8006cae <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	2204      	movs	r2, #4
 8006822:	409a      	lsls	r2, r3
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80dd 	beq.w	80069e8 <HAL_DMA_IRQHandler+0xbb8>
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80d7 	beq.w	80069e8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2204      	movs	r2, #4
 8006844:	409a      	lsls	r2, r3
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d059      	beq.n	8006908 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d14a      	bne.n	80068f4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8220 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006870:	e21a      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe78>
 8006872:	bf00      	nop
 8006874:	40020010 	.word	0x40020010
 8006878:	40020028 	.word	0x40020028
 800687c:	40020040 	.word	0x40020040
 8006880:	40020058 	.word	0x40020058
 8006884:	40020070 	.word	0x40020070
 8006888:	40020088 	.word	0x40020088
 800688c:	400200a0 	.word	0x400200a0
 8006890:	400200b8 	.word	0x400200b8
 8006894:	40020410 	.word	0x40020410
 8006898:	40020428 	.word	0x40020428
 800689c:	40020440 	.word	0x40020440
 80068a0:	40020458 	.word	0x40020458
 80068a4:	40020470 	.word	0x40020470
 80068a8:	40020488 	.word	0x40020488
 80068ac:	400204a0 	.word	0x400204a0
 80068b0:	400204b8 	.word	0x400204b8
 80068b4:	48022c08 	.word	0x48022c08
 80068b8:	48022c1c 	.word	0x48022c1c
 80068bc:	48022c30 	.word	0x48022c30
 80068c0:	48022c44 	.word	0x48022c44
 80068c4:	48022c58 	.word	0x48022c58
 80068c8:	48022c6c 	.word	0x48022c6c
 80068cc:	48022c80 	.word	0x48022c80
 80068d0:	48022c94 	.word	0x48022c94
 80068d4:	58025408 	.word	0x58025408
 80068d8:	5802541c 	.word	0x5802541c
 80068dc:	58025430 	.word	0x58025430
 80068e0:	58025444 	.word	0x58025444
 80068e4:	58025458 	.word	0x58025458
 80068e8:	5802546c 	.word	0x5802546c
 80068ec:	58025480 	.word	0x58025480
 80068f0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 81d5 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006906:	e1cf      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d160      	bne.n	80069d4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a7f      	ldr	r2, [pc, #508]	@ (8006b14 <HAL_DMA_IRQHandler+0xce4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d04a      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a7d      	ldr	r2, [pc, #500]	@ (8006b18 <HAL_DMA_IRQHandler+0xce8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d045      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a7c      	ldr	r2, [pc, #496]	@ (8006b1c <HAL_DMA_IRQHandler+0xcec>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d040      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a7a      	ldr	r2, [pc, #488]	@ (8006b20 <HAL_DMA_IRQHandler+0xcf0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d03b      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a79      	ldr	r2, [pc, #484]	@ (8006b24 <HAL_DMA_IRQHandler+0xcf4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d036      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a77      	ldr	r2, [pc, #476]	@ (8006b28 <HAL_DMA_IRQHandler+0xcf8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d031      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a76      	ldr	r2, [pc, #472]	@ (8006b2c <HAL_DMA_IRQHandler+0xcfc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d02c      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a74      	ldr	r2, [pc, #464]	@ (8006b30 <HAL_DMA_IRQHandler+0xd00>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d027      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a73      	ldr	r2, [pc, #460]	@ (8006b34 <HAL_DMA_IRQHandler+0xd04>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d022      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a71      	ldr	r2, [pc, #452]	@ (8006b38 <HAL_DMA_IRQHandler+0xd08>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01d      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a70      	ldr	r2, [pc, #448]	@ (8006b3c <HAL_DMA_IRQHandler+0xd0c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d018      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a6e      	ldr	r2, [pc, #440]	@ (8006b40 <HAL_DMA_IRQHandler+0xd10>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a6d      	ldr	r2, [pc, #436]	@ (8006b44 <HAL_DMA_IRQHandler+0xd14>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a6b      	ldr	r2, [pc, #428]	@ (8006b48 <HAL_DMA_IRQHandler+0xd18>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a6a      	ldr	r2, [pc, #424]	@ (8006b4c <HAL_DMA_IRQHandler+0xd1c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb82>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a68      	ldr	r2, [pc, #416]	@ (8006b50 <HAL_DMA_IRQHandler+0xd20>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d108      	bne.n	80069c4 <HAL_DMA_IRQHandler+0xb94>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0208 	bic.w	r2, r2, #8
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	e007      	b.n	80069d4 <HAL_DMA_IRQHandler+0xba4>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0204 	bic.w	r2, r2, #4
 80069d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8165 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069e6:	e15f      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	2202      	movs	r2, #2
 80069f2:	409a      	lsls	r2, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80c5 	beq.w	8006b88 <HAL_DMA_IRQHandler+0xd58>
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80bf 	beq.w	8006b88 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0e:	f003 031f 	and.w	r3, r3, #31
 8006a12:	2202      	movs	r2, #2
 8006a14:	409a      	lsls	r2, r3
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d018      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d109      	bne.n	8006a42 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 813a 	beq.w	8006cac <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a40:	e134      	b.n	8006cac <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8130 	beq.w	8006cac <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a54:	e12a      	b.n	8006cac <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f040 8089 	bne.w	8006b74 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a2b      	ldr	r2, [pc, #172]	@ (8006b14 <HAL_DMA_IRQHandler+0xce4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d04a      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a29      	ldr	r2, [pc, #164]	@ (8006b18 <HAL_DMA_IRQHandler+0xce8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d045      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a28      	ldr	r2, [pc, #160]	@ (8006b1c <HAL_DMA_IRQHandler+0xcec>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d040      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a26      	ldr	r2, [pc, #152]	@ (8006b20 <HAL_DMA_IRQHandler+0xcf0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d03b      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a25      	ldr	r2, [pc, #148]	@ (8006b24 <HAL_DMA_IRQHandler+0xcf4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d036      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a23      	ldr	r2, [pc, #140]	@ (8006b28 <HAL_DMA_IRQHandler+0xcf8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d031      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a22      	ldr	r2, [pc, #136]	@ (8006b2c <HAL_DMA_IRQHandler+0xcfc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d02c      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a20      	ldr	r2, [pc, #128]	@ (8006b30 <HAL_DMA_IRQHandler+0xd00>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d027      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b34 <HAL_DMA_IRQHandler+0xd04>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d022      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b38 <HAL_DMA_IRQHandler+0xd08>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01d      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1c      	ldr	r2, [pc, #112]	@ (8006b3c <HAL_DMA_IRQHandler+0xd0c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d018      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8006b40 <HAL_DMA_IRQHandler+0xd10>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a19      	ldr	r2, [pc, #100]	@ (8006b44 <HAL_DMA_IRQHandler+0xd14>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00e      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a17      	ldr	r2, [pc, #92]	@ (8006b48 <HAL_DMA_IRQHandler+0xd18>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d009      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a16      	ldr	r2, [pc, #88]	@ (8006b4c <HAL_DMA_IRQHandler+0xd1c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xcd2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a14      	ldr	r2, [pc, #80]	@ (8006b50 <HAL_DMA_IRQHandler+0xd20>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d128      	bne.n	8006b54 <HAL_DMA_IRQHandler+0xd24>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0214 	bic.w	r2, r2, #20
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e027      	b.n	8006b64 <HAL_DMA_IRQHandler+0xd34>
 8006b14:	40020010 	.word	0x40020010
 8006b18:	40020028 	.word	0x40020028
 8006b1c:	40020040 	.word	0x40020040
 8006b20:	40020058 	.word	0x40020058
 8006b24:	40020070 	.word	0x40020070
 8006b28:	40020088 	.word	0x40020088
 8006b2c:	400200a0 	.word	0x400200a0
 8006b30:	400200b8 	.word	0x400200b8
 8006b34:	40020410 	.word	0x40020410
 8006b38:	40020428 	.word	0x40020428
 8006b3c:	40020440 	.word	0x40020440
 8006b40:	40020458 	.word	0x40020458
 8006b44:	40020470 	.word	0x40020470
 8006b48:	40020488 	.word	0x40020488
 8006b4c:	400204a0 	.word	0x400204a0
 8006b50:	400204b8 	.word	0x400204b8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 020a 	bic.w	r2, r2, #10
 8006b62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8097 	beq.w	8006cac <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b86:	e091      	b.n	8006cac <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	2208      	movs	r2, #8
 8006b92:	409a      	lsls	r2, r3
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8088 	beq.w	8006cae <HAL_DMA_IRQHandler+0xe7e>
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8082 	beq.w	8006cae <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a41      	ldr	r2, [pc, #260]	@ (8006cb4 <HAL_DMA_IRQHandler+0xe84>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d04a      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a3f      	ldr	r2, [pc, #252]	@ (8006cb8 <HAL_DMA_IRQHandler+0xe88>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d045      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8006cbc <HAL_DMA_IRQHandler+0xe8c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d040      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8006cc0 <HAL_DMA_IRQHandler+0xe90>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d03b      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8006cc4 <HAL_DMA_IRQHandler+0xe94>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d036      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a39      	ldr	r2, [pc, #228]	@ (8006cc8 <HAL_DMA_IRQHandler+0xe98>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d031      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a38      	ldr	r2, [pc, #224]	@ (8006ccc <HAL_DMA_IRQHandler+0xe9c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d02c      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a36      	ldr	r2, [pc, #216]	@ (8006cd0 <HAL_DMA_IRQHandler+0xea0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d027      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a35      	ldr	r2, [pc, #212]	@ (8006cd4 <HAL_DMA_IRQHandler+0xea4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d022      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a33      	ldr	r2, [pc, #204]	@ (8006cd8 <HAL_DMA_IRQHandler+0xea8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d01d      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a32      	ldr	r2, [pc, #200]	@ (8006cdc <HAL_DMA_IRQHandler+0xeac>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d018      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a30      	ldr	r2, [pc, #192]	@ (8006ce0 <HAL_DMA_IRQHandler+0xeb0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a2f      	ldr	r2, [pc, #188]	@ (8006ce4 <HAL_DMA_IRQHandler+0xeb4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00e      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a2d      	ldr	r2, [pc, #180]	@ (8006ce8 <HAL_DMA_IRQHandler+0xeb8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d009      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8006cec <HAL_DMA_IRQHandler+0xebc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d004      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xe1a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf0 <HAL_DMA_IRQHandler+0xec0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d108      	bne.n	8006c5c <HAL_DMA_IRQHandler+0xe2c>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 021c 	bic.w	r2, r2, #28
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	e007      	b.n	8006c6c <HAL_DMA_IRQHandler+0xe3c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 020e 	bic.w	r2, r2, #14
 8006c6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2201      	movs	r2, #1
 8006c76:	409a      	lsls	r2, r3
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d009      	beq.n	8006cae <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4798      	blx	r3
 8006ca2:	e004      	b.n	8006cae <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006ca4:	bf00      	nop
 8006ca6:	e002      	b.n	8006cae <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ca8:	bf00      	nop
 8006caa:	e000      	b.n	8006cae <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006cae:	3728      	adds	r7, #40	@ 0x28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40020010 	.word	0x40020010
 8006cb8:	40020028 	.word	0x40020028
 8006cbc:	40020040 	.word	0x40020040
 8006cc0:	40020058 	.word	0x40020058
 8006cc4:	40020070 	.word	0x40020070
 8006cc8:	40020088 	.word	0x40020088
 8006ccc:	400200a0 	.word	0x400200a0
 8006cd0:	400200b8 	.word	0x400200b8
 8006cd4:	40020410 	.word	0x40020410
 8006cd8:	40020428 	.word	0x40020428
 8006cdc:	40020440 	.word	0x40020440
 8006ce0:	40020458 	.word	0x40020458
 8006ce4:	40020470 	.word	0x40020470
 8006ce8:	40020488 	.word	0x40020488
 8006cec:	400204a0 	.word	0x400204a0
 8006cf0:	400204b8 	.word	0x400204b8

08006cf4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a7f      	ldr	r2, [pc, #508]	@ (8006f10 <DMA_SetConfig+0x21c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d072      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a7d      	ldr	r2, [pc, #500]	@ (8006f14 <DMA_SetConfig+0x220>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d06d      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a7c      	ldr	r2, [pc, #496]	@ (8006f18 <DMA_SetConfig+0x224>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d068      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a7a      	ldr	r2, [pc, #488]	@ (8006f1c <DMA_SetConfig+0x228>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d063      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a79      	ldr	r2, [pc, #484]	@ (8006f20 <DMA_SetConfig+0x22c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d05e      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a77      	ldr	r2, [pc, #476]	@ (8006f24 <DMA_SetConfig+0x230>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d059      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a76      	ldr	r2, [pc, #472]	@ (8006f28 <DMA_SetConfig+0x234>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d054      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a74      	ldr	r2, [pc, #464]	@ (8006f2c <DMA_SetConfig+0x238>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d04f      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a73      	ldr	r2, [pc, #460]	@ (8006f30 <DMA_SetConfig+0x23c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d04a      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a71      	ldr	r2, [pc, #452]	@ (8006f34 <DMA_SetConfig+0x240>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d045      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a70      	ldr	r2, [pc, #448]	@ (8006f38 <DMA_SetConfig+0x244>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d040      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a6e      	ldr	r2, [pc, #440]	@ (8006f3c <DMA_SetConfig+0x248>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d03b      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a6d      	ldr	r2, [pc, #436]	@ (8006f40 <DMA_SetConfig+0x24c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d036      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a6b      	ldr	r2, [pc, #428]	@ (8006f44 <DMA_SetConfig+0x250>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d031      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a6a      	ldr	r2, [pc, #424]	@ (8006f48 <DMA_SetConfig+0x254>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d02c      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a68      	ldr	r2, [pc, #416]	@ (8006f4c <DMA_SetConfig+0x258>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d027      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a67      	ldr	r2, [pc, #412]	@ (8006f50 <DMA_SetConfig+0x25c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d022      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a65      	ldr	r2, [pc, #404]	@ (8006f54 <DMA_SetConfig+0x260>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d01d      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a64      	ldr	r2, [pc, #400]	@ (8006f58 <DMA_SetConfig+0x264>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d018      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a62      	ldr	r2, [pc, #392]	@ (8006f5c <DMA_SetConfig+0x268>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a61      	ldr	r2, [pc, #388]	@ (8006f60 <DMA_SetConfig+0x26c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00e      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a5f      	ldr	r2, [pc, #380]	@ (8006f64 <DMA_SetConfig+0x270>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d009      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a5e      	ldr	r2, [pc, #376]	@ (8006f68 <DMA_SetConfig+0x274>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a5c      	ldr	r2, [pc, #368]	@ (8006f6c <DMA_SetConfig+0x278>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d101      	bne.n	8006e02 <DMA_SetConfig+0x10e>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <DMA_SetConfig+0x110>
 8006e02:	2300      	movs	r3, #0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00d      	beq.n	8006e24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006e10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006e22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a39      	ldr	r2, [pc, #228]	@ (8006f10 <DMA_SetConfig+0x21c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d04a      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a38      	ldr	r2, [pc, #224]	@ (8006f14 <DMA_SetConfig+0x220>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d045      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a36      	ldr	r2, [pc, #216]	@ (8006f18 <DMA_SetConfig+0x224>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d040      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a35      	ldr	r2, [pc, #212]	@ (8006f1c <DMA_SetConfig+0x228>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d03b      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a33      	ldr	r2, [pc, #204]	@ (8006f20 <DMA_SetConfig+0x22c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d036      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a32      	ldr	r2, [pc, #200]	@ (8006f24 <DMA_SetConfig+0x230>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d031      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a30      	ldr	r2, [pc, #192]	@ (8006f28 <DMA_SetConfig+0x234>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d02c      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8006f2c <DMA_SetConfig+0x238>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d027      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a2d      	ldr	r2, [pc, #180]	@ (8006f30 <DMA_SetConfig+0x23c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d022      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a2c      	ldr	r2, [pc, #176]	@ (8006f34 <DMA_SetConfig+0x240>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d01d      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8006f38 <DMA_SetConfig+0x244>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d018      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a29      	ldr	r2, [pc, #164]	@ (8006f3c <DMA_SetConfig+0x248>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d013      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a27      	ldr	r2, [pc, #156]	@ (8006f40 <DMA_SetConfig+0x24c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00e      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a26      	ldr	r2, [pc, #152]	@ (8006f44 <DMA_SetConfig+0x250>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d009      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a24      	ldr	r2, [pc, #144]	@ (8006f48 <DMA_SetConfig+0x254>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d004      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a23      	ldr	r2, [pc, #140]	@ (8006f4c <DMA_SetConfig+0x258>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d101      	bne.n	8006ec8 <DMA_SetConfig+0x1d4>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <DMA_SetConfig+0x1d6>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d059      	beq.n	8006f82 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	223f      	movs	r2, #63	@ 0x3f
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006eec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2b40      	cmp	r3, #64	@ 0x40
 8006efc:	d138      	bne.n	8006f70 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f0e:	e0ae      	b.n	800706e <DMA_SetConfig+0x37a>
 8006f10:	40020010 	.word	0x40020010
 8006f14:	40020028 	.word	0x40020028
 8006f18:	40020040 	.word	0x40020040
 8006f1c:	40020058 	.word	0x40020058
 8006f20:	40020070 	.word	0x40020070
 8006f24:	40020088 	.word	0x40020088
 8006f28:	400200a0 	.word	0x400200a0
 8006f2c:	400200b8 	.word	0x400200b8
 8006f30:	40020410 	.word	0x40020410
 8006f34:	40020428 	.word	0x40020428
 8006f38:	40020440 	.word	0x40020440
 8006f3c:	40020458 	.word	0x40020458
 8006f40:	40020470 	.word	0x40020470
 8006f44:	40020488 	.word	0x40020488
 8006f48:	400204a0 	.word	0x400204a0
 8006f4c:	400204b8 	.word	0x400204b8
 8006f50:	58025408 	.word	0x58025408
 8006f54:	5802541c 	.word	0x5802541c
 8006f58:	58025430 	.word	0x58025430
 8006f5c:	58025444 	.word	0x58025444
 8006f60:	58025458 	.word	0x58025458
 8006f64:	5802546c 	.word	0x5802546c
 8006f68:	58025480 	.word	0x58025480
 8006f6c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	60da      	str	r2, [r3, #12]
}
 8006f80:	e075      	b.n	800706e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a3d      	ldr	r2, [pc, #244]	@ (800707c <DMA_SetConfig+0x388>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d04a      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a3b      	ldr	r2, [pc, #236]	@ (8007080 <DMA_SetConfig+0x38c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d045      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a3a      	ldr	r2, [pc, #232]	@ (8007084 <DMA_SetConfig+0x390>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d040      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a38      	ldr	r2, [pc, #224]	@ (8007088 <DMA_SetConfig+0x394>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d03b      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a37      	ldr	r2, [pc, #220]	@ (800708c <DMA_SetConfig+0x398>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d036      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a35      	ldr	r2, [pc, #212]	@ (8007090 <DMA_SetConfig+0x39c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d031      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a34      	ldr	r2, [pc, #208]	@ (8007094 <DMA_SetConfig+0x3a0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d02c      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a32      	ldr	r2, [pc, #200]	@ (8007098 <DMA_SetConfig+0x3a4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d027      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a31      	ldr	r2, [pc, #196]	@ (800709c <DMA_SetConfig+0x3a8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d022      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80070a0 <DMA_SetConfig+0x3ac>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01d      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a2e      	ldr	r2, [pc, #184]	@ (80070a4 <DMA_SetConfig+0x3b0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d018      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80070a8 <DMA_SetConfig+0x3b4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80070ac <DMA_SetConfig+0x3b8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a29      	ldr	r2, [pc, #164]	@ (80070b0 <DMA_SetConfig+0x3bc>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <DMA_SetConfig+0x32e>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a28      	ldr	r2, [pc, #160]	@ (80070b4 <DMA_SetConfig+0x3c0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <DMA_SetConfig+0x32e>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a26      	ldr	r2, [pc, #152]	@ (80070b8 <DMA_SetConfig+0x3c4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d101      	bne.n	8007026 <DMA_SetConfig+0x332>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <DMA_SetConfig+0x334>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d020      	beq.n	800706e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	2201      	movs	r2, #1
 8007036:	409a      	lsls	r2, r3
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	2b40      	cmp	r3, #64	@ 0x40
 800704a:	d108      	bne.n	800705e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	60da      	str	r2, [r3, #12]
}
 800705c:	e007      	b.n	800706e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	60da      	str	r2, [r3, #12]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	48022c08 	.word	0x48022c08
 8007080:	48022c1c 	.word	0x48022c1c
 8007084:	48022c30 	.word	0x48022c30
 8007088:	48022c44 	.word	0x48022c44
 800708c:	48022c58 	.word	0x48022c58
 8007090:	48022c6c 	.word	0x48022c6c
 8007094:	48022c80 	.word	0x48022c80
 8007098:	48022c94 	.word	0x48022c94
 800709c:	58025408 	.word	0x58025408
 80070a0:	5802541c 	.word	0x5802541c
 80070a4:	58025430 	.word	0x58025430
 80070a8:	58025444 	.word	0x58025444
 80070ac:	58025458 	.word	0x58025458
 80070b0:	5802546c 	.word	0x5802546c
 80070b4:	58025480 	.word	0x58025480
 80070b8:	58025494 	.word	0x58025494

080070bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a42      	ldr	r2, [pc, #264]	@ (80071d4 <DMA_CalcBaseAndBitshift+0x118>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d04a      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a41      	ldr	r2, [pc, #260]	@ (80071d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d045      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a3f      	ldr	r2, [pc, #252]	@ (80071dc <DMA_CalcBaseAndBitshift+0x120>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d040      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a3e      	ldr	r2, [pc, #248]	@ (80071e0 <DMA_CalcBaseAndBitshift+0x124>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d03b      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a3c      	ldr	r2, [pc, #240]	@ (80071e4 <DMA_CalcBaseAndBitshift+0x128>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d036      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a3b      	ldr	r2, [pc, #236]	@ (80071e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d031      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a39      	ldr	r2, [pc, #228]	@ (80071ec <DMA_CalcBaseAndBitshift+0x130>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d02c      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a38      	ldr	r2, [pc, #224]	@ (80071f0 <DMA_CalcBaseAndBitshift+0x134>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d027      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a36      	ldr	r2, [pc, #216]	@ (80071f4 <DMA_CalcBaseAndBitshift+0x138>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d022      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a35      	ldr	r2, [pc, #212]	@ (80071f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d01d      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a33      	ldr	r2, [pc, #204]	@ (80071fc <DMA_CalcBaseAndBitshift+0x140>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d018      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a32      	ldr	r2, [pc, #200]	@ (8007200 <DMA_CalcBaseAndBitshift+0x144>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a30      	ldr	r2, [pc, #192]	@ (8007204 <DMA_CalcBaseAndBitshift+0x148>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00e      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a2f      	ldr	r2, [pc, #188]	@ (8007208 <DMA_CalcBaseAndBitshift+0x14c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d009      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a2d      	ldr	r2, [pc, #180]	@ (800720c <DMA_CalcBaseAndBitshift+0x150>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xa8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2c      	ldr	r2, [pc, #176]	@ (8007210 <DMA_CalcBaseAndBitshift+0x154>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d101      	bne.n	8007168 <DMA_CalcBaseAndBitshift+0xac>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <DMA_CalcBaseAndBitshift+0xae>
 8007168:	2300      	movs	r3, #0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d024      	beq.n	80071b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	3b10      	subs	r3, #16
 8007176:	4a27      	ldr	r2, [pc, #156]	@ (8007214 <DMA_CalcBaseAndBitshift+0x158>)
 8007178:	fba2 2303 	umull	r2, r3, r2, r3
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	4a24      	ldr	r2, [pc, #144]	@ (8007218 <DMA_CalcBaseAndBitshift+0x15c>)
 8007188:	5cd3      	ldrb	r3, [r2, r3]
 800718a:	461a      	mov	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b03      	cmp	r3, #3
 8007194:	d908      	bls.n	80071a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	4b1f      	ldr	r3, [pc, #124]	@ (800721c <DMA_CalcBaseAndBitshift+0x160>)
 800719e:	4013      	ands	r3, r2
 80071a0:	1d1a      	adds	r2, r3, #4
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80071a6:	e00d      	b.n	80071c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	4b1b      	ldr	r3, [pc, #108]	@ (800721c <DMA_CalcBaseAndBitshift+0x160>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80071b6:	e005      	b.n	80071c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	40020010 	.word	0x40020010
 80071d8:	40020028 	.word	0x40020028
 80071dc:	40020040 	.word	0x40020040
 80071e0:	40020058 	.word	0x40020058
 80071e4:	40020070 	.word	0x40020070
 80071e8:	40020088 	.word	0x40020088
 80071ec:	400200a0 	.word	0x400200a0
 80071f0:	400200b8 	.word	0x400200b8
 80071f4:	40020410 	.word	0x40020410
 80071f8:	40020428 	.word	0x40020428
 80071fc:	40020440 	.word	0x40020440
 8007200:	40020458 	.word	0x40020458
 8007204:	40020470 	.word	0x40020470
 8007208:	40020488 	.word	0x40020488
 800720c:	400204a0 	.word	0x400204a0
 8007210:	400204b8 	.word	0x400204b8
 8007214:	aaaaaaab 	.word	0xaaaaaaab
 8007218:	080134bc 	.word	0x080134bc
 800721c:	fffffc00 	.word	0xfffffc00

08007220 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d120      	bne.n	8007276 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007238:	2b03      	cmp	r3, #3
 800723a:	d858      	bhi.n	80072ee <DMA_CheckFifoParam+0xce>
 800723c:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <DMA_CheckFifoParam+0x24>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007255 	.word	0x08007255
 8007248:	08007267 	.word	0x08007267
 800724c:	08007255 	.word	0x08007255
 8007250:	080072ef 	.word	0x080072ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d048      	beq.n	80072f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007264:	e045      	b.n	80072f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800726e:	d142      	bne.n	80072f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007274:	e03f      	b.n	80072f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800727e:	d123      	bne.n	80072c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	2b03      	cmp	r3, #3
 8007286:	d838      	bhi.n	80072fa <DMA_CheckFifoParam+0xda>
 8007288:	a201      	add	r2, pc, #4	@ (adr r2, 8007290 <DMA_CheckFifoParam+0x70>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072a1 	.word	0x080072a1
 8007294:	080072a7 	.word	0x080072a7
 8007298:	080072a1 	.word	0x080072a1
 800729c:	080072b9 	.word	0x080072b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	73fb      	strb	r3, [r7, #15]
        break;
 80072a4:	e030      	b.n	8007308 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d025      	beq.n	80072fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072b6:	e022      	b.n	80072fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80072c0:	d11f      	bne.n	8007302 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072c6:	e01c      	b.n	8007302 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d902      	bls.n	80072d6 <DMA_CheckFifoParam+0xb6>
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d003      	beq.n	80072dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80072d4:	e018      	b.n	8007308 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	73fb      	strb	r3, [r7, #15]
        break;
 80072da:	e015      	b.n	8007308 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00e      	beq.n	8007306 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
    break;
 80072ec:	e00b      	b.n	8007306 <DMA_CheckFifoParam+0xe6>
        break;
 80072ee:	bf00      	nop
 80072f0:	e00a      	b.n	8007308 <DMA_CheckFifoParam+0xe8>
        break;
 80072f2:	bf00      	nop
 80072f4:	e008      	b.n	8007308 <DMA_CheckFifoParam+0xe8>
        break;
 80072f6:	bf00      	nop
 80072f8:	e006      	b.n	8007308 <DMA_CheckFifoParam+0xe8>
        break;
 80072fa:	bf00      	nop
 80072fc:	e004      	b.n	8007308 <DMA_CheckFifoParam+0xe8>
        break;
 80072fe:	bf00      	nop
 8007300:	e002      	b.n	8007308 <DMA_CheckFifoParam+0xe8>
        break;
 8007302:	bf00      	nop
 8007304:	e000      	b.n	8007308 <DMA_CheckFifoParam+0xe8>
    break;
 8007306:	bf00      	nop
    }
  }

  return status;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop

08007318 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a38      	ldr	r2, [pc, #224]	@ (800740c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d022      	beq.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a36      	ldr	r2, [pc, #216]	@ (8007410 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01d      	beq.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a35      	ldr	r2, [pc, #212]	@ (8007414 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d018      	beq.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a33      	ldr	r2, [pc, #204]	@ (8007418 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d013      	beq.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a32      	ldr	r2, [pc, #200]	@ (800741c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00e      	beq.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a30      	ldr	r2, [pc, #192]	@ (8007420 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d009      	beq.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a2f      	ldr	r2, [pc, #188]	@ (8007424 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d004      	beq.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a2d      	ldr	r2, [pc, #180]	@ (8007428 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d101      	bne.n	800737a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800737a:	2300      	movs	r3, #0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01a      	beq.n	80073b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	3b08      	subs	r3, #8
 8007388:	4a28      	ldr	r2, [pc, #160]	@ (800742c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800738a:	fba2 2303 	umull	r2, r3, r2, r3
 800738e:	091b      	lsrs	r3, r3, #4
 8007390:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4b26      	ldr	r3, [pc, #152]	@ (8007430 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	461a      	mov	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a24      	ldr	r2, [pc, #144]	@ (8007434 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80073a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	2201      	movs	r2, #1
 80073ae:	409a      	lsls	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80073b4:	e024      	b.n	8007400 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	3b10      	subs	r3, #16
 80073be:	4a1e      	ldr	r2, [pc, #120]	@ (8007438 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80073c0:	fba2 2303 	umull	r2, r3, r2, r3
 80073c4:	091b      	lsrs	r3, r3, #4
 80073c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4a1c      	ldr	r2, [pc, #112]	@ (800743c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d806      	bhi.n	80073de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007440 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d902      	bls.n	80073de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3308      	adds	r3, #8
 80073dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4b18      	ldr	r3, [pc, #96]	@ (8007444 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a16      	ldr	r2, [pc, #88]	@ (8007448 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80073f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	2201      	movs	r2, #1
 80073fa:	409a      	lsls	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	58025408 	.word	0x58025408
 8007410:	5802541c 	.word	0x5802541c
 8007414:	58025430 	.word	0x58025430
 8007418:	58025444 	.word	0x58025444
 800741c:	58025458 	.word	0x58025458
 8007420:	5802546c 	.word	0x5802546c
 8007424:	58025480 	.word	0x58025480
 8007428:	58025494 	.word	0x58025494
 800742c:	cccccccd 	.word	0xcccccccd
 8007430:	16009600 	.word	0x16009600
 8007434:	58025880 	.word	0x58025880
 8007438:	aaaaaaab 	.word	0xaaaaaaab
 800743c:	400204b8 	.word	0x400204b8
 8007440:	4002040f 	.word	0x4002040f
 8007444:	10008200 	.word	0x10008200
 8007448:	40020880 	.word	0x40020880

0800744c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d04a      	beq.n	80074f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b08      	cmp	r3, #8
 8007466:	d847      	bhi.n	80074f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a25      	ldr	r2, [pc, #148]	@ (8007504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d022      	beq.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a24      	ldr	r2, [pc, #144]	@ (8007508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d01d      	beq.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a22      	ldr	r2, [pc, #136]	@ (800750c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d018      	beq.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a21      	ldr	r2, [pc, #132]	@ (8007510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1f      	ldr	r2, [pc, #124]	@ (8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00e      	beq.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1e      	ldr	r2, [pc, #120]	@ (8007518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d009      	beq.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1c      	ldr	r2, [pc, #112]	@ (800751c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d004      	beq.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d101      	bne.n	80074bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80074bc:	2300      	movs	r3, #0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4b17      	ldr	r3, [pc, #92]	@ (8007524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	461a      	mov	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a15      	ldr	r2, [pc, #84]	@ (8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80074d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80074d6:	e009      	b.n	80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	4b14      	ldr	r3, [pc, #80]	@ (800752c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	461a      	mov	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a11      	ldr	r2, [pc, #68]	@ (8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80074ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	2201      	movs	r2, #1
 80074f2:	409a      	lsls	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80074f8:	bf00      	nop
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	58025408 	.word	0x58025408
 8007508:	5802541c 	.word	0x5802541c
 800750c:	58025430 	.word	0x58025430
 8007510:	58025444 	.word	0x58025444
 8007514:	58025458 	.word	0x58025458
 8007518:	5802546c 	.word	0x5802546c
 800751c:	58025480 	.word	0x58025480
 8007520:	58025494 	.word	0x58025494
 8007524:	1600963f 	.word	0x1600963f
 8007528:	58025940 	.word	0x58025940
 800752c:	1000823f 	.word	0x1000823f
 8007530:	40020940 	.word	0x40020940

08007534 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	2b80      	cmp	r3, #128	@ 0x80
 800754c:	d105      	bne.n	800755a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007554:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e315      	b.n	8007b86 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8007564:	2302      	movs	r3, #2
 8007566:	e30e      	b.n	8007b86 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b01      	cmp	r3, #1
 800757a:	f040 82fd 	bne.w	8007b78 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a82      	ldr	r2, [pc, #520]	@ (800779c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d04a      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a81      	ldr	r2, [pc, #516]	@ (80077a0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d045      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a7f      	ldr	r2, [pc, #508]	@ (80077a4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d040      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a7e      	ldr	r2, [pc, #504]	@ (80077a8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d03b      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a7c      	ldr	r2, [pc, #496]	@ (80077ac <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d036      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a7b      	ldr	r2, [pc, #492]	@ (80077b0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d031      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a79      	ldr	r2, [pc, #484]	@ (80077b4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d02c      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a78      	ldr	r2, [pc, #480]	@ (80077b8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d027      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a76      	ldr	r2, [pc, #472]	@ (80077bc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d022      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a75      	ldr	r2, [pc, #468]	@ (80077c0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d01d      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a73      	ldr	r2, [pc, #460]	@ (80077c4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d018      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a72      	ldr	r2, [pc, #456]	@ (80077c8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d013      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a70      	ldr	r2, [pc, #448]	@ (80077cc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00e      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a6f      	ldr	r2, [pc, #444]	@ (80077d0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d009      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a6d      	ldr	r2, [pc, #436]	@ (80077d4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d004      	beq.n	800762c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a6c      	ldr	r2, [pc, #432]	@ (80077d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d101      	bne.n	8007630 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 800762c:	2301      	movs	r3, #1
 800762e:	e000      	b.n	8007632 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8007630:	2300      	movs	r3, #0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d018      	beq.n	8007668 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007644:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007652:	3308      	adds	r3, #8
 8007654:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800765a:	f003 031f 	and.w	r3, r3, #31
 800765e:	223f      	movs	r2, #63	@ 0x3f
 8007660:	409a      	lsls	r2, r3
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	e018      	b.n	800769a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6819      	ldr	r1, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	f248 0320 	movw	r3, #32800	@ 0x8020
 8007676:	430b      	orrs	r3, r1
 8007678:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007686:	3304      	adds	r3, #4
 8007688:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	2201      	movs	r2, #1
 8007694:	409a      	lsls	r2, r3
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fb41 	bl	8007d28 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a3c      	ldr	r2, [pc, #240]	@ (800779c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d072      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a3a      	ldr	r2, [pc, #232]	@ (80077a0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d06d      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a39      	ldr	r2, [pc, #228]	@ (80077a4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d068      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a37      	ldr	r2, [pc, #220]	@ (80077a8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d063      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a36      	ldr	r2, [pc, #216]	@ (80077ac <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d05e      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a34      	ldr	r2, [pc, #208]	@ (80077b0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d059      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a33      	ldr	r2, [pc, #204]	@ (80077b4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d054      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a31      	ldr	r2, [pc, #196]	@ (80077b8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d04f      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a30      	ldr	r2, [pc, #192]	@ (80077bc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d04a      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a2e      	ldr	r2, [pc, #184]	@ (80077c0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d045      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a2d      	ldr	r2, [pc, #180]	@ (80077c4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d040      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a2b      	ldr	r2, [pc, #172]	@ (80077c8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d03b      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a2a      	ldr	r2, [pc, #168]	@ (80077cc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d036      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a28      	ldr	r2, [pc, #160]	@ (80077d0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d031      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a27      	ldr	r2, [pc, #156]	@ (80077d4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d02c      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a25      	ldr	r2, [pc, #148]	@ (80077d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d027      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a24      	ldr	r2, [pc, #144]	@ (80077dc <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d022      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a22      	ldr	r2, [pc, #136]	@ (80077e0 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d01d      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a21      	ldr	r2, [pc, #132]	@ (80077e4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d018      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1f      	ldr	r2, [pc, #124]	@ (80077e8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d013      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a1e      	ldr	r2, [pc, #120]	@ (80077ec <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00e      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a1c      	ldr	r2, [pc, #112]	@ (80077f0 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d009      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1b      	ldr	r2, [pc, #108]	@ (80077f4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a19      	ldr	r2, [pc, #100]	@ (80077f8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d132      	bne.n	80077fc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8007796:	2301      	movs	r3, #1
 8007798:	e031      	b.n	80077fe <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800779a:	bf00      	nop
 800779c:	40020010 	.word	0x40020010
 80077a0:	40020028 	.word	0x40020028
 80077a4:	40020040 	.word	0x40020040
 80077a8:	40020058 	.word	0x40020058
 80077ac:	40020070 	.word	0x40020070
 80077b0:	40020088 	.word	0x40020088
 80077b4:	400200a0 	.word	0x400200a0
 80077b8:	400200b8 	.word	0x400200b8
 80077bc:	40020410 	.word	0x40020410
 80077c0:	40020428 	.word	0x40020428
 80077c4:	40020440 	.word	0x40020440
 80077c8:	40020458 	.word	0x40020458
 80077cc:	40020470 	.word	0x40020470
 80077d0:	40020488 	.word	0x40020488
 80077d4:	400204a0 	.word	0x400204a0
 80077d8:	400204b8 	.word	0x400204b8
 80077dc:	58025408 	.word	0x58025408
 80077e0:	5802541c 	.word	0x5802541c
 80077e4:	58025430 	.word	0x58025430
 80077e8:	58025444 	.word	0x58025444
 80077ec:	58025458 	.word	0x58025458
 80077f0:	5802546c 	.word	0x5802546c
 80077f4:	58025480 	.word	0x58025480
 80077f8:	58025494 	.word	0x58025494
 80077fc:	2300      	movs	r3, #0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00d      	beq.n	800781e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800780a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800781c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a3b      	ldr	r2, [pc, #236]	@ (8007910 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d04a      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a39      	ldr	r2, [pc, #228]	@ (8007914 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d045      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a38      	ldr	r2, [pc, #224]	@ (8007918 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d040      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a36      	ldr	r2, [pc, #216]	@ (800791c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d03b      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a35      	ldr	r2, [pc, #212]	@ (8007920 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d036      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a33      	ldr	r2, [pc, #204]	@ (8007924 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d031      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a32      	ldr	r2, [pc, #200]	@ (8007928 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d02c      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a30      	ldr	r2, [pc, #192]	@ (800792c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d027      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2f      	ldr	r2, [pc, #188]	@ (8007930 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d022      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2d      	ldr	r2, [pc, #180]	@ (8007934 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d01d      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a2c      	ldr	r2, [pc, #176]	@ (8007938 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d018      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2a      	ldr	r2, [pc, #168]	@ (800793c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a29      	ldr	r2, [pc, #164]	@ (8007940 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00e      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a27      	ldr	r2, [pc, #156]	@ (8007944 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a26      	ldr	r2, [pc, #152]	@ (8007948 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d004      	beq.n	80078be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a24      	ldr	r2, [pc, #144]	@ (800794c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d101      	bne.n	80078c2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80078be:	2301      	movs	r3, #1
 80078c0:	e000      	b.n	80078c4 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80078c2:	2300      	movs	r3, #0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d043      	beq.n	8007950 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f023 021e 	bic.w	r2, r3, #30
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0216 	orr.w	r2, r2, #22
 80078da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	695a      	ldr	r2, [r3, #20]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078ea:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d043      	beq.n	8007984 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0208 	orr.w	r2, r2, #8
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	e03a      	b.n	8007984 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800790e:	bf00      	nop
 8007910:	40020010 	.word	0x40020010
 8007914:	40020028 	.word	0x40020028
 8007918:	40020040 	.word	0x40020040
 800791c:	40020058 	.word	0x40020058
 8007920:	40020070 	.word	0x40020070
 8007924:	40020088 	.word	0x40020088
 8007928:	400200a0 	.word	0x400200a0
 800792c:	400200b8 	.word	0x400200b8
 8007930:	40020410 	.word	0x40020410
 8007934:	40020428 	.word	0x40020428
 8007938:	40020440 	.word	0x40020440
 800793c:	40020458 	.word	0x40020458
 8007940:	40020470 	.word	0x40020470
 8007944:	40020488 	.word	0x40020488
 8007948:	400204a0 	.word	0x400204a0
 800794c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f023 020e 	bic.w	r2, r3, #14
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 020a 	orr.w	r2, r2, #10
 8007962:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d103      	bne.n	8007974 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007970:	2b00      	cmp	r3, #0
 8007972:	d007      	beq.n	8007984 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0204 	orr.w	r2, r2, #4
 8007982:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a81      	ldr	r2, [pc, #516]	@ (8007b90 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d072      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a80      	ldr	r2, [pc, #512]	@ (8007b94 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d06d      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a7e      	ldr	r2, [pc, #504]	@ (8007b98 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d068      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a7d      	ldr	r2, [pc, #500]	@ (8007b9c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d063      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a7b      	ldr	r2, [pc, #492]	@ (8007ba0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d05e      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a7a      	ldr	r2, [pc, #488]	@ (8007ba4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d059      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a78      	ldr	r2, [pc, #480]	@ (8007ba8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d054      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a77      	ldr	r2, [pc, #476]	@ (8007bac <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d04f      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a75      	ldr	r2, [pc, #468]	@ (8007bb0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d04a      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a74      	ldr	r2, [pc, #464]	@ (8007bb4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d045      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a72      	ldr	r2, [pc, #456]	@ (8007bb8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d040      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a71      	ldr	r2, [pc, #452]	@ (8007bbc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d03b      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a6f      	ldr	r2, [pc, #444]	@ (8007bc0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d036      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a6e      	ldr	r2, [pc, #440]	@ (8007bc4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d031      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a6c      	ldr	r2, [pc, #432]	@ (8007bc8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d02c      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a6b      	ldr	r2, [pc, #428]	@ (8007bcc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d027      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a69      	ldr	r2, [pc, #420]	@ (8007bd0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d022      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a68      	ldr	r2, [pc, #416]	@ (8007bd4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d01d      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a66      	ldr	r2, [pc, #408]	@ (8007bd8 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d018      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a65      	ldr	r2, [pc, #404]	@ (8007bdc <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a63      	ldr	r2, [pc, #396]	@ (8007be0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00e      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a62      	ldr	r2, [pc, #392]	@ (8007be4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d009      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a60      	ldr	r2, [pc, #384]	@ (8007be8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8007bec <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d101      	bne.n	8007a78 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e000      	b.n	8007a7a <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d01a      	beq.n	8007ab4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d007      	beq.n	8007a9c <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ab2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a35      	ldr	r2, [pc, #212]	@ (8007b90 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d04a      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a34      	ldr	r2, [pc, #208]	@ (8007b94 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d045      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a32      	ldr	r2, [pc, #200]	@ (8007b98 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d040      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a31      	ldr	r2, [pc, #196]	@ (8007b9c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d03b      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8007ba0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d036      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a2e      	ldr	r2, [pc, #184]	@ (8007ba4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d031      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a2c      	ldr	r2, [pc, #176]	@ (8007ba8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d02c      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a2b      	ldr	r2, [pc, #172]	@ (8007bac <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d027      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a29      	ldr	r2, [pc, #164]	@ (8007bb0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d022      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a28      	ldr	r2, [pc, #160]	@ (8007bb4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d01d      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a26      	ldr	r2, [pc, #152]	@ (8007bb8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d018      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a25      	ldr	r2, [pc, #148]	@ (8007bbc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d013      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a23      	ldr	r2, [pc, #140]	@ (8007bc0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00e      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a22      	ldr	r2, [pc, #136]	@ (8007bc4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d009      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a20      	ldr	r2, [pc, #128]	@ (8007bc8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d004      	beq.n	8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8007bcc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d108      	bne.n	8007b66 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0201 	orr.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e00e      	b.n	8007b84 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 0201 	orr.w	r2, r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e005      	b.n	8007b84 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40020010 	.word	0x40020010
 8007b94:	40020028 	.word	0x40020028
 8007b98:	40020040 	.word	0x40020040
 8007b9c:	40020058 	.word	0x40020058
 8007ba0:	40020070 	.word	0x40020070
 8007ba4:	40020088 	.word	0x40020088
 8007ba8:	400200a0 	.word	0x400200a0
 8007bac:	400200b8 	.word	0x400200b8
 8007bb0:	40020410 	.word	0x40020410
 8007bb4:	40020428 	.word	0x40020428
 8007bb8:	40020440 	.word	0x40020440
 8007bbc:	40020458 	.word	0x40020458
 8007bc0:	40020470 	.word	0x40020470
 8007bc4:	40020488 	.word	0x40020488
 8007bc8:	400204a0 	.word	0x400204a0
 8007bcc:	400204b8 	.word	0x400204b8
 8007bd0:	58025408 	.word	0x58025408
 8007bd4:	5802541c 	.word	0x5802541c
 8007bd8:	58025430 	.word	0x58025430
 8007bdc:	58025444 	.word	0x58025444
 8007be0:	58025458 	.word	0x58025458
 8007be4:	5802546c 	.word	0x5802546c
 8007be8:	58025480 	.word	0x58025480
 8007bec:	58025494 	.word	0x58025494

08007bf0 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a39      	ldr	r2, [pc, #228]	@ (8007ce8 <HAL_DMAEx_ChangeMemory+0xf8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d04a      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a37      	ldr	r2, [pc, #220]	@ (8007cec <HAL_DMAEx_ChangeMemory+0xfc>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d045      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a36      	ldr	r2, [pc, #216]	@ (8007cf0 <HAL_DMAEx_ChangeMemory+0x100>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d040      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a34      	ldr	r2, [pc, #208]	@ (8007cf4 <HAL_DMAEx_ChangeMemory+0x104>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d03b      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a33      	ldr	r2, [pc, #204]	@ (8007cf8 <HAL_DMAEx_ChangeMemory+0x108>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d036      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a31      	ldr	r2, [pc, #196]	@ (8007cfc <HAL_DMAEx_ChangeMemory+0x10c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d031      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a30      	ldr	r2, [pc, #192]	@ (8007d00 <HAL_DMAEx_ChangeMemory+0x110>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d02c      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a2e      	ldr	r2, [pc, #184]	@ (8007d04 <HAL_DMAEx_ChangeMemory+0x114>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d027      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a2d      	ldr	r2, [pc, #180]	@ (8007d08 <HAL_DMAEx_ChangeMemory+0x118>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d022      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8007d0c <HAL_DMAEx_ChangeMemory+0x11c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d01d      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a2a      	ldr	r2, [pc, #168]	@ (8007d10 <HAL_DMAEx_ChangeMemory+0x120>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d018      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a28      	ldr	r2, [pc, #160]	@ (8007d14 <HAL_DMAEx_ChangeMemory+0x124>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d013      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a27      	ldr	r2, [pc, #156]	@ (8007d18 <HAL_DMAEx_ChangeMemory+0x128>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00e      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a25      	ldr	r2, [pc, #148]	@ (8007d1c <HAL_DMAEx_ChangeMemory+0x12c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d009      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a24      	ldr	r2, [pc, #144]	@ (8007d20 <HAL_DMAEx_ChangeMemory+0x130>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d004      	beq.n	8007c9e <HAL_DMAEx_ChangeMemory+0xae>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a22      	ldr	r2, [pc, #136]	@ (8007d24 <HAL_DMAEx_ChangeMemory+0x134>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d101      	bne.n	8007ca2 <HAL_DMAEx_ChangeMemory+0xb2>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e000      	b.n	8007ca4 <HAL_DMAEx_ChangeMemory+0xb4>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00c      	beq.n	8007cc2 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d104      	bne.n	8007cb8 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	60da      	str	r2, [r3, #12]
 8007cb6:	e010      	b.n	8007cda <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	611a      	str	r2, [r3, #16]
 8007cc0:	e00b      	b.n	8007cda <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d104      	bne.n	8007cd2 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	60da      	str	r2, [r3, #12]
 8007cd0:	e003      	b.n	8007cda <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	40020010 	.word	0x40020010
 8007cec:	40020028 	.word	0x40020028
 8007cf0:	40020040 	.word	0x40020040
 8007cf4:	40020058 	.word	0x40020058
 8007cf8:	40020070 	.word	0x40020070
 8007cfc:	40020088 	.word	0x40020088
 8007d00:	400200a0 	.word	0x400200a0
 8007d04:	400200b8 	.word	0x400200b8
 8007d08:	40020410 	.word	0x40020410
 8007d0c:	40020428 	.word	0x40020428
 8007d10:	40020440 	.word	0x40020440
 8007d14:	40020458 	.word	0x40020458
 8007d18:	40020470 	.word	0x40020470
 8007d1c:	40020488 	.word	0x40020488
 8007d20:	400204a0 	.word	0x400204a0
 8007d24:	400204b8 	.word	0x400204b8

08007d28 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a46      	ldr	r2, [pc, #280]	@ (8007e54 <DMA_MultiBufferSetConfig+0x12c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d04a      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a44      	ldr	r2, [pc, #272]	@ (8007e58 <DMA_MultiBufferSetConfig+0x130>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d045      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a43      	ldr	r2, [pc, #268]	@ (8007e5c <DMA_MultiBufferSetConfig+0x134>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d040      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a41      	ldr	r2, [pc, #260]	@ (8007e60 <DMA_MultiBufferSetConfig+0x138>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d03b      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a40      	ldr	r2, [pc, #256]	@ (8007e64 <DMA_MultiBufferSetConfig+0x13c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d036      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8007e68 <DMA_MultiBufferSetConfig+0x140>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d031      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a3d      	ldr	r2, [pc, #244]	@ (8007e6c <DMA_MultiBufferSetConfig+0x144>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d02c      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a3b      	ldr	r2, [pc, #236]	@ (8007e70 <DMA_MultiBufferSetConfig+0x148>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d027      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a3a      	ldr	r2, [pc, #232]	@ (8007e74 <DMA_MultiBufferSetConfig+0x14c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d022      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a38      	ldr	r2, [pc, #224]	@ (8007e78 <DMA_MultiBufferSetConfig+0x150>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d01d      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a37      	ldr	r2, [pc, #220]	@ (8007e7c <DMA_MultiBufferSetConfig+0x154>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d018      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a35      	ldr	r2, [pc, #212]	@ (8007e80 <DMA_MultiBufferSetConfig+0x158>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a34      	ldr	r2, [pc, #208]	@ (8007e84 <DMA_MultiBufferSetConfig+0x15c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a32      	ldr	r2, [pc, #200]	@ (8007e88 <DMA_MultiBufferSetConfig+0x160>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a31      	ldr	r2, [pc, #196]	@ (8007e8c <DMA_MultiBufferSetConfig+0x164>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <DMA_MultiBufferSetConfig+0xae>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8007e90 <DMA_MultiBufferSetConfig+0x168>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d101      	bne.n	8007dda <DMA_MultiBufferSetConfig+0xb2>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <DMA_MultiBufferSetConfig+0xb4>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d019      	beq.n	8007e14 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b40      	cmp	r3, #64	@ 0x40
 8007dee:	d108      	bne.n	8007e02 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8007e00:	e021      	b.n	8007e46 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	60da      	str	r2, [r3, #12]
}
 8007e12:	e018      	b.n	8007e46 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2b40      	cmp	r3, #64	@ 0x40
 8007e22:	d108      	bne.n	8007e36 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	60da      	str	r2, [r3, #12]
}
 8007e34:	e007      	b.n	8007e46 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	60da      	str	r2, [r3, #12]
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	40020010 	.word	0x40020010
 8007e58:	40020028 	.word	0x40020028
 8007e5c:	40020040 	.word	0x40020040
 8007e60:	40020058 	.word	0x40020058
 8007e64:	40020070 	.word	0x40020070
 8007e68:	40020088 	.word	0x40020088
 8007e6c:	400200a0 	.word	0x400200a0
 8007e70:	400200b8 	.word	0x400200b8
 8007e74:	40020410 	.word	0x40020410
 8007e78:	40020428 	.word	0x40020428
 8007e7c:	40020440 	.word	0x40020440
 8007e80:	40020458 	.word	0x40020458
 8007e84:	40020470 	.word	0x40020470
 8007e88:	40020488 	.word	0x40020488
 8007e8c:	400204a0 	.word	0x400204a0
 8007e90:	400204b8 	.word	0x400204b8

08007e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b089      	sub	sp, #36	@ 0x24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007ea2:	4b89      	ldr	r3, [pc, #548]	@ (80080c8 <HAL_GPIO_Init+0x234>)
 8007ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ea6:	e194      	b.n	80081d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	2101      	movs	r1, #1
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 8186 	beq.w	80081cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d005      	beq.n	8007ed8 <HAL_GPIO_Init+0x44>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d130      	bne.n	8007f3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee8:	43db      	mvns	r3, r3
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	4013      	ands	r3, r2
 8007eee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f0e:	2201      	movs	r2, #1
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	43db      	mvns	r3, r3
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	091b      	lsrs	r3, r3, #4
 8007f24:	f003 0201 	and.w	r2, r3, #1
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d017      	beq.n	8007f76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	2203      	movs	r2, #3
 8007f52:	fa02 f303 	lsl.w	r3, r2, r3
 8007f56:	43db      	mvns	r3, r3
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d123      	bne.n	8007fca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	08da      	lsrs	r2, r3, #3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	3208      	adds	r2, #8
 8007f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	220f      	movs	r2, #15
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	43db      	mvns	r3, r3
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	08da      	lsrs	r2, r3, #3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3208      	adds	r2, #8
 8007fc4:	69b9      	ldr	r1, [r7, #24]
 8007fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	2203      	movs	r2, #3
 8007fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f003 0203 	and.w	r2, r3, #3
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 80e0 	beq.w	80081cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800800c:	4b2f      	ldr	r3, [pc, #188]	@ (80080cc <HAL_GPIO_Init+0x238>)
 800800e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008012:	4a2e      	ldr	r2, [pc, #184]	@ (80080cc <HAL_GPIO_Init+0x238>)
 8008014:	f043 0302 	orr.w	r3, r3, #2
 8008018:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800801c:	4b2b      	ldr	r3, [pc, #172]	@ (80080cc <HAL_GPIO_Init+0x238>)
 800801e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800802a:	4a29      	ldr	r2, [pc, #164]	@ (80080d0 <HAL_GPIO_Init+0x23c>)
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	089b      	lsrs	r3, r3, #2
 8008030:	3302      	adds	r3, #2
 8008032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	220f      	movs	r2, #15
 8008042:	fa02 f303 	lsl.w	r3, r2, r3
 8008046:	43db      	mvns	r3, r3
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	4013      	ands	r3, r2
 800804c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a20      	ldr	r2, [pc, #128]	@ (80080d4 <HAL_GPIO_Init+0x240>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d052      	beq.n	80080fc <HAL_GPIO_Init+0x268>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1f      	ldr	r2, [pc, #124]	@ (80080d8 <HAL_GPIO_Init+0x244>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d031      	beq.n	80080c2 <HAL_GPIO_Init+0x22e>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a1e      	ldr	r2, [pc, #120]	@ (80080dc <HAL_GPIO_Init+0x248>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d02b      	beq.n	80080be <HAL_GPIO_Init+0x22a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a1d      	ldr	r2, [pc, #116]	@ (80080e0 <HAL_GPIO_Init+0x24c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d025      	beq.n	80080ba <HAL_GPIO_Init+0x226>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a1c      	ldr	r2, [pc, #112]	@ (80080e4 <HAL_GPIO_Init+0x250>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d01f      	beq.n	80080b6 <HAL_GPIO_Init+0x222>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a1b      	ldr	r2, [pc, #108]	@ (80080e8 <HAL_GPIO_Init+0x254>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d019      	beq.n	80080b2 <HAL_GPIO_Init+0x21e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a1a      	ldr	r2, [pc, #104]	@ (80080ec <HAL_GPIO_Init+0x258>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d013      	beq.n	80080ae <HAL_GPIO_Init+0x21a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a19      	ldr	r2, [pc, #100]	@ (80080f0 <HAL_GPIO_Init+0x25c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00d      	beq.n	80080aa <HAL_GPIO_Init+0x216>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a18      	ldr	r2, [pc, #96]	@ (80080f4 <HAL_GPIO_Init+0x260>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d007      	beq.n	80080a6 <HAL_GPIO_Init+0x212>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a17      	ldr	r2, [pc, #92]	@ (80080f8 <HAL_GPIO_Init+0x264>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d101      	bne.n	80080a2 <HAL_GPIO_Init+0x20e>
 800809e:	2309      	movs	r3, #9
 80080a0:	e02d      	b.n	80080fe <HAL_GPIO_Init+0x26a>
 80080a2:	230a      	movs	r3, #10
 80080a4:	e02b      	b.n	80080fe <HAL_GPIO_Init+0x26a>
 80080a6:	2308      	movs	r3, #8
 80080a8:	e029      	b.n	80080fe <HAL_GPIO_Init+0x26a>
 80080aa:	2307      	movs	r3, #7
 80080ac:	e027      	b.n	80080fe <HAL_GPIO_Init+0x26a>
 80080ae:	2306      	movs	r3, #6
 80080b0:	e025      	b.n	80080fe <HAL_GPIO_Init+0x26a>
 80080b2:	2305      	movs	r3, #5
 80080b4:	e023      	b.n	80080fe <HAL_GPIO_Init+0x26a>
 80080b6:	2304      	movs	r3, #4
 80080b8:	e021      	b.n	80080fe <HAL_GPIO_Init+0x26a>
 80080ba:	2303      	movs	r3, #3
 80080bc:	e01f      	b.n	80080fe <HAL_GPIO_Init+0x26a>
 80080be:	2302      	movs	r3, #2
 80080c0:	e01d      	b.n	80080fe <HAL_GPIO_Init+0x26a>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e01b      	b.n	80080fe <HAL_GPIO_Init+0x26a>
 80080c6:	bf00      	nop
 80080c8:	58000080 	.word	0x58000080
 80080cc:	58024400 	.word	0x58024400
 80080d0:	58000400 	.word	0x58000400
 80080d4:	58020000 	.word	0x58020000
 80080d8:	58020400 	.word	0x58020400
 80080dc:	58020800 	.word	0x58020800
 80080e0:	58020c00 	.word	0x58020c00
 80080e4:	58021000 	.word	0x58021000
 80080e8:	58021400 	.word	0x58021400
 80080ec:	58021800 	.word	0x58021800
 80080f0:	58021c00 	.word	0x58021c00
 80080f4:	58022000 	.word	0x58022000
 80080f8:	58022400 	.word	0x58022400
 80080fc:	2300      	movs	r3, #0
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	f002 0203 	and.w	r2, r2, #3
 8008104:	0092      	lsls	r2, r2, #2
 8008106:	4093      	lsls	r3, r2
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	4313      	orrs	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800810e:	4938      	ldr	r1, [pc, #224]	@ (80081f0 <HAL_GPIO_Init+0x35c>)
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	089b      	lsrs	r3, r3, #2
 8008114:	3302      	adds	r3, #2
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800811c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	43db      	mvns	r3, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4013      	ands	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008142:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800814a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	43db      	mvns	r3, r3
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	4013      	ands	r3, r2
 800815a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008170:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	43db      	mvns	r3, r3
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4013      	ands	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	4313      	orrs	r3, r2
 800819a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	43db      	mvns	r3, r3
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	4013      	ands	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	3301      	adds	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f47f ae63 	bne.w	8007ea8 <HAL_GPIO_Init+0x14>
  }
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	3724      	adds	r7, #36	@ 0x24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	58000400 	.word	0x58000400

080081f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	691a      	ldr	r2, [r3, #16]
 8008204:	887b      	ldrh	r3, [r7, #2]
 8008206:	4013      	ands	r3, r2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
 8008210:	e001      	b.n	8008216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008216:	7bfb      	ldrb	r3, [r7, #15]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	807b      	strh	r3, [r7, #2]
 8008230:	4613      	mov	r3, r2
 8008232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008234:	787b      	ldrb	r3, [r7, #1]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800823a:	887a      	ldrh	r2, [r7, #2]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008240:	e003      	b.n	800824a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008242:	887b      	ldrh	r3, [r7, #2]
 8008244:	041a      	lsls	r2, r3, #16
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	619a      	str	r2, [r3, #24]
}
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	4603      	mov	r3, r0
 800825e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008264:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008268:	88fb      	ldrh	r3, [r7, #6]
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d008      	beq.n	8008282 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008270:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	4618      	mov	r0, r3
 800827e:	f7f8 fe9b 	bl	8000fb8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e08b      	b.n	80083b6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d106      	bne.n	80082b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7fa fb46 	bl	8002944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2224      	movs	r2, #36	@ 0x24
 80082bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f022 0201 	bic.w	r2, r2, #1
 80082ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80082dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d107      	bne.n	8008306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008302:	609a      	str	r2, [r3, #8]
 8008304:	e006      	b.n	8008314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	2b02      	cmp	r3, #2
 800831a:	d108      	bne.n	800832e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800832a:	605a      	str	r2, [r3, #4]
 800832c:	e007      	b.n	800833e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800833c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6859      	ldr	r1, [r3, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	4b1d      	ldr	r3, [pc, #116]	@ (80083c0 <HAL_I2C_Init+0x134>)
 800834a:	430b      	orrs	r3, r1
 800834c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68da      	ldr	r2, [r3, #12]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800835c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	69d9      	ldr	r1, [r3, #28]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a1a      	ldr	r2, [r3, #32]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 0201 	orr.w	r2, r2, #1
 8008396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2220      	movs	r2, #32
 80083a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	02008000 	.word	0x02008000

080083c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	607a      	str	r2, [r7, #4]
 80083ce:	461a      	mov	r2, r3
 80083d0:	460b      	mov	r3, r1
 80083d2:	817b      	strh	r3, [r7, #10]
 80083d4:	4613      	mov	r3, r2
 80083d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	f040 80fd 	bne.w	80085e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d101      	bne.n	80083f4 <HAL_I2C_Master_Transmit+0x30>
 80083f0:	2302      	movs	r3, #2
 80083f2:	e0f6      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x21e>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80083fc:	f7fa fde8 	bl	8002fd0 <HAL_GetTick>
 8008400:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	2319      	movs	r3, #25
 8008408:	2201      	movs	r2, #1
 800840a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fb72 	bl	8008af8 <I2C_WaitOnFlagUntilTimeout>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e0e1      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2221      	movs	r2, #33	@ 0x21
 8008422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2210      	movs	r2, #16
 800842a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	893a      	ldrh	r2, [r7, #8]
 800843e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800844a:	b29b      	uxth	r3, r3
 800844c:	2bff      	cmp	r3, #255	@ 0xff
 800844e:	d906      	bls.n	800845e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	22ff      	movs	r2, #255	@ 0xff
 8008454:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008456:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	e007      	b.n	800846e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008462:	b29a      	uxth	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008468:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800846c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008472:	2b00      	cmp	r3, #0
 8008474:	d024      	beq.n	80084c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008490:	b29b      	uxth	r3, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	b29a      	uxth	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800849e:	3b01      	subs	r3, #1
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	3301      	adds	r3, #1
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	8979      	ldrh	r1, [r7, #10]
 80084b2:	4b4e      	ldr	r3, [pc, #312]	@ (80085ec <HAL_I2C_Master_Transmit+0x228>)
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fd6d 	bl	8008f98 <I2C_TransferConfig>
 80084be:	e066      	b.n	800858e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	8979      	ldrh	r1, [r7, #10]
 80084c8:	4b48      	ldr	r3, [pc, #288]	@ (80085ec <HAL_I2C_Master_Transmit+0x228>)
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fd62 	bl	8008f98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80084d4:	e05b      	b.n	800858e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	6a39      	ldr	r1, [r7, #32]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 fb65 	bl	8008baa <I2C_WaitOnTXISFlagUntilTimeout>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e07b      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008504:	b29b      	uxth	r3, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008512:	3b01      	subs	r3, #1
 8008514:	b29a      	uxth	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d034      	beq.n	800858e <HAL_I2C_Master_Transmit+0x1ca>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	d130      	bne.n	800858e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	2200      	movs	r2, #0
 8008534:	2180      	movs	r1, #128	@ 0x80
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 fade 	bl	8008af8 <I2C_WaitOnFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e04d      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800854a:	b29b      	uxth	r3, r3
 800854c:	2bff      	cmp	r3, #255	@ 0xff
 800854e:	d90e      	bls.n	800856e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	22ff      	movs	r2, #255	@ 0xff
 8008554:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800855a:	b2da      	uxtb	r2, r3
 800855c:	8979      	ldrh	r1, [r7, #10]
 800855e:	2300      	movs	r3, #0
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 fd16 	bl	8008f98 <I2C_TransferConfig>
 800856c:	e00f      	b.n	800858e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800857c:	b2da      	uxtb	r2, r3
 800857e:	8979      	ldrh	r1, [r7, #10]
 8008580:	2300      	movs	r3, #0
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fd05 	bl	8008f98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008592:	b29b      	uxth	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d19e      	bne.n	80084d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	6a39      	ldr	r1, [r7, #32]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 fb4b 	bl	8008c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e01a      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2220      	movs	r2, #32
 80085b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6859      	ldr	r1, [r3, #4]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b0c      	ldr	r3, [pc, #48]	@ (80085f0 <HAL_I2C_Master_Transmit+0x22c>)
 80085c0:	400b      	ands	r3, r1
 80085c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	e000      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80085e0:	2302      	movs	r3, #2
  }
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	80002000 	.word	0x80002000
 80085f0:	fe00e800 	.word	0xfe00e800

080085f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af02      	add	r7, sp, #8
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	607a      	str	r2, [r7, #4]
 80085fe:	461a      	mov	r2, r3
 8008600:	460b      	mov	r3, r1
 8008602:	817b      	strh	r3, [r7, #10]
 8008604:	4613      	mov	r3, r2
 8008606:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b20      	cmp	r3, #32
 8008612:	f040 80db 	bne.w	80087cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800861c:	2b01      	cmp	r3, #1
 800861e:	d101      	bne.n	8008624 <HAL_I2C_Master_Receive+0x30>
 8008620:	2302      	movs	r3, #2
 8008622:	e0d4      	b.n	80087ce <HAL_I2C_Master_Receive+0x1da>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800862c:	f7fa fcd0 	bl	8002fd0 <HAL_GetTick>
 8008630:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	2319      	movs	r3, #25
 8008638:	2201      	movs	r2, #1
 800863a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 fa5a 	bl	8008af8 <I2C_WaitOnFlagUntilTimeout>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e0bf      	b.n	80087ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2222      	movs	r2, #34	@ 0x22
 8008652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2210      	movs	r2, #16
 800865a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	893a      	ldrh	r2, [r7, #8]
 800866e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800867a:	b29b      	uxth	r3, r3
 800867c:	2bff      	cmp	r3, #255	@ 0xff
 800867e:	d90e      	bls.n	800869e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	22ff      	movs	r2, #255	@ 0xff
 8008684:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800868a:	b2da      	uxtb	r2, r3
 800868c:	8979      	ldrh	r1, [r7, #10]
 800868e:	4b52      	ldr	r3, [pc, #328]	@ (80087d8 <HAL_I2C_Master_Receive+0x1e4>)
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 fc7e 	bl	8008f98 <I2C_TransferConfig>
 800869c:	e06d      	b.n	800877a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	8979      	ldrh	r1, [r7, #10]
 80086b0:	4b49      	ldr	r3, [pc, #292]	@ (80087d8 <HAL_I2C_Master_Receive+0x1e4>)
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 fc6d 	bl	8008f98 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80086be:	e05c      	b.n	800877a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	6a39      	ldr	r1, [r7, #32]
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 fafb 	bl	8008cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e07c      	b.n	80087ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	3b01      	subs	r3, #1
 8008700:	b29a      	uxth	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800870a:	b29b      	uxth	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d034      	beq.n	800877a <HAL_I2C_Master_Receive+0x186>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008714:	2b00      	cmp	r3, #0
 8008716:	d130      	bne.n	800877a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	2200      	movs	r2, #0
 8008720:	2180      	movs	r1, #128	@ 0x80
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f9e8 	bl	8008af8 <I2C_WaitOnFlagUntilTimeout>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e04d      	b.n	80087ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008736:	b29b      	uxth	r3, r3
 8008738:	2bff      	cmp	r3, #255	@ 0xff
 800873a:	d90e      	bls.n	800875a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	22ff      	movs	r2, #255	@ 0xff
 8008740:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008746:	b2da      	uxtb	r2, r3
 8008748:	8979      	ldrh	r1, [r7, #10]
 800874a:	2300      	movs	r3, #0
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 fc20 	bl	8008f98 <I2C_TransferConfig>
 8008758:	e00f      	b.n	800877a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008768:	b2da      	uxtb	r2, r3
 800876a:	8979      	ldrh	r1, [r7, #10]
 800876c:	2300      	movs	r3, #0
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fc0f 	bl	8008f98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d19d      	bne.n	80086c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	6a39      	ldr	r1, [r7, #32]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 fa55 	bl	8008c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e01a      	b.n	80087ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2220      	movs	r2, #32
 800879e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6859      	ldr	r1, [r3, #4]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	4b0c      	ldr	r3, [pc, #48]	@ (80087dc <HAL_I2C_Master_Receive+0x1e8>)
 80087ac:	400b      	ands	r3, r1
 80087ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	e000      	b.n	80087ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80087cc:	2302      	movs	r3, #2
  }
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	80002400 	.word	0x80002400
 80087dc:	fe00e800 	.word	0xfe00e800

080087e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b088      	sub	sp, #32
 80087e4:	af02      	add	r7, sp, #8
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	4608      	mov	r0, r1
 80087ea:	4611      	mov	r1, r2
 80087ec:	461a      	mov	r2, r3
 80087ee:	4603      	mov	r3, r0
 80087f0:	817b      	strh	r3, [r7, #10]
 80087f2:	460b      	mov	r3, r1
 80087f4:	813b      	strh	r3, [r7, #8]
 80087f6:	4613      	mov	r3, r2
 80087f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b20      	cmp	r3, #32
 8008804:	f040 80f9 	bne.w	80089fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <HAL_I2C_Mem_Write+0x34>
 800880e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	d105      	bne.n	8008820 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800881a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e0ed      	b.n	80089fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008826:	2b01      	cmp	r3, #1
 8008828:	d101      	bne.n	800882e <HAL_I2C_Mem_Write+0x4e>
 800882a:	2302      	movs	r3, #2
 800882c:	e0e6      	b.n	80089fc <HAL_I2C_Mem_Write+0x21c>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008836:	f7fa fbcb 	bl	8002fd0 <HAL_GetTick>
 800883a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	2319      	movs	r3, #25
 8008842:	2201      	movs	r2, #1
 8008844:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f955 	bl	8008af8 <I2C_WaitOnFlagUntilTimeout>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e0d1      	b.n	80089fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2221      	movs	r2, #33	@ 0x21
 800885c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2240      	movs	r2, #64	@ 0x40
 8008864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6a3a      	ldr	r2, [r7, #32]
 8008872:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008878:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008880:	88f8      	ldrh	r0, [r7, #6]
 8008882:	893a      	ldrh	r2, [r7, #8]
 8008884:	8979      	ldrh	r1, [r7, #10]
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	4603      	mov	r3, r0
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 f8b9 	bl	8008a08 <I2C_RequestMemoryWrite>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d005      	beq.n	80088a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e0a9      	b.n	80089fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	2bff      	cmp	r3, #255	@ 0xff
 80088b0:	d90e      	bls.n	80088d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	22ff      	movs	r2, #255	@ 0xff
 80088b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	8979      	ldrh	r1, [r7, #10]
 80088c0:	2300      	movs	r3, #0
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 fb65 	bl	8008f98 <I2C_TransferConfig>
 80088ce:	e00f      	b.n	80088f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	8979      	ldrh	r1, [r7, #10]
 80088e2:	2300      	movs	r3, #0
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fb54 	bl	8008f98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 f958 	bl	8008baa <I2C_WaitOnTXISFlagUntilTimeout>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e07b      	b.n	80089fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800891e:	b29b      	uxth	r3, r3
 8008920:	3b01      	subs	r3, #1
 8008922:	b29a      	uxth	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d034      	beq.n	80089a8 <HAL_I2C_Mem_Write+0x1c8>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008942:	2b00      	cmp	r3, #0
 8008944:	d130      	bne.n	80089a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894c:	2200      	movs	r2, #0
 800894e:	2180      	movs	r1, #128	@ 0x80
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 f8d1 	bl	8008af8 <I2C_WaitOnFlagUntilTimeout>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e04d      	b.n	80089fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008964:	b29b      	uxth	r3, r3
 8008966:	2bff      	cmp	r3, #255	@ 0xff
 8008968:	d90e      	bls.n	8008988 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	22ff      	movs	r2, #255	@ 0xff
 800896e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008974:	b2da      	uxtb	r2, r3
 8008976:	8979      	ldrh	r1, [r7, #10]
 8008978:	2300      	movs	r3, #0
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 fb09 	bl	8008f98 <I2C_TransferConfig>
 8008986:	e00f      	b.n	80089a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800898c:	b29a      	uxth	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008996:	b2da      	uxtb	r2, r3
 8008998:	8979      	ldrh	r1, [r7, #10]
 800899a:	2300      	movs	r3, #0
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 faf8 	bl	8008f98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d19e      	bne.n	80088f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 f93e 	bl	8008c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e01a      	b.n	80089fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2220      	movs	r2, #32
 80089cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6859      	ldr	r1, [r3, #4]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a04 <HAL_I2C_Mem_Write+0x224>)
 80089da:	400b      	ands	r3, r1
 80089dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2220      	movs	r2, #32
 80089e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	e000      	b.n	80089fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80089fa:	2302      	movs	r3, #2
  }
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	fe00e800 	.word	0xfe00e800

08008a08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	461a      	mov	r2, r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	817b      	strh	r3, [r7, #10]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	813b      	strh	r3, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	8979      	ldrh	r1, [r7, #10]
 8008a28:	4b20      	ldr	r3, [pc, #128]	@ (8008aac <I2C_RequestMemoryWrite+0xa4>)
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 fab1 	bl	8008f98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a36:	69fa      	ldr	r2, [r7, #28]
 8008a38:	69b9      	ldr	r1, [r7, #24]
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 f8b5 	bl	8008baa <I2C_WaitOnTXISFlagUntilTimeout>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e02c      	b.n	8008aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a4a:	88fb      	ldrh	r3, [r7, #6]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d105      	bne.n	8008a5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a50:	893b      	ldrh	r3, [r7, #8]
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a5a:	e015      	b.n	8008a88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a5c:	893b      	ldrh	r3, [r7, #8]
 8008a5e:	0a1b      	lsrs	r3, r3, #8
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a6a:	69fa      	ldr	r2, [r7, #28]
 8008a6c:	69b9      	ldr	r1, [r7, #24]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 f89b 	bl	8008baa <I2C_WaitOnTXISFlagUntilTimeout>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e012      	b.n	8008aa4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a7e:	893b      	ldrh	r3, [r7, #8]
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2180      	movs	r1, #128	@ 0x80
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 f830 	bl	8008af8 <I2C_WaitOnFlagUntilTimeout>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e000      	b.n	8008aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	80002000 	.word	0x80002000

08008ab0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d103      	bne.n	8008ace <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d007      	beq.n	8008aec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	699a      	ldr	r2, [r3, #24]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f042 0201 	orr.w	r2, r2, #1
 8008aea:	619a      	str	r2, [r3, #24]
  }
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	4613      	mov	r3, r2
 8008b06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b08:	e03b      	b.n	8008b82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 f962 	bl	8008dd8 <I2C_IsErrorOccurred>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e041      	b.n	8008ba2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b24:	d02d      	beq.n	8008b82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b26:	f7fa fa53 	bl	8002fd0 <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d302      	bcc.n	8008b3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d122      	bne.n	8008b82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	4013      	ands	r3, r2
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	bf0c      	ite	eq
 8008b4c:	2301      	moveq	r3, #1
 8008b4e:	2300      	movne	r3, #0
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d113      	bne.n	8008b82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b5e:	f043 0220 	orr.w	r2, r3, #32
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e00f      	b.n	8008ba2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	699a      	ldr	r2, [r3, #24]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	bf0c      	ite	eq
 8008b92:	2301      	moveq	r3, #1
 8008b94:	2300      	movne	r3, #0
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d0b4      	beq.n	8008b0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008bb6:	e033      	b.n	8008c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	68b9      	ldr	r1, [r7, #8]
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 f90b 	bl	8008dd8 <I2C_IsErrorOccurred>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e031      	b.n	8008c30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d025      	beq.n	8008c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bd4:	f7fa f9fc 	bl	8002fd0 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d302      	bcc.n	8008bea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d11a      	bne.n	8008c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	f003 0302 	and.w	r3, r3, #2
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d013      	beq.n	8008c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bfc:	f043 0220 	orr.w	r2, r3, #32
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e007      	b.n	8008c30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	f003 0302 	and.w	r3, r3, #2
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d1c4      	bne.n	8008bb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c44:	e02f      	b.n	8008ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	68b9      	ldr	r1, [r7, #8]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 f8c4 	bl	8008dd8 <I2C_IsErrorOccurred>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e02d      	b.n	8008cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c5a:	f7fa f9b9 	bl	8002fd0 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d302      	bcc.n	8008c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d11a      	bne.n	8008ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b20      	cmp	r3, #32
 8008c7c:	d013      	beq.n	8008ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c82:	f043 0220 	orr.w	r2, r3, #32
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e007      	b.n	8008cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	f003 0320 	and.w	r3, r3, #32
 8008cb0:	2b20      	cmp	r3, #32
 8008cb2:	d1c8      	bne.n	8008c46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
	...

08008cc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008cd0:	e071      	b.n	8008db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 f87e 	bl	8008dd8 <I2C_IsErrorOccurred>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	f003 0320 	and.w	r3, r3, #32
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	d13b      	bne.n	8008d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d138      	bne.n	8008d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d105      	bne.n	8008d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	f003 0310 	and.w	r3, r3, #16
 8008d1e:	2b10      	cmp	r3, #16
 8008d20:	d121      	bne.n	8008d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2210      	movs	r2, #16
 8008d28:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2220      	movs	r2, #32
 8008d36:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6859      	ldr	r1, [r3, #4]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b24      	ldr	r3, [pc, #144]	@ (8008dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008d44:	400b      	ands	r3, r1
 8008d46:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	75fb      	strb	r3, [r7, #23]
 8008d64:	e002      	b.n	8008d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008d6c:	f7fa f930 	bl	8002fd0 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d302      	bcc.n	8008d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d119      	bne.n	8008db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d116      	bne.n	8008db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d00f      	beq.n	8008db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9a:	f043 0220 	orr.w	r2, r3, #32
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	f003 0304 	and.w	r3, r3, #4
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d002      	beq.n	8008dca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d083      	beq.n	8008cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	fe00e800 	.word	0xfe00e800

08008dd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08a      	sub	sp, #40	@ 0x28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d068      	beq.n	8008ed6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2210      	movs	r2, #16
 8008e0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e0c:	e049      	b.n	8008ea2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d045      	beq.n	8008ea2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e16:	f7fa f8db 	bl	8002fd0 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d302      	bcc.n	8008e2c <I2C_IsErrorOccurred+0x54>
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d13a      	bne.n	8008ea2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e4e:	d121      	bne.n	8008e94 <I2C_IsErrorOccurred+0xbc>
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e56:	d01d      	beq.n	8008e94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008e58:	7cfb      	ldrb	r3, [r7, #19]
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	d01a      	beq.n	8008e94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008e6e:	f7fa f8af 	bl	8002fd0 <HAL_GetTick>
 8008e72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e74:	e00e      	b.n	8008e94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008e76:	f7fa f8ab 	bl	8002fd0 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b19      	cmp	r3, #25
 8008e82:	d907      	bls.n	8008e94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	f043 0320 	orr.w	r3, r3, #32
 8008e8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008e92:	e006      	b.n	8008ea2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	f003 0320 	and.w	r3, r3, #32
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d1e9      	bne.n	8008e76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	d003      	beq.n	8008eb8 <I2C_IsErrorOccurred+0xe0>
 8008eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d0aa      	beq.n	8008e0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d103      	bne.n	8008ec8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	f043 0304 	orr.w	r3, r3, #4
 8008ece:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ef8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00b      	beq.n	8008f22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	f043 0308 	orr.w	r3, r3, #8
 8008f10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008f1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	f043 0302 	orr.w	r3, r3, #2
 8008f32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01c      	beq.n	8008f86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f7ff fdaf 	bl	8008ab0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6859      	ldr	r1, [r3, #4]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f94 <I2C_IsErrorOccurred+0x1bc>)
 8008f5e:	400b      	ands	r3, r1
 8008f60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3728      	adds	r7, #40	@ 0x28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	fe00e800 	.word	0xfe00e800

08008f98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	607b      	str	r3, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	817b      	strh	r3, [r7, #10]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008faa:	897b      	ldrh	r3, [r7, #10]
 8008fac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fb0:	7a7b      	ldrb	r3, [r7, #9]
 8008fb2:	041b      	lsls	r3, r3, #16
 8008fb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fb8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fc6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	0d5b      	lsrs	r3, r3, #21
 8008fd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008fd6:	4b08      	ldr	r3, [pc, #32]	@ (8008ff8 <I2C_TransferConfig+0x60>)
 8008fd8:	430b      	orrs	r3, r1
 8008fda:	43db      	mvns	r3, r3
 8008fdc:	ea02 0103 	and.w	r1, r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008fea:	bf00      	nop
 8008fec:	371c      	adds	r7, #28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	03ff63ff 	.word	0x03ff63ff

08008ffc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b20      	cmp	r3, #32
 8009010:	d138      	bne.n	8009084 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800901c:	2302      	movs	r3, #2
 800901e:	e032      	b.n	8009086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2224      	movs	r2, #36	@ 0x24
 800902c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 0201 	bic.w	r2, r2, #1
 800903e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800904e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6819      	ldr	r1, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0201 	orr.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	e000      	b.n	8009086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009084:	2302      	movs	r3, #2
  }
}
 8009086:	4618      	mov	r0, r3
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009092:	b480      	push	{r7}
 8009094:	b085      	sub	sp, #20
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	d139      	bne.n	800911c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d101      	bne.n	80090b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090b2:	2302      	movs	r3, #2
 80090b4:	e033      	b.n	800911e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2224      	movs	r2, #36	@ 0x24
 80090c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0201 	bic.w	r2, r2, #1
 80090d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80090e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	021b      	lsls	r3, r3, #8
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0201 	orr.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	e000      	b.n	800911e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800911c:	2302      	movs	r3, #2
  }
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b086      	sub	sp, #24
 800912e:	af02      	add	r7, sp, #8
 8009130:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0fe      	b.n	800933a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d106      	bne.n	8009156 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f009 fd31 	bl	8012bb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2203      	movs	r2, #3
 800915a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f006 f949 	bl	800f3fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7c1a      	ldrb	r2, [r3, #16]
 8009170:	f88d 2000 	strb.w	r2, [sp]
 8009174:	3304      	adds	r3, #4
 8009176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009178:	f006 f81a 	bl	800f1b0 <USB_CoreInit>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d005      	beq.n	800918e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2202      	movs	r2, #2
 8009186:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e0d5      	b.n	800933a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f006 f941 	bl	800f41c <USB_SetCurrentMode>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e0c6      	b.n	800933a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
 80091b0:	e04a      	b.n	8009248 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80091b2:	7bfa      	ldrb	r2, [r7, #15]
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	4613      	mov	r3, r2
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	440b      	add	r3, r1
 80091c0:	3315      	adds	r3, #21
 80091c2:	2201      	movs	r2, #1
 80091c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80091c6:	7bfa      	ldrb	r2, [r7, #15]
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	440b      	add	r3, r1
 80091d4:	3314      	adds	r3, #20
 80091d6:	7bfa      	ldrb	r2, [r7, #15]
 80091d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80091da:	7bfa      	ldrb	r2, [r7, #15]
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	b298      	uxth	r0, r3
 80091e0:	6879      	ldr	r1, [r7, #4]
 80091e2:	4613      	mov	r3, r2
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	440b      	add	r3, r1
 80091ec:	332e      	adds	r3, #46	@ 0x2e
 80091ee:	4602      	mov	r2, r0
 80091f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80091f2:	7bfa      	ldrb	r2, [r7, #15]
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	440b      	add	r3, r1
 8009200:	3318      	adds	r3, #24
 8009202:	2200      	movs	r2, #0
 8009204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009206:	7bfa      	ldrb	r2, [r7, #15]
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	4613      	mov	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	4413      	add	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	440b      	add	r3, r1
 8009214:	331c      	adds	r3, #28
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800921a:	7bfa      	ldrb	r2, [r7, #15]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	4413      	add	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	3320      	adds	r3, #32
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800922e:	7bfa      	ldrb	r2, [r7, #15]
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	4613      	mov	r3, r2
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	440b      	add	r3, r1
 800923c:	3324      	adds	r3, #36	@ 0x24
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	3301      	adds	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	791b      	ldrb	r3, [r3, #4]
 800924c:	7bfa      	ldrb	r2, [r7, #15]
 800924e:	429a      	cmp	r2, r3
 8009250:	d3af      	bcc.n	80091b2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
 8009256:	e044      	b.n	80092e2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009258:	7bfa      	ldrb	r2, [r7, #15]
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	4613      	mov	r3, r2
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	440b      	add	r3, r1
 8009266:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800926e:	7bfa      	ldrb	r2, [r7, #15]
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	4613      	mov	r3, r2
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	440b      	add	r3, r1
 800927c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009280:	7bfa      	ldrb	r2, [r7, #15]
 8009282:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009284:	7bfa      	ldrb	r2, [r7, #15]
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	4613      	mov	r3, r2
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	440b      	add	r3, r1
 8009292:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009296:	2200      	movs	r2, #0
 8009298:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800929a:	7bfa      	ldrb	r2, [r7, #15]
 800929c:	6879      	ldr	r1, [r7, #4]
 800929e:	4613      	mov	r3, r2
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	4413      	add	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	440b      	add	r3, r1
 80092a8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80092b0:	7bfa      	ldrb	r2, [r7, #15]
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	4613      	mov	r3, r2
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	440b      	add	r3, r1
 80092be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80092c6:	7bfa      	ldrb	r2, [r7, #15]
 80092c8:	6879      	ldr	r1, [r7, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	440b      	add	r3, r1
 80092d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	3301      	adds	r3, #1
 80092e0:	73fb      	strb	r3, [r7, #15]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	791b      	ldrb	r3, [r3, #4]
 80092e6:	7bfa      	ldrb	r2, [r7, #15]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d3b5      	bcc.n	8009258 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	7c1a      	ldrb	r2, [r3, #16]
 80092f4:	f88d 2000 	strb.w	r2, [sp]
 80092f8:	3304      	adds	r3, #4
 80092fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092fc:	f006 f8da 	bl	800f4b4 <USB_DevInit>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d005      	beq.n	8009312 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2202      	movs	r2, #2
 800930a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e013      	b.n	800933a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7b1b      	ldrb	r3, [r3, #12]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d102      	bne.n	800932e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 f96f 	bl	800a60c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4618      	mov	r0, r3
 8009334:	f007 f91d 	bl	8010572 <USB_DevDisconnect>

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009356:	2b01      	cmp	r3, #1
 8009358:	d101      	bne.n	800935e <HAL_PCD_Start+0x1c>
 800935a:	2302      	movs	r3, #2
 800935c:	e022      	b.n	80093a4 <HAL_PCD_Start+0x62>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d009      	beq.n	8009386 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009376:	2b01      	cmp	r3, #1
 8009378:	d105      	bne.n	8009386 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4618      	mov	r0, r3
 800938c:	f006 f824 	bl	800f3d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4618      	mov	r0, r3
 8009396:	f007 f8cb 	bl	8010530 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80093ac:	b590      	push	{r4, r7, lr}
 80093ae:	b08d      	sub	sp, #52	@ 0x34
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f007 f989 	bl	80106da <USB_GetMode>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f040 84b9 	bne.w	8009d42 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f007 f8ed 	bl	80105b4 <USB_ReadInterrupts>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 84af 	beq.w	8009d40 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	0a1b      	lsrs	r3, r3, #8
 80093ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f007 f8da 	bl	80105b4 <USB_ReadInterrupts>
 8009400:	4603      	mov	r3, r0
 8009402:	f003 0302 	and.w	r3, r3, #2
 8009406:	2b02      	cmp	r3, #2
 8009408:	d107      	bne.n	800941a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	695a      	ldr	r2, [r3, #20]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f002 0202 	and.w	r2, r2, #2
 8009418:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4618      	mov	r0, r3
 8009420:	f007 f8c8 	bl	80105b4 <USB_ReadInterrupts>
 8009424:	4603      	mov	r3, r0
 8009426:	f003 0310 	and.w	r3, r3, #16
 800942a:	2b10      	cmp	r3, #16
 800942c:	d161      	bne.n	80094f2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	699a      	ldr	r2, [r3, #24]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f022 0210 	bic.w	r2, r2, #16
 800943c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	f003 020f 	and.w	r2, r3, #15
 800944a:	4613      	mov	r3, r2
 800944c:	00db      	lsls	r3, r3, #3
 800944e:	4413      	add	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	4413      	add	r3, r2
 800945a:	3304      	adds	r3, #4
 800945c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8009464:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009468:	d124      	bne.n	80094b4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800946a:	69ba      	ldr	r2, [r7, #24]
 800946c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8009470:	4013      	ands	r3, r2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d035      	beq.n	80094e2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	091b      	lsrs	r3, r3, #4
 800947e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009484:	b29b      	uxth	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	6a38      	ldr	r0, [r7, #32]
 800948a:	f006 feff 	bl	801028c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	091b      	lsrs	r3, r3, #4
 8009496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800949a:	441a      	add	r2, r3
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	695a      	ldr	r2, [r3, #20]
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	091b      	lsrs	r3, r3, #4
 80094a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094ac:	441a      	add	r2, r3
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	615a      	str	r2, [r3, #20]
 80094b2:	e016      	b.n	80094e2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80094ba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80094be:	d110      	bne.n	80094e2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80094c6:	2208      	movs	r2, #8
 80094c8:	4619      	mov	r1, r3
 80094ca:	6a38      	ldr	r0, [r7, #32]
 80094cc:	f006 fede 	bl	801028c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	695a      	ldr	r2, [r3, #20]
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	091b      	lsrs	r3, r3, #4
 80094d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094dc:	441a      	add	r2, r3
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699a      	ldr	r2, [r3, #24]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f042 0210 	orr.w	r2, r2, #16
 80094f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f007 f85c 	bl	80105b4 <USB_ReadInterrupts>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009502:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009506:	f040 80a7 	bne.w	8009658 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4618      	mov	r0, r3
 8009514:	f007 f861 	bl	80105da <USB_ReadDevAllOutEpInterrupt>
 8009518:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800951a:	e099      	b.n	8009650 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 808e 	beq.w	8009644 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	4611      	mov	r1, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f007 f885 	bl	8010642 <USB_ReadDevOutEPInterrupt>
 8009538:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00c      	beq.n	800955e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009550:	461a      	mov	r2, r3
 8009552:	2301      	movs	r3, #1
 8009554:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009556:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fed1 	bl	800a300 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	f003 0308 	and.w	r3, r3, #8
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00c      	beq.n	8009582 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009574:	461a      	mov	r2, r3
 8009576:	2308      	movs	r3, #8
 8009578:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800957a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 ffa7 	bl	800a4d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f003 0310 	and.w	r3, r3, #16
 8009588:	2b00      	cmp	r3, #0
 800958a:	d008      	beq.n	800959e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800958c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	4413      	add	r3, r2
 8009594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009598:	461a      	mov	r2, r3
 800959a:	2310      	movs	r3, #16
 800959c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d030      	beq.n	800960a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b0:	2b80      	cmp	r3, #128	@ 0x80
 80095b2:	d109      	bne.n	80095c8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	69fa      	ldr	r2, [r7, #28]
 80095be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80095c6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80095c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095ca:	4613      	mov	r3, r2
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	4413      	add	r3, r2
 80095da:	3304      	adds	r3, #4
 80095dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	78db      	ldrb	r3, [r3, #3]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d108      	bne.n	80095f8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2200      	movs	r2, #0
 80095ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80095ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f009 fc34 	bl	8012e60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80095f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009604:	461a      	mov	r2, r3
 8009606:	2302      	movs	r3, #2
 8009608:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f003 0320 	and.w	r3, r3, #32
 8009610:	2b00      	cmp	r3, #0
 8009612:	d008      	beq.n	8009626 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009616:	015a      	lsls	r2, r3, #5
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	4413      	add	r3, r2
 800961c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009620:	461a      	mov	r2, r3
 8009622:	2320      	movs	r3, #32
 8009624:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d009      	beq.n	8009644 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963c:	461a      	mov	r2, r3
 800963e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009642:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009646:	3301      	adds	r3, #1
 8009648:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800964a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964c:	085b      	lsrs	r3, r3, #1
 800964e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009652:	2b00      	cmp	r3, #0
 8009654:	f47f af62 	bne.w	800951c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4618      	mov	r0, r3
 800965e:	f006 ffa9 	bl	80105b4 <USB_ReadInterrupts>
 8009662:	4603      	mov	r3, r0
 8009664:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009668:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800966c:	f040 80db 	bne.w	8009826 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f006 ffca 	bl	801060e <USB_ReadDevAllInEpInterrupt>
 800967a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8009680:	e0cd      	b.n	800981e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80c2 	beq.w	8009812 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	4611      	mov	r1, r2
 8009698:	4618      	mov	r0, r3
 800969a:	f006 fff0 	bl	801067e <USB_ReadDevInEPInterrupt>
 800969e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d057      	beq.n	800975a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80096aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	2201      	movs	r2, #1
 80096b2:	fa02 f303 	lsl.w	r3, r2, r3
 80096b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	43db      	mvns	r3, r3
 80096c4:	69f9      	ldr	r1, [r7, #28]
 80096c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096ca:	4013      	ands	r3, r2
 80096cc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80096ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096da:	461a      	mov	r2, r3
 80096dc:	2301      	movs	r3, #1
 80096de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	799b      	ldrb	r3, [r3, #6]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d132      	bne.n	800974e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ec:	4613      	mov	r3, r2
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	440b      	add	r3, r1
 80096f6:	3320      	adds	r3, #32
 80096f8:	6819      	ldr	r1, [r3, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096fe:	4613      	mov	r3, r2
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4403      	add	r3, r0
 8009708:	331c      	adds	r3, #28
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4419      	add	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009712:	4613      	mov	r3, r2
 8009714:	00db      	lsls	r3, r3, #3
 8009716:	4413      	add	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4403      	add	r3, r0
 800971c:	3320      	adds	r3, #32
 800971e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009722:	2b00      	cmp	r3, #0
 8009724:	d113      	bne.n	800974e <HAL_PCD_IRQHandler+0x3a2>
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800972a:	4613      	mov	r3, r2
 800972c:	00db      	lsls	r3, r3, #3
 800972e:	4413      	add	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	440b      	add	r3, r1
 8009734:	3324      	adds	r3, #36	@ 0x24
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d108      	bne.n	800974e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009746:	461a      	mov	r2, r3
 8009748:	2101      	movs	r1, #1
 800974a:	f006 fff9 	bl	8010740 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800974e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009750:	b2db      	uxtb	r3, r3
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f009 fafe 	bl	8012d56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f003 0308 	and.w	r3, r3, #8
 8009760:	2b00      	cmp	r3, #0
 8009762:	d008      	beq.n	8009776 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009770:	461a      	mov	r2, r3
 8009772:	2308      	movs	r3, #8
 8009774:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f003 0310 	and.w	r3, r3, #16
 800977c:	2b00      	cmp	r3, #0
 800977e:	d008      	beq.n	8009792 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800978c:	461a      	mov	r2, r3
 800978e:	2310      	movs	r3, #16
 8009790:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009798:	2b00      	cmp	r3, #0
 800979a:	d008      	beq.n	80097ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800979c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097a8:	461a      	mov	r2, r3
 80097aa:	2340      	movs	r3, #64	@ 0x40
 80097ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f003 0302 	and.w	r3, r3, #2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d023      	beq.n	8009800 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80097b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80097ba:	6a38      	ldr	r0, [r7, #32]
 80097bc:	f005 ffd8 	bl	800f770 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80097c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097c2:	4613      	mov	r3, r2
 80097c4:	00db      	lsls	r3, r3, #3
 80097c6:	4413      	add	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	3310      	adds	r3, #16
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	4413      	add	r3, r2
 80097d0:	3304      	adds	r3, #4
 80097d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	78db      	ldrb	r3, [r3, #3]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d108      	bne.n	80097ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2200      	movs	r2, #0
 80097e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80097e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f009 fb4b 	bl	8012e84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097fa:	461a      	mov	r2, r3
 80097fc:	2302      	movs	r3, #2
 80097fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009806:	2b00      	cmp	r3, #0
 8009808:	d003      	beq.n	8009812 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800980a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fcea 	bl	800a1e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009814:	3301      	adds	r3, #1
 8009816:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981a:	085b      	lsrs	r3, r3, #1
 800981c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800981e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009820:	2b00      	cmp	r3, #0
 8009822:	f47f af2e 	bne.w	8009682 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4618      	mov	r0, r3
 800982c:	f006 fec2 	bl	80105b4 <USB_ReadInterrupts>
 8009830:	4603      	mov	r3, r0
 8009832:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800983a:	d122      	bne.n	8009882 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	69fa      	ldr	r2, [r7, #28]
 8009846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800984a:	f023 0301 	bic.w	r3, r3, #1
 800984e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8009856:	2b01      	cmp	r3, #1
 8009858:	d108      	bne.n	800986c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009862:	2100      	movs	r1, #0
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fef5 	bl	800a654 <HAL_PCDEx_LPM_Callback>
 800986a:	e002      	b.n	8009872 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f009 fae9 	bl	8012e44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	695a      	ldr	r2, [r3, #20]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f006 fe94 	bl	80105b4 <USB_ReadInterrupts>
 800988c:	4603      	mov	r3, r0
 800988e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009896:	d112      	bne.n	80098be <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d102      	bne.n	80098ae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f009 faa5 	bl	8012df8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	695a      	ldr	r2, [r3, #20]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80098bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f006 fe76 	bl	80105b4 <USB_ReadInterrupts>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098d2:	d121      	bne.n	8009918 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	695a      	ldr	r2, [r3, #20]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80098e2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d111      	bne.n	8009912 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098fc:	089b      	lsrs	r3, r3, #2
 80098fe:	f003 020f 	and.w	r2, r3, #15
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009908:	2101      	movs	r1, #1
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fea2 	bl	800a654 <HAL_PCDEx_LPM_Callback>
 8009910:	e002      	b.n	8009918 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f009 fa70 	bl	8012df8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f006 fe49 	bl	80105b4 <USB_ReadInterrupts>
 8009922:	4603      	mov	r3, r0
 8009924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800992c:	f040 80b7 	bne.w	8009a9e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	69fa      	ldr	r2, [r7, #28]
 800993a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800993e:	f023 0301 	bic.w	r3, r3, #1
 8009942:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2110      	movs	r1, #16
 800994a:	4618      	mov	r0, r3
 800994c:	f005 ff10 	bl	800f770 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009950:	2300      	movs	r3, #0
 8009952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009954:	e046      	b.n	80099e4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009962:	461a      	mov	r2, r3
 8009964:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009968:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800996a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800997a:	0151      	lsls	r1, r2, #5
 800997c:	69fa      	ldr	r2, [r7, #28]
 800997e:	440a      	add	r2, r1
 8009980:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009984:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009988:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800998a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	4413      	add	r3, r2
 8009992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009996:	461a      	mov	r2, r3
 8009998:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800999c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800999e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ae:	0151      	lsls	r1, r2, #5
 80099b0:	69fa      	ldr	r2, [r7, #28]
 80099b2:	440a      	add	r2, r1
 80099b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80099be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ce:	0151      	lsls	r1, r2, #5
 80099d0:	69fa      	ldr	r2, [r7, #28]
 80099d2:	440a      	add	r2, r1
 80099d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e0:	3301      	adds	r3, #1
 80099e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	791b      	ldrb	r3, [r3, #4]
 80099e8:	461a      	mov	r2, r3
 80099ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d3b2      	bcc.n	8009956 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099fe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009a02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	7bdb      	ldrb	r3, [r3, #15]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d016      	beq.n	8009a3a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a16:	69fa      	ldr	r2, [r7, #28]
 8009a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a1c:	f043 030b 	orr.w	r3, r3, #11
 8009a20:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a32:	f043 030b 	orr.w	r3, r3, #11
 8009a36:	6453      	str	r3, [r2, #68]	@ 0x44
 8009a38:	e015      	b.n	8009a66 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a40:	695a      	ldr	r2, [r3, #20]
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f242 032b 	movw	r3, #8235	@ 0x202b
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a60:	f043 030b 	orr.w	r3, r3, #11
 8009a64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69fa      	ldr	r2, [r7, #28]
 8009a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a74:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009a78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a88:	461a      	mov	r2, r3
 8009a8a:	f006 fe59 	bl	8010740 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	695a      	ldr	r2, [r3, #20]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f006 fd86 	bl	80105b4 <USB_ReadInterrupts>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009aae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ab2:	d123      	bne.n	8009afc <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f006 fe1d 	bl	80106f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f005 fecd 	bl	800f862 <USB_GetDevSpeed>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	461a      	mov	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681c      	ldr	r4, [r3, #0]
 8009ad4:	f001 fde0 	bl	800b698 <HAL_RCC_GetHCLKFreq>
 8009ad8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009ade:	461a      	mov	r2, r3
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f005 fbd7 	bl	800f294 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f009 f95d 	bl	8012da6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	695a      	ldr	r2, [r3, #20]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f006 fd57 	bl	80105b4 <USB_ReadInterrupts>
 8009b06:	4603      	mov	r3, r0
 8009b08:	f003 0308 	and.w	r3, r3, #8
 8009b0c:	2b08      	cmp	r3, #8
 8009b0e:	d10a      	bne.n	8009b26 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f009 f93a 	bl	8012d8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	695a      	ldr	r2, [r3, #20]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f002 0208 	and.w	r2, r2, #8
 8009b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f006 fd42 	bl	80105b4 <USB_ReadInterrupts>
 8009b30:	4603      	mov	r3, r0
 8009b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b36:	2b80      	cmp	r3, #128	@ 0x80
 8009b38:	d123      	bne.n	8009b82 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b46:	2301      	movs	r3, #1
 8009b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b4a:	e014      	b.n	8009b76 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b50:	4613      	mov	r3, r2
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	440b      	add	r3, r1
 8009b5a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d105      	bne.n	8009b70 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fb0a 	bl	800a184 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	3301      	adds	r3, #1
 8009b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	791b      	ldrb	r3, [r3, #4]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d3e4      	bcc.n	8009b4c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f006 fd14 	bl	80105b4 <USB_ReadInterrupts>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b96:	d13c      	bne.n	8009c12 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b98:	2301      	movs	r3, #1
 8009b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b9c:	e02b      	b.n	8009bf6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	00db      	lsls	r3, r3, #3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	440b      	add	r3, r1
 8009bbc:	3318      	adds	r3, #24
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d115      	bne.n	8009bf0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009bc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	da12      	bge.n	8009bf0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bce:	4613      	mov	r3, r2
 8009bd0:	00db      	lsls	r3, r3, #3
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	440b      	add	r3, r1
 8009bd8:	3317      	adds	r3, #23
 8009bda:	2201      	movs	r2, #1
 8009bdc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 faca 	bl	800a184 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	791b      	ldrb	r3, [r3, #4]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d3cd      	bcc.n	8009b9e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	695a      	ldr	r2, [r3, #20]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f006 fccc 	bl	80105b4 <USB_ReadInterrupts>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c26:	d156      	bne.n	8009cd6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c28:	2301      	movs	r3, #1
 8009c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c2c:	e045      	b.n	8009cba <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c42:	4613      	mov	r3, r2
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	440b      	add	r3, r1
 8009c4c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d12e      	bne.n	8009cb4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009c56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	da2b      	bge.n	8009cb4 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	0c1a      	lsrs	r2, r3, #16
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009c66:	4053      	eors	r3, r2
 8009c68:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d121      	bne.n	8009cb4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c74:	4613      	mov	r3, r2
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	440b      	add	r3, r1
 8009c7e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009c82:	2201      	movs	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	69fa      	ldr	r2, [r7, #28]
 8009ca8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009cac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009cb0:	6053      	str	r3, [r2, #4]
            break;
 8009cb2:	e008      	b.n	8009cc6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	791b      	ldrb	r3, [r3, #4]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d3b3      	bcc.n	8009c2e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	695a      	ldr	r2, [r3, #20]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f006 fc6a 	bl	80105b4 <USB_ReadInterrupts>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cea:	d10a      	bne.n	8009d02 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f009 f8db 	bl	8012ea8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	695a      	ldr	r2, [r3, #20]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f006 fc54 	bl	80105b4 <USB_ReadInterrupts>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d115      	bne.n	8009d42 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f009 f8cb 	bl	8012ec4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6859      	ldr	r1, [r3, #4]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	69ba      	ldr	r2, [r7, #24]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	605a      	str	r2, [r3, #4]
 8009d3e:	e000      	b.n	8009d42 <HAL_PCD_IRQHandler+0x996>
      return;
 8009d40:	bf00      	nop
    }
  }
}
 8009d42:	3734      	adds	r7, #52	@ 0x34
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd90      	pop	{r4, r7, pc}

08009d48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d101      	bne.n	8009d62 <HAL_PCD_SetAddress+0x1a>
 8009d5e:	2302      	movs	r3, #2
 8009d60:	e012      	b.n	8009d88 <HAL_PCD_SetAddress+0x40>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	78fa      	ldrb	r2, [r7, #3]
 8009d6e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	78fa      	ldrb	r2, [r7, #3]
 8009d76:	4611      	mov	r1, r2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f006 fbb3 	bl	80104e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	4608      	mov	r0, r1
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4603      	mov	r3, r0
 8009da0:	70fb      	strb	r3, [r7, #3]
 8009da2:	460b      	mov	r3, r1
 8009da4:	803b      	strh	r3, [r7, #0]
 8009da6:	4613      	mov	r3, r2
 8009da8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	da0f      	bge.n	8009dd6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009db6:	78fb      	ldrb	r3, [r7, #3]
 8009db8:	f003 020f 	and.w	r2, r3, #15
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	00db      	lsls	r3, r3, #3
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	3310      	adds	r3, #16
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	4413      	add	r3, r2
 8009dca:	3304      	adds	r3, #4
 8009dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	705a      	strb	r2, [r3, #1]
 8009dd4:	e00f      	b.n	8009df6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	f003 020f 	and.w	r2, r3, #15
 8009ddc:	4613      	mov	r3, r2
 8009dde:	00db      	lsls	r3, r3, #3
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	4413      	add	r3, r2
 8009dec:	3304      	adds	r3, #4
 8009dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	f003 030f 	and.w	r3, r3, #15
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009e02:	883b      	ldrh	r3, [r7, #0]
 8009e04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	78ba      	ldrb	r2, [r7, #2]
 8009e10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009e24:	78bb      	ldrb	r3, [r7, #2]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d102      	bne.n	8009e30 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <HAL_PCD_EP_Open+0xae>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e00e      	b.n	8009e5c <HAL_PCD_EP_Open+0xcc>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68f9      	ldr	r1, [r7, #12]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f005 fd2d 	bl	800f8ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8009e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	da0f      	bge.n	8009e98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e78:	78fb      	ldrb	r3, [r7, #3]
 8009e7a:	f003 020f 	and.w	r2, r3, #15
 8009e7e:	4613      	mov	r3, r2
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	4413      	add	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	3310      	adds	r3, #16
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2201      	movs	r2, #1
 8009e94:	705a      	strb	r2, [r3, #1]
 8009e96:	e00f      	b.n	8009eb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	f003 020f 	and.w	r2, r3, #15
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	00db      	lsls	r3, r3, #3
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	4413      	add	r3, r2
 8009eae:	3304      	adds	r3, #4
 8009eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	f003 030f 	and.w	r3, r3, #15
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d101      	bne.n	8009ed2 <HAL_PCD_EP_Close+0x6e>
 8009ece:	2302      	movs	r3, #2
 8009ed0:	e00e      	b.n	8009ef0 <HAL_PCD_EP_Close+0x8c>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68f9      	ldr	r1, [r7, #12]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f005 fd6b 	bl	800f9bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	607a      	str	r2, [r7, #4]
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	460b      	mov	r3, r1
 8009f06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f08:	7afb      	ldrb	r3, [r7, #11]
 8009f0a:	f003 020f 	and.w	r2, r3, #15
 8009f0e:	4613      	mov	r3, r2
 8009f10:	00db      	lsls	r3, r3, #3
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	3304      	adds	r3, #4
 8009f20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2200      	movs	r2, #0
 8009f32:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2200      	movs	r2, #0
 8009f38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f3a:	7afb      	ldrb	r3, [r7, #11]
 8009f3c:	f003 030f 	and.w	r3, r3, #15
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	799b      	ldrb	r3, [r3, #6]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d102      	bne.n	8009f54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6818      	ldr	r0, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	799b      	ldrb	r3, [r3, #6]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6979      	ldr	r1, [r7, #20]
 8009f60:	f005 fe08 	bl	800fb74 <USB_EPStartXfer>

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	460b      	mov	r3, r1
 8009f78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	f003 020f 	and.w	r2, r3, #15
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	4613      	mov	r3, r2
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	4413      	add	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	440b      	add	r3, r1
 8009f8c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009f90:	681b      	ldr	r3, [r3, #0]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
 8009faa:	460b      	mov	r3, r1
 8009fac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	f003 020f 	and.w	r2, r3, #15
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	3310      	adds	r3, #16
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fde:	7afb      	ldrb	r3, [r7, #11]
 8009fe0:	f003 030f 	and.w	r3, r3, #15
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	799b      	ldrb	r3, [r3, #6]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d102      	bne.n	8009ff8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6818      	ldr	r0, [r3, #0]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	799b      	ldrb	r3, [r3, #6]
 800a000:	461a      	mov	r2, r3
 800a002:	6979      	ldr	r1, [r7, #20]
 800a004:	f005 fdb6 	bl	800fb74 <USB_EPStartXfer>

  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	460b      	mov	r3, r1
 800a01c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a01e:	78fb      	ldrb	r3, [r7, #3]
 800a020:	f003 030f 	and.w	r3, r3, #15
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	7912      	ldrb	r2, [r2, #4]
 800a028:	4293      	cmp	r3, r2
 800a02a:	d901      	bls.n	800a030 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e04f      	b.n	800a0d0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a034:	2b00      	cmp	r3, #0
 800a036:	da0f      	bge.n	800a058 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	f003 020f 	and.w	r2, r3, #15
 800a03e:	4613      	mov	r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	3310      	adds	r3, #16
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	4413      	add	r3, r2
 800a04c:	3304      	adds	r3, #4
 800a04e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2201      	movs	r2, #1
 800a054:	705a      	strb	r2, [r3, #1]
 800a056:	e00d      	b.n	800a074 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a058:	78fa      	ldrb	r2, [r7, #3]
 800a05a:	4613      	mov	r3, r2
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	4413      	add	r3, r2
 800a06a:	3304      	adds	r3, #4
 800a06c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2201      	movs	r2, #1
 800a078:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	f003 030f 	and.w	r3, r3, #15
 800a080:	b2da      	uxtb	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d101      	bne.n	800a094 <HAL_PCD_EP_SetStall+0x82>
 800a090:	2302      	movs	r3, #2
 800a092:	e01d      	b.n	800a0d0 <HAL_PCD_EP_SetStall+0xbe>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68f9      	ldr	r1, [r7, #12]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f006 f94a 	bl	801033c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a0a8:	78fb      	ldrb	r3, [r7, #3]
 800a0aa:	f003 030f 	and.w	r3, r3, #15
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d109      	bne.n	800a0c6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	7999      	ldrb	r1, [r3, #6]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	f006 fb3d 	bl	8010740 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	f003 030f 	and.w	r3, r3, #15
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	7912      	ldrb	r2, [r2, #4]
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d901      	bls.n	800a0f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e042      	b.n	800a17c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a0f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	da0f      	bge.n	800a11e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0fe:	78fb      	ldrb	r3, [r7, #3]
 800a100:	f003 020f 	and.w	r2, r3, #15
 800a104:	4613      	mov	r3, r2
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	3310      	adds	r3, #16
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	4413      	add	r3, r2
 800a112:	3304      	adds	r3, #4
 800a114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2201      	movs	r2, #1
 800a11a:	705a      	strb	r2, [r3, #1]
 800a11c:	e00f      	b.n	800a13e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a11e:	78fb      	ldrb	r3, [r7, #3]
 800a120:	f003 020f 	and.w	r2, r3, #15
 800a124:	4613      	mov	r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	4413      	add	r3, r2
 800a134:	3304      	adds	r3, #4
 800a136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a156:	2b01      	cmp	r3, #1
 800a158:	d101      	bne.n	800a15e <HAL_PCD_EP_ClrStall+0x86>
 800a15a:	2302      	movs	r3, #2
 800a15c:	e00e      	b.n	800a17c <HAL_PCD_EP_ClrStall+0xa4>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68f9      	ldr	r1, [r7, #12]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f006 f953 	bl	8010418 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a194:	2b00      	cmp	r3, #0
 800a196:	da0c      	bge.n	800a1b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a198:	78fb      	ldrb	r3, [r7, #3]
 800a19a:	f003 020f 	and.w	r2, r3, #15
 800a19e:	4613      	mov	r3, r2
 800a1a0:	00db      	lsls	r3, r3, #3
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	3310      	adds	r3, #16
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	e00c      	b.n	800a1cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	f003 020f 	and.w	r2, r3, #15
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68f9      	ldr	r1, [r7, #12]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f005 ff72 	bl	80100bc <USB_EPStopXfer>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a1dc:	7afb      	ldrb	r3, [r7, #11]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b08a      	sub	sp, #40	@ 0x28
 800a1ea:	af02      	add	r7, sp, #8
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	4413      	add	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	3310      	adds	r3, #16
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	4413      	add	r3, r2
 800a20a:	3304      	adds	r3, #4
 800a20c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	695a      	ldr	r2, [r3, #20]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	429a      	cmp	r2, r3
 800a218:	d901      	bls.n	800a21e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e06b      	b.n	800a2f6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	691a      	ldr	r2, [r3, #16]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	69fa      	ldr	r2, [r7, #28]
 800a230:	429a      	cmp	r2, r3
 800a232:	d902      	bls.n	800a23a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	3303      	adds	r3, #3
 800a23e:	089b      	lsrs	r3, r3, #2
 800a240:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a242:	e02a      	b.n	800a29a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	691a      	ldr	r2, [r3, #16]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	695b      	ldr	r3, [r3, #20]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	429a      	cmp	r2, r3
 800a258:	d902      	bls.n	800a260 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	3303      	adds	r3, #3
 800a264:	089b      	lsrs	r3, r3, #2
 800a266:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	68d9      	ldr	r1, [r3, #12]
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	4603      	mov	r3, r0
 800a27c:	6978      	ldr	r0, [r7, #20]
 800a27e:	f005 ffc7 	bl	8010210 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	68da      	ldr	r2, [r3, #12]
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	441a      	add	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	695a      	ldr	r2, [r3, #20]
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	441a      	add	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	015a      	lsls	r2, r3, #5
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d809      	bhi.n	800a2c4 <PCD_WriteEmptyTxFifo+0xde>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	695a      	ldr	r2, [r3, #20]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d203      	bcs.n	800a2c4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1bf      	bne.n	800a244 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	691a      	ldr	r2, [r3, #16]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d811      	bhi.n	800a2f4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	f003 030f 	and.w	r3, r3, #15
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	43db      	mvns	r3, r3
 800a2ea:	6939      	ldr	r1, [r7, #16]
 800a2ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3720      	adds	r7, #32
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	333c      	adds	r3, #60	@ 0x3c
 800a318:	3304      	adds	r3, #4
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	015a      	lsls	r2, r3, #5
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	4413      	add	r3, r2
 800a326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	799b      	ldrb	r3, [r3, #6]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d17b      	bne.n	800a42e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	f003 0308 	and.w	r3, r3, #8
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d015      	beq.n	800a36c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	4a61      	ldr	r2, [pc, #388]	@ (800a4c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a344:	4293      	cmp	r3, r2
 800a346:	f240 80b9 	bls.w	800a4bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 80b3 	beq.w	800a4bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a362:	461a      	mov	r2, r3
 800a364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a368:	6093      	str	r3, [r2, #8]
 800a36a:	e0a7      	b.n	800a4bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f003 0320 	and.w	r3, r3, #32
 800a372:	2b00      	cmp	r3, #0
 800a374:	d009      	beq.n	800a38a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	015a      	lsls	r2, r3, #5
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	4413      	add	r3, r2
 800a37e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a382:	461a      	mov	r2, r3
 800a384:	2320      	movs	r3, #32
 800a386:	6093      	str	r3, [r2, #8]
 800a388:	e098      	b.n	800a4bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a390:	2b00      	cmp	r3, #0
 800a392:	f040 8093 	bne.w	800a4bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	4a4b      	ldr	r2, [pc, #300]	@ (800a4c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d90f      	bls.n	800a3be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00a      	beq.n	800a3be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3ba:	6093      	str	r3, [r2, #8]
 800a3bc:	e07e      	b.n	800a4bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6a1a      	ldr	r2, [r3, #32]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	0159      	lsls	r1, r3, #5
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	440b      	add	r3, r1
 800a3e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3ea:	1ad2      	subs	r2, r2, r3
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d114      	bne.n	800a420 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d109      	bne.n	800a412 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6818      	ldr	r0, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a408:	461a      	mov	r2, r3
 800a40a:	2101      	movs	r1, #1
 800a40c:	f006 f998 	bl	8010740 <USB_EP0_OutStart>
 800a410:	e006      	b.n	800a420 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	441a      	add	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f008 fc7a 	bl	8012d20 <HAL_PCD_DataOutStageCallback>
 800a42c:	e046      	b.n	800a4bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	4a26      	ldr	r2, [pc, #152]	@ (800a4cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d124      	bne.n	800a480 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00a      	beq.n	800a456 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	4413      	add	r3, r2
 800a448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a44c:	461a      	mov	r2, r3
 800a44e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a452:	6093      	str	r3, [r2, #8]
 800a454:	e032      	b.n	800a4bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	f003 0320 	and.w	r3, r3, #32
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d008      	beq.n	800a472 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	4413      	add	r3, r2
 800a468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a46c:	461a      	mov	r2, r3
 800a46e:	2320      	movs	r3, #32
 800a470:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	b2db      	uxtb	r3, r3
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f008 fc51 	bl	8012d20 <HAL_PCD_DataOutStageCallback>
 800a47e:	e01d      	b.n	800a4bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d114      	bne.n	800a4b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a486:	6879      	ldr	r1, [r7, #4]
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	4613      	mov	r3, r2
 800a48c:	00db      	lsls	r3, r3, #3
 800a48e:	4413      	add	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	440b      	add	r3, r1
 800a494:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d108      	bne.n	800a4b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	f006 f948 	bl	8010740 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f008 fc32 	bl	8012d20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3720      	adds	r7, #32
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	4f54300a 	.word	0x4f54300a
 800a4cc:	4f54310a 	.word	0x4f54310a

0800a4d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	333c      	adds	r3, #60	@ 0x3c
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4a15      	ldr	r2, [pc, #84]	@ (800a558 <PCD_EP_OutSetupPacket_int+0x88>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d90e      	bls.n	800a524 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d009      	beq.n	800a524 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51c:	461a      	mov	r2, r3
 800a51e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a522:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f008 fbe9 	bl	8012cfc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4a0a      	ldr	r2, [pc, #40]	@ (800a558 <PCD_EP_OutSetupPacket_int+0x88>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d90c      	bls.n	800a54c <PCD_EP_OutSetupPacket_int+0x7c>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	799b      	ldrb	r3, [r3, #6]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d108      	bne.n	800a54c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6818      	ldr	r0, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a544:	461a      	mov	r2, r3
 800a546:	2101      	movs	r1, #1
 800a548:	f006 f8fa 	bl	8010740 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	4f54300a 	.word	0x4f54300a

0800a55c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	70fb      	strb	r3, [r7, #3]
 800a568:	4613      	mov	r3, r2
 800a56a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a572:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d107      	bne.n	800a58a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a57a:	883b      	ldrh	r3, [r7, #0]
 800a57c:	0419      	lsls	r1, r3, #16
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	430a      	orrs	r2, r1
 800a586:	629a      	str	r2, [r3, #40]	@ 0x28
 800a588:	e028      	b.n	800a5dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a590:	0c1b      	lsrs	r3, r3, #16
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	4413      	add	r3, r2
 800a596:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
 800a59c:	e00d      	b.n	800a5ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
 800a5a4:	3340      	adds	r3, #64	@ 0x40
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	0c1b      	lsrs	r3, r3, #16
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	73fb      	strb	r3, [r7, #15]
 800a5ba:	7bfa      	ldrb	r2, [r7, #15]
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d3ec      	bcc.n	800a59e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a5c4:	883b      	ldrh	r3, [r7, #0]
 800a5c6:	0418      	lsls	r0, r3, #16
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6819      	ldr	r1, [r3, #0]
 800a5cc:	78fb      	ldrb	r3, [r7, #3]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	4302      	orrs	r2, r0
 800a5d4:	3340      	adds	r3, #64	@ 0x40
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	440b      	add	r3, r1
 800a5da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b083      	sub	sp, #12
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	887a      	ldrh	r2, [r7, #2]
 800a5fc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a63a:	4b05      	ldr	r3, [pc, #20]	@ (800a650 <HAL_PCDEx_ActivateLPM+0x44>)
 800a63c:	4313      	orrs	r3, r2
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	10000003 	.word	0x10000003

0800a654 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a674:	4b19      	ldr	r3, [pc, #100]	@ (800a6dc <HAL_PWREx_ConfigSupply+0x70>)
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b04      	cmp	r3, #4
 800a67e:	d00a      	beq.n	800a696 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a680:	4b16      	ldr	r3, [pc, #88]	@ (800a6dc <HAL_PWREx_ConfigSupply+0x70>)
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	f003 0307 	and.w	r3, r3, #7
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d001      	beq.n	800a692 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e01f      	b.n	800a6d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	e01d      	b.n	800a6d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a696:	4b11      	ldr	r3, [pc, #68]	@ (800a6dc <HAL_PWREx_ConfigSupply+0x70>)
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	f023 0207 	bic.w	r2, r3, #7
 800a69e:	490f      	ldr	r1, [pc, #60]	@ (800a6dc <HAL_PWREx_ConfigSupply+0x70>)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a6a6:	f7f8 fc93 	bl	8002fd0 <HAL_GetTick>
 800a6aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6ac:	e009      	b.n	800a6c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a6ae:	f7f8 fc8f 	bl	8002fd0 <HAL_GetTick>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6bc:	d901      	bls.n	800a6c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e007      	b.n	800a6d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6c2:	4b06      	ldr	r3, [pc, #24]	@ (800a6dc <HAL_PWREx_ConfigSupply+0x70>)
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6ce:	d1ee      	bne.n	800a6ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	58024800 	.word	0x58024800

0800a6e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a6e4:	4b05      	ldr	r3, [pc, #20]	@ (800a6fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	4a04      	ldr	r2, [pc, #16]	@ (800a6fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a6ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6ee:	60d3      	str	r3, [r2, #12]
}
 800a6f0:	bf00      	nop
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	58024800 	.word	0x58024800

0800a700 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08c      	sub	sp, #48	@ 0x30
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d102      	bne.n	800a714 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	f000 bc1f 	b.w	800af52 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0301 	and.w	r3, r3, #1
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 80b3 	beq.w	800a888 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a722:	4b95      	ldr	r3, [pc, #596]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a72a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a72c:	4b92      	ldr	r3, [pc, #584]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a730:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a734:	2b10      	cmp	r3, #16
 800a736:	d007      	beq.n	800a748 <HAL_RCC_OscConfig+0x48>
 800a738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a73a:	2b18      	cmp	r3, #24
 800a73c:	d112      	bne.n	800a764 <HAL_RCC_OscConfig+0x64>
 800a73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a740:	f003 0303 	and.w	r3, r3, #3
 800a744:	2b02      	cmp	r3, #2
 800a746:	d10d      	bne.n	800a764 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a748:	4b8b      	ldr	r3, [pc, #556]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 8098 	beq.w	800a886 <HAL_RCC_OscConfig+0x186>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f040 8093 	bne.w	800a886 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e3f6      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a76c:	d106      	bne.n	800a77c <HAL_RCC_OscConfig+0x7c>
 800a76e:	4b82      	ldr	r3, [pc, #520]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a81      	ldr	r2, [pc, #516]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	e058      	b.n	800a82e <HAL_RCC_OscConfig+0x12e>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d112      	bne.n	800a7aa <HAL_RCC_OscConfig+0xaa>
 800a784:	4b7c      	ldr	r3, [pc, #496]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a7b      	ldr	r2, [pc, #492]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a78a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	4b79      	ldr	r3, [pc, #484]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a78      	ldr	r2, [pc, #480]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a796:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	4b76      	ldr	r3, [pc, #472]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a75      	ldr	r2, [pc, #468]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	e041      	b.n	800a82e <HAL_RCC_OscConfig+0x12e>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a7b2:	d112      	bne.n	800a7da <HAL_RCC_OscConfig+0xda>
 800a7b4:	4b70      	ldr	r3, [pc, #448]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a6f      	ldr	r2, [pc, #444]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	4b6d      	ldr	r3, [pc, #436]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a6c      	ldr	r2, [pc, #432]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7c6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	4b6a      	ldr	r3, [pc, #424]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a69      	ldr	r2, [pc, #420]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	e029      	b.n	800a82e <HAL_RCC_OscConfig+0x12e>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a7e2:	d112      	bne.n	800a80a <HAL_RCC_OscConfig+0x10a>
 800a7e4:	4b64      	ldr	r3, [pc, #400]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a63      	ldr	r2, [pc, #396]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	4b61      	ldr	r3, [pc, #388]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a60      	ldr	r2, [pc, #384]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7fa:	6013      	str	r3, [r2, #0]
 800a7fc:	4b5e      	ldr	r3, [pc, #376]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a5d      	ldr	r2, [pc, #372]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	e011      	b.n	800a82e <HAL_RCC_OscConfig+0x12e>
 800a80a:	4b5b      	ldr	r3, [pc, #364]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a5a      	ldr	r2, [pc, #360]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	4b58      	ldr	r3, [pc, #352]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a57      	ldr	r2, [pc, #348]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a81c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	4b55      	ldr	r3, [pc, #340]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a54      	ldr	r2, [pc, #336]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a828:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a82c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d013      	beq.n	800a85e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a836:	f7f8 fbcb 	bl	8002fd0 <HAL_GetTick>
 800a83a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a83c:	e008      	b.n	800a850 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a83e:	f7f8 fbc7 	bl	8002fd0 <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	2b64      	cmp	r3, #100	@ 0x64
 800a84a:	d901      	bls.n	800a850 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e380      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a850:	4b49      	ldr	r3, [pc, #292]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0f0      	beq.n	800a83e <HAL_RCC_OscConfig+0x13e>
 800a85c:	e014      	b.n	800a888 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a85e:	f7f8 fbb7 	bl	8002fd0 <HAL_GetTick>
 800a862:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a864:	e008      	b.n	800a878 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a866:	f7f8 fbb3 	bl	8002fd0 <HAL_GetTick>
 800a86a:	4602      	mov	r2, r0
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	2b64      	cmp	r3, #100	@ 0x64
 800a872:	d901      	bls.n	800a878 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e36c      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a878:	4b3f      	ldr	r3, [pc, #252]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1f0      	bne.n	800a866 <HAL_RCC_OscConfig+0x166>
 800a884:	e000      	b.n	800a888 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a886:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0302 	and.w	r3, r3, #2
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 808c 	beq.w	800a9ae <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a896:	4b38      	ldr	r3, [pc, #224]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a89e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8a0:	4b35      	ldr	r3, [pc, #212]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a8a6:	6a3b      	ldr	r3, [r7, #32]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d007      	beq.n	800a8bc <HAL_RCC_OscConfig+0x1bc>
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	2b18      	cmp	r3, #24
 800a8b0:	d137      	bne.n	800a922 <HAL_RCC_OscConfig+0x222>
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	f003 0303 	and.w	r3, r3, #3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d132      	bne.n	800a922 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8bc:	4b2e      	ldr	r3, [pc, #184]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0304 	and.w	r3, r3, #4
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <HAL_RCC_OscConfig+0x1d4>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e33e      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8d4:	4b28      	ldr	r3, [pc, #160]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f023 0219 	bic.w	r2, r3, #25
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	4925      	ldr	r1, [pc, #148]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8e6:	f7f8 fb73 	bl	8002fd0 <HAL_GetTick>
 800a8ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8ec:	e008      	b.n	800a900 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8ee:	f7f8 fb6f 	bl	8002fd0 <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d901      	bls.n	800a900 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e328      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a900:	4b1d      	ldr	r3, [pc, #116]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0304 	and.w	r3, r3, #4
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d0f0      	beq.n	800a8ee <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a90c:	4b1a      	ldr	r3, [pc, #104]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	061b      	lsls	r3, r3, #24
 800a91a:	4917      	ldr	r1, [pc, #92]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a920:	e045      	b.n	800a9ae <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d028      	beq.n	800a97c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a92a:	4b13      	ldr	r3, [pc, #76]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f023 0219 	bic.w	r2, r3, #25
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	4910      	ldr	r1, [pc, #64]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a938:	4313      	orrs	r3, r2
 800a93a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a93c:	f7f8 fb48 	bl	8002fd0 <HAL_GetTick>
 800a940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a942:	e008      	b.n	800a956 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a944:	f7f8 fb44 	bl	8002fd0 <HAL_GetTick>
 800a948:	4602      	mov	r2, r0
 800a94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d901      	bls.n	800a956 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e2fd      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a956:	4b08      	ldr	r3, [pc, #32]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0304 	and.w	r3, r3, #4
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d0f0      	beq.n	800a944 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a962:	4b05      	ldr	r3, [pc, #20]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	061b      	lsls	r3, r3, #24
 800a970:	4901      	ldr	r1, [pc, #4]	@ (800a978 <HAL_RCC_OscConfig+0x278>)
 800a972:	4313      	orrs	r3, r2
 800a974:	604b      	str	r3, [r1, #4]
 800a976:	e01a      	b.n	800a9ae <HAL_RCC_OscConfig+0x2ae>
 800a978:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a97c:	4b97      	ldr	r3, [pc, #604]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a96      	ldr	r2, [pc, #600]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800a982:	f023 0301 	bic.w	r3, r3, #1
 800a986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a988:	f7f8 fb22 	bl	8002fd0 <HAL_GetTick>
 800a98c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a98e:	e008      	b.n	800a9a2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a990:	f7f8 fb1e 	bl	8002fd0 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e2d7      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a9a2:	4b8e      	ldr	r3, [pc, #568]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0304 	and.w	r3, r3, #4
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1f0      	bne.n	800a990 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0310 	and.w	r3, r3, #16
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d06a      	beq.n	800aa90 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9ba:	4b88      	ldr	r3, [pc, #544]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9c4:	4b85      	ldr	r3, [pc, #532]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800a9c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	2b08      	cmp	r3, #8
 800a9ce:	d007      	beq.n	800a9e0 <HAL_RCC_OscConfig+0x2e0>
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	2b18      	cmp	r3, #24
 800a9d4:	d11b      	bne.n	800aa0e <HAL_RCC_OscConfig+0x30e>
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f003 0303 	and.w	r3, r3, #3
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d116      	bne.n	800aa0e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9e0:	4b7e      	ldr	r3, [pc, #504]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d005      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x2f8>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	69db      	ldr	r3, [r3, #28]
 800a9f0:	2b80      	cmp	r3, #128	@ 0x80
 800a9f2:	d001      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e2ac      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9f8:	4b78      	ldr	r3, [pc, #480]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	061b      	lsls	r3, r3, #24
 800aa06:	4975      	ldr	r1, [pc, #468]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa0c:	e040      	b.n	800aa90 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d023      	beq.n	800aa5e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aa16:	4b71      	ldr	r3, [pc, #452]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a70      	ldr	r2, [pc, #448]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aa1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa22:	f7f8 fad5 	bl	8002fd0 <HAL_GetTick>
 800aa26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa28:	e008      	b.n	800aa3c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aa2a:	f7f8 fad1 	bl	8002fd0 <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d901      	bls.n	800aa3c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e28a      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa3c:	4b67      	ldr	r3, [pc, #412]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0f0      	beq.n	800aa2a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa48:	4b64      	ldr	r3, [pc, #400]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a1b      	ldr	r3, [r3, #32]
 800aa54:	061b      	lsls	r3, r3, #24
 800aa56:	4961      	ldr	r1, [pc, #388]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	60cb      	str	r3, [r1, #12]
 800aa5c:	e018      	b.n	800aa90 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aa5e:	4b5f      	ldr	r3, [pc, #380]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a5e      	ldr	r2, [pc, #376]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aa64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa6a:	f7f8 fab1 	bl	8002fd0 <HAL_GetTick>
 800aa6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa70:	e008      	b.n	800aa84 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aa72:	f7f8 faad 	bl	8002fd0 <HAL_GetTick>
 800aa76:	4602      	mov	r2, r0
 800aa78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d901      	bls.n	800aa84 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e266      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa84:	4b55      	ldr	r3, [pc, #340]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1f0      	bne.n	800aa72 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 0308 	and.w	r3, r3, #8
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d036      	beq.n	800ab0a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d019      	beq.n	800aad8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aaa4:	4b4d      	ldr	r3, [pc, #308]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aaa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaa8:	4a4c      	ldr	r2, [pc, #304]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aaaa:	f043 0301 	orr.w	r3, r3, #1
 800aaae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aab0:	f7f8 fa8e 	bl	8002fd0 <HAL_GetTick>
 800aab4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aab6:	e008      	b.n	800aaca <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aab8:	f7f8 fa8a 	bl	8002fd0 <HAL_GetTick>
 800aabc:	4602      	mov	r2, r0
 800aabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d901      	bls.n	800aaca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e243      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aaca:	4b44      	ldr	r3, [pc, #272]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aacc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aace:	f003 0302 	and.w	r3, r3, #2
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d0f0      	beq.n	800aab8 <HAL_RCC_OscConfig+0x3b8>
 800aad6:	e018      	b.n	800ab0a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aad8:	4b40      	ldr	r3, [pc, #256]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aadc:	4a3f      	ldr	r2, [pc, #252]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800aade:	f023 0301 	bic.w	r3, r3, #1
 800aae2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aae4:	f7f8 fa74 	bl	8002fd0 <HAL_GetTick>
 800aae8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aaea:	e008      	b.n	800aafe <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaec:	f7f8 fa70 	bl	8002fd0 <HAL_GetTick>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d901      	bls.n	800aafe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e229      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aafe:	4b37      	ldr	r3, [pc, #220]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800ab00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1f0      	bne.n	800aaec <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0320 	and.w	r3, r3, #32
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d036      	beq.n	800ab84 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d019      	beq.n	800ab52 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ab1e:	4b2f      	ldr	r3, [pc, #188]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a2e      	ldr	r2, [pc, #184]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800ab24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ab28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab2a:	f7f8 fa51 	bl	8002fd0 <HAL_GetTick>
 800ab2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ab30:	e008      	b.n	800ab44 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab32:	f7f8 fa4d 	bl	8002fd0 <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d901      	bls.n	800ab44 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800ab40:	2303      	movs	r3, #3
 800ab42:	e206      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ab44:	4b25      	ldr	r3, [pc, #148]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d0f0      	beq.n	800ab32 <HAL_RCC_OscConfig+0x432>
 800ab50:	e018      	b.n	800ab84 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ab52:	4b22      	ldr	r3, [pc, #136]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a21      	ldr	r2, [pc, #132]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800ab58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab5e:	f7f8 fa37 	bl	8002fd0 <HAL_GetTick>
 800ab62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab64:	e008      	b.n	800ab78 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab66:	f7f8 fa33 	bl	8002fd0 <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d901      	bls.n	800ab78 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e1ec      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab78:	4b18      	ldr	r3, [pc, #96]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1f0      	bne.n	800ab66 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 80af 	beq.w	800acf0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab92:	4b13      	ldr	r3, [pc, #76]	@ (800abe0 <HAL_RCC_OscConfig+0x4e0>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a12      	ldr	r2, [pc, #72]	@ (800abe0 <HAL_RCC_OscConfig+0x4e0>)
 800ab98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab9e:	f7f8 fa17 	bl	8002fd0 <HAL_GetTick>
 800aba2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aba4:	e008      	b.n	800abb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aba6:	f7f8 fa13 	bl	8002fd0 <HAL_GetTick>
 800abaa:	4602      	mov	r2, r0
 800abac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	2b64      	cmp	r3, #100	@ 0x64
 800abb2:	d901      	bls.n	800abb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e1cc      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abb8:	4b09      	ldr	r3, [pc, #36]	@ (800abe0 <HAL_RCC_OscConfig+0x4e0>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d0f0      	beq.n	800aba6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d10b      	bne.n	800abe4 <HAL_RCC_OscConfig+0x4e4>
 800abcc:	4b03      	ldr	r3, [pc, #12]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800abce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abd0:	4a02      	ldr	r2, [pc, #8]	@ (800abdc <HAL_RCC_OscConfig+0x4dc>)
 800abd2:	f043 0301 	orr.w	r3, r3, #1
 800abd6:	6713      	str	r3, [r2, #112]	@ 0x70
 800abd8:	e05b      	b.n	800ac92 <HAL_RCC_OscConfig+0x592>
 800abda:	bf00      	nop
 800abdc:	58024400 	.word	0x58024400
 800abe0:	58024800 	.word	0x58024800
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d112      	bne.n	800ac12 <HAL_RCC_OscConfig+0x512>
 800abec:	4b9d      	ldr	r3, [pc, #628]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800abee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abf0:	4a9c      	ldr	r2, [pc, #624]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800abf2:	f023 0301 	bic.w	r3, r3, #1
 800abf6:	6713      	str	r3, [r2, #112]	@ 0x70
 800abf8:	4b9a      	ldr	r3, [pc, #616]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800abfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abfc:	4a99      	ldr	r2, [pc, #612]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800abfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac02:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac04:	4b97      	ldr	r3, [pc, #604]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac08:	4a96      	ldr	r2, [pc, #600]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac0a:	f023 0304 	bic.w	r3, r3, #4
 800ac0e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac10:	e03f      	b.n	800ac92 <HAL_RCC_OscConfig+0x592>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	2b05      	cmp	r3, #5
 800ac18:	d112      	bne.n	800ac40 <HAL_RCC_OscConfig+0x540>
 800ac1a:	4b92      	ldr	r3, [pc, #584]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac1e:	4a91      	ldr	r2, [pc, #580]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac20:	f043 0304 	orr.w	r3, r3, #4
 800ac24:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac26:	4b8f      	ldr	r3, [pc, #572]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac2a:	4a8e      	ldr	r2, [pc, #568]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac30:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac32:	4b8c      	ldr	r3, [pc, #560]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac36:	4a8b      	ldr	r2, [pc, #556]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac38:	f043 0301 	orr.w	r3, r3, #1
 800ac3c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac3e:	e028      	b.n	800ac92 <HAL_RCC_OscConfig+0x592>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	2b85      	cmp	r3, #133	@ 0x85
 800ac46:	d112      	bne.n	800ac6e <HAL_RCC_OscConfig+0x56e>
 800ac48:	4b86      	ldr	r3, [pc, #536]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac4c:	4a85      	ldr	r2, [pc, #532]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac4e:	f043 0304 	orr.w	r3, r3, #4
 800ac52:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac54:	4b83      	ldr	r3, [pc, #524]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac58:	4a82      	ldr	r2, [pc, #520]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac60:	4b80      	ldr	r3, [pc, #512]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac64:	4a7f      	ldr	r2, [pc, #508]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac66:	f043 0301 	orr.w	r3, r3, #1
 800ac6a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac6c:	e011      	b.n	800ac92 <HAL_RCC_OscConfig+0x592>
 800ac6e:	4b7d      	ldr	r3, [pc, #500]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac72:	4a7c      	ldr	r2, [pc, #496]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac74:	f023 0301 	bic.w	r3, r3, #1
 800ac78:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac7a:	4b7a      	ldr	r3, [pc, #488]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac7e:	4a79      	ldr	r2, [pc, #484]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac80:	f023 0304 	bic.w	r3, r3, #4
 800ac84:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac86:	4b77      	ldr	r3, [pc, #476]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac8a:	4a76      	ldr	r2, [pc, #472]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ac8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac90:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d015      	beq.n	800acc6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac9a:	f7f8 f999 	bl	8002fd0 <HAL_GetTick>
 800ac9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aca0:	e00a      	b.n	800acb8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aca2:	f7f8 f995 	bl	8002fd0 <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d901      	bls.n	800acb8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e14c      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acb8:	4b6a      	ldr	r3, [pc, #424]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800acba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acbc:	f003 0302 	and.w	r3, r3, #2
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d0ee      	beq.n	800aca2 <HAL_RCC_OscConfig+0x5a2>
 800acc4:	e014      	b.n	800acf0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acc6:	f7f8 f983 	bl	8002fd0 <HAL_GetTick>
 800acca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800accc:	e00a      	b.n	800ace4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acce:	f7f8 f97f 	bl	8002fd0 <HAL_GetTick>
 800acd2:	4602      	mov	r2, r0
 800acd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acdc:	4293      	cmp	r3, r2
 800acde:	d901      	bls.n	800ace4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ace0:	2303      	movs	r3, #3
 800ace2:	e136      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ace4:	4b5f      	ldr	r3, [pc, #380]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ace6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ace8:	f003 0302 	and.w	r3, r3, #2
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1ee      	bne.n	800acce <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 812b 	beq.w	800af50 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800acfa:	4b5a      	ldr	r3, [pc, #360]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad02:	2b18      	cmp	r3, #24
 800ad04:	f000 80bb 	beq.w	800ae7e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	f040 8095 	bne.w	800ae3c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad12:	4b54      	ldr	r3, [pc, #336]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a53      	ldr	r2, [pc, #332]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ad18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad1e:	f7f8 f957 	bl	8002fd0 <HAL_GetTick>
 800ad22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad24:	e008      	b.n	800ad38 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad26:	f7f8 f953 	bl	8002fd0 <HAL_GetTick>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d901      	bls.n	800ad38 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e10c      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad38:	4b4a      	ldr	r3, [pc, #296]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1f0      	bne.n	800ad26 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad44:	4b47      	ldr	r3, [pc, #284]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ad46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad48:	4b47      	ldr	r3, [pc, #284]	@ (800ae68 <HAL_RCC_OscConfig+0x768>)
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ad54:	0112      	lsls	r2, r2, #4
 800ad56:	430a      	orrs	r2, r1
 800ad58:	4942      	ldr	r1, [pc, #264]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	628b      	str	r3, [r1, #40]	@ 0x28
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad62:	3b01      	subs	r3, #1
 800ad64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	025b      	lsls	r3, r3, #9
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	431a      	orrs	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	041b      	lsls	r3, r3, #16
 800ad7c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ad80:	431a      	orrs	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad86:	3b01      	subs	r3, #1
 800ad88:	061b      	lsls	r3, r3, #24
 800ad8a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ad8e:	4935      	ldr	r1, [pc, #212]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ad94:	4b33      	ldr	r3, [pc, #204]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ad96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad98:	4a32      	ldr	r2, [pc, #200]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ad9a:	f023 0301 	bic.w	r3, r3, #1
 800ad9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ada0:	4b30      	ldr	r3, [pc, #192]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ada2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ada4:	4b31      	ldr	r3, [pc, #196]	@ (800ae6c <HAL_RCC_OscConfig+0x76c>)
 800ada6:	4013      	ands	r3, r2
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800adac:	00d2      	lsls	r2, r2, #3
 800adae:	492d      	ldr	r1, [pc, #180]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800adb4:	4b2b      	ldr	r3, [pc, #172]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800adb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb8:	f023 020c 	bic.w	r2, r3, #12
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adc0:	4928      	ldr	r1, [pc, #160]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800adc2:	4313      	orrs	r3, r2
 800adc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800adc6:	4b27      	ldr	r3, [pc, #156]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800adc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adca:	f023 0202 	bic.w	r2, r3, #2
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800add2:	4924      	ldr	r1, [pc, #144]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800add4:	4313      	orrs	r3, r2
 800add6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800add8:	4b22      	ldr	r3, [pc, #136]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800adda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800addc:	4a21      	ldr	r2, [pc, #132]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800adde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ade2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ade4:	4b1f      	ldr	r3, [pc, #124]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ade6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ade8:	4a1e      	ldr	r2, [pc, #120]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800adea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800adf0:	4b1c      	ldr	r3, [pc, #112]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800adf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf4:	4a1b      	ldr	r2, [pc, #108]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800adf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800adfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800adfc:	4b19      	ldr	r3, [pc, #100]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800adfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae00:	4a18      	ldr	r2, [pc, #96]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ae02:	f043 0301 	orr.w	r3, r3, #1
 800ae06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae08:	4b16      	ldr	r3, [pc, #88]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a15      	ldr	r2, [pc, #84]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ae0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ae12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae14:	f7f8 f8dc 	bl	8002fd0 <HAL_GetTick>
 800ae18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae1a:	e008      	b.n	800ae2e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae1c:	f7f8 f8d8 	bl	8002fd0 <HAL_GetTick>
 800ae20:	4602      	mov	r2, r0
 800ae22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d901      	bls.n	800ae2e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e091      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0f0      	beq.n	800ae1c <HAL_RCC_OscConfig+0x71c>
 800ae3a:	e089      	b.n	800af50 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae3c:	4b09      	ldr	r3, [pc, #36]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a08      	ldr	r2, [pc, #32]	@ (800ae64 <HAL_RCC_OscConfig+0x764>)
 800ae42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae48:	f7f8 f8c2 	bl	8002fd0 <HAL_GetTick>
 800ae4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae4e:	e00f      	b.n	800ae70 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae50:	f7f8 f8be 	bl	8002fd0 <HAL_GetTick>
 800ae54:	4602      	mov	r2, r0
 800ae56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d908      	bls.n	800ae70 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	e077      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
 800ae62:	bf00      	nop
 800ae64:	58024400 	.word	0x58024400
 800ae68:	fffffc0c 	.word	0xfffffc0c
 800ae6c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae70:	4b3a      	ldr	r3, [pc, #232]	@ (800af5c <HAL_RCC_OscConfig+0x85c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e9      	bne.n	800ae50 <HAL_RCC_OscConfig+0x750>
 800ae7c:	e068      	b.n	800af50 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ae7e:	4b37      	ldr	r3, [pc, #220]	@ (800af5c <HAL_RCC_OscConfig+0x85c>)
 800ae80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae82:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ae84:	4b35      	ldr	r3, [pc, #212]	@ (800af5c <HAL_RCC_OscConfig+0x85c>)
 800ae86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae88:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d031      	beq.n	800aef6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	f003 0203 	and.w	r2, r3, #3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d12a      	bne.n	800aef6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	091b      	lsrs	r3, r3, #4
 800aea4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d122      	bne.n	800aef6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeba:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d11a      	bne.n	800aef6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	0a5b      	lsrs	r3, r3, #9
 800aec4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aecc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aece:	429a      	cmp	r2, r3
 800aed0:	d111      	bne.n	800aef6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	0c1b      	lsrs	r3, r3, #16
 800aed6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aede:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d108      	bne.n	800aef6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	0e1b      	lsrs	r3, r3, #24
 800aee8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aef0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d001      	beq.n	800aefa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e02b      	b.n	800af52 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800aefa:	4b18      	ldr	r3, [pc, #96]	@ (800af5c <HAL_RCC_OscConfig+0x85c>)
 800aefc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aefe:	08db      	lsrs	r3, r3, #3
 800af00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af04:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d01f      	beq.n	800af50 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800af10:	4b12      	ldr	r3, [pc, #72]	@ (800af5c <HAL_RCC_OscConfig+0x85c>)
 800af12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af14:	4a11      	ldr	r2, [pc, #68]	@ (800af5c <HAL_RCC_OscConfig+0x85c>)
 800af16:	f023 0301 	bic.w	r3, r3, #1
 800af1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800af1c:	f7f8 f858 	bl	8002fd0 <HAL_GetTick>
 800af20:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800af22:	bf00      	nop
 800af24:	f7f8 f854 	bl	8002fd0 <HAL_GetTick>
 800af28:	4602      	mov	r2, r0
 800af2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d0f9      	beq.n	800af24 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af30:	4b0a      	ldr	r3, [pc, #40]	@ (800af5c <HAL_RCC_OscConfig+0x85c>)
 800af32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af34:	4b0a      	ldr	r3, [pc, #40]	@ (800af60 <HAL_RCC_OscConfig+0x860>)
 800af36:	4013      	ands	r3, r2
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800af3c:	00d2      	lsls	r2, r2, #3
 800af3e:	4907      	ldr	r1, [pc, #28]	@ (800af5c <HAL_RCC_OscConfig+0x85c>)
 800af40:	4313      	orrs	r3, r2
 800af42:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800af44:	4b05      	ldr	r3, [pc, #20]	@ (800af5c <HAL_RCC_OscConfig+0x85c>)
 800af46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af48:	4a04      	ldr	r2, [pc, #16]	@ (800af5c <HAL_RCC_OscConfig+0x85c>)
 800af4a:	f043 0301 	orr.w	r3, r3, #1
 800af4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3730      	adds	r7, #48	@ 0x30
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	58024400 	.word	0x58024400
 800af60:	ffff0007 	.word	0xffff0007

0800af64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	e19c      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af78:	4b8a      	ldr	r3, [pc, #552]	@ (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 030f 	and.w	r3, r3, #15
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	429a      	cmp	r2, r3
 800af84:	d910      	bls.n	800afa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af86:	4b87      	ldr	r3, [pc, #540]	@ (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f023 020f 	bic.w	r2, r3, #15
 800af8e:	4985      	ldr	r1, [pc, #532]	@ (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	4313      	orrs	r3, r2
 800af94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af96:	4b83      	ldr	r3, [pc, #524]	@ (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 030f 	and.w	r3, r3, #15
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d001      	beq.n	800afa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e184      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0304 	and.w	r3, r3, #4
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d010      	beq.n	800afd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	691a      	ldr	r2, [r3, #16]
 800afb8:	4b7b      	ldr	r3, [pc, #492]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d908      	bls.n	800afd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800afc4:	4b78      	ldr	r3, [pc, #480]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	4975      	ldr	r1, [pc, #468]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800afd2:	4313      	orrs	r3, r2
 800afd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0308 	and.w	r3, r3, #8
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d010      	beq.n	800b004 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	695a      	ldr	r2, [r3, #20]
 800afe6:	4b70      	ldr	r3, [pc, #448]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800afe8:	69db      	ldr	r3, [r3, #28]
 800afea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800afee:	429a      	cmp	r2, r3
 800aff0:	d908      	bls.n	800b004 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aff2:	4b6d      	ldr	r3, [pc, #436]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	496a      	ldr	r1, [pc, #424]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b000:	4313      	orrs	r3, r2
 800b002:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0310 	and.w	r3, r3, #16
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d010      	beq.n	800b032 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	699a      	ldr	r2, [r3, #24]
 800b014:	4b64      	ldr	r3, [pc, #400]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d908      	bls.n	800b032 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b020:	4b61      	ldr	r3, [pc, #388]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b022:	69db      	ldr	r3, [r3, #28]
 800b024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	495e      	ldr	r1, [pc, #376]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0320 	and.w	r3, r3, #32
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d010      	beq.n	800b060 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	69da      	ldr	r2, [r3, #28]
 800b042:	4b59      	ldr	r3, [pc, #356]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d908      	bls.n	800b060 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b04e:	4b56      	ldr	r3, [pc, #344]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	4953      	ldr	r1, [pc, #332]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b05c:	4313      	orrs	r3, r2
 800b05e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 0302 	and.w	r3, r3, #2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d010      	beq.n	800b08e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68da      	ldr	r2, [r3, #12]
 800b070:	4b4d      	ldr	r3, [pc, #308]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	f003 030f 	and.w	r3, r3, #15
 800b078:	429a      	cmp	r2, r3
 800b07a:	d908      	bls.n	800b08e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b07c:	4b4a      	ldr	r3, [pc, #296]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	f023 020f 	bic.w	r2, r3, #15
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	4947      	ldr	r1, [pc, #284]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d055      	beq.n	800b146 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b09a:	4b43      	ldr	r3, [pc, #268]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	4940      	ldr	r1, [pc, #256]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d107      	bne.n	800b0c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b0b4:	4b3c      	ldr	r3, [pc, #240]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d121      	bne.n	800b104 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e0f6      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	d107      	bne.n	800b0dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0cc:	4b36      	ldr	r3, [pc, #216]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d115      	bne.n	800b104 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e0ea      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d107      	bne.n	800b0f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b0e4:	4b30      	ldr	r3, [pc, #192]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d109      	bne.n	800b104 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e0de      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0f4:	4b2c      	ldr	r3, [pc, #176]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	e0d6      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b104:	4b28      	ldr	r3, [pc, #160]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	f023 0207 	bic.w	r2, r3, #7
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	4925      	ldr	r1, [pc, #148]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b112:	4313      	orrs	r3, r2
 800b114:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b116:	f7f7 ff5b 	bl	8002fd0 <HAL_GetTick>
 800b11a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b11c:	e00a      	b.n	800b134 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b11e:	f7f7 ff57 	bl	8002fd0 <HAL_GetTick>
 800b122:	4602      	mov	r2, r0
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d901      	bls.n	800b134 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b130:	2303      	movs	r3, #3
 800b132:	e0be      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b134:	4b1c      	ldr	r3, [pc, #112]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	429a      	cmp	r2, r3
 800b144:	d1eb      	bne.n	800b11e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0302 	and.w	r3, r3, #2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d010      	beq.n	800b174 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	68da      	ldr	r2, [r3, #12]
 800b156:	4b14      	ldr	r3, [pc, #80]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	f003 030f 	and.w	r3, r3, #15
 800b15e:	429a      	cmp	r2, r3
 800b160:	d208      	bcs.n	800b174 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b162:	4b11      	ldr	r3, [pc, #68]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b164:	699b      	ldr	r3, [r3, #24]
 800b166:	f023 020f 	bic.w	r2, r3, #15
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	490e      	ldr	r1, [pc, #56]	@ (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b170:	4313      	orrs	r3, r2
 800b172:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b174:	4b0b      	ldr	r3, [pc, #44]	@ (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 030f 	and.w	r3, r3, #15
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d214      	bcs.n	800b1ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b182:	4b08      	ldr	r3, [pc, #32]	@ (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f023 020f 	bic.w	r2, r3, #15
 800b18a:	4906      	ldr	r1, [pc, #24]	@ (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	4313      	orrs	r3, r2
 800b190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b192:	4b04      	ldr	r3, [pc, #16]	@ (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 030f 	and.w	r3, r3, #15
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d005      	beq.n	800b1ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e086      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
 800b1a4:	52002000 	.word	0x52002000
 800b1a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d010      	beq.n	800b1da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	691a      	ldr	r2, [r3, #16]
 800b1bc:	4b3f      	ldr	r3, [pc, #252]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d208      	bcs.n	800b1da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b1c8:	4b3c      	ldr	r3, [pc, #240]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	4939      	ldr	r1, [pc, #228]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0308 	and.w	r3, r3, #8
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d010      	beq.n	800b208 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	695a      	ldr	r2, [r3, #20]
 800b1ea:	4b34      	ldr	r3, [pc, #208]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d208      	bcs.n	800b208 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b1f6:	4b31      	ldr	r3, [pc, #196]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	695b      	ldr	r3, [r3, #20]
 800b202:	492e      	ldr	r1, [pc, #184]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b204:	4313      	orrs	r3, r2
 800b206:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0310 	and.w	r3, r3, #16
 800b210:	2b00      	cmp	r3, #0
 800b212:	d010      	beq.n	800b236 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	699a      	ldr	r2, [r3, #24]
 800b218:	4b28      	ldr	r3, [pc, #160]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b220:	429a      	cmp	r2, r3
 800b222:	d208      	bcs.n	800b236 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b224:	4b25      	ldr	r3, [pc, #148]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b226:	69db      	ldr	r3, [r3, #28]
 800b228:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	4922      	ldr	r1, [pc, #136]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b232:	4313      	orrs	r3, r2
 800b234:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f003 0320 	and.w	r3, r3, #32
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d010      	beq.n	800b264 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	69da      	ldr	r2, [r3, #28]
 800b246:	4b1d      	ldr	r3, [pc, #116]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b24e:	429a      	cmp	r2, r3
 800b250:	d208      	bcs.n	800b264 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b252:	4b1a      	ldr	r3, [pc, #104]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	4917      	ldr	r1, [pc, #92]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b260:	4313      	orrs	r3, r2
 800b262:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b264:	f000 f89e 	bl	800b3a4 <HAL_RCC_GetSysClockFreq>
 800b268:	4602      	mov	r2, r0
 800b26a:	4b14      	ldr	r3, [pc, #80]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	0a1b      	lsrs	r3, r3, #8
 800b270:	f003 030f 	and.w	r3, r3, #15
 800b274:	4912      	ldr	r1, [pc, #72]	@ (800b2c0 <HAL_RCC_ClockConfig+0x35c>)
 800b276:	5ccb      	ldrb	r3, [r1, r3]
 800b278:	f003 031f 	and.w	r3, r3, #31
 800b27c:	fa22 f303 	lsr.w	r3, r2, r3
 800b280:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b282:	4b0e      	ldr	r3, [pc, #56]	@ (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	f003 030f 	and.w	r3, r3, #15
 800b28a:	4a0d      	ldr	r2, [pc, #52]	@ (800b2c0 <HAL_RCC_ClockConfig+0x35c>)
 800b28c:	5cd3      	ldrb	r3, [r2, r3]
 800b28e:	f003 031f 	and.w	r3, r3, #31
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	fa22 f303 	lsr.w	r3, r2, r3
 800b298:	4a0a      	ldr	r2, [pc, #40]	@ (800b2c4 <HAL_RCC_ClockConfig+0x360>)
 800b29a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b29c:	4a0a      	ldr	r2, [pc, #40]	@ (800b2c8 <HAL_RCC_ClockConfig+0x364>)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b2a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b2cc <HAL_RCC_ClockConfig+0x368>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7f7 fe48 	bl	8002f3c <HAL_InitTick>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3718      	adds	r7, #24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	58024400 	.word	0x58024400
 800b2c0:	080134ac 	.word	0x080134ac
 800b2c4:	24000008 	.word	0x24000008
 800b2c8:	24000004 	.word	0x24000004
 800b2cc:	2400000c 	.word	0x2400000c

0800b2d0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08c      	sub	sp, #48	@ 0x30
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d12a      	bne.n	800b338 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b2e2:	4b2d      	ldr	r3, [pc, #180]	@ (800b398 <HAL_RCC_MCOConfig+0xc8>)
 800b2e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b2e8:	4a2b      	ldr	r2, [pc, #172]	@ (800b398 <HAL_RCC_MCOConfig+0xc8>)
 800b2ea:	f043 0301 	orr.w	r3, r3, #1
 800b2ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b2f2:	4b29      	ldr	r3, [pc, #164]	@ (800b398 <HAL_RCC_MCOConfig+0xc8>)
 800b2f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	61bb      	str	r3, [r7, #24]
 800b2fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b300:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b306:	2302      	movs	r3, #2
 800b308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b30a:	2303      	movs	r3, #3
 800b30c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b312:	2300      	movs	r3, #0
 800b314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b316:	f107 031c 	add.w	r3, r7, #28
 800b31a:	4619      	mov	r1, r3
 800b31c:	481f      	ldr	r0, [pc, #124]	@ (800b39c <HAL_RCC_MCOConfig+0xcc>)
 800b31e:	f7fc fdb9 	bl	8007e94 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b322:	4b1d      	ldr	r3, [pc, #116]	@ (800b398 <HAL_RCC_MCOConfig+0xc8>)
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800b32a:	68b9      	ldr	r1, [r7, #8]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	430b      	orrs	r3, r1
 800b330:	4919      	ldr	r1, [pc, #100]	@ (800b398 <HAL_RCC_MCOConfig+0xc8>)
 800b332:	4313      	orrs	r3, r2
 800b334:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b336:	e02a      	b.n	800b38e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b338:	4b17      	ldr	r3, [pc, #92]	@ (800b398 <HAL_RCC_MCOConfig+0xc8>)
 800b33a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b33e:	4a16      	ldr	r2, [pc, #88]	@ (800b398 <HAL_RCC_MCOConfig+0xc8>)
 800b340:	f043 0304 	orr.w	r3, r3, #4
 800b344:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b348:	4b13      	ldr	r3, [pc, #76]	@ (800b398 <HAL_RCC_MCOConfig+0xc8>)
 800b34a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b34e:	f003 0304 	and.w	r3, r3, #4
 800b352:	617b      	str	r3, [r7, #20]
 800b354:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b356:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b35a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b35c:	2302      	movs	r3, #2
 800b35e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b360:	2303      	movs	r3, #3
 800b362:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b364:	2300      	movs	r3, #0
 800b366:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b368:	2300      	movs	r3, #0
 800b36a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b36c:	f107 031c 	add.w	r3, r7, #28
 800b370:	4619      	mov	r1, r3
 800b372:	480b      	ldr	r0, [pc, #44]	@ (800b3a0 <HAL_RCC_MCOConfig+0xd0>)
 800b374:	f7fc fd8e 	bl	8007e94 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b378:	4b07      	ldr	r3, [pc, #28]	@ (800b398 <HAL_RCC_MCOConfig+0xc8>)
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	01d9      	lsls	r1, r3, #7
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	430b      	orrs	r3, r1
 800b388:	4903      	ldr	r1, [pc, #12]	@ (800b398 <HAL_RCC_MCOConfig+0xc8>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	610b      	str	r3, [r1, #16]
}
 800b38e:	bf00      	nop
 800b390:	3730      	adds	r7, #48	@ 0x30
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	58024400 	.word	0x58024400
 800b39c:	58020000 	.word	0x58020000
 800b3a0:	58020800 	.word	0x58020800

0800b3a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b089      	sub	sp, #36	@ 0x24
 800b3a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3aa:	4bb3      	ldr	r3, [pc, #716]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b3b2:	2b18      	cmp	r3, #24
 800b3b4:	f200 8155 	bhi.w	800b662 <HAL_RCC_GetSysClockFreq+0x2be>
 800b3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3be:	bf00      	nop
 800b3c0:	0800b425 	.word	0x0800b425
 800b3c4:	0800b663 	.word	0x0800b663
 800b3c8:	0800b663 	.word	0x0800b663
 800b3cc:	0800b663 	.word	0x0800b663
 800b3d0:	0800b663 	.word	0x0800b663
 800b3d4:	0800b663 	.word	0x0800b663
 800b3d8:	0800b663 	.word	0x0800b663
 800b3dc:	0800b663 	.word	0x0800b663
 800b3e0:	0800b44b 	.word	0x0800b44b
 800b3e4:	0800b663 	.word	0x0800b663
 800b3e8:	0800b663 	.word	0x0800b663
 800b3ec:	0800b663 	.word	0x0800b663
 800b3f0:	0800b663 	.word	0x0800b663
 800b3f4:	0800b663 	.word	0x0800b663
 800b3f8:	0800b663 	.word	0x0800b663
 800b3fc:	0800b663 	.word	0x0800b663
 800b400:	0800b451 	.word	0x0800b451
 800b404:	0800b663 	.word	0x0800b663
 800b408:	0800b663 	.word	0x0800b663
 800b40c:	0800b663 	.word	0x0800b663
 800b410:	0800b663 	.word	0x0800b663
 800b414:	0800b663 	.word	0x0800b663
 800b418:	0800b663 	.word	0x0800b663
 800b41c:	0800b663 	.word	0x0800b663
 800b420:	0800b457 	.word	0x0800b457
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b424:	4b94      	ldr	r3, [pc, #592]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 0320 	and.w	r3, r3, #32
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d009      	beq.n	800b444 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b430:	4b91      	ldr	r3, [pc, #580]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	08db      	lsrs	r3, r3, #3
 800b436:	f003 0303 	and.w	r3, r3, #3
 800b43a:	4a90      	ldr	r2, [pc, #576]	@ (800b67c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b43c:	fa22 f303 	lsr.w	r3, r2, r3
 800b440:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b442:	e111      	b.n	800b668 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b444:	4b8d      	ldr	r3, [pc, #564]	@ (800b67c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b446:	61bb      	str	r3, [r7, #24]
      break;
 800b448:	e10e      	b.n	800b668 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b44a:	4b8d      	ldr	r3, [pc, #564]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b44c:	61bb      	str	r3, [r7, #24]
      break;
 800b44e:	e10b      	b.n	800b668 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b450:	4b8c      	ldr	r3, [pc, #560]	@ (800b684 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b452:	61bb      	str	r3, [r7, #24]
      break;
 800b454:	e108      	b.n	800b668 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b456:	4b88      	ldr	r3, [pc, #544]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45a:	f003 0303 	and.w	r3, r3, #3
 800b45e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b460:	4b85      	ldr	r3, [pc, #532]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b464:	091b      	lsrs	r3, r3, #4
 800b466:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b46a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b46c:	4b82      	ldr	r3, [pc, #520]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b476:	4b80      	ldr	r3, [pc, #512]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b47a:	08db      	lsrs	r3, r3, #3
 800b47c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	fb02 f303 	mul.w	r3, r2, r3
 800b486:	ee07 3a90 	vmov	s15, r3
 800b48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 80e1 	beq.w	800b65c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	f000 8083 	beq.w	800b5a8 <HAL_RCC_GetSysClockFreq+0x204>
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	f200 80a1 	bhi.w	800b5ec <HAL_RCC_GetSysClockFreq+0x248>
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x114>
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d056      	beq.n	800b564 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b4b6:	e099      	b.n	800b5ec <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4b8:	4b6f      	ldr	r3, [pc, #444]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 0320 	and.w	r3, r3, #32
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d02d      	beq.n	800b520 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4c4:	4b6c      	ldr	r3, [pc, #432]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	08db      	lsrs	r3, r3, #3
 800b4ca:	f003 0303 	and.w	r3, r3, #3
 800b4ce:	4a6b      	ldr	r2, [pc, #428]	@ (800b67c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b4d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	ee07 3a90 	vmov	s15, r3
 800b4dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ee:	4b62      	ldr	r3, [pc, #392]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4f6:	ee07 3a90 	vmov	s15, r3
 800b4fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b502:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b688 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b50a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b50e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b51a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b51e:	e087      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	ee07 3a90 	vmov	s15, r3
 800b526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b68c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b52e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b532:	4b51      	ldr	r3, [pc, #324]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b53a:	ee07 3a90 	vmov	s15, r3
 800b53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b542:	ed97 6a02 	vldr	s12, [r7, #8]
 800b546:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b688 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b54a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b54e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b562:	e065      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	ee07 3a90 	vmov	s15, r3
 800b56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b690 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b576:	4b40      	ldr	r3, [pc, #256]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57e:	ee07 3a90 	vmov	s15, r3
 800b582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b586:	ed97 6a02 	vldr	s12, [r7, #8]
 800b58a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b688 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5a6:	e043      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	ee07 3a90 	vmov	s15, r3
 800b5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b694 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c2:	ee07 3a90 	vmov	s15, r3
 800b5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b688 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5ea:	e021      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	ee07 3a90 	vmov	s15, r3
 800b5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b690 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b606:	ee07 3a90 	vmov	s15, r3
 800b60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b60e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b612:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b688 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b61e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b62a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b62e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b630:	4b11      	ldr	r3, [pc, #68]	@ (800b678 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b634:	0a5b      	lsrs	r3, r3, #9
 800b636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b63a:	3301      	adds	r3, #1
 800b63c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	ee07 3a90 	vmov	s15, r3
 800b644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b648:	edd7 6a07 	vldr	s13, [r7, #28]
 800b64c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b654:	ee17 3a90 	vmov	r3, s15
 800b658:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b65a:	e005      	b.n	800b668 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	61bb      	str	r3, [r7, #24]
      break;
 800b660:	e002      	b.n	800b668 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b662:	4b07      	ldr	r3, [pc, #28]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b664:	61bb      	str	r3, [r7, #24]
      break;
 800b666:	bf00      	nop
  }

  return sysclockfreq;
 800b668:	69bb      	ldr	r3, [r7, #24]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3724      	adds	r7, #36	@ 0x24
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	58024400 	.word	0x58024400
 800b67c:	03d09000 	.word	0x03d09000
 800b680:	003d0900 	.word	0x003d0900
 800b684:	007a1200 	.word	0x007a1200
 800b688:	46000000 	.word	0x46000000
 800b68c:	4c742400 	.word	0x4c742400
 800b690:	4a742400 	.word	0x4a742400
 800b694:	4af42400 	.word	0x4af42400

0800b698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b69e:	f7ff fe81 	bl	800b3a4 <HAL_RCC_GetSysClockFreq>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	4b10      	ldr	r3, [pc, #64]	@ (800b6e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	0a1b      	lsrs	r3, r3, #8
 800b6aa:	f003 030f 	and.w	r3, r3, #15
 800b6ae:	490f      	ldr	r1, [pc, #60]	@ (800b6ec <HAL_RCC_GetHCLKFreq+0x54>)
 800b6b0:	5ccb      	ldrb	r3, [r1, r3]
 800b6b2:	f003 031f 	and.w	r3, r3, #31
 800b6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ba:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b6e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	f003 030f 	and.w	r3, r3, #15
 800b6c4:	4a09      	ldr	r2, [pc, #36]	@ (800b6ec <HAL_RCC_GetHCLKFreq+0x54>)
 800b6c6:	5cd3      	ldrb	r3, [r2, r3]
 800b6c8:	f003 031f 	and.w	r3, r3, #31
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d2:	4a07      	ldr	r2, [pc, #28]	@ (800b6f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6d6:	4a07      	ldr	r2, [pc, #28]	@ (800b6f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b6dc:	4b04      	ldr	r3, [pc, #16]	@ (800b6f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6de:	681b      	ldr	r3, [r3, #0]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	58024400 	.word	0x58024400
 800b6ec:	080134ac 	.word	0x080134ac
 800b6f0:	24000008 	.word	0x24000008
 800b6f4:	24000004 	.word	0x24000004

0800b6f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b6fc:	f7ff ffcc 	bl	800b698 <HAL_RCC_GetHCLKFreq>
 800b700:	4602      	mov	r2, r0
 800b702:	4b06      	ldr	r3, [pc, #24]	@ (800b71c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	091b      	lsrs	r3, r3, #4
 800b708:	f003 0307 	and.w	r3, r3, #7
 800b70c:	4904      	ldr	r1, [pc, #16]	@ (800b720 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b70e:	5ccb      	ldrb	r3, [r1, r3]
 800b710:	f003 031f 	and.w	r3, r3, #31
 800b714:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b718:	4618      	mov	r0, r3
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	58024400 	.word	0x58024400
 800b720:	080134ac 	.word	0x080134ac

0800b724 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b728:	b0c8      	sub	sp, #288	@ 0x120
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b730:	2300      	movs	r3, #0
 800b732:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b736:	2300      	movs	r3, #0
 800b738:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b748:	2500      	movs	r5, #0
 800b74a:	ea54 0305 	orrs.w	r3, r4, r5
 800b74e:	d049      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b756:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b75a:	d02f      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b75c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b760:	d828      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b766:	d01a      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b768:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b76c:	d822      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d003      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b776:	d007      	beq.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b778:	e01c      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b77a:	4ba7      	ldr	r3, [pc, #668]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b77e:	4aa6      	ldr	r2, [pc, #664]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b784:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b786:	e01a      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b78c:	3308      	adds	r3, #8
 800b78e:	2102      	movs	r1, #2
 800b790:	4618      	mov	r0, r3
 800b792:	f002 fa6d 	bl	800dc70 <RCCEx_PLL2_Config>
 800b796:	4603      	mov	r3, r0
 800b798:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b79c:	e00f      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b79e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a2:	3328      	adds	r3, #40	@ 0x28
 800b7a4:	2102      	movs	r1, #2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f002 fb14 	bl	800ddd4 <RCCEx_PLL3_Config>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b7b2:	e004      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b7ba:	e000      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b7bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10a      	bne.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b7c6:	4b94      	ldr	r3, [pc, #592]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b7ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7d4:	4a90      	ldr	r2, [pc, #576]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7d6:	430b      	orrs	r3, r1
 800b7d8:	6513      	str	r3, [r2, #80]	@ 0x50
 800b7da:	e003      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b7f0:	f04f 0900 	mov.w	r9, #0
 800b7f4:	ea58 0309 	orrs.w	r3, r8, r9
 800b7f8:	d047      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b7fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b800:	2b04      	cmp	r3, #4
 800b802:	d82a      	bhi.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b804:	a201      	add	r2, pc, #4	@ (adr r2, 800b80c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80a:	bf00      	nop
 800b80c:	0800b821 	.word	0x0800b821
 800b810:	0800b82f 	.word	0x0800b82f
 800b814:	0800b845 	.word	0x0800b845
 800b818:	0800b863 	.word	0x0800b863
 800b81c:	0800b863 	.word	0x0800b863
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b820:	4b7d      	ldr	r3, [pc, #500]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b824:	4a7c      	ldr	r2, [pc, #496]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b82a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b82c:	e01a      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b82e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b832:	3308      	adds	r3, #8
 800b834:	2100      	movs	r1, #0
 800b836:	4618      	mov	r0, r3
 800b838:	f002 fa1a 	bl	800dc70 <RCCEx_PLL2_Config>
 800b83c:	4603      	mov	r3, r0
 800b83e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b842:	e00f      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b848:	3328      	adds	r3, #40	@ 0x28
 800b84a:	2100      	movs	r1, #0
 800b84c:	4618      	mov	r0, r3
 800b84e:	f002 fac1 	bl	800ddd4 <RCCEx_PLL3_Config>
 800b852:	4603      	mov	r3, r0
 800b854:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b858:	e004      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b860:	e000      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b862:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b864:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10a      	bne.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b86c:	4b6a      	ldr	r3, [pc, #424]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b86e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b870:	f023 0107 	bic.w	r1, r3, #7
 800b874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b87a:	4a67      	ldr	r2, [pc, #412]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b87c:	430b      	orrs	r3, r1
 800b87e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b880:	e003      	b.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b882:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b886:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b88a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b896:	f04f 0b00 	mov.w	fp, #0
 800b89a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b89e:	d054      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b8a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b8aa:	d036      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b8ac:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b8b0:	d82f      	bhi.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b8b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8b6:	d032      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b8b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8bc:	d829      	bhi.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b8be:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8c0:	d02f      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b8c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8c4:	d825      	bhi.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b8c6:	2b80      	cmp	r3, #128	@ 0x80
 800b8c8:	d018      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b8ca:	2b80      	cmp	r3, #128	@ 0x80
 800b8cc:	d821      	bhi.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d002      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b8d2:	2b40      	cmp	r3, #64	@ 0x40
 800b8d4:	d007      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b8d6:	e01c      	b.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8d8:	4b4f      	ldr	r3, [pc, #316]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8dc:	4a4e      	ldr	r2, [pc, #312]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b8e4:	e01e      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ea:	3308      	adds	r3, #8
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f002 f9be 	bl	800dc70 <RCCEx_PLL2_Config>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b8fa:	e013      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b900:	3328      	adds	r3, #40	@ 0x28
 800b902:	2100      	movs	r1, #0
 800b904:	4618      	mov	r0, r3
 800b906:	f002 fa65 	bl	800ddd4 <RCCEx_PLL3_Config>
 800b90a:	4603      	mov	r3, r0
 800b90c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b910:	e008      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b918:	e004      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b91a:	bf00      	nop
 800b91c:	e002      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b91e:	bf00      	nop
 800b920:	e000      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b922:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b924:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b92c:	4b3a      	ldr	r3, [pc, #232]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b92e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b930:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b93a:	4a37      	ldr	r2, [pc, #220]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b93c:	430b      	orrs	r3, r1
 800b93e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b940:	e003      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b942:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b946:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b94a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b956:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b95a:	2300      	movs	r3, #0
 800b95c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b960:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b964:	460b      	mov	r3, r1
 800b966:	4313      	orrs	r3, r2
 800b968:	d05c      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b96e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b970:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b974:	d03b      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b976:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b97a:	d834      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b97c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b980:	d037      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b986:	d82e      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b988:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b98c:	d033      	beq.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b98e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b992:	d828      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b998:	d01a      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b99a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b99e:	d822      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d003      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9a8:	d007      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b9aa:	e01c      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ac:	4b1a      	ldr	r3, [pc, #104]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b0:	4a19      	ldr	r2, [pc, #100]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b9b8:	e01e      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9be:	3308      	adds	r3, #8
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f002 f954 	bl	800dc70 <RCCEx_PLL2_Config>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b9ce:	e013      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9d4:	3328      	adds	r3, #40	@ 0x28
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f002 f9fb 	bl	800ddd4 <RCCEx_PLL3_Config>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b9e4:	e008      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b9ec:	e004      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b9ee:	bf00      	nop
 800b9f0:	e002      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b9f2:	bf00      	nop
 800b9f4:	e000      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b9f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10d      	bne.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800ba00:	4b05      	ldr	r3, [pc, #20]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba04:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800ba08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba0e:	4a02      	ldr	r2, [pc, #8]	@ (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba10:	430b      	orrs	r3, r1
 800ba12:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba14:	e006      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800ba16:	bf00      	nop
 800ba18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ba24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ba30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ba34:	2300      	movs	r3, #0
 800ba36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ba3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4313      	orrs	r3, r2
 800ba42:	d03a      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ba44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba4a:	2b30      	cmp	r3, #48	@ 0x30
 800ba4c:	d01f      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800ba4e:	2b30      	cmp	r3, #48	@ 0x30
 800ba50:	d819      	bhi.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800ba52:	2b20      	cmp	r3, #32
 800ba54:	d00c      	beq.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800ba56:	2b20      	cmp	r3, #32
 800ba58:	d815      	bhi.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d019      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ba5e:	2b10      	cmp	r3, #16
 800ba60:	d111      	bne.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba62:	4bae      	ldr	r3, [pc, #696]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba66:	4aad      	ldr	r2, [pc, #692]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ba6e:	e011      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba74:	3308      	adds	r3, #8
 800ba76:	2102      	movs	r1, #2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f002 f8f9 	bl	800dc70 <RCCEx_PLL2_Config>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ba84:	e006      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ba8c:	e002      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba8e:	bf00      	nop
 800ba90:	e000      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10a      	bne.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ba9c:	4b9f      	ldr	r3, [pc, #636]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baa0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800baa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baaa:	4a9c      	ldr	r2, [pc, #624]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baac:	430b      	orrs	r3, r1
 800baae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bab0:	e003      	b.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bab6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800baba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bac6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800baca:	2300      	movs	r3, #0
 800bacc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bad0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4313      	orrs	r3, r2
 800bad8:	d051      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bae0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bae4:	d035      	beq.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800bae6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800baea:	d82e      	bhi.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800baec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800baf0:	d031      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800baf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800baf6:	d828      	bhi.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800baf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bafc:	d01a      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bafe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb02:	d822      	bhi.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bb08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb0c:	d007      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800bb0e:	e01c      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb10:	4b82      	ldr	r3, [pc, #520]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb14:	4a81      	ldr	r2, [pc, #516]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb1c:	e01c      	b.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb22:	3308      	adds	r3, #8
 800bb24:	2100      	movs	r1, #0
 800bb26:	4618      	mov	r0, r3
 800bb28:	f002 f8a2 	bl	800dc70 <RCCEx_PLL2_Config>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb32:	e011      	b.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb38:	3328      	adds	r3, #40	@ 0x28
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f002 f949 	bl	800ddd4 <RCCEx_PLL3_Config>
 800bb42:	4603      	mov	r3, r0
 800bb44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb48:	e006      	b.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bb50:	e002      	b.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bb52:	bf00      	nop
 800bb54:	e000      	b.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bb56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10a      	bne.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bb60:	4b6e      	ldr	r3, [pc, #440]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bb68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb6e:	4a6b      	ldr	r2, [pc, #428]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb70:	430b      	orrs	r3, r1
 800bb72:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb74:	e003      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bb7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bb8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bb8e:	2300      	movs	r3, #0
 800bb90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bb94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bb98:	460b      	mov	r3, r1
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	d053      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bb9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bba8:	d033      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bbaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bbae:	d82c      	bhi.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bbb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bbb4:	d02f      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bbb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bbba:	d826      	bhi.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bbbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bbc0:	d02b      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bbc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bbc6:	d820      	bhi.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bbc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbcc:	d012      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bbce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbd2:	d81a      	bhi.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d022      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bbd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbdc:	d115      	bne.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	2101      	movs	r1, #1
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f002 f842 	bl	800dc70 <RCCEx_PLL2_Config>
 800bbec:	4603      	mov	r3, r0
 800bbee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bbf2:	e015      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbf8:	3328      	adds	r3, #40	@ 0x28
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f002 f8e9 	bl	800ddd4 <RCCEx_PLL3_Config>
 800bc02:	4603      	mov	r3, r0
 800bc04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc08:	e00a      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc10:	e006      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bc12:	bf00      	nop
 800bc14:	e004      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bc16:	bf00      	nop
 800bc18:	e002      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bc1a:	bf00      	nop
 800bc1c:	e000      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bc1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bc28:	4b3c      	ldr	r3, [pc, #240]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bc30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc36:	4a39      	ldr	r2, [pc, #228]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc38:	430b      	orrs	r3, r1
 800bc3a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bc3c:	e003      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bc46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bc52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bc56:	2300      	movs	r3, #0
 800bc58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bc5c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bc60:	460b      	mov	r3, r1
 800bc62:	4313      	orrs	r3, r2
 800bc64:	d060      	beq.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bc66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bc6e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bc72:	d039      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bc74:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bc78:	d832      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc7e:	d035      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bc80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc84:	d82c      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc8a:	d031      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bc8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc90:	d826      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bc96:	d02d      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bc98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bc9c:	d820      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bca2:	d012      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bca8:	d81a      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d024      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bcae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bcb2:	d115      	bne.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcb8:	3308      	adds	r3, #8
 800bcba:	2101      	movs	r1, #1
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 ffd7 	bl	800dc70 <RCCEx_PLL2_Config>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bcc8:	e017      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcce:	3328      	adds	r3, #40	@ 0x28
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f002 f87e 	bl	800ddd4 <RCCEx_PLL3_Config>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bcde:	e00c      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bce6:	e008      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bce8:	bf00      	nop
 800bcea:	e006      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bcec:	bf00      	nop
 800bcee:	e004      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bcf0:	bf00      	nop
 800bcf2:	e002      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bcf4:	bf00      	nop
 800bcf6:	e000      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bcf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10e      	bne.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bd02:	4b06      	ldr	r3, [pc, #24]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd06:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bd0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bd12:	4a02      	ldr	r2, [pc, #8]	@ (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd14:	430b      	orrs	r3, r1
 800bd16:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd18:	e006      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bd1a:	bf00      	nop
 800bd1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bd34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bd3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bd42:	460b      	mov	r3, r1
 800bd44:	4313      	orrs	r3, r2
 800bd46:	d037      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bd48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd52:	d00e      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bd54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd58:	d816      	bhi.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d018      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bd5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd62:	d111      	bne.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd64:	4bc4      	ldr	r3, [pc, #784]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd68:	4ac3      	ldr	r2, [pc, #780]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bd70:	e00f      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd76:	3308      	adds	r3, #8
 800bd78:	2101      	movs	r1, #1
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f001 ff78 	bl	800dc70 <RCCEx_PLL2_Config>
 800bd80:	4603      	mov	r3, r0
 800bd82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bd86:	e004      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bd8e:	e000      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bd90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10a      	bne.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd9a:	4bb7      	ldr	r3, [pc, #732]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bda2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bda6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bda8:	4ab3      	ldr	r2, [pc, #716]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdaa:	430b      	orrs	r3, r1
 800bdac:	6513      	str	r3, [r2, #80]	@ 0x50
 800bdae:	e003      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bdb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bdc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bdc8:	2300      	movs	r3, #0
 800bdca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bdce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	d039      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bdd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	d81c      	bhi.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bde2:	a201      	add	r2, pc, #4	@ (adr r2, 800bde8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde8:	0800be25 	.word	0x0800be25
 800bdec:	0800bdf9 	.word	0x0800bdf9
 800bdf0:	0800be07 	.word	0x0800be07
 800bdf4:	0800be25 	.word	0x0800be25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdf8:	4b9f      	ldr	r3, [pc, #636]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdfc:	4a9e      	ldr	r2, [pc, #632]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be04:	e00f      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be0a:	3308      	adds	r3, #8
 800be0c:	2102      	movs	r1, #2
 800be0e:	4618      	mov	r0, r3
 800be10:	f001 ff2e 	bl	800dc70 <RCCEx_PLL2_Config>
 800be14:	4603      	mov	r3, r0
 800be16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be1a:	e004      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800be22:	e000      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800be24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10a      	bne.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800be2e:	4b92      	ldr	r3, [pc, #584]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be32:	f023 0103 	bic.w	r1, r3, #3
 800be36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be3c:	4a8e      	ldr	r2, [pc, #568]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be3e:	430b      	orrs	r3, r1
 800be40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800be42:	e003      	b.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800be58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be5c:	2300      	movs	r3, #0
 800be5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800be62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800be66:	460b      	mov	r3, r1
 800be68:	4313      	orrs	r3, r2
 800be6a:	f000 8099 	beq.w	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be6e:	4b83      	ldr	r3, [pc, #524]	@ (800c07c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a82      	ldr	r2, [pc, #520]	@ (800c07c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be7a:	f7f7 f8a9 	bl	8002fd0 <HAL_GetTick>
 800be7e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be82:	e00b      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be84:	f7f7 f8a4 	bl	8002fd0 <HAL_GetTick>
 800be88:	4602      	mov	r2, r0
 800be8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	2b64      	cmp	r3, #100	@ 0x64
 800be92:	d903      	bls.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800be94:	2303      	movs	r3, #3
 800be96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800be9a:	e005      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be9c:	4b77      	ldr	r3, [pc, #476]	@ (800c07c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d0ed      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bea8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800beac:	2b00      	cmp	r3, #0
 800beae:	d173      	bne.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800beb0:	4b71      	ldr	r3, [pc, #452]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800beb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bebc:	4053      	eors	r3, r2
 800bebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d015      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bec6:	4b6c      	ldr	r3, [pc, #432]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800beca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bece:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bed2:	4b69      	ldr	r3, [pc, #420]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bed6:	4a68      	ldr	r2, [pc, #416]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bedc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bede:	4b66      	ldr	r3, [pc, #408]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bee2:	4a65      	ldr	r2, [pc, #404]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bee8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800beea:	4a63      	ldr	r2, [pc, #396]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bef0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bef6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800befa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800befe:	d118      	bne.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf00:	f7f7 f866 	bl	8002fd0 <HAL_GetTick>
 800bf04:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf08:	e00d      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf0a:	f7f7 f861 	bl	8002fd0 <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bf14:	1ad2      	subs	r2, r2, r3
 800bf16:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d903      	bls.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800bf24:	e005      	b.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf26:	4b54      	ldr	r3, [pc, #336]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf2a:	f003 0302 	and.w	r3, r3, #2
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d0eb      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bf32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d129      	bne.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf4a:	d10e      	bne.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bf4c:	4b4a      	ldr	r3, [pc, #296]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bf54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf5c:	091a      	lsrs	r2, r3, #4
 800bf5e:	4b48      	ldr	r3, [pc, #288]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bf60:	4013      	ands	r3, r2
 800bf62:	4a45      	ldr	r2, [pc, #276]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf64:	430b      	orrs	r3, r1
 800bf66:	6113      	str	r3, [r2, #16]
 800bf68:	e005      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bf6a:	4b43      	ldr	r3, [pc, #268]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	4a42      	ldr	r2, [pc, #264]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bf74:	6113      	str	r3, [r2, #16]
 800bf76:	4b40      	ldr	r3, [pc, #256]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf78:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bf7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf86:	4a3c      	ldr	r2, [pc, #240]	@ (800c078 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf88:	430b      	orrs	r3, r1
 800bf8a:	6713      	str	r3, [r2, #112]	@ 0x70
 800bf8c:	e008      	b.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800bf96:	e003      	b.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bfa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	f002 0301 	and.w	r3, r2, #1
 800bfac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bfb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	f000 8090 	beq.w	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bfc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfca:	2b28      	cmp	r3, #40	@ 0x28
 800bfcc:	d870      	bhi.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bfce:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd4:	0800c0b9 	.word	0x0800c0b9
 800bfd8:	0800c0b1 	.word	0x0800c0b1
 800bfdc:	0800c0b1 	.word	0x0800c0b1
 800bfe0:	0800c0b1 	.word	0x0800c0b1
 800bfe4:	0800c0b1 	.word	0x0800c0b1
 800bfe8:	0800c0b1 	.word	0x0800c0b1
 800bfec:	0800c0b1 	.word	0x0800c0b1
 800bff0:	0800c0b1 	.word	0x0800c0b1
 800bff4:	0800c085 	.word	0x0800c085
 800bff8:	0800c0b1 	.word	0x0800c0b1
 800bffc:	0800c0b1 	.word	0x0800c0b1
 800c000:	0800c0b1 	.word	0x0800c0b1
 800c004:	0800c0b1 	.word	0x0800c0b1
 800c008:	0800c0b1 	.word	0x0800c0b1
 800c00c:	0800c0b1 	.word	0x0800c0b1
 800c010:	0800c0b1 	.word	0x0800c0b1
 800c014:	0800c09b 	.word	0x0800c09b
 800c018:	0800c0b1 	.word	0x0800c0b1
 800c01c:	0800c0b1 	.word	0x0800c0b1
 800c020:	0800c0b1 	.word	0x0800c0b1
 800c024:	0800c0b1 	.word	0x0800c0b1
 800c028:	0800c0b1 	.word	0x0800c0b1
 800c02c:	0800c0b1 	.word	0x0800c0b1
 800c030:	0800c0b1 	.word	0x0800c0b1
 800c034:	0800c0b9 	.word	0x0800c0b9
 800c038:	0800c0b1 	.word	0x0800c0b1
 800c03c:	0800c0b1 	.word	0x0800c0b1
 800c040:	0800c0b1 	.word	0x0800c0b1
 800c044:	0800c0b1 	.word	0x0800c0b1
 800c048:	0800c0b1 	.word	0x0800c0b1
 800c04c:	0800c0b1 	.word	0x0800c0b1
 800c050:	0800c0b1 	.word	0x0800c0b1
 800c054:	0800c0b9 	.word	0x0800c0b9
 800c058:	0800c0b1 	.word	0x0800c0b1
 800c05c:	0800c0b1 	.word	0x0800c0b1
 800c060:	0800c0b1 	.word	0x0800c0b1
 800c064:	0800c0b1 	.word	0x0800c0b1
 800c068:	0800c0b1 	.word	0x0800c0b1
 800c06c:	0800c0b1 	.word	0x0800c0b1
 800c070:	0800c0b1 	.word	0x0800c0b1
 800c074:	0800c0b9 	.word	0x0800c0b9
 800c078:	58024400 	.word	0x58024400
 800c07c:	58024800 	.word	0x58024800
 800c080:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c088:	3308      	adds	r3, #8
 800c08a:	2101      	movs	r1, #1
 800c08c:	4618      	mov	r0, r3
 800c08e:	f001 fdef 	bl	800dc70 <RCCEx_PLL2_Config>
 800c092:	4603      	mov	r3, r0
 800c094:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c098:	e00f      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c09e:	3328      	adds	r3, #40	@ 0x28
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f001 fe96 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c0ae:	e004      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c0b6:	e000      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c0b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10b      	bne.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c0c2:	4bc0      	ldr	r3, [pc, #768]	@ (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0c6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c0ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0d2:	4abc      	ldr	r2, [pc, #752]	@ (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0d4:	430b      	orrs	r3, r1
 800c0d6:	6553      	str	r3, [r2, #84]	@ 0x54
 800c0d8:	e003      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c0e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	f002 0302 	and.w	r3, r2, #2
 800c0ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c0f8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	4313      	orrs	r3, r2
 800c100:	d043      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c10a:	2b05      	cmp	r3, #5
 800c10c:	d824      	bhi.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c10e:	a201      	add	r2, pc, #4	@ (adr r2, 800c114 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c114:	0800c161 	.word	0x0800c161
 800c118:	0800c12d 	.word	0x0800c12d
 800c11c:	0800c143 	.word	0x0800c143
 800c120:	0800c161 	.word	0x0800c161
 800c124:	0800c161 	.word	0x0800c161
 800c128:	0800c161 	.word	0x0800c161
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c12c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c130:	3308      	adds	r3, #8
 800c132:	2101      	movs	r1, #1
 800c134:	4618      	mov	r0, r3
 800c136:	f001 fd9b 	bl	800dc70 <RCCEx_PLL2_Config>
 800c13a:	4603      	mov	r3, r0
 800c13c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c140:	e00f      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c146:	3328      	adds	r3, #40	@ 0x28
 800c148:	2101      	movs	r1, #1
 800c14a:	4618      	mov	r0, r3
 800c14c:	f001 fe42 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c150:	4603      	mov	r3, r0
 800c152:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c156:	e004      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c15e:	e000      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c162:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10b      	bne.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c16a:	4b96      	ldr	r3, [pc, #600]	@ (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c16e:	f023 0107 	bic.w	r1, r3, #7
 800c172:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c17a:	4a92      	ldr	r2, [pc, #584]	@ (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c17c:	430b      	orrs	r3, r1
 800c17e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c180:	e003      	b.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c182:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c186:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	f002 0304 	and.w	r3, r2, #4
 800c196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c19a:	2300      	movs	r3, #0
 800c19c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c1a0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	d043      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c1aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c1b2:	2b05      	cmp	r3, #5
 800c1b4:	d824      	bhi.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1bc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1bc:	0800c209 	.word	0x0800c209
 800c1c0:	0800c1d5 	.word	0x0800c1d5
 800c1c4:	0800c1eb 	.word	0x0800c1eb
 800c1c8:	0800c209 	.word	0x0800c209
 800c1cc:	0800c209 	.word	0x0800c209
 800c1d0:	0800c209 	.word	0x0800c209
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1d8:	3308      	adds	r3, #8
 800c1da:	2101      	movs	r1, #1
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f001 fd47 	bl	800dc70 <RCCEx_PLL2_Config>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c1e8:	e00f      	b.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ee:	3328      	adds	r3, #40	@ 0x28
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f001 fdee 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c1fe:	e004      	b.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c200:	2301      	movs	r3, #1
 800c202:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c206:	e000      	b.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c20a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10b      	bne.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c212:	4b6c      	ldr	r3, [pc, #432]	@ (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c216:	f023 0107 	bic.w	r1, r3, #7
 800c21a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c21e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c222:	4a68      	ldr	r2, [pc, #416]	@ (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c224:	430b      	orrs	r3, r1
 800c226:	6593      	str	r3, [r2, #88]	@ 0x58
 800c228:	e003      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c22a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c22e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23a:	f002 0320 	and.w	r3, r2, #32
 800c23e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c242:	2300      	movs	r3, #0
 800c244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c24c:	460b      	mov	r3, r1
 800c24e:	4313      	orrs	r3, r2
 800c250:	d055      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c25a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c25e:	d033      	beq.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c264:	d82c      	bhi.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c26a:	d02f      	beq.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c26c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c270:	d826      	bhi.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c272:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c276:	d02b      	beq.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c278:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c27c:	d820      	bhi.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c27e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c282:	d012      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c288:	d81a      	bhi.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d022      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c28e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c292:	d115      	bne.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c298:	3308      	adds	r3, #8
 800c29a:	2100      	movs	r1, #0
 800c29c:	4618      	mov	r0, r3
 800c29e:	f001 fce7 	bl	800dc70 <RCCEx_PLL2_Config>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c2a8:	e015      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2ae:	3328      	adds	r3, #40	@ 0x28
 800c2b0:	2102      	movs	r1, #2
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f001 fd8e 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c2be:	e00a      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c2c6:	e006      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c2c8:	bf00      	nop
 800c2ca:	e004      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c2cc:	bf00      	nop
 800c2ce:	e002      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c2d0:	bf00      	nop
 800c2d2:	e000      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10b      	bne.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c2de:	4b39      	ldr	r3, [pc, #228]	@ (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c2e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c2ee:	4a35      	ldr	r2, [pc, #212]	@ (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c2f0:	430b      	orrs	r3, r1
 800c2f2:	6553      	str	r3, [r2, #84]	@ 0x54
 800c2f4:	e003      	b.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c306:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c30a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c30e:	2300      	movs	r3, #0
 800c310:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c314:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c318:	460b      	mov	r3, r1
 800c31a:	4313      	orrs	r3, r2
 800c31c:	d058      	beq.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c31e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c326:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c32a:	d033      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c32c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c330:	d82c      	bhi.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c336:	d02f      	beq.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c33c:	d826      	bhi.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c33e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c342:	d02b      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c344:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c348:	d820      	bhi.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c34a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c34e:	d012      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c354:	d81a      	bhi.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c356:	2b00      	cmp	r3, #0
 800c358:	d022      	beq.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c35a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c35e:	d115      	bne.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c364:	3308      	adds	r3, #8
 800c366:	2100      	movs	r1, #0
 800c368:	4618      	mov	r0, r3
 800c36a:	f001 fc81 	bl	800dc70 <RCCEx_PLL2_Config>
 800c36e:	4603      	mov	r3, r0
 800c370:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c374:	e015      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c37a:	3328      	adds	r3, #40	@ 0x28
 800c37c:	2102      	movs	r1, #2
 800c37e:	4618      	mov	r0, r3
 800c380:	f001 fd28 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c384:	4603      	mov	r3, r0
 800c386:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c38a:	e00a      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c392:	e006      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c394:	bf00      	nop
 800c396:	e004      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c398:	bf00      	nop
 800c39a:	e002      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c39c:	bf00      	nop
 800c39e:	e000      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c3a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10e      	bne.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c3aa:	4b06      	ldr	r3, [pc, #24]	@ (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c3ba:	4a02      	ldr	r2, [pc, #8]	@ (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3bc:	430b      	orrs	r3, r1
 800c3be:	6593      	str	r3, [r2, #88]	@ 0x58
 800c3c0:	e006      	b.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c3c2:	bf00      	nop
 800c3c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c3dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c3e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	d055      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c3f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c3f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c3fc:	d033      	beq.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c3fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c402:	d82c      	bhi.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c408:	d02f      	beq.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c40a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c40e:	d826      	bhi.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c410:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c414:	d02b      	beq.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c416:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c41a:	d820      	bhi.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c41c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c420:	d012      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c422:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c426:	d81a      	bhi.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d022      	beq.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c42c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c430:	d115      	bne.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c436:	3308      	adds	r3, #8
 800c438:	2100      	movs	r1, #0
 800c43a:	4618      	mov	r0, r3
 800c43c:	f001 fc18 	bl	800dc70 <RCCEx_PLL2_Config>
 800c440:	4603      	mov	r3, r0
 800c442:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c446:	e015      	b.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c44c:	3328      	adds	r3, #40	@ 0x28
 800c44e:	2102      	movs	r1, #2
 800c450:	4618      	mov	r0, r3
 800c452:	f001 fcbf 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c456:	4603      	mov	r3, r0
 800c458:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c45c:	e00a      	b.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c464:	e006      	b.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c466:	bf00      	nop
 800c468:	e004      	b.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c46a:	bf00      	nop
 800c46c:	e002      	b.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c46e:	bf00      	nop
 800c470:	e000      	b.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c472:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c474:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10b      	bne.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c47c:	4ba1      	ldr	r3, [pc, #644]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c47e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c480:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c488:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c48c:	4a9d      	ldr	r2, [pc, #628]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c48e:	430b      	orrs	r3, r1
 800c490:	6593      	str	r3, [r2, #88]	@ 0x58
 800c492:	e003      	b.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c494:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c498:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f002 0308 	and.w	r3, r2, #8
 800c4a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c4b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	d01e      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4c8:	d10c      	bne.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4ce:	3328      	adds	r3, #40	@ 0x28
 800c4d0:	2102      	movs	r1, #2
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f001 fc7e 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d002      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c4e4:	4b87      	ldr	r3, [pc, #540]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c4ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4f4:	4a83      	ldr	r2, [pc, #524]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4f6:	430b      	orrs	r3, r1
 800c4f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c4fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c502:	f002 0310 	and.w	r3, r2, #16
 800c506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c50a:	2300      	movs	r3, #0
 800c50c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c510:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c514:	460b      	mov	r3, r1
 800c516:	4313      	orrs	r3, r2
 800c518:	d01e      	beq.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c51e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c526:	d10c      	bne.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c52c:	3328      	adds	r3, #40	@ 0x28
 800c52e:	2102      	movs	r1, #2
 800c530:	4618      	mov	r0, r3
 800c532:	f001 fc4f 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c542:	4b70      	ldr	r3, [pc, #448]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c546:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c54e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c552:	4a6c      	ldr	r2, [pc, #432]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c554:	430b      	orrs	r3, r1
 800c556:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c564:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c568:	2300      	movs	r3, #0
 800c56a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c56e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c572:	460b      	mov	r3, r1
 800c574:	4313      	orrs	r3, r2
 800c576:	d03e      	beq.n	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c57c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c584:	d022      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c58a:	d81b      	bhi.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c594:	d00b      	beq.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c596:	e015      	b.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c59c:	3308      	adds	r3, #8
 800c59e:	2100      	movs	r1, #0
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f001 fb65 	bl	800dc70 <RCCEx_PLL2_Config>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c5ac:	e00f      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5b2:	3328      	adds	r3, #40	@ 0x28
 800c5b4:	2102      	movs	r1, #2
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f001 fc0c 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c5c2:	e004      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c5ca:	e000      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10b      	bne.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c5d6:	4b4b      	ldr	r3, [pc, #300]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c5de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c5e6:	4a47      	ldr	r2, [pc, #284]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5e8:	430b      	orrs	r3, r1
 800c5ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800c5ec:	e003      	b.n	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c5f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c602:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c604:	2300      	movs	r3, #0
 800c606:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c608:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c60c:	460b      	mov	r3, r1
 800c60e:	4313      	orrs	r3, r2
 800c610:	d03b      	beq.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c61a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c61e:	d01f      	beq.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c620:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c624:	d818      	bhi.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c62a:	d003      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c62c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c630:	d007      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c632:	e011      	b.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c634:	4b33      	ldr	r3, [pc, #204]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c638:	4a32      	ldr	r2, [pc, #200]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c63a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c63e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c640:	e00f      	b.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c646:	3328      	adds	r3, #40	@ 0x28
 800c648:	2101      	movs	r1, #1
 800c64a:	4618      	mov	r0, r3
 800c64c:	f001 fbc2 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c650:	4603      	mov	r3, r0
 800c652:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c656:	e004      	b.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c65e:	e000      	b.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c660:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c662:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10b      	bne.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c66a:	4b26      	ldr	r3, [pc, #152]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c66c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c66e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c67a:	4a22      	ldr	r2, [pc, #136]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c67c:	430b      	orrs	r3, r1
 800c67e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c680:	e003      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c682:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c686:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c68a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c696:	673b      	str	r3, [r7, #112]	@ 0x70
 800c698:	2300      	movs	r3, #0
 800c69a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c69c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	d034      	beq.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d003      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c6b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6b4:	d007      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c6b6:	e011      	b.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6b8:	4b12      	ldr	r3, [pc, #72]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6bc:	4a11      	ldr	r2, [pc, #68]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c6c4:	e00e      	b.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c6c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	2102      	movs	r1, #2
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f001 face 	bl	800dc70 <RCCEx_PLL2_Config>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c6da:	e003      	b.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c6e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10d      	bne.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c6ec:	4b05      	ldr	r3, [pc, #20]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6fa:	4a02      	ldr	r2, [pc, #8]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6fc:	430b      	orrs	r3, r1
 800c6fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c700:	e006      	b.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c702:	bf00      	nop
 800c704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c708:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c70c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c718:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c71c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c71e:	2300      	movs	r3, #0
 800c720:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c722:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c726:	460b      	mov	r3, r1
 800c728:	4313      	orrs	r3, r2
 800c72a:	d00c      	beq.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c72c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c730:	3328      	adds	r3, #40	@ 0x28
 800c732:	2102      	movs	r1, #2
 800c734:	4618      	mov	r0, r3
 800c736:	f001 fb4d 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c752:	663b      	str	r3, [r7, #96]	@ 0x60
 800c754:	2300      	movs	r3, #0
 800c756:	667b      	str	r3, [r7, #100]	@ 0x64
 800c758:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c75c:	460b      	mov	r3, r1
 800c75e:	4313      	orrs	r3, r2
 800c760:	d038      	beq.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c76a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c76e:	d018      	beq.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c774:	d811      	bhi.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c77a:	d014      	beq.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c77c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c780:	d80b      	bhi.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c782:	2b00      	cmp	r3, #0
 800c784:	d011      	beq.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c78a:	d106      	bne.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c78c:	4bc3      	ldr	r3, [pc, #780]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c790:	4ac2      	ldr	r2, [pc, #776]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c798:	e008      	b.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c7a0:	e004      	b.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c7a2:	bf00      	nop
 800c7a4:	e002      	b.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c7a6:	bf00      	nop
 800c7a8:	e000      	b.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c7aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10b      	bne.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c7b4:	4bb9      	ldr	r3, [pc, #740]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c7bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7c4:	4ab5      	ldr	r2, [pc, #724]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7c6:	430b      	orrs	r3, r1
 800c7c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800c7ca:	e003      	b.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c7d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c7d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c7e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	d009      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c7f0:	4baa      	ldr	r3, [pc, #680]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c7f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7fe:	4aa7      	ldr	r2, [pc, #668]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c800:	430b      	orrs	r3, r1
 800c802:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c810:	653b      	str	r3, [r7, #80]	@ 0x50
 800c812:	2300      	movs	r3, #0
 800c814:	657b      	str	r3, [r7, #84]	@ 0x54
 800c816:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c81a:	460b      	mov	r3, r1
 800c81c:	4313      	orrs	r3, r2
 800c81e:	d009      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c820:	4b9e      	ldr	r3, [pc, #632]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c824:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c82c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c82e:	4a9b      	ldr	r2, [pc, #620]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c830:	430b      	orrs	r3, r1
 800c832:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c840:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c842:	2300      	movs	r3, #0
 800c844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c846:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c84a:	460b      	mov	r3, r1
 800c84c:	4313      	orrs	r3, r2
 800c84e:	d009      	beq.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c850:	4b92      	ldr	r3, [pc, #584]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c854:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800c858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c85c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c85e:	4a8f      	ldr	r2, [pc, #572]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c860:	430b      	orrs	r3, r1
 800c862:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c870:	643b      	str	r3, [r7, #64]	@ 0x40
 800c872:	2300      	movs	r3, #0
 800c874:	647b      	str	r3, [r7, #68]	@ 0x44
 800c876:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c87a:	460b      	mov	r3, r1
 800c87c:	4313      	orrs	r3, r2
 800c87e:	d00e      	beq.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c880:	4b86      	ldr	r3, [pc, #536]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	4a85      	ldr	r2, [pc, #532]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c886:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c88a:	6113      	str	r3, [r2, #16]
 800c88c:	4b83      	ldr	r3, [pc, #524]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c88e:	6919      	ldr	r1, [r3, #16]
 800c890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c894:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c898:	4a80      	ldr	r2, [pc, #512]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c89a:	430b      	orrs	r3, r1
 800c89c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c89e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c8aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	d009      	beq.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c8ba:	4b78      	ldr	r3, [pc, #480]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c8c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8c8:	4a74      	ldr	r2, [pc, #464]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8ca:	430b      	orrs	r3, r1
 800c8cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c8ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c8da:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8dc:	2300      	movs	r3, #0
 800c8de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	d00a      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c8ea:	4b6c      	ldr	r3, [pc, #432]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8ee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c8f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c8fa:	4a68      	ldr	r2, [pc, #416]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8fc:	430b      	orrs	r3, r1
 800c8fe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	2100      	movs	r1, #0
 800c90a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c90c:	f003 0301 	and.w	r3, r3, #1
 800c910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c912:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c916:	460b      	mov	r3, r1
 800c918:	4313      	orrs	r3, r2
 800c91a:	d011      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c920:	3308      	adds	r3, #8
 800c922:	2100      	movs	r1, #0
 800c924:	4618      	mov	r0, r3
 800c926:	f001 f9a3 	bl	800dc70 <RCCEx_PLL2_Config>
 800c92a:	4603      	mov	r3, r0
 800c92c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c930:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c934:	2b00      	cmp	r3, #0
 800c936:	d003      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c93c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	2100      	movs	r1, #0
 800c94a:	6239      	str	r1, [r7, #32]
 800c94c:	f003 0302 	and.w	r3, r3, #2
 800c950:	627b      	str	r3, [r7, #36]	@ 0x24
 800c952:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c956:	460b      	mov	r3, r1
 800c958:	4313      	orrs	r3, r2
 800c95a:	d011      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c95c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c960:	3308      	adds	r3, #8
 800c962:	2101      	movs	r1, #1
 800c964:	4618      	mov	r0, r3
 800c966:	f001 f983 	bl	800dc70 <RCCEx_PLL2_Config>
 800c96a:	4603      	mov	r3, r0
 800c96c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c970:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c974:	2b00      	cmp	r3, #0
 800c976:	d003      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c97c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	2100      	movs	r1, #0
 800c98a:	61b9      	str	r1, [r7, #24]
 800c98c:	f003 0304 	and.w	r3, r3, #4
 800c990:	61fb      	str	r3, [r7, #28]
 800c992:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c996:	460b      	mov	r3, r1
 800c998:	4313      	orrs	r3, r2
 800c99a:	d011      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c99c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9a0:	3308      	adds	r3, #8
 800c9a2:	2102      	movs	r1, #2
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f001 f963 	bl	800dc70 <RCCEx_PLL2_Config>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c9b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d003      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	6139      	str	r1, [r7, #16]
 800c9cc:	f003 0308 	and.w	r3, r3, #8
 800c9d0:	617b      	str	r3, [r7, #20]
 800c9d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	d011      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9e0:	3328      	adds	r3, #40	@ 0x28
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f001 f9f5 	bl	800ddd4 <RCCEx_PLL3_Config>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800c9f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d003      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ca00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	2100      	movs	r1, #0
 800ca0a:	60b9      	str	r1, [r7, #8]
 800ca0c:	f003 0310 	and.w	r3, r3, #16
 800ca10:	60fb      	str	r3, [r7, #12]
 800ca12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ca16:	460b      	mov	r3, r1
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	d011      	beq.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca20:	3328      	adds	r3, #40	@ 0x28
 800ca22:	2101      	movs	r1, #1
 800ca24:	4618      	mov	r0, r3
 800ca26:	f001 f9d5 	bl	800ddd4 <RCCEx_PLL3_Config>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800ca30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d003      	beq.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ca40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	2100      	movs	r1, #0
 800ca4a:	6039      	str	r1, [r7, #0]
 800ca4c:	f003 0320 	and.w	r3, r3, #32
 800ca50:	607b      	str	r3, [r7, #4]
 800ca52:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ca56:	460b      	mov	r3, r1
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	d011      	beq.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca60:	3328      	adds	r3, #40	@ 0x28
 800ca62:	2102      	movs	r1, #2
 800ca64:	4618      	mov	r0, r3
 800ca66:	f001 f9b5 	bl	800ddd4 <RCCEx_PLL3_Config>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800ca70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d003      	beq.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800ca80:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	e000      	b.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800ca8c:	2301      	movs	r3, #1
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800ca94:	46bd      	mov	sp, r7
 800ca96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca9a:	bf00      	nop
 800ca9c:	58024400 	.word	0x58024400

0800caa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b090      	sub	sp, #64	@ 0x40
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800caaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cab2:	430b      	orrs	r3, r1
 800cab4:	f040 8094 	bne.w	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cab8:	4b97      	ldr	r3, [pc, #604]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800caba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cabc:	f003 0307 	and.w	r3, r3, #7
 800cac0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac4:	2b04      	cmp	r3, #4
 800cac6:	f200 8087 	bhi.w	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800caca:	a201      	add	r2, pc, #4	@ (adr r2, 800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad0:	0800cae5 	.word	0x0800cae5
 800cad4:	0800cb0d 	.word	0x0800cb0d
 800cad8:	0800cb35 	.word	0x0800cb35
 800cadc:	0800cbd1 	.word	0x0800cbd1
 800cae0:	0800cb5d 	.word	0x0800cb5d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cae4:	4b8c      	ldr	r3, [pc, #560]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800caec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800caf0:	d108      	bne.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800caf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 ff68 	bl	800d9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb00:	f000 bc97 	b.w	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cb04:	2300      	movs	r3, #0
 800cb06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb08:	f000 bc93 	b.w	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb0c:	4b82      	ldr	r3, [pc, #520]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb18:	d108      	bne.n	800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb1a:	f107 0318 	add.w	r3, r7, #24
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 fcac 	bl	800d47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb28:	f000 bc83 	b.w	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb30:	f000 bc7f 	b.w	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb34:	4b78      	ldr	r3, [pc, #480]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb40:	d108      	bne.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb42:	f107 030c 	add.w	r3, r7, #12
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 fdec 	bl	800d724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb50:	f000 bc6f 	b.w	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cb54:	2300      	movs	r3, #0
 800cb56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb58:	f000 bc6b 	b.w	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb5c:	4b6e      	ldr	r3, [pc, #440]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cb64:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb66:	4b6c      	ldr	r3, [pc, #432]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f003 0304 	and.w	r3, r3, #4
 800cb6e:	2b04      	cmp	r3, #4
 800cb70:	d10c      	bne.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cb72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d109      	bne.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb78:	4b67      	ldr	r3, [pc, #412]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	08db      	lsrs	r3, r3, #3
 800cb7e:	f003 0303 	and.w	r3, r3, #3
 800cb82:	4a66      	ldr	r2, [pc, #408]	@ (800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cb84:	fa22 f303 	lsr.w	r3, r2, r3
 800cb88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb8a:	e01f      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb8c:	4b62      	ldr	r3, [pc, #392]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb98:	d106      	bne.n	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cb9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cba0:	d102      	bne.n	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cba2:	4b5f      	ldr	r3, [pc, #380]	@ (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cba6:	e011      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cba8:	4b5b      	ldr	r3, [pc, #364]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbb4:	d106      	bne.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cbb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbbc:	d102      	bne.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbbe:	4b59      	ldr	r3, [pc, #356]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbc2:	e003      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cbc8:	f000 bc33 	b.w	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cbcc:	f000 bc31 	b.w	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbd0:	4b55      	ldr	r3, [pc, #340]	@ (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbd4:	f000 bc2d 	b.w	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbdc:	f000 bc29 	b.w	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800cbe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbe4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800cbe8:	430b      	orrs	r3, r1
 800cbea:	f040 809f 	bne.w	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800cbee:	4b4a      	ldr	r3, [pc, #296]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cbf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbf2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800cbf6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbfe:	d04d      	beq.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800cc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc06:	f200 8084 	bhi.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0c:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc0e:	d07d      	beq.n	800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800cc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc12:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc14:	d87d      	bhi.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc18:	2b80      	cmp	r3, #128	@ 0x80
 800cc1a:	d02d      	beq.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1e:	2b80      	cmp	r3, #128	@ 0x80
 800cc20:	d877      	bhi.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d003      	beq.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800cc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2a:	2b40      	cmp	r3, #64	@ 0x40
 800cc2c:	d012      	beq.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800cc2e:	e070      	b.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc30:	4b39      	ldr	r3, [pc, #228]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc3c:	d107      	bne.n	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 fec2 	bl	800d9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc4c:	e3f1      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc52:	e3ee      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc54:	4b30      	ldr	r3, [pc, #192]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc60:	d107      	bne.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc62:	f107 0318 	add.w	r3, r7, #24
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 fc08 	bl	800d47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc70:	e3df      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc76:	e3dc      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc78:	4b27      	ldr	r3, [pc, #156]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc84:	d107      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc86:	f107 030c 	add.w	r3, r7, #12
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f000 fd4a 	bl	800d724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc94:	e3cd      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc9a:	e3ca      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc9c:	4b1e      	ldr	r3, [pc, #120]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cca0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cca4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cca6:	4b1c      	ldr	r3, [pc, #112]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f003 0304 	and.w	r3, r3, #4
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d10c      	bne.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800ccb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d109      	bne.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccb8:	4b17      	ldr	r3, [pc, #92]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	08db      	lsrs	r3, r3, #3
 800ccbe:	f003 0303 	and.w	r3, r3, #3
 800ccc2:	4a16      	ldr	r2, [pc, #88]	@ (800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ccc4:	fa22 f303 	lsr.w	r3, r2, r3
 800ccc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccca:	e01e      	b.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cccc:	4b12      	ldr	r3, [pc, #72]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccd8:	d106      	bne.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800ccda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cce0:	d102      	bne.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cce2:	4b0f      	ldr	r3, [pc, #60]	@ (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cce6:	e010      	b.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cce8:	4b0b      	ldr	r3, [pc, #44]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ccf4:	d106      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800ccf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccfc:	d102      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccfe:	4b09      	ldr	r3, [pc, #36]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd02:	e002      	b.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cd08:	e393      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cd0a:	e392      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd0c:	4b06      	ldr	r3, [pc, #24]	@ (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd10:	e38f      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800cd12:	2300      	movs	r3, #0
 800cd14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd16:	e38c      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cd18:	58024400 	.word	0x58024400
 800cd1c:	03d09000 	.word	0x03d09000
 800cd20:	003d0900 	.word	0x003d0900
 800cd24:	007a1200 	.word	0x007a1200
 800cd28:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800cd2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd30:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cd34:	430b      	orrs	r3, r1
 800cd36:	f040 809c 	bne.w	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800cd3a:	4b9e      	ldr	r3, [pc, #632]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd3e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800cd42:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd4a:	d054      	beq.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd52:	f200 808b 	bhi.w	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cd5c:	f000 8083 	beq.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800cd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd62:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cd66:	f200 8081 	bhi.w	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd70:	d02f      	beq.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800cd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd78:	d878      	bhi.n	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d004      	beq.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800cd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd86:	d012      	beq.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800cd88:	e070      	b.n	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd8a:	4b8a      	ldr	r3, [pc, #552]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd96:	d107      	bne.n	800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 fe15 	bl	800d9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda6:	e344      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdac:	e341      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdae:	4b81      	ldr	r3, [pc, #516]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cdb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cdba:	d107      	bne.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdbc:	f107 0318 	add.w	r3, r7, #24
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 fb5b 	bl	800d47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdca:	e332      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdd0:	e32f      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdd2:	4b78      	ldr	r3, [pc, #480]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cdda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cdde:	d107      	bne.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cde0:	f107 030c 	add.w	r3, r7, #12
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 fc9d 	bl	800d724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdee:	e320      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdf4:	e31d      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cdf6:	4b6f      	ldr	r3, [pc, #444]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdfa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cdfe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce00:	4b6c      	ldr	r3, [pc, #432]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f003 0304 	and.w	r3, r3, #4
 800ce08:	2b04      	cmp	r3, #4
 800ce0a:	d10c      	bne.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800ce0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d109      	bne.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce12:	4b68      	ldr	r3, [pc, #416]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	08db      	lsrs	r3, r3, #3
 800ce18:	f003 0303 	and.w	r3, r3, #3
 800ce1c:	4a66      	ldr	r2, [pc, #408]	@ (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800ce1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce24:	e01e      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce26:	4b63      	ldr	r3, [pc, #396]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce32:	d106      	bne.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ce34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce3a:	d102      	bne.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce3c:	4b5f      	ldr	r3, [pc, #380]	@ (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800ce3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce40:	e010      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce42:	4b5c      	ldr	r3, [pc, #368]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce4e:	d106      	bne.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ce50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce56:	d102      	bne.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce58:	4b59      	ldr	r3, [pc, #356]	@ (800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ce5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce5c:	e002      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800ce62:	e2e6      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ce64:	e2e5      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce66:	4b57      	ldr	r3, [pc, #348]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce6a:	e2e2      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce70:	e2df      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ce72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce76:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ce7a:	430b      	orrs	r3, r1
 800ce7c:	f040 80a7 	bne.w	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ce80:	4b4c      	ldr	r3, [pc, #304]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce84:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ce88:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce90:	d055      	beq.n	800cf3e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800ce92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce98:	f200 8096 	bhi.w	800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cea2:	f000 8084 	beq.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800cea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ceac:	f200 808c 	bhi.w	800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ceb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ceb6:	d030      	beq.n	800cf1a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cebe:	f200 8083 	bhi.w	800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800cec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d004      	beq.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800cec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cece:	d012      	beq.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800ced0:	e07a      	b.n	800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ced2:	4b38      	ldr	r3, [pc, #224]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ceda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cede:	d107      	bne.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 fd71 	bl	800d9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ceea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceee:	e2a0      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef4:	e29d      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cef6:	4b2f      	ldr	r3, [pc, #188]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cefe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf02:	d107      	bne.n	800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf04:	f107 0318 	add.w	r3, r7, #24
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 fab7 	bl	800d47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf12:	e28e      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf18:	e28b      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf1a:	4b26      	ldr	r3, [pc, #152]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf26:	d107      	bne.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf28:	f107 030c 	add.w	r3, r7, #12
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f000 fbf9 	bl	800d724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf36:	e27c      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf3c:	e279      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf3e:	4b1d      	ldr	r3, [pc, #116]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cf46:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf48:	4b1a      	ldr	r3, [pc, #104]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f003 0304 	and.w	r3, r3, #4
 800cf50:	2b04      	cmp	r3, #4
 800cf52:	d10c      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800cf54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d109      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf5a:	4b16      	ldr	r3, [pc, #88]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	08db      	lsrs	r3, r3, #3
 800cf60:	f003 0303 	and.w	r3, r3, #3
 800cf64:	4a14      	ldr	r2, [pc, #80]	@ (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800cf66:	fa22 f303 	lsr.w	r3, r2, r3
 800cf6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf6c:	e01e      	b.n	800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf6e:	4b11      	ldr	r3, [pc, #68]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf7a:	d106      	bne.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800cf7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf82:	d102      	bne.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf84:	4b0d      	ldr	r3, [pc, #52]	@ (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800cf86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf88:	e010      	b.n	800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf8a:	4b0a      	ldr	r3, [pc, #40]	@ (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf96:	d106      	bne.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cf98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf9e:	d102      	bne.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cfa0:	4b07      	ldr	r3, [pc, #28]	@ (800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800cfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfa4:	e002      	b.n	800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cfaa:	e242      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cfac:	e241      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cfae:	4b05      	ldr	r3, [pc, #20]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfb2:	e23e      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cfb4:	58024400 	.word	0x58024400
 800cfb8:	03d09000 	.word	0x03d09000
 800cfbc:	003d0900 	.word	0x003d0900
 800cfc0:	007a1200 	.word	0x007a1200
 800cfc4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfcc:	e231      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cfce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfd2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800cfd6:	430b      	orrs	r3, r1
 800cfd8:	f040 8085 	bne.w	800d0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cfdc:	4b9c      	ldr	r3, [pc, #624]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cfde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfe0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cfe4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800cfe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cfec:	d06b      	beq.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800cfee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cff4:	d874      	bhi.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cffc:	d056      	beq.n	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800cffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d000:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d004:	d86c      	bhi.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800d006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d008:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d00c:	d03b      	beq.n	800d086 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800d00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d010:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d014:	d864      	bhi.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800d016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d018:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d01c:	d021      	beq.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800d01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d020:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d024:	d85c      	bhi.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800d026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d004      	beq.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800d02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d032:	d004      	beq.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800d034:	e054      	b.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d036:	f7fe fb5f 	bl	800b6f8 <HAL_RCC_GetPCLK1Freq>
 800d03a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d03c:	e1f9      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d03e:	4b84      	ldr	r3, [pc, #528]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d046:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d04a:	d107      	bne.n	800d05c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d04c:	f107 0318 	add.w	r3, r7, #24
 800d050:	4618      	mov	r0, r3
 800d052:	f000 fa13 	bl	800d47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d05a:	e1ea      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d060:	e1e7      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d062:	4b7b      	ldr	r3, [pc, #492]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d06a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d06e:	d107      	bne.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d070:	f107 030c 	add.w	r3, r7, #12
 800d074:	4618      	mov	r0, r3
 800d076:	f000 fb55 	bl	800d724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d07e:	e1d8      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d080:	2300      	movs	r3, #0
 800d082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d084:	e1d5      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d086:	4b72      	ldr	r3, [pc, #456]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f003 0304 	and.w	r3, r3, #4
 800d08e:	2b04      	cmp	r3, #4
 800d090:	d109      	bne.n	800d0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d092:	4b6f      	ldr	r3, [pc, #444]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	08db      	lsrs	r3, r3, #3
 800d098:	f003 0303 	and.w	r3, r3, #3
 800d09c:	4a6d      	ldr	r2, [pc, #436]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d09e:	fa22 f303 	lsr.w	r3, r2, r3
 800d0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0a4:	e1c5      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0aa:	e1c2      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d0ac:	4b68      	ldr	r3, [pc, #416]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0b8:	d102      	bne.n	800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800d0ba:	4b67      	ldr	r3, [pc, #412]	@ (800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800d0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0be:	e1b8      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0c4:	e1b5      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d0c6:	4b62      	ldr	r3, [pc, #392]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0d2:	d102      	bne.n	800d0da <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800d0d4:	4b61      	ldr	r3, [pc, #388]	@ (800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800d0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0d8:	e1ab      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0de:	e1a8      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0e4:	e1a5      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d0e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ea:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d0ee:	430b      	orrs	r3, r1
 800d0f0:	d173      	bne.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d0f2:	4b57      	ldr	r3, [pc, #348]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d0f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d0fa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d102:	d02f      	beq.n	800d164 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800d104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d10a:	d863      	bhi.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800d10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d004      	beq.n	800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800d112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d118:	d012      	beq.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800d11a:	e05b      	b.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d11c:	4b4c      	ldr	r3, [pc, #304]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d124:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d128:	d107      	bne.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d12a:	f107 0318 	add.w	r3, r7, #24
 800d12e:	4618      	mov	r0, r3
 800d130:	f000 f9a4 	bl	800d47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d138:	e17b      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d13e:	e178      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d140:	4b43      	ldr	r3, [pc, #268]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d14c:	d107      	bne.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d14e:	f107 030c 	add.w	r3, r7, #12
 800d152:	4618      	mov	r0, r3
 800d154:	f000 fae6 	bl	800d724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d15c:	e169      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d162:	e166      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d164:	4b3a      	ldr	r3, [pc, #232]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d168:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d16c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d16e:	4b38      	ldr	r3, [pc, #224]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f003 0304 	and.w	r3, r3, #4
 800d176:	2b04      	cmp	r3, #4
 800d178:	d10c      	bne.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800d17a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d109      	bne.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d180:	4b33      	ldr	r3, [pc, #204]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	08db      	lsrs	r3, r3, #3
 800d186:	f003 0303 	and.w	r3, r3, #3
 800d18a:	4a32      	ldr	r2, [pc, #200]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d18c:	fa22 f303 	lsr.w	r3, r2, r3
 800d190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d192:	e01e      	b.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d194:	4b2e      	ldr	r3, [pc, #184]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d19c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1a0:	d106      	bne.n	800d1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800d1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1a8:	d102      	bne.n	800d1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d1aa:	4b2b      	ldr	r3, [pc, #172]	@ (800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800d1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1ae:	e010      	b.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d1b0:	4b27      	ldr	r3, [pc, #156]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1bc:	d106      	bne.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d1be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1c4:	d102      	bne.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d1c6:	4b25      	ldr	r3, [pc, #148]	@ (800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800d1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1ca:	e002      	b.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d1d0:	e12f      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d1d2:	e12e      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1d8:	e12b      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d1da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1de:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d1e2:	430b      	orrs	r3, r1
 800d1e4:	d13c      	bne.n	800d260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d1e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d1e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d1ee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d004      	beq.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1fc:	d012      	beq.n	800d224 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800d1fe:	e023      	b.n	800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d200:	4b13      	ldr	r3, [pc, #76]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d208:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d20c:	d107      	bne.n	800d21e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d20e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d212:	4618      	mov	r0, r3
 800d214:	f000 fbda 	bl	800d9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d21c:	e109      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d21e:	2300      	movs	r3, #0
 800d220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d222:	e106      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d224:	4b0a      	ldr	r3, [pc, #40]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d22c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d230:	d107      	bne.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d232:	f107 0318 	add.w	r3, r7, #24
 800d236:	4618      	mov	r0, r3
 800d238:	f000 f920 	bl	800d47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d23c:	6a3b      	ldr	r3, [r7, #32]
 800d23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d240:	e0f7      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d246:	e0f4      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d24c:	e0f1      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d24e:	bf00      	nop
 800d250:	58024400 	.word	0x58024400
 800d254:	03d09000 	.word	0x03d09000
 800d258:	003d0900 	.word	0x003d0900
 800d25c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d260:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d264:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d268:	430b      	orrs	r3, r1
 800d26a:	f040 8091 	bne.w	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d26e:	4b73      	ldr	r3, [pc, #460]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d272:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d276:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d27a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800d27e:	f000 8081 	beq.w	800d384 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800d282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d284:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800d288:	d87f      	bhi.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d28c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d290:	d06b      	beq.n	800d36a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800d292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d298:	d877      	bhi.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2a0:	d056      	beq.n	800d350 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2a8:	d86f      	bhi.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d2b0:	d03b      	beq.n	800d32a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800d2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d2b8:	d867      	bhi.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2c0:	d021      	beq.n	800d306 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2c8:	d85f      	bhi.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d004      	beq.n	800d2da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2d6:	d004      	beq.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800d2d8:	e057      	b.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d2da:	f000 f8b9 	bl	800d450 <HAL_RCCEx_GetD3PCLK1Freq>
 800d2de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d2e0:	e0a7      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2e2:	4b56      	ldr	r3, [pc, #344]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2ee:	d107      	bne.n	800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2f0:	f107 0318 	add.w	r3, r7, #24
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f000 f8c1 	bl	800d47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2fe:	e098      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d300:	2300      	movs	r3, #0
 800d302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d304:	e095      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d306:	4b4d      	ldr	r3, [pc, #308]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d30e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d312:	d107      	bne.n	800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d314:	f107 030c 	add.w	r3, r7, #12
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 fa03 	bl	800d724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d322:	e086      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d324:	2300      	movs	r3, #0
 800d326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d328:	e083      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d32a:	4b44      	ldr	r3, [pc, #272]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f003 0304 	and.w	r3, r3, #4
 800d332:	2b04      	cmp	r3, #4
 800d334:	d109      	bne.n	800d34a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d336:	4b41      	ldr	r3, [pc, #260]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	08db      	lsrs	r3, r3, #3
 800d33c:	f003 0303 	and.w	r3, r3, #3
 800d340:	4a3f      	ldr	r2, [pc, #252]	@ (800d440 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d342:	fa22 f303 	lsr.w	r3, r2, r3
 800d346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d348:	e073      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d34e:	e070      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d350:	4b3a      	ldr	r3, [pc, #232]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d35c:	d102      	bne.n	800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800d35e:	4b39      	ldr	r3, [pc, #228]	@ (800d444 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800d360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d362:	e066      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d364:	2300      	movs	r3, #0
 800d366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d368:	e063      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d36a:	4b34      	ldr	r3, [pc, #208]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d372:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d376:	d102      	bne.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800d378:	4b33      	ldr	r3, [pc, #204]	@ (800d448 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d37c:	e059      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d382:	e056      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d384:	4b31      	ldr	r3, [pc, #196]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800d386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d388:	e053      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d38a:	2300      	movs	r3, #0
 800d38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d38e:	e050      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d390:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d394:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d398:	430b      	orrs	r3, r1
 800d39a:	d148      	bne.n	800d42e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d39c:	4b27      	ldr	r3, [pc, #156]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d39e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d3a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3ac:	d02a      	beq.n	800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3b4:	d838      	bhi.n	800d428 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d004      	beq.n	800d3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3c2:	d00d      	beq.n	800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800d3c4:	e030      	b.n	800d428 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d3c6:	4b1d      	ldr	r3, [pc, #116]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d3d2:	d102      	bne.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800d3d4:	4b1c      	ldr	r3, [pc, #112]	@ (800d448 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3d8:	e02b      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3de:	e028      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3e0:	4b16      	ldr	r3, [pc, #88]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3ec:	d107      	bne.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f000 faea 	bl	800d9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3fc:	e019      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d402:	e016      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d404:	4b0d      	ldr	r3, [pc, #52]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d40c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d410:	d107      	bne.n	800d422 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d412:	f107 0318 	add.w	r3, r7, #24
 800d416:	4618      	mov	r0, r3
 800d418:	f000 f830 	bl	800d47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d420:	e007      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d422:	2300      	movs	r3, #0
 800d424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d426:	e004      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800d428:	2300      	movs	r3, #0
 800d42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d42c:	e001      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d434:	4618      	mov	r0, r3
 800d436:	3740      	adds	r7, #64	@ 0x40
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	58024400 	.word	0x58024400
 800d440:	03d09000 	.word	0x03d09000
 800d444:	003d0900 	.word	0x003d0900
 800d448:	007a1200 	.word	0x007a1200
 800d44c:	00bb8000 	.word	0x00bb8000

0800d450 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800d454:	f7fe f920 	bl	800b698 <HAL_RCC_GetHCLKFreq>
 800d458:	4602      	mov	r2, r0
 800d45a:	4b06      	ldr	r3, [pc, #24]	@ (800d474 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d45c:	6a1b      	ldr	r3, [r3, #32]
 800d45e:	091b      	lsrs	r3, r3, #4
 800d460:	f003 0307 	and.w	r3, r3, #7
 800d464:	4904      	ldr	r1, [pc, #16]	@ (800d478 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d466:	5ccb      	ldrb	r3, [r1, r3]
 800d468:	f003 031f 	and.w	r3, r3, #31
 800d46c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d470:	4618      	mov	r0, r3
 800d472:	bd80      	pop	{r7, pc}
 800d474:	58024400 	.word	0x58024400
 800d478:	080134ac 	.word	0x080134ac

0800d47c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b089      	sub	sp, #36	@ 0x24
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d484:	4ba1      	ldr	r3, [pc, #644]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d488:	f003 0303 	and.w	r3, r3, #3
 800d48c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d48e:	4b9f      	ldr	r3, [pc, #636]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d492:	0b1b      	lsrs	r3, r3, #12
 800d494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d498:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d49a:	4b9c      	ldr	r3, [pc, #624]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d49e:	091b      	lsrs	r3, r3, #4
 800d4a0:	f003 0301 	and.w	r3, r3, #1
 800d4a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d4a6:	4b99      	ldr	r3, [pc, #612]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4aa:	08db      	lsrs	r3, r3, #3
 800d4ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4b0:	693a      	ldr	r2, [r7, #16]
 800d4b2:	fb02 f303 	mul.w	r3, r2, r3
 800d4b6:	ee07 3a90 	vmov	s15, r3
 800d4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 8111 	beq.w	800d6ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	f000 8083 	beq.w	800d5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	f200 80a1 	bhi.w	800d61c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d003      	beq.n	800d4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d056      	beq.n	800d594 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d4e6:	e099      	b.n	800d61c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4e8:	4b88      	ldr	r3, [pc, #544]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f003 0320 	and.w	r3, r3, #32
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d02d      	beq.n	800d550 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4f4:	4b85      	ldr	r3, [pc, #532]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	08db      	lsrs	r3, r3, #3
 800d4fa:	f003 0303 	and.w	r3, r3, #3
 800d4fe:	4a84      	ldr	r2, [pc, #528]	@ (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d500:	fa22 f303 	lsr.w	r3, r2, r3
 800d504:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	ee07 3a90 	vmov	s15, r3
 800d50c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	ee07 3a90 	vmov	s15, r3
 800d516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d51e:	4b7b      	ldr	r3, [pc, #492]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d526:	ee07 3a90 	vmov	s15, r3
 800d52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d532:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d714 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d53e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d54a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d54e:	e087      	b.n	800d660 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	ee07 3a90 	vmov	s15, r3
 800d556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d718 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d562:	4b6a      	ldr	r3, [pc, #424]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d56a:	ee07 3a90 	vmov	s15, r3
 800d56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d572:	ed97 6a03 	vldr	s12, [r7, #12]
 800d576:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d714 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d58e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d592:	e065      	b.n	800d660 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	ee07 3a90 	vmov	s15, r3
 800d59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d59e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5a6:	4b59      	ldr	r3, [pc, #356]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ae:	ee07 3a90 	vmov	s15, r3
 800d5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d714 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5d6:	e043      	b.n	800d660 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	ee07 3a90 	vmov	s15, r3
 800d5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5ea:	4b48      	ldr	r3, [pc, #288]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f2:	ee07 3a90 	vmov	s15, r3
 800d5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d714 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d60a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d61a:	e021      	b.n	800d660 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	ee07 3a90 	vmov	s15, r3
 800d622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d626:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d62e:	4b37      	ldr	r3, [pc, #220]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d636:	ee07 3a90 	vmov	s15, r3
 800d63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d63e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d642:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d714 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d64e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d65a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d65e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d660:	4b2a      	ldr	r3, [pc, #168]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d664:	0a5b      	lsrs	r3, r3, #9
 800d666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d66a:	ee07 3a90 	vmov	s15, r3
 800d66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d67a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d67e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d686:	ee17 2a90 	vmov	r2, s15
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d68e:	4b1f      	ldr	r3, [pc, #124]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d692:	0c1b      	lsrs	r3, r3, #16
 800d694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d698:	ee07 3a90 	vmov	s15, r3
 800d69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d6a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6b4:	ee17 2a90 	vmov	r2, s15
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d6bc:	4b13      	ldr	r3, [pc, #76]	@ (800d70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6c0:	0e1b      	lsrs	r3, r3, #24
 800d6c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6c6:	ee07 3a90 	vmov	s15, r3
 800d6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d6d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6e2:	ee17 2a90 	vmov	r2, s15
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d6ea:	e008      	b.n	800d6fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	609a      	str	r2, [r3, #8]
}
 800d6fe:	bf00      	nop
 800d700:	3724      	adds	r7, #36	@ 0x24
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	58024400 	.word	0x58024400
 800d710:	03d09000 	.word	0x03d09000
 800d714:	46000000 	.word	0x46000000
 800d718:	4c742400 	.word	0x4c742400
 800d71c:	4a742400 	.word	0x4a742400
 800d720:	4af42400 	.word	0x4af42400

0800d724 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d724:	b480      	push	{r7}
 800d726:	b089      	sub	sp, #36	@ 0x24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d72c:	4ba1      	ldr	r3, [pc, #644]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d730:	f003 0303 	and.w	r3, r3, #3
 800d734:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d736:	4b9f      	ldr	r3, [pc, #636]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d73a:	0d1b      	lsrs	r3, r3, #20
 800d73c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d740:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d742:	4b9c      	ldr	r3, [pc, #624]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d746:	0a1b      	lsrs	r3, r3, #8
 800d748:	f003 0301 	and.w	r3, r3, #1
 800d74c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d74e:	4b99      	ldr	r3, [pc, #612]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d752:	08db      	lsrs	r3, r3, #3
 800d754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d758:	693a      	ldr	r2, [r7, #16]
 800d75a:	fb02 f303 	mul.w	r3, r2, r3
 800d75e:	ee07 3a90 	vmov	s15, r3
 800d762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d766:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f000 8111 	beq.w	800d994 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	2b02      	cmp	r3, #2
 800d776:	f000 8083 	beq.w	800d880 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	f200 80a1 	bhi.w	800d8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d003      	beq.n	800d790 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d056      	beq.n	800d83c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d78e:	e099      	b.n	800d8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d790:	4b88      	ldr	r3, [pc, #544]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f003 0320 	and.w	r3, r3, #32
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d02d      	beq.n	800d7f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d79c:	4b85      	ldr	r3, [pc, #532]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	08db      	lsrs	r3, r3, #3
 800d7a2:	f003 0303 	and.w	r3, r3, #3
 800d7a6:	4a84      	ldr	r2, [pc, #528]	@ (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d7a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	ee07 3a90 	vmov	s15, r3
 800d7b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	ee07 3a90 	vmov	s15, r3
 800d7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7c6:	4b7b      	ldr	r3, [pc, #492]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ce:	ee07 3a90 	vmov	s15, r3
 800d7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d9bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d7f6:	e087      	b.n	800d908 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	ee07 3a90 	vmov	s15, r3
 800d7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d802:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d80a:	4b6a      	ldr	r3, [pc, #424]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d80c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d812:	ee07 3a90 	vmov	s15, r3
 800d816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d81a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d81e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d9bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d82a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d83a:	e065      	b.n	800d908 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	ee07 3a90 	vmov	s15, r3
 800d842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d846:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d84e:	4b59      	ldr	r3, [pc, #356]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d856:	ee07 3a90 	vmov	s15, r3
 800d85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d85e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d862:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d9bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d86e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d87a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d87e:	e043      	b.n	800d908 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	ee07 3a90 	vmov	s15, r3
 800d886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d88a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d892:	4b48      	ldr	r3, [pc, #288]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d89a:	ee07 3a90 	vmov	s15, r3
 800d89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d9bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8c2:	e021      	b.n	800d908 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	ee07 3a90 	vmov	s15, r3
 800d8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d8d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8d6:	4b37      	ldr	r3, [pc, #220]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8de:	ee07 3a90 	vmov	s15, r3
 800d8e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d9bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d906:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d908:	4b2a      	ldr	r3, [pc, #168]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d90a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d90c:	0a5b      	lsrs	r3, r3, #9
 800d90e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d912:	ee07 3a90 	vmov	s15, r3
 800d916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d91a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d91e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d922:	edd7 6a07 	vldr	s13, [r7, #28]
 800d926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d92a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d92e:	ee17 2a90 	vmov	r2, s15
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d936:	4b1f      	ldr	r3, [pc, #124]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d93a:	0c1b      	lsrs	r3, r3, #16
 800d93c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d940:	ee07 3a90 	vmov	s15, r3
 800d944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d948:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d94c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d950:	edd7 6a07 	vldr	s13, [r7, #28]
 800d954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d95c:	ee17 2a90 	vmov	r2, s15
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d964:	4b13      	ldr	r3, [pc, #76]	@ (800d9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d968:	0e1b      	lsrs	r3, r3, #24
 800d96a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d96e:	ee07 3a90 	vmov	s15, r3
 800d972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d976:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d97a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d97e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d98a:	ee17 2a90 	vmov	r2, s15
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d992:	e008      	b.n	800d9a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	609a      	str	r2, [r3, #8]
}
 800d9a6:	bf00      	nop
 800d9a8:	3724      	adds	r7, #36	@ 0x24
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	58024400 	.word	0x58024400
 800d9b8:	03d09000 	.word	0x03d09000
 800d9bc:	46000000 	.word	0x46000000
 800d9c0:	4c742400 	.word	0x4c742400
 800d9c4:	4a742400 	.word	0x4a742400
 800d9c8:	4af42400 	.word	0x4af42400

0800d9cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b089      	sub	sp, #36	@ 0x24
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d9d4:	4ba0      	ldr	r3, [pc, #640]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9d8:	f003 0303 	and.w	r3, r3, #3
 800d9dc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d9de:	4b9e      	ldr	r3, [pc, #632]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9e2:	091b      	lsrs	r3, r3, #4
 800d9e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9e8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d9ea:	4b9b      	ldr	r3, [pc, #620]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ee:	f003 0301 	and.w	r3, r3, #1
 800d9f2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d9f4:	4b98      	ldr	r3, [pc, #608]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f8:	08db      	lsrs	r3, r3, #3
 800d9fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9fe:	693a      	ldr	r2, [r7, #16]
 800da00:	fb02 f303 	mul.w	r3, r2, r3
 800da04:	ee07 3a90 	vmov	s15, r3
 800da08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	2b00      	cmp	r3, #0
 800da14:	f000 8111 	beq.w	800dc3a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	2b02      	cmp	r3, #2
 800da1c:	f000 8083 	beq.w	800db26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	2b02      	cmp	r3, #2
 800da24:	f200 80a1 	bhi.w	800db6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	2b01      	cmp	r3, #1
 800da32:	d056      	beq.n	800dae2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800da34:	e099      	b.n	800db6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da36:	4b88      	ldr	r3, [pc, #544]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f003 0320 	and.w	r3, r3, #32
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d02d      	beq.n	800da9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da42:	4b85      	ldr	r3, [pc, #532]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	08db      	lsrs	r3, r3, #3
 800da48:	f003 0303 	and.w	r3, r3, #3
 800da4c:	4a83      	ldr	r2, [pc, #524]	@ (800dc5c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800da4e:	fa22 f303 	lsr.w	r3, r2, r3
 800da52:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	ee07 3a90 	vmov	s15, r3
 800da5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	ee07 3a90 	vmov	s15, r3
 800da64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da6c:	4b7a      	ldr	r3, [pc, #488]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da74:	ee07 3a90 	vmov	s15, r3
 800da78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800da80:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800dc60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da98:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800da9c:	e087      	b.n	800dbae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	ee07 3a90 	vmov	s15, r3
 800daa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daa8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800dc64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800daac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dab0:	4b69      	ldr	r3, [pc, #420]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dab8:	ee07 3a90 	vmov	s15, r3
 800dabc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dac0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dac4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800dc60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dacc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dad0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dadc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dae0:	e065      	b.n	800dbae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	ee07 3a90 	vmov	s15, r3
 800dae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daec:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800daf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daf4:	4b58      	ldr	r3, [pc, #352]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dafc:	ee07 3a90 	vmov	s15, r3
 800db00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db04:	ed97 6a03 	vldr	s12, [r7, #12]
 800db08:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800dc60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db24:	e043      	b.n	800dbae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	ee07 3a90 	vmov	s15, r3
 800db2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db30:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800dc6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800db34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db38:	4b47      	ldr	r3, [pc, #284]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db40:	ee07 3a90 	vmov	s15, r3
 800db44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db48:	ed97 6a03 	vldr	s12, [r7, #12]
 800db4c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800dc60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db68:	e021      	b.n	800dbae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	ee07 3a90 	vmov	s15, r3
 800db70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db74:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800dc64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800db78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db7c:	4b36      	ldr	r3, [pc, #216]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db84:	ee07 3a90 	vmov	s15, r3
 800db88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800db90:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800dc60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dba8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dbae:	4b2a      	ldr	r3, [pc, #168]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbb2:	0a5b      	lsrs	r3, r3, #9
 800dbb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbb8:	ee07 3a90 	vmov	s15, r3
 800dbbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbd4:	ee17 2a90 	vmov	r2, s15
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dbdc:	4b1e      	ldr	r3, [pc, #120]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbe0:	0c1b      	lsrs	r3, r3, #16
 800dbe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbe6:	ee07 3a90 	vmov	s15, r3
 800dbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc02:	ee17 2a90 	vmov	r2, s15
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dc0a:	4b13      	ldr	r3, [pc, #76]	@ (800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc0e:	0e1b      	lsrs	r3, r3, #24
 800dc10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc14:	ee07 3a90 	vmov	s15, r3
 800dc18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc24:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc30:	ee17 2a90 	vmov	r2, s15
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dc38:	e008      	b.n	800dc4c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	609a      	str	r2, [r3, #8]
}
 800dc4c:	bf00      	nop
 800dc4e:	3724      	adds	r7, #36	@ 0x24
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr
 800dc58:	58024400 	.word	0x58024400
 800dc5c:	03d09000 	.word	0x03d09000
 800dc60:	46000000 	.word	0x46000000
 800dc64:	4c742400 	.word	0x4c742400
 800dc68:	4a742400 	.word	0x4a742400
 800dc6c:	4af42400 	.word	0x4af42400

0800dc70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc7e:	4b53      	ldr	r3, [pc, #332]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dc80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc82:	f003 0303 	and.w	r3, r3, #3
 800dc86:	2b03      	cmp	r3, #3
 800dc88:	d101      	bne.n	800dc8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e099      	b.n	800ddc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dc8e:	4b4f      	ldr	r3, [pc, #316]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4a4e      	ldr	r2, [pc, #312]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dc94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dc98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc9a:	f7f5 f999 	bl	8002fd0 <HAL_GetTick>
 800dc9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dca0:	e008      	b.n	800dcb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dca2:	f7f5 f995 	bl	8002fd0 <HAL_GetTick>
 800dca6:	4602      	mov	r2, r0
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d901      	bls.n	800dcb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e086      	b.n	800ddc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dcb4:	4b45      	ldr	r3, [pc, #276]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1f0      	bne.n	800dca2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dcc0:	4b42      	ldr	r3, [pc, #264]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dcc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcc4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	031b      	lsls	r3, r3, #12
 800dcce:	493f      	ldr	r1, [pc, #252]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	628b      	str	r3, [r1, #40]	@ 0x28
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	3b01      	subs	r3, #1
 800dce4:	025b      	lsls	r3, r3, #9
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	431a      	orrs	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	041b      	lsls	r3, r3, #16
 800dcf2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dcf6:	431a      	orrs	r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	061b      	lsls	r3, r3, #24
 800dd00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dd04:	4931      	ldr	r1, [pc, #196]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd06:	4313      	orrs	r3, r2
 800dd08:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dd0a:	4b30      	ldr	r3, [pc, #192]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	695b      	ldr	r3, [r3, #20]
 800dd16:	492d      	ldr	r1, [pc, #180]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dd1c:	4b2b      	ldr	r3, [pc, #172]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd20:	f023 0220 	bic.w	r2, r3, #32
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	699b      	ldr	r3, [r3, #24]
 800dd28:	4928      	ldr	r1, [pc, #160]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dd2e:	4b27      	ldr	r3, [pc, #156]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd32:	4a26      	ldr	r2, [pc, #152]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd34:	f023 0310 	bic.w	r3, r3, #16
 800dd38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dd3a:	4b24      	ldr	r3, [pc, #144]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd3e:	4b24      	ldr	r3, [pc, #144]	@ (800ddd0 <RCCEx_PLL2_Config+0x160>)
 800dd40:	4013      	ands	r3, r2
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	69d2      	ldr	r2, [r2, #28]
 800dd46:	00d2      	lsls	r2, r2, #3
 800dd48:	4920      	ldr	r1, [pc, #128]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dd4e:	4b1f      	ldr	r3, [pc, #124]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd52:	4a1e      	ldr	r2, [pc, #120]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd54:	f043 0310 	orr.w	r3, r3, #16
 800dd58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dd60:	4b1a      	ldr	r3, [pc, #104]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd64:	4a19      	ldr	r2, [pc, #100]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd6c:	e00f      	b.n	800dd8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d106      	bne.n	800dd82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dd74:	4b15      	ldr	r3, [pc, #84]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd78:	4a14      	ldr	r2, [pc, #80]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd80:	e005      	b.n	800dd8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dd82:	4b12      	ldr	r3, [pc, #72]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd86:	4a11      	ldr	r2, [pc, #68]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dd8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dd8e:	4b0f      	ldr	r3, [pc, #60]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a0e      	ldr	r2, [pc, #56]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800dd94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd9a:	f7f5 f919 	bl	8002fd0 <HAL_GetTick>
 800dd9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dda0:	e008      	b.n	800ddb4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dda2:	f7f5 f915 	bl	8002fd0 <HAL_GetTick>
 800dda6:	4602      	mov	r2, r0
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	1ad3      	subs	r3, r2, r3
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d901      	bls.n	800ddb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	e006      	b.n	800ddc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ddb4:	4b05      	ldr	r3, [pc, #20]	@ (800ddcc <RCCEx_PLL2_Config+0x15c>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d0f0      	beq.n	800dda2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ddc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	58024400 	.word	0x58024400
 800ddd0:	ffff0007 	.word	0xffff0007

0800ddd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ddde:	2300      	movs	r3, #0
 800dde0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dde2:	4b53      	ldr	r3, [pc, #332]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800dde4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde6:	f003 0303 	and.w	r3, r3, #3
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d101      	bne.n	800ddf2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e099      	b.n	800df26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ddf2:	4b4f      	ldr	r3, [pc, #316]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4a4e      	ldr	r2, [pc, #312]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800ddf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ddfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddfe:	f7f5 f8e7 	bl	8002fd0 <HAL_GetTick>
 800de02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de04:	e008      	b.n	800de18 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de06:	f7f5 f8e3 	bl	8002fd0 <HAL_GetTick>
 800de0a:	4602      	mov	r2, r0
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	2b02      	cmp	r3, #2
 800de12:	d901      	bls.n	800de18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de14:	2303      	movs	r3, #3
 800de16:	e086      	b.n	800df26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de18:	4b45      	ldr	r3, [pc, #276]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1f0      	bne.n	800de06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800de24:	4b42      	ldr	r3, [pc, #264]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800de26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de28:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	051b      	lsls	r3, r3, #20
 800de32:	493f      	ldr	r1, [pc, #252]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800de34:	4313      	orrs	r3, r2
 800de36:	628b      	str	r3, [r1, #40]	@ 0x28
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	689b      	ldr	r3, [r3, #8]
 800de46:	3b01      	subs	r3, #1
 800de48:	025b      	lsls	r3, r3, #9
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	431a      	orrs	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	3b01      	subs	r3, #1
 800de54:	041b      	lsls	r3, r3, #16
 800de56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800de5a:	431a      	orrs	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	3b01      	subs	r3, #1
 800de62:	061b      	lsls	r3, r3, #24
 800de64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800de68:	4931      	ldr	r1, [pc, #196]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800de6a:	4313      	orrs	r3, r2
 800de6c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800de6e:	4b30      	ldr	r3, [pc, #192]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800de70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	492d      	ldr	r1, [pc, #180]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800de7c:	4313      	orrs	r3, r2
 800de7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800de80:	4b2b      	ldr	r3, [pc, #172]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800de82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de84:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	4928      	ldr	r1, [pc, #160]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800de8e:	4313      	orrs	r3, r2
 800de90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800de92:	4b27      	ldr	r3, [pc, #156]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800de94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de96:	4a26      	ldr	r2, [pc, #152]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800de98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800de9e:	4b24      	ldr	r3, [pc, #144]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800dea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dea2:	4b24      	ldr	r3, [pc, #144]	@ (800df34 <RCCEx_PLL3_Config+0x160>)
 800dea4:	4013      	ands	r3, r2
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	69d2      	ldr	r2, [r2, #28]
 800deaa:	00d2      	lsls	r2, r2, #3
 800deac:	4920      	ldr	r1, [pc, #128]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800deae:	4313      	orrs	r3, r2
 800deb0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800deb2:	4b1f      	ldr	r3, [pc, #124]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800deb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deb6:	4a1e      	ldr	r2, [pc, #120]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800deb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800debc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d106      	bne.n	800ded2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dec4:	4b1a      	ldr	r3, [pc, #104]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800dec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec8:	4a19      	ldr	r2, [pc, #100]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800deca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dece:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ded0:	e00f      	b.n	800def2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d106      	bne.n	800dee6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ded8:	4b15      	ldr	r3, [pc, #84]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800deda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dedc:	4a14      	ldr	r2, [pc, #80]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800dede:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dee2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dee4:	e005      	b.n	800def2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dee6:	4b12      	ldr	r3, [pc, #72]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800dee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deea:	4a11      	ldr	r2, [pc, #68]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800deec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800def0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800def2:	4b0f      	ldr	r3, [pc, #60]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a0e      	ldr	r2, [pc, #56]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800def8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800defc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800defe:	f7f5 f867 	bl	8002fd0 <HAL_GetTick>
 800df02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df04:	e008      	b.n	800df18 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800df06:	f7f5 f863 	bl	8002fd0 <HAL_GetTick>
 800df0a:	4602      	mov	r2, r0
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	1ad3      	subs	r3, r2, r3
 800df10:	2b02      	cmp	r3, #2
 800df12:	d901      	bls.n	800df18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df14:	2303      	movs	r3, #3
 800df16:	e006      	b.n	800df26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df18:	4b05      	ldr	r3, [pc, #20]	@ (800df30 <RCCEx_PLL3_Config+0x15c>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800df20:	2b00      	cmp	r3, #0
 800df22:	d0f0      	beq.n	800df06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800df24:	7bfb      	ldrb	r3, [r7, #15]
}
 800df26:	4618      	mov	r0, r3
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	58024400 	.word	0x58024400
 800df34:	ffff0007 	.word	0xffff0007

0800df38 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d101      	bne.n	800df4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df46:	2301      	movs	r3, #1
 800df48:	e10f      	b.n	800e16a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2200      	movs	r2, #0
 800df4e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a87      	ldr	r2, [pc, #540]	@ (800e174 <HAL_SPI_Init+0x23c>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d00f      	beq.n	800df7a <HAL_SPI_Init+0x42>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a86      	ldr	r2, [pc, #536]	@ (800e178 <HAL_SPI_Init+0x240>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d00a      	beq.n	800df7a <HAL_SPI_Init+0x42>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a84      	ldr	r2, [pc, #528]	@ (800e17c <HAL_SPI_Init+0x244>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d005      	beq.n	800df7a <HAL_SPI_Init+0x42>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	2b0f      	cmp	r3, #15
 800df74:	d901      	bls.n	800df7a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800df76:	2301      	movs	r3, #1
 800df78:	e0f7      	b.n	800e16a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f001 f8fc 	bl	800f178 <SPI_GetPacketSize>
 800df80:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a7b      	ldr	r2, [pc, #492]	@ (800e174 <HAL_SPI_Init+0x23c>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d00c      	beq.n	800dfa6 <HAL_SPI_Init+0x6e>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a79      	ldr	r2, [pc, #484]	@ (800e178 <HAL_SPI_Init+0x240>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d007      	beq.n	800dfa6 <HAL_SPI_Init+0x6e>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a78      	ldr	r2, [pc, #480]	@ (800e17c <HAL_SPI_Init+0x244>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d002      	beq.n	800dfa6 <HAL_SPI_Init+0x6e>
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2b08      	cmp	r3, #8
 800dfa4:	d811      	bhi.n	800dfca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dfaa:	4a72      	ldr	r2, [pc, #456]	@ (800e174 <HAL_SPI_Init+0x23c>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d009      	beq.n	800dfc4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a70      	ldr	r2, [pc, #448]	@ (800e178 <HAL_SPI_Init+0x240>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d004      	beq.n	800dfc4 <HAL_SPI_Init+0x8c>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a6f      	ldr	r2, [pc, #444]	@ (800e17c <HAL_SPI_Init+0x244>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d104      	bne.n	800dfce <HAL_SPI_Init+0x96>
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2b10      	cmp	r3, #16
 800dfc8:	d901      	bls.n	800dfce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e0cd      	b.n	800e16a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f7f4 fd18 	bl	8002a18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2202      	movs	r2, #2
 800dfec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f022 0201 	bic.w	r2, r2, #1
 800dffe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800e00a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e014:	d119      	bne.n	800e04a <HAL_SPI_Init+0x112>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e01e:	d103      	bne.n	800e028 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e024:	2b00      	cmp	r3, #0
 800e026:	d008      	beq.n	800e03a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10c      	bne.n	800e04a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e038:	d107      	bne.n	800e04a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e048:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e052:	2b00      	cmp	r3, #0
 800e054:	d00f      	beq.n	800e076 <HAL_SPI_Init+0x13e>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	2b06      	cmp	r3, #6
 800e05c:	d90b      	bls.n	800e076 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	430a      	orrs	r2, r1
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	e007      	b.n	800e086 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e084:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	69da      	ldr	r2, [r3, #28]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e08e:	431a      	orrs	r2, r3
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	431a      	orrs	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e098:	ea42 0103 	orr.w	r1, r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68da      	ldr	r2, [r3, #12]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	430a      	orrs	r2, r1
 800e0a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0b0:	431a      	orrs	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0b6:	431a      	orrs	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	699b      	ldr	r3, [r3, #24]
 800e0bc:	431a      	orrs	r2, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	691b      	ldr	r3, [r3, #16]
 800e0c2:	431a      	orrs	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	695b      	ldr	r3, [r3, #20]
 800e0c8:	431a      	orrs	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a1b      	ldr	r3, [r3, #32]
 800e0ce:	431a      	orrs	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	431a      	orrs	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0da:	431a      	orrs	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	431a      	orrs	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0e6:	ea42 0103 	orr.w	r1, r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	430a      	orrs	r2, r1
 800e0f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	685b      	ldr	r3, [r3, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d113      	bne.n	800e126 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e110:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e124:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f022 0201 	bic.w	r2, r2, #1
 800e134:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00a      	beq.n	800e158 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	430a      	orrs	r2, r1
 800e156:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2201      	movs	r2, #1
 800e164:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e168:	2300      	movs	r3, #0
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	40013000 	.word	0x40013000
 800e178:	40003800 	.word	0x40003800
 800e17c:	40003c00 	.word	0x40003c00

0800e180 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b088      	sub	sp, #32
 800e184:	af02      	add	r7, sp, #8
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	603b      	str	r3, [r7, #0]
 800e18c:	4613      	mov	r3, r2
 800e18e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	3320      	adds	r3, #32
 800e196:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e198:	f7f4 ff1a 	bl	8002fd0 <HAL_GetTick>
 800e19c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d001      	beq.n	800e1ae <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800e1aa:	2302      	movs	r3, #2
 800e1ac:	e1d1      	b.n	800e552 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <HAL_SPI_Transmit+0x3a>
 800e1b4:	88fb      	ldrh	r3, [r7, #6]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e1c9      	b.n	800e552 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d101      	bne.n	800e1cc <HAL_SPI_Transmit+0x4c>
 800e1c8:	2302      	movs	r3, #2
 800e1ca:	e1c2      	b.n	800e552 <HAL_SPI_Transmit+0x3d2>
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2203      	movs	r2, #3
 800e1d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	68ba      	ldr	r2, [r7, #8]
 800e1e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	88fa      	ldrh	r2, [r7, #6]
 800e1ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	88fa      	ldrh	r2, [r7, #6]
 800e1f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2200      	movs	r2, #0
 800e204:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2200      	movs	r2, #0
 800e20c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2200      	movs	r2, #0
 800e214:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2200      	movs	r2, #0
 800e21a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800e224:	d108      	bne.n	800e238 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e234:	601a      	str	r2, [r3, #0]
 800e236:	e009      	b.n	800e24c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e24a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	685a      	ldr	r2, [r3, #4]
 800e252:	4b96      	ldr	r3, [pc, #600]	@ (800e4ac <HAL_SPI_Transmit+0x32c>)
 800e254:	4013      	ands	r3, r2
 800e256:	88f9      	ldrh	r1, [r7, #6]
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	6812      	ldr	r2, [r2, #0]
 800e25c:	430b      	orrs	r3, r1
 800e25e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f042 0201 	orr.w	r2, r2, #1
 800e26e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e278:	d107      	bne.n	800e28a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e288:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	2b0f      	cmp	r3, #15
 800e290:	d947      	bls.n	800e322 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e292:	e03f      	b.n	800e314 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	695b      	ldr	r3, [r3, #20]
 800e29a:	f003 0302 	and.w	r3, r3, #2
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	d114      	bne.n	800e2cc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	6812      	ldr	r2, [r2, #0]
 800e2ac:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2b2:	1d1a      	adds	r2, r3, #4
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	b29a      	uxth	r2, r3
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e2ca:	e023      	b.n	800e314 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2cc:	f7f4 fe80 	bl	8002fd0 <HAL_GetTick>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	683a      	ldr	r2, [r7, #0]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d803      	bhi.n	800e2e4 <HAL_SPI_Transmit+0x164>
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2e2:	d102      	bne.n	800e2ea <HAL_SPI_Transmit+0x16a>
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d114      	bne.n	800e314 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f000 fe76 	bl	800efdc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e310:	2303      	movs	r3, #3
 800e312:	e11e      	b.n	800e552 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d1b9      	bne.n	800e294 <HAL_SPI_Transmit+0x114>
 800e320:	e0f1      	b.n	800e506 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	2b07      	cmp	r3, #7
 800e328:	f240 80e6 	bls.w	800e4f8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e32c:	e05d      	b.n	800e3ea <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	695b      	ldr	r3, [r3, #20]
 800e334:	f003 0302 	and.w	r3, r3, #2
 800e338:	2b02      	cmp	r3, #2
 800e33a:	d132      	bne.n	800e3a2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e342:	b29b      	uxth	r3, r3
 800e344:	2b01      	cmp	r3, #1
 800e346:	d918      	bls.n	800e37a <HAL_SPI_Transmit+0x1fa>
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d014      	beq.n	800e37a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	6812      	ldr	r2, [r2, #0]
 800e35a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e360:	1d1a      	adds	r2, r3, #4
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	3b02      	subs	r3, #2
 800e370:	b29a      	uxth	r2, r3
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e378:	e037      	b.n	800e3ea <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e37e:	881a      	ldrh	r2, [r3, #0]
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e388:	1c9a      	adds	r2, r3, #2
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e394:	b29b      	uxth	r3, r3
 800e396:	3b01      	subs	r3, #1
 800e398:	b29a      	uxth	r2, r3
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e3a0:	e023      	b.n	800e3ea <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3a2:	f7f4 fe15 	bl	8002fd0 <HAL_GetTick>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	683a      	ldr	r2, [r7, #0]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d803      	bhi.n	800e3ba <HAL_SPI_Transmit+0x23a>
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b8:	d102      	bne.n	800e3c0 <HAL_SPI_Transmit+0x240>
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d114      	bne.n	800e3ea <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f000 fe0b 	bl	800efdc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	e0b3      	b.n	800e552 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d19b      	bne.n	800e32e <HAL_SPI_Transmit+0x1ae>
 800e3f6:	e086      	b.n	800e506 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	695b      	ldr	r3, [r3, #20]
 800e3fe:	f003 0302 	and.w	r3, r3, #2
 800e402:	2b02      	cmp	r3, #2
 800e404:	d154      	bne.n	800e4b0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	2b03      	cmp	r3, #3
 800e410:	d918      	bls.n	800e444 <HAL_SPI_Transmit+0x2c4>
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e416:	2b40      	cmp	r3, #64	@ 0x40
 800e418:	d914      	bls.n	800e444 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6812      	ldr	r2, [r2, #0]
 800e424:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e42a:	1d1a      	adds	r2, r3, #4
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e436:	b29b      	uxth	r3, r3
 800e438:	3b04      	subs	r3, #4
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e442:	e059      	b.n	800e4f8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d917      	bls.n	800e480 <HAL_SPI_Transmit+0x300>
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e454:	2b00      	cmp	r3, #0
 800e456:	d013      	beq.n	800e480 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e45c:	881a      	ldrh	r2, [r3, #0]
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e466:	1c9a      	adds	r2, r3, #2
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e472:	b29b      	uxth	r3, r3
 800e474:	3b02      	subs	r3, #2
 800e476:	b29a      	uxth	r2, r3
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e47e:	e03b      	b.n	800e4f8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	3320      	adds	r3, #32
 800e48a:	7812      	ldrb	r2, [r2, #0]
 800e48c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e492:	1c5a      	adds	r2, r3, #1
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e4aa:	e025      	b.n	800e4f8 <HAL_SPI_Transmit+0x378>
 800e4ac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4b0:	f7f4 fd8e 	bl	8002fd0 <HAL_GetTick>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	683a      	ldr	r2, [r7, #0]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d803      	bhi.n	800e4c8 <HAL_SPI_Transmit+0x348>
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c6:	d102      	bne.n	800e4ce <HAL_SPI_Transmit+0x34e>
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d114      	bne.n	800e4f8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f000 fd84 	bl	800efdc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e4f4:	2303      	movs	r3, #3
 800e4f6:	e02c      	b.n	800e552 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	2b00      	cmp	r3, #0
 800e502:	f47f af79 	bne.w	800e3f8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	2200      	movs	r2, #0
 800e50e:	2108      	movs	r1, #8
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f000 fe03 	bl	800f11c <SPI_WaitOnFlagUntilTimeout>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d007      	beq.n	800e52c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e522:	f043 0220 	orr.w	r2, r3, #32
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 fd55 	bl	800efdc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2201      	movs	r2, #1
 800e536:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800e54c:	2301      	movs	r3, #1
 800e54e:	e000      	b.n	800e552 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800e550:	2300      	movs	r3, #0
  }
}
 800e552:	4618      	mov	r0, r3
 800e554:	3718      	adds	r7, #24
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop

0800e55c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b08e      	sub	sp, #56	@ 0x38
 800e560:	af02      	add	r7, sp, #8
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
 800e568:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	3320      	adds	r3, #32
 800e570:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	3330      	adds	r3, #48	@ 0x30
 800e578:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e57e:	095b      	lsrs	r3, r3, #5
 800e580:	b29b      	uxth	r3, r3
 800e582:	3301      	adds	r3, #1
 800e584:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e586:	f7f4 fd23 	bl	8002fd0 <HAL_GetTick>
 800e58a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800e58c:	887b      	ldrh	r3, [r7, #2]
 800e58e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800e590:	887b      	ldrh	r3, [r7, #2]
 800e592:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d001      	beq.n	800e5a4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	e310      	b.n	800ebc6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d005      	beq.n	800e5b6 <HAL_SPI_TransmitReceive+0x5a>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d002      	beq.n	800e5b6 <HAL_SPI_TransmitReceive+0x5a>
 800e5b0:	887b      	ldrh	r3, [r7, #2]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d101      	bne.n	800e5ba <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	e305      	b.n	800ebc6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d101      	bne.n	800e5c8 <HAL_SPI_TransmitReceive+0x6c>
 800e5c4:	2302      	movs	r3, #2
 800e5c6:	e2fe      	b.n	800ebc6 <HAL_SPI_TransmitReceive+0x66a>
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2205      	movs	r2, #5
 800e5d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	887a      	ldrh	r2, [r7, #2]
 800e5ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	887a      	ldrh	r2, [r7, #2]
 800e5f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	68ba      	ldr	r2, [r7, #8]
 800e5fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	887a      	ldrh	r2, [r7, #2]
 800e600:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	887a      	ldrh	r2, [r7, #2]
 800e608:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2200      	movs	r2, #0
 800e610:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2200      	movs	r2, #0
 800e616:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	68da      	ldr	r2, [r3, #12]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800e626:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a70      	ldr	r2, [pc, #448]	@ (800e7f0 <HAL_SPI_TransmitReceive+0x294>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d009      	beq.n	800e646 <HAL_SPI_TransmitReceive+0xea>
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a6f      	ldr	r2, [pc, #444]	@ (800e7f4 <HAL_SPI_TransmitReceive+0x298>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d004      	beq.n	800e646 <HAL_SPI_TransmitReceive+0xea>
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4a6d      	ldr	r2, [pc, #436]	@ (800e7f8 <HAL_SPI_TransmitReceive+0x29c>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d102      	bne.n	800e64c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800e646:	2310      	movs	r3, #16
 800e648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e64a:	e001      	b.n	800e650 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800e64c:	2308      	movs	r3, #8
 800e64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	685a      	ldr	r2, [r3, #4]
 800e656:	4b69      	ldr	r3, [pc, #420]	@ (800e7fc <HAL_SPI_TransmitReceive+0x2a0>)
 800e658:	4013      	ands	r3, r2
 800e65a:	8879      	ldrh	r1, [r7, #2]
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	6812      	ldr	r2, [r2, #0]
 800e660:	430b      	orrs	r3, r1
 800e662:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f042 0201 	orr.w	r2, r2, #1
 800e672:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e67c:	d107      	bne.n	800e68e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e68c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	2b0f      	cmp	r3, #15
 800e694:	f240 80a2 	bls.w	800e7dc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800e698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e69a:	089b      	lsrs	r3, r3, #2
 800e69c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e69e:	e094      	b.n	800e7ca <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	695b      	ldr	r3, [r3, #20]
 800e6a6:	f003 0302 	and.w	r3, r3, #2
 800e6aa:	2b02      	cmp	r3, #2
 800e6ac:	d120      	bne.n	800e6f0 <HAL_SPI_TransmitReceive+0x194>
 800e6ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d01d      	beq.n	800e6f0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e6b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e6b6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d217      	bcs.n	800e6f0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	6812      	ldr	r2, [r2, #0]
 800e6ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e6d0:	1d1a      	adds	r2, r3, #4
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e6ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	695b      	ldr	r3, [r3, #20]
 800e6f6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e6f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d065      	beq.n	800e7ca <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	695b      	ldr	r3, [r3, #20]
 800e704:	f003 0301 	and.w	r3, r3, #1
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d118      	bne.n	800e73e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e714:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e716:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e71c:	1d1a      	adds	r2, r3, #4
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e728:	b29b      	uxth	r3, r3
 800e72a:	3b01      	subs	r3, #1
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e73a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e73c:	e045      	b.n	800e7ca <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e73e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e740:	8bfb      	ldrh	r3, [r7, #30]
 800e742:	429a      	cmp	r2, r3
 800e744:	d21d      	bcs.n	800e782 <HAL_SPI_TransmitReceive+0x226>
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d018      	beq.n	800e782 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e758:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e75a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e760:	1d1a      	adds	r2, r3, #4
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	3b01      	subs	r3, #1
 800e770:	b29a      	uxth	r2, r3
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e77e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e780:	e023      	b.n	800e7ca <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e782:	f7f4 fc25 	bl	8002fd0 <HAL_GetTick>
 800e786:	4602      	mov	r2, r0
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	1ad3      	subs	r3, r2, r3
 800e78c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e78e:	429a      	cmp	r2, r3
 800e790:	d803      	bhi.n	800e79a <HAL_SPI_TransmitReceive+0x23e>
 800e792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e798:	d102      	bne.n	800e7a0 <HAL_SPI_TransmitReceive+0x244>
 800e79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d114      	bne.n	800e7ca <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	f000 fc1b 	bl	800efdc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e7c6:	2303      	movs	r3, #3
 800e7c8:	e1fd      	b.n	800ebc6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e7ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f47f af67 	bne.w	800e6a0 <HAL_SPI_TransmitReceive+0x144>
 800e7d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f47f af63 	bne.w	800e6a0 <HAL_SPI_TransmitReceive+0x144>
 800e7da:	e1ce      	b.n	800eb7a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	2b07      	cmp	r3, #7
 800e7e2:	f240 81c2 	bls.w	800eb6a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800e7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e8:	085b      	lsrs	r3, r3, #1
 800e7ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e7ec:	e0c9      	b.n	800e982 <HAL_SPI_TransmitReceive+0x426>
 800e7ee:	bf00      	nop
 800e7f0:	40013000 	.word	0x40013000
 800e7f4:	40003800 	.word	0x40003800
 800e7f8:	40003c00 	.word	0x40003c00
 800e7fc:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	695b      	ldr	r3, [r3, #20]
 800e806:	f003 0302 	and.w	r3, r3, #2
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	d11f      	bne.n	800e84e <HAL_SPI_TransmitReceive+0x2f2>
 800e80e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e810:	2b00      	cmp	r3, #0
 800e812:	d01c      	beq.n	800e84e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e814:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e816:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d216      	bcs.n	800e84e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e824:	881a      	ldrh	r2, [r3, #0]
 800e826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e828:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e82e:	1c9a      	adds	r2, r3, #2
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	3b01      	subs	r3, #1
 800e83e:	b29a      	uxth	r2, r3
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e84c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	695b      	ldr	r3, [r3, #20]
 800e854:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e856:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f000 8092 	beq.w	800e982 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	695b      	ldr	r3, [r3, #20]
 800e864:	f003 0301 	and.w	r3, r3, #1
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d118      	bne.n	800e89e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e870:	6a3a      	ldr	r2, [r7, #32]
 800e872:	8812      	ldrh	r2, [r2, #0]
 800e874:	b292      	uxth	r2, r2
 800e876:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e87c:	1c9a      	adds	r2, r3, #2
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e888:	b29b      	uxth	r3, r3
 800e88a:	3b01      	subs	r3, #1
 800e88c:	b29a      	uxth	r2, r3
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e89a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e89c:	e071      	b.n	800e982 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e89e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e8a0:	8bfb      	ldrh	r3, [r7, #30]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d228      	bcs.n	800e8f8 <HAL_SPI_TransmitReceive+0x39c>
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d023      	beq.n	800e8f8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8b4:	6a3a      	ldr	r2, [r7, #32]
 800e8b6:	8812      	ldrh	r2, [r2, #0]
 800e8b8:	b292      	uxth	r2, r2
 800e8ba:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8c0:	1c9a      	adds	r2, r3, #2
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8ca:	6a3a      	ldr	r2, [r7, #32]
 800e8cc:	8812      	ldrh	r2, [r2, #0]
 800e8ce:	b292      	uxth	r2, r2
 800e8d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8d6:	1c9a      	adds	r2, r3, #2
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	3b02      	subs	r3, #2
 800e8e6:	b29a      	uxth	r2, r3
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e8f4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e8f6:	e044      	b.n	800e982 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e8f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d11d      	bne.n	800e93a <HAL_SPI_TransmitReceive+0x3de>
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d018      	beq.n	800e93a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e90c:	6a3a      	ldr	r2, [r7, #32]
 800e90e:	8812      	ldrh	r2, [r2, #0]
 800e910:	b292      	uxth	r2, r2
 800e912:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e918:	1c9a      	adds	r2, r3, #2
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e924:	b29b      	uxth	r3, r3
 800e926:	3b01      	subs	r3, #1
 800e928:	b29a      	uxth	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e936:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e938:	e023      	b.n	800e982 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e93a:	f7f4 fb49 	bl	8002fd0 <HAL_GetTick>
 800e93e:	4602      	mov	r2, r0
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e946:	429a      	cmp	r2, r3
 800e948:	d803      	bhi.n	800e952 <HAL_SPI_TransmitReceive+0x3f6>
 800e94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e950:	d102      	bne.n	800e958 <HAL_SPI_TransmitReceive+0x3fc>
 800e952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e954:	2b00      	cmp	r3, #0
 800e956:	d114      	bne.n	800e982 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f000 fb3f 	bl	800efdc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e964:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2201      	movs	r2, #1
 800e972:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2200      	movs	r2, #0
 800e97a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e97e:	2303      	movs	r3, #3
 800e980:	e121      	b.n	800ebc6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e982:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e984:	2b00      	cmp	r3, #0
 800e986:	f47f af3b 	bne.w	800e800 <HAL_SPI_TransmitReceive+0x2a4>
 800e98a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f47f af37 	bne.w	800e800 <HAL_SPI_TransmitReceive+0x2a4>
 800e992:	e0f2      	b.n	800eb7a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	695b      	ldr	r3, [r3, #20]
 800e99a:	f003 0302 	and.w	r3, r3, #2
 800e99e:	2b02      	cmp	r3, #2
 800e9a0:	d121      	bne.n	800e9e6 <HAL_SPI_TransmitReceive+0x48a>
 800e9a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d01e      	beq.n	800e9e6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e9a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e9aa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ae:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d218      	bcs.n	800e9e6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	3320      	adds	r3, #32
 800e9be:	7812      	ldrb	r2, [r2, #0]
 800e9c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e9c6:	1c5a      	adds	r2, r3, #1
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e9e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	695b      	ldr	r3, [r3, #20]
 800e9ec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e9ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f000 80ba 	beq.w	800eb6a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	695b      	ldr	r3, [r3, #20]
 800e9fc:	f003 0301 	and.w	r3, r3, #1
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d11b      	bne.n	800ea3c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea10:	7812      	ldrb	r2, [r2, #0]
 800ea12:	b2d2      	uxtb	r2, r2
 800ea14:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ea38:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ea3a:	e096      	b.n	800eb6a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ea3c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ea3e:	8bfb      	ldrh	r3, [r7, #30]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d24a      	bcs.n	800eada <HAL_SPI_TransmitReceive+0x57e>
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d045      	beq.n	800eada <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea5a:	7812      	ldrb	r2, [r2, #0]
 800ea5c:	b2d2      	uxtb	r2, r2
 800ea5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea64:	1c5a      	adds	r2, r3, #1
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea76:	7812      	ldrb	r2, [r2, #0]
 800ea78:	b2d2      	uxtb	r2, r2
 800ea7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea80:	1c5a      	adds	r2, r3, #1
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea92:	7812      	ldrb	r2, [r2, #0]
 800ea94:	b2d2      	uxtb	r2, r2
 800ea96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea9c:	1c5a      	adds	r2, r3, #1
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eaae:	7812      	ldrb	r2, [r2, #0]
 800eab0:	b2d2      	uxtb	r2, r2
 800eab2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eab8:	1c5a      	adds	r2, r3, #1
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	3b04      	subs	r3, #4
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ead6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ead8:	e047      	b.n	800eb6a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800eada:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eadc:	2b03      	cmp	r3, #3
 800eade:	d820      	bhi.n	800eb22 <HAL_SPI_TransmitReceive+0x5c6>
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d01b      	beq.n	800eb22 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eaf6:	7812      	ldrb	r2, [r2, #0]
 800eaf8:	b2d2      	uxtb	r2, r2
 800eafa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eb00:	1c5a      	adds	r2, r3, #1
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	3b01      	subs	r3, #1
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eb1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800eb20:	e023      	b.n	800eb6a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb22:	f7f4 fa55 	bl	8002fd0 <HAL_GetTick>
 800eb26:	4602      	mov	r2, r0
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	1ad3      	subs	r3, r2, r3
 800eb2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d803      	bhi.n	800eb3a <HAL_SPI_TransmitReceive+0x5de>
 800eb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb38:	d102      	bne.n	800eb40 <HAL_SPI_TransmitReceive+0x5e4>
 800eb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d114      	bne.n	800eb6a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f000 fa4b 	bl	800efdc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800eb66:	2303      	movs	r3, #3
 800eb68:	e02d      	b.n	800ebc6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800eb6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f47f af11 	bne.w	800e994 <HAL_SPI_TransmitReceive+0x438>
 800eb72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f47f af0d 	bne.w	800e994 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800eb7a:	69bb      	ldr	r3, [r7, #24]
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb80:	2200      	movs	r2, #0
 800eb82:	2108      	movs	r1, #8
 800eb84:	68f8      	ldr	r0, [r7, #12]
 800eb86:	f000 fac9 	bl	800f11c <SPI_WaitOnFlagUntilTimeout>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d007      	beq.n	800eba0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb96:	f043 0220 	orr.w	r2, r3, #32
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f000 fa1b 	bl	800efdc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2201      	movs	r2, #1
 800ebaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d001      	beq.n	800ebc4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	e000      	b.n	800ebc6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800ebc4:	2300      	movs	r3, #0
  }
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3730      	adds	r7, #48	@ 0x30
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop

0800ebd0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b08a      	sub	sp, #40	@ 0x28
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	691b      	ldr	r3, [r3, #16]
 800ebde:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	695b      	ldr	r3, [r3, #20]
 800ebe6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800ebe8:	6a3a      	ldr	r2, [r7, #32]
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	4013      	ands	r3, r2
 800ebee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ec02:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	3330      	adds	r3, #48	@ 0x30
 800ec0a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d010      	beq.n	800ec38 <HAL_SPI_IRQHandler+0x68>
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	f003 0308 	and.w	r3, r3, #8
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00b      	beq.n	800ec38 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	699a      	ldr	r2, [r3, #24]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec2e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f000 f9af 	bl	800ef94 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800ec36:	e192      	b.n	800ef5e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ec38:	69bb      	ldr	r3, [r7, #24]
 800ec3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d113      	bne.n	800ec6a <HAL_SPI_IRQHandler+0x9a>
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	f003 0320 	and.w	r3, r3, #32
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d10e      	bne.n	800ec6a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d009      	beq.n	800ec6a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	4798      	blx	r3
    handled = 1UL;
 800ec66:	2301      	movs	r3, #1
 800ec68:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10f      	bne.n	800ec94 <HAL_SPI_IRQHandler+0xc4>
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	f003 0301 	and.w	r3, r3, #1
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00a      	beq.n	800ec94 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d105      	bne.n	800ec94 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	4798      	blx	r3
    handled = 1UL;
 800ec90:	2301      	movs	r3, #1
 800ec92:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	f003 0320 	and.w	r3, r3, #32
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10f      	bne.n	800ecbe <HAL_SPI_IRQHandler+0xee>
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	f003 0302 	and.w	r3, r3, #2
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00a      	beq.n	800ecbe <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d105      	bne.n	800ecbe <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	4798      	blx	r3
    handled = 1UL;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ecbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f040 8147 	bne.w	800ef54 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	f003 0308 	and.w	r3, r3, #8
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	f000 808b 	beq.w	800ede8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	699a      	ldr	r2, [r3, #24]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f042 0208 	orr.w	r2, r2, #8
 800ece0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	699a      	ldr	r2, [r3, #24]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f042 0210 	orr.w	r2, r2, #16
 800ecf0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	699a      	ldr	r2, [r3, #24]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ed00:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	691a      	ldr	r2, [r3, #16]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f022 0208 	bic.w	r2, r2, #8
 800ed10:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d13d      	bne.n	800ed9c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ed20:	e036      	b.n	800ed90 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	2b0f      	cmp	r3, #15
 800ed28:	d90b      	bls.n	800ed42 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ed34:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed3a:	1d1a      	adds	r2, r3, #4
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	665a      	str	r2, [r3, #100]	@ 0x64
 800ed40:	e01d      	b.n	800ed7e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	2b07      	cmp	r3, #7
 800ed48:	d90b      	bls.n	800ed62 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	8812      	ldrh	r2, [r2, #0]
 800ed52:	b292      	uxth	r2, r2
 800ed54:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed5a:	1c9a      	adds	r2, r3, #2
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	665a      	str	r2, [r3, #100]	@ 0x64
 800ed60:	e00d      	b.n	800ed7e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed6e:	7812      	ldrb	r2, [r2, #0]
 800ed70:	b2d2      	uxtb	r2, r2
 800ed72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed78:	1c5a      	adds	r2, r3, #1
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	3b01      	subs	r3, #1
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1c2      	bne.n	800ed22 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 f91d 	bl	800efdc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2201      	movs	r2, #1
 800eda6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d003      	beq.n	800edbc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 f8e3 	bl	800ef80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800edba:	e0d0      	b.n	800ef5e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800edbc:	7cfb      	ldrb	r3, [r7, #19]
 800edbe:	2b05      	cmp	r3, #5
 800edc0:	d103      	bne.n	800edca <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f7f1 fb96 	bl	80004f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800edc8:	e0c6      	b.n	800ef58 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800edca:	7cfb      	ldrb	r3, [r7, #19]
 800edcc:	2b04      	cmp	r3, #4
 800edce:	d103      	bne.n	800edd8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 f8cb 	bl	800ef6c <HAL_SPI_RxCpltCallback>
    return;
 800edd6:	e0bf      	b.n	800ef58 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800edd8:	7cfb      	ldrb	r3, [r7, #19]
 800edda:	2b03      	cmp	r3, #3
 800eddc:	f040 80bc 	bne.w	800ef58 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f7f1 fb77 	bl	80004d4 <HAL_SPI_TxCpltCallback>
    return;
 800ede6:	e0b7      	b.n	800ef58 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800edee:	2b00      	cmp	r3, #0
 800edf0:	f000 80b5 	beq.w	800ef5e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00f      	beq.n	800ee1e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee04:	f043 0204 	orr.w	r2, r3, #4
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	699a      	ldr	r2, [r3, #24]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee1c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00f      	beq.n	800ee48 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee2e:	f043 0201 	orr.w	r2, r3, #1
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	699a      	ldr	r2, [r3, #24]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ee46:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00f      	beq.n	800ee72 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee58:	f043 0208 	orr.w	r2, r3, #8
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	699a      	ldr	r2, [r3, #24]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ee70:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	f003 0320 	and.w	r3, r3, #32
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00f      	beq.n	800ee9c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	699a      	ldr	r2, [r3, #24]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f042 0220 	orr.w	r2, r2, #32
 800ee9a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d05a      	beq.n	800ef5c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f022 0201 	bic.w	r2, r2, #1
 800eeb4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	6919      	ldr	r1, [r3, #16]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	4b28      	ldr	r3, [pc, #160]	@ (800ef64 <HAL_SPI_IRQHandler+0x394>)
 800eec2:	400b      	ands	r3, r1
 800eec4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800eecc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800eed0:	d138      	bne.n	800ef44 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	689a      	ldr	r2, [r3, #8]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800eee0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d013      	beq.n	800ef12 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eeee:	4a1e      	ldr	r2, [pc, #120]	@ (800ef68 <HAL_SPI_IRQHandler+0x398>)
 800eef0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7f6 fd54 	bl	80059a4 <HAL_DMA_Abort_IT>
 800eefc:	4603      	mov	r3, r0
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d007      	beq.n	800ef12 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d020      	beq.n	800ef5c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef1e:	4a12      	ldr	r2, [pc, #72]	@ (800ef68 <HAL_SPI_IRQHandler+0x398>)
 800ef20:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7f6 fd3c 	bl	80059a4 <HAL_DMA_Abort_IT>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d014      	beq.n	800ef5c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ef42:	e00b      	b.n	800ef5c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2201      	movs	r2, #1
 800ef48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 f817 	bl	800ef80 <HAL_SPI_ErrorCallback>
    return;
 800ef52:	e003      	b.n	800ef5c <HAL_SPI_IRQHandler+0x38c>
    return;
 800ef54:	bf00      	nop
 800ef56:	e002      	b.n	800ef5e <HAL_SPI_IRQHandler+0x38e>
    return;
 800ef58:	bf00      	nop
 800ef5a:	e000      	b.n	800ef5e <HAL_SPI_IRQHandler+0x38e>
    return;
 800ef5c:	bf00      	nop
  }
}
 800ef5e:	3728      	adds	r7, #40	@ 0x28
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	fffffc94 	.word	0xfffffc94
 800ef68:	0800efa9 	.word	0x0800efa9

0800ef6c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ef74:	bf00      	nop
 800ef76:	370c      	adds	r7, #12
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ef88:	bf00      	nop
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800ef9c:	bf00      	nop
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2200      	movs	r2, #0
 800efba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2200      	movs	r2, #0
 800efc2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2201      	movs	r2, #1
 800efca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7ff ffd6 	bl	800ef80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800efd4:	bf00      	nop
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800efdc:	b480      	push	{r7}
 800efde:	b085      	sub	sp, #20
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	695b      	ldr	r3, [r3, #20]
 800efea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	699a      	ldr	r2, [r3, #24]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f042 0208 	orr.w	r2, r2, #8
 800effa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	699a      	ldr	r2, [r3, #24]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f042 0210 	orr.w	r2, r2, #16
 800f00a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f022 0201 	bic.w	r2, r2, #1
 800f01a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6919      	ldr	r1, [r3, #16]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	4b3c      	ldr	r3, [pc, #240]	@ (800f118 <SPI_CloseTransfer+0x13c>)
 800f028:	400b      	ands	r3, r1
 800f02a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	689a      	ldr	r2, [r3, #8]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800f03a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f042:	b2db      	uxtb	r3, r3
 800f044:	2b04      	cmp	r3, #4
 800f046:	d014      	beq.n	800f072 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f003 0320 	and.w	r3, r3, #32
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00f      	beq.n	800f072 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f058:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	699a      	ldr	r2, [r3, #24]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f042 0220 	orr.w	r2, r2, #32
 800f070:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	2b03      	cmp	r3, #3
 800f07c:	d014      	beq.n	800f0a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00f      	beq.n	800f0a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f08e:	f043 0204 	orr.w	r2, r3, #4
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	699a      	ldr	r2, [r3, #24]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f0a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00f      	beq.n	800f0d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f0b8:	f043 0201 	orr.w	r2, r3, #1
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	699a      	ldr	r2, [r3, #24]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f0d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d00f      	beq.n	800f0fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f0e2:	f043 0208 	orr.w	r2, r3, #8
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	699a      	ldr	r2, [r3, #24]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f0fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2200      	movs	r2, #0
 800f100:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800f10c:	bf00      	nop
 800f10e:	3714      	adds	r7, #20
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	fffffc90 	.word	0xfffffc90

0800f11c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	603b      	str	r3, [r7, #0]
 800f128:	4613      	mov	r3, r2
 800f12a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f12c:	e010      	b.n	800f150 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f12e:	f7f3 ff4f 	bl	8002fd0 <HAL_GetTick>
 800f132:	4602      	mov	r2, r0
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	1ad3      	subs	r3, r2, r3
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d803      	bhi.n	800f146 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f144:	d102      	bne.n	800f14c <SPI_WaitOnFlagUntilTimeout+0x30>
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f14c:	2303      	movs	r3, #3
 800f14e:	e00f      	b.n	800f170 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	695a      	ldr	r2, [r3, #20]
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	4013      	ands	r3, r2
 800f15a:	68ba      	ldr	r2, [r7, #8]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	bf0c      	ite	eq
 800f160:	2301      	moveq	r3, #1
 800f162:	2300      	movne	r3, #0
 800f164:	b2db      	uxtb	r3, r3
 800f166:	461a      	mov	r2, r3
 800f168:	79fb      	ldrb	r3, [r7, #7]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d0df      	beq.n	800f12e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f16e:	2300      	movs	r3, #0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3710      	adds	r7, #16
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f184:	095b      	lsrs	r3, r3, #5
 800f186:	3301      	adds	r3, #1
 800f188:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	3301      	adds	r3, #1
 800f190:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	3307      	adds	r3, #7
 800f196:	08db      	lsrs	r3, r3, #3
 800f198:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3714      	adds	r7, #20
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
	...

0800f1b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f1b0:	b084      	sub	sp, #16
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b084      	sub	sp, #16
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
 800f1ba:	f107 001c 	add.w	r0, r7, #28
 800f1be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f1c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d121      	bne.n	800f20e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68da      	ldr	r2, [r3, #12]
 800f1da:	4b2c      	ldr	r3, [pc, #176]	@ (800f28c <USB_CoreInit+0xdc>)
 800f1dc:	4013      	ands	r3, r2
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f1ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d105      	bne.n	800f202 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f001 fafa 	bl	80107fc <USB_CoreReset>
 800f208:	4603      	mov	r3, r0
 800f20a:	73fb      	strb	r3, [r7, #15]
 800f20c:	e01b      	b.n	800f246 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f001 faee 	bl	80107fc <USB_CoreReset>
 800f220:	4603      	mov	r3, r0
 800f222:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f224:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d106      	bne.n	800f23a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f230:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	639a      	str	r2, [r3, #56]	@ 0x38
 800f238:	e005      	b.n	800f246 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f23e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f246:	7fbb      	ldrb	r3, [r7, #30]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d116      	bne.n	800f27a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f250:	b29a      	uxth	r2, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f25a:	4b0d      	ldr	r3, [pc, #52]	@ (800f290 <USB_CoreInit+0xe0>)
 800f25c:	4313      	orrs	r3, r2
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	f043 0206 	orr.w	r2, r3, #6
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	f043 0220 	orr.w	r2, r3, #32
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f286:	b004      	add	sp, #16
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	ffbdffbf 	.word	0xffbdffbf
 800f290:	03ee0000 	.word	0x03ee0000

0800f294 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f294:	b480      	push	{r7}
 800f296:	b087      	sub	sp, #28
 800f298:	af00      	add	r7, sp, #0
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	4613      	mov	r3, r2
 800f2a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f2a2:	79fb      	ldrb	r3, [r7, #7]
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	d165      	bne.n	800f374 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	4a41      	ldr	r2, [pc, #260]	@ (800f3b0 <USB_SetTurnaroundTime+0x11c>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d906      	bls.n	800f2be <USB_SetTurnaroundTime+0x2a>
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	4a40      	ldr	r2, [pc, #256]	@ (800f3b4 <USB_SetTurnaroundTime+0x120>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d202      	bcs.n	800f2be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f2b8:	230f      	movs	r3, #15
 800f2ba:	617b      	str	r3, [r7, #20]
 800f2bc:	e062      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	4a3c      	ldr	r2, [pc, #240]	@ (800f3b4 <USB_SetTurnaroundTime+0x120>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d306      	bcc.n	800f2d4 <USB_SetTurnaroundTime+0x40>
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	4a3b      	ldr	r2, [pc, #236]	@ (800f3b8 <USB_SetTurnaroundTime+0x124>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d202      	bcs.n	800f2d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f2ce:	230e      	movs	r3, #14
 800f2d0:	617b      	str	r3, [r7, #20]
 800f2d2:	e057      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	4a38      	ldr	r2, [pc, #224]	@ (800f3b8 <USB_SetTurnaroundTime+0x124>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d306      	bcc.n	800f2ea <USB_SetTurnaroundTime+0x56>
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	4a37      	ldr	r2, [pc, #220]	@ (800f3bc <USB_SetTurnaroundTime+0x128>)
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d202      	bcs.n	800f2ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f2e4:	230d      	movs	r3, #13
 800f2e6:	617b      	str	r3, [r7, #20]
 800f2e8:	e04c      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	4a33      	ldr	r2, [pc, #204]	@ (800f3bc <USB_SetTurnaroundTime+0x128>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d306      	bcc.n	800f300 <USB_SetTurnaroundTime+0x6c>
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	4a32      	ldr	r2, [pc, #200]	@ (800f3c0 <USB_SetTurnaroundTime+0x12c>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d802      	bhi.n	800f300 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f2fa:	230c      	movs	r3, #12
 800f2fc:	617b      	str	r3, [r7, #20]
 800f2fe:	e041      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	4a2f      	ldr	r2, [pc, #188]	@ (800f3c0 <USB_SetTurnaroundTime+0x12c>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d906      	bls.n	800f316 <USB_SetTurnaroundTime+0x82>
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	4a2e      	ldr	r2, [pc, #184]	@ (800f3c4 <USB_SetTurnaroundTime+0x130>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d802      	bhi.n	800f316 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f310:	230b      	movs	r3, #11
 800f312:	617b      	str	r3, [r7, #20]
 800f314:	e036      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	4a2a      	ldr	r2, [pc, #168]	@ (800f3c4 <USB_SetTurnaroundTime+0x130>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d906      	bls.n	800f32c <USB_SetTurnaroundTime+0x98>
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	4a29      	ldr	r2, [pc, #164]	@ (800f3c8 <USB_SetTurnaroundTime+0x134>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d802      	bhi.n	800f32c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f326:	230a      	movs	r3, #10
 800f328:	617b      	str	r3, [r7, #20]
 800f32a:	e02b      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	4a26      	ldr	r2, [pc, #152]	@ (800f3c8 <USB_SetTurnaroundTime+0x134>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d906      	bls.n	800f342 <USB_SetTurnaroundTime+0xae>
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	4a25      	ldr	r2, [pc, #148]	@ (800f3cc <USB_SetTurnaroundTime+0x138>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d202      	bcs.n	800f342 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f33c:	2309      	movs	r3, #9
 800f33e:	617b      	str	r3, [r7, #20]
 800f340:	e020      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	4a21      	ldr	r2, [pc, #132]	@ (800f3cc <USB_SetTurnaroundTime+0x138>)
 800f346:	4293      	cmp	r3, r2
 800f348:	d306      	bcc.n	800f358 <USB_SetTurnaroundTime+0xc4>
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	4a20      	ldr	r2, [pc, #128]	@ (800f3d0 <USB_SetTurnaroundTime+0x13c>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d802      	bhi.n	800f358 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f352:	2308      	movs	r3, #8
 800f354:	617b      	str	r3, [r7, #20]
 800f356:	e015      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	4a1d      	ldr	r2, [pc, #116]	@ (800f3d0 <USB_SetTurnaroundTime+0x13c>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d906      	bls.n	800f36e <USB_SetTurnaroundTime+0xda>
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	4a1c      	ldr	r2, [pc, #112]	@ (800f3d4 <USB_SetTurnaroundTime+0x140>)
 800f364:	4293      	cmp	r3, r2
 800f366:	d202      	bcs.n	800f36e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f368:	2307      	movs	r3, #7
 800f36a:	617b      	str	r3, [r7, #20]
 800f36c:	e00a      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f36e:	2306      	movs	r3, #6
 800f370:	617b      	str	r3, [r7, #20]
 800f372:	e007      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f374:	79fb      	ldrb	r3, [r7, #7]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d102      	bne.n	800f380 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f37a:	2309      	movs	r3, #9
 800f37c:	617b      	str	r3, [r7, #20]
 800f37e:	e001      	b.n	800f384 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f380:	2309      	movs	r3, #9
 800f382:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	68da      	ldr	r2, [r3, #12]
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	029b      	lsls	r3, r3, #10
 800f398:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f39c:	431a      	orrs	r2, r3
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f3a2:	2300      	movs	r3, #0
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	371c      	adds	r7, #28
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr
 800f3b0:	00d8acbf 	.word	0x00d8acbf
 800f3b4:	00e4e1c0 	.word	0x00e4e1c0
 800f3b8:	00f42400 	.word	0x00f42400
 800f3bc:	01067380 	.word	0x01067380
 800f3c0:	011a499f 	.word	0x011a499f
 800f3c4:	01312cff 	.word	0x01312cff
 800f3c8:	014ca43f 	.word	0x014ca43f
 800f3cc:	016e3600 	.word	0x016e3600
 800f3d0:	01a6ab1f 	.word	0x01a6ab1f
 800f3d4:	01e84800 	.word	0x01e84800

0800f3d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	f043 0201 	orr.w	r2, r3, #1
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f3ec:	2300      	movs	r3, #0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f3fa:	b480      	push	{r7}
 800f3fc:	b083      	sub	sp, #12
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	f023 0201 	bic.w	r2, r3, #1
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f40e:	2300      	movs	r3, #0
}
 800f410:	4618      	mov	r0, r3
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	460b      	mov	r3, r1
 800f426:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f428:	2300      	movs	r3, #0
 800f42a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f438:	78fb      	ldrb	r3, [r7, #3]
 800f43a:	2b01      	cmp	r3, #1
 800f43c:	d115      	bne.n	800f46a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f44a:	200a      	movs	r0, #10
 800f44c:	f7f3 fdcc 	bl	8002fe8 <HAL_Delay>
      ms += 10U;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	330a      	adds	r3, #10
 800f454:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f001 f93f 	bl	80106da <USB_GetMode>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d01e      	beq.n	800f4a0 <USB_SetCurrentMode+0x84>
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2bc7      	cmp	r3, #199	@ 0xc7
 800f466:	d9f0      	bls.n	800f44a <USB_SetCurrentMode+0x2e>
 800f468:	e01a      	b.n	800f4a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f46a:	78fb      	ldrb	r3, [r7, #3]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d115      	bne.n	800f49c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f47c:	200a      	movs	r0, #10
 800f47e:	f7f3 fdb3 	bl	8002fe8 <HAL_Delay>
      ms += 10U;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	330a      	adds	r3, #10
 800f486:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f001 f926 	bl	80106da <USB_GetMode>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d005      	beq.n	800f4a0 <USB_SetCurrentMode+0x84>
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	2bc7      	cmp	r3, #199	@ 0xc7
 800f498:	d9f0      	bls.n	800f47c <USB_SetCurrentMode+0x60>
 800f49a:	e001      	b.n	800f4a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f49c:	2301      	movs	r3, #1
 800f49e:	e005      	b.n	800f4ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2bc8      	cmp	r3, #200	@ 0xc8
 800f4a4:	d101      	bne.n	800f4aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e000      	b.n	800f4ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f4aa:	2300      	movs	r3, #0
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3710      	adds	r7, #16
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f4b4:	b084      	sub	sp, #16
 800f4b6:	b580      	push	{r7, lr}
 800f4b8:	b086      	sub	sp, #24
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6078      	str	r0, [r7, #4]
 800f4be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f4c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	613b      	str	r3, [r7, #16]
 800f4d2:	e009      	b.n	800f4e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f4d4:	687a      	ldr	r2, [r7, #4]
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	3340      	adds	r3, #64	@ 0x40
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	4413      	add	r3, r2
 800f4de:	2200      	movs	r2, #0
 800f4e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	613b      	str	r3, [r7, #16]
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	2b0e      	cmp	r3, #14
 800f4ec:	d9f2      	bls.n	800f4d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f4ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d11c      	bne.n	800f530 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f504:	f043 0302 	orr.w	r3, r3, #2
 800f508:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f50e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	601a      	str	r2, [r3, #0]
 800f52e:	e005      	b.n	800f53c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f534:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f542:	461a      	mov	r2, r3
 800f544:	2300      	movs	r3, #0
 800f546:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f548:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d10d      	bne.n	800f56c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f554:	2b00      	cmp	r3, #0
 800f556:	d104      	bne.n	800f562 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f558:	2100      	movs	r1, #0
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 f968 	bl	800f830 <USB_SetDevSpeed>
 800f560:	e008      	b.n	800f574 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f562:	2101      	movs	r1, #1
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f000 f963 	bl	800f830 <USB_SetDevSpeed>
 800f56a:	e003      	b.n	800f574 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f56c:	2103      	movs	r1, #3
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f95e 	bl	800f830 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f574:	2110      	movs	r1, #16
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 f8fa 	bl	800f770 <USB_FlushTxFifo>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d001      	beq.n	800f586 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f582:	2301      	movs	r3, #1
 800f584:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f924 	bl	800f7d4 <USB_FlushRxFifo>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f592:	2301      	movs	r3, #1
 800f594:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f59c:	461a      	mov	r2, r3
 800f59e:	2300      	movs	r3, #0
 800f5a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	613b      	str	r3, [r7, #16]
 800f5be:	e043      	b.n	800f648 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	015a      	lsls	r2, r3, #5
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	4413      	add	r3, r2
 800f5c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f5d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f5d6:	d118      	bne.n	800f60a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10a      	bne.n	800f5f4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	015a      	lsls	r2, r3, #5
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f5f0:	6013      	str	r3, [r2, #0]
 800f5f2:	e013      	b.n	800f61c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	015a      	lsls	r2, r3, #5
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f600:	461a      	mov	r2, r3
 800f602:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f606:	6013      	str	r3, [r2, #0]
 800f608:	e008      	b.n	800f61c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	015a      	lsls	r2, r3, #5
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	4413      	add	r3, r2
 800f612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f616:	461a      	mov	r2, r3
 800f618:	2300      	movs	r3, #0
 800f61a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	015a      	lsls	r2, r3, #5
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	4413      	add	r3, r2
 800f624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f628:	461a      	mov	r2, r3
 800f62a:	2300      	movs	r3, #0
 800f62c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	015a      	lsls	r2, r3, #5
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	4413      	add	r3, r2
 800f636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f63a:	461a      	mov	r2, r3
 800f63c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f640:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	3301      	adds	r3, #1
 800f646:	613b      	str	r3, [r7, #16]
 800f648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f64c:	461a      	mov	r2, r3
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	4293      	cmp	r3, r2
 800f652:	d3b5      	bcc.n	800f5c0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f654:	2300      	movs	r3, #0
 800f656:	613b      	str	r3, [r7, #16]
 800f658:	e043      	b.n	800f6e2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	015a      	lsls	r2, r3, #5
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	4413      	add	r3, r2
 800f662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f66c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f670:	d118      	bne.n	800f6a4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d10a      	bne.n	800f68e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	015a      	lsls	r2, r3, #5
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	4413      	add	r3, r2
 800f680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f684:	461a      	mov	r2, r3
 800f686:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f68a:	6013      	str	r3, [r2, #0]
 800f68c:	e013      	b.n	800f6b6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	015a      	lsls	r2, r3, #5
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	4413      	add	r3, r2
 800f696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f69a:	461a      	mov	r2, r3
 800f69c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f6a0:	6013      	str	r3, [r2, #0]
 800f6a2:	e008      	b.n	800f6b6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	015a      	lsls	r2, r3, #5
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	015a      	lsls	r2, r3, #5
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	4413      	add	r3, r2
 800f6be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	015a      	lsls	r2, r3, #5
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f6da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	3301      	adds	r3, #1
 800f6e0:	613b      	str	r3, [r7, #16]
 800f6e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d3b5      	bcc.n	800f65a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6f4:	691b      	ldr	r3, [r3, #16]
 800f6f6:	68fa      	ldr	r2, [r7, #12]
 800f6f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f6fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f700:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2200      	movs	r2, #0
 800f706:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f70e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f710:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f714:	2b00      	cmp	r3, #0
 800f716:	d105      	bne.n	800f724 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	699b      	ldr	r3, [r3, #24]
 800f71c:	f043 0210 	orr.w	r2, r3, #16
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	699a      	ldr	r2, [r3, #24]
 800f728:	4b0f      	ldr	r3, [pc, #60]	@ (800f768 <USB_DevInit+0x2b4>)
 800f72a:	4313      	orrs	r3, r2
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f730:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f734:	2b00      	cmp	r3, #0
 800f736:	d005      	beq.n	800f744 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	699b      	ldr	r3, [r3, #24]
 800f73c:	f043 0208 	orr.w	r2, r3, #8
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f744:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d105      	bne.n	800f758 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	699a      	ldr	r2, [r3, #24]
 800f750:	4b06      	ldr	r3, [pc, #24]	@ (800f76c <USB_DevInit+0x2b8>)
 800f752:	4313      	orrs	r3, r2
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f758:	7dfb      	ldrb	r3, [r7, #23]
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3718      	adds	r7, #24
 800f75e:	46bd      	mov	sp, r7
 800f760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f764:	b004      	add	sp, #16
 800f766:	4770      	bx	lr
 800f768:	803c3800 	.word	0x803c3800
 800f76c:	40000004 	.word	0x40000004

0800f770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f770:	b480      	push	{r7}
 800f772:	b085      	sub	sp, #20
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f77a:	2300      	movs	r3, #0
 800f77c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	3301      	adds	r3, #1
 800f782:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f78a:	d901      	bls.n	800f790 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f78c:	2303      	movs	r3, #3
 800f78e:	e01b      	b.n	800f7c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	691b      	ldr	r3, [r3, #16]
 800f794:	2b00      	cmp	r3, #0
 800f796:	daf2      	bge.n	800f77e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f798:	2300      	movs	r3, #0
 800f79a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	019b      	lsls	r3, r3, #6
 800f7a0:	f043 0220 	orr.w	r2, r3, #32
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f7b4:	d901      	bls.n	800f7ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f7b6:	2303      	movs	r3, #3
 800f7b8:	e006      	b.n	800f7c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	691b      	ldr	r3, [r3, #16]
 800f7be:	f003 0320 	and.w	r3, r3, #32
 800f7c2:	2b20      	cmp	r3, #32
 800f7c4:	d0f0      	beq.n	800f7a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f7c6:	2300      	movs	r3, #0
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3714      	adds	r7, #20
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr

0800f7d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b085      	sub	sp, #20
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f7ec:	d901      	bls.n	800f7f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f7ee:	2303      	movs	r3, #3
 800f7f0:	e018      	b.n	800f824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	daf2      	bge.n	800f7e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2210      	movs	r2, #16
 800f802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	3301      	adds	r3, #1
 800f808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f810:	d901      	bls.n	800f816 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f812:	2303      	movs	r3, #3
 800f814:	e006      	b.n	800f824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	691b      	ldr	r3, [r3, #16]
 800f81a:	f003 0310 	and.w	r3, r3, #16
 800f81e:	2b10      	cmp	r3, #16
 800f820:	d0f0      	beq.n	800f804 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	3714      	adds	r7, #20
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	460b      	mov	r3, r1
 800f83a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	78fb      	ldrb	r3, [r7, #3]
 800f84a:	68f9      	ldr	r1, [r7, #12]
 800f84c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f850:	4313      	orrs	r3, r2
 800f852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3714      	adds	r7, #20
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr

0800f862 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800f862:	b480      	push	{r7}
 800f864:	b087      	sub	sp, #28
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	f003 0306 	and.w	r3, r3, #6
 800f87a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d102      	bne.n	800f888 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f882:	2300      	movs	r3, #0
 800f884:	75fb      	strb	r3, [r7, #23]
 800f886:	e00a      	b.n	800f89e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	d002      	beq.n	800f894 <USB_GetDevSpeed+0x32>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2b06      	cmp	r3, #6
 800f892:	d102      	bne.n	800f89a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f894:	2302      	movs	r3, #2
 800f896:	75fb      	strb	r3, [r7, #23]
 800f898:	e001      	b.n	800f89e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f89a:	230f      	movs	r3, #15
 800f89c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f89e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	371c      	adds	r7, #28
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b085      	sub	sp, #20
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	785b      	ldrb	r3, [r3, #1]
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d139      	bne.n	800f93c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8ce:	69da      	ldr	r2, [r3, #28]
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	f003 030f 	and.w	r3, r3, #15
 800f8d8:	2101      	movs	r1, #1
 800f8da:	fa01 f303 	lsl.w	r3, r1, r3
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	68f9      	ldr	r1, [r7, #12]
 800f8e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	015a      	lsls	r2, r3, #5
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d153      	bne.n	800f9a8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	015a      	lsls	r2, r3, #5
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	4413      	add	r3, r2
 800f908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	791b      	ldrb	r3, [r3, #4]
 800f91a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f91c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	059b      	lsls	r3, r3, #22
 800f922:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f924:	431a      	orrs	r2, r3
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	0159      	lsls	r1, r3, #5
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	440b      	add	r3, r1
 800f92e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f932:	4619      	mov	r1, r3
 800f934:	4b20      	ldr	r3, [pc, #128]	@ (800f9b8 <USB_ActivateEndpoint+0x10c>)
 800f936:	4313      	orrs	r3, r2
 800f938:	600b      	str	r3, [r1, #0]
 800f93a:	e035      	b.n	800f9a8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f942:	69da      	ldr	r2, [r3, #28]
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	f003 030f 	and.w	r3, r3, #15
 800f94c:	2101      	movs	r1, #1
 800f94e:	fa01 f303 	lsl.w	r3, r1, r3
 800f952:	041b      	lsls	r3, r3, #16
 800f954:	68f9      	ldr	r1, [r7, #12]
 800f956:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f95a:	4313      	orrs	r3, r2
 800f95c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	015a      	lsls	r2, r3, #5
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	4413      	add	r3, r2
 800f966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f970:	2b00      	cmp	r3, #0
 800f972:	d119      	bne.n	800f9a8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	015a      	lsls	r2, r3, #5
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	4413      	add	r3, r2
 800f97c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	689b      	ldr	r3, [r3, #8]
 800f986:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	791b      	ldrb	r3, [r3, #4]
 800f98e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f990:	430b      	orrs	r3, r1
 800f992:	431a      	orrs	r2, r3
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	0159      	lsls	r1, r3, #5
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	440b      	add	r3, r1
 800f99c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	4b05      	ldr	r3, [pc, #20]	@ (800f9b8 <USB_ActivateEndpoint+0x10c>)
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f9a8:	2300      	movs	r3, #0
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3714      	adds	r7, #20
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop
 800f9b8:	10008000 	.word	0x10008000

0800f9bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	785b      	ldrb	r3, [r3, #1]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d161      	bne.n	800fa9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	015a      	lsls	r2, r3, #5
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	4413      	add	r3, r2
 800f9e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f9ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f9ee:	d11f      	bne.n	800fa30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	015a      	lsls	r2, r3, #5
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	68ba      	ldr	r2, [r7, #8]
 800fa00:	0151      	lsls	r1, r2, #5
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	440a      	add	r2, r1
 800fa06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fa0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fa0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	015a      	lsls	r2, r3, #5
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	4413      	add	r3, r2
 800fa18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	0151      	lsls	r1, r2, #5
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	440a      	add	r2, r1
 800fa26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fa2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fa2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	f003 030f 	and.w	r3, r3, #15
 800fa40:	2101      	movs	r1, #1
 800fa42:	fa01 f303 	lsl.w	r3, r1, r3
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	43db      	mvns	r3, r3
 800fa4a:	68f9      	ldr	r1, [r7, #12]
 800fa4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fa50:	4013      	ands	r3, r2
 800fa52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa5a:	69da      	ldr	r2, [r3, #28]
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	f003 030f 	and.w	r3, r3, #15
 800fa64:	2101      	movs	r1, #1
 800fa66:	fa01 f303 	lsl.w	r3, r1, r3
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	43db      	mvns	r3, r3
 800fa6e:	68f9      	ldr	r1, [r7, #12]
 800fa70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fa74:	4013      	ands	r3, r2
 800fa76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	015a      	lsls	r2, r3, #5
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	4413      	add	r3, r2
 800fa80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	0159      	lsls	r1, r3, #5
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	440b      	add	r3, r1
 800fa8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa92:	4619      	mov	r1, r3
 800fa94:	4b35      	ldr	r3, [pc, #212]	@ (800fb6c <USB_DeactivateEndpoint+0x1b0>)
 800fa96:	4013      	ands	r3, r2
 800fa98:	600b      	str	r3, [r1, #0]
 800fa9a:	e060      	b.n	800fb5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	015a      	lsls	r2, r3, #5
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	4413      	add	r3, r2
 800faa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800faae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fab2:	d11f      	bne.n	800faf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	015a      	lsls	r2, r3, #5
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	4413      	add	r3, r2
 800fabc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	68ba      	ldr	r2, [r7, #8]
 800fac4:	0151      	lsls	r1, r2, #5
 800fac6:	68fa      	ldr	r2, [r7, #12]
 800fac8:	440a      	add	r2, r1
 800faca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800face:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fad2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	015a      	lsls	r2, r3, #5
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	4413      	add	r3, r2
 800fadc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68ba      	ldr	r2, [r7, #8]
 800fae4:	0151      	lsls	r1, r2, #5
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	440a      	add	r2, r1
 800faea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800faee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800faf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fafa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	f003 030f 	and.w	r3, r3, #15
 800fb04:	2101      	movs	r1, #1
 800fb06:	fa01 f303 	lsl.w	r3, r1, r3
 800fb0a:	041b      	lsls	r3, r3, #16
 800fb0c:	43db      	mvns	r3, r3
 800fb0e:	68f9      	ldr	r1, [r7, #12]
 800fb10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fb14:	4013      	ands	r3, r2
 800fb16:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb1e:	69da      	ldr	r2, [r3, #28]
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	f003 030f 	and.w	r3, r3, #15
 800fb28:	2101      	movs	r1, #1
 800fb2a:	fa01 f303 	lsl.w	r3, r1, r3
 800fb2e:	041b      	lsls	r3, r3, #16
 800fb30:	43db      	mvns	r3, r3
 800fb32:	68f9      	ldr	r1, [r7, #12]
 800fb34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fb38:	4013      	ands	r3, r2
 800fb3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	015a      	lsls	r2, r3, #5
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	4413      	add	r3, r2
 800fb44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	0159      	lsls	r1, r3, #5
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	440b      	add	r3, r1
 800fb52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb56:	4619      	mov	r1, r3
 800fb58:	4b05      	ldr	r3, [pc, #20]	@ (800fb70 <USB_DeactivateEndpoint+0x1b4>)
 800fb5a:	4013      	ands	r3, r2
 800fb5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3714      	adds	r7, #20
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr
 800fb6c:	ec337800 	.word	0xec337800
 800fb70:	eff37800 	.word	0xeff37800

0800fb74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b08a      	sub	sp, #40	@ 0x28
 800fb78:	af02      	add	r7, sp, #8
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	4613      	mov	r3, r2
 800fb80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	785b      	ldrb	r3, [r3, #1]
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	f040 8185 	bne.w	800fea0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d132      	bne.n	800fc04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fb9e:	69bb      	ldr	r3, [r7, #24]
 800fba0:	015a      	lsls	r2, r3, #5
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	4413      	add	r3, r2
 800fba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbaa:	691a      	ldr	r2, [r3, #16]
 800fbac:	69bb      	ldr	r3, [r7, #24]
 800fbae:	0159      	lsls	r1, r3, #5
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	440b      	add	r3, r1
 800fbb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbb8:	4619      	mov	r1, r3
 800fbba:	4ba7      	ldr	r3, [pc, #668]	@ (800fe58 <USB_EPStartXfer+0x2e4>)
 800fbbc:	4013      	ands	r3, r2
 800fbbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	015a      	lsls	r2, r3, #5
 800fbc4:	69fb      	ldr	r3, [r7, #28]
 800fbc6:	4413      	add	r3, r2
 800fbc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	69ba      	ldr	r2, [r7, #24]
 800fbd0:	0151      	lsls	r1, r2, #5
 800fbd2:	69fa      	ldr	r2, [r7, #28]
 800fbd4:	440a      	add	r2, r1
 800fbd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fbda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fbde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fbe0:	69bb      	ldr	r3, [r7, #24]
 800fbe2:	015a      	lsls	r2, r3, #5
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	4413      	add	r3, r2
 800fbe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbec:	691a      	ldr	r2, [r3, #16]
 800fbee:	69bb      	ldr	r3, [r7, #24]
 800fbf0:	0159      	lsls	r1, r3, #5
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	440b      	add	r3, r1
 800fbf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	4b97      	ldr	r3, [pc, #604]	@ (800fe5c <USB_EPStartXfer+0x2e8>)
 800fbfe:	4013      	ands	r3, r2
 800fc00:	610b      	str	r3, [r1, #16]
 800fc02:	e097      	b.n	800fd34 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc04:	69bb      	ldr	r3, [r7, #24]
 800fc06:	015a      	lsls	r2, r3, #5
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	4413      	add	r3, r2
 800fc0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc10:	691a      	ldr	r2, [r3, #16]
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	0159      	lsls	r1, r3, #5
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	440b      	add	r3, r1
 800fc1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc1e:	4619      	mov	r1, r3
 800fc20:	4b8e      	ldr	r3, [pc, #568]	@ (800fe5c <USB_EPStartXfer+0x2e8>)
 800fc22:	4013      	ands	r3, r2
 800fc24:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fc26:	69bb      	ldr	r3, [r7, #24]
 800fc28:	015a      	lsls	r2, r3, #5
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc32:	691a      	ldr	r2, [r3, #16]
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	0159      	lsls	r1, r3, #5
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	440b      	add	r3, r1
 800fc3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc40:	4619      	mov	r1, r3
 800fc42:	4b85      	ldr	r3, [pc, #532]	@ (800fe58 <USB_EPStartXfer+0x2e4>)
 800fc44:	4013      	ands	r3, r2
 800fc46:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800fc48:	69bb      	ldr	r3, [r7, #24]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d11a      	bne.n	800fc84 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	691a      	ldr	r2, [r3, #16]
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	689b      	ldr	r3, [r3, #8]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d903      	bls.n	800fc62 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	689a      	ldr	r2, [r3, #8]
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	015a      	lsls	r2, r3, #5
 800fc66:	69fb      	ldr	r3, [r7, #28]
 800fc68:	4413      	add	r3, r2
 800fc6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	69ba      	ldr	r2, [r7, #24]
 800fc72:	0151      	lsls	r1, r2, #5
 800fc74:	69fa      	ldr	r2, [r7, #28]
 800fc76:	440a      	add	r2, r1
 800fc78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fc80:	6113      	str	r3, [r2, #16]
 800fc82:	e044      	b.n	800fd0e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	691a      	ldr	r2, [r3, #16]
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	689b      	ldr	r3, [r3, #8]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	1e5a      	subs	r2, r3, #1
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc98:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	015a      	lsls	r2, r3, #5
 800fc9e:	69fb      	ldr	r3, [r7, #28]
 800fca0:	4413      	add	r3, r2
 800fca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fca6:	691a      	ldr	r2, [r3, #16]
 800fca8:	8afb      	ldrh	r3, [r7, #22]
 800fcaa:	04d9      	lsls	r1, r3, #19
 800fcac:	4b6c      	ldr	r3, [pc, #432]	@ (800fe60 <USB_EPStartXfer+0x2ec>)
 800fcae:	400b      	ands	r3, r1
 800fcb0:	69b9      	ldr	r1, [r7, #24]
 800fcb2:	0148      	lsls	r0, r1, #5
 800fcb4:	69f9      	ldr	r1, [r7, #28]
 800fcb6:	4401      	add	r1, r0
 800fcb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	791b      	ldrb	r3, [r3, #4]
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d122      	bne.n	800fd0e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	015a      	lsls	r2, r3, #5
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	4413      	add	r3, r2
 800fcd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	69ba      	ldr	r2, [r7, #24]
 800fcd8:	0151      	lsls	r1, r2, #5
 800fcda:	69fa      	ldr	r2, [r7, #28]
 800fcdc:	440a      	add	r2, r1
 800fcde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fce2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800fce6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800fce8:	69bb      	ldr	r3, [r7, #24]
 800fcea:	015a      	lsls	r2, r3, #5
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	4413      	add	r3, r2
 800fcf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcf4:	691a      	ldr	r2, [r3, #16]
 800fcf6:	8afb      	ldrh	r3, [r7, #22]
 800fcf8:	075b      	lsls	r3, r3, #29
 800fcfa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800fcfe:	69b9      	ldr	r1, [r7, #24]
 800fd00:	0148      	lsls	r0, r1, #5
 800fd02:	69f9      	ldr	r1, [r7, #28]
 800fd04:	4401      	add	r1, r0
 800fd06:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	015a      	lsls	r2, r3, #5
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	4413      	add	r3, r2
 800fd16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd1a:	691a      	ldr	r2, [r3, #16]
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	691b      	ldr	r3, [r3, #16]
 800fd20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd24:	69b9      	ldr	r1, [r7, #24]
 800fd26:	0148      	lsls	r0, r1, #5
 800fd28:	69f9      	ldr	r1, [r7, #28]
 800fd2a:	4401      	add	r1, r0
 800fd2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fd30:	4313      	orrs	r3, r2
 800fd32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fd34:	79fb      	ldrb	r3, [r7, #7]
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d14b      	bne.n	800fdd2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	69db      	ldr	r3, [r3, #28]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d009      	beq.n	800fd56 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	015a      	lsls	r2, r3, #5
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	4413      	add	r3, r2
 800fd4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd4e:	461a      	mov	r2, r3
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	69db      	ldr	r3, [r3, #28]
 800fd54:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	791b      	ldrb	r3, [r3, #4]
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d128      	bne.n	800fdb0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d110      	bne.n	800fd90 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fd6e:	69bb      	ldr	r3, [r7, #24]
 800fd70:	015a      	lsls	r2, r3, #5
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	4413      	add	r3, r2
 800fd76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	69ba      	ldr	r2, [r7, #24]
 800fd7e:	0151      	lsls	r1, r2, #5
 800fd80:	69fa      	ldr	r2, [r7, #28]
 800fd82:	440a      	add	r2, r1
 800fd84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fd8c:	6013      	str	r3, [r2, #0]
 800fd8e:	e00f      	b.n	800fdb0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	015a      	lsls	r2, r3, #5
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	4413      	add	r3, r2
 800fd98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	69ba      	ldr	r2, [r7, #24]
 800fda0:	0151      	lsls	r1, r2, #5
 800fda2:	69fa      	ldr	r2, [r7, #28]
 800fda4:	440a      	add	r2, r1
 800fda6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fdaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fdae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fdb0:	69bb      	ldr	r3, [r7, #24]
 800fdb2:	015a      	lsls	r2, r3, #5
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	69ba      	ldr	r2, [r7, #24]
 800fdc0:	0151      	lsls	r1, r2, #5
 800fdc2:	69fa      	ldr	r2, [r7, #28]
 800fdc4:	440a      	add	r2, r1
 800fdc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fdca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fdce:	6013      	str	r3, [r2, #0]
 800fdd0:	e169      	b.n	80100a6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fdd2:	69bb      	ldr	r3, [r7, #24]
 800fdd4:	015a      	lsls	r2, r3, #5
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	4413      	add	r3, r2
 800fdda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	69ba      	ldr	r2, [r7, #24]
 800fde2:	0151      	lsls	r1, r2, #5
 800fde4:	69fa      	ldr	r2, [r7, #28]
 800fde6:	440a      	add	r2, r1
 800fde8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fdec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fdf0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	791b      	ldrb	r3, [r3, #4]
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d015      	beq.n	800fe26 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	691b      	ldr	r3, [r3, #16]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f000 8151 	beq.w	80100a6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	f003 030f 	and.w	r3, r3, #15
 800fe14:	2101      	movs	r1, #1
 800fe16:	fa01 f303 	lsl.w	r3, r1, r3
 800fe1a:	69f9      	ldr	r1, [r7, #28]
 800fe1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fe20:	4313      	orrs	r3, r2
 800fe22:	634b      	str	r3, [r1, #52]	@ 0x34
 800fe24:	e13f      	b.n	80100a6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe2c:	689b      	ldr	r3, [r3, #8]
 800fe2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d116      	bne.n	800fe64 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	015a      	lsls	r2, r3, #5
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	69ba      	ldr	r2, [r7, #24]
 800fe46:	0151      	lsls	r1, r2, #5
 800fe48:	69fa      	ldr	r2, [r7, #28]
 800fe4a:	440a      	add	r2, r1
 800fe4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fe54:	6013      	str	r3, [r2, #0]
 800fe56:	e015      	b.n	800fe84 <USB_EPStartXfer+0x310>
 800fe58:	e007ffff 	.word	0xe007ffff
 800fe5c:	fff80000 	.word	0xfff80000
 800fe60:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fe64:	69bb      	ldr	r3, [r7, #24]
 800fe66:	015a      	lsls	r2, r3, #5
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	69ba      	ldr	r2, [r7, #24]
 800fe74:	0151      	lsls	r1, r2, #5
 800fe76:	69fa      	ldr	r2, [r7, #28]
 800fe78:	440a      	add	r2, r1
 800fe7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe82:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	68d9      	ldr	r1, [r3, #12]
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	781a      	ldrb	r2, [r3, #0]
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	691b      	ldr	r3, [r3, #16]
 800fe90:	b298      	uxth	r0, r3
 800fe92:	79fb      	ldrb	r3, [r7, #7]
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	4603      	mov	r3, r0
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f000 f9b9 	bl	8010210 <USB_WritePacket>
 800fe9e:	e102      	b.n	80100a6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	015a      	lsls	r2, r3, #5
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	4413      	add	r3, r2
 800fea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800feac:	691a      	ldr	r2, [r3, #16]
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	0159      	lsls	r1, r3, #5
 800feb2:	69fb      	ldr	r3, [r7, #28]
 800feb4:	440b      	add	r3, r1
 800feb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800feba:	4619      	mov	r1, r3
 800febc:	4b7c      	ldr	r3, [pc, #496]	@ (80100b0 <USB_EPStartXfer+0x53c>)
 800febe:	4013      	ands	r3, r2
 800fec0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	015a      	lsls	r2, r3, #5
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	4413      	add	r3, r2
 800feca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fece:	691a      	ldr	r2, [r3, #16]
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	0159      	lsls	r1, r3, #5
 800fed4:	69fb      	ldr	r3, [r7, #28]
 800fed6:	440b      	add	r3, r1
 800fed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fedc:	4619      	mov	r1, r3
 800fede:	4b75      	ldr	r3, [pc, #468]	@ (80100b4 <USB_EPStartXfer+0x540>)
 800fee0:	4013      	ands	r3, r2
 800fee2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d12f      	bne.n	800ff4a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	691b      	ldr	r3, [r3, #16]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d003      	beq.n	800fefa <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	689a      	ldr	r2, [r3, #8]
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	689a      	ldr	r2, [r3, #8]
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	015a      	lsls	r2, r3, #5
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	4413      	add	r3, r2
 800ff0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff0e:	691a      	ldr	r2, [r3, #16]
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	6a1b      	ldr	r3, [r3, #32]
 800ff14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff18:	69b9      	ldr	r1, [r7, #24]
 800ff1a:	0148      	lsls	r0, r1, #5
 800ff1c:	69f9      	ldr	r1, [r7, #28]
 800ff1e:	4401      	add	r1, r0
 800ff20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ff24:	4313      	orrs	r3, r2
 800ff26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	015a      	lsls	r2, r3, #5
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	4413      	add	r3, r2
 800ff30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff34:	691b      	ldr	r3, [r3, #16]
 800ff36:	69ba      	ldr	r2, [r7, #24]
 800ff38:	0151      	lsls	r1, r2, #5
 800ff3a:	69fa      	ldr	r2, [r7, #28]
 800ff3c:	440a      	add	r2, r1
 800ff3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ff42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ff46:	6113      	str	r3, [r2, #16]
 800ff48:	e05f      	b.n	801000a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	691b      	ldr	r3, [r3, #16]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d123      	bne.n	800ff9a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	015a      	lsls	r2, r3, #5
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	4413      	add	r3, r2
 800ff5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff5e:	691a      	ldr	r2, [r3, #16]
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	689b      	ldr	r3, [r3, #8]
 800ff64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff68:	69b9      	ldr	r1, [r7, #24]
 800ff6a:	0148      	lsls	r0, r1, #5
 800ff6c:	69f9      	ldr	r1, [r7, #28]
 800ff6e:	4401      	add	r1, r0
 800ff70:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ff74:	4313      	orrs	r3, r2
 800ff76:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	015a      	lsls	r2, r3, #5
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	4413      	add	r3, r2
 800ff80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	69ba      	ldr	r2, [r7, #24]
 800ff88:	0151      	lsls	r1, r2, #5
 800ff8a:	69fa      	ldr	r2, [r7, #28]
 800ff8c:	440a      	add	r2, r1
 800ff8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ff92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ff96:	6113      	str	r3, [r2, #16]
 800ff98:	e037      	b.n	801000a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	691a      	ldr	r2, [r3, #16]
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	689b      	ldr	r3, [r3, #8]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	1e5a      	subs	r2, r3, #1
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	689b      	ldr	r3, [r3, #8]
 800ffaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffae:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	689b      	ldr	r3, [r3, #8]
 800ffb4:	8afa      	ldrh	r2, [r7, #22]
 800ffb6:	fb03 f202 	mul.w	r2, r3, r2
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	015a      	lsls	r2, r3, #5
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffca:	691a      	ldr	r2, [r3, #16]
 800ffcc:	8afb      	ldrh	r3, [r7, #22]
 800ffce:	04d9      	lsls	r1, r3, #19
 800ffd0:	4b39      	ldr	r3, [pc, #228]	@ (80100b8 <USB_EPStartXfer+0x544>)
 800ffd2:	400b      	ands	r3, r1
 800ffd4:	69b9      	ldr	r1, [r7, #24]
 800ffd6:	0148      	lsls	r0, r1, #5
 800ffd8:	69f9      	ldr	r1, [r7, #28]
 800ffda:	4401      	add	r1, r0
 800ffdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ffe0:	4313      	orrs	r3, r2
 800ffe2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	015a      	lsls	r2, r3, #5
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	4413      	add	r3, r2
 800ffec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fff0:	691a      	ldr	r2, [r3, #16]
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	6a1b      	ldr	r3, [r3, #32]
 800fff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fffa:	69b9      	ldr	r1, [r7, #24]
 800fffc:	0148      	lsls	r0, r1, #5
 800fffe:	69f9      	ldr	r1, [r7, #28]
 8010000:	4401      	add	r1, r0
 8010002:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010006:	4313      	orrs	r3, r2
 8010008:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801000a:	79fb      	ldrb	r3, [r7, #7]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d10d      	bne.n	801002c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	68db      	ldr	r3, [r3, #12]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d009      	beq.n	801002c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	68d9      	ldr	r1, [r3, #12]
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	015a      	lsls	r2, r3, #5
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	4413      	add	r3, r2
 8010024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010028:	460a      	mov	r2, r1
 801002a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	791b      	ldrb	r3, [r3, #4]
 8010030:	2b01      	cmp	r3, #1
 8010032:	d128      	bne.n	8010086 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801003a:	689b      	ldr	r3, [r3, #8]
 801003c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010040:	2b00      	cmp	r3, #0
 8010042:	d110      	bne.n	8010066 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	015a      	lsls	r2, r3, #5
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	4413      	add	r3, r2
 801004c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	69ba      	ldr	r2, [r7, #24]
 8010054:	0151      	lsls	r1, r2, #5
 8010056:	69fa      	ldr	r2, [r7, #28]
 8010058:	440a      	add	r2, r1
 801005a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801005e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010062:	6013      	str	r3, [r2, #0]
 8010064:	e00f      	b.n	8010086 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010066:	69bb      	ldr	r3, [r7, #24]
 8010068:	015a      	lsls	r2, r3, #5
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	4413      	add	r3, r2
 801006e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	69ba      	ldr	r2, [r7, #24]
 8010076:	0151      	lsls	r1, r2, #5
 8010078:	69fa      	ldr	r2, [r7, #28]
 801007a:	440a      	add	r2, r1
 801007c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010084:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	015a      	lsls	r2, r3, #5
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	4413      	add	r3, r2
 801008e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	69ba      	ldr	r2, [r7, #24]
 8010096:	0151      	lsls	r1, r2, #5
 8010098:	69fa      	ldr	r2, [r7, #28]
 801009a:	440a      	add	r2, r1
 801009c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80100a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80100a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3720      	adds	r7, #32
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	fff80000 	.word	0xfff80000
 80100b4:	e007ffff 	.word	0xe007ffff
 80100b8:	1ff80000 	.word	0x1ff80000

080100bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80100bc:	b480      	push	{r7}
 80100be:	b087      	sub	sp, #28
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80100c6:	2300      	movs	r3, #0
 80100c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80100ca:	2300      	movs	r3, #0
 80100cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	785b      	ldrb	r3, [r3, #1]
 80100d6:	2b01      	cmp	r3, #1
 80100d8:	d14a      	bne.n	8010170 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	015a      	lsls	r2, r3, #5
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	4413      	add	r3, r2
 80100e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80100ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80100f2:	f040 8086 	bne.w	8010202 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	015a      	lsls	r2, r3, #5
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	4413      	add	r3, r2
 8010100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	683a      	ldr	r2, [r7, #0]
 8010108:	7812      	ldrb	r2, [r2, #0]
 801010a:	0151      	lsls	r1, r2, #5
 801010c:	693a      	ldr	r2, [r7, #16]
 801010e:	440a      	add	r2, r1
 8010110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010114:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010118:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	015a      	lsls	r2, r3, #5
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	4413      	add	r3, r2
 8010124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	683a      	ldr	r2, [r7, #0]
 801012c:	7812      	ldrb	r2, [r2, #0]
 801012e:	0151      	lsls	r1, r2, #5
 8010130:	693a      	ldr	r2, [r7, #16]
 8010132:	440a      	add	r2, r1
 8010134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010138:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801013c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	3301      	adds	r3, #1
 8010142:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f242 7210 	movw	r2, #10000	@ 0x2710
 801014a:	4293      	cmp	r3, r2
 801014c:	d902      	bls.n	8010154 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801014e:	2301      	movs	r3, #1
 8010150:	75fb      	strb	r3, [r7, #23]
          break;
 8010152:	e056      	b.n	8010202 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	015a      	lsls	r2, r3, #5
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	4413      	add	r3, r2
 801015e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801016c:	d0e7      	beq.n	801013e <USB_EPStopXfer+0x82>
 801016e:	e048      	b.n	8010202 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	015a      	lsls	r2, r3, #5
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	4413      	add	r3, r2
 801017a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010184:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010188:	d13b      	bne.n	8010202 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	015a      	lsls	r2, r3, #5
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	4413      	add	r3, r2
 8010194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	7812      	ldrb	r2, [r2, #0]
 801019e:	0151      	lsls	r1, r2, #5
 80101a0:	693a      	ldr	r2, [r7, #16]
 80101a2:	440a      	add	r2, r1
 80101a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80101a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80101ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	015a      	lsls	r2, r3, #5
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	4413      	add	r3, r2
 80101b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	683a      	ldr	r2, [r7, #0]
 80101c0:	7812      	ldrb	r2, [r2, #0]
 80101c2:	0151      	lsls	r1, r2, #5
 80101c4:	693a      	ldr	r2, [r7, #16]
 80101c6:	440a      	add	r2, r1
 80101c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80101cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80101d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	3301      	adds	r3, #1
 80101d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80101de:	4293      	cmp	r3, r2
 80101e0:	d902      	bls.n	80101e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80101e2:	2301      	movs	r3, #1
 80101e4:	75fb      	strb	r3, [r7, #23]
          break;
 80101e6:	e00c      	b.n	8010202 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	015a      	lsls	r2, r3, #5
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	4413      	add	r3, r2
 80101f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80101fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010200:	d0e7      	beq.n	80101d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010202:	7dfb      	ldrb	r3, [r7, #23]
}
 8010204:	4618      	mov	r0, r3
 8010206:	371c      	adds	r7, #28
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010210:	b480      	push	{r7}
 8010212:	b089      	sub	sp, #36	@ 0x24
 8010214:	af00      	add	r7, sp, #0
 8010216:	60f8      	str	r0, [r7, #12]
 8010218:	60b9      	str	r1, [r7, #8]
 801021a:	4611      	mov	r1, r2
 801021c:	461a      	mov	r2, r3
 801021e:	460b      	mov	r3, r1
 8010220:	71fb      	strb	r3, [r7, #7]
 8010222:	4613      	mov	r3, r2
 8010224:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801022e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010232:	2b00      	cmp	r3, #0
 8010234:	d123      	bne.n	801027e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010236:	88bb      	ldrh	r3, [r7, #4]
 8010238:	3303      	adds	r3, #3
 801023a:	089b      	lsrs	r3, r3, #2
 801023c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801023e:	2300      	movs	r3, #0
 8010240:	61bb      	str	r3, [r7, #24]
 8010242:	e018      	b.n	8010276 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010244:	79fb      	ldrb	r3, [r7, #7]
 8010246:	031a      	lsls	r2, r3, #12
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	4413      	add	r3, r2
 801024c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010250:	461a      	mov	r2, r3
 8010252:	69fb      	ldr	r3, [r7, #28]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	3301      	adds	r3, #1
 801025c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	3301      	adds	r3, #1
 8010262:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	3301      	adds	r3, #1
 8010268:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	3301      	adds	r3, #1
 801026e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	3301      	adds	r3, #1
 8010274:	61bb      	str	r3, [r7, #24]
 8010276:	69ba      	ldr	r2, [r7, #24]
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	429a      	cmp	r2, r3
 801027c:	d3e2      	bcc.n	8010244 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801027e:	2300      	movs	r3, #0
}
 8010280:	4618      	mov	r0, r3
 8010282:	3724      	adds	r7, #36	@ 0x24
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr

0801028c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801028c:	b480      	push	{r7}
 801028e:	b08b      	sub	sp, #44	@ 0x2c
 8010290:	af00      	add	r7, sp, #0
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	4613      	mov	r3, r2
 8010298:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80102a2:	88fb      	ldrh	r3, [r7, #6]
 80102a4:	089b      	lsrs	r3, r3, #2
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80102aa:	88fb      	ldrh	r3, [r7, #6]
 80102ac:	f003 0303 	and.w	r3, r3, #3
 80102b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80102b2:	2300      	movs	r3, #0
 80102b4:	623b      	str	r3, [r7, #32]
 80102b6:	e014      	b.n	80102e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80102c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c6:	3301      	adds	r3, #1
 80102c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80102ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102cc:	3301      	adds	r3, #1
 80102ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80102d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d2:	3301      	adds	r3, #1
 80102d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80102d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d8:	3301      	adds	r3, #1
 80102da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80102dc:	6a3b      	ldr	r3, [r7, #32]
 80102de:	3301      	adds	r3, #1
 80102e0:	623b      	str	r3, [r7, #32]
 80102e2:	6a3a      	ldr	r2, [r7, #32]
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d3e6      	bcc.n	80102b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80102ea:	8bfb      	ldrh	r3, [r7, #30]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d01e      	beq.n	801032e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80102f0:	2300      	movs	r3, #0
 80102f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80102f4:	69bb      	ldr	r3, [r7, #24]
 80102f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80102fa:	461a      	mov	r2, r3
 80102fc:	f107 0310 	add.w	r3, r7, #16
 8010300:	6812      	ldr	r2, [r2, #0]
 8010302:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010304:	693a      	ldr	r2, [r7, #16]
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	b2db      	uxtb	r3, r3
 801030a:	00db      	lsls	r3, r3, #3
 801030c:	fa22 f303 	lsr.w	r3, r2, r3
 8010310:	b2da      	uxtb	r2, r3
 8010312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010314:	701a      	strb	r2, [r3, #0]
      i++;
 8010316:	6a3b      	ldr	r3, [r7, #32]
 8010318:	3301      	adds	r3, #1
 801031a:	623b      	str	r3, [r7, #32]
      pDest++;
 801031c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031e:	3301      	adds	r3, #1
 8010320:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010322:	8bfb      	ldrh	r3, [r7, #30]
 8010324:	3b01      	subs	r3, #1
 8010326:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010328:	8bfb      	ldrh	r3, [r7, #30]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d1ea      	bne.n	8010304 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801032e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010330:	4618      	mov	r0, r3
 8010332:	372c      	adds	r7, #44	@ 0x2c
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801033c:	b480      	push	{r7}
 801033e:	b085      	sub	sp, #20
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	785b      	ldrb	r3, [r3, #1]
 8010354:	2b01      	cmp	r3, #1
 8010356:	d12c      	bne.n	80103b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	015a      	lsls	r2, r3, #5
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	4413      	add	r3, r2
 8010360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	db12      	blt.n	8010390 <USB_EPSetStall+0x54>
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00f      	beq.n	8010390 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	015a      	lsls	r2, r3, #5
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	4413      	add	r3, r2
 8010378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	0151      	lsls	r1, r2, #5
 8010382:	68fa      	ldr	r2, [r7, #12]
 8010384:	440a      	add	r2, r1
 8010386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801038a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801038e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	015a      	lsls	r2, r3, #5
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	4413      	add	r3, r2
 8010398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	68ba      	ldr	r2, [r7, #8]
 80103a0:	0151      	lsls	r1, r2, #5
 80103a2:	68fa      	ldr	r2, [r7, #12]
 80103a4:	440a      	add	r2, r1
 80103a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80103aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80103ae:	6013      	str	r3, [r2, #0]
 80103b0:	e02b      	b.n	801040a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	015a      	lsls	r2, r3, #5
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	4413      	add	r3, r2
 80103ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	db12      	blt.n	80103ea <USB_EPSetStall+0xae>
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00f      	beq.n	80103ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	015a      	lsls	r2, r3, #5
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	4413      	add	r3, r2
 80103d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	68ba      	ldr	r2, [r7, #8]
 80103da:	0151      	lsls	r1, r2, #5
 80103dc:	68fa      	ldr	r2, [r7, #12]
 80103de:	440a      	add	r2, r1
 80103e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80103e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80103e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	015a      	lsls	r2, r3, #5
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	4413      	add	r3, r2
 80103f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	68ba      	ldr	r2, [r7, #8]
 80103fa:	0151      	lsls	r1, r2, #5
 80103fc:	68fa      	ldr	r2, [r7, #12]
 80103fe:	440a      	add	r2, r1
 8010400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010404:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010408:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801040a:	2300      	movs	r3, #0
}
 801040c:	4618      	mov	r0, r3
 801040e:	3714      	adds	r7, #20
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010418:	b480      	push	{r7}
 801041a:	b085      	sub	sp, #20
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	785b      	ldrb	r3, [r3, #1]
 8010430:	2b01      	cmp	r3, #1
 8010432:	d128      	bne.n	8010486 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	015a      	lsls	r2, r3, #5
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	4413      	add	r3, r2
 801043c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	68ba      	ldr	r2, [r7, #8]
 8010444:	0151      	lsls	r1, r2, #5
 8010446:	68fa      	ldr	r2, [r7, #12]
 8010448:	440a      	add	r2, r1
 801044a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801044e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010452:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	791b      	ldrb	r3, [r3, #4]
 8010458:	2b03      	cmp	r3, #3
 801045a:	d003      	beq.n	8010464 <USB_EPClearStall+0x4c>
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	791b      	ldrb	r3, [r3, #4]
 8010460:	2b02      	cmp	r3, #2
 8010462:	d138      	bne.n	80104d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	015a      	lsls	r2, r3, #5
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	4413      	add	r3, r2
 801046c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	68ba      	ldr	r2, [r7, #8]
 8010474:	0151      	lsls	r1, r2, #5
 8010476:	68fa      	ldr	r2, [r7, #12]
 8010478:	440a      	add	r2, r1
 801047a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801047e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010482:	6013      	str	r3, [r2, #0]
 8010484:	e027      	b.n	80104d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	015a      	lsls	r2, r3, #5
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	4413      	add	r3, r2
 801048e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	68ba      	ldr	r2, [r7, #8]
 8010496:	0151      	lsls	r1, r2, #5
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	440a      	add	r2, r1
 801049c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80104a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80104a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	791b      	ldrb	r3, [r3, #4]
 80104aa:	2b03      	cmp	r3, #3
 80104ac:	d003      	beq.n	80104b6 <USB_EPClearStall+0x9e>
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	791b      	ldrb	r3, [r3, #4]
 80104b2:	2b02      	cmp	r3, #2
 80104b4:	d10f      	bne.n	80104d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	015a      	lsls	r2, r3, #5
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	4413      	add	r3, r2
 80104be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	68ba      	ldr	r2, [r7, #8]
 80104c6:	0151      	lsls	r1, r2, #5
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	440a      	add	r2, r1
 80104cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80104d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80104d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80104d6:	2300      	movs	r3, #0
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3714      	adds	r7, #20
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr

080104e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80104e4:	b480      	push	{r7}
 80104e6:	b085      	sub	sp, #20
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	460b      	mov	r3, r1
 80104ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010502:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010506:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	78fb      	ldrb	r3, [r7, #3]
 8010512:	011b      	lsls	r3, r3, #4
 8010514:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8010518:	68f9      	ldr	r1, [r7, #12]
 801051a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801051e:	4313      	orrs	r3, r2
 8010520:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3714      	adds	r7, #20
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr

08010530 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010530:	b480      	push	{r7}
 8010532:	b085      	sub	sp, #20
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801054a:	f023 0303 	bic.w	r3, r3, #3
 801054e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	68fa      	ldr	r2, [r7, #12]
 801055a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801055e:	f023 0302 	bic.w	r3, r3, #2
 8010562:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010564:	2300      	movs	r3, #0
}
 8010566:	4618      	mov	r0, r3
 8010568:	3714      	adds	r7, #20
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr

08010572 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010572:	b480      	push	{r7}
 8010574:	b085      	sub	sp, #20
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	68fa      	ldr	r2, [r7, #12]
 8010588:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801058c:	f023 0303 	bic.w	r3, r3, #3
 8010590:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	68fa      	ldr	r2, [r7, #12]
 801059c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80105a0:	f043 0302 	orr.w	r3, r3, #2
 80105a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80105a6:	2300      	movs	r3, #0
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3714      	adds	r7, #20
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	695b      	ldr	r3, [r3, #20]
 80105c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	699b      	ldr	r3, [r3, #24]
 80105c6:	68fa      	ldr	r2, [r7, #12]
 80105c8:	4013      	ands	r3, r2
 80105ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80105cc:	68fb      	ldr	r3, [r7, #12]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3714      	adds	r7, #20
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr

080105da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80105da:	b480      	push	{r7}
 80105dc:	b085      	sub	sp, #20
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105ec:	699b      	ldr	r3, [r3, #24]
 80105ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105f6:	69db      	ldr	r3, [r3, #28]
 80105f8:	68ba      	ldr	r2, [r7, #8]
 80105fa:	4013      	ands	r3, r2
 80105fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	0c1b      	lsrs	r3, r3, #16
}
 8010602:	4618      	mov	r0, r3
 8010604:	3714      	adds	r7, #20
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr

0801060e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801060e:	b480      	push	{r7}
 8010610:	b085      	sub	sp, #20
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010620:	699b      	ldr	r3, [r3, #24]
 8010622:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801062a:	69db      	ldr	r3, [r3, #28]
 801062c:	68ba      	ldr	r2, [r7, #8]
 801062e:	4013      	ands	r3, r2
 8010630:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	b29b      	uxth	r3, r3
}
 8010636:	4618      	mov	r0, r3
 8010638:	3714      	adds	r7, #20
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr

08010642 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010642:	b480      	push	{r7}
 8010644:	b085      	sub	sp, #20
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
 801064a:	460b      	mov	r3, r1
 801064c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010652:	78fb      	ldrb	r3, [r7, #3]
 8010654:	015a      	lsls	r2, r3, #5
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	4413      	add	r3, r2
 801065a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801065e:	689b      	ldr	r3, [r3, #8]
 8010660:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010668:	695b      	ldr	r3, [r3, #20]
 801066a:	68ba      	ldr	r2, [r7, #8]
 801066c:	4013      	ands	r3, r2
 801066e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010670:	68bb      	ldr	r3, [r7, #8]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3714      	adds	r7, #20
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr

0801067e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801067e:	b480      	push	{r7}
 8010680:	b087      	sub	sp, #28
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
 8010686:	460b      	mov	r3, r1
 8010688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010694:	691b      	ldr	r3, [r3, #16]
 8010696:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801069e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80106a2:	78fb      	ldrb	r3, [r7, #3]
 80106a4:	f003 030f 	and.w	r3, r3, #15
 80106a8:	68fa      	ldr	r2, [r7, #12]
 80106aa:	fa22 f303 	lsr.w	r3, r2, r3
 80106ae:	01db      	lsls	r3, r3, #7
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	693a      	ldr	r2, [r7, #16]
 80106b4:	4313      	orrs	r3, r2
 80106b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80106b8:	78fb      	ldrb	r3, [r7, #3]
 80106ba:	015a      	lsls	r2, r3, #5
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	4413      	add	r3, r2
 80106c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	693a      	ldr	r2, [r7, #16]
 80106c8:	4013      	ands	r3, r2
 80106ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80106cc:	68bb      	ldr	r3, [r7, #8]
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	371c      	adds	r7, #28
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr

080106da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80106da:	b480      	push	{r7}
 80106dc:	b083      	sub	sp, #12
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	695b      	ldr	r3, [r3, #20]
 80106e6:	f003 0301 	and.w	r3, r3, #1
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	370c      	adds	r7, #12
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr
	...

080106f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010712:	4619      	mov	r1, r3
 8010714:	4b09      	ldr	r3, [pc, #36]	@ (801073c <USB_ActivateSetup+0x44>)
 8010716:	4013      	ands	r3, r2
 8010718:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	68fa      	ldr	r2, [r7, #12]
 8010724:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801072c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801072e:	2300      	movs	r3, #0
}
 8010730:	4618      	mov	r0, r3
 8010732:	3714      	adds	r7, #20
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr
 801073c:	fffff800 	.word	0xfffff800

08010740 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8010740:	b480      	push	{r7}
 8010742:	b087      	sub	sp, #28
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	460b      	mov	r3, r1
 801074a:	607a      	str	r2, [r7, #4]
 801074c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	333c      	adds	r3, #60	@ 0x3c
 8010756:	3304      	adds	r3, #4
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	4a26      	ldr	r2, [pc, #152]	@ (80107f8 <USB_EP0_OutStart+0xb8>)
 8010760:	4293      	cmp	r3, r2
 8010762:	d90a      	bls.n	801077a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010770:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010774:	d101      	bne.n	801077a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010776:	2300      	movs	r3, #0
 8010778:	e037      	b.n	80107ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010780:	461a      	mov	r2, r3
 8010782:	2300      	movs	r3, #0
 8010784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801078c:	691b      	ldr	r3, [r3, #16]
 801078e:	697a      	ldr	r2, [r7, #20]
 8010790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010794:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107a0:	691b      	ldr	r3, [r3, #16]
 80107a2:	697a      	ldr	r2, [r7, #20]
 80107a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80107a8:	f043 0318 	orr.w	r3, r3, #24
 80107ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107b4:	691b      	ldr	r3, [r3, #16]
 80107b6:	697a      	ldr	r2, [r7, #20]
 80107b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80107bc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80107c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80107c2:	7afb      	ldrb	r3, [r7, #11]
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	d10f      	bne.n	80107e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107ce:	461a      	mov	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	697a      	ldr	r2, [r7, #20]
 80107de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80107e2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80107e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80107e8:	2300      	movs	r3, #0
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	371c      	adds	r7, #28
 80107ee:	46bd      	mov	sp, r7
 80107f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f4:	4770      	bx	lr
 80107f6:	bf00      	nop
 80107f8:	4f54300a 	.word	0x4f54300a

080107fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b085      	sub	sp, #20
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010804:	2300      	movs	r3, #0
 8010806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	3301      	adds	r3, #1
 801080c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010814:	d901      	bls.n	801081a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010816:	2303      	movs	r3, #3
 8010818:	e01b      	b.n	8010852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	691b      	ldr	r3, [r3, #16]
 801081e:	2b00      	cmp	r3, #0
 8010820:	daf2      	bge.n	8010808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010822:	2300      	movs	r3, #0
 8010824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	691b      	ldr	r3, [r3, #16]
 801082a:	f043 0201 	orr.w	r2, r3, #1
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	3301      	adds	r3, #1
 8010836:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801083e:	d901      	bls.n	8010844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010840:	2303      	movs	r3, #3
 8010842:	e006      	b.n	8010852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	691b      	ldr	r3, [r3, #16]
 8010848:	f003 0301 	and.w	r3, r3, #1
 801084c:	2b01      	cmp	r3, #1
 801084e:	d0f0      	beq.n	8010832 <USB_CoreReset+0x36>

  return HAL_OK;
 8010850:	2300      	movs	r3, #0
}
 8010852:	4618      	mov	r0, r3
 8010854:	3714      	adds	r7, #20
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
	...

08010860 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	460b      	mov	r3, r1
 801086a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801086c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010870:	f002 fcc6 	bl	8013200 <USBD_static_malloc>
 8010874:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d109      	bne.n	8010890 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	32b0      	adds	r2, #176	@ 0xb0
 8010886:	2100      	movs	r1, #0
 8010888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801088c:	2302      	movs	r3, #2
 801088e:	e0d4      	b.n	8010a3a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010890:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010894:	2100      	movs	r1, #0
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f002 fcf6 	bl	8013288 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	32b0      	adds	r2, #176	@ 0xb0
 80108a6:	68f9      	ldr	r1, [r7, #12]
 80108a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	32b0      	adds	r2, #176	@ 0xb0
 80108b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	7c1b      	ldrb	r3, [r3, #16]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d138      	bne.n	801093a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80108c8:	4b5e      	ldr	r3, [pc, #376]	@ (8010a44 <USBD_CDC_Init+0x1e4>)
 80108ca:	7819      	ldrb	r1, [r3, #0]
 80108cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80108d0:	2202      	movs	r2, #2
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f002 fb71 	bl	8012fba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80108d8:	4b5a      	ldr	r3, [pc, #360]	@ (8010a44 <USBD_CDC_Init+0x1e4>)
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	f003 020f 	and.w	r2, r3, #15
 80108e0:	6879      	ldr	r1, [r7, #4]
 80108e2:	4613      	mov	r3, r2
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	4413      	add	r3, r2
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	440b      	add	r3, r1
 80108ec:	3324      	adds	r3, #36	@ 0x24
 80108ee:	2201      	movs	r2, #1
 80108f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80108f2:	4b55      	ldr	r3, [pc, #340]	@ (8010a48 <USBD_CDC_Init+0x1e8>)
 80108f4:	7819      	ldrb	r1, [r3, #0]
 80108f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80108fa:	2202      	movs	r2, #2
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f002 fb5c 	bl	8012fba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010902:	4b51      	ldr	r3, [pc, #324]	@ (8010a48 <USBD_CDC_Init+0x1e8>)
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	f003 020f 	and.w	r2, r3, #15
 801090a:	6879      	ldr	r1, [r7, #4]
 801090c:	4613      	mov	r3, r2
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	4413      	add	r3, r2
 8010912:	009b      	lsls	r3, r3, #2
 8010914:	440b      	add	r3, r1
 8010916:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801091a:	2201      	movs	r2, #1
 801091c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801091e:	4b4b      	ldr	r3, [pc, #300]	@ (8010a4c <USBD_CDC_Init+0x1ec>)
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	f003 020f 	and.w	r2, r3, #15
 8010926:	6879      	ldr	r1, [r7, #4]
 8010928:	4613      	mov	r3, r2
 801092a:	009b      	lsls	r3, r3, #2
 801092c:	4413      	add	r3, r2
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	440b      	add	r3, r1
 8010932:	3326      	adds	r3, #38	@ 0x26
 8010934:	2210      	movs	r2, #16
 8010936:	801a      	strh	r2, [r3, #0]
 8010938:	e035      	b.n	80109a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801093a:	4b42      	ldr	r3, [pc, #264]	@ (8010a44 <USBD_CDC_Init+0x1e4>)
 801093c:	7819      	ldrb	r1, [r3, #0]
 801093e:	2340      	movs	r3, #64	@ 0x40
 8010940:	2202      	movs	r2, #2
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f002 fb39 	bl	8012fba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010948:	4b3e      	ldr	r3, [pc, #248]	@ (8010a44 <USBD_CDC_Init+0x1e4>)
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	f003 020f 	and.w	r2, r3, #15
 8010950:	6879      	ldr	r1, [r7, #4]
 8010952:	4613      	mov	r3, r2
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	4413      	add	r3, r2
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	440b      	add	r3, r1
 801095c:	3324      	adds	r3, #36	@ 0x24
 801095e:	2201      	movs	r2, #1
 8010960:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010962:	4b39      	ldr	r3, [pc, #228]	@ (8010a48 <USBD_CDC_Init+0x1e8>)
 8010964:	7819      	ldrb	r1, [r3, #0]
 8010966:	2340      	movs	r3, #64	@ 0x40
 8010968:	2202      	movs	r2, #2
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f002 fb25 	bl	8012fba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010970:	4b35      	ldr	r3, [pc, #212]	@ (8010a48 <USBD_CDC_Init+0x1e8>)
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	f003 020f 	and.w	r2, r3, #15
 8010978:	6879      	ldr	r1, [r7, #4]
 801097a:	4613      	mov	r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	4413      	add	r3, r2
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	440b      	add	r3, r1
 8010984:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010988:	2201      	movs	r2, #1
 801098a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801098c:	4b2f      	ldr	r3, [pc, #188]	@ (8010a4c <USBD_CDC_Init+0x1ec>)
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	f003 020f 	and.w	r2, r3, #15
 8010994:	6879      	ldr	r1, [r7, #4]
 8010996:	4613      	mov	r3, r2
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	4413      	add	r3, r2
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	440b      	add	r3, r1
 80109a0:	3326      	adds	r3, #38	@ 0x26
 80109a2:	2210      	movs	r2, #16
 80109a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80109a6:	4b29      	ldr	r3, [pc, #164]	@ (8010a4c <USBD_CDC_Init+0x1ec>)
 80109a8:	7819      	ldrb	r1, [r3, #0]
 80109aa:	2308      	movs	r3, #8
 80109ac:	2203      	movs	r2, #3
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f002 fb03 	bl	8012fba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80109b4:	4b25      	ldr	r3, [pc, #148]	@ (8010a4c <USBD_CDC_Init+0x1ec>)
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	f003 020f 	and.w	r2, r3, #15
 80109bc:	6879      	ldr	r1, [r7, #4]
 80109be:	4613      	mov	r3, r2
 80109c0:	009b      	lsls	r3, r3, #2
 80109c2:	4413      	add	r3, r2
 80109c4:	009b      	lsls	r3, r3, #2
 80109c6:	440b      	add	r3, r1
 80109c8:	3324      	adds	r3, #36	@ 0x24
 80109ca:	2201      	movs	r2, #1
 80109cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2200      	movs	r2, #0
 80109d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80109dc:	687a      	ldr	r2, [r7, #4]
 80109de:	33b0      	adds	r3, #176	@ 0xb0
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	4413      	add	r3, r2
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2200      	movs	r2, #0
 80109ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2200      	movs	r2, #0
 80109f6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d101      	bne.n	8010a08 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010a04:	2302      	movs	r3, #2
 8010a06:	e018      	b.n	8010a3a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	7c1b      	ldrb	r3, [r3, #16]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d10a      	bne.n	8010a26 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010a10:	4b0d      	ldr	r3, [pc, #52]	@ (8010a48 <USBD_CDC_Init+0x1e8>)
 8010a12:	7819      	ldrb	r1, [r3, #0]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f002 fbba 	bl	8013198 <USBD_LL_PrepareReceive>
 8010a24:	e008      	b.n	8010a38 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010a26:	4b08      	ldr	r3, [pc, #32]	@ (8010a48 <USBD_CDC_Init+0x1e8>)
 8010a28:	7819      	ldrb	r1, [r3, #0]
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010a30:	2340      	movs	r3, #64	@ 0x40
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f002 fbb0 	bl	8013198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010a38:	2300      	movs	r3, #0
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3710      	adds	r7, #16
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	2400009b 	.word	0x2400009b
 8010a48:	2400009c 	.word	0x2400009c
 8010a4c:	2400009d 	.word	0x2400009d

08010a50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	460b      	mov	r3, r1
 8010a5a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8010b48 <USBD_CDC_DeInit+0xf8>)
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	4619      	mov	r1, r3
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f002 facf 	bl	8013006 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010a68:	4b37      	ldr	r3, [pc, #220]	@ (8010b48 <USBD_CDC_DeInit+0xf8>)
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	f003 020f 	and.w	r2, r3, #15
 8010a70:	6879      	ldr	r1, [r7, #4]
 8010a72:	4613      	mov	r3, r2
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	4413      	add	r3, r2
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	440b      	add	r3, r1
 8010a7c:	3324      	adds	r3, #36	@ 0x24
 8010a7e:	2200      	movs	r2, #0
 8010a80:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010a82:	4b32      	ldr	r3, [pc, #200]	@ (8010b4c <USBD_CDC_DeInit+0xfc>)
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	4619      	mov	r1, r3
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f002 fabc 	bl	8013006 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8010b4c <USBD_CDC_DeInit+0xfc>)
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	f003 020f 	and.w	r2, r3, #15
 8010a96:	6879      	ldr	r1, [r7, #4]
 8010a98:	4613      	mov	r3, r2
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	4413      	add	r3, r2
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	440b      	add	r3, r1
 8010aa2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010aaa:	4b29      	ldr	r3, [pc, #164]	@ (8010b50 <USBD_CDC_DeInit+0x100>)
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	4619      	mov	r1, r3
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f002 faa8 	bl	8013006 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010ab6:	4b26      	ldr	r3, [pc, #152]	@ (8010b50 <USBD_CDC_DeInit+0x100>)
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	f003 020f 	and.w	r2, r3, #15
 8010abe:	6879      	ldr	r1, [r7, #4]
 8010ac0:	4613      	mov	r3, r2
 8010ac2:	009b      	lsls	r3, r3, #2
 8010ac4:	4413      	add	r3, r2
 8010ac6:	009b      	lsls	r3, r3, #2
 8010ac8:	440b      	add	r3, r1
 8010aca:	3324      	adds	r3, #36	@ 0x24
 8010acc:	2200      	movs	r2, #0
 8010ace:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8010b50 <USBD_CDC_DeInit+0x100>)
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	f003 020f 	and.w	r2, r3, #15
 8010ad8:	6879      	ldr	r1, [r7, #4]
 8010ada:	4613      	mov	r3, r2
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	4413      	add	r3, r2
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	440b      	add	r3, r1
 8010ae4:	3326      	adds	r3, #38	@ 0x26
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	32b0      	adds	r2, #176	@ 0xb0
 8010af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d01f      	beq.n	8010b3c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	33b0      	adds	r3, #176	@ 0xb0
 8010b06:	009b      	lsls	r3, r3, #2
 8010b08:	4413      	add	r3, r2
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	32b0      	adds	r2, #176	@ 0xb0
 8010b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f002 fb7c 	bl	801321c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	32b0      	adds	r2, #176	@ 0xb0
 8010b2e:	2100      	movs	r1, #0
 8010b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010b3c:	2300      	movs	r3, #0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3708      	adds	r7, #8
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	2400009b 	.word	0x2400009b
 8010b4c:	2400009c 	.word	0x2400009c
 8010b50:	2400009d 	.word	0x2400009d

08010b54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b086      	sub	sp, #24
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	32b0      	adds	r2, #176	@ 0xb0
 8010b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010b72:	2300      	movs	r3, #0
 8010b74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b76:	2300      	movs	r3, #0
 8010b78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010b80:	2303      	movs	r3, #3
 8010b82:	e0bf      	b.n	8010d04 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d050      	beq.n	8010c32 <USBD_CDC_Setup+0xde>
 8010b90:	2b20      	cmp	r3, #32
 8010b92:	f040 80af 	bne.w	8010cf4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	88db      	ldrh	r3, [r3, #6]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d03a      	beq.n	8010c14 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	b25b      	sxtb	r3, r3
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	da1b      	bge.n	8010be0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	33b0      	adds	r3, #176	@ 0xb0
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	4413      	add	r3, r2
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	689b      	ldr	r3, [r3, #8]
 8010bba:	683a      	ldr	r2, [r7, #0]
 8010bbc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010bbe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	88d2      	ldrh	r2, [r2, #6]
 8010bc4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	88db      	ldrh	r3, [r3, #6]
 8010bca:	2b07      	cmp	r3, #7
 8010bcc:	bf28      	it	cs
 8010bce:	2307      	movcs	r3, #7
 8010bd0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	89fa      	ldrh	r2, [r7, #14]
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f001 fd7d 	bl	80126d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010bde:	e090      	b.n	8010d02 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	785a      	ldrb	r2, [r3, #1]
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	88db      	ldrh	r3, [r3, #6]
 8010bee:	2b3f      	cmp	r3, #63	@ 0x3f
 8010bf0:	d803      	bhi.n	8010bfa <USBD_CDC_Setup+0xa6>
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	88db      	ldrh	r3, [r3, #6]
 8010bf6:	b2da      	uxtb	r2, r3
 8010bf8:	e000      	b.n	8010bfc <USBD_CDC_Setup+0xa8>
 8010bfa:	2240      	movs	r2, #64	@ 0x40
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010c02:	6939      	ldr	r1, [r7, #16]
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f001 fd8f 	bl	8012730 <USBD_CtlPrepareRx>
      break;
 8010c12:	e076      	b.n	8010d02 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	33b0      	adds	r3, #176	@ 0xb0
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	4413      	add	r3, r2
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	689b      	ldr	r3, [r3, #8]
 8010c26:	683a      	ldr	r2, [r7, #0]
 8010c28:	7850      	ldrb	r0, [r2, #1]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	6839      	ldr	r1, [r7, #0]
 8010c2e:	4798      	blx	r3
      break;
 8010c30:	e067      	b.n	8010d02 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	785b      	ldrb	r3, [r3, #1]
 8010c36:	2b0b      	cmp	r3, #11
 8010c38:	d851      	bhi.n	8010cde <USBD_CDC_Setup+0x18a>
 8010c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8010c40 <USBD_CDC_Setup+0xec>)
 8010c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c40:	08010c71 	.word	0x08010c71
 8010c44:	08010ced 	.word	0x08010ced
 8010c48:	08010cdf 	.word	0x08010cdf
 8010c4c:	08010cdf 	.word	0x08010cdf
 8010c50:	08010cdf 	.word	0x08010cdf
 8010c54:	08010cdf 	.word	0x08010cdf
 8010c58:	08010cdf 	.word	0x08010cdf
 8010c5c:	08010cdf 	.word	0x08010cdf
 8010c60:	08010cdf 	.word	0x08010cdf
 8010c64:	08010cdf 	.word	0x08010cdf
 8010c68:	08010c9b 	.word	0x08010c9b
 8010c6c:	08010cc5 	.word	0x08010cc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	2b03      	cmp	r3, #3
 8010c7a:	d107      	bne.n	8010c8c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010c7c:	f107 030a 	add.w	r3, r7, #10
 8010c80:	2202      	movs	r2, #2
 8010c82:	4619      	mov	r1, r3
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f001 fd27 	bl	80126d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010c8a:	e032      	b.n	8010cf2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010c8c:	6839      	ldr	r1, [r7, #0]
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f001 fca5 	bl	80125de <USBD_CtlError>
            ret = USBD_FAIL;
 8010c94:	2303      	movs	r3, #3
 8010c96:	75fb      	strb	r3, [r7, #23]
          break;
 8010c98:	e02b      	b.n	8010cf2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	2b03      	cmp	r3, #3
 8010ca4:	d107      	bne.n	8010cb6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010ca6:	f107 030d 	add.w	r3, r7, #13
 8010caa:	2201      	movs	r2, #1
 8010cac:	4619      	mov	r1, r3
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f001 fd12 	bl	80126d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010cb4:	e01d      	b.n	8010cf2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010cb6:	6839      	ldr	r1, [r7, #0]
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f001 fc90 	bl	80125de <USBD_CtlError>
            ret = USBD_FAIL;
 8010cbe:	2303      	movs	r3, #3
 8010cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8010cc2:	e016      	b.n	8010cf2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	2b03      	cmp	r3, #3
 8010cce:	d00f      	beq.n	8010cf0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010cd0:	6839      	ldr	r1, [r7, #0]
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f001 fc83 	bl	80125de <USBD_CtlError>
            ret = USBD_FAIL;
 8010cd8:	2303      	movs	r3, #3
 8010cda:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010cdc:	e008      	b.n	8010cf0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010cde:	6839      	ldr	r1, [r7, #0]
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f001 fc7c 	bl	80125de <USBD_CtlError>
          ret = USBD_FAIL;
 8010ce6:	2303      	movs	r3, #3
 8010ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8010cea:	e002      	b.n	8010cf2 <USBD_CDC_Setup+0x19e>
          break;
 8010cec:	bf00      	nop
 8010cee:	e008      	b.n	8010d02 <USBD_CDC_Setup+0x1ae>
          break;
 8010cf0:	bf00      	nop
      }
      break;
 8010cf2:	e006      	b.n	8010d02 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010cf4:	6839      	ldr	r1, [r7, #0]
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f001 fc71 	bl	80125de <USBD_CtlError>
      ret = USBD_FAIL;
 8010cfc:	2303      	movs	r3, #3
 8010cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8010d00:	bf00      	nop
  }

  return (uint8_t)ret;
 8010d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3718      	adds	r7, #24
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	460b      	mov	r3, r1
 8010d16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010d1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	32b0      	adds	r2, #176	@ 0xb0
 8010d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d101      	bne.n	8010d36 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010d32:	2303      	movs	r3, #3
 8010d34:	e065      	b.n	8010e02 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	32b0      	adds	r2, #176	@ 0xb0
 8010d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010d46:	78fb      	ldrb	r3, [r7, #3]
 8010d48:	f003 020f 	and.w	r2, r3, #15
 8010d4c:	6879      	ldr	r1, [r7, #4]
 8010d4e:	4613      	mov	r3, r2
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	4413      	add	r3, r2
 8010d54:	009b      	lsls	r3, r3, #2
 8010d56:	440b      	add	r3, r1
 8010d58:	3318      	adds	r3, #24
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d02f      	beq.n	8010dc0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010d60:	78fb      	ldrb	r3, [r7, #3]
 8010d62:	f003 020f 	and.w	r2, r3, #15
 8010d66:	6879      	ldr	r1, [r7, #4]
 8010d68:	4613      	mov	r3, r2
 8010d6a:	009b      	lsls	r3, r3, #2
 8010d6c:	4413      	add	r3, r2
 8010d6e:	009b      	lsls	r3, r3, #2
 8010d70:	440b      	add	r3, r1
 8010d72:	3318      	adds	r3, #24
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	78fb      	ldrb	r3, [r7, #3]
 8010d78:	f003 010f 	and.w	r1, r3, #15
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	460b      	mov	r3, r1
 8010d80:	00db      	lsls	r3, r3, #3
 8010d82:	440b      	add	r3, r1
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	4403      	add	r3, r0
 8010d88:	331c      	adds	r3, #28
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010d90:	fb01 f303 	mul.w	r3, r1, r3
 8010d94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d112      	bne.n	8010dc0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010d9a:	78fb      	ldrb	r3, [r7, #3]
 8010d9c:	f003 020f 	and.w	r2, r3, #15
 8010da0:	6879      	ldr	r1, [r7, #4]
 8010da2:	4613      	mov	r3, r2
 8010da4:	009b      	lsls	r3, r3, #2
 8010da6:	4413      	add	r3, r2
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	440b      	add	r3, r1
 8010dac:	3318      	adds	r3, #24
 8010dae:	2200      	movs	r2, #0
 8010db0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010db2:	78f9      	ldrb	r1, [r7, #3]
 8010db4:	2300      	movs	r3, #0
 8010db6:	2200      	movs	r2, #0
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f002 f9cc 	bl	8013156 <USBD_LL_Transmit>
 8010dbe:	e01f      	b.n	8010e00 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	33b0      	adds	r3, #176	@ 0xb0
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	4413      	add	r3, r2
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d010      	beq.n	8010e00 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	33b0      	adds	r3, #176	@ 0xb0
 8010de8:	009b      	lsls	r3, r3, #2
 8010dea:	4413      	add	r3, r2
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	691b      	ldr	r3, [r3, #16]
 8010df0:	68ba      	ldr	r2, [r7, #8]
 8010df2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010dfc:	78fa      	ldrb	r2, [r7, #3]
 8010dfe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010e00:	2300      	movs	r3, #0
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b084      	sub	sp, #16
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
 8010e12:	460b      	mov	r3, r1
 8010e14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	32b0      	adds	r2, #176	@ 0xb0
 8010e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	32b0      	adds	r2, #176	@ 0xb0
 8010e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d101      	bne.n	8010e3c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010e38:	2303      	movs	r3, #3
 8010e3a:	e01a      	b.n	8010e72 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010e3c:	78fb      	ldrb	r3, [r7, #3]
 8010e3e:	4619      	mov	r1, r3
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f002 f9ca 	bl	80131da <USBD_LL_GetRxDataSize>
 8010e46:	4602      	mov	r2, r0
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010e54:	687a      	ldr	r2, [r7, #4]
 8010e56:	33b0      	adds	r3, #176	@ 0xb0
 8010e58:	009b      	lsls	r3, r3, #2
 8010e5a:	4413      	add	r3, r2
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	68fa      	ldr	r2, [r7, #12]
 8010e62:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010e66:	68fa      	ldr	r2, [r7, #12]
 8010e68:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010e6c:	4611      	mov	r1, r2
 8010e6e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010e70:	2300      	movs	r3, #0
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}

08010e7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010e7a:	b580      	push	{r7, lr}
 8010e7c:	b084      	sub	sp, #16
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	32b0      	adds	r2, #176	@ 0xb0
 8010e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d101      	bne.n	8010e9c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010e98:	2303      	movs	r3, #3
 8010e9a:	e024      	b.n	8010ee6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	33b0      	adds	r3, #176	@ 0xb0
 8010ea6:	009b      	lsls	r3, r3, #2
 8010ea8:	4413      	add	r3, r2
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d019      	beq.n	8010ee4 <USBD_CDC_EP0_RxReady+0x6a>
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010eb6:	2bff      	cmp	r3, #255	@ 0xff
 8010eb8:	d014      	beq.n	8010ee4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	33b0      	adds	r3, #176	@ 0xb0
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	4413      	add	r3, r2
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	689b      	ldr	r3, [r3, #8]
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010ed2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010ed4:	68fa      	ldr	r2, [r7, #12]
 8010ed6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010eda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	22ff      	movs	r2, #255	@ 0xff
 8010ee0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010ee4:	2300      	movs	r3, #0
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3710      	adds	r7, #16
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
	...

08010ef0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b086      	sub	sp, #24
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010ef8:	2182      	movs	r1, #130	@ 0x82
 8010efa:	4818      	ldr	r0, [pc, #96]	@ (8010f5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010efc:	f000 fd0f 	bl	801191e <USBD_GetEpDesc>
 8010f00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010f02:	2101      	movs	r1, #1
 8010f04:	4815      	ldr	r0, [pc, #84]	@ (8010f5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010f06:	f000 fd0a 	bl	801191e <USBD_GetEpDesc>
 8010f0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010f0c:	2181      	movs	r1, #129	@ 0x81
 8010f0e:	4813      	ldr	r0, [pc, #76]	@ (8010f5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010f10:	f000 fd05 	bl	801191e <USBD_GetEpDesc>
 8010f14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d002      	beq.n	8010f22 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	2210      	movs	r2, #16
 8010f20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d006      	beq.n	8010f36 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010f30:	711a      	strb	r2, [r3, #4]
 8010f32:	2200      	movs	r2, #0
 8010f34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d006      	beq.n	8010f4a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010f44:	711a      	strb	r2, [r3, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2243      	movs	r2, #67	@ 0x43
 8010f4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010f50:	4b02      	ldr	r3, [pc, #8]	@ (8010f5c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3718      	adds	r7, #24
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	24000058 	.word	0x24000058

08010f60 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b086      	sub	sp, #24
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010f68:	2182      	movs	r1, #130	@ 0x82
 8010f6a:	4818      	ldr	r0, [pc, #96]	@ (8010fcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010f6c:	f000 fcd7 	bl	801191e <USBD_GetEpDesc>
 8010f70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010f72:	2101      	movs	r1, #1
 8010f74:	4815      	ldr	r0, [pc, #84]	@ (8010fcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010f76:	f000 fcd2 	bl	801191e <USBD_GetEpDesc>
 8010f7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010f7c:	2181      	movs	r1, #129	@ 0x81
 8010f7e:	4813      	ldr	r0, [pc, #76]	@ (8010fcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010f80:	f000 fccd 	bl	801191e <USBD_GetEpDesc>
 8010f84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d002      	beq.n	8010f92 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	2210      	movs	r2, #16
 8010f90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d006      	beq.n	8010fa6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	711a      	strb	r2, [r3, #4]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	f042 0202 	orr.w	r2, r2, #2
 8010fa4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d006      	beq.n	8010fba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	711a      	strb	r2, [r3, #4]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f042 0202 	orr.w	r2, r2, #2
 8010fb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2243      	movs	r2, #67	@ 0x43
 8010fbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010fc0:	4b02      	ldr	r3, [pc, #8]	@ (8010fcc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3718      	adds	r7, #24
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	24000058 	.word	0x24000058

08010fd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b086      	sub	sp, #24
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010fd8:	2182      	movs	r1, #130	@ 0x82
 8010fda:	4818      	ldr	r0, [pc, #96]	@ (801103c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010fdc:	f000 fc9f 	bl	801191e <USBD_GetEpDesc>
 8010fe0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010fe2:	2101      	movs	r1, #1
 8010fe4:	4815      	ldr	r0, [pc, #84]	@ (801103c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010fe6:	f000 fc9a 	bl	801191e <USBD_GetEpDesc>
 8010fea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010fec:	2181      	movs	r1, #129	@ 0x81
 8010fee:	4813      	ldr	r0, [pc, #76]	@ (801103c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010ff0:	f000 fc95 	bl	801191e <USBD_GetEpDesc>
 8010ff4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d002      	beq.n	8011002 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	2210      	movs	r2, #16
 8011000:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d006      	beq.n	8011016 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	2200      	movs	r2, #0
 801100c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011010:	711a      	strb	r2, [r3, #4]
 8011012:	2200      	movs	r2, #0
 8011014:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d006      	beq.n	801102a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2200      	movs	r2, #0
 8011020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011024:	711a      	strb	r2, [r3, #4]
 8011026:	2200      	movs	r2, #0
 8011028:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2243      	movs	r2, #67	@ 0x43
 801102e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011030:	4b02      	ldr	r3, [pc, #8]	@ (801103c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011032:	4618      	mov	r0, r3
 8011034:	3718      	adds	r7, #24
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	24000058 	.word	0x24000058

08011040 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	220a      	movs	r2, #10
 801104c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801104e:	4b03      	ldr	r3, [pc, #12]	@ (801105c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011050:	4618      	mov	r0, r3
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr
 801105c:	24000014 	.word	0x24000014

08011060 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d101      	bne.n	8011074 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011070:	2303      	movs	r3, #3
 8011072:	e009      	b.n	8011088 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801107a:	687a      	ldr	r2, [r7, #4]
 801107c:	33b0      	adds	r3, #176	@ 0xb0
 801107e:	009b      	lsls	r3, r3, #2
 8011080:	4413      	add	r3, r2
 8011082:	683a      	ldr	r2, [r7, #0]
 8011084:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011086:	2300      	movs	r3, #0
}
 8011088:	4618      	mov	r0, r3
 801108a:	370c      	adds	r7, #12
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr

08011094 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011094:	b480      	push	{r7}
 8011096:	b087      	sub	sp, #28
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	32b0      	adds	r2, #176	@ 0xb0
 80110aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110ae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d101      	bne.n	80110ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80110b6:	2303      	movs	r3, #3
 80110b8:	e008      	b.n	80110cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	68ba      	ldr	r2, [r7, #8]
 80110be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80110ca:	2300      	movs	r3, #0
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	371c      	adds	r7, #28
 80110d0:	46bd      	mov	sp, r7
 80110d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d6:	4770      	bx	lr

080110d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80110d8:	b480      	push	{r7}
 80110da:	b085      	sub	sp, #20
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	32b0      	adds	r2, #176	@ 0xb0
 80110ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d101      	bne.n	80110fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80110f8:	2303      	movs	r3, #3
 80110fa:	e004      	b.n	8011106 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	683a      	ldr	r2, [r7, #0]
 8011100:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011104:	2300      	movs	r3, #0
}
 8011106:	4618      	mov	r0, r3
 8011108:	3714      	adds	r7, #20
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr
	...

08011114 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b084      	sub	sp, #16
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	32b0      	adds	r2, #176	@ 0xb0
 8011126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801112a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	32b0      	adds	r2, #176	@ 0xb0
 8011136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d101      	bne.n	8011142 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801113e:	2303      	movs	r3, #3
 8011140:	e018      	b.n	8011174 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	7c1b      	ldrb	r3, [r3, #16]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d10a      	bne.n	8011160 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801114a:	4b0c      	ldr	r3, [pc, #48]	@ (801117c <USBD_CDC_ReceivePacket+0x68>)
 801114c:	7819      	ldrb	r1, [r3, #0]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f002 f81d 	bl	8013198 <USBD_LL_PrepareReceive>
 801115e:	e008      	b.n	8011172 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011160:	4b06      	ldr	r3, [pc, #24]	@ (801117c <USBD_CDC_ReceivePacket+0x68>)
 8011162:	7819      	ldrb	r1, [r3, #0]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801116a:	2340      	movs	r3, #64	@ 0x40
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f002 f813 	bl	8013198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011172:	2300      	movs	r3, #0
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	2400009c 	.word	0x2400009c

08011180 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b086      	sub	sp, #24
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	4613      	mov	r3, r2
 801118c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011194:	2303      	movs	r3, #3
 8011196:	e01f      	b.n	80111d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2200      	movs	r2, #0
 801119c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2200      	movs	r2, #0
 80111a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	2200      	movs	r2, #0
 80111ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d003      	beq.n	80111be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	68ba      	ldr	r2, [r7, #8]
 80111ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2201      	movs	r2, #1
 80111c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	79fa      	ldrb	r2, [r7, #7]
 80111ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	f001 fe87 	bl	8012ee0 <USBD_LL_Init>
 80111d2:	4603      	mov	r3, r0
 80111d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80111d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3718      	adds	r7, #24
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80111ea:	2300      	movs	r3, #0
 80111ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d101      	bne.n	80111f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80111f4:	2303      	movs	r3, #3
 80111f6:	e025      	b.n	8011244 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	683a      	ldr	r2, [r7, #0]
 80111fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	32ae      	adds	r2, #174	@ 0xae
 801120a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801120e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00f      	beq.n	8011234 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	32ae      	adds	r2, #174	@ 0xae
 801121e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011224:	f107 020e 	add.w	r2, r7, #14
 8011228:	4610      	mov	r0, r2
 801122a:	4798      	blx	r3
 801122c:	4602      	mov	r2, r0
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801123a:	1c5a      	adds	r2, r3, #1
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011242:	2300      	movs	r3, #0
}
 8011244:	4618      	mov	r0, r3
 8011246:	3710      	adds	r7, #16
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f001 fe95 	bl	8012f84 <USBD_LL_Start>
 801125a:	4603      	mov	r3, r0
}
 801125c:	4618      	mov	r0, r3
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801126c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801126e:	4618      	mov	r0, r3
 8011270:	370c      	adds	r7, #12
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr

0801127a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801127a:	b580      	push	{r7, lr}
 801127c:	b084      	sub	sp, #16
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
 8011282:	460b      	mov	r3, r1
 8011284:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011286:	2300      	movs	r3, #0
 8011288:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011290:	2b00      	cmp	r3, #0
 8011292:	d009      	beq.n	80112a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	78fa      	ldrb	r2, [r7, #3]
 801129e:	4611      	mov	r1, r2
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	4798      	blx	r3
 80112a4:	4603      	mov	r3, r0
 80112a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80112a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}

080112b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80112b2:	b580      	push	{r7, lr}
 80112b4:	b084      	sub	sp, #16
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
 80112ba:	460b      	mov	r3, r1
 80112bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80112be:	2300      	movs	r3, #0
 80112c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	78fa      	ldrb	r2, [r7, #3]
 80112cc:	4611      	mov	r1, r2
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	4798      	blx	r3
 80112d2:	4603      	mov	r3, r0
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d001      	beq.n	80112dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80112d8:	2303      	movs	r3, #3
 80112da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b084      	sub	sp, #16
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
 80112ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80112f6:	6839      	ldr	r1, [r7, #0]
 80112f8:	4618      	mov	r0, r3
 80112fa:	f001 f936 	bl	801256a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2201      	movs	r2, #1
 8011302:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801130c:	461a      	mov	r2, r3
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801131a:	f003 031f 	and.w	r3, r3, #31
 801131e:	2b02      	cmp	r3, #2
 8011320:	d01a      	beq.n	8011358 <USBD_LL_SetupStage+0x72>
 8011322:	2b02      	cmp	r3, #2
 8011324:	d822      	bhi.n	801136c <USBD_LL_SetupStage+0x86>
 8011326:	2b00      	cmp	r3, #0
 8011328:	d002      	beq.n	8011330 <USBD_LL_SetupStage+0x4a>
 801132a:	2b01      	cmp	r3, #1
 801132c:	d00a      	beq.n	8011344 <USBD_LL_SetupStage+0x5e>
 801132e:	e01d      	b.n	801136c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011336:	4619      	mov	r1, r3
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f000 fb63 	bl	8011a04 <USBD_StdDevReq>
 801133e:	4603      	mov	r3, r0
 8011340:	73fb      	strb	r3, [r7, #15]
      break;
 8011342:	e020      	b.n	8011386 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801134a:	4619      	mov	r1, r3
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f000 fbcb 	bl	8011ae8 <USBD_StdItfReq>
 8011352:	4603      	mov	r3, r0
 8011354:	73fb      	strb	r3, [r7, #15]
      break;
 8011356:	e016      	b.n	8011386 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801135e:	4619      	mov	r1, r3
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f000 fc2d 	bl	8011bc0 <USBD_StdEPReq>
 8011366:	4603      	mov	r3, r0
 8011368:	73fb      	strb	r3, [r7, #15]
      break;
 801136a:	e00c      	b.n	8011386 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011372:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011376:	b2db      	uxtb	r3, r3
 8011378:	4619      	mov	r1, r3
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f001 fe62 	bl	8013044 <USBD_LL_StallEP>
 8011380:	4603      	mov	r3, r0
 8011382:	73fb      	strb	r3, [r7, #15]
      break;
 8011384:	bf00      	nop
  }

  return ret;
 8011386:	7bfb      	ldrb	r3, [r7, #15]
}
 8011388:	4618      	mov	r0, r3
 801138a:	3710      	adds	r7, #16
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b086      	sub	sp, #24
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	460b      	mov	r3, r1
 801139a:	607a      	str	r2, [r7, #4]
 801139c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801139e:	2300      	movs	r3, #0
 80113a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80113a2:	7afb      	ldrb	r3, [r7, #11]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d16e      	bne.n	8011486 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80113ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80113b6:	2b03      	cmp	r3, #3
 80113b8:	f040 8098 	bne.w	80114ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	689a      	ldr	r2, [r3, #8]
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d913      	bls.n	80113f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	689a      	ldr	r2, [r3, #8]
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	1ad2      	subs	r2, r2, r3
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	68da      	ldr	r2, [r3, #12]
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	689b      	ldr	r3, [r3, #8]
 80113de:	4293      	cmp	r3, r2
 80113e0:	bf28      	it	cs
 80113e2:	4613      	movcs	r3, r2
 80113e4:	461a      	mov	r2, r3
 80113e6:	6879      	ldr	r1, [r7, #4]
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f001 f9be 	bl	801276a <USBD_CtlContinueRx>
 80113ee:	e07d      	b.n	80114ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80113f6:	f003 031f 	and.w	r3, r3, #31
 80113fa:	2b02      	cmp	r3, #2
 80113fc:	d014      	beq.n	8011428 <USBD_LL_DataOutStage+0x98>
 80113fe:	2b02      	cmp	r3, #2
 8011400:	d81d      	bhi.n	801143e <USBD_LL_DataOutStage+0xae>
 8011402:	2b00      	cmp	r3, #0
 8011404:	d002      	beq.n	801140c <USBD_LL_DataOutStage+0x7c>
 8011406:	2b01      	cmp	r3, #1
 8011408:	d003      	beq.n	8011412 <USBD_LL_DataOutStage+0x82>
 801140a:	e018      	b.n	801143e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801140c:	2300      	movs	r3, #0
 801140e:	75bb      	strb	r3, [r7, #22]
            break;
 8011410:	e018      	b.n	8011444 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011418:	b2db      	uxtb	r3, r3
 801141a:	4619      	mov	r1, r3
 801141c:	68f8      	ldr	r0, [r7, #12]
 801141e:	f000 fa64 	bl	80118ea <USBD_CoreFindIF>
 8011422:	4603      	mov	r3, r0
 8011424:	75bb      	strb	r3, [r7, #22]
            break;
 8011426:	e00d      	b.n	8011444 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801142e:	b2db      	uxtb	r3, r3
 8011430:	4619      	mov	r1, r3
 8011432:	68f8      	ldr	r0, [r7, #12]
 8011434:	f000 fa66 	bl	8011904 <USBD_CoreFindEP>
 8011438:	4603      	mov	r3, r0
 801143a:	75bb      	strb	r3, [r7, #22]
            break;
 801143c:	e002      	b.n	8011444 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801143e:	2300      	movs	r3, #0
 8011440:	75bb      	strb	r3, [r7, #22]
            break;
 8011442:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011444:	7dbb      	ldrb	r3, [r7, #22]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d119      	bne.n	801147e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011450:	b2db      	uxtb	r3, r3
 8011452:	2b03      	cmp	r3, #3
 8011454:	d113      	bne.n	801147e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011456:	7dba      	ldrb	r2, [r7, #22]
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	32ae      	adds	r2, #174	@ 0xae
 801145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011460:	691b      	ldr	r3, [r3, #16]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d00b      	beq.n	801147e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011466:	7dba      	ldrb	r2, [r7, #22]
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801146e:	7dba      	ldrb	r2, [r7, #22]
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	32ae      	adds	r2, #174	@ 0xae
 8011474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011478:	691b      	ldr	r3, [r3, #16]
 801147a:	68f8      	ldr	r0, [r7, #12]
 801147c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	f001 f984 	bl	801278c <USBD_CtlSendStatus>
 8011484:	e032      	b.n	80114ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011486:	7afb      	ldrb	r3, [r7, #11]
 8011488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801148c:	b2db      	uxtb	r3, r3
 801148e:	4619      	mov	r1, r3
 8011490:	68f8      	ldr	r0, [r7, #12]
 8011492:	f000 fa37 	bl	8011904 <USBD_CoreFindEP>
 8011496:	4603      	mov	r3, r0
 8011498:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801149a:	7dbb      	ldrb	r3, [r7, #22]
 801149c:	2bff      	cmp	r3, #255	@ 0xff
 801149e:	d025      	beq.n	80114ec <USBD_LL_DataOutStage+0x15c>
 80114a0:	7dbb      	ldrb	r3, [r7, #22]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d122      	bne.n	80114ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	2b03      	cmp	r3, #3
 80114b0:	d117      	bne.n	80114e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80114b2:	7dba      	ldrb	r2, [r7, #22]
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	32ae      	adds	r2, #174	@ 0xae
 80114b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114bc:	699b      	ldr	r3, [r3, #24]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d00f      	beq.n	80114e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80114c2:	7dba      	ldrb	r2, [r7, #22]
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80114ca:	7dba      	ldrb	r2, [r7, #22]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	32ae      	adds	r2, #174	@ 0xae
 80114d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114d4:	699b      	ldr	r3, [r3, #24]
 80114d6:	7afa      	ldrb	r2, [r7, #11]
 80114d8:	4611      	mov	r1, r2
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	4798      	blx	r3
 80114de:	4603      	mov	r3, r0
 80114e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80114e2:	7dfb      	ldrb	r3, [r7, #23]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d001      	beq.n	80114ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80114e8:	7dfb      	ldrb	r3, [r7, #23]
 80114ea:	e000      	b.n	80114ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80114ec:	2300      	movs	r3, #0
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3718      	adds	r7, #24
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}

080114f6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80114f6:	b580      	push	{r7, lr}
 80114f8:	b086      	sub	sp, #24
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	60f8      	str	r0, [r7, #12]
 80114fe:	460b      	mov	r3, r1
 8011500:	607a      	str	r2, [r7, #4]
 8011502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011504:	7afb      	ldrb	r3, [r7, #11]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d16f      	bne.n	80115ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	3314      	adds	r3, #20
 801150e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011516:	2b02      	cmp	r3, #2
 8011518:	d15a      	bne.n	80115d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	689a      	ldr	r2, [r3, #8]
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	429a      	cmp	r2, r3
 8011524:	d914      	bls.n	8011550 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	689a      	ldr	r2, [r3, #8]
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	1ad2      	subs	r2, r2, r3
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	689b      	ldr	r3, [r3, #8]
 8011538:	461a      	mov	r2, r3
 801153a:	6879      	ldr	r1, [r7, #4]
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f001 f8e6 	bl	801270e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011542:	2300      	movs	r3, #0
 8011544:	2200      	movs	r2, #0
 8011546:	2100      	movs	r1, #0
 8011548:	68f8      	ldr	r0, [r7, #12]
 801154a:	f001 fe25 	bl	8013198 <USBD_LL_PrepareReceive>
 801154e:	e03f      	b.n	80115d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	68da      	ldr	r2, [r3, #12]
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	429a      	cmp	r2, r3
 801155a:	d11c      	bne.n	8011596 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	685a      	ldr	r2, [r3, #4]
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011564:	429a      	cmp	r2, r3
 8011566:	d316      	bcc.n	8011596 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	685a      	ldr	r2, [r3, #4]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011572:	429a      	cmp	r2, r3
 8011574:	d20f      	bcs.n	8011596 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011576:	2200      	movs	r2, #0
 8011578:	2100      	movs	r1, #0
 801157a:	68f8      	ldr	r0, [r7, #12]
 801157c:	f001 f8c7 	bl	801270e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2200      	movs	r2, #0
 8011584:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011588:	2300      	movs	r3, #0
 801158a:	2200      	movs	r2, #0
 801158c:	2100      	movs	r1, #0
 801158e:	68f8      	ldr	r0, [r7, #12]
 8011590:	f001 fe02 	bl	8013198 <USBD_LL_PrepareReceive>
 8011594:	e01c      	b.n	80115d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801159c:	b2db      	uxtb	r3, r3
 801159e:	2b03      	cmp	r3, #3
 80115a0:	d10f      	bne.n	80115c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d009      	beq.n	80115c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	2200      	movs	r2, #0
 80115b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80115c2:	2180      	movs	r1, #128	@ 0x80
 80115c4:	68f8      	ldr	r0, [r7, #12]
 80115c6:	f001 fd3d 	bl	8013044 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	f001 f8f1 	bl	80127b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d03a      	beq.n	8011650 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80115da:	68f8      	ldr	r0, [r7, #12]
 80115dc:	f7ff fe42 	bl	8011264 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2200      	movs	r2, #0
 80115e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80115e8:	e032      	b.n	8011650 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80115ea:	7afb      	ldrb	r3, [r7, #11]
 80115ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80115f0:	b2db      	uxtb	r3, r3
 80115f2:	4619      	mov	r1, r3
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f000 f985 	bl	8011904 <USBD_CoreFindEP>
 80115fa:	4603      	mov	r3, r0
 80115fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80115fe:	7dfb      	ldrb	r3, [r7, #23]
 8011600:	2bff      	cmp	r3, #255	@ 0xff
 8011602:	d025      	beq.n	8011650 <USBD_LL_DataInStage+0x15a>
 8011604:	7dfb      	ldrb	r3, [r7, #23]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d122      	bne.n	8011650 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011610:	b2db      	uxtb	r3, r3
 8011612:	2b03      	cmp	r3, #3
 8011614:	d11c      	bne.n	8011650 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011616:	7dfa      	ldrb	r2, [r7, #23]
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	32ae      	adds	r2, #174	@ 0xae
 801161c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011620:	695b      	ldr	r3, [r3, #20]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d014      	beq.n	8011650 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011626:	7dfa      	ldrb	r2, [r7, #23]
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801162e:	7dfa      	ldrb	r2, [r7, #23]
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	32ae      	adds	r2, #174	@ 0xae
 8011634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011638:	695b      	ldr	r3, [r3, #20]
 801163a:	7afa      	ldrb	r2, [r7, #11]
 801163c:	4611      	mov	r1, r2
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	4798      	blx	r3
 8011642:	4603      	mov	r3, r0
 8011644:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011646:	7dbb      	ldrb	r3, [r7, #22]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d001      	beq.n	8011650 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801164c:	7dbb      	ldrb	r3, [r7, #22]
 801164e:	e000      	b.n	8011652 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011650:	2300      	movs	r3, #0
}
 8011652:	4618      	mov	r0, r3
 8011654:	3718      	adds	r7, #24
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}

0801165a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801165a:	b580      	push	{r7, lr}
 801165c:	b084      	sub	sp, #16
 801165e:	af00      	add	r7, sp, #0
 8011660:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011662:	2300      	movs	r3, #0
 8011664:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2201      	movs	r2, #1
 801166a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2200      	movs	r2, #0
 8011672:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2200      	movs	r2, #0
 801167a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2200      	movs	r2, #0
 8011680:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2200      	movs	r2, #0
 8011688:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011692:	2b00      	cmp	r3, #0
 8011694:	d014      	beq.n	80116c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d00e      	beq.n	80116c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	687a      	ldr	r2, [r7, #4]
 80116ac:	6852      	ldr	r2, [r2, #4]
 80116ae:	b2d2      	uxtb	r2, r2
 80116b0:	4611      	mov	r1, r2
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	4798      	blx	r3
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d001      	beq.n	80116c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80116bc:	2303      	movs	r3, #3
 80116be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80116c0:	2340      	movs	r3, #64	@ 0x40
 80116c2:	2200      	movs	r2, #0
 80116c4:	2100      	movs	r1, #0
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f001 fc77 	bl	8012fba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2201      	movs	r2, #1
 80116d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2240      	movs	r2, #64	@ 0x40
 80116d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80116dc:	2340      	movs	r3, #64	@ 0x40
 80116de:	2200      	movs	r2, #0
 80116e0:	2180      	movs	r1, #128	@ 0x80
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f001 fc69 	bl	8012fba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2201      	movs	r2, #1
 80116ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2240      	movs	r2, #64	@ 0x40
 80116f2:	621a      	str	r2, [r3, #32]

  return ret;
 80116f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3710      	adds	r7, #16
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80116fe:	b480      	push	{r7}
 8011700:	b083      	sub	sp, #12
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
 8011706:	460b      	mov	r3, r1
 8011708:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	78fa      	ldrb	r2, [r7, #3]
 801170e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011710:	2300      	movs	r3, #0
}
 8011712:	4618      	mov	r0, r3
 8011714:	370c      	adds	r7, #12
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr

0801171e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801171e:	b480      	push	{r7}
 8011720:	b083      	sub	sp, #12
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801172c:	b2db      	uxtb	r3, r3
 801172e:	2b04      	cmp	r3, #4
 8011730:	d006      	beq.n	8011740 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011738:	b2da      	uxtb	r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2204      	movs	r2, #4
 8011744:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011748:	2300      	movs	r3, #0
}
 801174a:	4618      	mov	r0, r3
 801174c:	370c      	adds	r7, #12
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr

08011756 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011756:	b480      	push	{r7}
 8011758:	b083      	sub	sp, #12
 801175a:	af00      	add	r7, sp, #0
 801175c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011764:	b2db      	uxtb	r3, r3
 8011766:	2b04      	cmp	r3, #4
 8011768:	d106      	bne.n	8011778 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011770:	b2da      	uxtb	r2, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011778:	2300      	movs	r3, #0
}
 801177a:	4618      	mov	r0, r3
 801177c:	370c      	adds	r7, #12
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr

08011786 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011786:	b580      	push	{r7, lr}
 8011788:	b082      	sub	sp, #8
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011794:	b2db      	uxtb	r3, r3
 8011796:	2b03      	cmp	r3, #3
 8011798:	d110      	bne.n	80117bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d00b      	beq.n	80117bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117aa:	69db      	ldr	r3, [r3, #28]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d005      	beq.n	80117bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117b6:	69db      	ldr	r3, [r3, #28]
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3708      	adds	r7, #8
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b082      	sub	sp, #8
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
 80117ce:	460b      	mov	r3, r1
 80117d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	32ae      	adds	r2, #174	@ 0xae
 80117dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d101      	bne.n	80117e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80117e4:	2303      	movs	r3, #3
 80117e6:	e01c      	b.n	8011822 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	2b03      	cmp	r3, #3
 80117f2:	d115      	bne.n	8011820 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	32ae      	adds	r2, #174	@ 0xae
 80117fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011802:	6a1b      	ldr	r3, [r3, #32]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d00b      	beq.n	8011820 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	32ae      	adds	r2, #174	@ 0xae
 8011812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011816:	6a1b      	ldr	r3, [r3, #32]
 8011818:	78fa      	ldrb	r2, [r7, #3]
 801181a:	4611      	mov	r1, r2
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011820:	2300      	movs	r3, #0
}
 8011822:	4618      	mov	r0, r3
 8011824:	3708      	adds	r7, #8
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}

0801182a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801182a:	b580      	push	{r7, lr}
 801182c:	b082      	sub	sp, #8
 801182e:	af00      	add	r7, sp, #0
 8011830:	6078      	str	r0, [r7, #4]
 8011832:	460b      	mov	r3, r1
 8011834:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	32ae      	adds	r2, #174	@ 0xae
 8011840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d101      	bne.n	801184c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011848:	2303      	movs	r3, #3
 801184a:	e01c      	b.n	8011886 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b03      	cmp	r3, #3
 8011856:	d115      	bne.n	8011884 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	32ae      	adds	r2, #174	@ 0xae
 8011862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011868:	2b00      	cmp	r3, #0
 801186a:	d00b      	beq.n	8011884 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	32ae      	adds	r2, #174	@ 0xae
 8011876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801187c:	78fa      	ldrb	r2, [r7, #3]
 801187e:	4611      	mov	r1, r2
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011884:	2300      	movs	r3, #0
}
 8011886:	4618      	mov	r0, r3
 8011888:	3708      	adds	r7, #8
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801188e:	b480      	push	{r7}
 8011890:	b083      	sub	sp, #12
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011896:	2300      	movs	r3, #0
}
 8011898:	4618      	mov	r0, r3
 801189a:	370c      	adds	r7, #12
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr

080118a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b084      	sub	sp, #16
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80118ac:	2300      	movs	r3, #0
 80118ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2201      	movs	r2, #1
 80118b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d00e      	beq.n	80118e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	6852      	ldr	r2, [r2, #4]
 80118ce:	b2d2      	uxtb	r2, r2
 80118d0:	4611      	mov	r1, r2
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	4798      	blx	r3
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d001      	beq.n	80118e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80118dc:	2303      	movs	r3, #3
 80118de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80118e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3710      	adds	r7, #16
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}

080118ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80118ea:	b480      	push	{r7}
 80118ec:	b083      	sub	sp, #12
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
 80118f2:	460b      	mov	r3, r1
 80118f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80118f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	370c      	adds	r7, #12
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr

08011904 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011904:	b480      	push	{r7}
 8011906:	b083      	sub	sp, #12
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	460b      	mov	r3, r1
 801190e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011910:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011912:	4618      	mov	r0, r3
 8011914:	370c      	adds	r7, #12
 8011916:	46bd      	mov	sp, r7
 8011918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191c:	4770      	bx	lr

0801191e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801191e:	b580      	push	{r7, lr}
 8011920:	b086      	sub	sp, #24
 8011922:	af00      	add	r7, sp, #0
 8011924:	6078      	str	r0, [r7, #4]
 8011926:	460b      	mov	r3, r1
 8011928:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011932:	2300      	movs	r3, #0
 8011934:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	885b      	ldrh	r3, [r3, #2]
 801193a:	b29b      	uxth	r3, r3
 801193c:	68fa      	ldr	r2, [r7, #12]
 801193e:	7812      	ldrb	r2, [r2, #0]
 8011940:	4293      	cmp	r3, r2
 8011942:	d91f      	bls.n	8011984 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801194a:	e013      	b.n	8011974 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801194c:	f107 030a 	add.w	r3, r7, #10
 8011950:	4619      	mov	r1, r3
 8011952:	6978      	ldr	r0, [r7, #20]
 8011954:	f000 f81b 	bl	801198e <USBD_GetNextDesc>
 8011958:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	785b      	ldrb	r3, [r3, #1]
 801195e:	2b05      	cmp	r3, #5
 8011960:	d108      	bne.n	8011974 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	789b      	ldrb	r3, [r3, #2]
 801196a:	78fa      	ldrb	r2, [r7, #3]
 801196c:	429a      	cmp	r2, r3
 801196e:	d008      	beq.n	8011982 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011970:	2300      	movs	r3, #0
 8011972:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	885b      	ldrh	r3, [r3, #2]
 8011978:	b29a      	uxth	r2, r3
 801197a:	897b      	ldrh	r3, [r7, #10]
 801197c:	429a      	cmp	r2, r3
 801197e:	d8e5      	bhi.n	801194c <USBD_GetEpDesc+0x2e>
 8011980:	e000      	b.n	8011984 <USBD_GetEpDesc+0x66>
          break;
 8011982:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011984:	693b      	ldr	r3, [r7, #16]
}
 8011986:	4618      	mov	r0, r3
 8011988:	3718      	adds	r7, #24
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}

0801198e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801198e:	b480      	push	{r7}
 8011990:	b085      	sub	sp, #20
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
 8011996:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	881b      	ldrh	r3, [r3, #0]
 80119a0:	68fa      	ldr	r2, [r7, #12]
 80119a2:	7812      	ldrb	r2, [r2, #0]
 80119a4:	4413      	add	r3, r2
 80119a6:	b29a      	uxth	r2, r3
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	461a      	mov	r2, r3
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	4413      	add	r3, r2
 80119b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80119b8:	68fb      	ldr	r3, [r7, #12]
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3714      	adds	r7, #20
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr

080119c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80119c6:	b480      	push	{r7}
 80119c8:	b087      	sub	sp, #28
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	3301      	adds	r3, #1
 80119dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80119e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80119e8:	021b      	lsls	r3, r3, #8
 80119ea:	b21a      	sxth	r2, r3
 80119ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80119f0:	4313      	orrs	r3, r2
 80119f2:	b21b      	sxth	r3, r3
 80119f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80119f6:	89fb      	ldrh	r3, [r7, #14]
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	371c      	adds	r7, #28
 80119fc:	46bd      	mov	sp, r7
 80119fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a02:	4770      	bx	lr

08011a04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011a1a:	2b40      	cmp	r3, #64	@ 0x40
 8011a1c:	d005      	beq.n	8011a2a <USBD_StdDevReq+0x26>
 8011a1e:	2b40      	cmp	r3, #64	@ 0x40
 8011a20:	d857      	bhi.n	8011ad2 <USBD_StdDevReq+0xce>
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00f      	beq.n	8011a46 <USBD_StdDevReq+0x42>
 8011a26:	2b20      	cmp	r3, #32
 8011a28:	d153      	bne.n	8011ad2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	32ae      	adds	r2, #174	@ 0xae
 8011a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a38:	689b      	ldr	r3, [r3, #8]
 8011a3a:	6839      	ldr	r1, [r7, #0]
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	4798      	blx	r3
 8011a40:	4603      	mov	r3, r0
 8011a42:	73fb      	strb	r3, [r7, #15]
      break;
 8011a44:	e04a      	b.n	8011adc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	785b      	ldrb	r3, [r3, #1]
 8011a4a:	2b09      	cmp	r3, #9
 8011a4c:	d83b      	bhi.n	8011ac6 <USBD_StdDevReq+0xc2>
 8011a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8011a54 <USBD_StdDevReq+0x50>)
 8011a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a54:	08011aa9 	.word	0x08011aa9
 8011a58:	08011abd 	.word	0x08011abd
 8011a5c:	08011ac7 	.word	0x08011ac7
 8011a60:	08011ab3 	.word	0x08011ab3
 8011a64:	08011ac7 	.word	0x08011ac7
 8011a68:	08011a87 	.word	0x08011a87
 8011a6c:	08011a7d 	.word	0x08011a7d
 8011a70:	08011ac7 	.word	0x08011ac7
 8011a74:	08011a9f 	.word	0x08011a9f
 8011a78:	08011a91 	.word	0x08011a91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011a7c:	6839      	ldr	r1, [r7, #0]
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f000 fa3c 	bl	8011efc <USBD_GetDescriptor>
          break;
 8011a84:	e024      	b.n	8011ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011a86:	6839      	ldr	r1, [r7, #0]
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f000 fbcb 	bl	8012224 <USBD_SetAddress>
          break;
 8011a8e:	e01f      	b.n	8011ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011a90:	6839      	ldr	r1, [r7, #0]
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f000 fc0a 	bl	80122ac <USBD_SetConfig>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	73fb      	strb	r3, [r7, #15]
          break;
 8011a9c:	e018      	b.n	8011ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011a9e:	6839      	ldr	r1, [r7, #0]
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f000 fcad 	bl	8012400 <USBD_GetConfig>
          break;
 8011aa6:	e013      	b.n	8011ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011aa8:	6839      	ldr	r1, [r7, #0]
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 fcde 	bl	801246c <USBD_GetStatus>
          break;
 8011ab0:	e00e      	b.n	8011ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011ab2:	6839      	ldr	r1, [r7, #0]
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f000 fd0d 	bl	80124d4 <USBD_SetFeature>
          break;
 8011aba:	e009      	b.n	8011ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011abc:	6839      	ldr	r1, [r7, #0]
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f000 fd31 	bl	8012526 <USBD_ClrFeature>
          break;
 8011ac4:	e004      	b.n	8011ad0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011ac6:	6839      	ldr	r1, [r7, #0]
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 fd88 	bl	80125de <USBD_CtlError>
          break;
 8011ace:	bf00      	nop
      }
      break;
 8011ad0:	e004      	b.n	8011adc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011ad2:	6839      	ldr	r1, [r7, #0]
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f000 fd82 	bl	80125de <USBD_CtlError>
      break;
 8011ada:	bf00      	nop
  }

  return ret;
 8011adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3710      	adds	r7, #16
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	bf00      	nop

08011ae8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b084      	sub	sp, #16
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011af2:	2300      	movs	r3, #0
 8011af4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011afe:	2b40      	cmp	r3, #64	@ 0x40
 8011b00:	d005      	beq.n	8011b0e <USBD_StdItfReq+0x26>
 8011b02:	2b40      	cmp	r3, #64	@ 0x40
 8011b04:	d852      	bhi.n	8011bac <USBD_StdItfReq+0xc4>
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d001      	beq.n	8011b0e <USBD_StdItfReq+0x26>
 8011b0a:	2b20      	cmp	r3, #32
 8011b0c:	d14e      	bne.n	8011bac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	3b01      	subs	r3, #1
 8011b18:	2b02      	cmp	r3, #2
 8011b1a:	d840      	bhi.n	8011b9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	889b      	ldrh	r3, [r3, #4]
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d836      	bhi.n	8011b94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	889b      	ldrh	r3, [r3, #4]
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7ff fedb 	bl	80118ea <USBD_CoreFindIF>
 8011b34:	4603      	mov	r3, r0
 8011b36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011b38:	7bbb      	ldrb	r3, [r7, #14]
 8011b3a:	2bff      	cmp	r3, #255	@ 0xff
 8011b3c:	d01d      	beq.n	8011b7a <USBD_StdItfReq+0x92>
 8011b3e:	7bbb      	ldrb	r3, [r7, #14]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d11a      	bne.n	8011b7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011b44:	7bba      	ldrb	r2, [r7, #14]
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	32ae      	adds	r2, #174	@ 0xae
 8011b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b4e:	689b      	ldr	r3, [r3, #8]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d00f      	beq.n	8011b74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011b54:	7bba      	ldrb	r2, [r7, #14]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011b5c:	7bba      	ldrb	r2, [r7, #14]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	32ae      	adds	r2, #174	@ 0xae
 8011b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b66:	689b      	ldr	r3, [r3, #8]
 8011b68:	6839      	ldr	r1, [r7, #0]
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	4798      	blx	r3
 8011b6e:	4603      	mov	r3, r0
 8011b70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011b72:	e004      	b.n	8011b7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011b74:	2303      	movs	r3, #3
 8011b76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011b78:	e001      	b.n	8011b7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011b7a:	2303      	movs	r3, #3
 8011b7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	88db      	ldrh	r3, [r3, #6]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d110      	bne.n	8011ba8 <USBD_StdItfReq+0xc0>
 8011b86:	7bfb      	ldrb	r3, [r7, #15]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d10d      	bne.n	8011ba8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f000 fdfd 	bl	801278c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011b92:	e009      	b.n	8011ba8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011b94:	6839      	ldr	r1, [r7, #0]
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f000 fd21 	bl	80125de <USBD_CtlError>
          break;
 8011b9c:	e004      	b.n	8011ba8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011b9e:	6839      	ldr	r1, [r7, #0]
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f000 fd1c 	bl	80125de <USBD_CtlError>
          break;
 8011ba6:	e000      	b.n	8011baa <USBD_StdItfReq+0xc2>
          break;
 8011ba8:	bf00      	nop
      }
      break;
 8011baa:	e004      	b.n	8011bb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011bac:	6839      	ldr	r1, [r7, #0]
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 fd15 	bl	80125de <USBD_CtlError>
      break;
 8011bb4:	bf00      	nop
  }

  return ret;
 8011bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3710      	adds	r7, #16
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	889b      	ldrh	r3, [r3, #4]
 8011bd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011bdc:	2b40      	cmp	r3, #64	@ 0x40
 8011bde:	d007      	beq.n	8011bf0 <USBD_StdEPReq+0x30>
 8011be0:	2b40      	cmp	r3, #64	@ 0x40
 8011be2:	f200 817f 	bhi.w	8011ee4 <USBD_StdEPReq+0x324>
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d02a      	beq.n	8011c40 <USBD_StdEPReq+0x80>
 8011bea:	2b20      	cmp	r3, #32
 8011bec:	f040 817a 	bne.w	8011ee4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011bf0:	7bbb      	ldrb	r3, [r7, #14]
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f7ff fe85 	bl	8011904 <USBD_CoreFindEP>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011bfe:	7b7b      	ldrb	r3, [r7, #13]
 8011c00:	2bff      	cmp	r3, #255	@ 0xff
 8011c02:	f000 8174 	beq.w	8011eee <USBD_StdEPReq+0x32e>
 8011c06:	7b7b      	ldrb	r3, [r7, #13]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f040 8170 	bne.w	8011eee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011c0e:	7b7a      	ldrb	r2, [r7, #13]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011c16:	7b7a      	ldrb	r2, [r7, #13]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	32ae      	adds	r2, #174	@ 0xae
 8011c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c20:	689b      	ldr	r3, [r3, #8]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f000 8163 	beq.w	8011eee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011c28:	7b7a      	ldrb	r2, [r7, #13]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	32ae      	adds	r2, #174	@ 0xae
 8011c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c32:	689b      	ldr	r3, [r3, #8]
 8011c34:	6839      	ldr	r1, [r7, #0]
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	4798      	blx	r3
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011c3e:	e156      	b.n	8011eee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	785b      	ldrb	r3, [r3, #1]
 8011c44:	2b03      	cmp	r3, #3
 8011c46:	d008      	beq.n	8011c5a <USBD_StdEPReq+0x9a>
 8011c48:	2b03      	cmp	r3, #3
 8011c4a:	f300 8145 	bgt.w	8011ed8 <USBD_StdEPReq+0x318>
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	f000 809b 	beq.w	8011d8a <USBD_StdEPReq+0x1ca>
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d03c      	beq.n	8011cd2 <USBD_StdEPReq+0x112>
 8011c58:	e13e      	b.n	8011ed8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	2b02      	cmp	r3, #2
 8011c64:	d002      	beq.n	8011c6c <USBD_StdEPReq+0xac>
 8011c66:	2b03      	cmp	r3, #3
 8011c68:	d016      	beq.n	8011c98 <USBD_StdEPReq+0xd8>
 8011c6a:	e02c      	b.n	8011cc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c6c:	7bbb      	ldrb	r3, [r7, #14]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00d      	beq.n	8011c8e <USBD_StdEPReq+0xce>
 8011c72:	7bbb      	ldrb	r3, [r7, #14]
 8011c74:	2b80      	cmp	r3, #128	@ 0x80
 8011c76:	d00a      	beq.n	8011c8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c78:	7bbb      	ldrb	r3, [r7, #14]
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f001 f9e1 	bl	8013044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c82:	2180      	movs	r1, #128	@ 0x80
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f001 f9dd 	bl	8013044 <USBD_LL_StallEP>
 8011c8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c8c:	e020      	b.n	8011cd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011c8e:	6839      	ldr	r1, [r7, #0]
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 fca4 	bl	80125de <USBD_CtlError>
              break;
 8011c96:	e01b      	b.n	8011cd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	885b      	ldrh	r3, [r3, #2]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d10e      	bne.n	8011cbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011ca0:	7bbb      	ldrb	r3, [r7, #14]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d00b      	beq.n	8011cbe <USBD_StdEPReq+0xfe>
 8011ca6:	7bbb      	ldrb	r3, [r7, #14]
 8011ca8:	2b80      	cmp	r3, #128	@ 0x80
 8011caa:	d008      	beq.n	8011cbe <USBD_StdEPReq+0xfe>
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	88db      	ldrh	r3, [r3, #6]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d104      	bne.n	8011cbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011cb4:	7bbb      	ldrb	r3, [r7, #14]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f001 f9c3 	bl	8013044 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f000 fd64 	bl	801278c <USBD_CtlSendStatus>

              break;
 8011cc4:	e004      	b.n	8011cd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011cc6:	6839      	ldr	r1, [r7, #0]
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f000 fc88 	bl	80125de <USBD_CtlError>
              break;
 8011cce:	bf00      	nop
          }
          break;
 8011cd0:	e107      	b.n	8011ee2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	2b02      	cmp	r3, #2
 8011cdc:	d002      	beq.n	8011ce4 <USBD_StdEPReq+0x124>
 8011cde:	2b03      	cmp	r3, #3
 8011ce0:	d016      	beq.n	8011d10 <USBD_StdEPReq+0x150>
 8011ce2:	e04b      	b.n	8011d7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ce4:	7bbb      	ldrb	r3, [r7, #14]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d00d      	beq.n	8011d06 <USBD_StdEPReq+0x146>
 8011cea:	7bbb      	ldrb	r3, [r7, #14]
 8011cec:	2b80      	cmp	r3, #128	@ 0x80
 8011cee:	d00a      	beq.n	8011d06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011cf0:	7bbb      	ldrb	r3, [r7, #14]
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f001 f9a5 	bl	8013044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011cfa:	2180      	movs	r1, #128	@ 0x80
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f001 f9a1 	bl	8013044 <USBD_LL_StallEP>
 8011d02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011d04:	e040      	b.n	8011d88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011d06:	6839      	ldr	r1, [r7, #0]
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f000 fc68 	bl	80125de <USBD_CtlError>
              break;
 8011d0e:	e03b      	b.n	8011d88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	885b      	ldrh	r3, [r3, #2]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d136      	bne.n	8011d86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011d18:	7bbb      	ldrb	r3, [r7, #14]
 8011d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d004      	beq.n	8011d2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011d22:	7bbb      	ldrb	r3, [r7, #14]
 8011d24:	4619      	mov	r1, r3
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f001 f9ab 	bl	8013082 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f000 fd2d 	bl	801278c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011d32:	7bbb      	ldrb	r3, [r7, #14]
 8011d34:	4619      	mov	r1, r3
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f7ff fde4 	bl	8011904 <USBD_CoreFindEP>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011d40:	7b7b      	ldrb	r3, [r7, #13]
 8011d42:	2bff      	cmp	r3, #255	@ 0xff
 8011d44:	d01f      	beq.n	8011d86 <USBD_StdEPReq+0x1c6>
 8011d46:	7b7b      	ldrb	r3, [r7, #13]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d11c      	bne.n	8011d86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011d4c:	7b7a      	ldrb	r2, [r7, #13]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011d54:	7b7a      	ldrb	r2, [r7, #13]
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	32ae      	adds	r2, #174	@ 0xae
 8011d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d5e:	689b      	ldr	r3, [r3, #8]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d010      	beq.n	8011d86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011d64:	7b7a      	ldrb	r2, [r7, #13]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	32ae      	adds	r2, #174	@ 0xae
 8011d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d6e:	689b      	ldr	r3, [r3, #8]
 8011d70:	6839      	ldr	r1, [r7, #0]
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	4798      	blx	r3
 8011d76:	4603      	mov	r3, r0
 8011d78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011d7a:	e004      	b.n	8011d86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011d7c:	6839      	ldr	r1, [r7, #0]
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f000 fc2d 	bl	80125de <USBD_CtlError>
              break;
 8011d84:	e000      	b.n	8011d88 <USBD_StdEPReq+0x1c8>
              break;
 8011d86:	bf00      	nop
          }
          break;
 8011d88:	e0ab      	b.n	8011ee2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	2b02      	cmp	r3, #2
 8011d94:	d002      	beq.n	8011d9c <USBD_StdEPReq+0x1dc>
 8011d96:	2b03      	cmp	r3, #3
 8011d98:	d032      	beq.n	8011e00 <USBD_StdEPReq+0x240>
 8011d9a:	e097      	b.n	8011ecc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d9c:	7bbb      	ldrb	r3, [r7, #14]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d007      	beq.n	8011db2 <USBD_StdEPReq+0x1f2>
 8011da2:	7bbb      	ldrb	r3, [r7, #14]
 8011da4:	2b80      	cmp	r3, #128	@ 0x80
 8011da6:	d004      	beq.n	8011db2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011da8:	6839      	ldr	r1, [r7, #0]
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f000 fc17 	bl	80125de <USBD_CtlError>
                break;
 8011db0:	e091      	b.n	8011ed6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	da0b      	bge.n	8011dd2 <USBD_StdEPReq+0x212>
 8011dba:	7bbb      	ldrb	r3, [r7, #14]
 8011dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011dc0:	4613      	mov	r3, r2
 8011dc2:	009b      	lsls	r3, r3, #2
 8011dc4:	4413      	add	r3, r2
 8011dc6:	009b      	lsls	r3, r3, #2
 8011dc8:	3310      	adds	r3, #16
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	4413      	add	r3, r2
 8011dce:	3304      	adds	r3, #4
 8011dd0:	e00b      	b.n	8011dea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011dd2:	7bbb      	ldrb	r3, [r7, #14]
 8011dd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011dd8:	4613      	mov	r3, r2
 8011dda:	009b      	lsls	r3, r3, #2
 8011ddc:	4413      	add	r3, r2
 8011dde:	009b      	lsls	r3, r3, #2
 8011de0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011de4:	687a      	ldr	r2, [r7, #4]
 8011de6:	4413      	add	r3, r2
 8011de8:	3304      	adds	r3, #4
 8011dea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	2200      	movs	r2, #0
 8011df0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	2202      	movs	r2, #2
 8011df6:	4619      	mov	r1, r3
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f000 fc6d 	bl	80126d8 <USBD_CtlSendData>
              break;
 8011dfe:	e06a      	b.n	8011ed6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	da11      	bge.n	8011e2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011e08:	7bbb      	ldrb	r3, [r7, #14]
 8011e0a:	f003 020f 	and.w	r2, r3, #15
 8011e0e:	6879      	ldr	r1, [r7, #4]
 8011e10:	4613      	mov	r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	4413      	add	r3, r2
 8011e16:	009b      	lsls	r3, r3, #2
 8011e18:	440b      	add	r3, r1
 8011e1a:	3324      	adds	r3, #36	@ 0x24
 8011e1c:	881b      	ldrh	r3, [r3, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d117      	bne.n	8011e52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011e22:	6839      	ldr	r1, [r7, #0]
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f000 fbda 	bl	80125de <USBD_CtlError>
                  break;
 8011e2a:	e054      	b.n	8011ed6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011e2c:	7bbb      	ldrb	r3, [r7, #14]
 8011e2e:	f003 020f 	and.w	r2, r3, #15
 8011e32:	6879      	ldr	r1, [r7, #4]
 8011e34:	4613      	mov	r3, r2
 8011e36:	009b      	lsls	r3, r3, #2
 8011e38:	4413      	add	r3, r2
 8011e3a:	009b      	lsls	r3, r3, #2
 8011e3c:	440b      	add	r3, r1
 8011e3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d104      	bne.n	8011e52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011e48:	6839      	ldr	r1, [r7, #0]
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f000 fbc7 	bl	80125de <USBD_CtlError>
                  break;
 8011e50:	e041      	b.n	8011ed6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	da0b      	bge.n	8011e72 <USBD_StdEPReq+0x2b2>
 8011e5a:	7bbb      	ldrb	r3, [r7, #14]
 8011e5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011e60:	4613      	mov	r3, r2
 8011e62:	009b      	lsls	r3, r3, #2
 8011e64:	4413      	add	r3, r2
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	3310      	adds	r3, #16
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	3304      	adds	r3, #4
 8011e70:	e00b      	b.n	8011e8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011e72:	7bbb      	ldrb	r3, [r7, #14]
 8011e74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e78:	4613      	mov	r3, r2
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	4413      	add	r3, r2
 8011e7e:	009b      	lsls	r3, r3, #2
 8011e80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	4413      	add	r3, r2
 8011e88:	3304      	adds	r3, #4
 8011e8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011e8c:	7bbb      	ldrb	r3, [r7, #14]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d002      	beq.n	8011e98 <USBD_StdEPReq+0x2d8>
 8011e92:	7bbb      	ldrb	r3, [r7, #14]
 8011e94:	2b80      	cmp	r3, #128	@ 0x80
 8011e96:	d103      	bne.n	8011ea0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	601a      	str	r2, [r3, #0]
 8011e9e:	e00e      	b.n	8011ebe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011ea0:	7bbb      	ldrb	r3, [r7, #14]
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f001 f90b 	bl	80130c0 <USBD_LL_IsStallEP>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d003      	beq.n	8011eb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	2201      	movs	r2, #1
 8011eb4:	601a      	str	r2, [r3, #0]
 8011eb6:	e002      	b.n	8011ebe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	2202      	movs	r2, #2
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f000 fc07 	bl	80126d8 <USBD_CtlSendData>
              break;
 8011eca:	e004      	b.n	8011ed6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011ecc:	6839      	ldr	r1, [r7, #0]
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f000 fb85 	bl	80125de <USBD_CtlError>
              break;
 8011ed4:	bf00      	nop
          }
          break;
 8011ed6:	e004      	b.n	8011ee2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011ed8:	6839      	ldr	r1, [r7, #0]
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f000 fb7f 	bl	80125de <USBD_CtlError>
          break;
 8011ee0:	bf00      	nop
      }
      break;
 8011ee2:	e005      	b.n	8011ef0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011ee4:	6839      	ldr	r1, [r7, #0]
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f000 fb79 	bl	80125de <USBD_CtlError>
      break;
 8011eec:	e000      	b.n	8011ef0 <USBD_StdEPReq+0x330>
      break;
 8011eee:	bf00      	nop
  }

  return ret;
 8011ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3710      	adds	r7, #16
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
	...

08011efc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011f06:	2300      	movs	r3, #0
 8011f08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	885b      	ldrh	r3, [r3, #2]
 8011f16:	0a1b      	lsrs	r3, r3, #8
 8011f18:	b29b      	uxth	r3, r3
 8011f1a:	3b01      	subs	r3, #1
 8011f1c:	2b0e      	cmp	r3, #14
 8011f1e:	f200 8152 	bhi.w	80121c6 <USBD_GetDescriptor+0x2ca>
 8011f22:	a201      	add	r2, pc, #4	@ (adr r2, 8011f28 <USBD_GetDescriptor+0x2c>)
 8011f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f28:	08011f99 	.word	0x08011f99
 8011f2c:	08011fb1 	.word	0x08011fb1
 8011f30:	08011ff1 	.word	0x08011ff1
 8011f34:	080121c7 	.word	0x080121c7
 8011f38:	080121c7 	.word	0x080121c7
 8011f3c:	08012167 	.word	0x08012167
 8011f40:	08012193 	.word	0x08012193
 8011f44:	080121c7 	.word	0x080121c7
 8011f48:	080121c7 	.word	0x080121c7
 8011f4c:	080121c7 	.word	0x080121c7
 8011f50:	080121c7 	.word	0x080121c7
 8011f54:	080121c7 	.word	0x080121c7
 8011f58:	080121c7 	.word	0x080121c7
 8011f5c:	080121c7 	.word	0x080121c7
 8011f60:	08011f65 	.word	0x08011f65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f6a:	69db      	ldr	r3, [r3, #28]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d00b      	beq.n	8011f88 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f76:	69db      	ldr	r3, [r3, #28]
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	7c12      	ldrb	r2, [r2, #16]
 8011f7c:	f107 0108 	add.w	r1, r7, #8
 8011f80:	4610      	mov	r0, r2
 8011f82:	4798      	blx	r3
 8011f84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f86:	e126      	b.n	80121d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011f88:	6839      	ldr	r1, [r7, #0]
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f000 fb27 	bl	80125de <USBD_CtlError>
        err++;
 8011f90:	7afb      	ldrb	r3, [r7, #11]
 8011f92:	3301      	adds	r3, #1
 8011f94:	72fb      	strb	r3, [r7, #11]
      break;
 8011f96:	e11e      	b.n	80121d6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	687a      	ldr	r2, [r7, #4]
 8011fa2:	7c12      	ldrb	r2, [r2, #16]
 8011fa4:	f107 0108 	add.w	r1, r7, #8
 8011fa8:	4610      	mov	r0, r2
 8011faa:	4798      	blx	r3
 8011fac:	60f8      	str	r0, [r7, #12]
      break;
 8011fae:	e112      	b.n	80121d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	7c1b      	ldrb	r3, [r3, #16]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d10d      	bne.n	8011fd4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fc0:	f107 0208 	add.w	r2, r7, #8
 8011fc4:	4610      	mov	r0, r2
 8011fc6:	4798      	blx	r3
 8011fc8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	3301      	adds	r3, #1
 8011fce:	2202      	movs	r2, #2
 8011fd0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011fd2:	e100      	b.n	80121d6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fdc:	f107 0208 	add.w	r2, r7, #8
 8011fe0:	4610      	mov	r0, r2
 8011fe2:	4798      	blx	r3
 8011fe4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	3301      	adds	r3, #1
 8011fea:	2202      	movs	r2, #2
 8011fec:	701a      	strb	r2, [r3, #0]
      break;
 8011fee:	e0f2      	b.n	80121d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	885b      	ldrh	r3, [r3, #2]
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	2b05      	cmp	r3, #5
 8011ff8:	f200 80ac 	bhi.w	8012154 <USBD_GetDescriptor+0x258>
 8011ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8012004 <USBD_GetDescriptor+0x108>)
 8011ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012002:	bf00      	nop
 8012004:	0801201d 	.word	0x0801201d
 8012008:	08012051 	.word	0x08012051
 801200c:	08012085 	.word	0x08012085
 8012010:	080120b9 	.word	0x080120b9
 8012014:	080120ed 	.word	0x080120ed
 8012018:	08012121 	.word	0x08012121
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d00b      	beq.n	8012040 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	7c12      	ldrb	r2, [r2, #16]
 8012034:	f107 0108 	add.w	r1, r7, #8
 8012038:	4610      	mov	r0, r2
 801203a:	4798      	blx	r3
 801203c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801203e:	e091      	b.n	8012164 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012040:	6839      	ldr	r1, [r7, #0]
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f000 facb 	bl	80125de <USBD_CtlError>
            err++;
 8012048:	7afb      	ldrb	r3, [r7, #11]
 801204a:	3301      	adds	r3, #1
 801204c:	72fb      	strb	r3, [r7, #11]
          break;
 801204e:	e089      	b.n	8012164 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012056:	689b      	ldr	r3, [r3, #8]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d00b      	beq.n	8012074 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012062:	689b      	ldr	r3, [r3, #8]
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	7c12      	ldrb	r2, [r2, #16]
 8012068:	f107 0108 	add.w	r1, r7, #8
 801206c:	4610      	mov	r0, r2
 801206e:	4798      	blx	r3
 8012070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012072:	e077      	b.n	8012164 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012074:	6839      	ldr	r1, [r7, #0]
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f000 fab1 	bl	80125de <USBD_CtlError>
            err++;
 801207c:	7afb      	ldrb	r3, [r7, #11]
 801207e:	3301      	adds	r3, #1
 8012080:	72fb      	strb	r3, [r7, #11]
          break;
 8012082:	e06f      	b.n	8012164 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801208a:	68db      	ldr	r3, [r3, #12]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d00b      	beq.n	80120a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	7c12      	ldrb	r2, [r2, #16]
 801209c:	f107 0108 	add.w	r1, r7, #8
 80120a0:	4610      	mov	r0, r2
 80120a2:	4798      	blx	r3
 80120a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80120a6:	e05d      	b.n	8012164 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80120a8:	6839      	ldr	r1, [r7, #0]
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f000 fa97 	bl	80125de <USBD_CtlError>
            err++;
 80120b0:	7afb      	ldrb	r3, [r7, #11]
 80120b2:	3301      	adds	r3, #1
 80120b4:	72fb      	strb	r3, [r7, #11]
          break;
 80120b6:	e055      	b.n	8012164 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120be:	691b      	ldr	r3, [r3, #16]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d00b      	beq.n	80120dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120ca:	691b      	ldr	r3, [r3, #16]
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	7c12      	ldrb	r2, [r2, #16]
 80120d0:	f107 0108 	add.w	r1, r7, #8
 80120d4:	4610      	mov	r0, r2
 80120d6:	4798      	blx	r3
 80120d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80120da:	e043      	b.n	8012164 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80120dc:	6839      	ldr	r1, [r7, #0]
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f000 fa7d 	bl	80125de <USBD_CtlError>
            err++;
 80120e4:	7afb      	ldrb	r3, [r7, #11]
 80120e6:	3301      	adds	r3, #1
 80120e8:	72fb      	strb	r3, [r7, #11]
          break;
 80120ea:	e03b      	b.n	8012164 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120f2:	695b      	ldr	r3, [r3, #20]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d00b      	beq.n	8012110 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120fe:	695b      	ldr	r3, [r3, #20]
 8012100:	687a      	ldr	r2, [r7, #4]
 8012102:	7c12      	ldrb	r2, [r2, #16]
 8012104:	f107 0108 	add.w	r1, r7, #8
 8012108:	4610      	mov	r0, r2
 801210a:	4798      	blx	r3
 801210c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801210e:	e029      	b.n	8012164 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012110:	6839      	ldr	r1, [r7, #0]
 8012112:	6878      	ldr	r0, [r7, #4]
 8012114:	f000 fa63 	bl	80125de <USBD_CtlError>
            err++;
 8012118:	7afb      	ldrb	r3, [r7, #11]
 801211a:	3301      	adds	r3, #1
 801211c:	72fb      	strb	r3, [r7, #11]
          break;
 801211e:	e021      	b.n	8012164 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012126:	699b      	ldr	r3, [r3, #24]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d00b      	beq.n	8012144 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012132:	699b      	ldr	r3, [r3, #24]
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	7c12      	ldrb	r2, [r2, #16]
 8012138:	f107 0108 	add.w	r1, r7, #8
 801213c:	4610      	mov	r0, r2
 801213e:	4798      	blx	r3
 8012140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012142:	e00f      	b.n	8012164 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012144:	6839      	ldr	r1, [r7, #0]
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f000 fa49 	bl	80125de <USBD_CtlError>
            err++;
 801214c:	7afb      	ldrb	r3, [r7, #11]
 801214e:	3301      	adds	r3, #1
 8012150:	72fb      	strb	r3, [r7, #11]
          break;
 8012152:	e007      	b.n	8012164 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012154:	6839      	ldr	r1, [r7, #0]
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f000 fa41 	bl	80125de <USBD_CtlError>
          err++;
 801215c:	7afb      	ldrb	r3, [r7, #11]
 801215e:	3301      	adds	r3, #1
 8012160:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012162:	bf00      	nop
      }
      break;
 8012164:	e037      	b.n	80121d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	7c1b      	ldrb	r3, [r3, #16]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d109      	bne.n	8012182 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012176:	f107 0208 	add.w	r2, r7, #8
 801217a:	4610      	mov	r0, r2
 801217c:	4798      	blx	r3
 801217e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012180:	e029      	b.n	80121d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012182:	6839      	ldr	r1, [r7, #0]
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 fa2a 	bl	80125de <USBD_CtlError>
        err++;
 801218a:	7afb      	ldrb	r3, [r7, #11]
 801218c:	3301      	adds	r3, #1
 801218e:	72fb      	strb	r3, [r7, #11]
      break;
 8012190:	e021      	b.n	80121d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	7c1b      	ldrb	r3, [r3, #16]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d10d      	bne.n	80121b6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121a2:	f107 0208 	add.w	r2, r7, #8
 80121a6:	4610      	mov	r0, r2
 80121a8:	4798      	blx	r3
 80121aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	3301      	adds	r3, #1
 80121b0:	2207      	movs	r2, #7
 80121b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80121b4:	e00f      	b.n	80121d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80121b6:	6839      	ldr	r1, [r7, #0]
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f000 fa10 	bl	80125de <USBD_CtlError>
        err++;
 80121be:	7afb      	ldrb	r3, [r7, #11]
 80121c0:	3301      	adds	r3, #1
 80121c2:	72fb      	strb	r3, [r7, #11]
      break;
 80121c4:	e007      	b.n	80121d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80121c6:	6839      	ldr	r1, [r7, #0]
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f000 fa08 	bl	80125de <USBD_CtlError>
      err++;
 80121ce:	7afb      	ldrb	r3, [r7, #11]
 80121d0:	3301      	adds	r3, #1
 80121d2:	72fb      	strb	r3, [r7, #11]
      break;
 80121d4:	bf00      	nop
  }

  if (err != 0U)
 80121d6:	7afb      	ldrb	r3, [r7, #11]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d11e      	bne.n	801221a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	88db      	ldrh	r3, [r3, #6]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d016      	beq.n	8012212 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80121e4:	893b      	ldrh	r3, [r7, #8]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d00e      	beq.n	8012208 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	88da      	ldrh	r2, [r3, #6]
 80121ee:	893b      	ldrh	r3, [r7, #8]
 80121f0:	4293      	cmp	r3, r2
 80121f2:	bf28      	it	cs
 80121f4:	4613      	movcs	r3, r2
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80121fa:	893b      	ldrh	r3, [r7, #8]
 80121fc:	461a      	mov	r2, r3
 80121fe:	68f9      	ldr	r1, [r7, #12]
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f000 fa69 	bl	80126d8 <USBD_CtlSendData>
 8012206:	e009      	b.n	801221c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012208:	6839      	ldr	r1, [r7, #0]
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 f9e7 	bl	80125de <USBD_CtlError>
 8012210:	e004      	b.n	801221c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 faba 	bl	801278c <USBD_CtlSendStatus>
 8012218:	e000      	b.n	801221c <USBD_GetDescriptor+0x320>
    return;
 801221a:	bf00      	nop
  }
}
 801221c:	3710      	adds	r7, #16
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
 8012222:	bf00      	nop

08012224 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	889b      	ldrh	r3, [r3, #4]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d131      	bne.n	801229a <USBD_SetAddress+0x76>
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	88db      	ldrh	r3, [r3, #6]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d12d      	bne.n	801229a <USBD_SetAddress+0x76>
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	885b      	ldrh	r3, [r3, #2]
 8012242:	2b7f      	cmp	r3, #127	@ 0x7f
 8012244:	d829      	bhi.n	801229a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	885b      	ldrh	r3, [r3, #2]
 801224a:	b2db      	uxtb	r3, r3
 801224c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012250:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012258:	b2db      	uxtb	r3, r3
 801225a:	2b03      	cmp	r3, #3
 801225c:	d104      	bne.n	8012268 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801225e:	6839      	ldr	r1, [r7, #0]
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f000 f9bc 	bl	80125de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012266:	e01d      	b.n	80122a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	7bfa      	ldrb	r2, [r7, #15]
 801226c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012270:	7bfb      	ldrb	r3, [r7, #15]
 8012272:	4619      	mov	r1, r3
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f000 ff4f 	bl	8013118 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f000 fa86 	bl	801278c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012280:	7bfb      	ldrb	r3, [r7, #15]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d004      	beq.n	8012290 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2202      	movs	r2, #2
 801228a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801228e:	e009      	b.n	80122a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2201      	movs	r2, #1
 8012294:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012298:	e004      	b.n	80122a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801229a:	6839      	ldr	r1, [r7, #0]
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f000 f99e 	bl	80125de <USBD_CtlError>
  }
}
 80122a2:	bf00      	nop
 80122a4:	bf00      	nop
 80122a6:	3710      	adds	r7, #16
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b084      	sub	sp, #16
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
 80122b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	885b      	ldrh	r3, [r3, #2]
 80122be:	b2da      	uxtb	r2, r3
 80122c0:	4b4e      	ldr	r3, [pc, #312]	@ (80123fc <USBD_SetConfig+0x150>)
 80122c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80122c4:	4b4d      	ldr	r3, [pc, #308]	@ (80123fc <USBD_SetConfig+0x150>)
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	2b01      	cmp	r3, #1
 80122ca:	d905      	bls.n	80122d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80122cc:	6839      	ldr	r1, [r7, #0]
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 f985 	bl	80125de <USBD_CtlError>
    return USBD_FAIL;
 80122d4:	2303      	movs	r3, #3
 80122d6:	e08c      	b.n	80123f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	2b02      	cmp	r3, #2
 80122e2:	d002      	beq.n	80122ea <USBD_SetConfig+0x3e>
 80122e4:	2b03      	cmp	r3, #3
 80122e6:	d029      	beq.n	801233c <USBD_SetConfig+0x90>
 80122e8:	e075      	b.n	80123d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80122ea:	4b44      	ldr	r3, [pc, #272]	@ (80123fc <USBD_SetConfig+0x150>)
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d020      	beq.n	8012334 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80122f2:	4b42      	ldr	r3, [pc, #264]	@ (80123fc <USBD_SetConfig+0x150>)
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	461a      	mov	r2, r3
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80122fc:	4b3f      	ldr	r3, [pc, #252]	@ (80123fc <USBD_SetConfig+0x150>)
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	4619      	mov	r1, r3
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f7fe ffb9 	bl	801127a <USBD_SetClassConfig>
 8012308:	4603      	mov	r3, r0
 801230a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801230c:	7bfb      	ldrb	r3, [r7, #15]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d008      	beq.n	8012324 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012312:	6839      	ldr	r1, [r7, #0]
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 f962 	bl	80125de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2202      	movs	r2, #2
 801231e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012322:	e065      	b.n	80123f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f000 fa31 	bl	801278c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2203      	movs	r2, #3
 801232e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012332:	e05d      	b.n	80123f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 fa29 	bl	801278c <USBD_CtlSendStatus>
      break;
 801233a:	e059      	b.n	80123f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801233c:	4b2f      	ldr	r3, [pc, #188]	@ (80123fc <USBD_SetConfig+0x150>)
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d112      	bne.n	801236a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2202      	movs	r2, #2
 8012348:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801234c:	4b2b      	ldr	r3, [pc, #172]	@ (80123fc <USBD_SetConfig+0x150>)
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	461a      	mov	r2, r3
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012356:	4b29      	ldr	r3, [pc, #164]	@ (80123fc <USBD_SetConfig+0x150>)
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	4619      	mov	r1, r3
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f7fe ffa8 	bl	80112b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 fa12 	bl	801278c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012368:	e042      	b.n	80123f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801236a:	4b24      	ldr	r3, [pc, #144]	@ (80123fc <USBD_SetConfig+0x150>)
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	461a      	mov	r2, r3
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	429a      	cmp	r2, r3
 8012376:	d02a      	beq.n	80123ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	685b      	ldr	r3, [r3, #4]
 801237c:	b2db      	uxtb	r3, r3
 801237e:	4619      	mov	r1, r3
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f7fe ff96 	bl	80112b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012386:	4b1d      	ldr	r3, [pc, #116]	@ (80123fc <USBD_SetConfig+0x150>)
 8012388:	781b      	ldrb	r3, [r3, #0]
 801238a:	461a      	mov	r2, r3
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012390:	4b1a      	ldr	r3, [pc, #104]	@ (80123fc <USBD_SetConfig+0x150>)
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	4619      	mov	r1, r3
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f7fe ff6f 	bl	801127a <USBD_SetClassConfig>
 801239c:	4603      	mov	r3, r0
 801239e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80123a0:	7bfb      	ldrb	r3, [r7, #15]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d00f      	beq.n	80123c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80123a6:	6839      	ldr	r1, [r7, #0]
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f000 f918 	bl	80125de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	4619      	mov	r1, r3
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f7fe ff7b 	bl	80112b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2202      	movs	r2, #2
 80123c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80123c4:	e014      	b.n	80123f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f000 f9e0 	bl	801278c <USBD_CtlSendStatus>
      break;
 80123cc:	e010      	b.n	80123f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 f9dc 	bl	801278c <USBD_CtlSendStatus>
      break;
 80123d4:	e00c      	b.n	80123f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80123d6:	6839      	ldr	r1, [r7, #0]
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f000 f900 	bl	80125de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80123de:	4b07      	ldr	r3, [pc, #28]	@ (80123fc <USBD_SetConfig+0x150>)
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	4619      	mov	r1, r3
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f7fe ff64 	bl	80112b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80123ea:	2303      	movs	r3, #3
 80123ec:	73fb      	strb	r3, [r7, #15]
      break;
 80123ee:	bf00      	nop
  }

  return ret;
 80123f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3710      	adds	r7, #16
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop
 80123fc:	240004e0 	.word	0x240004e0

08012400 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	88db      	ldrh	r3, [r3, #6]
 801240e:	2b01      	cmp	r3, #1
 8012410:	d004      	beq.n	801241c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012412:	6839      	ldr	r1, [r7, #0]
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 f8e2 	bl	80125de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801241a:	e023      	b.n	8012464 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012422:	b2db      	uxtb	r3, r3
 8012424:	2b02      	cmp	r3, #2
 8012426:	dc02      	bgt.n	801242e <USBD_GetConfig+0x2e>
 8012428:	2b00      	cmp	r3, #0
 801242a:	dc03      	bgt.n	8012434 <USBD_GetConfig+0x34>
 801242c:	e015      	b.n	801245a <USBD_GetConfig+0x5a>
 801242e:	2b03      	cmp	r3, #3
 8012430:	d00b      	beq.n	801244a <USBD_GetConfig+0x4a>
 8012432:	e012      	b.n	801245a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2200      	movs	r2, #0
 8012438:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	3308      	adds	r3, #8
 801243e:	2201      	movs	r2, #1
 8012440:	4619      	mov	r1, r3
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f000 f948 	bl	80126d8 <USBD_CtlSendData>
        break;
 8012448:	e00c      	b.n	8012464 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	3304      	adds	r3, #4
 801244e:	2201      	movs	r2, #1
 8012450:	4619      	mov	r1, r3
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f940 	bl	80126d8 <USBD_CtlSendData>
        break;
 8012458:	e004      	b.n	8012464 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801245a:	6839      	ldr	r1, [r7, #0]
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f000 f8be 	bl	80125de <USBD_CtlError>
        break;
 8012462:	bf00      	nop
}
 8012464:	bf00      	nop
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801247c:	b2db      	uxtb	r3, r3
 801247e:	3b01      	subs	r3, #1
 8012480:	2b02      	cmp	r3, #2
 8012482:	d81e      	bhi.n	80124c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	88db      	ldrh	r3, [r3, #6]
 8012488:	2b02      	cmp	r3, #2
 801248a:	d004      	beq.n	8012496 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801248c:	6839      	ldr	r1, [r7, #0]
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f000 f8a5 	bl	80125de <USBD_CtlError>
        break;
 8012494:	e01a      	b.n	80124cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2201      	movs	r2, #1
 801249a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d005      	beq.n	80124b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	68db      	ldr	r3, [r3, #12]
 80124aa:	f043 0202 	orr.w	r2, r3, #2
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	330c      	adds	r3, #12
 80124b6:	2202      	movs	r2, #2
 80124b8:	4619      	mov	r1, r3
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 f90c 	bl	80126d8 <USBD_CtlSendData>
      break;
 80124c0:	e004      	b.n	80124cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80124c2:	6839      	ldr	r1, [r7, #0]
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f000 f88a 	bl	80125de <USBD_CtlError>
      break;
 80124ca:	bf00      	nop
  }
}
 80124cc:	bf00      	nop
 80124ce:	3708      	adds	r7, #8
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	885b      	ldrh	r3, [r3, #2]
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d107      	bne.n	80124f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2201      	movs	r2, #1
 80124ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 f94c 	bl	801278c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80124f4:	e013      	b.n	801251e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	885b      	ldrh	r3, [r3, #2]
 80124fa:	2b02      	cmp	r3, #2
 80124fc:	d10b      	bne.n	8012516 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	889b      	ldrh	r3, [r3, #4]
 8012502:	0a1b      	lsrs	r3, r3, #8
 8012504:	b29b      	uxth	r3, r3
 8012506:	b2da      	uxtb	r2, r3
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f000 f93c 	bl	801278c <USBD_CtlSendStatus>
}
 8012514:	e003      	b.n	801251e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012516:	6839      	ldr	r1, [r7, #0]
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 f860 	bl	80125de <USBD_CtlError>
}
 801251e:	bf00      	nop
 8012520:	3708      	adds	r7, #8
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}

08012526 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012526:	b580      	push	{r7, lr}
 8012528:	b082      	sub	sp, #8
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
 801252e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012536:	b2db      	uxtb	r3, r3
 8012538:	3b01      	subs	r3, #1
 801253a:	2b02      	cmp	r3, #2
 801253c:	d80b      	bhi.n	8012556 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	885b      	ldrh	r3, [r3, #2]
 8012542:	2b01      	cmp	r3, #1
 8012544:	d10c      	bne.n	8012560 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2200      	movs	r2, #0
 801254a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f000 f91c 	bl	801278c <USBD_CtlSendStatus>
      }
      break;
 8012554:	e004      	b.n	8012560 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012556:	6839      	ldr	r1, [r7, #0]
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f000 f840 	bl	80125de <USBD_CtlError>
      break;
 801255e:	e000      	b.n	8012562 <USBD_ClrFeature+0x3c>
      break;
 8012560:	bf00      	nop
  }
}
 8012562:	bf00      	nop
 8012564:	3708      	adds	r7, #8
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}

0801256a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801256a:	b580      	push	{r7, lr}
 801256c:	b084      	sub	sp, #16
 801256e:	af00      	add	r7, sp, #0
 8012570:	6078      	str	r0, [r7, #4]
 8012572:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	781a      	ldrb	r2, [r3, #0]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	3301      	adds	r3, #1
 8012584:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	781a      	ldrb	r2, [r3, #0]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	3301      	adds	r3, #1
 8012592:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012594:	68f8      	ldr	r0, [r7, #12]
 8012596:	f7ff fa16 	bl	80119c6 <SWAPBYTE>
 801259a:	4603      	mov	r3, r0
 801259c:	461a      	mov	r2, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	3301      	adds	r3, #1
 80125a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	3301      	adds	r3, #1
 80125ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80125ae:	68f8      	ldr	r0, [r7, #12]
 80125b0:	f7ff fa09 	bl	80119c6 <SWAPBYTE>
 80125b4:	4603      	mov	r3, r0
 80125b6:	461a      	mov	r2, r3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	3301      	adds	r3, #1
 80125c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	3301      	adds	r3, #1
 80125c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f7ff f9fc 	bl	80119c6 <SWAPBYTE>
 80125ce:	4603      	mov	r3, r0
 80125d0:	461a      	mov	r2, r3
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	80da      	strh	r2, [r3, #6]
}
 80125d6:	bf00      	nop
 80125d8:	3710      	adds	r7, #16
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125de:	b580      	push	{r7, lr}
 80125e0:	b082      	sub	sp, #8
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
 80125e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80125e8:	2180      	movs	r1, #128	@ 0x80
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f000 fd2a 	bl	8013044 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80125f0:	2100      	movs	r1, #0
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f000 fd26 	bl	8013044 <USBD_LL_StallEP>
}
 80125f8:	bf00      	nop
 80125fa:	3708      	adds	r7, #8
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b086      	sub	sp, #24
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801260c:	2300      	movs	r3, #0
 801260e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d042      	beq.n	801269c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801261a:	6938      	ldr	r0, [r7, #16]
 801261c:	f000 f842 	bl	80126a4 <USBD_GetLen>
 8012620:	4603      	mov	r3, r0
 8012622:	3301      	adds	r3, #1
 8012624:	005b      	lsls	r3, r3, #1
 8012626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801262a:	d808      	bhi.n	801263e <USBD_GetString+0x3e>
 801262c:	6938      	ldr	r0, [r7, #16]
 801262e:	f000 f839 	bl	80126a4 <USBD_GetLen>
 8012632:	4603      	mov	r3, r0
 8012634:	3301      	adds	r3, #1
 8012636:	b29b      	uxth	r3, r3
 8012638:	005b      	lsls	r3, r3, #1
 801263a:	b29a      	uxth	r2, r3
 801263c:	e001      	b.n	8012642 <USBD_GetString+0x42>
 801263e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012646:	7dfb      	ldrb	r3, [r7, #23]
 8012648:	68ba      	ldr	r2, [r7, #8]
 801264a:	4413      	add	r3, r2
 801264c:	687a      	ldr	r2, [r7, #4]
 801264e:	7812      	ldrb	r2, [r2, #0]
 8012650:	701a      	strb	r2, [r3, #0]
  idx++;
 8012652:	7dfb      	ldrb	r3, [r7, #23]
 8012654:	3301      	adds	r3, #1
 8012656:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012658:	7dfb      	ldrb	r3, [r7, #23]
 801265a:	68ba      	ldr	r2, [r7, #8]
 801265c:	4413      	add	r3, r2
 801265e:	2203      	movs	r2, #3
 8012660:	701a      	strb	r2, [r3, #0]
  idx++;
 8012662:	7dfb      	ldrb	r3, [r7, #23]
 8012664:	3301      	adds	r3, #1
 8012666:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012668:	e013      	b.n	8012692 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801266a:	7dfb      	ldrb	r3, [r7, #23]
 801266c:	68ba      	ldr	r2, [r7, #8]
 801266e:	4413      	add	r3, r2
 8012670:	693a      	ldr	r2, [r7, #16]
 8012672:	7812      	ldrb	r2, [r2, #0]
 8012674:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	3301      	adds	r3, #1
 801267a:	613b      	str	r3, [r7, #16]
    idx++;
 801267c:	7dfb      	ldrb	r3, [r7, #23]
 801267e:	3301      	adds	r3, #1
 8012680:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012682:	7dfb      	ldrb	r3, [r7, #23]
 8012684:	68ba      	ldr	r2, [r7, #8]
 8012686:	4413      	add	r3, r2
 8012688:	2200      	movs	r2, #0
 801268a:	701a      	strb	r2, [r3, #0]
    idx++;
 801268c:	7dfb      	ldrb	r3, [r7, #23]
 801268e:	3301      	adds	r3, #1
 8012690:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d1e7      	bne.n	801266a <USBD_GetString+0x6a>
 801269a:	e000      	b.n	801269e <USBD_GetString+0x9e>
    return;
 801269c:	bf00      	nop
  }
}
 801269e:	3718      	adds	r7, #24
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80126a4:	b480      	push	{r7}
 80126a6:	b085      	sub	sp, #20
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80126ac:	2300      	movs	r3, #0
 80126ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80126b4:	e005      	b.n	80126c2 <USBD_GetLen+0x1e>
  {
    len++;
 80126b6:	7bfb      	ldrb	r3, [r7, #15]
 80126b8:	3301      	adds	r3, #1
 80126ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	3301      	adds	r3, #1
 80126c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	781b      	ldrb	r3, [r3, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d1f5      	bne.n	80126b6 <USBD_GetLen+0x12>
  }

  return len;
 80126ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3714      	adds	r7, #20
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr

080126d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b084      	sub	sp, #16
 80126dc:	af00      	add	r7, sp, #0
 80126de:	60f8      	str	r0, [r7, #12]
 80126e0:	60b9      	str	r1, [r7, #8]
 80126e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2202      	movs	r2, #2
 80126e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	68ba      	ldr	r2, [r7, #8]
 80126fc:	2100      	movs	r1, #0
 80126fe:	68f8      	ldr	r0, [r7, #12]
 8012700:	f000 fd29 	bl	8013156 <USBD_LL_Transmit>

  return USBD_OK;
 8012704:	2300      	movs	r3, #0
}
 8012706:	4618      	mov	r0, r3
 8012708:	3710      	adds	r7, #16
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}

0801270e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801270e:	b580      	push	{r7, lr}
 8012710:	b084      	sub	sp, #16
 8012712:	af00      	add	r7, sp, #0
 8012714:	60f8      	str	r0, [r7, #12]
 8012716:	60b9      	str	r1, [r7, #8]
 8012718:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	68ba      	ldr	r2, [r7, #8]
 801271e:	2100      	movs	r1, #0
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	f000 fd18 	bl	8013156 <USBD_LL_Transmit>

  return USBD_OK;
 8012726:	2300      	movs	r3, #0
}
 8012728:	4618      	mov	r0, r3
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2203      	movs	r2, #3
 8012740:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	687a      	ldr	r2, [r7, #4]
 8012750:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	68ba      	ldr	r2, [r7, #8]
 8012758:	2100      	movs	r1, #0
 801275a:	68f8      	ldr	r0, [r7, #12]
 801275c:	f000 fd1c 	bl	8013198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012760:	2300      	movs	r3, #0
}
 8012762:	4618      	mov	r0, r3
 8012764:	3710      	adds	r7, #16
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801276a:	b580      	push	{r7, lr}
 801276c:	b084      	sub	sp, #16
 801276e:	af00      	add	r7, sp, #0
 8012770:	60f8      	str	r0, [r7, #12]
 8012772:	60b9      	str	r1, [r7, #8]
 8012774:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	68ba      	ldr	r2, [r7, #8]
 801277a:	2100      	movs	r1, #0
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	f000 fd0b 	bl	8013198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012782:	2300      	movs	r3, #0
}
 8012784:	4618      	mov	r0, r3
 8012786:	3710      	adds	r7, #16
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}

0801278c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2204      	movs	r2, #4
 8012798:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801279c:	2300      	movs	r3, #0
 801279e:	2200      	movs	r2, #0
 80127a0:	2100      	movs	r1, #0
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f000 fcd7 	bl	8013156 <USBD_LL_Transmit>

  return USBD_OK;
 80127a8:	2300      	movs	r3, #0
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3708      	adds	r7, #8
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}

080127b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80127b2:	b580      	push	{r7, lr}
 80127b4:	b082      	sub	sp, #8
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	2205      	movs	r2, #5
 80127be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80127c2:	2300      	movs	r3, #0
 80127c4:	2200      	movs	r2, #0
 80127c6:	2100      	movs	r1, #0
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f000 fce5 	bl	8013198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80127ce:	2300      	movs	r3, #0
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80127dc:	2201      	movs	r2, #1
 80127de:	4913      	ldr	r1, [pc, #76]	@ (801282c <MX_USB_DEVICE_Init+0x54>)
 80127e0:	4813      	ldr	r0, [pc, #76]	@ (8012830 <MX_USB_DEVICE_Init+0x58>)
 80127e2:	f7fe fccd 	bl	8011180 <USBD_Init>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d001      	beq.n	80127f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80127ec:	f7ee fc24 	bl	8001038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80127f0:	4910      	ldr	r1, [pc, #64]	@ (8012834 <MX_USB_DEVICE_Init+0x5c>)
 80127f2:	480f      	ldr	r0, [pc, #60]	@ (8012830 <MX_USB_DEVICE_Init+0x58>)
 80127f4:	f7fe fcf4 	bl	80111e0 <USBD_RegisterClass>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d001      	beq.n	8012802 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80127fe:	f7ee fc1b 	bl	8001038 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8012802:	490d      	ldr	r1, [pc, #52]	@ (8012838 <MX_USB_DEVICE_Init+0x60>)
 8012804:	480a      	ldr	r0, [pc, #40]	@ (8012830 <MX_USB_DEVICE_Init+0x58>)
 8012806:	f7fe fc2b 	bl	8011060 <USBD_CDC_RegisterInterface>
 801280a:	4603      	mov	r3, r0
 801280c:	2b00      	cmp	r3, #0
 801280e:	d001      	beq.n	8012814 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012810:	f7ee fc12 	bl	8001038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8012814:	4806      	ldr	r0, [pc, #24]	@ (8012830 <MX_USB_DEVICE_Init+0x58>)
 8012816:	f7fe fd19 	bl	801124c <USBD_Start>
 801281a:	4603      	mov	r3, r0
 801281c:	2b00      	cmp	r3, #0
 801281e:	d001      	beq.n	8012824 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012820:	f7ee fc0a 	bl	8001038 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012824:	f7f7 ff5c 	bl	800a6e0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012828:	bf00      	nop
 801282a:	bd80      	pop	{r7, pc}
 801282c:	240000b4 	.word	0x240000b4
 8012830:	240004e4 	.word	0x240004e4
 8012834:	24000020 	.word	0x24000020
 8012838:	240000a0 	.word	0x240000a0

0801283c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8012840:	2200      	movs	r2, #0
 8012842:	4905      	ldr	r1, [pc, #20]	@ (8012858 <CDC_Init_HS+0x1c>)
 8012844:	4805      	ldr	r0, [pc, #20]	@ (801285c <CDC_Init_HS+0x20>)
 8012846:	f7fe fc25 	bl	8011094 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801284a:	4905      	ldr	r1, [pc, #20]	@ (8012860 <CDC_Init_HS+0x24>)
 801284c:	4803      	ldr	r0, [pc, #12]	@ (801285c <CDC_Init_HS+0x20>)
 801284e:	f7fe fc43 	bl	80110d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012852:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012854:	4618      	mov	r0, r3
 8012856:	bd80      	pop	{r7, pc}
 8012858:	24000fc0 	.word	0x24000fc0
 801285c:	240004e4 	.word	0x240004e4
 8012860:	240007c0 	.word	0x240007c0

08012864 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8012864:	b480      	push	{r7}
 8012866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012868:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801286a:	4618      	mov	r0, r3
 801286c:	46bd      	mov	sp, r7
 801286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012872:	4770      	bx	lr

08012874 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	4603      	mov	r3, r0
 801287c:	6039      	str	r1, [r7, #0]
 801287e:	71fb      	strb	r3, [r7, #7]
 8012880:	4613      	mov	r3, r2
 8012882:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8012884:	79fb      	ldrb	r3, [r7, #7]
 8012886:	2b23      	cmp	r3, #35	@ 0x23
 8012888:	d84a      	bhi.n	8012920 <CDC_Control_HS+0xac>
 801288a:	a201      	add	r2, pc, #4	@ (adr r2, 8012890 <CDC_Control_HS+0x1c>)
 801288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012890:	08012921 	.word	0x08012921
 8012894:	08012921 	.word	0x08012921
 8012898:	08012921 	.word	0x08012921
 801289c:	08012921 	.word	0x08012921
 80128a0:	08012921 	.word	0x08012921
 80128a4:	08012921 	.word	0x08012921
 80128a8:	08012921 	.word	0x08012921
 80128ac:	08012921 	.word	0x08012921
 80128b0:	08012921 	.word	0x08012921
 80128b4:	08012921 	.word	0x08012921
 80128b8:	08012921 	.word	0x08012921
 80128bc:	08012921 	.word	0x08012921
 80128c0:	08012921 	.word	0x08012921
 80128c4:	08012921 	.word	0x08012921
 80128c8:	08012921 	.word	0x08012921
 80128cc:	08012921 	.word	0x08012921
 80128d0:	08012921 	.word	0x08012921
 80128d4:	08012921 	.word	0x08012921
 80128d8:	08012921 	.word	0x08012921
 80128dc:	08012921 	.word	0x08012921
 80128e0:	08012921 	.word	0x08012921
 80128e4:	08012921 	.word	0x08012921
 80128e8:	08012921 	.word	0x08012921
 80128ec:	08012921 	.word	0x08012921
 80128f0:	08012921 	.word	0x08012921
 80128f4:	08012921 	.word	0x08012921
 80128f8:	08012921 	.word	0x08012921
 80128fc:	08012921 	.word	0x08012921
 8012900:	08012921 	.word	0x08012921
 8012904:	08012921 	.word	0x08012921
 8012908:	08012921 	.word	0x08012921
 801290c:	08012921 	.word	0x08012921
 8012910:	08012921 	.word	0x08012921
 8012914:	08012921 	.word	0x08012921
 8012918:	08012921 	.word	0x08012921
 801291c:	08012921 	.word	0x08012921
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012920:	bf00      	nop
  }

  return (USBD_OK);
 8012922:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8012924:	4618      	mov	r0, r3
 8012926:	370c      	adds	r7, #12
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
 8012938:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801293a:	6879      	ldr	r1, [r7, #4]
 801293c:	480b      	ldr	r0, [pc, #44]	@ (801296c <CDC_Receive_HS+0x3c>)
 801293e:	f7fe fbcb 	bl	80110d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8012942:	480a      	ldr	r0, [pc, #40]	@ (801296c <CDC_Receive_HS+0x3c>)
 8012944:	f7fe fbe6 	bl	8011114 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferHS, *Len);
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	4619      	mov	r1, r3
 801294e:	4808      	ldr	r0, [pc, #32]	@ (8012970 <CDC_Receive_HS+0x40>)
 8012950:	f7ed ff28 	bl	80007a4 <USB_CDC_RxHandler>
  memset(UserRxBufferHS, '\0', *Len);
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	461a      	mov	r2, r3
 801295a:	2100      	movs	r1, #0
 801295c:	4804      	ldr	r0, [pc, #16]	@ (8012970 <CDC_Receive_HS+0x40>)
 801295e:	f000 fc93 	bl	8013288 <memset>
  return (USBD_OK);
 8012962:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8012964:	4618      	mov	r0, r3
 8012966:	3708      	adds	r7, #8
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}
 801296c:	240004e4 	.word	0x240004e4
 8012970:	240007c0 	.word	0x240007c0

08012974 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012974:	b480      	push	{r7}
 8012976:	b087      	sub	sp, #28
 8012978:	af00      	add	r7, sp, #0
 801297a:	60f8      	str	r0, [r7, #12]
 801297c:	60b9      	str	r1, [r7, #8]
 801297e:	4613      	mov	r3, r2
 8012980:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012982:	2300      	movs	r3, #0
 8012984:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8012986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801298a:	4618      	mov	r0, r3
 801298c:	371c      	adds	r7, #28
 801298e:	46bd      	mov	sp, r7
 8012990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012994:	4770      	bx	lr
	...

08012998 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012998:	b480      	push	{r7}
 801299a:	b083      	sub	sp, #12
 801299c:	af00      	add	r7, sp, #0
 801299e:	4603      	mov	r3, r0
 80129a0:	6039      	str	r1, [r7, #0]
 80129a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	2212      	movs	r2, #18
 80129a8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80129aa:	4b03      	ldr	r3, [pc, #12]	@ (80129b8 <USBD_HS_DeviceDescriptor+0x20>)
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	370c      	adds	r7, #12
 80129b0:	46bd      	mov	sp, r7
 80129b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b6:	4770      	bx	lr
 80129b8:	240000d4 	.word	0x240000d4

080129bc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129bc:	b480      	push	{r7}
 80129be:	b083      	sub	sp, #12
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	4603      	mov	r3, r0
 80129c4:	6039      	str	r1, [r7, #0]
 80129c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	2204      	movs	r2, #4
 80129cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80129ce:	4b03      	ldr	r3, [pc, #12]	@ (80129dc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	370c      	adds	r7, #12
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr
 80129dc:	240000e8 	.word	0x240000e8

080129e0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	4603      	mov	r3, r0
 80129e8:	6039      	str	r1, [r7, #0]
 80129ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80129ec:	79fb      	ldrb	r3, [r7, #7]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d105      	bne.n	80129fe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80129f2:	683a      	ldr	r2, [r7, #0]
 80129f4:	4907      	ldr	r1, [pc, #28]	@ (8012a14 <USBD_HS_ProductStrDescriptor+0x34>)
 80129f6:	4808      	ldr	r0, [pc, #32]	@ (8012a18 <USBD_HS_ProductStrDescriptor+0x38>)
 80129f8:	f7ff fe02 	bl	8012600 <USBD_GetString>
 80129fc:	e004      	b.n	8012a08 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80129fe:	683a      	ldr	r2, [r7, #0]
 8012a00:	4904      	ldr	r1, [pc, #16]	@ (8012a14 <USBD_HS_ProductStrDescriptor+0x34>)
 8012a02:	4805      	ldr	r0, [pc, #20]	@ (8012a18 <USBD_HS_ProductStrDescriptor+0x38>)
 8012a04:	f7ff fdfc 	bl	8012600 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a08:	4b02      	ldr	r3, [pc, #8]	@ (8012a14 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	240017c0 	.word	0x240017c0
 8012a18:	08013464 	.word	0x08013464

08012a1c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	4603      	mov	r3, r0
 8012a24:	6039      	str	r1, [r7, #0]
 8012a26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012a28:	683a      	ldr	r2, [r7, #0]
 8012a2a:	4904      	ldr	r1, [pc, #16]	@ (8012a3c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8012a2c:	4804      	ldr	r0, [pc, #16]	@ (8012a40 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8012a2e:	f7ff fde7 	bl	8012600 <USBD_GetString>
  return USBD_StrDesc;
 8012a32:	4b02      	ldr	r3, [pc, #8]	@ (8012a3c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3708      	adds	r7, #8
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	240017c0 	.word	0x240017c0
 8012a40:	0801347c 	.word	0x0801347c

08012a44 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	6039      	str	r1, [r7, #0]
 8012a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	221a      	movs	r2, #26
 8012a54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012a56:	f000 f843 	bl	8012ae0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012a5a:	4b02      	ldr	r3, [pc, #8]	@ (8012a64 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3708      	adds	r7, #8
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd80      	pop	{r7, pc}
 8012a64:	240000ec 	.word	0x240000ec

08012a68 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	4603      	mov	r3, r0
 8012a70:	6039      	str	r1, [r7, #0]
 8012a72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012a74:	79fb      	ldrb	r3, [r7, #7]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d105      	bne.n	8012a86 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012a7a:	683a      	ldr	r2, [r7, #0]
 8012a7c:	4907      	ldr	r1, [pc, #28]	@ (8012a9c <USBD_HS_ConfigStrDescriptor+0x34>)
 8012a7e:	4808      	ldr	r0, [pc, #32]	@ (8012aa0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012a80:	f7ff fdbe 	bl	8012600 <USBD_GetString>
 8012a84:	e004      	b.n	8012a90 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012a86:	683a      	ldr	r2, [r7, #0]
 8012a88:	4904      	ldr	r1, [pc, #16]	@ (8012a9c <USBD_HS_ConfigStrDescriptor+0x34>)
 8012a8a:	4805      	ldr	r0, [pc, #20]	@ (8012aa0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012a8c:	f7ff fdb8 	bl	8012600 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a90:	4b02      	ldr	r3, [pc, #8]	@ (8012a9c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3708      	adds	r7, #8
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	240017c0 	.word	0x240017c0
 8012aa0:	08013490 	.word	0x08013490

08012aa4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	4603      	mov	r3, r0
 8012aac:	6039      	str	r1, [r7, #0]
 8012aae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ab0:	79fb      	ldrb	r3, [r7, #7]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d105      	bne.n	8012ac2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012ab6:	683a      	ldr	r2, [r7, #0]
 8012ab8:	4907      	ldr	r1, [pc, #28]	@ (8012ad8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012aba:	4808      	ldr	r0, [pc, #32]	@ (8012adc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012abc:	f7ff fda0 	bl	8012600 <USBD_GetString>
 8012ac0:	e004      	b.n	8012acc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012ac2:	683a      	ldr	r2, [r7, #0]
 8012ac4:	4904      	ldr	r1, [pc, #16]	@ (8012ad8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012ac6:	4805      	ldr	r0, [pc, #20]	@ (8012adc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012ac8:	f7ff fd9a 	bl	8012600 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012acc:	4b02      	ldr	r3, [pc, #8]	@ (8012ad8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3708      	adds	r7, #8
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}
 8012ad6:	bf00      	nop
 8012ad8:	240017c0 	.word	0x240017c0
 8012adc:	0801349c 	.word	0x0801349c

08012ae0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b084      	sub	sp, #16
 8012ae4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8012b24 <Get_SerialNum+0x44>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012aec:	4b0e      	ldr	r3, [pc, #56]	@ (8012b28 <Get_SerialNum+0x48>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012af2:	4b0e      	ldr	r3, [pc, #56]	@ (8012b2c <Get_SerialNum+0x4c>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012af8:	68fa      	ldr	r2, [r7, #12]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	4413      	add	r3, r2
 8012afe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d009      	beq.n	8012b1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012b06:	2208      	movs	r2, #8
 8012b08:	4909      	ldr	r1, [pc, #36]	@ (8012b30 <Get_SerialNum+0x50>)
 8012b0a:	68f8      	ldr	r0, [r7, #12]
 8012b0c:	f000 f814 	bl	8012b38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012b10:	2204      	movs	r2, #4
 8012b12:	4908      	ldr	r1, [pc, #32]	@ (8012b34 <Get_SerialNum+0x54>)
 8012b14:	68b8      	ldr	r0, [r7, #8]
 8012b16:	f000 f80f 	bl	8012b38 <IntToUnicode>
  }
}
 8012b1a:	bf00      	nop
 8012b1c:	3710      	adds	r7, #16
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	08fff800 	.word	0x08fff800
 8012b28:	08fff804 	.word	0x08fff804
 8012b2c:	08fff808 	.word	0x08fff808
 8012b30:	240000ee 	.word	0x240000ee
 8012b34:	240000fe 	.word	0x240000fe

08012b38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b087      	sub	sp, #28
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	4613      	mov	r3, r2
 8012b44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012b46:	2300      	movs	r3, #0
 8012b48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	75fb      	strb	r3, [r7, #23]
 8012b4e:	e027      	b.n	8012ba0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	0f1b      	lsrs	r3, r3, #28
 8012b54:	2b09      	cmp	r3, #9
 8012b56:	d80b      	bhi.n	8012b70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	0f1b      	lsrs	r3, r3, #28
 8012b5c:	b2da      	uxtb	r2, r3
 8012b5e:	7dfb      	ldrb	r3, [r7, #23]
 8012b60:	005b      	lsls	r3, r3, #1
 8012b62:	4619      	mov	r1, r3
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	440b      	add	r3, r1
 8012b68:	3230      	adds	r2, #48	@ 0x30
 8012b6a:	b2d2      	uxtb	r2, r2
 8012b6c:	701a      	strb	r2, [r3, #0]
 8012b6e:	e00a      	b.n	8012b86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	0f1b      	lsrs	r3, r3, #28
 8012b74:	b2da      	uxtb	r2, r3
 8012b76:	7dfb      	ldrb	r3, [r7, #23]
 8012b78:	005b      	lsls	r3, r3, #1
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	440b      	add	r3, r1
 8012b80:	3237      	adds	r2, #55	@ 0x37
 8012b82:	b2d2      	uxtb	r2, r2
 8012b84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	011b      	lsls	r3, r3, #4
 8012b8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012b8c:	7dfb      	ldrb	r3, [r7, #23]
 8012b8e:	005b      	lsls	r3, r3, #1
 8012b90:	3301      	adds	r3, #1
 8012b92:	68ba      	ldr	r2, [r7, #8]
 8012b94:	4413      	add	r3, r2
 8012b96:	2200      	movs	r2, #0
 8012b98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012b9a:	7dfb      	ldrb	r3, [r7, #23]
 8012b9c:	3301      	adds	r3, #1
 8012b9e:	75fb      	strb	r3, [r7, #23]
 8012ba0:	7dfa      	ldrb	r2, [r7, #23]
 8012ba2:	79fb      	ldrb	r3, [r7, #7]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d3d3      	bcc.n	8012b50 <IntToUnicode+0x18>
  }
}
 8012ba8:	bf00      	nop
 8012baa:	bf00      	nop
 8012bac:	371c      	adds	r7, #28
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb4:	4770      	bx	lr
	...

08012bb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b0ba      	sub	sp, #232	@ 0xe8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012bc0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	601a      	str	r2, [r3, #0]
 8012bc8:	605a      	str	r2, [r3, #4]
 8012bca:	609a      	str	r2, [r3, #8]
 8012bcc:	60da      	str	r2, [r3, #12]
 8012bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012bd0:	f107 0310 	add.w	r3, r7, #16
 8012bd4:	22c0      	movs	r2, #192	@ 0xc0
 8012bd6:	2100      	movs	r1, #0
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f000 fb55 	bl	8013288 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	4a43      	ldr	r2, [pc, #268]	@ (8012cf0 <HAL_PCD_MspInit+0x138>)
 8012be4:	4293      	cmp	r3, r2
 8012be6:	d17f      	bne.n	8012ce8 <HAL_PCD_MspInit+0x130>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012be8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8012bec:	f04f 0300 	mov.w	r3, #0
 8012bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8012bf8:	2312      	movs	r3, #18
 8012bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8012bfc:	2302      	movs	r3, #2
 8012bfe:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8012c00:	2303      	movs	r3, #3
 8012c02:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 128;
 8012c04:	2380      	movs	r3, #128	@ 0x80
 8012c06:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8012c08:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8012c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8012c12:	2300      	movs	r3, #0
 8012c14:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8012c16:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8012c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012c1e:	f107 0310 	add.w	r3, r7, #16
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7f8 fd7e 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d001      	beq.n	8012c32 <HAL_PCD_MspInit+0x7a>
    {
      Error_Handler();
 8012c2e:	f7ee fa03 	bl	8001038 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012c32:	f7f7 fd55 	bl	800a6e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012c36:	4b2f      	ldr	r3, [pc, #188]	@ (8012cf4 <HAL_PCD_MspInit+0x13c>)
 8012c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8012c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8012cf4 <HAL_PCD_MspInit+0x13c>)
 8012c3e:	f043 0301 	orr.w	r3, r3, #1
 8012c42:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8012c46:	4b2b      	ldr	r3, [pc, #172]	@ (8012cf4 <HAL_PCD_MspInit+0x13c>)
 8012c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8012c4c:	f003 0301 	and.w	r3, r3, #1
 8012c50:	60fb      	str	r3, [r7, #12]
 8012c52:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012c54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012c58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c62:	2300      	movs	r3, #0
 8012c64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012c68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	4822      	ldr	r0, [pc, #136]	@ (8012cf8 <HAL_PCD_MspInit+0x140>)
 8012c70:	f7f5 f910 	bl	8007e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012c74:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012c78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c7c:	2302      	movs	r3, #2
 8012c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c82:	2300      	movs	r3, #0
 8012c84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c88:	2300      	movs	r3, #0
 8012c8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012c8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012c92:	4619      	mov	r1, r3
 8012c94:	4818      	ldr	r0, [pc, #96]	@ (8012cf8 <HAL_PCD_MspInit+0x140>)
 8012c96:	f7f5 f8fd 	bl	8007e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012c9a:	4b16      	ldr	r3, [pc, #88]	@ (8012cf4 <HAL_PCD_MspInit+0x13c>)
 8012c9c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8012ca0:	4a14      	ldr	r2, [pc, #80]	@ (8012cf4 <HAL_PCD_MspInit+0x13c>)
 8012ca2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012ca6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8012caa:	4b12      	ldr	r3, [pc, #72]	@ (8012cf4 <HAL_PCD_MspInit+0x13c>)
 8012cac:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8012cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012cb4:	60bb      	str	r3, [r7, #8]
 8012cb6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8012cb8:	2200      	movs	r2, #0
 8012cba:	2100      	movs	r1, #0
 8012cbc:	204a      	movs	r0, #74	@ 0x4a
 8012cbe:	f7f1 f9b8 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8012cc2:	204a      	movs	r0, #74	@ 0x4a
 8012cc4:	f7f1 f9cf 	bl	8004066 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8012cc8:	2200      	movs	r2, #0
 8012cca:	2100      	movs	r1, #0
 8012ccc:	204b      	movs	r0, #75	@ 0x4b
 8012cce:	f7f1 f9b0 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8012cd2:	204b      	movs	r0, #75	@ 0x4b
 8012cd4:	f7f1 f9c7 	bl	8004066 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012cd8:	2200      	movs	r2, #0
 8012cda:	2100      	movs	r1, #0
 8012cdc:	204d      	movs	r0, #77	@ 0x4d
 8012cde:	f7f1 f9a8 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012ce2:	204d      	movs	r0, #77	@ 0x4d
 8012ce4:	f7f1 f9bf 	bl	8004066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012ce8:	bf00      	nop
 8012cea:	37e8      	adds	r7, #232	@ 0xe8
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}
 8012cf0:	40040000 	.word	0x40040000
 8012cf4:	58024400 	.word	0x58024400
 8012cf8:	58020000 	.word	0x58020000

08012cfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012d10:	4619      	mov	r1, r3
 8012d12:	4610      	mov	r0, r2
 8012d14:	f7fe fae7 	bl	80112e6 <USBD_LL_SetupStage>
}
 8012d18:	bf00      	nop
 8012d1a:	3708      	adds	r7, #8
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	460b      	mov	r3, r1
 8012d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012d32:	78fa      	ldrb	r2, [r7, #3]
 8012d34:	6879      	ldr	r1, [r7, #4]
 8012d36:	4613      	mov	r3, r2
 8012d38:	00db      	lsls	r3, r3, #3
 8012d3a:	4413      	add	r3, r2
 8012d3c:	009b      	lsls	r3, r3, #2
 8012d3e:	440b      	add	r3, r1
 8012d40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012d44:	681a      	ldr	r2, [r3, #0]
 8012d46:	78fb      	ldrb	r3, [r7, #3]
 8012d48:	4619      	mov	r1, r3
 8012d4a:	f7fe fb21 	bl	8011390 <USBD_LL_DataOutStage>
}
 8012d4e:	bf00      	nop
 8012d50:	3708      	adds	r7, #8
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}

08012d56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d56:	b580      	push	{r7, lr}
 8012d58:	b082      	sub	sp, #8
 8012d5a:	af00      	add	r7, sp, #0
 8012d5c:	6078      	str	r0, [r7, #4]
 8012d5e:	460b      	mov	r3, r1
 8012d60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012d68:	78fa      	ldrb	r2, [r7, #3]
 8012d6a:	6879      	ldr	r1, [r7, #4]
 8012d6c:	4613      	mov	r3, r2
 8012d6e:	00db      	lsls	r3, r3, #3
 8012d70:	4413      	add	r3, r2
 8012d72:	009b      	lsls	r3, r3, #2
 8012d74:	440b      	add	r3, r1
 8012d76:	3320      	adds	r3, #32
 8012d78:	681a      	ldr	r2, [r3, #0]
 8012d7a:	78fb      	ldrb	r3, [r7, #3]
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	f7fe fbba 	bl	80114f6 <USBD_LL_DataInStage>
}
 8012d82:	bf00      	nop
 8012d84:	3708      	adds	r7, #8
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}

08012d8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d8a:	b580      	push	{r7, lr}
 8012d8c:	b082      	sub	sp, #8
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7fe fcf4 	bl	8011786 <USBD_LL_SOF>
}
 8012d9e:	bf00      	nop
 8012da0:	3708      	adds	r7, #8
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}

08012da6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012da6:	b580      	push	{r7, lr}
 8012da8:	b084      	sub	sp, #16
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012dae:	2301      	movs	r3, #1
 8012db0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	79db      	ldrb	r3, [r3, #7]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d102      	bne.n	8012dc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	73fb      	strb	r3, [r7, #15]
 8012dbe:	e008      	b.n	8012dd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	79db      	ldrb	r3, [r3, #7]
 8012dc4:	2b02      	cmp	r3, #2
 8012dc6:	d102      	bne.n	8012dce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	73fb      	strb	r3, [r7, #15]
 8012dcc:	e001      	b.n	8012dd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012dce:	f7ee f933 	bl	8001038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012dd8:	7bfa      	ldrb	r2, [r7, #15]
 8012dda:	4611      	mov	r1, r2
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7fe fc8e 	bl	80116fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7fe fc36 	bl	801165a <USBD_LL_Reset>
}
 8012dee:	bf00      	nop
 8012df0:	3710      	adds	r7, #16
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
	...

08012df8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b082      	sub	sp, #8
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7fe fc89 	bl	801171e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	687a      	ldr	r2, [r7, #4]
 8012e18:	6812      	ldr	r2, [r2, #0]
 8012e1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012e1e:	f043 0301 	orr.w	r3, r3, #1
 8012e22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	7adb      	ldrb	r3, [r3, #11]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d005      	beq.n	8012e38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e2c:	4b04      	ldr	r3, [pc, #16]	@ (8012e40 <HAL_PCD_SuspendCallback+0x48>)
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	4a03      	ldr	r2, [pc, #12]	@ (8012e40 <HAL_PCD_SuspendCallback+0x48>)
 8012e32:	f043 0306 	orr.w	r3, r3, #6
 8012e36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012e38:	bf00      	nop
 8012e3a:	3708      	adds	r7, #8
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}
 8012e40:	e000ed00 	.word	0xe000ed00

08012e44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7fe fc7f 	bl	8011756 <USBD_LL_Resume>
}
 8012e58:	bf00      	nop
 8012e5a:	3708      	adds	r7, #8
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	460b      	mov	r3, r1
 8012e6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e72:	78fa      	ldrb	r2, [r7, #3]
 8012e74:	4611      	mov	r1, r2
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7fe fcd7 	bl	801182a <USBD_LL_IsoOUTIncomplete>
}
 8012e7c:	bf00      	nop
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b082      	sub	sp, #8
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e96:	78fa      	ldrb	r2, [r7, #3]
 8012e98:	4611      	mov	r1, r2
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fe fc93 	bl	80117c6 <USBD_LL_IsoINIncomplete>
}
 8012ea0:	bf00      	nop
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}

08012ea8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7fe fce9 	bl	801188e <USBD_LL_DevConnected>
}
 8012ebc:	bf00      	nop
 8012ebe:	3708      	adds	r7, #8
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}

08012ec4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b082      	sub	sp, #8
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7fe fce6 	bl	80118a4 <USBD_LL_DevDisconnected>
}
 8012ed8:	bf00      	nop
 8012eda:	3708      	adds	r7, #8
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}

08012ee0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b082      	sub	sp, #8
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d140      	bne.n	8012f72 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8012ef0:	4a22      	ldr	r2, [pc, #136]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	4a20      	ldr	r2, [pc, #128]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012efc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8012f00:	4b1e      	ldr	r3, [pc, #120]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f02:	4a1f      	ldr	r2, [pc, #124]	@ (8012f80 <USBD_LL_Init+0xa0>)
 8012f04:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8012f06:	4b1d      	ldr	r3, [pc, #116]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f08:	2209      	movs	r2, #9
 8012f0a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8012f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f0e:	2202      	movs	r2, #2
 8012f10:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8012f12:	4b1a      	ldr	r3, [pc, #104]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f14:	2200      	movs	r2, #0
 8012f16:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8012f18:	4b18      	ldr	r3, [pc, #96]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f1a:	2202      	movs	r2, #2
 8012f1c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8012f1e:	4b17      	ldr	r3, [pc, #92]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f20:	2200      	movs	r2, #0
 8012f22:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8012f24:	4b15      	ldr	r3, [pc, #84]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f26:	2200      	movs	r2, #0
 8012f28:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8012f2a:	4b14      	ldr	r3, [pc, #80]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8012f30:	4b12      	ldr	r3, [pc, #72]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f32:	2201      	movs	r2, #1
 8012f34:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8012f36:	4b11      	ldr	r3, [pc, #68]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f38:	2200      	movs	r2, #0
 8012f3a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8012f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f3e:	2200      	movs	r2, #0
 8012f40:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8012f42:	480e      	ldr	r0, [pc, #56]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f44:	f7f6 f8f1 	bl	800912a <HAL_PCD_Init>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d001      	beq.n	8012f52 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012f4e:	f7ee f873 	bl	8001038 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8012f52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012f56:	4809      	ldr	r0, [pc, #36]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f58:	f7f7 fb47 	bl	800a5ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8012f5c:	2280      	movs	r2, #128	@ 0x80
 8012f5e:	2100      	movs	r1, #0
 8012f60:	4806      	ldr	r0, [pc, #24]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f62:	f7f7 fafb 	bl	800a55c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8012f66:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8012f6a:	2101      	movs	r1, #1
 8012f6c:	4803      	ldr	r0, [pc, #12]	@ (8012f7c <USBD_LL_Init+0x9c>)
 8012f6e:	f7f7 faf5 	bl	800a55c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8012f72:	2300      	movs	r3, #0
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	240019c0 	.word	0x240019c0
 8012f80:	40040000 	.word	0x40040000

08012f84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b084      	sub	sp, #16
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f90:	2300      	movs	r3, #0
 8012f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7f6 f9d1 	bl	8009342 <HAL_PCD_Start>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fa4:	7bfb      	ldrb	r3, [r7, #15]
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f000 f942 	bl	8013230 <USBD_Get_USB_Status>
 8012fac:	4603      	mov	r3, r0
 8012fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3710      	adds	r7, #16
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}

08012fba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b084      	sub	sp, #16
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
 8012fc2:	4608      	mov	r0, r1
 8012fc4:	4611      	mov	r1, r2
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	4603      	mov	r3, r0
 8012fca:	70fb      	strb	r3, [r7, #3]
 8012fcc:	460b      	mov	r3, r1
 8012fce:	70bb      	strb	r3, [r7, #2]
 8012fd0:	4613      	mov	r3, r2
 8012fd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012fe2:	78bb      	ldrb	r3, [r7, #2]
 8012fe4:	883a      	ldrh	r2, [r7, #0]
 8012fe6:	78f9      	ldrb	r1, [r7, #3]
 8012fe8:	f7f6 fed2 	bl	8009d90 <HAL_PCD_EP_Open>
 8012fec:	4603      	mov	r3, r0
 8012fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ff0:	7bfb      	ldrb	r3, [r7, #15]
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f000 f91c 	bl	8013230 <USBD_Get_USB_Status>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3710      	adds	r7, #16
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}

08013006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013006:	b580      	push	{r7, lr}
 8013008:	b084      	sub	sp, #16
 801300a:	af00      	add	r7, sp, #0
 801300c:	6078      	str	r0, [r7, #4]
 801300e:	460b      	mov	r3, r1
 8013010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013012:	2300      	movs	r3, #0
 8013014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013016:	2300      	movs	r3, #0
 8013018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013020:	78fa      	ldrb	r2, [r7, #3]
 8013022:	4611      	mov	r1, r2
 8013024:	4618      	mov	r0, r3
 8013026:	f7f6 ff1d 	bl	8009e64 <HAL_PCD_EP_Close>
 801302a:	4603      	mov	r3, r0
 801302c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801302e:	7bfb      	ldrb	r3, [r7, #15]
 8013030:	4618      	mov	r0, r3
 8013032:	f000 f8fd 	bl	8013230 <USBD_Get_USB_Status>
 8013036:	4603      	mov	r3, r0
 8013038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801303a:	7bbb      	ldrb	r3, [r7, #14]
}
 801303c:	4618      	mov	r0, r3
 801303e:	3710      	adds	r7, #16
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}

08013044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b084      	sub	sp, #16
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	460b      	mov	r3, r1
 801304e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013050:	2300      	movs	r3, #0
 8013052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013054:	2300      	movs	r3, #0
 8013056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801305e:	78fa      	ldrb	r2, [r7, #3]
 8013060:	4611      	mov	r1, r2
 8013062:	4618      	mov	r0, r3
 8013064:	f7f6 ffd5 	bl	800a012 <HAL_PCD_EP_SetStall>
 8013068:	4603      	mov	r3, r0
 801306a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801306c:	7bfb      	ldrb	r3, [r7, #15]
 801306e:	4618      	mov	r0, r3
 8013070:	f000 f8de 	bl	8013230 <USBD_Get_USB_Status>
 8013074:	4603      	mov	r3, r0
 8013076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013078:	7bbb      	ldrb	r3, [r7, #14]
}
 801307a:	4618      	mov	r0, r3
 801307c:	3710      	adds	r7, #16
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}

08013082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013082:	b580      	push	{r7, lr}
 8013084:	b084      	sub	sp, #16
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
 801308a:	460b      	mov	r3, r1
 801308c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801308e:	2300      	movs	r3, #0
 8013090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013092:	2300      	movs	r3, #0
 8013094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801309c:	78fa      	ldrb	r2, [r7, #3]
 801309e:	4611      	mov	r1, r2
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7f7 f819 	bl	800a0d8 <HAL_PCD_EP_ClrStall>
 80130a6:	4603      	mov	r3, r0
 80130a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80130aa:	7bfb      	ldrb	r3, [r7, #15]
 80130ac:	4618      	mov	r0, r3
 80130ae:	f000 f8bf 	bl	8013230 <USBD_Get_USB_Status>
 80130b2:	4603      	mov	r3, r0
 80130b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3710      	adds	r7, #16
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80130c0:	b480      	push	{r7}
 80130c2:	b085      	sub	sp, #20
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	460b      	mov	r3, r1
 80130ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80130d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80130d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	da0b      	bge.n	80130f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80130dc:	78fb      	ldrb	r3, [r7, #3]
 80130de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80130e2:	68f9      	ldr	r1, [r7, #12]
 80130e4:	4613      	mov	r3, r2
 80130e6:	00db      	lsls	r3, r3, #3
 80130e8:	4413      	add	r3, r2
 80130ea:	009b      	lsls	r3, r3, #2
 80130ec:	440b      	add	r3, r1
 80130ee:	3316      	adds	r3, #22
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	e00b      	b.n	801310c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80130f4:	78fb      	ldrb	r3, [r7, #3]
 80130f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80130fa:	68f9      	ldr	r1, [r7, #12]
 80130fc:	4613      	mov	r3, r2
 80130fe:	00db      	lsls	r3, r3, #3
 8013100:	4413      	add	r3, r2
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	440b      	add	r3, r1
 8013106:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801310a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801310c:	4618      	mov	r0, r3
 801310e:	3714      	adds	r7, #20
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr

08013118 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b084      	sub	sp, #16
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	460b      	mov	r3, r1
 8013122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013124:	2300      	movs	r3, #0
 8013126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013128:	2300      	movs	r3, #0
 801312a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013132:	78fa      	ldrb	r2, [r7, #3]
 8013134:	4611      	mov	r1, r2
 8013136:	4618      	mov	r0, r3
 8013138:	f7f6 fe06 	bl	8009d48 <HAL_PCD_SetAddress>
 801313c:	4603      	mov	r3, r0
 801313e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013140:	7bfb      	ldrb	r3, [r7, #15]
 8013142:	4618      	mov	r0, r3
 8013144:	f000 f874 	bl	8013230 <USBD_Get_USB_Status>
 8013148:	4603      	mov	r3, r0
 801314a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801314c:	7bbb      	ldrb	r3, [r7, #14]
}
 801314e:	4618      	mov	r0, r3
 8013150:	3710      	adds	r7, #16
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}

08013156 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013156:	b580      	push	{r7, lr}
 8013158:	b086      	sub	sp, #24
 801315a:	af00      	add	r7, sp, #0
 801315c:	60f8      	str	r0, [r7, #12]
 801315e:	607a      	str	r2, [r7, #4]
 8013160:	603b      	str	r3, [r7, #0]
 8013162:	460b      	mov	r3, r1
 8013164:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013166:	2300      	movs	r3, #0
 8013168:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801316a:	2300      	movs	r3, #0
 801316c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013174:	7af9      	ldrb	r1, [r7, #11]
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	687a      	ldr	r2, [r7, #4]
 801317a:	f7f6 ff10 	bl	8009f9e <HAL_PCD_EP_Transmit>
 801317e:	4603      	mov	r3, r0
 8013180:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013182:	7dfb      	ldrb	r3, [r7, #23]
 8013184:	4618      	mov	r0, r3
 8013186:	f000 f853 	bl	8013230 <USBD_Get_USB_Status>
 801318a:	4603      	mov	r3, r0
 801318c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801318e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013190:	4618      	mov	r0, r3
 8013192:	3718      	adds	r7, #24
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}

08013198 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b086      	sub	sp, #24
 801319c:	af00      	add	r7, sp, #0
 801319e:	60f8      	str	r0, [r7, #12]
 80131a0:	607a      	str	r2, [r7, #4]
 80131a2:	603b      	str	r3, [r7, #0]
 80131a4:	460b      	mov	r3, r1
 80131a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131a8:	2300      	movs	r3, #0
 80131aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131ac:	2300      	movs	r3, #0
 80131ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80131b6:	7af9      	ldrb	r1, [r7, #11]
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	687a      	ldr	r2, [r7, #4]
 80131bc:	f7f6 fe9c 	bl	8009ef8 <HAL_PCD_EP_Receive>
 80131c0:	4603      	mov	r3, r0
 80131c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131c4:	7dfb      	ldrb	r3, [r7, #23]
 80131c6:	4618      	mov	r0, r3
 80131c8:	f000 f832 	bl	8013230 <USBD_Get_USB_Status>
 80131cc:	4603      	mov	r3, r0
 80131ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80131d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3718      	adds	r7, #24
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}

080131da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131da:	b580      	push	{r7, lr}
 80131dc:	b082      	sub	sp, #8
 80131de:	af00      	add	r7, sp, #0
 80131e0:	6078      	str	r0, [r7, #4]
 80131e2:	460b      	mov	r3, r1
 80131e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80131ec:	78fa      	ldrb	r2, [r7, #3]
 80131ee:	4611      	mov	r1, r2
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7f6 febc 	bl	8009f6e <HAL_PCD_EP_GetRxCount>
 80131f6:	4603      	mov	r3, r0
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3708      	adds	r7, #8
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}

08013200 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013200:	b480      	push	{r7}
 8013202:	b083      	sub	sp, #12
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013208:	4b03      	ldr	r3, [pc, #12]	@ (8013218 <USBD_static_malloc+0x18>)
}
 801320a:	4618      	mov	r0, r3
 801320c:	370c      	adds	r7, #12
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop
 8013218:	24001ea4 	.word	0x24001ea4

0801321c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801321c:	b480      	push	{r7}
 801321e:	b083      	sub	sp, #12
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013224:	bf00      	nop
 8013226:	370c      	adds	r7, #12
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr

08013230 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013230:	b480      	push	{r7}
 8013232:	b085      	sub	sp, #20
 8013234:	af00      	add	r7, sp, #0
 8013236:	4603      	mov	r3, r0
 8013238:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801323a:	2300      	movs	r3, #0
 801323c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801323e:	79fb      	ldrb	r3, [r7, #7]
 8013240:	2b03      	cmp	r3, #3
 8013242:	d817      	bhi.n	8013274 <USBD_Get_USB_Status+0x44>
 8013244:	a201      	add	r2, pc, #4	@ (adr r2, 801324c <USBD_Get_USB_Status+0x1c>)
 8013246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801324a:	bf00      	nop
 801324c:	0801325d 	.word	0x0801325d
 8013250:	08013263 	.word	0x08013263
 8013254:	08013269 	.word	0x08013269
 8013258:	0801326f 	.word	0x0801326f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801325c:	2300      	movs	r3, #0
 801325e:	73fb      	strb	r3, [r7, #15]
    break;
 8013260:	e00b      	b.n	801327a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013262:	2303      	movs	r3, #3
 8013264:	73fb      	strb	r3, [r7, #15]
    break;
 8013266:	e008      	b.n	801327a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013268:	2301      	movs	r3, #1
 801326a:	73fb      	strb	r3, [r7, #15]
    break;
 801326c:	e005      	b.n	801327a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801326e:	2303      	movs	r3, #3
 8013270:	73fb      	strb	r3, [r7, #15]
    break;
 8013272:	e002      	b.n	801327a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013274:	2303      	movs	r3, #3
 8013276:	73fb      	strb	r3, [r7, #15]
    break;
 8013278:	bf00      	nop
  }
  return usb_status;
 801327a:	7bfb      	ldrb	r3, [r7, #15]
}
 801327c:	4618      	mov	r0, r3
 801327e:	3714      	adds	r7, #20
 8013280:	46bd      	mov	sp, r7
 8013282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013286:	4770      	bx	lr

08013288 <memset>:
 8013288:	4402      	add	r2, r0
 801328a:	4603      	mov	r3, r0
 801328c:	4293      	cmp	r3, r2
 801328e:	d100      	bne.n	8013292 <memset+0xa>
 8013290:	4770      	bx	lr
 8013292:	f803 1b01 	strb.w	r1, [r3], #1
 8013296:	e7f9      	b.n	801328c <memset+0x4>

08013298 <__libc_init_array>:
 8013298:	b570      	push	{r4, r5, r6, lr}
 801329a:	4d0d      	ldr	r5, [pc, #52]	@ (80132d0 <__libc_init_array+0x38>)
 801329c:	4c0d      	ldr	r4, [pc, #52]	@ (80132d4 <__libc_init_array+0x3c>)
 801329e:	1b64      	subs	r4, r4, r5
 80132a0:	10a4      	asrs	r4, r4, #2
 80132a2:	2600      	movs	r6, #0
 80132a4:	42a6      	cmp	r6, r4
 80132a6:	d109      	bne.n	80132bc <__libc_init_array+0x24>
 80132a8:	4d0b      	ldr	r5, [pc, #44]	@ (80132d8 <__libc_init_array+0x40>)
 80132aa:	4c0c      	ldr	r4, [pc, #48]	@ (80132dc <__libc_init_array+0x44>)
 80132ac:	f000 f826 	bl	80132fc <_init>
 80132b0:	1b64      	subs	r4, r4, r5
 80132b2:	10a4      	asrs	r4, r4, #2
 80132b4:	2600      	movs	r6, #0
 80132b6:	42a6      	cmp	r6, r4
 80132b8:	d105      	bne.n	80132c6 <__libc_init_array+0x2e>
 80132ba:	bd70      	pop	{r4, r5, r6, pc}
 80132bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80132c0:	4798      	blx	r3
 80132c2:	3601      	adds	r6, #1
 80132c4:	e7ee      	b.n	80132a4 <__libc_init_array+0xc>
 80132c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80132ca:	4798      	blx	r3
 80132cc:	3601      	adds	r6, #1
 80132ce:	e7f2      	b.n	80132b6 <__libc_init_array+0x1e>
 80132d0:	080134c4 	.word	0x080134c4
 80132d4:	080134c4 	.word	0x080134c4
 80132d8:	080134c4 	.word	0x080134c4
 80132dc:	080134c8 	.word	0x080134c8

080132e0 <memcpy>:
 80132e0:	440a      	add	r2, r1
 80132e2:	4291      	cmp	r1, r2
 80132e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80132e8:	d100      	bne.n	80132ec <memcpy+0xc>
 80132ea:	4770      	bx	lr
 80132ec:	b510      	push	{r4, lr}
 80132ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132f6:	4291      	cmp	r1, r2
 80132f8:	d1f9      	bne.n	80132ee <memcpy+0xe>
 80132fa:	bd10      	pop	{r4, pc}

080132fc <_init>:
 80132fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132fe:	bf00      	nop
 8013300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013302:	bc08      	pop	{r3}
 8013304:	469e      	mov	lr, r3
 8013306:	4770      	bx	lr

08013308 <_fini>:
 8013308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801330a:	bf00      	nop
 801330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801330e:	bc08      	pop	{r3}
 8013310:	469e      	mov	lr, r3
 8013312:	4770      	bx	lr
